
nrf24l01-node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008bfc  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000078  20000000  00008bfc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000016c  20000078  00008c74  00020078  2**2
                  ALLOC
  3 .stack        00002004  200001e4  00008de0  00020078  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
  6 .debug_info   0002eb02  00000000  00000000  000200f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003b5c  00000000  00000000  0004ebfb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000298c  00000000  00000000  00052757  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000818  00000000  00000000  000550e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000006c0  00000000  00000000  000558fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001c5fb  00000000  00000000  00055fbb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000f9f2  00000000  00000000  000725b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008cf98  00000000  00000000  00081fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002218  00000000  00000000  0010ef40  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	e8 21 00 20 dd 43 00 00 d5 44 00 00 d5 44 00 00     .!. .C...D...D..
	...
      2c:	d5 44 00 00 00 00 00 00 00 00 00 00 d5 44 00 00     .D...........D..
      3c:	d5 44 00 00 d5 44 00 00 d5 44 00 00 d5 44 00 00     .D...D...D...D..
      4c:	d5 44 00 00 8d 02 00 00 d5 44 00 00 d5 44 00 00     .D.......D...D..
      5c:	d5 44 00 00 d5 44 00 00 d5 44 00 00 d5 44 00 00     .D...D...D...D..
      6c:	d5 44 00 00 d5 44 00 00 d5 44 00 00 d5 44 00 00     .D...D...D...D..
      7c:	d5 44 00 00 d5 44 00 00 d5 44 00 00 d5 44 00 00     .D...D...D...D..
      8c:	d5 44 00 00 d5 44 00 00 d5 44 00 00 d5 44 00 00     .D...D...D...D..
      9c:	d5 44 00 00 d5 44 00 00 d5 44 00 00 d5 44 00 00     .D...D...D...D..
      ac:	d5 44 00 00 00 00 00 00                             .D......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000078 	.word	0x20000078
      d4:	00000000 	.word	0x00000000
      d8:	00008bfc 	.word	0x00008bfc

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	2000007c 	.word	0x2000007c
     108:	00008bfc 	.word	0x00008bfc
     10c:	00008bfc 	.word	0x00008bfc
     110:	00000000 	.word	0x00000000

00000114 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
     114:	b580      	push	{r7, lr}
     116:	b084      	sub	sp, #16
     118:	af00      	add	r7, sp, #0
     11a:	0002      	movs	r2, r0
     11c:	1dfb      	adds	r3, r7, #7
     11e:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
     120:	230f      	movs	r3, #15
     122:	18fb      	adds	r3, r7, r3
     124:	1dfa      	adds	r2, r7, #7
     126:	7812      	ldrb	r2, [r2, #0]
     128:	0952      	lsrs	r2, r2, #5
     12a:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
     12c:	230f      	movs	r3, #15
     12e:	18fb      	adds	r3, r7, r3
     130:	781b      	ldrb	r3, [r3, #0]
     132:	2b00      	cmp	r3, #0
     134:	d10c      	bne.n	150 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     136:	4b09      	ldr	r3, [pc, #36]	; (15c <_extint_get_eic_from_channel+0x48>)
     138:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
     13a:	230f      	movs	r3, #15
     13c:	18fb      	adds	r3, r7, r3
     13e:	781b      	ldrb	r3, [r3, #0]
     140:	009b      	lsls	r3, r3, #2
     142:	2210      	movs	r2, #16
     144:	4694      	mov	ip, r2
     146:	44bc      	add	ip, r7
     148:	4463      	add	r3, ip
     14a:	3b08      	subs	r3, #8
     14c:	681b      	ldr	r3, [r3, #0]
     14e:	e000      	b.n	152 <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
     150:	2300      	movs	r3, #0
	}
}
     152:	0018      	movs	r0, r3
     154:	46bd      	mov	sp, r7
     156:	b004      	add	sp, #16
     158:	bd80      	pop	{r7, pc}
     15a:	46c0      	nop			; (mov r8, r8)
     15c:	40001800 	.word	0x40001800

00000160 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
     160:	b580      	push	{r7, lr}
     162:	b084      	sub	sp, #16
     164:	af00      	add	r7, sp, #0
     166:	0002      	movs	r2, r0
     168:	1dfb      	adds	r3, r7, #7
     16a:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
     16c:	1dfb      	adds	r3, r7, #7
     16e:	781b      	ldrb	r3, [r3, #0]
     170:	0018      	movs	r0, r3
     172:	4b0b      	ldr	r3, [pc, #44]	; (1a0 <extint_chan_is_detected+0x40>)
     174:	4798      	blx	r3
     176:	0003      	movs	r3, r0
     178:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
     17a:	1dfb      	adds	r3, r7, #7
     17c:	781b      	ldrb	r3, [r3, #0]
     17e:	221f      	movs	r2, #31
     180:	4013      	ands	r3, r2
     182:	2201      	movs	r2, #1
     184:	409a      	lsls	r2, r3
     186:	0013      	movs	r3, r2
     188:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
     18a:	68fb      	ldr	r3, [r7, #12]
     18c:	691b      	ldr	r3, [r3, #16]
     18e:	68ba      	ldr	r2, [r7, #8]
     190:	4013      	ands	r3, r2
     192:	1e5a      	subs	r2, r3, #1
     194:	4193      	sbcs	r3, r2
     196:	b2db      	uxtb	r3, r3
}
     198:	0018      	movs	r0, r3
     19a:	46bd      	mov	sp, r7
     19c:	b004      	add	sp, #16
     19e:	bd80      	pop	{r7, pc}
     1a0:	00000115 	.word	0x00000115

000001a4 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
     1a4:	b580      	push	{r7, lr}
     1a6:	b084      	sub	sp, #16
     1a8:	af00      	add	r7, sp, #0
     1aa:	0002      	movs	r2, r0
     1ac:	1dfb      	adds	r3, r7, #7
     1ae:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
     1b0:	1dfb      	adds	r3, r7, #7
     1b2:	781b      	ldrb	r3, [r3, #0]
     1b4:	0018      	movs	r0, r3
     1b6:	4b09      	ldr	r3, [pc, #36]	; (1dc <extint_chan_clear_detected+0x38>)
     1b8:	4798      	blx	r3
     1ba:	0003      	movs	r3, r0
     1bc:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
     1be:	1dfb      	adds	r3, r7, #7
     1c0:	781b      	ldrb	r3, [r3, #0]
     1c2:	221f      	movs	r2, #31
     1c4:	4013      	ands	r3, r2
     1c6:	2201      	movs	r2, #1
     1c8:	409a      	lsls	r2, r3
     1ca:	0013      	movs	r3, r2
     1cc:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
     1ce:	68fb      	ldr	r3, [r7, #12]
     1d0:	68ba      	ldr	r2, [r7, #8]
     1d2:	611a      	str	r2, [r3, #16]
}
     1d4:	46c0      	nop			; (mov r8, r8)
     1d6:	46bd      	mov	sp, r7
     1d8:	b004      	add	sp, #16
     1da:	bd80      	pop	{r7, pc}
     1dc:	00000115 	.word	0x00000115

000001e0 <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
     1e0:	b580      	push	{r7, lr}
     1e2:	b082      	sub	sp, #8
     1e4:	af00      	add	r7, sp, #0
     1e6:	6078      	str	r0, [r7, #4]
     1e8:	0008      	movs	r0, r1
     1ea:	0011      	movs	r1, r2
     1ec:	1cfb      	adds	r3, r7, #3
     1ee:	1c02      	adds	r2, r0, #0
     1f0:	701a      	strb	r2, [r3, #0]
     1f2:	1cbb      	adds	r3, r7, #2
     1f4:	1c0a      	adds	r2, r1, #0
     1f6:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
     1f8:	1cbb      	adds	r3, r7, #2
     1fa:	781b      	ldrb	r3, [r3, #0]
     1fc:	2b00      	cmp	r3, #0
     1fe:	d001      	beq.n	204 <extint_register_callback+0x24>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     200:	2317      	movs	r3, #23
     202:	e019      	b.n	238 <extint_register_callback+0x58>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
     204:	1cfb      	adds	r3, r7, #3
     206:	781a      	ldrb	r2, [r3, #0]
     208:	4b0d      	ldr	r3, [pc, #52]	; (240 <extint_register_callback+0x60>)
     20a:	0092      	lsls	r2, r2, #2
     20c:	58d3      	ldr	r3, [r2, r3]
     20e:	2b00      	cmp	r3, #0
     210:	d107      	bne.n	222 <extint_register_callback+0x42>
		_extint_dev.callbacks[channel] = callback;
     212:	1cfb      	adds	r3, r7, #3
     214:	781a      	ldrb	r2, [r3, #0]
     216:	4b0a      	ldr	r3, [pc, #40]	; (240 <extint_register_callback+0x60>)
     218:	0092      	lsls	r2, r2, #2
     21a:	6879      	ldr	r1, [r7, #4]
     21c:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
     21e:	2300      	movs	r3, #0
     220:	e00a      	b.n	238 <extint_register_callback+0x58>
	} else if (_extint_dev.callbacks[channel] == callback) {
     222:	1cfb      	adds	r3, r7, #3
     224:	781a      	ldrb	r2, [r3, #0]
     226:	4b06      	ldr	r3, [pc, #24]	; (240 <extint_register_callback+0x60>)
     228:	0092      	lsls	r2, r2, #2
     22a:	58d2      	ldr	r2, [r2, r3]
     22c:	687b      	ldr	r3, [r7, #4]
     22e:	429a      	cmp	r2, r3
     230:	d101      	bne.n	236 <extint_register_callback+0x56>
		return STATUS_OK;
     232:	2300      	movs	r3, #0
     234:	e000      	b.n	238 <extint_register_callback+0x58>
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
     236:	231d      	movs	r3, #29
}
     238:	0018      	movs	r0, r3
     23a:	46bd      	mov	sp, r7
     23c:	b002      	add	sp, #8
     23e:	bd80      	pop	{r7, pc}
     240:	200000c8 	.word	0x200000c8

00000244 <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
     244:	b580      	push	{r7, lr}
     246:	b084      	sub	sp, #16
     248:	af00      	add	r7, sp, #0
     24a:	0002      	movs	r2, r0
     24c:	1dfb      	adds	r3, r7, #7
     24e:	701a      	strb	r2, [r3, #0]
     250:	1dbb      	adds	r3, r7, #6
     252:	1c0a      	adds	r2, r1, #0
     254:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
     256:	1dbb      	adds	r3, r7, #6
     258:	781b      	ldrb	r3, [r3, #0]
     25a:	2b00      	cmp	r3, #0
     25c:	d10e      	bne.n	27c <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
     25e:	1dfb      	adds	r3, r7, #7
     260:	781b      	ldrb	r3, [r3, #0]
     262:	0018      	movs	r0, r3
     264:	4b08      	ldr	r3, [pc, #32]	; (288 <extint_chan_enable_callback+0x44>)
     266:	4798      	blx	r3
     268:	0003      	movs	r3, r0
     26a:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
     26c:	1dfb      	adds	r3, r7, #7
     26e:	781b      	ldrb	r3, [r3, #0]
     270:	2201      	movs	r2, #1
     272:	409a      	lsls	r2, r3
     274:	68fb      	ldr	r3, [r7, #12]
     276:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     278:	2300      	movs	r3, #0
     27a:	e000      	b.n	27e <extint_chan_enable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
     27c:	2317      	movs	r3, #23
}
     27e:	0018      	movs	r0, r3
     280:	46bd      	mov	sp, r7
     282:	b004      	add	sp, #16
     284:	bd80      	pop	{r7, pc}
     286:	46c0      	nop			; (mov r8, r8)
     288:	00000115 	.word	0x00000115

0000028c <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     28c:	b580      	push	{r7, lr}
     28e:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     290:	4b15      	ldr	r3, [pc, #84]	; (2e8 <EIC_Handler+0x5c>)
     292:	2200      	movs	r2, #0
     294:	701a      	strb	r2, [r3, #0]
     296:	e020      	b.n	2da <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
     298:	4b13      	ldr	r3, [pc, #76]	; (2e8 <EIC_Handler+0x5c>)
     29a:	781b      	ldrb	r3, [r3, #0]
     29c:	0018      	movs	r0, r3
     29e:	4b13      	ldr	r3, [pc, #76]	; (2ec <EIC_Handler+0x60>)
     2a0:	4798      	blx	r3
     2a2:	1e03      	subs	r3, r0, #0
     2a4:	d013      	beq.n	2ce <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
     2a6:	4b10      	ldr	r3, [pc, #64]	; (2e8 <EIC_Handler+0x5c>)
     2a8:	781b      	ldrb	r3, [r3, #0]
     2aa:	0018      	movs	r0, r3
     2ac:	4b10      	ldr	r3, [pc, #64]	; (2f0 <EIC_Handler+0x64>)
     2ae:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     2b0:	4b0d      	ldr	r3, [pc, #52]	; (2e8 <EIC_Handler+0x5c>)
     2b2:	781b      	ldrb	r3, [r3, #0]
     2b4:	001a      	movs	r2, r3
     2b6:	4b0f      	ldr	r3, [pc, #60]	; (2f4 <EIC_Handler+0x68>)
     2b8:	0092      	lsls	r2, r2, #2
     2ba:	58d3      	ldr	r3, [r2, r3]
     2bc:	2b00      	cmp	r3, #0
     2be:	d006      	beq.n	2ce <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     2c0:	4b09      	ldr	r3, [pc, #36]	; (2e8 <EIC_Handler+0x5c>)
     2c2:	781b      	ldrb	r3, [r3, #0]
     2c4:	001a      	movs	r2, r3
     2c6:	4b0b      	ldr	r3, [pc, #44]	; (2f4 <EIC_Handler+0x68>)
     2c8:	0092      	lsls	r2, r2, #2
     2ca:	58d3      	ldr	r3, [r2, r3]
     2cc:	4798      	blx	r3
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     2ce:	4b06      	ldr	r3, [pc, #24]	; (2e8 <EIC_Handler+0x5c>)
     2d0:	781b      	ldrb	r3, [r3, #0]
     2d2:	3301      	adds	r3, #1
     2d4:	b2da      	uxtb	r2, r3
     2d6:	4b04      	ldr	r3, [pc, #16]	; (2e8 <EIC_Handler+0x5c>)
     2d8:	701a      	strb	r2, [r3, #0]
     2da:	4b03      	ldr	r3, [pc, #12]	; (2e8 <EIC_Handler+0x5c>)
     2dc:	781b      	ldrb	r3, [r3, #0]
     2de:	2b0f      	cmp	r3, #15
     2e0:	d9da      	bls.n	298 <EIC_Handler+0xc>
			}
		}
	}
}
     2e2:	46c0      	nop			; (mov r8, r8)
     2e4:	46bd      	mov	sp, r7
     2e6:	bd80      	pop	{r7, pc}
     2e8:	200000c4 	.word	0x200000c4
     2ec:	00000161 	.word	0x00000161
     2f0:	000001a5 	.word	0x000001a5
     2f4:	200000c8 	.word	0x200000c8

000002f8 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     2f8:	b580      	push	{r7, lr}
     2fa:	b082      	sub	sp, #8
     2fc:	af00      	add	r7, sp, #0
     2fe:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     300:	687b      	ldr	r3, [r7, #4]
     302:	2200      	movs	r2, #0
     304:	701a      	strb	r2, [r3, #0]
}
     306:	46c0      	nop			; (mov r8, r8)
     308:	46bd      	mov	sp, r7
     30a:	b002      	add	sp, #8
     30c:	bd80      	pop	{r7, pc}
	...

00000310 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     310:	b580      	push	{r7, lr}
     312:	b082      	sub	sp, #8
     314:	af00      	add	r7, sp, #0
     316:	0002      	movs	r2, r0
     318:	6039      	str	r1, [r7, #0]
     31a:	1dfb      	adds	r3, r7, #7
     31c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     31e:	1dfb      	adds	r3, r7, #7
     320:	781b      	ldrb	r3, [r3, #0]
     322:	2b01      	cmp	r3, #1
     324:	d00a      	beq.n	33c <system_apb_clock_set_mask+0x2c>
     326:	2b02      	cmp	r3, #2
     328:	d00f      	beq.n	34a <system_apb_clock_set_mask+0x3a>
     32a:	2b00      	cmp	r3, #0
     32c:	d114      	bne.n	358 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     32e:	4b0e      	ldr	r3, [pc, #56]	; (368 <system_apb_clock_set_mask+0x58>)
     330:	4a0d      	ldr	r2, [pc, #52]	; (368 <system_apb_clock_set_mask+0x58>)
     332:	6991      	ldr	r1, [r2, #24]
     334:	683a      	ldr	r2, [r7, #0]
     336:	430a      	orrs	r2, r1
     338:	619a      	str	r2, [r3, #24]
			break;
     33a:	e00f      	b.n	35c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     33c:	4b0a      	ldr	r3, [pc, #40]	; (368 <system_apb_clock_set_mask+0x58>)
     33e:	4a0a      	ldr	r2, [pc, #40]	; (368 <system_apb_clock_set_mask+0x58>)
     340:	69d1      	ldr	r1, [r2, #28]
     342:	683a      	ldr	r2, [r7, #0]
     344:	430a      	orrs	r2, r1
     346:	61da      	str	r2, [r3, #28]
			break;
     348:	e008      	b.n	35c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     34a:	4b07      	ldr	r3, [pc, #28]	; (368 <system_apb_clock_set_mask+0x58>)
     34c:	4a06      	ldr	r2, [pc, #24]	; (368 <system_apb_clock_set_mask+0x58>)
     34e:	6a11      	ldr	r1, [r2, #32]
     350:	683a      	ldr	r2, [r7, #0]
     352:	430a      	orrs	r2, r1
     354:	621a      	str	r2, [r3, #32]
			break;
     356:	e001      	b.n	35c <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     358:	2317      	movs	r3, #23
     35a:	e000      	b.n	35e <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     35c:	2300      	movs	r3, #0
}
     35e:	0018      	movs	r0, r3
     360:	46bd      	mov	sp, r7
     362:	b002      	add	sp, #8
     364:	bd80      	pop	{r7, pc}
     366:	46c0      	nop			; (mov r8, r8)
     368:	40000400 	.word	0x40000400

0000036c <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
     36c:	b580      	push	{r7, lr}
     36e:	b082      	sub	sp, #8
     370:	af00      	add	r7, sp, #0
     372:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     374:	687b      	ldr	r3, [r7, #4]
     376:	2280      	movs	r2, #128	; 0x80
     378:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     37a:	687b      	ldr	r3, [r7, #4]
     37c:	2200      	movs	r2, #0
     37e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     380:	687b      	ldr	r3, [r7, #4]
     382:	2201      	movs	r2, #1
     384:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     386:	687b      	ldr	r3, [r7, #4]
     388:	2200      	movs	r2, #0
     38a:	70da      	strb	r2, [r3, #3]
}
     38c:	46c0      	nop			; (mov r8, r8)
     38e:	46bd      	mov	sp, r7
     390:	b002      	add	sp, #8
     392:	bd80      	pop	{r7, pc}

00000394 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
     394:	b580      	push	{r7, lr}
     396:	b082      	sub	sp, #8
     398:	af00      	add	r7, sp, #0
     39a:	0002      	movs	r2, r0
     39c:	1dfb      	adds	r3, r7, #7
     39e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     3a0:	4b06      	ldr	r3, [pc, #24]	; (3bc <system_interrupt_enable+0x28>)
     3a2:	1dfa      	adds	r2, r7, #7
     3a4:	7812      	ldrb	r2, [r2, #0]
     3a6:	0011      	movs	r1, r2
     3a8:	221f      	movs	r2, #31
     3aa:	400a      	ands	r2, r1
     3ac:	2101      	movs	r1, #1
     3ae:	4091      	lsls	r1, r2
     3b0:	000a      	movs	r2, r1
     3b2:	601a      	str	r2, [r3, #0]
}
     3b4:	46c0      	nop			; (mov r8, r8)
     3b6:	46bd      	mov	sp, r7
     3b8:	b002      	add	sp, #8
     3ba:	bd80      	pop	{r7, pc}
     3bc:	e000e100 	.word	0xe000e100

000003c0 <_extint_get_eic_from_channel>:
{
     3c0:	b580      	push	{r7, lr}
     3c2:	b084      	sub	sp, #16
     3c4:	af00      	add	r7, sp, #0
     3c6:	0002      	movs	r2, r0
     3c8:	1dfb      	adds	r3, r7, #7
     3ca:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
     3cc:	230f      	movs	r3, #15
     3ce:	18fb      	adds	r3, r7, r3
     3d0:	1dfa      	adds	r2, r7, #7
     3d2:	7812      	ldrb	r2, [r2, #0]
     3d4:	0952      	lsrs	r2, r2, #5
     3d6:	701a      	strb	r2, [r3, #0]
	if (eic_index < EIC_INST_NUM) {
     3d8:	230f      	movs	r3, #15
     3da:	18fb      	adds	r3, r7, r3
     3dc:	781b      	ldrb	r3, [r3, #0]
     3de:	2b00      	cmp	r3, #0
     3e0:	d10c      	bne.n	3fc <_extint_get_eic_from_channel+0x3c>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     3e2:	4b09      	ldr	r3, [pc, #36]	; (408 <_extint_get_eic_from_channel+0x48>)
     3e4:	60bb      	str	r3, [r7, #8]
		return eics[eic_index];
     3e6:	230f      	movs	r3, #15
     3e8:	18fb      	adds	r3, r7, r3
     3ea:	781b      	ldrb	r3, [r3, #0]
     3ec:	009b      	lsls	r3, r3, #2
     3ee:	2210      	movs	r2, #16
     3f0:	4694      	mov	ip, r2
     3f2:	44bc      	add	ip, r7
     3f4:	4463      	add	r3, ip
     3f6:	3b08      	subs	r3, #8
     3f8:	681b      	ldr	r3, [r3, #0]
     3fa:	e000      	b.n	3fe <_extint_get_eic_from_channel+0x3e>
		return NULL;
     3fc:	2300      	movs	r3, #0
}
     3fe:	0018      	movs	r0, r3
     400:	46bd      	mov	sp, r7
     402:	b004      	add	sp, #16
     404:	bd80      	pop	{r7, pc}
     406:	46c0      	nop			; (mov r8, r8)
     408:	40001800 	.word	0x40001800

0000040c <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
     40c:	b580      	push	{r7, lr}
     40e:	b082      	sub	sp, #8
     410:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     412:	4b0f      	ldr	r3, [pc, #60]	; (450 <extint_is_syncing+0x44>)
     414:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     416:	2300      	movs	r3, #0
     418:	607b      	str	r3, [r7, #4]
     41a:	e011      	b.n	440 <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     41c:	687b      	ldr	r3, [r7, #4]
     41e:	009b      	lsls	r3, r3, #2
     420:	2208      	movs	r2, #8
     422:	4694      	mov	ip, r2
     424:	44bc      	add	ip, r7
     426:	4463      	add	r3, ip
     428:	3b08      	subs	r3, #8
     42a:	681b      	ldr	r3, [r3, #0]
     42c:	785b      	ldrb	r3, [r3, #1]
     42e:	b2db      	uxtb	r3, r3
     430:	b25b      	sxtb	r3, r3
     432:	2b00      	cmp	r3, #0
     434:	da01      	bge.n	43a <extint_is_syncing+0x2e>
			return true;
     436:	2301      	movs	r3, #1
     438:	e006      	b.n	448 <extint_is_syncing+0x3c>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     43a:	687b      	ldr	r3, [r7, #4]
     43c:	3301      	adds	r3, #1
     43e:	607b      	str	r3, [r7, #4]
     440:	687b      	ldr	r3, [r7, #4]
     442:	2b00      	cmp	r3, #0
     444:	d0ea      	beq.n	41c <extint_is_syncing+0x10>
		}
	}
	return false;
     446:	2300      	movs	r3, #0
}
     448:	0018      	movs	r0, r3
     44a:	46bd      	mov	sp, r7
     44c:	b002      	add	sp, #8
     44e:	bd80      	pop	{r7, pc}
     450:	40001800 	.word	0x40001800

00000454 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
     454:	b580      	push	{r7, lr}
     456:	b084      	sub	sp, #16
     458:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     45a:	4b2d      	ldr	r3, [pc, #180]	; (510 <_system_extint_init+0xbc>)
     45c:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
     45e:	2140      	movs	r1, #64	; 0x40
     460:	2000      	movs	r0, #0
     462:	4b2c      	ldr	r3, [pc, #176]	; (514 <_system_extint_init+0xc0>)
     464:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     466:	003b      	movs	r3, r7
     468:	0018      	movs	r0, r3
     46a:	4b2b      	ldr	r3, [pc, #172]	; (518 <_system_extint_init+0xc4>)
     46c:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
     46e:	003b      	movs	r3, r7
     470:	2200      	movs	r2, #0
     472:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     474:	003b      	movs	r3, r7
     476:	0019      	movs	r1, r3
     478:	2005      	movs	r0, #5
     47a:	4b28      	ldr	r3, [pc, #160]	; (51c <_system_extint_init+0xc8>)
     47c:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
     47e:	2005      	movs	r0, #5
     480:	4b27      	ldr	r3, [pc, #156]	; (520 <_system_extint_init+0xcc>)
     482:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     484:	2300      	movs	r3, #0
     486:	60fb      	str	r3, [r7, #12]
     488:	e018      	b.n	4bc <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     48a:	68fb      	ldr	r3, [r7, #12]
     48c:	009b      	lsls	r3, r3, #2
     48e:	2210      	movs	r2, #16
     490:	4694      	mov	ip, r2
     492:	44bc      	add	ip, r7
     494:	4463      	add	r3, ip
     496:	3b0c      	subs	r3, #12
     498:	681a      	ldr	r2, [r3, #0]
     49a:	68fb      	ldr	r3, [r7, #12]
     49c:	009b      	lsls	r3, r3, #2
     49e:	2110      	movs	r1, #16
     4a0:	468c      	mov	ip, r1
     4a2:	44bc      	add	ip, r7
     4a4:	4463      	add	r3, ip
     4a6:	3b0c      	subs	r3, #12
     4a8:	681b      	ldr	r3, [r3, #0]
     4aa:	781b      	ldrb	r3, [r3, #0]
     4ac:	b2db      	uxtb	r3, r3
     4ae:	2101      	movs	r1, #1
     4b0:	430b      	orrs	r3, r1
     4b2:	b2db      	uxtb	r3, r3
     4b4:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     4b6:	68fb      	ldr	r3, [r7, #12]
     4b8:	3301      	adds	r3, #1
     4ba:	60fb      	str	r3, [r7, #12]
     4bc:	68fb      	ldr	r3, [r7, #12]
     4be:	2b00      	cmp	r3, #0
     4c0:	d0e3      	beq.n	48a <_system_extint_init+0x36>
	}

	while (extint_is_syncing()) {
     4c2:	46c0      	nop			; (mov r8, r8)
     4c4:	4b17      	ldr	r3, [pc, #92]	; (524 <_system_extint_init+0xd0>)
     4c6:	4798      	blx	r3
     4c8:	1e03      	subs	r3, r0, #0
     4ca:	d1fb      	bne.n	4c4 <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     4cc:	230b      	movs	r3, #11
     4ce:	18fb      	adds	r3, r7, r3
     4d0:	2200      	movs	r2, #0
     4d2:	701a      	strb	r2, [r3, #0]
     4d4:	e00d      	b.n	4f2 <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
     4d6:	230b      	movs	r3, #11
     4d8:	18fb      	adds	r3, r7, r3
     4da:	781a      	ldrb	r2, [r3, #0]
     4dc:	4b12      	ldr	r3, [pc, #72]	; (528 <_system_extint_init+0xd4>)
     4de:	0092      	lsls	r2, r2, #2
     4e0:	2100      	movs	r1, #0
     4e2:	50d1      	str	r1, [r2, r3]
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     4e4:	230b      	movs	r3, #11
     4e6:	18fb      	adds	r3, r7, r3
     4e8:	781a      	ldrb	r2, [r3, #0]
     4ea:	230b      	movs	r3, #11
     4ec:	18fb      	adds	r3, r7, r3
     4ee:	3201      	adds	r2, #1
     4f0:	701a      	strb	r2, [r3, #0]
     4f2:	230b      	movs	r3, #11
     4f4:	18fb      	adds	r3, r7, r3
     4f6:	781b      	ldrb	r3, [r3, #0]
     4f8:	2b0f      	cmp	r3, #15
     4fa:	d9ec      	bls.n	4d6 <_system_extint_init+0x82>
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
     4fc:	2004      	movs	r0, #4
     4fe:	4b0b      	ldr	r3, [pc, #44]	; (52c <_system_extint_init+0xd8>)
     500:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
     502:	4b0b      	ldr	r3, [pc, #44]	; (530 <_system_extint_init+0xdc>)
     504:	4798      	blx	r3
}
     506:	46c0      	nop			; (mov r8, r8)
     508:	46bd      	mov	sp, r7
     50a:	b004      	add	sp, #16
     50c:	bd80      	pop	{r7, pc}
     50e:	46c0      	nop			; (mov r8, r8)
     510:	40001800 	.word	0x40001800
     514:	00000311 	.word	0x00000311
     518:	000002f9 	.word	0x000002f9
     51c:	00004069 	.word	0x00004069
     520:	000040ad 	.word	0x000040ad
     524:	0000040d 	.word	0x0000040d
     528:	200000c8 	.word	0x200000c8
     52c:	00000395 	.word	0x00000395
     530:	00000535 	.word	0x00000535

00000534 <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
     534:	b580      	push	{r7, lr}
     536:	b082      	sub	sp, #8
     538:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     53a:	4b15      	ldr	r3, [pc, #84]	; (590 <_extint_enable+0x5c>)
     53c:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     53e:	2300      	movs	r3, #0
     540:	607b      	str	r3, [r7, #4]
     542:	e018      	b.n	576 <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     544:	687b      	ldr	r3, [r7, #4]
     546:	009b      	lsls	r3, r3, #2
     548:	2208      	movs	r2, #8
     54a:	4694      	mov	ip, r2
     54c:	44bc      	add	ip, r7
     54e:	4463      	add	r3, ip
     550:	3b08      	subs	r3, #8
     552:	681a      	ldr	r2, [r3, #0]
     554:	687b      	ldr	r3, [r7, #4]
     556:	009b      	lsls	r3, r3, #2
     558:	2108      	movs	r1, #8
     55a:	468c      	mov	ip, r1
     55c:	44bc      	add	ip, r7
     55e:	4463      	add	r3, ip
     560:	3b08      	subs	r3, #8
     562:	681b      	ldr	r3, [r3, #0]
     564:	781b      	ldrb	r3, [r3, #0]
     566:	b2db      	uxtb	r3, r3
     568:	2102      	movs	r1, #2
     56a:	430b      	orrs	r3, r1
     56c:	b2db      	uxtb	r3, r3
     56e:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     570:	687b      	ldr	r3, [r7, #4]
     572:	3301      	adds	r3, #1
     574:	607b      	str	r3, [r7, #4]
     576:	687b      	ldr	r3, [r7, #4]
     578:	2b00      	cmp	r3, #0
     57a:	d0e3      	beq.n	544 <_extint_enable+0x10>
	}

	while (extint_is_syncing()) {
     57c:	46c0      	nop			; (mov r8, r8)
     57e:	4b05      	ldr	r3, [pc, #20]	; (594 <_extint_enable+0x60>)
     580:	4798      	blx	r3
     582:	1e03      	subs	r3, r0, #0
     584:	d1fb      	bne.n	57e <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
     586:	46c0      	nop			; (mov r8, r8)
     588:	46bd      	mov	sp, r7
     58a:	b002      	add	sp, #8
     58c:	bd80      	pop	{r7, pc}
     58e:	46c0      	nop			; (mov r8, r8)
     590:	40001800 	.word	0x40001800
     594:	0000040d 	.word	0x0000040d

00000598 <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
     598:	b580      	push	{r7, lr}
     59a:	b082      	sub	sp, #8
     59c:	af00      	add	r7, sp, #0
     59e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
     5a0:	687b      	ldr	r3, [r7, #4]
     5a2:	2200      	movs	r2, #0
     5a4:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
     5a6:	687b      	ldr	r3, [r7, #4]
     5a8:	2200      	movs	r2, #0
     5aa:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
     5ac:	687b      	ldr	r3, [r7, #4]
     5ae:	2201      	movs	r2, #1
     5b0:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
     5b2:	687b      	ldr	r3, [r7, #4]
     5b4:	2201      	movs	r2, #1
     5b6:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
     5b8:	687b      	ldr	r3, [r7, #4]
     5ba:	2200      	movs	r2, #0
     5bc:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
     5be:	687b      	ldr	r3, [r7, #4]
     5c0:	2202      	movs	r2, #2
     5c2:	72da      	strb	r2, [r3, #11]
}
     5c4:	46c0      	nop			; (mov r8, r8)
     5c6:	46bd      	mov	sp, r7
     5c8:	b002      	add	sp, #8
     5ca:	bd80      	pop	{r7, pc}

000005cc <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
     5cc:	b580      	push	{r7, lr}
     5ce:	b086      	sub	sp, #24
     5d0:	af00      	add	r7, sp, #0
     5d2:	0002      	movs	r2, r0
     5d4:	6039      	str	r1, [r7, #0]
     5d6:	1dfb      	adds	r3, r7, #7
     5d8:	701a      	strb	r2, [r3, #0]
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
     5da:	2308      	movs	r3, #8
     5dc:	18fb      	adds	r3, r7, r3
     5de:	0018      	movs	r0, r3
     5e0:	4b36      	ldr	r3, [pc, #216]	; (6bc <extint_chan_set_config+0xf0>)
     5e2:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
     5e4:	683b      	ldr	r3, [r7, #0]
     5e6:	685b      	ldr	r3, [r3, #4]
     5e8:	b2da      	uxtb	r2, r3
     5ea:	2308      	movs	r3, #8
     5ec:	18fb      	adds	r3, r7, r3
     5ee:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     5f0:	2308      	movs	r3, #8
     5f2:	18fb      	adds	r3, r7, r3
     5f4:	2200      	movs	r2, #0
     5f6:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
     5f8:	683b      	ldr	r3, [r7, #0]
     5fa:	7a1a      	ldrb	r2, [r3, #8]
     5fc:	2308      	movs	r3, #8
     5fe:	18fb      	adds	r3, r7, r3
     600:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
     602:	683b      	ldr	r3, [r7, #0]
     604:	681b      	ldr	r3, [r3, #0]
     606:	b2db      	uxtb	r3, r3
     608:	2208      	movs	r2, #8
     60a:	18ba      	adds	r2, r7, r2
     60c:	0011      	movs	r1, r2
     60e:	0018      	movs	r0, r3
     610:	4b2b      	ldr	r3, [pc, #172]	; (6c0 <extint_chan_set_config+0xf4>)
     612:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
     614:	1dfb      	adds	r3, r7, #7
     616:	781b      	ldrb	r3, [r3, #0]
     618:	0018      	movs	r0, r3
     61a:	4b2a      	ldr	r3, [pc, #168]	; (6c4 <extint_chan_set_config+0xf8>)
     61c:	4798      	blx	r3
     61e:	0003      	movs	r3, r0
     620:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
     622:	1dfb      	adds	r3, r7, #7
     624:	781b      	ldrb	r3, [r3, #0]
     626:	2207      	movs	r2, #7
     628:	4013      	ands	r3, r2
     62a:	009b      	lsls	r3, r3, #2
     62c:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
     62e:	683b      	ldr	r3, [r7, #0]
     630:	7adb      	ldrb	r3, [r3, #11]
     632:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
     634:	683b      	ldr	r3, [r7, #0]
     636:	7a9b      	ldrb	r3, [r3, #10]
     638:	2b00      	cmp	r3, #0
     63a:	d003      	beq.n	644 <extint_chan_set_config+0x78>
		new_config |= EIC_CONFIG_FILTEN0;
     63c:	697b      	ldr	r3, [r7, #20]
     63e:	2208      	movs	r2, #8
     640:	4313      	orrs	r3, r2
     642:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
     644:	1dfb      	adds	r3, r7, #7
     646:	781b      	ldrb	r3, [r3, #0]
     648:	08db      	lsrs	r3, r3, #3
     64a:	b2db      	uxtb	r3, r3
     64c:	0018      	movs	r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
     64e:	1dfb      	adds	r3, r7, #7
     650:	781b      	ldrb	r3, [r3, #0]
     652:	08db      	lsrs	r3, r3, #3
     654:	b2db      	uxtb	r3, r3
     656:	001a      	movs	r2, r3
     658:	693b      	ldr	r3, [r7, #16]
     65a:	3206      	adds	r2, #6
     65c:	0092      	lsls	r2, r2, #2
     65e:	58d3      	ldr	r3, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     660:	210f      	movs	r1, #15
     662:	68fa      	ldr	r2, [r7, #12]
     664:	4091      	lsls	r1, r2
     666:	000a      	movs	r2, r1
     668:	43d2      	mvns	r2, r2
		= (EIC_module->CONFIG[channel / 8].reg &
     66a:	401a      	ands	r2, r3
			(new_config << config_pos);
     66c:	6979      	ldr	r1, [r7, #20]
     66e:	68fb      	ldr	r3, [r7, #12]
     670:	4099      	lsls	r1, r3
     672:	000b      	movs	r3, r1
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     674:	431a      	orrs	r2, r3
     676:	0011      	movs	r1, r2
		= (EIC_module->CONFIG[channel / 8].reg &
     678:	693b      	ldr	r3, [r7, #16]
     67a:	1d82      	adds	r2, r0, #6
     67c:	0092      	lsls	r2, r2, #2
     67e:	50d1      	str	r1, [r2, r3]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
     680:	683b      	ldr	r3, [r7, #0]
     682:	7a5b      	ldrb	r3, [r3, #9]
     684:	2b00      	cmp	r3, #0
     686:	d00a      	beq.n	69e <extint_chan_set_config+0xd2>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
     688:	693b      	ldr	r3, [r7, #16]
     68a:	695a      	ldr	r2, [r3, #20]
     68c:	1dfb      	adds	r3, r7, #7
     68e:	781b      	ldrb	r3, [r3, #0]
     690:	2101      	movs	r1, #1
     692:	4099      	lsls	r1, r3
     694:	000b      	movs	r3, r1
     696:	431a      	orrs	r2, r3
     698:	693b      	ldr	r3, [r7, #16]
     69a:	615a      	str	r2, [r3, #20]
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
	}
}
     69c:	e00a      	b.n	6b4 <extint_chan_set_config+0xe8>
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
     69e:	693b      	ldr	r3, [r7, #16]
     6a0:	695b      	ldr	r3, [r3, #20]
     6a2:	1dfa      	adds	r2, r7, #7
     6a4:	7812      	ldrb	r2, [r2, #0]
     6a6:	2101      	movs	r1, #1
     6a8:	4091      	lsls	r1, r2
     6aa:	000a      	movs	r2, r1
     6ac:	43d2      	mvns	r2, r2
     6ae:	401a      	ands	r2, r3
     6b0:	693b      	ldr	r3, [r7, #16]
     6b2:	615a      	str	r2, [r3, #20]
}
     6b4:	46c0      	nop			; (mov r8, r8)
     6b6:	46bd      	mov	sp, r7
     6b8:	b006      	add	sp, #24
     6ba:	bd80      	pop	{r7, pc}
     6bc:	0000036d 	.word	0x0000036d
     6c0:	00004355 	.word	0x00004355
     6c4:	000003c1 	.word	0x000003c1

000006c8 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     6c8:	b580      	push	{r7, lr}
     6ca:	b084      	sub	sp, #16
     6cc:	af00      	add	r7, sp, #0
     6ce:	0002      	movs	r2, r0
     6d0:	1dfb      	adds	r3, r7, #7
     6d2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     6d4:	230f      	movs	r3, #15
     6d6:	18fb      	adds	r3, r7, r3
     6d8:	1dfa      	adds	r2, r7, #7
     6da:	7812      	ldrb	r2, [r2, #0]
     6dc:	09d2      	lsrs	r2, r2, #7
     6de:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     6e0:	230e      	movs	r3, #14
     6e2:	18fb      	adds	r3, r7, r3
     6e4:	1dfa      	adds	r2, r7, #7
     6e6:	7812      	ldrb	r2, [r2, #0]
     6e8:	0952      	lsrs	r2, r2, #5
     6ea:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     6ec:	4b0d      	ldr	r3, [pc, #52]	; (724 <system_pinmux_get_group_from_gpio_pin+0x5c>)
     6ee:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
     6f0:	230f      	movs	r3, #15
     6f2:	18fb      	adds	r3, r7, r3
     6f4:	781b      	ldrb	r3, [r3, #0]
     6f6:	2b00      	cmp	r3, #0
     6f8:	d10f      	bne.n	71a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     6fa:	230f      	movs	r3, #15
     6fc:	18fb      	adds	r3, r7, r3
     6fe:	781b      	ldrb	r3, [r3, #0]
     700:	009b      	lsls	r3, r3, #2
     702:	2210      	movs	r2, #16
     704:	4694      	mov	ip, r2
     706:	44bc      	add	ip, r7
     708:	4463      	add	r3, ip
     70a:	3b08      	subs	r3, #8
     70c:	681a      	ldr	r2, [r3, #0]
     70e:	230e      	movs	r3, #14
     710:	18fb      	adds	r3, r7, r3
     712:	781b      	ldrb	r3, [r3, #0]
     714:	01db      	lsls	r3, r3, #7
     716:	18d3      	adds	r3, r2, r3
     718:	e000      	b.n	71c <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
     71a:	2300      	movs	r3, #0
	}
}
     71c:	0018      	movs	r0, r3
     71e:	46bd      	mov	sp, r7
     720:	b004      	add	sp, #16
     722:	bd80      	pop	{r7, pc}
     724:	41004400 	.word	0x41004400

00000728 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     728:	b580      	push	{r7, lr}
     72a:	b082      	sub	sp, #8
     72c:	af00      	add	r7, sp, #0
     72e:	0002      	movs	r2, r0
     730:	1dfb      	adds	r3, r7, #7
     732:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     734:	1dfb      	adds	r3, r7, #7
     736:	781b      	ldrb	r3, [r3, #0]
     738:	0018      	movs	r0, r3
     73a:	4b03      	ldr	r3, [pc, #12]	; (748 <port_get_group_from_gpio_pin+0x20>)
     73c:	4798      	blx	r3
     73e:	0003      	movs	r3, r0
}
     740:	0018      	movs	r0, r3
     742:	46bd      	mov	sp, r7
     744:	b002      	add	sp, #8
     746:	bd80      	pop	{r7, pc}
     748:	000006c9 	.word	0x000006c9

0000074c <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
     74c:	b580      	push	{r7, lr}
     74e:	b082      	sub	sp, #8
     750:	af00      	add	r7, sp, #0
     752:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
     754:	687b      	ldr	r3, [r7, #4]
     756:	2200      	movs	r2, #0
     758:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     75a:	687b      	ldr	r3, [r7, #4]
     75c:	2201      	movs	r2, #1
     75e:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
     760:	687b      	ldr	r3, [r7, #4]
     762:	2200      	movs	r2, #0
     764:	709a      	strb	r2, [r3, #2]
}
     766:	46c0      	nop			; (mov r8, r8)
     768:	46bd      	mov	sp, r7
     76a:	b002      	add	sp, #8
     76c:	bd80      	pop	{r7, pc}
	...

00000770 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
     770:	b580      	push	{r7, lr}
     772:	b084      	sub	sp, #16
     774:	af00      	add	r7, sp, #0
     776:	0002      	movs	r2, r0
     778:	1dfb      	adds	r3, r7, #7
     77a:	701a      	strb	r2, [r3, #0]
     77c:	1dbb      	adds	r3, r7, #6
     77e:	1c0a      	adds	r2, r1, #0
     780:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     782:	1dfb      	adds	r3, r7, #7
     784:	781b      	ldrb	r3, [r3, #0]
     786:	0018      	movs	r0, r3
     788:	4b0d      	ldr	r3, [pc, #52]	; (7c0 <port_pin_set_output_level+0x50>)
     78a:	4798      	blx	r3
     78c:	0003      	movs	r3, r0
     78e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     790:	1dfb      	adds	r3, r7, #7
     792:	781b      	ldrb	r3, [r3, #0]
     794:	221f      	movs	r2, #31
     796:	4013      	ands	r3, r2
     798:	2201      	movs	r2, #1
     79a:	409a      	lsls	r2, r3
     79c:	0013      	movs	r3, r2
     79e:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
     7a0:	1dbb      	adds	r3, r7, #6
     7a2:	781b      	ldrb	r3, [r3, #0]
     7a4:	2b00      	cmp	r3, #0
     7a6:	d003      	beq.n	7b0 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
     7a8:	68fb      	ldr	r3, [r7, #12]
     7aa:	68ba      	ldr	r2, [r7, #8]
     7ac:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
     7ae:	e002      	b.n	7b6 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
     7b0:	68fb      	ldr	r3, [r7, #12]
     7b2:	68ba      	ldr	r2, [r7, #8]
     7b4:	615a      	str	r2, [r3, #20]
}
     7b6:	46c0      	nop			; (mov r8, r8)
     7b8:	46bd      	mov	sp, r7
     7ba:	b004      	add	sp, #16
     7bc:	bd80      	pop	{r7, pc}
     7be:	46c0      	nop			; (mov r8, r8)
     7c0:	00000729 	.word	0x00000729

000007c4 <system_interrupt_enable_global>:
{
     7c4:	b580      	push	{r7, lr}
     7c6:	af00      	add	r7, sp, #0
	cpu_irq_enable();
     7c8:	4b04      	ldr	r3, [pc, #16]	; (7dc <system_interrupt_enable_global+0x18>)
     7ca:	2201      	movs	r2, #1
     7cc:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     7ce:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     7d2:	b662      	cpsie	i
}
     7d4:	46c0      	nop			; (mov r8, r8)
     7d6:	46bd      	mov	sp, r7
     7d8:	bd80      	pop	{r7, pc}
     7da:	46c0      	nop			; (mov r8, r8)
     7dc:	20000008 	.word	0x20000008

000007e0 <rotenc_init>:
 */ 

#include "wakeup.h"

void rotenc_init(void)
{
     7e0:	b580      	push	{r7, lr}
     7e2:	b082      	sub	sp, #8
     7e4:	af00      	add	r7, sp, #0
	configure_extint_channel_a();
     7e6:	4b15      	ldr	r3, [pc, #84]	; (83c <rotenc_init+0x5c>)
     7e8:	4798      	blx	r3
	//configure_extint_channel_b();
	configure_extint_callbacks_A();
     7ea:	4b15      	ldr	r3, [pc, #84]	; (840 <rotenc_init+0x60>)
     7ec:	4798      	blx	r3
	//configure_extint_callbacks_B();
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
     7ee:	1d3b      	adds	r3, r7, #4
     7f0:	0018      	movs	r0, r3
     7f2:	4b14      	ldr	r3, [pc, #80]	; (844 <rotenc_init+0x64>)
     7f4:	4798      	blx	r3
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
     7f6:	1d3b      	adds	r3, r7, #4
     7f8:	2201      	movs	r2, #1
     7fa:	701a      	strb	r2, [r3, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;
     7fc:	1d3b      	adds	r3, r7, #4
     7fe:	2202      	movs	r2, #2
     800:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(SIG_DONE_PIN, &config_port_pin);
     802:	1d3b      	adds	r3, r7, #4
     804:	0019      	movs	r1, r3
     806:	200f      	movs	r0, #15
     808:	4b0f      	ldr	r3, [pc, #60]	; (848 <rotenc_init+0x68>)
     80a:	4798      	blx	r3
	port_pin_set_output_level(SIG_DONE_PIN,0);
     80c:	2100      	movs	r1, #0
     80e:	200f      	movs	r0, #15
     810:	4b0e      	ldr	r3, [pc, #56]	; (84c <rotenc_init+0x6c>)
     812:	4798      	blx	r3
	delay_ms(10);
     814:	200a      	movs	r0, #10
     816:	4b0e      	ldr	r3, [pc, #56]	; (850 <rotenc_init+0x70>)
     818:	4798      	blx	r3
	port_pin_set_output_level(SIG_DONE_PIN,1);
     81a:	2101      	movs	r1, #1
     81c:	200f      	movs	r0, #15
     81e:	4b0b      	ldr	r3, [pc, #44]	; (84c <rotenc_init+0x6c>)
     820:	4798      	blx	r3
	delay_ms(10);
     822:	200a      	movs	r0, #10
     824:	4b0a      	ldr	r3, [pc, #40]	; (850 <rotenc_init+0x70>)
     826:	4798      	blx	r3
	port_pin_set_output_level(SIG_DONE_PIN,0);	
     828:	2100      	movs	r1, #0
     82a:	200f      	movs	r0, #15
     82c:	4b07      	ldr	r3, [pc, #28]	; (84c <rotenc_init+0x6c>)
     82e:	4798      	blx	r3
	system_interrupt_enable_global();
     830:	4b08      	ldr	r3, [pc, #32]	; (854 <rotenc_init+0x74>)
     832:	4798      	blx	r3
}
     834:	46c0      	nop			; (mov r8, r8)
     836:	46bd      	mov	sp, r7
     838:	b002      	add	sp, #8
     83a:	bd80      	pop	{r7, pc}
     83c:	00000859 	.word	0x00000859
     840:	000008a9 	.word	0x000008a9
     844:	0000074d 	.word	0x0000074d
     848:	000037f5 	.word	0x000037f5
     84c:	00000771 	.word	0x00000771
     850:	00000c4d 	.word	0x00000c4d
     854:	000007c5 	.word	0x000007c5

00000858 <configure_extint_channel_a>:


void configure_extint_channel_a(void)
{
     858:	b580      	push	{r7, lr}
     85a:	b084      	sub	sp, #16
     85c:	af00      	add	r7, sp, #0
	struct extint_chan_conf config_extint_chan;
	extint_chan_get_config_defaults(&config_extint_chan);
     85e:	1d3b      	adds	r3, r7, #4
     860:	0018      	movs	r0, r3
     862:	4b0f      	ldr	r3, [pc, #60]	; (8a0 <configure_extint_channel_a+0x48>)
     864:	4798      	blx	r3
	config_extint_chan.gpio_pin           = SIG_WAKE;
     866:	1d3b      	adds	r3, r7, #4
     868:	220e      	movs	r2, #14
     86a:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux       = SIG_WAKE_MUX;
     86c:	1d3b      	adds	r3, r7, #4
     86e:	22e0      	movs	r2, #224	; 0xe0
     870:	0312      	lsls	r2, r2, #12
     872:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_DOWN;
     874:	1d3b      	adds	r3, r7, #4
     876:	2202      	movs	r2, #2
     878:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
     87a:	1d3b      	adds	r3, r7, #4
     87c:	2201      	movs	r2, #1
     87e:	72da      	strb	r2, [r3, #11]
	config_extint_chan.filter_input_signal = false;
     880:	1d3b      	adds	r3, r7, #4
     882:	2200      	movs	r2, #0
     884:	729a      	strb	r2, [r3, #10]
	config_extint_chan.wake_if_sleeping = true;
     886:	1d3b      	adds	r3, r7, #4
     888:	2201      	movs	r2, #1
     88a:	725a      	strb	r2, [r3, #9]
	extint_chan_set_config(14, &config_extint_chan);
     88c:	1d3b      	adds	r3, r7, #4
     88e:	0019      	movs	r1, r3
     890:	200e      	movs	r0, #14
     892:	4b04      	ldr	r3, [pc, #16]	; (8a4 <configure_extint_channel_a+0x4c>)
     894:	4798      	blx	r3
}
     896:	46c0      	nop			; (mov r8, r8)
     898:	46bd      	mov	sp, r7
     89a:	b004      	add	sp, #16
     89c:	bd80      	pop	{r7, pc}
     89e:	46c0      	nop			; (mov r8, r8)
     8a0:	00000599 	.word	0x00000599
     8a4:	000005cd 	.word	0x000005cd

000008a8 <configure_extint_callbacks_A>:

void configure_extint_callbacks_A(void)
{
     8a8:	b580      	push	{r7, lr}
     8aa:	af00      	add	r7, sp, #0
	extint_register_callback(callback_a,14,	EXTINT_CALLBACK_TYPE_DETECT);
     8ac:	4b06      	ldr	r3, [pc, #24]	; (8c8 <configure_extint_callbacks_A+0x20>)
     8ae:	2200      	movs	r2, #0
     8b0:	210e      	movs	r1, #14
     8b2:	0018      	movs	r0, r3
     8b4:	4b05      	ldr	r3, [pc, #20]	; (8cc <configure_extint_callbacks_A+0x24>)
     8b6:	4798      	blx	r3
	extint_chan_enable_callback(14,	EXTINT_CALLBACK_TYPE_DETECT);
     8b8:	2100      	movs	r1, #0
     8ba:	200e      	movs	r0, #14
     8bc:	4b04      	ldr	r3, [pc, #16]	; (8d0 <configure_extint_callbacks_A+0x28>)
     8be:	4798      	blx	r3
}
     8c0:	46c0      	nop			; (mov r8, r8)
     8c2:	46bd      	mov	sp, r7
     8c4:	bd80      	pop	{r7, pc}
     8c6:	46c0      	nop			; (mov r8, r8)
     8c8:	000008d5 	.word	0x000008d5
     8cc:	000001e1 	.word	0x000001e1
     8d0:	00000245 	.word	0x00000245

000008d4 <callback_a>:

void callback_a(void)
{
     8d4:	b580      	push	{r7, lr}
     8d6:	af00      	add	r7, sp, #0
	uart_write("WAKEUP\r\n");
     8d8:	4b0a      	ldr	r3, [pc, #40]	; (904 <callback_a+0x30>)
     8da:	0018      	movs	r0, r3
     8dc:	4b0a      	ldr	r3, [pc, #40]	; (908 <callback_a+0x34>)
     8de:	4798      	blx	r3
	port_pin_set_output_level(SIG_DONE_PIN,1);
     8e0:	2101      	movs	r1, #1
     8e2:	200f      	movs	r0, #15
     8e4:	4b09      	ldr	r3, [pc, #36]	; (90c <callback_a+0x38>)
     8e6:	4798      	blx	r3
	delay_ms(10);
     8e8:	200a      	movs	r0, #10
     8ea:	4b09      	ldr	r3, [pc, #36]	; (910 <callback_a+0x3c>)
     8ec:	4798      	blx	r3
	port_pin_set_output_level(SIG_DONE_PIN,0);	
     8ee:	2100      	movs	r1, #0
     8f0:	200f      	movs	r0, #15
     8f2:	4b06      	ldr	r3, [pc, #24]	; (90c <callback_a+0x38>)
     8f4:	4798      	blx	r3
	woke = true;
     8f6:	4b07      	ldr	r3, [pc, #28]	; (914 <callback_a+0x40>)
     8f8:	2201      	movs	r2, #1
     8fa:	701a      	strb	r2, [r3, #0]
}
     8fc:	46c0      	nop			; (mov r8, r8)
     8fe:	46bd      	mov	sp, r7
     900:	bd80      	pop	{r7, pc}
     902:	46c0      	nop			; (mov r8, r8)
     904:	00008900 	.word	0x00008900
     908:	00000b79 	.word	0x00000b79
     90c:	00000771 	.word	0x00000771
     910:	00000c4d 	.word	0x00000c4d
     914:	20000108 	.word	0x20000108

00000918 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
     918:	b580      	push	{r7, lr}
     91a:	b082      	sub	sp, #8
     91c:	af00      	add	r7, sp, #0
     91e:	0002      	movs	r2, r0
     920:	1dfb      	adds	r3, r7, #7
     922:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     924:	4b06      	ldr	r3, [pc, #24]	; (940 <NVIC_EnableIRQ+0x28>)
     926:	1dfa      	adds	r2, r7, #7
     928:	7812      	ldrb	r2, [r2, #0]
     92a:	0011      	movs	r1, r2
     92c:	221f      	movs	r2, #31
     92e:	400a      	ands	r2, r1
     930:	2101      	movs	r1, #1
     932:	4091      	lsls	r1, r2
     934:	000a      	movs	r2, r1
     936:	601a      	str	r2, [r3, #0]
}
     938:	46c0      	nop			; (mov r8, r8)
     93a:	46bd      	mov	sp, r7
     93c:	b002      	add	sp, #8
     93e:	bd80      	pop	{r7, pc}
     940:	e000e100 	.word	0xe000e100

00000944 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
     944:	b5b0      	push	{r4, r5, r7, lr}
     946:	b082      	sub	sp, #8
     948:	af00      	add	r7, sp, #0
     94a:	0002      	movs	r2, r0
     94c:	6039      	str	r1, [r7, #0]
     94e:	1dfb      	adds	r3, r7, #7
     950:	701a      	strb	r2, [r3, #0]
  if(IRQn < 0) {
     952:	1dfb      	adds	r3, r7, #7
     954:	781b      	ldrb	r3, [r3, #0]
     956:	2b7f      	cmp	r3, #127	; 0x7f
     958:	d932      	bls.n	9c0 <NVIC_SetPriority+0x7c>
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     95a:	4c2f      	ldr	r4, [pc, #188]	; (a18 <NVIC_SetPriority+0xd4>)
     95c:	1dfb      	adds	r3, r7, #7
     95e:	781b      	ldrb	r3, [r3, #0]
     960:	001a      	movs	r2, r3
     962:	230f      	movs	r3, #15
     964:	4013      	ands	r3, r2
     966:	3b08      	subs	r3, #8
     968:	0899      	lsrs	r1, r3, #2
     96a:	4a2b      	ldr	r2, [pc, #172]	; (a18 <NVIC_SetPriority+0xd4>)
     96c:	1dfb      	adds	r3, r7, #7
     96e:	781b      	ldrb	r3, [r3, #0]
     970:	0018      	movs	r0, r3
     972:	230f      	movs	r3, #15
     974:	4003      	ands	r3, r0
     976:	3b08      	subs	r3, #8
     978:	089b      	lsrs	r3, r3, #2
     97a:	3306      	adds	r3, #6
     97c:	009b      	lsls	r3, r3, #2
     97e:	18d3      	adds	r3, r2, r3
     980:	3304      	adds	r3, #4
     982:	681b      	ldr	r3, [r3, #0]
     984:	1dfa      	adds	r2, r7, #7
     986:	7812      	ldrb	r2, [r2, #0]
     988:	0010      	movs	r0, r2
     98a:	2203      	movs	r2, #3
     98c:	4002      	ands	r2, r0
     98e:	00d2      	lsls	r2, r2, #3
     990:	20ff      	movs	r0, #255	; 0xff
     992:	4090      	lsls	r0, r2
     994:	0002      	movs	r2, r0
     996:	43d2      	mvns	r2, r2
     998:	401a      	ands	r2, r3
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
     99a:	683b      	ldr	r3, [r7, #0]
     99c:	019b      	lsls	r3, r3, #6
     99e:	20ff      	movs	r0, #255	; 0xff
     9a0:	4018      	ands	r0, r3
     9a2:	1dfb      	adds	r3, r7, #7
     9a4:	781b      	ldrb	r3, [r3, #0]
     9a6:	001d      	movs	r5, r3
     9a8:	2303      	movs	r3, #3
     9aa:	402b      	ands	r3, r5
     9ac:	00db      	lsls	r3, r3, #3
     9ae:	4098      	lsls	r0, r3
     9b0:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     9b2:	431a      	orrs	r2, r3
     9b4:	1d8b      	adds	r3, r1, #6
     9b6:	009b      	lsls	r3, r3, #2
     9b8:	18e3      	adds	r3, r4, r3
     9ba:	3304      	adds	r3, #4
     9bc:	601a      	str	r2, [r3, #0]
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
}
     9be:	e027      	b.n	a10 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     9c0:	4c16      	ldr	r4, [pc, #88]	; (a1c <NVIC_SetPriority+0xd8>)
     9c2:	1dfb      	adds	r3, r7, #7
     9c4:	781b      	ldrb	r3, [r3, #0]
     9c6:	b25b      	sxtb	r3, r3
     9c8:	089b      	lsrs	r3, r3, #2
     9ca:	4914      	ldr	r1, [pc, #80]	; (a1c <NVIC_SetPriority+0xd8>)
     9cc:	1dfa      	adds	r2, r7, #7
     9ce:	7812      	ldrb	r2, [r2, #0]
     9d0:	b252      	sxtb	r2, r2
     9d2:	0892      	lsrs	r2, r2, #2
     9d4:	32c0      	adds	r2, #192	; 0xc0
     9d6:	0092      	lsls	r2, r2, #2
     9d8:	5852      	ldr	r2, [r2, r1]
     9da:	1df9      	adds	r1, r7, #7
     9dc:	7809      	ldrb	r1, [r1, #0]
     9de:	0008      	movs	r0, r1
     9e0:	2103      	movs	r1, #3
     9e2:	4001      	ands	r1, r0
     9e4:	00c9      	lsls	r1, r1, #3
     9e6:	20ff      	movs	r0, #255	; 0xff
     9e8:	4088      	lsls	r0, r1
     9ea:	0001      	movs	r1, r0
     9ec:	43c9      	mvns	r1, r1
     9ee:	4011      	ands	r1, r2
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
     9f0:	683a      	ldr	r2, [r7, #0]
     9f2:	0192      	lsls	r2, r2, #6
     9f4:	20ff      	movs	r0, #255	; 0xff
     9f6:	4010      	ands	r0, r2
     9f8:	1dfa      	adds	r2, r7, #7
     9fa:	7812      	ldrb	r2, [r2, #0]
     9fc:	0015      	movs	r5, r2
     9fe:	2203      	movs	r2, #3
     a00:	402a      	ands	r2, r5
     a02:	00d2      	lsls	r2, r2, #3
     a04:	4090      	lsls	r0, r2
     a06:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     a08:	430a      	orrs	r2, r1
     a0a:	33c0      	adds	r3, #192	; 0xc0
     a0c:	009b      	lsls	r3, r3, #2
     a0e:	511a      	str	r2, [r3, r4]
}
     a10:	46c0      	nop			; (mov r8, r8)
     a12:	46bd      	mov	sp, r7
     a14:	b002      	add	sp, #8
     a16:	bdb0      	pop	{r4, r5, r7, pc}
     a18:	e000ed00 	.word	0xe000ed00
     a1c:	e000e100 	.word	0xe000e100

00000a20 <uart_clk_init>:

#include "uart.h"


void uart_clk_init(void)
{
     a20:	b580      	push	{r7, lr}
     a22:	af00      	add	r7, sp, #0
	// Start the Software Reset and wait for it to finish
	UART_MODULE->USART.CTRLA.bit.SWRST = 1 ;
     a24:	4a13      	ldr	r2, [pc, #76]	; (a74 <uart_clk_init+0x54>)
     a26:	6813      	ldr	r3, [r2, #0]
     a28:	2101      	movs	r1, #1
     a2a:	430b      	orrs	r3, r1
     a2c:	6013      	str	r3, [r2, #0]
	while ( UART_MODULE->USART.CTRLA.bit.SWRST || UART_MODULE->USART.SYNCBUSY.bit.SWRST );
     a2e:	46c0      	nop			; (mov r8, r8)
     a30:	4b10      	ldr	r3, [pc, #64]	; (a74 <uart_clk_init+0x54>)
     a32:	681b      	ldr	r3, [r3, #0]
     a34:	07db      	lsls	r3, r3, #31
     a36:	0fdb      	lsrs	r3, r3, #31
     a38:	b2db      	uxtb	r3, r3
     a3a:	2b00      	cmp	r3, #0
     a3c:	d1f8      	bne.n	a30 <uart_clk_init+0x10>
     a3e:	4b0d      	ldr	r3, [pc, #52]	; (a74 <uart_clk_init+0x54>)
     a40:	69db      	ldr	r3, [r3, #28]
     a42:	07db      	lsls	r3, r3, #31
     a44:	0fdb      	lsrs	r3, r3, #31
     a46:	b2db      	uxtb	r3, r3
     a48:	2b00      	cmp	r3, #0
     a4a:	d1f1      	bne.n	a30 <uart_clk_init+0x10>
	
	// Turn on peripheral clock for SERCOM being used
	PM->APBCMASK.reg |= PM_APBCMASK_SERCOM5;
     a4c:	4b0a      	ldr	r3, [pc, #40]	; (a78 <uart_clk_init+0x58>)
     a4e:	4a0a      	ldr	r2, [pc, #40]	; (a78 <uart_clk_init+0x58>)
     a50:	6a12      	ldr	r2, [r2, #32]
     a52:	2180      	movs	r1, #128	; 0x80
     a54:	430a      	orrs	r2, r1
     a56:	621a      	str	r2, [r3, #32]

	//Setting clock
	GCLK->CLKCTRL.reg =
     a58:	4b08      	ldr	r3, [pc, #32]	; (a7c <uart_clk_init+0x5c>)
     a5a:	4a09      	ldr	r2, [pc, #36]	; (a80 <uart_clk_init+0x60>)
     a5c:	805a      	strh	r2, [r3, #2]
	GCLK_CLKCTRL_ID( GCM_SERCOM5_CORE )	|	// connected  SERCOMx to
	GCLK_CLKCTRL_GEN_GCLK0		|	// generic Clock Generator 0
	GCLK_CLKCTRL_CLKEN;			// and enable it

	while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY ); // Wait for synchronization
     a5e:	46c0      	nop			; (mov r8, r8)
     a60:	4b06      	ldr	r3, [pc, #24]	; (a7c <uart_clk_init+0x5c>)
     a62:	785b      	ldrb	r3, [r3, #1]
     a64:	b2db      	uxtb	r3, r3
     a66:	b25b      	sxtb	r3, r3
     a68:	2b00      	cmp	r3, #0
     a6a:	dbf9      	blt.n	a60 <uart_clk_init+0x40>
}
     a6c:	46c0      	nop			; (mov r8, r8)
     a6e:	46bd      	mov	sp, r7
     a70:	bd80      	pop	{r7, pc}
     a72:	46c0      	nop			; (mov r8, r8)
     a74:	42001c00 	.word	0x42001c00
     a78:	40000400 	.word	0x40000400
     a7c:	40000c00 	.word	0x40000c00
     a80:	00004019 	.word	0x00004019

00000a84 <uart_pin_init>:

void uart_pin_init(void)
{
     a84:	b580      	push	{r7, lr}
     a86:	b082      	sub	sp, #8
     a88:	af00      	add	r7, sp, #0
	//PORT->Group[PORTGROUP_A].DIRCLR.reg = PORT_PA05;	// RX as input
	
	PORT->Group[PORTGROUP_B].DIRSET.reg = PORT_PB02;	// TX as output
     a8a:	4a1a      	ldr	r2, [pc, #104]	; (af4 <uart_pin_init+0x70>)
     a8c:	2388      	movs	r3, #136	; 0x88
     a8e:	2104      	movs	r1, #4
     a90:	50d1      	str	r1, [r2, r3]
	PORT->Group[PORTGROUP_B].OUTSET.reg = PORT_PB02;	// TX idle state is high
     a92:	4a18      	ldr	r2, [pc, #96]	; (af4 <uart_pin_init+0x70>)
     a94:	2398      	movs	r3, #152	; 0x98
     a96:	2104      	movs	r1, #4
     a98:	50d1      	str	r1, [r2, r3]

	// set port multiplexer for peripheral TX
	// =======================================
	uint32_t temp = (PORT->Group[PORTGROUP_B].PMUX[UART_TX_PIN>>1].reg) & PORT_PMUX_PMUXO( PORT_PMUX_PMUXO_D_Val );
     a9a:	4a16      	ldr	r2, [pc, #88]	; (af4 <uart_pin_init+0x70>)
     a9c:	23b1      	movs	r3, #177	; 0xb1
     a9e:	5cd3      	ldrb	r3, [r2, r3]
     aa0:	b2db      	uxtb	r3, r3
     aa2:	001a      	movs	r2, r3
     aa4:	2330      	movs	r3, #48	; 0x30
     aa6:	4013      	ands	r3, r2
     aa8:	607b      	str	r3, [r7, #4]
	PORT->Group[PORTGROUP_B].PMUX[UART_TX_PIN>>1].reg = temp | PORT_PMUX_PMUXE( PORT_PMUX_PMUXE_D_Val );
     aaa:	4a12      	ldr	r2, [pc, #72]	; (af4 <uart_pin_init+0x70>)
     aac:	687b      	ldr	r3, [r7, #4]
     aae:	b2db      	uxtb	r3, r3
     ab0:	2103      	movs	r1, #3
     ab2:	430b      	orrs	r3, r1
     ab4:	b2d9      	uxtb	r1, r3
     ab6:	23b1      	movs	r3, #177	; 0xb1
     ab8:	54d1      	strb	r1, [r2, r3]
	
	PORT->Group[PORTGROUP_B].PINCFG[UART_TX_PIN].reg = PORT_PINCFG_PMUXEN ; // Enable port mux
     aba:	4a0e      	ldr	r2, [pc, #56]	; (af4 <uart_pin_init+0x70>)
     abc:	23c2      	movs	r3, #194	; 0xc2
     abe:	2101      	movs	r1, #1
     ac0:	54d1      	strb	r1, [r2, r3]
	temp = (PORT->Group[PORTGROUP_B].PMUX[UART_RX_PIN>>1].reg) & PORT_PMUX_PMUXO( PORT_PMUX_PMUXO_D_Val );
     ac2:	4a0c      	ldr	r2, [pc, #48]	; (af4 <uart_pin_init+0x70>)
     ac4:	23b2      	movs	r3, #178	; 0xb2
     ac6:	5cd3      	ldrb	r3, [r2, r3]
     ac8:	b2db      	uxtb	r3, r3
     aca:	001a      	movs	r2, r3
     acc:	2330      	movs	r3, #48	; 0x30
     ace:	4013      	ands	r3, r2
     ad0:	607b      	str	r3, [r7, #4]
	PORT->Group[PORTGROUP_B].PMUX[UART_RX_PIN>>1].reg = temp | PORT_PMUX_PMUXE( PORT_PMUX_PMUXE_D_Val );
     ad2:	4a08      	ldr	r2, [pc, #32]	; (af4 <uart_pin_init+0x70>)
     ad4:	687b      	ldr	r3, [r7, #4]
     ad6:	b2db      	uxtb	r3, r3
     ad8:	2103      	movs	r1, #3
     ada:	430b      	orrs	r3, r1
     adc:	b2d9      	uxtb	r1, r3
     ade:	23b2      	movs	r3, #178	; 0xb2
     ae0:	54d1      	strb	r1, [r2, r3]
	PORT->Group[PORTGROUP_B].PINCFG[UART_RX_PIN].reg = PORT_PINCFG_PMUXEN | PORT_PINCFG_INEN; // Enable port mux
     ae2:	4a04      	ldr	r2, [pc, #16]	; (af4 <uart_pin_init+0x70>)
     ae4:	23c5      	movs	r3, #197	; 0xc5
     ae6:	2103      	movs	r1, #3
     ae8:	54d1      	strb	r1, [r2, r3]
}
     aea:	46c0      	nop			; (mov r8, r8)
     aec:	46bd      	mov	sp, r7
     aee:	b002      	add	sp, #8
     af0:	bd80      	pop	{r7, pc}
     af2:	46c0      	nop			; (mov r8, r8)
     af4:	41004400 	.word	0x41004400

00000af8 <uart_init>:

void uart_init(void)
{
     af8:	b580      	push	{r7, lr}
     afa:	af00      	add	r7, sp, #0
	uart_clk_init();
     afc:	4b17      	ldr	r3, [pc, #92]	; (b5c <uart_init+0x64>)
     afe:	4798      	blx	r3
	uart_pin_init();
     b00:	4b17      	ldr	r3, [pc, #92]	; (b60 <uart_init+0x68>)
     b02:	4798      	blx	r3
	
	UART_MODULE->USART.CTRLA.reg =
     b04:	4b17      	ldr	r3, [pc, #92]	; (b64 <uart_init+0x6c>)
     b06:	4a18      	ldr	r2, [pc, #96]	; (b68 <uart_init+0x70>)
     b08:	601a      	str	r2, [r3, #0]
	SERCOM_USART_CTRLA_MODE_USART_INT_CLK;			// Use internal clock
	
	// Asynchronous arithmetic mode
	// 65535 * ( 1 - sampleRateValue * baudrate / SystemCoreClock);
	// 65535 - 65535 * (sampleRateValue * baudrate / SystemCoreClock));
	UART_MODULE->USART.BAUD.reg = 65535.0f * ( 1.0f - (16.0 * (float)(UART_BAUDRATE)) / (float)(SYSTEM_CLK));
     b0a:	4b16      	ldr	r3, [pc, #88]	; (b64 <uart_init+0x6c>)
     b0c:	4a17      	ldr	r2, [pc, #92]	; (b6c <uart_init+0x74>)
     b0e:	819a      	strh	r2, [r3, #12]
	//BLE_UART_SERCOM->USART.BAUD.bit.BAUD = 9600;
	
	UART_MODULE->USART.CTRLB.reg =
     b10:	4b14      	ldr	r3, [pc, #80]	; (b64 <uart_init+0x6c>)
     b12:	2280      	movs	r2, #128	; 0x80
     b14:	0252      	lsls	r2, r2, #9
     b16:	605a      	str	r2, [r3, #4]
	SERCOM_USART_CTRLB_CHSIZE(0)	|	// 8 bit character size
	SERCOM_USART_CTRLB_TXEN;			//|	// Enable Transmit
	//SERCOM_USART_CTRLB_RXEN;			// Enable Receive

	// Get Synced
	while (UART_MODULE->USART.SYNCBUSY.bit.CTRLB);
     b18:	46c0      	nop			; (mov r8, r8)
     b1a:	4b12      	ldr	r3, [pc, #72]	; (b64 <uart_init+0x6c>)
     b1c:	69db      	ldr	r3, [r3, #28]
     b1e:	075b      	lsls	r3, r3, #29
     b20:	0fdb      	lsrs	r3, r3, #31
     b22:	b2db      	uxtb	r3, r3
     b24:	2b00      	cmp	r3, #0
     b26:	d1f8      	bne.n	b1a <uart_init+0x22>

	//Set the Interrupt to use
	UART_MODULE->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;	// Interrupt on received complete
     b28:	4b0e      	ldr	r3, [pc, #56]	; (b64 <uart_init+0x6c>)
     b2a:	2204      	movs	r2, #4
     b2c:	759a      	strb	r2, [r3, #22]
	
	// Enable interrupts
	NVIC_EnableIRQ(SERCOM5_IRQn);
     b2e:	200e      	movs	r0, #14
     b30:	4b0f      	ldr	r3, [pc, #60]	; (b70 <uart_init+0x78>)
     b32:	4798      	blx	r3
	NVIC_SetPriority(SERCOM5_IRQn,1);
     b34:	2101      	movs	r1, #1
     b36:	200e      	movs	r0, #14
     b38:	4b0e      	ldr	r3, [pc, #56]	; (b74 <uart_init+0x7c>)
     b3a:	4798      	blx	r3
	
	// enable the peripheral block
	UART_MODULE->USART.CTRLA.bit.ENABLE = 0x1u;
     b3c:	4a09      	ldr	r2, [pc, #36]	; (b64 <uart_init+0x6c>)
     b3e:	6813      	ldr	r3, [r2, #0]
     b40:	2102      	movs	r1, #2
     b42:	430b      	orrs	r3, r1
     b44:	6013      	str	r3, [r2, #0]
	
	// Wait for sercom to enable
	while(UART_MODULE->USART.SYNCBUSY.bit.ENABLE);
     b46:	46c0      	nop			; (mov r8, r8)
     b48:	4b06      	ldr	r3, [pc, #24]	; (b64 <uart_init+0x6c>)
     b4a:	69db      	ldr	r3, [r3, #28]
     b4c:	079b      	lsls	r3, r3, #30
     b4e:	0fdb      	lsrs	r3, r3, #31
     b50:	b2db      	uxtb	r3, r3
     b52:	2b00      	cmp	r3, #0
     b54:	d1f8      	bne.n	b48 <uart_init+0x50>
}
     b56:	46c0      	nop			; (mov r8, r8)
     b58:	46bd      	mov	sp, r7
     b5a:	bd80      	pop	{r7, pc}
     b5c:	00000a21 	.word	0x00000a21
     b60:	00000a85 	.word	0x00000a85
     b64:	42001c00 	.word	0x42001c00
     b68:	40200084 	.word	0x40200084
     b6c:	ffffc503 	.word	0xffffc503
     b70:	00000919 	.word	0x00000919
     b74:	00000945 	.word	0x00000945

00000b78 <uart_write>:

enum status_code uart_write(uint8_t *data)
{
     b78:	b580      	push	{r7, lr}
     b7a:	b084      	sub	sp, #16
     b7c:	af00      	add	r7, sp, #0
     b7e:	6078      	str	r0, [r7, #4]
	uint32_t i = 0;
     b80:	2300      	movs	r3, #0
     b82:	60fb      	str	r3, [r7, #12]
	while(data[i] != '\0')
     b84:	e00f      	b.n	ba6 <uart_write+0x2e>
	{
		
		if(UART_MODULE->USART.INTFLAG.bit.DRE == 1)
     b86:	4b0d      	ldr	r3, [pc, #52]	; (bbc <uart_write+0x44>)
     b88:	7e1b      	ldrb	r3, [r3, #24]
     b8a:	07db      	lsls	r3, r3, #31
     b8c:	0fdb      	lsrs	r3, r3, #31
     b8e:	b2db      	uxtb	r3, r3
     b90:	2b01      	cmp	r3, #1
     b92:	d108      	bne.n	ba6 <uart_write+0x2e>
		{
			UART_MODULE->USART.DATA.reg = (uint16_t)data[i++];
     b94:	4909      	ldr	r1, [pc, #36]	; (bbc <uart_write+0x44>)
     b96:	68fb      	ldr	r3, [r7, #12]
     b98:	1c5a      	adds	r2, r3, #1
     b9a:	60fa      	str	r2, [r7, #12]
     b9c:	687a      	ldr	r2, [r7, #4]
     b9e:	18d3      	adds	r3, r2, r3
     ba0:	781b      	ldrb	r3, [r3, #0]
     ba2:	b29b      	uxth	r3, r3
     ba4:	850b      	strh	r3, [r1, #40]	; 0x28
	while(data[i] != '\0')
     ba6:	687a      	ldr	r2, [r7, #4]
     ba8:	68fb      	ldr	r3, [r7, #12]
     baa:	18d3      	adds	r3, r2, r3
     bac:	781b      	ldrb	r3, [r3, #0]
     bae:	2b00      	cmp	r3, #0
     bb0:	d1e9      	bne.n	b86 <uart_write+0xe>
		}
	}
	return STATUS_OK;
     bb2:	2300      	movs	r3, #0
}
     bb4:	0018      	movs	r0, r3
     bb6:	46bd      	mov	sp, r7
     bb8:	b004      	add	sp, #16
     bba:	bd80      	pop	{r7, pc}
     bbc:	42001c00 	.word	0x42001c00

00000bc0 <delay_cycles>:
 *
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
     bc0:	b580      	push	{r7, lr}
     bc2:	b082      	sub	sp, #8
     bc4:	af00      	add	r7, sp, #0
     bc6:	6078      	str	r0, [r7, #4]
	if (n > 0) {
     bc8:	687b      	ldr	r3, [r7, #4]
     bca:	2b00      	cmp	r3, #0
     bcc:	d00c      	beq.n	be8 <delay_cycles+0x28>
		SysTick->LOAD = n;
     bce:	4b08      	ldr	r3, [pc, #32]	; (bf0 <delay_cycles+0x30>)
     bd0:	687a      	ldr	r2, [r7, #4]
     bd2:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
     bd4:	4b06      	ldr	r3, [pc, #24]	; (bf0 <delay_cycles+0x30>)
     bd6:	2200      	movs	r2, #0
     bd8:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     bda:	46c0      	nop			; (mov r8, r8)
     bdc:	4b04      	ldr	r3, [pc, #16]	; (bf0 <delay_cycles+0x30>)
     bde:	681a      	ldr	r2, [r3, #0]
     be0:	2380      	movs	r3, #128	; 0x80
     be2:	025b      	lsls	r3, r3, #9
     be4:	4013      	ands	r3, r2
     be6:	d0f9      	beq.n	bdc <delay_cycles+0x1c>
		};
	}
}
     be8:	46c0      	nop			; (mov r8, r8)
     bea:	46bd      	mov	sp, r7
     bec:	b002      	add	sp, #8
     bee:	bd80      	pop	{r7, pc}
     bf0:	e000e010 	.word	0xe000e010

00000bf4 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     bf4:	b580      	push	{r7, lr}
     bf6:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
     bf8:	2000      	movs	r0, #0
     bfa:	4b0f      	ldr	r3, [pc, #60]	; (c38 <delay_init+0x44>)
     bfc:	4798      	blx	r3
     bfe:	0002      	movs	r2, r0
     c00:	4b0e      	ldr	r3, [pc, #56]	; (c3c <delay_init+0x48>)
     c02:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
     c04:	4b0d      	ldr	r3, [pc, #52]	; (c3c <delay_init+0x48>)
     c06:	6818      	ldr	r0, [r3, #0]
     c08:	4b0d      	ldr	r3, [pc, #52]	; (c40 <delay_init+0x4c>)
     c0a:	22fa      	movs	r2, #250	; 0xfa
     c0c:	0091      	lsls	r1, r2, #2
     c0e:	4798      	blx	r3
     c10:	0003      	movs	r3, r0
     c12:	001a      	movs	r2, r3
     c14:	4b09      	ldr	r3, [pc, #36]	; (c3c <delay_init+0x48>)
     c16:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     c18:	4b08      	ldr	r3, [pc, #32]	; (c3c <delay_init+0x48>)
     c1a:	6818      	ldr	r0, [r3, #0]
     c1c:	4b08      	ldr	r3, [pc, #32]	; (c40 <delay_init+0x4c>)
     c1e:	22fa      	movs	r2, #250	; 0xfa
     c20:	0091      	lsls	r1, r2, #2
     c22:	4798      	blx	r3
     c24:	0003      	movs	r3, r0
     c26:	001a      	movs	r2, r3
     c28:	4b06      	ldr	r3, [pc, #24]	; (c44 <delay_init+0x50>)
     c2a:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     c2c:	4b06      	ldr	r3, [pc, #24]	; (c48 <delay_init+0x54>)
     c2e:	2205      	movs	r2, #5
     c30:	601a      	str	r2, [r3, #0]
}
     c32:	46c0      	nop			; (mov r8, r8)
     c34:	46bd      	mov	sp, r7
     c36:	bd80      	pop	{r7, pc}
     c38:	00003f91 	.word	0x00003f91
     c3c:	20000000 	.word	0x20000000
     c40:	00005fd5 	.word	0x00005fd5
     c44:	20000004 	.word	0x20000004
     c48:	e000e010 	.word	0xe000e010

00000c4c <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     c4c:	b580      	push	{r7, lr}
     c4e:	b082      	sub	sp, #8
     c50:	af00      	add	r7, sp, #0
     c52:	6078      	str	r0, [r7, #4]
	while (n--) {
     c54:	e004      	b.n	c60 <delay_cycles_ms+0x14>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     c56:	4b07      	ldr	r3, [pc, #28]	; (c74 <delay_cycles_ms+0x28>)
     c58:	681b      	ldr	r3, [r3, #0]
     c5a:	0018      	movs	r0, r3
     c5c:	4b06      	ldr	r3, [pc, #24]	; (c78 <delay_cycles_ms+0x2c>)
     c5e:	4798      	blx	r3
	while (n--) {
     c60:	687b      	ldr	r3, [r7, #4]
     c62:	1e5a      	subs	r2, r3, #1
     c64:	607a      	str	r2, [r7, #4]
     c66:	2b00      	cmp	r3, #0
     c68:	d1f5      	bne.n	c56 <delay_cycles_ms+0xa>
	}
}
     c6a:	46c0      	nop			; (mov r8, r8)
     c6c:	46bd      	mov	sp, r7
     c6e:	b002      	add	sp, #8
     c70:	bd80      	pop	{r7, pc}
     c72:	46c0      	nop			; (mov r8, r8)
     c74:	20000000 	.word	0x20000000
     c78:	00000bc1 	.word	0x00000bc1

00000c7c <system_gclk_chan_get_config_defaults>:
{
     c7c:	b580      	push	{r7, lr}
     c7e:	b082      	sub	sp, #8
     c80:	af00      	add	r7, sp, #0
     c82:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
     c84:	687b      	ldr	r3, [r7, #4]
     c86:	2200      	movs	r2, #0
     c88:	701a      	strb	r2, [r3, #0]
}
     c8a:	46c0      	nop			; (mov r8, r8)
     c8c:	46bd      	mov	sp, r7
     c8e:	b002      	add	sp, #8
     c90:	bd80      	pop	{r7, pc}

00000c92 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     c92:	b580      	push	{r7, lr}
     c94:	b086      	sub	sp, #24
     c96:	af00      	add	r7, sp, #0
     c98:	60f8      	str	r0, [r7, #12]
     c9a:	60b9      	str	r1, [r7, #8]
     c9c:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
     c9e:	2316      	movs	r3, #22
     ca0:	18fb      	adds	r3, r7, r3
     ca2:	2200      	movs	r2, #0
     ca4:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
     ca6:	68bb      	ldr	r3, [r7, #8]
     ca8:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     caa:	68bb      	ldr	r3, [r7, #8]
     cac:	085a      	lsrs	r2, r3, #1
     cae:	68fb      	ldr	r3, [r7, #12]
     cb0:	429a      	cmp	r2, r3
     cb2:	d201      	bcs.n	cb8 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     cb4:	2340      	movs	r3, #64	; 0x40
     cb6:	e026      	b.n	d06 <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
     cb8:	68bb      	ldr	r3, [r7, #8]
     cba:	085b      	lsrs	r3, r3, #1
     cbc:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
     cbe:	e00a      	b.n	cd6 <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
     cc0:	693a      	ldr	r2, [r7, #16]
     cc2:	68fb      	ldr	r3, [r7, #12]
     cc4:	1ad3      	subs	r3, r2, r3
     cc6:	613b      	str	r3, [r7, #16]
		baud_calculated++;
     cc8:	2316      	movs	r3, #22
     cca:	18fb      	adds	r3, r7, r3
     ccc:	881a      	ldrh	r2, [r3, #0]
     cce:	2316      	movs	r3, #22
     cd0:	18fb      	adds	r3, r7, r3
     cd2:	3201      	adds	r2, #1
     cd4:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
     cd6:	693a      	ldr	r2, [r7, #16]
     cd8:	68fb      	ldr	r3, [r7, #12]
     cda:	429a      	cmp	r2, r3
     cdc:	d2f0      	bcs.n	cc0 <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
     cde:	2316      	movs	r3, #22
     ce0:	18fb      	adds	r3, r7, r3
     ce2:	2216      	movs	r2, #22
     ce4:	18ba      	adds	r2, r7, r2
     ce6:	8812      	ldrh	r2, [r2, #0]
     ce8:	3a01      	subs	r2, #1
     cea:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
     cec:	2316      	movs	r3, #22
     cee:	18fb      	adds	r3, r7, r3
     cf0:	881b      	ldrh	r3, [r3, #0]
     cf2:	2bff      	cmp	r3, #255	; 0xff
     cf4:	d901      	bls.n	cfa <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     cf6:	2340      	movs	r3, #64	; 0x40
     cf8:	e005      	b.n	d06 <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
     cfa:	687b      	ldr	r3, [r7, #4]
     cfc:	2216      	movs	r2, #22
     cfe:	18ba      	adds	r2, r7, r2
     d00:	8812      	ldrh	r2, [r2, #0]
     d02:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
     d04:	2300      	movs	r3, #0
	}
}
     d06:	0018      	movs	r0, r3
     d08:	46bd      	mov	sp, r7
     d0a:	b006      	add	sp, #24
     d0c:	bd80      	pop	{r7, pc}
	...

00000d10 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     d10:	b580      	push	{r7, lr}
     d12:	b084      	sub	sp, #16
     d14:	af00      	add	r7, sp, #0
     d16:	0002      	movs	r2, r0
     d18:	1dfb      	adds	r3, r7, #7
     d1a:	701a      	strb	r2, [r3, #0]
     d1c:	1dbb      	adds	r3, r7, #6
     d1e:	1c0a      	adds	r2, r1, #0
     d20:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     d22:	4b1a      	ldr	r3, [pc, #104]	; (d8c <sercom_set_gclk_generator+0x7c>)
     d24:	781b      	ldrb	r3, [r3, #0]
     d26:	2201      	movs	r2, #1
     d28:	4053      	eors	r3, r2
     d2a:	b2db      	uxtb	r3, r3
     d2c:	2b00      	cmp	r3, #0
     d2e:	d103      	bne.n	d38 <sercom_set_gclk_generator+0x28>
     d30:	1dbb      	adds	r3, r7, #6
     d32:	781b      	ldrb	r3, [r3, #0]
     d34:	2b00      	cmp	r3, #0
     d36:	d01b      	beq.n	d70 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     d38:	230c      	movs	r3, #12
     d3a:	18fb      	adds	r3, r7, r3
     d3c:	0018      	movs	r0, r3
     d3e:	4b14      	ldr	r3, [pc, #80]	; (d90 <sercom_set_gclk_generator+0x80>)
     d40:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
     d42:	230c      	movs	r3, #12
     d44:	18fb      	adds	r3, r7, r3
     d46:	1dfa      	adds	r2, r7, #7
     d48:	7812      	ldrb	r2, [r2, #0]
     d4a:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     d4c:	230c      	movs	r3, #12
     d4e:	18fb      	adds	r3, r7, r3
     d50:	0019      	movs	r1, r3
     d52:	2013      	movs	r0, #19
     d54:	4b0f      	ldr	r3, [pc, #60]	; (d94 <sercom_set_gclk_generator+0x84>)
     d56:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     d58:	2013      	movs	r0, #19
     d5a:	4b0f      	ldr	r3, [pc, #60]	; (d98 <sercom_set_gclk_generator+0x88>)
     d5c:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
     d5e:	4b0b      	ldr	r3, [pc, #44]	; (d8c <sercom_set_gclk_generator+0x7c>)
     d60:	1dfa      	adds	r2, r7, #7
     d62:	7812      	ldrb	r2, [r2, #0]
     d64:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
     d66:	4b09      	ldr	r3, [pc, #36]	; (d8c <sercom_set_gclk_generator+0x7c>)
     d68:	2201      	movs	r2, #1
     d6a:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
     d6c:	2300      	movs	r3, #0
     d6e:	e008      	b.n	d82 <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
     d70:	4b06      	ldr	r3, [pc, #24]	; (d8c <sercom_set_gclk_generator+0x7c>)
     d72:	785b      	ldrb	r3, [r3, #1]
     d74:	1dfa      	adds	r2, r7, #7
     d76:	7812      	ldrb	r2, [r2, #0]
     d78:	429a      	cmp	r2, r3
     d7a:	d101      	bne.n	d80 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
     d7c:	2300      	movs	r3, #0
     d7e:	e000      	b.n	d82 <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     d80:	231d      	movs	r3, #29
}
     d82:	0018      	movs	r0, r3
     d84:	46bd      	mov	sp, r7
     d86:	b004      	add	sp, #16
     d88:	bd80      	pop	{r7, pc}
     d8a:	46c0      	nop			; (mov r8, r8)
     d8c:	20000094 	.word	0x20000094
     d90:	00000c7d 	.word	0x00000c7d
     d94:	00004069 	.word	0x00004069
     d98:	000040ad 	.word	0x000040ad

00000d9c <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
     d9c:	b580      	push	{r7, lr}
     d9e:	b082      	sub	sp, #8
     da0:	af00      	add	r7, sp, #0
     da2:	6078      	str	r0, [r7, #4]
     da4:	000a      	movs	r2, r1
     da6:	1cfb      	adds	r3, r7, #3
     da8:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
     daa:	687b      	ldr	r3, [r7, #4]
     dac:	4a4d      	ldr	r2, [pc, #308]	; (ee4 <_sercom_get_default_pad+0x148>)
     dae:	4293      	cmp	r3, r2
     db0:	d03f      	beq.n	e32 <_sercom_get_default_pad+0x96>
     db2:	4a4c      	ldr	r2, [pc, #304]	; (ee4 <_sercom_get_default_pad+0x148>)
     db4:	4293      	cmp	r3, r2
     db6:	d806      	bhi.n	dc6 <_sercom_get_default_pad+0x2a>
     db8:	4a4b      	ldr	r2, [pc, #300]	; (ee8 <_sercom_get_default_pad+0x14c>)
     dba:	4293      	cmp	r3, r2
     dbc:	d00f      	beq.n	dde <_sercom_get_default_pad+0x42>
     dbe:	4a4b      	ldr	r2, [pc, #300]	; (eec <_sercom_get_default_pad+0x150>)
     dc0:	4293      	cmp	r3, r2
     dc2:	d021      	beq.n	e08 <_sercom_get_default_pad+0x6c>
     dc4:	e089      	b.n	eda <_sercom_get_default_pad+0x13e>
     dc6:	4a4a      	ldr	r2, [pc, #296]	; (ef0 <_sercom_get_default_pad+0x154>)
     dc8:	4293      	cmp	r3, r2
     dca:	d100      	bne.n	dce <_sercom_get_default_pad+0x32>
     dcc:	e05b      	b.n	e86 <_sercom_get_default_pad+0xea>
     dce:	4a49      	ldr	r2, [pc, #292]	; (ef4 <_sercom_get_default_pad+0x158>)
     dd0:	4293      	cmp	r3, r2
     dd2:	d100      	bne.n	dd6 <_sercom_get_default_pad+0x3a>
     dd4:	e06c      	b.n	eb0 <_sercom_get_default_pad+0x114>
     dd6:	4a48      	ldr	r2, [pc, #288]	; (ef8 <_sercom_get_default_pad+0x15c>)
     dd8:	4293      	cmp	r3, r2
     dda:	d03f      	beq.n	e5c <_sercom_get_default_pad+0xc0>
     ddc:	e07d      	b.n	eda <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     dde:	1cfb      	adds	r3, r7, #3
     de0:	781b      	ldrb	r3, [r3, #0]
     de2:	2b01      	cmp	r3, #1
     de4:	d00a      	beq.n	dfc <_sercom_get_default_pad+0x60>
     de6:	dc02      	bgt.n	dee <_sercom_get_default_pad+0x52>
     de8:	2b00      	cmp	r3, #0
     dea:	d005      	beq.n	df8 <_sercom_get_default_pad+0x5c>
     dec:	e075      	b.n	eda <_sercom_get_default_pad+0x13e>
     dee:	2b02      	cmp	r3, #2
     df0:	d006      	beq.n	e00 <_sercom_get_default_pad+0x64>
     df2:	2b03      	cmp	r3, #3
     df4:	d006      	beq.n	e04 <_sercom_get_default_pad+0x68>
     df6:	e070      	b.n	eda <_sercom_get_default_pad+0x13e>
     df8:	4b40      	ldr	r3, [pc, #256]	; (efc <_sercom_get_default_pad+0x160>)
     dfa:	e06f      	b.n	edc <_sercom_get_default_pad+0x140>
     dfc:	4b40      	ldr	r3, [pc, #256]	; (f00 <_sercom_get_default_pad+0x164>)
     dfe:	e06d      	b.n	edc <_sercom_get_default_pad+0x140>
     e00:	4b40      	ldr	r3, [pc, #256]	; (f04 <_sercom_get_default_pad+0x168>)
     e02:	e06b      	b.n	edc <_sercom_get_default_pad+0x140>
     e04:	4b40      	ldr	r3, [pc, #256]	; (f08 <_sercom_get_default_pad+0x16c>)
     e06:	e069      	b.n	edc <_sercom_get_default_pad+0x140>
     e08:	1cfb      	adds	r3, r7, #3
     e0a:	781b      	ldrb	r3, [r3, #0]
     e0c:	2b01      	cmp	r3, #1
     e0e:	d00a      	beq.n	e26 <_sercom_get_default_pad+0x8a>
     e10:	dc02      	bgt.n	e18 <_sercom_get_default_pad+0x7c>
     e12:	2b00      	cmp	r3, #0
     e14:	d005      	beq.n	e22 <_sercom_get_default_pad+0x86>
     e16:	e060      	b.n	eda <_sercom_get_default_pad+0x13e>
     e18:	2b02      	cmp	r3, #2
     e1a:	d006      	beq.n	e2a <_sercom_get_default_pad+0x8e>
     e1c:	2b03      	cmp	r3, #3
     e1e:	d006      	beq.n	e2e <_sercom_get_default_pad+0x92>
     e20:	e05b      	b.n	eda <_sercom_get_default_pad+0x13e>
     e22:	2303      	movs	r3, #3
     e24:	e05a      	b.n	edc <_sercom_get_default_pad+0x140>
     e26:	4b39      	ldr	r3, [pc, #228]	; (f0c <_sercom_get_default_pad+0x170>)
     e28:	e058      	b.n	edc <_sercom_get_default_pad+0x140>
     e2a:	4b39      	ldr	r3, [pc, #228]	; (f10 <_sercom_get_default_pad+0x174>)
     e2c:	e056      	b.n	edc <_sercom_get_default_pad+0x140>
     e2e:	4b39      	ldr	r3, [pc, #228]	; (f14 <_sercom_get_default_pad+0x178>)
     e30:	e054      	b.n	edc <_sercom_get_default_pad+0x140>
     e32:	1cfb      	adds	r3, r7, #3
     e34:	781b      	ldrb	r3, [r3, #0]
     e36:	2b01      	cmp	r3, #1
     e38:	d00a      	beq.n	e50 <_sercom_get_default_pad+0xb4>
     e3a:	dc02      	bgt.n	e42 <_sercom_get_default_pad+0xa6>
     e3c:	2b00      	cmp	r3, #0
     e3e:	d005      	beq.n	e4c <_sercom_get_default_pad+0xb0>
     e40:	e04b      	b.n	eda <_sercom_get_default_pad+0x13e>
     e42:	2b02      	cmp	r3, #2
     e44:	d006      	beq.n	e54 <_sercom_get_default_pad+0xb8>
     e46:	2b03      	cmp	r3, #3
     e48:	d006      	beq.n	e58 <_sercom_get_default_pad+0xbc>
     e4a:	e046      	b.n	eda <_sercom_get_default_pad+0x13e>
     e4c:	4b32      	ldr	r3, [pc, #200]	; (f18 <_sercom_get_default_pad+0x17c>)
     e4e:	e045      	b.n	edc <_sercom_get_default_pad+0x140>
     e50:	4b32      	ldr	r3, [pc, #200]	; (f1c <_sercom_get_default_pad+0x180>)
     e52:	e043      	b.n	edc <_sercom_get_default_pad+0x140>
     e54:	4b32      	ldr	r3, [pc, #200]	; (f20 <_sercom_get_default_pad+0x184>)
     e56:	e041      	b.n	edc <_sercom_get_default_pad+0x140>
     e58:	4b32      	ldr	r3, [pc, #200]	; (f24 <_sercom_get_default_pad+0x188>)
     e5a:	e03f      	b.n	edc <_sercom_get_default_pad+0x140>
     e5c:	1cfb      	adds	r3, r7, #3
     e5e:	781b      	ldrb	r3, [r3, #0]
     e60:	2b01      	cmp	r3, #1
     e62:	d00a      	beq.n	e7a <_sercom_get_default_pad+0xde>
     e64:	dc02      	bgt.n	e6c <_sercom_get_default_pad+0xd0>
     e66:	2b00      	cmp	r3, #0
     e68:	d005      	beq.n	e76 <_sercom_get_default_pad+0xda>
     e6a:	e036      	b.n	eda <_sercom_get_default_pad+0x13e>
     e6c:	2b02      	cmp	r3, #2
     e6e:	d006      	beq.n	e7e <_sercom_get_default_pad+0xe2>
     e70:	2b03      	cmp	r3, #3
     e72:	d006      	beq.n	e82 <_sercom_get_default_pad+0xe6>
     e74:	e031      	b.n	eda <_sercom_get_default_pad+0x13e>
     e76:	4b2c      	ldr	r3, [pc, #176]	; (f28 <_sercom_get_default_pad+0x18c>)
     e78:	e030      	b.n	edc <_sercom_get_default_pad+0x140>
     e7a:	4b2c      	ldr	r3, [pc, #176]	; (f2c <_sercom_get_default_pad+0x190>)
     e7c:	e02e      	b.n	edc <_sercom_get_default_pad+0x140>
     e7e:	4b2c      	ldr	r3, [pc, #176]	; (f30 <_sercom_get_default_pad+0x194>)
     e80:	e02c      	b.n	edc <_sercom_get_default_pad+0x140>
     e82:	4b2c      	ldr	r3, [pc, #176]	; (f34 <_sercom_get_default_pad+0x198>)
     e84:	e02a      	b.n	edc <_sercom_get_default_pad+0x140>
     e86:	1cfb      	adds	r3, r7, #3
     e88:	781b      	ldrb	r3, [r3, #0]
     e8a:	2b01      	cmp	r3, #1
     e8c:	d00a      	beq.n	ea4 <_sercom_get_default_pad+0x108>
     e8e:	dc02      	bgt.n	e96 <_sercom_get_default_pad+0xfa>
     e90:	2b00      	cmp	r3, #0
     e92:	d005      	beq.n	ea0 <_sercom_get_default_pad+0x104>
     e94:	e021      	b.n	eda <_sercom_get_default_pad+0x13e>
     e96:	2b02      	cmp	r3, #2
     e98:	d006      	beq.n	ea8 <_sercom_get_default_pad+0x10c>
     e9a:	2b03      	cmp	r3, #3
     e9c:	d006      	beq.n	eac <_sercom_get_default_pad+0x110>
     e9e:	e01c      	b.n	eda <_sercom_get_default_pad+0x13e>
     ea0:	4b25      	ldr	r3, [pc, #148]	; (f38 <_sercom_get_default_pad+0x19c>)
     ea2:	e01b      	b.n	edc <_sercom_get_default_pad+0x140>
     ea4:	4b25      	ldr	r3, [pc, #148]	; (f3c <_sercom_get_default_pad+0x1a0>)
     ea6:	e019      	b.n	edc <_sercom_get_default_pad+0x140>
     ea8:	4b25      	ldr	r3, [pc, #148]	; (f40 <_sercom_get_default_pad+0x1a4>)
     eaa:	e017      	b.n	edc <_sercom_get_default_pad+0x140>
     eac:	4b25      	ldr	r3, [pc, #148]	; (f44 <_sercom_get_default_pad+0x1a8>)
     eae:	e015      	b.n	edc <_sercom_get_default_pad+0x140>
     eb0:	1cfb      	adds	r3, r7, #3
     eb2:	781b      	ldrb	r3, [r3, #0]
     eb4:	2b01      	cmp	r3, #1
     eb6:	d00a      	beq.n	ece <_sercom_get_default_pad+0x132>
     eb8:	dc02      	bgt.n	ec0 <_sercom_get_default_pad+0x124>
     eba:	2b00      	cmp	r3, #0
     ebc:	d005      	beq.n	eca <_sercom_get_default_pad+0x12e>
     ebe:	e00c      	b.n	eda <_sercom_get_default_pad+0x13e>
     ec0:	2b02      	cmp	r3, #2
     ec2:	d006      	beq.n	ed2 <_sercom_get_default_pad+0x136>
     ec4:	2b03      	cmp	r3, #3
     ec6:	d006      	beq.n	ed6 <_sercom_get_default_pad+0x13a>
     ec8:	e007      	b.n	eda <_sercom_get_default_pad+0x13e>
     eca:	4b1f      	ldr	r3, [pc, #124]	; (f48 <_sercom_get_default_pad+0x1ac>)
     ecc:	e006      	b.n	edc <_sercom_get_default_pad+0x140>
     ece:	4b1f      	ldr	r3, [pc, #124]	; (f4c <_sercom_get_default_pad+0x1b0>)
     ed0:	e004      	b.n	edc <_sercom_get_default_pad+0x140>
     ed2:	4b1f      	ldr	r3, [pc, #124]	; (f50 <_sercom_get_default_pad+0x1b4>)
     ed4:	e002      	b.n	edc <_sercom_get_default_pad+0x140>
     ed6:	4b1f      	ldr	r3, [pc, #124]	; (f54 <_sercom_get_default_pad+0x1b8>)
     ed8:	e000      	b.n	edc <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
     eda:	2300      	movs	r3, #0
}
     edc:	0018      	movs	r0, r3
     ede:	46bd      	mov	sp, r7
     ee0:	b002      	add	sp, #8
     ee2:	bd80      	pop	{r7, pc}
     ee4:	42001000 	.word	0x42001000
     ee8:	42000800 	.word	0x42000800
     eec:	42000c00 	.word	0x42000c00
     ef0:	42001800 	.word	0x42001800
     ef4:	42001c00 	.word	0x42001c00
     ef8:	42001400 	.word	0x42001400
     efc:	00040003 	.word	0x00040003
     f00:	00050003 	.word	0x00050003
     f04:	00060003 	.word	0x00060003
     f08:	00070003 	.word	0x00070003
     f0c:	00010003 	.word	0x00010003
     f10:	001e0003 	.word	0x001e0003
     f14:	001f0003 	.word	0x001f0003
     f18:	00080003 	.word	0x00080003
     f1c:	00090003 	.word	0x00090003
     f20:	000a0003 	.word	0x000a0003
     f24:	000b0003 	.word	0x000b0003
     f28:	00100003 	.word	0x00100003
     f2c:	00110003 	.word	0x00110003
     f30:	00120003 	.word	0x00120003
     f34:	00130003 	.word	0x00130003
     f38:	000c0003 	.word	0x000c0003
     f3c:	000d0003 	.word	0x000d0003
     f40:	000e0003 	.word	0x000e0003
     f44:	000f0003 	.word	0x000f0003
     f48:	00160003 	.word	0x00160003
     f4c:	00170003 	.word	0x00170003
     f50:	00180003 	.word	0x00180003
     f54:	00190003 	.word	0x00190003

00000f58 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     f58:	b590      	push	{r4, r7, lr}
     f5a:	b08b      	sub	sp, #44	; 0x2c
     f5c:	af00      	add	r7, sp, #0
     f5e:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     f60:	230c      	movs	r3, #12
     f62:	18fb      	adds	r3, r7, r3
     f64:	4a0f      	ldr	r2, [pc, #60]	; (fa4 <_sercom_get_sercom_inst_index+0x4c>)
     f66:	ca13      	ldmia	r2!, {r0, r1, r4}
     f68:	c313      	stmia	r3!, {r0, r1, r4}
     f6a:	ca13      	ldmia	r2!, {r0, r1, r4}
     f6c:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     f6e:	2300      	movs	r3, #0
     f70:	627b      	str	r3, [r7, #36]	; 0x24
     f72:	e00e      	b.n	f92 <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     f74:	230c      	movs	r3, #12
     f76:	18fb      	adds	r3, r7, r3
     f78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     f7a:	0092      	lsls	r2, r2, #2
     f7c:	58d3      	ldr	r3, [r2, r3]
     f7e:	001a      	movs	r2, r3
     f80:	687b      	ldr	r3, [r7, #4]
     f82:	429a      	cmp	r2, r3
     f84:	d102      	bne.n	f8c <_sercom_get_sercom_inst_index+0x34>
			return i;
     f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     f88:	b2db      	uxtb	r3, r3
     f8a:	e006      	b.n	f9a <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     f8e:	3301      	adds	r3, #1
     f90:	627b      	str	r3, [r7, #36]	; 0x24
     f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     f94:	2b05      	cmp	r3, #5
     f96:	d9ed      	bls.n	f74 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     f98:	2300      	movs	r3, #0
}
     f9a:	0018      	movs	r0, r3
     f9c:	46bd      	mov	sp, r7
     f9e:	b00b      	add	sp, #44	; 0x2c
     fa0:	bd90      	pop	{r4, r7, pc}
     fa2:	46c0      	nop			; (mov r8, r8)
     fa4:	00008914 	.word	0x00008914

00000fa8 <bme280_spi_write>:



//enum status_code bme280_spi_send(uint8_t *data)
void bme280_spi_write(uint8_t *data,uint16_t length)
{
     fa8:	b580      	push	{r7, lr}
     faa:	b082      	sub	sp, #8
     fac:	af00      	add	r7, sp, #0
     fae:	6078      	str	r0, [r7, #4]
     fb0:	000a      	movs	r2, r1
     fb2:	1cbb      	adds	r3, r7, #2
     fb4:	801a      	strh	r2, [r3, #0]
	data[0] &= 0x7F;
     fb6:	687b      	ldr	r3, [r7, #4]
     fb8:	781b      	ldrb	r3, [r3, #0]
     fba:	227f      	movs	r2, #127	; 0x7f
     fbc:	4013      	ands	r3, r2
     fbe:	b2da      	uxtb	r2, r3
     fc0:	687b      	ldr	r3, [r7, #4]
     fc2:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&spi_master_instance,&bme280_slave_instance,true);
     fc4:	490b      	ldr	r1, [pc, #44]	; (ff4 <bme280_spi_write+0x4c>)
     fc6:	4b0c      	ldr	r3, [pc, #48]	; (ff8 <bme280_spi_write+0x50>)
     fc8:	2201      	movs	r2, #1
     fca:	0018      	movs	r0, r3
     fcc:	4b0b      	ldr	r3, [pc, #44]	; (ffc <bme280_spi_write+0x54>)
     fce:	4798      	blx	r3
	spi_write_buffer_wait(&spi_master_instance,data,length);
     fd0:	1cbb      	adds	r3, r7, #2
     fd2:	881a      	ldrh	r2, [r3, #0]
     fd4:	6879      	ldr	r1, [r7, #4]
     fd6:	4b08      	ldr	r3, [pc, #32]	; (ff8 <bme280_spi_write+0x50>)
     fd8:	0018      	movs	r0, r3
     fda:	4b09      	ldr	r3, [pc, #36]	; (1000 <bme280_spi_write+0x58>)
     fdc:	4798      	blx	r3
	spi_select_slave(&spi_master_instance,&bme280_slave_instance,false);
     fde:	4905      	ldr	r1, [pc, #20]	; (ff4 <bme280_spi_write+0x4c>)
     fe0:	4b05      	ldr	r3, [pc, #20]	; (ff8 <bme280_spi_write+0x50>)
     fe2:	2200      	movs	r2, #0
     fe4:	0018      	movs	r0, r3
     fe6:	4b05      	ldr	r3, [pc, #20]	; (ffc <bme280_spi_write+0x54>)
     fe8:	4798      	blx	r3
}
     fea:	46c0      	nop			; (mov r8, r8)
     fec:	46bd      	mov	sp, r7
     fee:	b002      	add	sp, #8
     ff0:	bd80      	pop	{r7, pc}
     ff2:	46c0      	nop			; (mov r8, r8)
     ff4:	20000164 	.word	0x20000164
     ff8:	20000168 	.word	0x20000168
     ffc:	000033c9 	.word	0x000033c9
    1000:	000034b9 	.word	0x000034b9

00001004 <bme280_spi_read>:

void bme280_spi_read(uint8_t *data,uint16_t length,uint8_t reg)
{
    1004:	b590      	push	{r4, r7, lr}
    1006:	b085      	sub	sp, #20
    1008:	af00      	add	r7, sp, #0
    100a:	6078      	str	r0, [r7, #4]
    100c:	0008      	movs	r0, r1
    100e:	0011      	movs	r1, r2
    1010:	1cbb      	adds	r3, r7, #2
    1012:	1c02      	adds	r2, r0, #0
    1014:	801a      	strh	r2, [r3, #0]
    1016:	1c7b      	adds	r3, r7, #1
    1018:	1c0a      	adds	r2, r1, #0
    101a:	701a      	strb	r2, [r3, #0]
	uint16_t dummy = reg | 0x80;
    101c:	1c7b      	adds	r3, r7, #1
    101e:	781b      	ldrb	r3, [r3, #0]
    1020:	2280      	movs	r2, #128	; 0x80
    1022:	4252      	negs	r2, r2
    1024:	4313      	orrs	r3, r2
    1026:	b2db      	uxtb	r3, r3
    1028:	b29a      	uxth	r2, r3
    102a:	230e      	movs	r3, #14
    102c:	18fb      	adds	r3, r7, r3
    102e:	801a      	strh	r2, [r3, #0]
	spi_select_slave(&spi_master_instance,&bme280_slave_instance,true);
    1030:	4910      	ldr	r1, [pc, #64]	; (1074 <bme280_spi_read+0x70>)
    1032:	4b11      	ldr	r3, [pc, #68]	; (1078 <bme280_spi_read+0x74>)
    1034:	2201      	movs	r2, #1
    1036:	0018      	movs	r0, r3
    1038:	4b10      	ldr	r3, [pc, #64]	; (107c <bme280_spi_read+0x78>)
    103a:	4798      	blx	r3
	spi_write_buffer_wait(&spi_master_instance,&dummy,1);
    103c:	230e      	movs	r3, #14
    103e:	18f9      	adds	r1, r7, r3
    1040:	4b0d      	ldr	r3, [pc, #52]	; (1078 <bme280_spi_read+0x74>)
    1042:	2201      	movs	r2, #1
    1044:	0018      	movs	r0, r3
    1046:	4b0e      	ldr	r3, [pc, #56]	; (1080 <bme280_spi_read+0x7c>)
    1048:	4798      	blx	r3
	spi_read_buffer_wait(&spi_master_instance,data,length,dummy);
    104a:	230e      	movs	r3, #14
    104c:	18fb      	adds	r3, r7, r3
    104e:	881c      	ldrh	r4, [r3, #0]
    1050:	1cbb      	adds	r3, r7, #2
    1052:	881a      	ldrh	r2, [r3, #0]
    1054:	6879      	ldr	r1, [r7, #4]
    1056:	4808      	ldr	r0, [pc, #32]	; (1078 <bme280_spi_read+0x74>)
    1058:	0023      	movs	r3, r4
    105a:	4c0a      	ldr	r4, [pc, #40]	; (1084 <bme280_spi_read+0x80>)
    105c:	47a0      	blx	r4
	//spi_transceive_wait(&spi_master_instance,reg,data);
	spi_select_slave(&spi_master_instance,&bme280_slave_instance,false);
    105e:	4905      	ldr	r1, [pc, #20]	; (1074 <bme280_spi_read+0x70>)
    1060:	4b05      	ldr	r3, [pc, #20]	; (1078 <bme280_spi_read+0x74>)
    1062:	2200      	movs	r2, #0
    1064:	0018      	movs	r0, r3
    1066:	4b05      	ldr	r3, [pc, #20]	; (107c <bme280_spi_read+0x78>)
    1068:	4798      	blx	r3
}
    106a:	46c0      	nop			; (mov r8, r8)
    106c:	46bd      	mov	sp, r7
    106e:	b005      	add	sp, #20
    1070:	bd90      	pop	{r4, r7, pc}
    1072:	46c0      	nop			; (mov r8, r8)
    1074:	20000164 	.word	0x20000164
    1078:	20000168 	.word	0x20000168
    107c:	000033c9 	.word	0x000033c9
    1080:	000034b9 	.word	0x000034b9
    1084:	0000321d 	.word	0x0000321d

00001088 <bme280_read_temp>:

void bme280_read_temp(uint8_t *data)
{
    1088:	b590      	push	{r4, r7, lr}
    108a:	b085      	sub	sp, #20
    108c:	af00      	add	r7, sp, #0
    108e:	6078      	str	r0, [r7, #4]
	uint16_t dummy = 0xFA | 0x80;
    1090:	230e      	movs	r3, #14
    1092:	18fb      	adds	r3, r7, r3
    1094:	22fa      	movs	r2, #250	; 0xfa
    1096:	801a      	strh	r2, [r3, #0]
	spi_select_slave(&spi_master_instance,&bme280_slave_instance,true);
    1098:	490e      	ldr	r1, [pc, #56]	; (10d4 <bme280_read_temp+0x4c>)
    109a:	4b0f      	ldr	r3, [pc, #60]	; (10d8 <bme280_read_temp+0x50>)
    109c:	2201      	movs	r2, #1
    109e:	0018      	movs	r0, r3
    10a0:	4b0e      	ldr	r3, [pc, #56]	; (10dc <bme280_read_temp+0x54>)
    10a2:	4798      	blx	r3
	spi_write_buffer_wait(&spi_master_instance,&dummy,1);
    10a4:	230e      	movs	r3, #14
    10a6:	18f9      	adds	r1, r7, r3
    10a8:	4b0b      	ldr	r3, [pc, #44]	; (10d8 <bme280_read_temp+0x50>)
    10aa:	2201      	movs	r2, #1
    10ac:	0018      	movs	r0, r3
    10ae:	4b0c      	ldr	r3, [pc, #48]	; (10e0 <bme280_read_temp+0x58>)
    10b0:	4798      	blx	r3
	spi_read_buffer_wait(&spi_master_instance,data,3,0x00);
    10b2:	6879      	ldr	r1, [r7, #4]
    10b4:	4808      	ldr	r0, [pc, #32]	; (10d8 <bme280_read_temp+0x50>)
    10b6:	2300      	movs	r3, #0
    10b8:	2203      	movs	r2, #3
    10ba:	4c0a      	ldr	r4, [pc, #40]	; (10e4 <bme280_read_temp+0x5c>)
    10bc:	47a0      	blx	r4
	//spi_transceive_wait(&spi_master_instance,reg,data);
	spi_select_slave(&spi_master_instance,&bme280_slave_instance,false);
    10be:	4905      	ldr	r1, [pc, #20]	; (10d4 <bme280_read_temp+0x4c>)
    10c0:	4b05      	ldr	r3, [pc, #20]	; (10d8 <bme280_read_temp+0x50>)
    10c2:	2200      	movs	r2, #0
    10c4:	0018      	movs	r0, r3
    10c6:	4b05      	ldr	r3, [pc, #20]	; (10dc <bme280_read_temp+0x54>)
    10c8:	4798      	blx	r3
}
    10ca:	46c0      	nop			; (mov r8, r8)
    10cc:	46bd      	mov	sp, r7
    10ce:	b005      	add	sp, #20
    10d0:	bd90      	pop	{r4, r7, pc}
    10d2:	46c0      	nop			; (mov r8, r8)
    10d4:	20000164 	.word	0x20000164
    10d8:	20000168 	.word	0x20000168
    10dc:	000033c9 	.word	0x000033c9
    10e0:	000034b9 	.word	0x000034b9
    10e4:	0000321d 	.word	0x0000321d

000010e8 <bme280_read_pres>:

void bme280_read_pres(uint8_t *data)
{
    10e8:	b590      	push	{r4, r7, lr}
    10ea:	b085      	sub	sp, #20
    10ec:	af00      	add	r7, sp, #0
    10ee:	6078      	str	r0, [r7, #4]
	uint16_t dummy = 0xF7 | 0x80;
    10f0:	230e      	movs	r3, #14
    10f2:	18fb      	adds	r3, r7, r3
    10f4:	22f7      	movs	r2, #247	; 0xf7
    10f6:	801a      	strh	r2, [r3, #0]
	spi_select_slave(&spi_master_instance,&bme280_slave_instance,true);
    10f8:	490e      	ldr	r1, [pc, #56]	; (1134 <bme280_read_pres+0x4c>)
    10fa:	4b0f      	ldr	r3, [pc, #60]	; (1138 <bme280_read_pres+0x50>)
    10fc:	2201      	movs	r2, #1
    10fe:	0018      	movs	r0, r3
    1100:	4b0e      	ldr	r3, [pc, #56]	; (113c <bme280_read_pres+0x54>)
    1102:	4798      	blx	r3
	spi_write_buffer_wait(&spi_master_instance,&dummy,1);
    1104:	230e      	movs	r3, #14
    1106:	18f9      	adds	r1, r7, r3
    1108:	4b0b      	ldr	r3, [pc, #44]	; (1138 <bme280_read_pres+0x50>)
    110a:	2201      	movs	r2, #1
    110c:	0018      	movs	r0, r3
    110e:	4b0c      	ldr	r3, [pc, #48]	; (1140 <bme280_read_pres+0x58>)
    1110:	4798      	blx	r3
	spi_read_buffer_wait(&spi_master_instance,data,3,0x00);
    1112:	6879      	ldr	r1, [r7, #4]
    1114:	4808      	ldr	r0, [pc, #32]	; (1138 <bme280_read_pres+0x50>)
    1116:	2300      	movs	r3, #0
    1118:	2203      	movs	r2, #3
    111a:	4c0a      	ldr	r4, [pc, #40]	; (1144 <bme280_read_pres+0x5c>)
    111c:	47a0      	blx	r4
	//spi_transceive_wait(&spi_master_instance,reg,data);
	spi_select_slave(&spi_master_instance,&bme280_slave_instance,false);
    111e:	4905      	ldr	r1, [pc, #20]	; (1134 <bme280_read_pres+0x4c>)
    1120:	4b05      	ldr	r3, [pc, #20]	; (1138 <bme280_read_pres+0x50>)
    1122:	2200      	movs	r2, #0
    1124:	0018      	movs	r0, r3
    1126:	4b05      	ldr	r3, [pc, #20]	; (113c <bme280_read_pres+0x54>)
    1128:	4798      	blx	r3
}
    112a:	46c0      	nop			; (mov r8, r8)
    112c:	46bd      	mov	sp, r7
    112e:	b005      	add	sp, #20
    1130:	bd90      	pop	{r4, r7, pc}
    1132:	46c0      	nop			; (mov r8, r8)
    1134:	20000164 	.word	0x20000164
    1138:	20000168 	.word	0x20000168
    113c:	000033c9 	.word	0x000033c9
    1140:	000034b9 	.word	0x000034b9
    1144:	0000321d 	.word	0x0000321d

00001148 <bme280_read_hum>:

void bme280_read_hum(uint8_t *data)
{
    1148:	b590      	push	{r4, r7, lr}
    114a:	b085      	sub	sp, #20
    114c:	af00      	add	r7, sp, #0
    114e:	6078      	str	r0, [r7, #4]
	uint16_t dummy = 0xFD | 0x80;
    1150:	230e      	movs	r3, #14
    1152:	18fb      	adds	r3, r7, r3
    1154:	22fd      	movs	r2, #253	; 0xfd
    1156:	801a      	strh	r2, [r3, #0]
	spi_select_slave(&spi_master_instance,&bme280_slave_instance,true);
    1158:	490e      	ldr	r1, [pc, #56]	; (1194 <bme280_read_hum+0x4c>)
    115a:	4b0f      	ldr	r3, [pc, #60]	; (1198 <bme280_read_hum+0x50>)
    115c:	2201      	movs	r2, #1
    115e:	0018      	movs	r0, r3
    1160:	4b0e      	ldr	r3, [pc, #56]	; (119c <bme280_read_hum+0x54>)
    1162:	4798      	blx	r3
	spi_write_buffer_wait(&spi_master_instance,&dummy,1);
    1164:	230e      	movs	r3, #14
    1166:	18f9      	adds	r1, r7, r3
    1168:	4b0b      	ldr	r3, [pc, #44]	; (1198 <bme280_read_hum+0x50>)
    116a:	2201      	movs	r2, #1
    116c:	0018      	movs	r0, r3
    116e:	4b0c      	ldr	r3, [pc, #48]	; (11a0 <bme280_read_hum+0x58>)
    1170:	4798      	blx	r3
	spi_read_buffer_wait(&spi_master_instance,data,2,0x00);
    1172:	6879      	ldr	r1, [r7, #4]
    1174:	4808      	ldr	r0, [pc, #32]	; (1198 <bme280_read_hum+0x50>)
    1176:	2300      	movs	r3, #0
    1178:	2202      	movs	r2, #2
    117a:	4c0a      	ldr	r4, [pc, #40]	; (11a4 <bme280_read_hum+0x5c>)
    117c:	47a0      	blx	r4
	//spi_transceive_wait(&spi_master_instance,reg,data);
	spi_select_slave(&spi_master_instance,&bme280_slave_instance,false);
    117e:	4905      	ldr	r1, [pc, #20]	; (1194 <bme280_read_hum+0x4c>)
    1180:	4b05      	ldr	r3, [pc, #20]	; (1198 <bme280_read_hum+0x50>)
    1182:	2200      	movs	r2, #0
    1184:	0018      	movs	r0, r3
    1186:	4b05      	ldr	r3, [pc, #20]	; (119c <bme280_read_hum+0x54>)
    1188:	4798      	blx	r3
}
    118a:	46c0      	nop			; (mov r8, r8)
    118c:	46bd      	mov	sp, r7
    118e:	b005      	add	sp, #20
    1190:	bd90      	pop	{r4, r7, pc}
    1192:	46c0      	nop			; (mov r8, r8)
    1194:	20000164 	.word	0x20000164
    1198:	20000168 	.word	0x20000168
    119c:	000033c9 	.word	0x000033c9
    11a0:	000034b9 	.word	0x000034b9
    11a4:	0000321d 	.word	0x0000321d

000011a8 <bme280_get_cal_data>:

void bme280_get_cal_data(void)
{
    11a8:	b590      	push	{r4, r7, lr}
    11aa:	b083      	sub	sp, #12
    11ac:	af00      	add	r7, sp, #0
	//uint8_t cal_data[42];
	uint16_t reg = 0x88;
    11ae:	1dbb      	adds	r3, r7, #6
    11b0:	2288      	movs	r2, #136	; 0x88
    11b2:	801a      	strh	r2, [r3, #0]
	spi_select_slave(&spi_master_instance,&bme280_slave_instance,true);
    11b4:	4915      	ldr	r1, [pc, #84]	; (120c <bme280_get_cal_data+0x64>)
    11b6:	4b16      	ldr	r3, [pc, #88]	; (1210 <bme280_get_cal_data+0x68>)
    11b8:	2201      	movs	r2, #1
    11ba:	0018      	movs	r0, r3
    11bc:	4b15      	ldr	r3, [pc, #84]	; (1214 <bme280_get_cal_data+0x6c>)
    11be:	4798      	blx	r3
	spi_write_buffer_wait(&spi_master_instance,&reg,1);
    11c0:	1db9      	adds	r1, r7, #6
    11c2:	4b13      	ldr	r3, [pc, #76]	; (1210 <bme280_get_cal_data+0x68>)
    11c4:	2201      	movs	r2, #1
    11c6:	0018      	movs	r0, r3
    11c8:	4b13      	ldr	r3, [pc, #76]	; (1218 <bme280_get_cal_data+0x70>)
    11ca:	4798      	blx	r3
	spi_read_buffer_wait(&spi_master_instance,&cal_data,26,0x00);
    11cc:	4913      	ldr	r1, [pc, #76]	; (121c <bme280_get_cal_data+0x74>)
    11ce:	4810      	ldr	r0, [pc, #64]	; (1210 <bme280_get_cal_data+0x68>)
    11d0:	2300      	movs	r3, #0
    11d2:	221a      	movs	r2, #26
    11d4:	4c12      	ldr	r4, [pc, #72]	; (1220 <bme280_get_cal_data+0x78>)
    11d6:	47a0      	blx	r4
	reg = 0xE1;
    11d8:	1dbb      	adds	r3, r7, #6
    11da:	22e1      	movs	r2, #225	; 0xe1
    11dc:	801a      	strh	r2, [r3, #0]
	spi_write_buffer_wait(&spi_master_instance,&reg,1);
    11de:	1db9      	adds	r1, r7, #6
    11e0:	4b0b      	ldr	r3, [pc, #44]	; (1210 <bme280_get_cal_data+0x68>)
    11e2:	2201      	movs	r2, #1
    11e4:	0018      	movs	r0, r3
    11e6:	4b0c      	ldr	r3, [pc, #48]	; (1218 <bme280_get_cal_data+0x70>)
    11e8:	4798      	blx	r3
	spi_read_buffer_wait(&spi_master_instance,&cal_data[26],7,0x00);
    11ea:	490e      	ldr	r1, [pc, #56]	; (1224 <bme280_get_cal_data+0x7c>)
    11ec:	4808      	ldr	r0, [pc, #32]	; (1210 <bme280_get_cal_data+0x68>)
    11ee:	2300      	movs	r3, #0
    11f0:	2207      	movs	r2, #7
    11f2:	4c0b      	ldr	r4, [pc, #44]	; (1220 <bme280_get_cal_data+0x78>)
    11f4:	47a0      	blx	r4
	spi_select_slave(&spi_master_instance,&bme280_slave_instance,false);
    11f6:	4905      	ldr	r1, [pc, #20]	; (120c <bme280_get_cal_data+0x64>)
    11f8:	4b05      	ldr	r3, [pc, #20]	; (1210 <bme280_get_cal_data+0x68>)
    11fa:	2200      	movs	r2, #0
    11fc:	0018      	movs	r0, r3
    11fe:	4b05      	ldr	r3, [pc, #20]	; (1214 <bme280_get_cal_data+0x6c>)
    1200:	4798      	blx	r3
}
    1202:	46c0      	nop			; (mov r8, r8)
    1204:	46bd      	mov	sp, r7
    1206:	b003      	add	sp, #12
    1208:	bd90      	pop	{r4, r7, pc}
    120a:	46c0      	nop			; (mov r8, r8)
    120c:	20000164 	.word	0x20000164
    1210:	20000168 	.word	0x20000168
    1214:	000033c9 	.word	0x000033c9
    1218:	000034b9 	.word	0x000034b9
    121c:	20000118 	.word	0x20000118
    1220:	0000321d 	.word	0x0000321d
    1224:	20000132 	.word	0x20000132

00001228 <bme280_calc_cal>:

void bme280_calc_cal(void)
{
    1228:	b580      	push	{r7, lr}
    122a:	af00      	add	r7, sp, #0
	T1 = (cal_data[1] << 8)+cal_data[0];
    122c:	4b6c      	ldr	r3, [pc, #432]	; (13e0 <bme280_calc_cal+0x1b8>)
    122e:	785b      	ldrb	r3, [r3, #1]
    1230:	b29b      	uxth	r3, r3
    1232:	021b      	lsls	r3, r3, #8
    1234:	b29a      	uxth	r2, r3
    1236:	4b6a      	ldr	r3, [pc, #424]	; (13e0 <bme280_calc_cal+0x1b8>)
    1238:	781b      	ldrb	r3, [r3, #0]
    123a:	b29b      	uxth	r3, r3
    123c:	18d3      	adds	r3, r2, r3
    123e:	b29a      	uxth	r2, r3
    1240:	4b68      	ldr	r3, [pc, #416]	; (13e4 <bme280_calc_cal+0x1bc>)
    1242:	801a      	strh	r2, [r3, #0]
	T2 = (cal_data[3] << 8)+cal_data[2];
    1244:	4b66      	ldr	r3, [pc, #408]	; (13e0 <bme280_calc_cal+0x1b8>)
    1246:	78db      	ldrb	r3, [r3, #3]
    1248:	b29b      	uxth	r3, r3
    124a:	021b      	lsls	r3, r3, #8
    124c:	b29a      	uxth	r2, r3
    124e:	4b64      	ldr	r3, [pc, #400]	; (13e0 <bme280_calc_cal+0x1b8>)
    1250:	789b      	ldrb	r3, [r3, #2]
    1252:	b29b      	uxth	r3, r3
    1254:	18d3      	adds	r3, r2, r3
    1256:	b29b      	uxth	r3, r3
    1258:	b21a      	sxth	r2, r3
    125a:	4b63      	ldr	r3, [pc, #396]	; (13e8 <bme280_calc_cal+0x1c0>)
    125c:	801a      	strh	r2, [r3, #0]
	T3 = (cal_data[5] << 8)+cal_data[4];
    125e:	4b60      	ldr	r3, [pc, #384]	; (13e0 <bme280_calc_cal+0x1b8>)
    1260:	795b      	ldrb	r3, [r3, #5]
    1262:	b29b      	uxth	r3, r3
    1264:	021b      	lsls	r3, r3, #8
    1266:	b29a      	uxth	r2, r3
    1268:	4b5d      	ldr	r3, [pc, #372]	; (13e0 <bme280_calc_cal+0x1b8>)
    126a:	791b      	ldrb	r3, [r3, #4]
    126c:	b29b      	uxth	r3, r3
    126e:	18d3      	adds	r3, r2, r3
    1270:	b29b      	uxth	r3, r3
    1272:	b21a      	sxth	r2, r3
    1274:	4b5d      	ldr	r3, [pc, #372]	; (13ec <bme280_calc_cal+0x1c4>)
    1276:	801a      	strh	r2, [r3, #0]
	
	P1 = (cal_data[7] << 8)+cal_data[6];
    1278:	4b59      	ldr	r3, [pc, #356]	; (13e0 <bme280_calc_cal+0x1b8>)
    127a:	79db      	ldrb	r3, [r3, #7]
    127c:	b29b      	uxth	r3, r3
    127e:	021b      	lsls	r3, r3, #8
    1280:	b29a      	uxth	r2, r3
    1282:	4b57      	ldr	r3, [pc, #348]	; (13e0 <bme280_calc_cal+0x1b8>)
    1284:	799b      	ldrb	r3, [r3, #6]
    1286:	b29b      	uxth	r3, r3
    1288:	18d3      	adds	r3, r2, r3
    128a:	b29a      	uxth	r2, r3
    128c:	4b58      	ldr	r3, [pc, #352]	; (13f0 <bme280_calc_cal+0x1c8>)
    128e:	801a      	strh	r2, [r3, #0]
	P2 = (cal_data[9] << 8)+cal_data[8];
    1290:	4b53      	ldr	r3, [pc, #332]	; (13e0 <bme280_calc_cal+0x1b8>)
    1292:	7a5b      	ldrb	r3, [r3, #9]
    1294:	b29b      	uxth	r3, r3
    1296:	021b      	lsls	r3, r3, #8
    1298:	b29a      	uxth	r2, r3
    129a:	4b51      	ldr	r3, [pc, #324]	; (13e0 <bme280_calc_cal+0x1b8>)
    129c:	7a1b      	ldrb	r3, [r3, #8]
    129e:	b29b      	uxth	r3, r3
    12a0:	18d3      	adds	r3, r2, r3
    12a2:	b29b      	uxth	r3, r3
    12a4:	b21a      	sxth	r2, r3
    12a6:	4b53      	ldr	r3, [pc, #332]	; (13f4 <bme280_calc_cal+0x1cc>)
    12a8:	801a      	strh	r2, [r3, #0]
	P3 = (cal_data[11] << 8)+cal_data[10];
    12aa:	4b4d      	ldr	r3, [pc, #308]	; (13e0 <bme280_calc_cal+0x1b8>)
    12ac:	7adb      	ldrb	r3, [r3, #11]
    12ae:	b29b      	uxth	r3, r3
    12b0:	021b      	lsls	r3, r3, #8
    12b2:	b29a      	uxth	r2, r3
    12b4:	4b4a      	ldr	r3, [pc, #296]	; (13e0 <bme280_calc_cal+0x1b8>)
    12b6:	7a9b      	ldrb	r3, [r3, #10]
    12b8:	b29b      	uxth	r3, r3
    12ba:	18d3      	adds	r3, r2, r3
    12bc:	b29b      	uxth	r3, r3
    12be:	b21a      	sxth	r2, r3
    12c0:	4b4d      	ldr	r3, [pc, #308]	; (13f8 <bme280_calc_cal+0x1d0>)
    12c2:	801a      	strh	r2, [r3, #0]
	P4 = (cal_data[13] << 8)+cal_data[12];
    12c4:	4b46      	ldr	r3, [pc, #280]	; (13e0 <bme280_calc_cal+0x1b8>)
    12c6:	7b5b      	ldrb	r3, [r3, #13]
    12c8:	b29b      	uxth	r3, r3
    12ca:	021b      	lsls	r3, r3, #8
    12cc:	b29a      	uxth	r2, r3
    12ce:	4b44      	ldr	r3, [pc, #272]	; (13e0 <bme280_calc_cal+0x1b8>)
    12d0:	7b1b      	ldrb	r3, [r3, #12]
    12d2:	b29b      	uxth	r3, r3
    12d4:	18d3      	adds	r3, r2, r3
    12d6:	b29b      	uxth	r3, r3
    12d8:	b21a      	sxth	r2, r3
    12da:	4b48      	ldr	r3, [pc, #288]	; (13fc <bme280_calc_cal+0x1d4>)
    12dc:	801a      	strh	r2, [r3, #0]
	P5 = (cal_data[15] << 8)+cal_data[14];
    12de:	4b40      	ldr	r3, [pc, #256]	; (13e0 <bme280_calc_cal+0x1b8>)
    12e0:	7bdb      	ldrb	r3, [r3, #15]
    12e2:	b29b      	uxth	r3, r3
    12e4:	021b      	lsls	r3, r3, #8
    12e6:	b29a      	uxth	r2, r3
    12e8:	4b3d      	ldr	r3, [pc, #244]	; (13e0 <bme280_calc_cal+0x1b8>)
    12ea:	7b9b      	ldrb	r3, [r3, #14]
    12ec:	b29b      	uxth	r3, r3
    12ee:	18d3      	adds	r3, r2, r3
    12f0:	b29b      	uxth	r3, r3
    12f2:	b21a      	sxth	r2, r3
    12f4:	4b42      	ldr	r3, [pc, #264]	; (1400 <bme280_calc_cal+0x1d8>)
    12f6:	801a      	strh	r2, [r3, #0]
	P6 = (cal_data[17] << 8)+cal_data[16];
    12f8:	4b39      	ldr	r3, [pc, #228]	; (13e0 <bme280_calc_cal+0x1b8>)
    12fa:	7c5b      	ldrb	r3, [r3, #17]
    12fc:	b29b      	uxth	r3, r3
    12fe:	021b      	lsls	r3, r3, #8
    1300:	b29a      	uxth	r2, r3
    1302:	4b37      	ldr	r3, [pc, #220]	; (13e0 <bme280_calc_cal+0x1b8>)
    1304:	7c1b      	ldrb	r3, [r3, #16]
    1306:	b29b      	uxth	r3, r3
    1308:	18d3      	adds	r3, r2, r3
    130a:	b29b      	uxth	r3, r3
    130c:	b21a      	sxth	r2, r3
    130e:	4b3d      	ldr	r3, [pc, #244]	; (1404 <bme280_calc_cal+0x1dc>)
    1310:	801a      	strh	r2, [r3, #0]
	P7 = (cal_data[19] << 8)+cal_data[18];
    1312:	4b33      	ldr	r3, [pc, #204]	; (13e0 <bme280_calc_cal+0x1b8>)
    1314:	7cdb      	ldrb	r3, [r3, #19]
    1316:	b29b      	uxth	r3, r3
    1318:	021b      	lsls	r3, r3, #8
    131a:	b29a      	uxth	r2, r3
    131c:	4b30      	ldr	r3, [pc, #192]	; (13e0 <bme280_calc_cal+0x1b8>)
    131e:	7c9b      	ldrb	r3, [r3, #18]
    1320:	b29b      	uxth	r3, r3
    1322:	18d3      	adds	r3, r2, r3
    1324:	b29b      	uxth	r3, r3
    1326:	b21a      	sxth	r2, r3
    1328:	4b37      	ldr	r3, [pc, #220]	; (1408 <bme280_calc_cal+0x1e0>)
    132a:	801a      	strh	r2, [r3, #0]
	P8 = (cal_data[21] << 8)+cal_data[20];
    132c:	4b2c      	ldr	r3, [pc, #176]	; (13e0 <bme280_calc_cal+0x1b8>)
    132e:	7d5b      	ldrb	r3, [r3, #21]
    1330:	b29b      	uxth	r3, r3
    1332:	021b      	lsls	r3, r3, #8
    1334:	b29a      	uxth	r2, r3
    1336:	4b2a      	ldr	r3, [pc, #168]	; (13e0 <bme280_calc_cal+0x1b8>)
    1338:	7d1b      	ldrb	r3, [r3, #20]
    133a:	b29b      	uxth	r3, r3
    133c:	18d3      	adds	r3, r2, r3
    133e:	b29b      	uxth	r3, r3
    1340:	b21a      	sxth	r2, r3
    1342:	4b32      	ldr	r3, [pc, #200]	; (140c <bme280_calc_cal+0x1e4>)
    1344:	801a      	strh	r2, [r3, #0]
	P9 = (cal_data[23] << 8)+cal_data[22];
    1346:	4b26      	ldr	r3, [pc, #152]	; (13e0 <bme280_calc_cal+0x1b8>)
    1348:	7ddb      	ldrb	r3, [r3, #23]
    134a:	b29b      	uxth	r3, r3
    134c:	021b      	lsls	r3, r3, #8
    134e:	b29a      	uxth	r2, r3
    1350:	4b23      	ldr	r3, [pc, #140]	; (13e0 <bme280_calc_cal+0x1b8>)
    1352:	7d9b      	ldrb	r3, [r3, #22]
    1354:	b29b      	uxth	r3, r3
    1356:	18d3      	adds	r3, r2, r3
    1358:	b29b      	uxth	r3, r3
    135a:	b21a      	sxth	r2, r3
    135c:	4b2c      	ldr	r3, [pc, #176]	; (1410 <bme280_calc_cal+0x1e8>)
    135e:	801a      	strh	r2, [r3, #0]
	
	H1 = cal_data[24];
    1360:	4b1f      	ldr	r3, [pc, #124]	; (13e0 <bme280_calc_cal+0x1b8>)
    1362:	7e1a      	ldrb	r2, [r3, #24]
    1364:	4b2b      	ldr	r3, [pc, #172]	; (1414 <bme280_calc_cal+0x1ec>)
    1366:	701a      	strb	r2, [r3, #0]
	H2 = (cal_data[26] << 8)+cal_data[25];
    1368:	4b1d      	ldr	r3, [pc, #116]	; (13e0 <bme280_calc_cal+0x1b8>)
    136a:	7e9b      	ldrb	r3, [r3, #26]
    136c:	b29b      	uxth	r3, r3
    136e:	021b      	lsls	r3, r3, #8
    1370:	b29a      	uxth	r2, r3
    1372:	4b1b      	ldr	r3, [pc, #108]	; (13e0 <bme280_calc_cal+0x1b8>)
    1374:	7e5b      	ldrb	r3, [r3, #25]
    1376:	b29b      	uxth	r3, r3
    1378:	18d3      	adds	r3, r2, r3
    137a:	b29b      	uxth	r3, r3
    137c:	b21a      	sxth	r2, r3
    137e:	4b26      	ldr	r3, [pc, #152]	; (1418 <bme280_calc_cal+0x1f0>)
    1380:	801a      	strh	r2, [r3, #0]
	H3 = cal_data[27];
    1382:	4b17      	ldr	r3, [pc, #92]	; (13e0 <bme280_calc_cal+0x1b8>)
    1384:	7eda      	ldrb	r2, [r3, #27]
    1386:	4b25      	ldr	r3, [pc, #148]	; (141c <bme280_calc_cal+0x1f4>)
    1388:	701a      	strb	r2, [r3, #0]
	H4 = (cal_data[29] << 4)+(cal_data[28] & 0x0F);
    138a:	4b15      	ldr	r3, [pc, #84]	; (13e0 <bme280_calc_cal+0x1b8>)
    138c:	7f5b      	ldrb	r3, [r3, #29]
    138e:	b29b      	uxth	r3, r3
    1390:	011b      	lsls	r3, r3, #4
    1392:	b29a      	uxth	r2, r3
    1394:	4b12      	ldr	r3, [pc, #72]	; (13e0 <bme280_calc_cal+0x1b8>)
    1396:	7f1b      	ldrb	r3, [r3, #28]
    1398:	b29b      	uxth	r3, r3
    139a:	210f      	movs	r1, #15
    139c:	400b      	ands	r3, r1
    139e:	b29b      	uxth	r3, r3
    13a0:	18d3      	adds	r3, r2, r3
    13a2:	b29b      	uxth	r3, r3
    13a4:	b21a      	sxth	r2, r3
    13a6:	4b1e      	ldr	r3, [pc, #120]	; (1420 <bme280_calc_cal+0x1f8>)
    13a8:	801a      	strh	r2, [r3, #0]
	H5 = (cal_data[31] << 4)+((cal_data[30] >> 4) & 0x0F);
    13aa:	4b0d      	ldr	r3, [pc, #52]	; (13e0 <bme280_calc_cal+0x1b8>)
    13ac:	7fdb      	ldrb	r3, [r3, #31]
    13ae:	b29b      	uxth	r3, r3
    13b0:	011b      	lsls	r3, r3, #4
    13b2:	b29a      	uxth	r2, r3
    13b4:	4b0a      	ldr	r3, [pc, #40]	; (13e0 <bme280_calc_cal+0x1b8>)
    13b6:	7f9b      	ldrb	r3, [r3, #30]
    13b8:	091b      	lsrs	r3, r3, #4
    13ba:	b2db      	uxtb	r3, r3
    13bc:	b29b      	uxth	r3, r3
    13be:	210f      	movs	r1, #15
    13c0:	400b      	ands	r3, r1
    13c2:	b29b      	uxth	r3, r3
    13c4:	18d3      	adds	r3, r2, r3
    13c6:	b29b      	uxth	r3, r3
    13c8:	b21a      	sxth	r2, r3
    13ca:	4b16      	ldr	r3, [pc, #88]	; (1424 <bme280_calc_cal+0x1fc>)
    13cc:	801a      	strh	r2, [r3, #0]
	H6 = cal_data[32];
    13ce:	4b04      	ldr	r3, [pc, #16]	; (13e0 <bme280_calc_cal+0x1b8>)
    13d0:	2220      	movs	r2, #32
    13d2:	5c9b      	ldrb	r3, [r3, r2]
    13d4:	b25a      	sxtb	r2, r3
    13d6:	4b14      	ldr	r3, [pc, #80]	; (1428 <bme280_calc_cal+0x200>)
    13d8:	701a      	strb	r2, [r3, #0]
}
    13da:	46c0      	nop			; (mov r8, r8)
    13dc:	46bd      	mov	sp, r7
    13de:	bd80      	pop	{r7, pc}
    13e0:	20000118 	.word	0x20000118
    13e4:	20000160 	.word	0x20000160
    13e8:	20000114 	.word	0x20000114
    13ec:	20000152 	.word	0x20000152
    13f0:	20000142 	.word	0x20000142
    13f4:	2000014e 	.word	0x2000014e
    13f8:	20000162 	.word	0x20000162
    13fc:	20000156 	.word	0x20000156
    1400:	20000176 	.word	0x20000176
    1404:	2000014a 	.word	0x2000014a
    1408:	20000174 	.word	0x20000174
    140c:	20000148 	.word	0x20000148
    1410:	20000158 	.word	0x20000158
    1414:	2000017a 	.word	0x2000017a
    1418:	20000178 	.word	0x20000178
    141c:	2000015a 	.word	0x2000015a
    1420:	20000116 	.word	0x20000116
    1424:	20000154 	.word	0x20000154
    1428:	20000150 	.word	0x20000150

0000142c <bme280_calc_temp>:

int32_t bme280_calc_temp(int32_t read_temp)
{
    142c:	b580      	push	{r7, lr}
    142e:	b086      	sub	sp, #24
    1430:	af00      	add	r7, sp, #0
    1432:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 = ((((read_temp>>3) - ((int32_t)T1<<1))) * ((int32_t)T2)) >> 11;
    1434:	687b      	ldr	r3, [r7, #4]
    1436:	10da      	asrs	r2, r3, #3
    1438:	4b16      	ldr	r3, [pc, #88]	; (1494 <bme280_calc_temp+0x68>)
    143a:	881b      	ldrh	r3, [r3, #0]
    143c:	005b      	lsls	r3, r3, #1
    143e:	1ad3      	subs	r3, r2, r3
    1440:	4a15      	ldr	r2, [pc, #84]	; (1498 <bme280_calc_temp+0x6c>)
    1442:	2100      	movs	r1, #0
    1444:	5e52      	ldrsh	r2, [r2, r1]
    1446:	4353      	muls	r3, r2
    1448:	12db      	asrs	r3, r3, #11
    144a:	617b      	str	r3, [r7, #20]
	var2 = (((((read_temp>>4) - ((int32_t)T1)) * ((read_temp>>4) - ((int32_t)T1))) >> 12) *	((int32_t)T3)) >> 14;
    144c:	687b      	ldr	r3, [r7, #4]
    144e:	111b      	asrs	r3, r3, #4
    1450:	4a10      	ldr	r2, [pc, #64]	; (1494 <bme280_calc_temp+0x68>)
    1452:	8812      	ldrh	r2, [r2, #0]
    1454:	1a9b      	subs	r3, r3, r2
    1456:	687a      	ldr	r2, [r7, #4]
    1458:	1112      	asrs	r2, r2, #4
    145a:	490e      	ldr	r1, [pc, #56]	; (1494 <bme280_calc_temp+0x68>)
    145c:	8809      	ldrh	r1, [r1, #0]
    145e:	1a52      	subs	r2, r2, r1
    1460:	4353      	muls	r3, r2
    1462:	131b      	asrs	r3, r3, #12
    1464:	4a0d      	ldr	r2, [pc, #52]	; (149c <bme280_calc_temp+0x70>)
    1466:	2100      	movs	r1, #0
    1468:	5e52      	ldrsh	r2, [r2, r1]
    146a:	4353      	muls	r3, r2
    146c:	139b      	asrs	r3, r3, #14
    146e:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
    1470:	697a      	ldr	r2, [r7, #20]
    1472:	693b      	ldr	r3, [r7, #16]
    1474:	18d2      	adds	r2, r2, r3
    1476:	4b0a      	ldr	r3, [pc, #40]	; (14a0 <bme280_calc_temp+0x74>)
    1478:	601a      	str	r2, [r3, #0]
	T = (t_fine * 5 + 128) >> 8;
    147a:	4b09      	ldr	r3, [pc, #36]	; (14a0 <bme280_calc_temp+0x74>)
    147c:	681a      	ldr	r2, [r3, #0]
    147e:	0013      	movs	r3, r2
    1480:	009b      	lsls	r3, r3, #2
    1482:	189b      	adds	r3, r3, r2
    1484:	3380      	adds	r3, #128	; 0x80
    1486:	121b      	asrs	r3, r3, #8
    1488:	60fb      	str	r3, [r7, #12]
	return T;
    148a:	68fb      	ldr	r3, [r7, #12]
}
    148c:	0018      	movs	r0, r3
    148e:	46bd      	mov	sp, r7
    1490:	b006      	add	sp, #24
    1492:	bd80      	pop	{r7, pc}
    1494:	20000160 	.word	0x20000160
    1498:	20000114 	.word	0x20000114
    149c:	20000152 	.word	0x20000152
    14a0:	2000017c 	.word	0x2000017c

000014a4 <bme280_calc_pres>:

int32_t bme280_calc_pres(int32_t read_pres)
{
    14a4:	b580      	push	{r7, lr}
    14a6:	b086      	sub	sp, #24
    14a8:	af00      	add	r7, sp, #0
    14aa:	6078      	str	r0, [r7, #4]
	int32_t var1, var2;
	uint32_t p;
	var1 = (((int32_t)t_fine)>>1) - (int32_t)64000;
    14ac:	4b46      	ldr	r3, [pc, #280]	; (15c8 <bme280_calc_pres+0x124>)
    14ae:	681b      	ldr	r3, [r3, #0]
    14b0:	105b      	asrs	r3, r3, #1
    14b2:	4a46      	ldr	r2, [pc, #280]	; (15cc <bme280_calc_pres+0x128>)
    14b4:	4694      	mov	ip, r2
    14b6:	4463      	add	r3, ip
    14b8:	613b      	str	r3, [r7, #16]
	var2 = (((var1>>2) * (var1>>2)) >> 11 ) * ((int32_t)P6);
    14ba:	693b      	ldr	r3, [r7, #16]
    14bc:	109b      	asrs	r3, r3, #2
    14be:	693a      	ldr	r2, [r7, #16]
    14c0:	1092      	asrs	r2, r2, #2
    14c2:	4353      	muls	r3, r2
    14c4:	12db      	asrs	r3, r3, #11
    14c6:	4a42      	ldr	r2, [pc, #264]	; (15d0 <bme280_calc_pres+0x12c>)
    14c8:	2100      	movs	r1, #0
    14ca:	5e52      	ldrsh	r2, [r2, r1]
    14cc:	4353      	muls	r3, r2
    14ce:	60fb      	str	r3, [r7, #12]
	var2 = var2 + ((var1*((int32_t)P5))<<1);
    14d0:	4b40      	ldr	r3, [pc, #256]	; (15d4 <bme280_calc_pres+0x130>)
    14d2:	2200      	movs	r2, #0
    14d4:	5e9b      	ldrsh	r3, [r3, r2]
    14d6:	001a      	movs	r2, r3
    14d8:	693b      	ldr	r3, [r7, #16]
    14da:	4353      	muls	r3, r2
    14dc:	005b      	lsls	r3, r3, #1
    14de:	68fa      	ldr	r2, [r7, #12]
    14e0:	18d3      	adds	r3, r2, r3
    14e2:	60fb      	str	r3, [r7, #12]
	var2 = (var2>>2)+(((int32_t)P4)<<16);
    14e4:	68fb      	ldr	r3, [r7, #12]
    14e6:	109a      	asrs	r2, r3, #2
    14e8:	4b3b      	ldr	r3, [pc, #236]	; (15d8 <bme280_calc_pres+0x134>)
    14ea:	2100      	movs	r1, #0
    14ec:	5e5b      	ldrsh	r3, [r3, r1]
    14ee:	041b      	lsls	r3, r3, #16
    14f0:	18d3      	adds	r3, r2, r3
    14f2:	60fb      	str	r3, [r7, #12]
	var1 = (((P3 * (((var1>>2) * (var1>>2)) >> 13 )) >> 3) + ((((int32_t)P2) * var1)>>1))>>18;
    14f4:	4b39      	ldr	r3, [pc, #228]	; (15dc <bme280_calc_pres+0x138>)
    14f6:	2200      	movs	r2, #0
    14f8:	5e9b      	ldrsh	r3, [r3, r2]
    14fa:	0019      	movs	r1, r3
    14fc:	693b      	ldr	r3, [r7, #16]
    14fe:	109b      	asrs	r3, r3, #2
    1500:	693a      	ldr	r2, [r7, #16]
    1502:	1092      	asrs	r2, r2, #2
    1504:	4353      	muls	r3, r2
    1506:	135b      	asrs	r3, r3, #13
    1508:	434b      	muls	r3, r1
    150a:	10da      	asrs	r2, r3, #3
    150c:	4b34      	ldr	r3, [pc, #208]	; (15e0 <bme280_calc_pres+0x13c>)
    150e:	2100      	movs	r1, #0
    1510:	5e5b      	ldrsh	r3, [r3, r1]
    1512:	0019      	movs	r1, r3
    1514:	693b      	ldr	r3, [r7, #16]
    1516:	434b      	muls	r3, r1
    1518:	105b      	asrs	r3, r3, #1
    151a:	18d3      	adds	r3, r2, r3
    151c:	149b      	asrs	r3, r3, #18
    151e:	613b      	str	r3, [r7, #16]
	var1 =((((32768+var1))*((int32_t)P1))>>15);
    1520:	693b      	ldr	r3, [r7, #16]
    1522:	2280      	movs	r2, #128	; 0x80
    1524:	0212      	lsls	r2, r2, #8
    1526:	4694      	mov	ip, r2
    1528:	4463      	add	r3, ip
    152a:	4a2e      	ldr	r2, [pc, #184]	; (15e4 <bme280_calc_pres+0x140>)
    152c:	8812      	ldrh	r2, [r2, #0]
    152e:	4353      	muls	r3, r2
    1530:	13db      	asrs	r3, r3, #15
    1532:	613b      	str	r3, [r7, #16]
	if (var1 == 0)
    1534:	693b      	ldr	r3, [r7, #16]
    1536:	2b00      	cmp	r3, #0
    1538:	d101      	bne.n	153e <bme280_calc_pres+0x9a>
	{
		return 0; // avoid exception caused by division by zero
    153a:	2300      	movs	r3, #0
    153c:	e040      	b.n	15c0 <bme280_calc_pres+0x11c>
	}
	p = (((uint32_t)(((int32_t)1048576)-read_pres)-(var2>>12)))*3125;
    153e:	687b      	ldr	r3, [r7, #4]
    1540:	425b      	negs	r3, r3
    1542:	68fa      	ldr	r2, [r7, #12]
    1544:	1312      	asrs	r2, r2, #12
    1546:	1a9b      	subs	r3, r3, r2
    1548:	4a27      	ldr	r2, [pc, #156]	; (15e8 <bme280_calc_pres+0x144>)
    154a:	4353      	muls	r3, r2
    154c:	4a27      	ldr	r2, [pc, #156]	; (15ec <bme280_calc_pres+0x148>)
    154e:	4694      	mov	ip, r2
    1550:	4463      	add	r3, ip
    1552:	617b      	str	r3, [r7, #20]
	if (p < 0x80000000)
    1554:	697b      	ldr	r3, [r7, #20]
    1556:	2b00      	cmp	r3, #0
    1558:	db08      	blt.n	156c <bme280_calc_pres+0xc8>
	{
		p = (p << 1) / ((uint32_t)var1);
    155a:	697b      	ldr	r3, [r7, #20]
    155c:	005a      	lsls	r2, r3, #1
    155e:	6939      	ldr	r1, [r7, #16]
    1560:	4b23      	ldr	r3, [pc, #140]	; (15f0 <bme280_calc_pres+0x14c>)
    1562:	0010      	movs	r0, r2
    1564:	4798      	blx	r3
    1566:	0003      	movs	r3, r0
    1568:	617b      	str	r3, [r7, #20]
    156a:	e007      	b.n	157c <bme280_calc_pres+0xd8>
	}
	else
	{
		p = (p / (uint32_t)var1) * 2;
    156c:	693a      	ldr	r2, [r7, #16]
    156e:	4b20      	ldr	r3, [pc, #128]	; (15f0 <bme280_calc_pres+0x14c>)
    1570:	0011      	movs	r1, r2
    1572:	6978      	ldr	r0, [r7, #20]
    1574:	4798      	blx	r3
    1576:	0003      	movs	r3, r0
    1578:	005b      	lsls	r3, r3, #1
    157a:	617b      	str	r3, [r7, #20]
	}
	var1 = (((int32_t)P9) * ((int32_t)(((p>>3) * (p>>3))>>13)))>>12;
    157c:	4b1d      	ldr	r3, [pc, #116]	; (15f4 <bme280_calc_pres+0x150>)
    157e:	2200      	movs	r2, #0
    1580:	5e9b      	ldrsh	r3, [r3, r2]
    1582:	0019      	movs	r1, r3
    1584:	697b      	ldr	r3, [r7, #20]
    1586:	08db      	lsrs	r3, r3, #3
    1588:	697a      	ldr	r2, [r7, #20]
    158a:	08d2      	lsrs	r2, r2, #3
    158c:	4353      	muls	r3, r2
    158e:	0b5b      	lsrs	r3, r3, #13
    1590:	434b      	muls	r3, r1
    1592:	131b      	asrs	r3, r3, #12
    1594:	613b      	str	r3, [r7, #16]
	var2 = (((int32_t)(p>>2)) * ((int32_t)P8))>>13;
    1596:	697b      	ldr	r3, [r7, #20]
    1598:	089b      	lsrs	r3, r3, #2
    159a:	001a      	movs	r2, r3
    159c:	4b16      	ldr	r3, [pc, #88]	; (15f8 <bme280_calc_pres+0x154>)
    159e:	2100      	movs	r1, #0
    15a0:	5e5b      	ldrsh	r3, [r3, r1]
    15a2:	4353      	muls	r3, r2
    15a4:	135b      	asrs	r3, r3, #13
    15a6:	60fb      	str	r3, [r7, #12]
	p = (uint32_t)((int32_t)p + ((var1 + var2 + P7) >> 4));
    15a8:	693a      	ldr	r2, [r7, #16]
    15aa:	68fb      	ldr	r3, [r7, #12]
    15ac:	18d3      	adds	r3, r2, r3
    15ae:	4a13      	ldr	r2, [pc, #76]	; (15fc <bme280_calc_pres+0x158>)
    15b0:	2100      	movs	r1, #0
    15b2:	5e52      	ldrsh	r2, [r2, r1]
    15b4:	189b      	adds	r3, r3, r2
    15b6:	111a      	asrs	r2, r3, #4
    15b8:	697b      	ldr	r3, [r7, #20]
    15ba:	18d3      	adds	r3, r2, r3
    15bc:	617b      	str	r3, [r7, #20]
	return p;
    15be:	697b      	ldr	r3, [r7, #20]
}
    15c0:	0018      	movs	r0, r3
    15c2:	46bd      	mov	sp, r7
    15c4:	b006      	add	sp, #24
    15c6:	bd80      	pop	{r7, pc}
    15c8:	2000017c 	.word	0x2000017c
    15cc:	ffff0600 	.word	0xffff0600
    15d0:	2000014a 	.word	0x2000014a
    15d4:	20000176 	.word	0x20000176
    15d8:	20000156 	.word	0x20000156
    15dc:	20000162 	.word	0x20000162
    15e0:	2000014e 	.word	0x2000014e
    15e4:	20000142 	.word	0x20000142
    15e8:	00000c35 	.word	0x00000c35
    15ec:	c3500000 	.word	0xc3500000
    15f0:	00005fd5 	.word	0x00005fd5
    15f4:	20000158 	.word	0x20000158
    15f8:	20000148 	.word	0x20000148
    15fc:	20000174 	.word	0x20000174

00001600 <bme280_calc_hum>:

double bme280_calc_hum(int32_t read_hum)
{
    1600:	b5f0      	push	{r4, r5, r6, r7, lr}
    1602:	b089      	sub	sp, #36	; 0x24
    1604:	af00      	add	r7, sp, #0
    1606:	6178      	str	r0, [r7, #20]
	double var_H;
	var_H = (((double)t_fine) - 76800.0);
    1608:	4b75      	ldr	r3, [pc, #468]	; (17e0 <bme280_calc_hum+0x1e0>)
    160a:	681a      	ldr	r2, [r3, #0]
    160c:	4b75      	ldr	r3, [pc, #468]	; (17e4 <bme280_calc_hum+0x1e4>)
    160e:	0010      	movs	r0, r2
    1610:	4798      	blx	r3
    1612:	4c75      	ldr	r4, [pc, #468]	; (17e8 <bme280_calc_hum+0x1e8>)
    1614:	2200      	movs	r2, #0
    1616:	4b75      	ldr	r3, [pc, #468]	; (17ec <bme280_calc_hum+0x1ec>)
    1618:	47a0      	blx	r4
    161a:	0003      	movs	r3, r0
    161c:	000c      	movs	r4, r1
    161e:	61bb      	str	r3, [r7, #24]
    1620:	61fc      	str	r4, [r7, #28]
	var_H = (read_hum - (((double)H4) * 64.0 + ((double)H5) / 16384.0 * var_H)) * (((double)H2) / 65536.0 * (1.0 + ((double)H6) / 67108864.0 * var_H * (1.0 + ((double)H3) / 67108864.0 * var_H)));
    1622:	4b70      	ldr	r3, [pc, #448]	; (17e4 <bme280_calc_hum+0x1e4>)
    1624:	6978      	ldr	r0, [r7, #20]
    1626:	4798      	blx	r3
    1628:	0005      	movs	r5, r0
    162a:	000e      	movs	r6, r1
    162c:	4b70      	ldr	r3, [pc, #448]	; (17f0 <bme280_calc_hum+0x1f0>)
    162e:	2200      	movs	r2, #0
    1630:	5e9a      	ldrsh	r2, [r3, r2]
    1632:	4b6c      	ldr	r3, [pc, #432]	; (17e4 <bme280_calc_hum+0x1e4>)
    1634:	0010      	movs	r0, r2
    1636:	4798      	blx	r3
    1638:	4c6e      	ldr	r4, [pc, #440]	; (17f4 <bme280_calc_hum+0x1f4>)
    163a:	2200      	movs	r2, #0
    163c:	4b6e      	ldr	r3, [pc, #440]	; (17f8 <bme280_calc_hum+0x1f8>)
    163e:	47a0      	blx	r4
    1640:	0003      	movs	r3, r0
    1642:	000c      	movs	r4, r1
    1644:	60bb      	str	r3, [r7, #8]
    1646:	60fc      	str	r4, [r7, #12]
    1648:	4b6c      	ldr	r3, [pc, #432]	; (17fc <bme280_calc_hum+0x1fc>)
    164a:	2100      	movs	r1, #0
    164c:	5e5a      	ldrsh	r2, [r3, r1]
    164e:	4b65      	ldr	r3, [pc, #404]	; (17e4 <bme280_calc_hum+0x1e4>)
    1650:	0010      	movs	r0, r2
    1652:	4798      	blx	r3
    1654:	4c6a      	ldr	r4, [pc, #424]	; (1800 <bme280_calc_hum+0x200>)
    1656:	2200      	movs	r2, #0
    1658:	4b6a      	ldr	r3, [pc, #424]	; (1804 <bme280_calc_hum+0x204>)
    165a:	47a0      	blx	r4
    165c:	0003      	movs	r3, r0
    165e:	000c      	movs	r4, r1
    1660:	0018      	movs	r0, r3
    1662:	0021      	movs	r1, r4
    1664:	4c63      	ldr	r4, [pc, #396]	; (17f4 <bme280_calc_hum+0x1f4>)
    1666:	69ba      	ldr	r2, [r7, #24]
    1668:	69fb      	ldr	r3, [r7, #28]
    166a:	47a0      	blx	r4
    166c:	0003      	movs	r3, r0
    166e:	000c      	movs	r4, r1
    1670:	001a      	movs	r2, r3
    1672:	0023      	movs	r3, r4
    1674:	4c64      	ldr	r4, [pc, #400]	; (1808 <bme280_calc_hum+0x208>)
    1676:	68b8      	ldr	r0, [r7, #8]
    1678:	68f9      	ldr	r1, [r7, #12]
    167a:	47a0      	blx	r4
    167c:	0003      	movs	r3, r0
    167e:	000c      	movs	r4, r1
    1680:	001a      	movs	r2, r3
    1682:	0023      	movs	r3, r4
    1684:	4c58      	ldr	r4, [pc, #352]	; (17e8 <bme280_calc_hum+0x1e8>)
    1686:	0028      	movs	r0, r5
    1688:	0031      	movs	r1, r6
    168a:	47a0      	blx	r4
    168c:	0003      	movs	r3, r0
    168e:	000c      	movs	r4, r1
    1690:	001d      	movs	r5, r3
    1692:	0026      	movs	r6, r4
    1694:	4b5d      	ldr	r3, [pc, #372]	; (180c <bme280_calc_hum+0x20c>)
    1696:	2200      	movs	r2, #0
    1698:	5e9a      	ldrsh	r2, [r3, r2]
    169a:	4b52      	ldr	r3, [pc, #328]	; (17e4 <bme280_calc_hum+0x1e4>)
    169c:	0010      	movs	r0, r2
    169e:	4798      	blx	r3
    16a0:	4c57      	ldr	r4, [pc, #348]	; (1800 <bme280_calc_hum+0x200>)
    16a2:	2200      	movs	r2, #0
    16a4:	4b5a      	ldr	r3, [pc, #360]	; (1810 <bme280_calc_hum+0x210>)
    16a6:	47a0      	blx	r4
    16a8:	0003      	movs	r3, r0
    16aa:	000c      	movs	r4, r1
    16ac:	60bb      	str	r3, [r7, #8]
    16ae:	60fc      	str	r4, [r7, #12]
    16b0:	4b58      	ldr	r3, [pc, #352]	; (1814 <bme280_calc_hum+0x214>)
    16b2:	2200      	movs	r2, #0
    16b4:	569a      	ldrsb	r2, [r3, r2]
    16b6:	4b4b      	ldr	r3, [pc, #300]	; (17e4 <bme280_calc_hum+0x1e4>)
    16b8:	0010      	movs	r0, r2
    16ba:	4798      	blx	r3
    16bc:	4c50      	ldr	r4, [pc, #320]	; (1800 <bme280_calc_hum+0x200>)
    16be:	2200      	movs	r2, #0
    16c0:	4b55      	ldr	r3, [pc, #340]	; (1818 <bme280_calc_hum+0x218>)
    16c2:	47a0      	blx	r4
    16c4:	0003      	movs	r3, r0
    16c6:	000c      	movs	r4, r1
    16c8:	0018      	movs	r0, r3
    16ca:	0021      	movs	r1, r4
    16cc:	4c49      	ldr	r4, [pc, #292]	; (17f4 <bme280_calc_hum+0x1f4>)
    16ce:	69ba      	ldr	r2, [r7, #24]
    16d0:	69fb      	ldr	r3, [r7, #28]
    16d2:	47a0      	blx	r4
    16d4:	0003      	movs	r3, r0
    16d6:	000c      	movs	r4, r1
    16d8:	603b      	str	r3, [r7, #0]
    16da:	607c      	str	r4, [r7, #4]
    16dc:	4b4f      	ldr	r3, [pc, #316]	; (181c <bme280_calc_hum+0x21c>)
    16de:	781a      	ldrb	r2, [r3, #0]
    16e0:	4b4f      	ldr	r3, [pc, #316]	; (1820 <bme280_calc_hum+0x220>)
    16e2:	0010      	movs	r0, r2
    16e4:	4798      	blx	r3
    16e6:	4c46      	ldr	r4, [pc, #280]	; (1800 <bme280_calc_hum+0x200>)
    16e8:	2200      	movs	r2, #0
    16ea:	4b4b      	ldr	r3, [pc, #300]	; (1818 <bme280_calc_hum+0x218>)
    16ec:	47a0      	blx	r4
    16ee:	0003      	movs	r3, r0
    16f0:	000c      	movs	r4, r1
    16f2:	0018      	movs	r0, r3
    16f4:	0021      	movs	r1, r4
    16f6:	4c3f      	ldr	r4, [pc, #252]	; (17f4 <bme280_calc_hum+0x1f4>)
    16f8:	69ba      	ldr	r2, [r7, #24]
    16fa:	69fb      	ldr	r3, [r7, #28]
    16fc:	47a0      	blx	r4
    16fe:	0003      	movs	r3, r0
    1700:	000c      	movs	r4, r1
    1702:	0018      	movs	r0, r3
    1704:	0021      	movs	r1, r4
    1706:	4c40      	ldr	r4, [pc, #256]	; (1808 <bme280_calc_hum+0x208>)
    1708:	2200      	movs	r2, #0
    170a:	4b46      	ldr	r3, [pc, #280]	; (1824 <bme280_calc_hum+0x224>)
    170c:	47a0      	blx	r4
    170e:	0003      	movs	r3, r0
    1710:	000c      	movs	r4, r1
    1712:	001a      	movs	r2, r3
    1714:	0023      	movs	r3, r4
    1716:	4c37      	ldr	r4, [pc, #220]	; (17f4 <bme280_calc_hum+0x1f4>)
    1718:	6838      	ldr	r0, [r7, #0]
    171a:	6879      	ldr	r1, [r7, #4]
    171c:	47a0      	blx	r4
    171e:	0003      	movs	r3, r0
    1720:	000c      	movs	r4, r1
    1722:	0018      	movs	r0, r3
    1724:	0021      	movs	r1, r4
    1726:	4c38      	ldr	r4, [pc, #224]	; (1808 <bme280_calc_hum+0x208>)
    1728:	2200      	movs	r2, #0
    172a:	4b3e      	ldr	r3, [pc, #248]	; (1824 <bme280_calc_hum+0x224>)
    172c:	47a0      	blx	r4
    172e:	0003      	movs	r3, r0
    1730:	000c      	movs	r4, r1
    1732:	001a      	movs	r2, r3
    1734:	0023      	movs	r3, r4
    1736:	4c2f      	ldr	r4, [pc, #188]	; (17f4 <bme280_calc_hum+0x1f4>)
    1738:	68b8      	ldr	r0, [r7, #8]
    173a:	68f9      	ldr	r1, [r7, #12]
    173c:	47a0      	blx	r4
    173e:	0003      	movs	r3, r0
    1740:	000c      	movs	r4, r1
    1742:	001a      	movs	r2, r3
    1744:	0023      	movs	r3, r4
    1746:	4c2b      	ldr	r4, [pc, #172]	; (17f4 <bme280_calc_hum+0x1f4>)
    1748:	0028      	movs	r0, r5
    174a:	0031      	movs	r1, r6
    174c:	47a0      	blx	r4
    174e:	0003      	movs	r3, r0
    1750:	000c      	movs	r4, r1
    1752:	61bb      	str	r3, [r7, #24]
    1754:	61fc      	str	r4, [r7, #28]
	var_H = var_H * (1.0 - ((double)H1) * var_H / 524288.0);
    1756:	4b34      	ldr	r3, [pc, #208]	; (1828 <bme280_calc_hum+0x228>)
    1758:	781a      	ldrb	r2, [r3, #0]
    175a:	4b31      	ldr	r3, [pc, #196]	; (1820 <bme280_calc_hum+0x220>)
    175c:	0010      	movs	r0, r2
    175e:	4798      	blx	r3
    1760:	4c24      	ldr	r4, [pc, #144]	; (17f4 <bme280_calc_hum+0x1f4>)
    1762:	69ba      	ldr	r2, [r7, #24]
    1764:	69fb      	ldr	r3, [r7, #28]
    1766:	47a0      	blx	r4
    1768:	0003      	movs	r3, r0
    176a:	000c      	movs	r4, r1
    176c:	0018      	movs	r0, r3
    176e:	0021      	movs	r1, r4
    1770:	4c23      	ldr	r4, [pc, #140]	; (1800 <bme280_calc_hum+0x200>)
    1772:	2200      	movs	r2, #0
    1774:	4b2d      	ldr	r3, [pc, #180]	; (182c <bme280_calc_hum+0x22c>)
    1776:	47a0      	blx	r4
    1778:	0003      	movs	r3, r0
    177a:	000c      	movs	r4, r1
    177c:	001a      	movs	r2, r3
    177e:	0023      	movs	r3, r4
    1780:	4c19      	ldr	r4, [pc, #100]	; (17e8 <bme280_calc_hum+0x1e8>)
    1782:	2000      	movs	r0, #0
    1784:	4927      	ldr	r1, [pc, #156]	; (1824 <bme280_calc_hum+0x224>)
    1786:	47a0      	blx	r4
    1788:	0003      	movs	r3, r0
    178a:	000c      	movs	r4, r1
    178c:	001a      	movs	r2, r3
    178e:	0023      	movs	r3, r4
    1790:	4c18      	ldr	r4, [pc, #96]	; (17f4 <bme280_calc_hum+0x1f4>)
    1792:	69b8      	ldr	r0, [r7, #24]
    1794:	69f9      	ldr	r1, [r7, #28]
    1796:	47a0      	blx	r4
    1798:	0003      	movs	r3, r0
    179a:	000c      	movs	r4, r1
    179c:	61bb      	str	r3, [r7, #24]
    179e:	61fc      	str	r4, [r7, #28]
	if (var_H > 100.0)
    17a0:	4c23      	ldr	r4, [pc, #140]	; (1830 <bme280_calc_hum+0x230>)
    17a2:	2200      	movs	r2, #0
    17a4:	4b23      	ldr	r3, [pc, #140]	; (1834 <bme280_calc_hum+0x234>)
    17a6:	69b8      	ldr	r0, [r7, #24]
    17a8:	69f9      	ldr	r1, [r7, #28]
    17aa:	47a0      	blx	r4
    17ac:	1e03      	subs	r3, r0, #0
    17ae:	d004      	beq.n	17ba <bme280_calc_hum+0x1ba>
		var_H = 100.0;
    17b0:	2300      	movs	r3, #0
    17b2:	4c20      	ldr	r4, [pc, #128]	; (1834 <bme280_calc_hum+0x234>)
    17b4:	61bb      	str	r3, [r7, #24]
    17b6:	61fc      	str	r4, [r7, #28]
    17b8:	e00b      	b.n	17d2 <bme280_calc_hum+0x1d2>
	else if (var_H < 0.0)
    17ba:	4c1f      	ldr	r4, [pc, #124]	; (1838 <bme280_calc_hum+0x238>)
    17bc:	2200      	movs	r2, #0
    17be:	2300      	movs	r3, #0
    17c0:	69b8      	ldr	r0, [r7, #24]
    17c2:	69f9      	ldr	r1, [r7, #28]
    17c4:	47a0      	blx	r4
    17c6:	1e03      	subs	r3, r0, #0
    17c8:	d003      	beq.n	17d2 <bme280_calc_hum+0x1d2>
		var_H = 0.0;
    17ca:	2300      	movs	r3, #0
    17cc:	2400      	movs	r4, #0
    17ce:	61bb      	str	r3, [r7, #24]
    17d0:	61fc      	str	r4, [r7, #28]
	return var_H;
    17d2:	69bb      	ldr	r3, [r7, #24]
    17d4:	69fc      	ldr	r4, [r7, #28]
}
    17d6:	0018      	movs	r0, r3
    17d8:	0021      	movs	r1, r4
    17da:	46bd      	mov	sp, r7
    17dc:	b009      	add	sp, #36	; 0x24
    17de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    17e0:	2000017c 	.word	0x2000017c
    17e4:	00007d71 	.word	0x00007d71
    17e8:	00007705 	.word	0x00007705
    17ec:	40f2c000 	.word	0x40f2c000
    17f0:	20000116 	.word	0x20000116
    17f4:	00007205 	.word	0x00007205
    17f8:	40500000 	.word	0x40500000
    17fc:	20000154 	.word	0x20000154
    1800:	0000699d 	.word	0x0000699d
    1804:	40d00000 	.word	0x40d00000
    1808:	0000637d 	.word	0x0000637d
    180c:	20000178 	.word	0x20000178
    1810:	40f00000 	.word	0x40f00000
    1814:	20000150 	.word	0x20000150
    1818:	41900000 	.word	0x41900000
    181c:	2000015a 	.word	0x2000015a
    1820:	00007df5 	.word	0x00007df5
    1824:	3ff00000 	.word	0x3ff00000
    1828:	2000017a 	.word	0x2000017a
    182c:	41200000 	.word	0x41200000
    1830:	00006315 	.word	0x00006315
    1834:	40590000 	.word	0x40590000
    1838:	000062ed 	.word	0x000062ed

0000183c <bme280_calc_dew>:

double bme280_calc_dew(int32_t temp, double hum)
{
    183c:	b5f0      	push	{r4, r5, r6, r7, lr}
    183e:	b08f      	sub	sp, #60	; 0x3c
    1840:	af00      	add	r7, sp, #0
    1842:	60f8      	str	r0, [r7, #12]
    1844:	603a      	str	r2, [r7, #0]
    1846:	607b      	str	r3, [r7, #4]
	double celsius = (double)temp/100;
    1848:	4b7b      	ldr	r3, [pc, #492]	; (1a38 <bme280_calc_dew+0x1fc>)
    184a:	68f8      	ldr	r0, [r7, #12]
    184c:	4798      	blx	r3
    184e:	4c7b      	ldr	r4, [pc, #492]	; (1a3c <bme280_calc_dew+0x200>)
    1850:	2200      	movs	r2, #0
    1852:	4b7b      	ldr	r3, [pc, #492]	; (1a40 <bme280_calc_dew+0x204>)
    1854:	47a0      	blx	r4
    1856:	0003      	movs	r3, r0
    1858:	000c      	movs	r4, r1
    185a:	633b      	str	r3, [r7, #48]	; 0x30
    185c:	637c      	str	r4, [r7, #52]	; 0x34
	double RATIO = 373.15 / (273.15 + celsius);
    185e:	4c79      	ldr	r4, [pc, #484]	; (1a44 <bme280_calc_dew+0x208>)
    1860:	4a79      	ldr	r2, [pc, #484]	; (1a48 <bme280_calc_dew+0x20c>)
    1862:	4b7a      	ldr	r3, [pc, #488]	; (1a4c <bme280_calc_dew+0x210>)
    1864:	6b38      	ldr	r0, [r7, #48]	; 0x30
    1866:	6b79      	ldr	r1, [r7, #52]	; 0x34
    1868:	47a0      	blx	r4
    186a:	0003      	movs	r3, r0
    186c:	000c      	movs	r4, r1
    186e:	001a      	movs	r2, r3
    1870:	0023      	movs	r3, r4
    1872:	4c72      	ldr	r4, [pc, #456]	; (1a3c <bme280_calc_dew+0x200>)
    1874:	4874      	ldr	r0, [pc, #464]	; (1a48 <bme280_calc_dew+0x20c>)
    1876:	4976      	ldr	r1, [pc, #472]	; (1a50 <bme280_calc_dew+0x214>)
    1878:	47a0      	blx	r4
    187a:	0003      	movs	r3, r0
    187c:	000c      	movs	r4, r1
    187e:	62bb      	str	r3, [r7, #40]	; 0x28
    1880:	62fc      	str	r4, [r7, #44]	; 0x2c
	double RHS = -7.90298 * (RATIO - 1);
    1882:	4c74      	ldr	r4, [pc, #464]	; (1a54 <bme280_calc_dew+0x218>)
    1884:	2200      	movs	r2, #0
    1886:	4b74      	ldr	r3, [pc, #464]	; (1a58 <bme280_calc_dew+0x21c>)
    1888:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    188a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    188c:	47a0      	blx	r4
    188e:	0003      	movs	r3, r0
    1890:	000c      	movs	r4, r1
    1892:	0018      	movs	r0, r3
    1894:	0021      	movs	r1, r4
    1896:	4c71      	ldr	r4, [pc, #452]	; (1a5c <bme280_calc_dew+0x220>)
    1898:	4a71      	ldr	r2, [pc, #452]	; (1a60 <bme280_calc_dew+0x224>)
    189a:	4b72      	ldr	r3, [pc, #456]	; (1a64 <bme280_calc_dew+0x228>)
    189c:	47a0      	blx	r4
    189e:	0003      	movs	r3, r0
    18a0:	000c      	movs	r4, r1
    18a2:	623b      	str	r3, [r7, #32]
    18a4:	627c      	str	r4, [r7, #36]	; 0x24
	RHS += 5.02808 * log10(RATIO);
    18a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    18a8:	6afc      	ldr	r4, [r7, #44]	; 0x2c
    18aa:	0018      	movs	r0, r3
    18ac:	0021      	movs	r1, r4
    18ae:	4b6e      	ldr	r3, [pc, #440]	; (1a68 <bme280_calc_dew+0x22c>)
    18b0:	4798      	blx	r3
    18b2:	4c6a      	ldr	r4, [pc, #424]	; (1a5c <bme280_calc_dew+0x220>)
    18b4:	4a6d      	ldr	r2, [pc, #436]	; (1a6c <bme280_calc_dew+0x230>)
    18b6:	4b6e      	ldr	r3, [pc, #440]	; (1a70 <bme280_calc_dew+0x234>)
    18b8:	47a0      	blx	r4
    18ba:	0003      	movs	r3, r0
    18bc:	000c      	movs	r4, r1
    18be:	001a      	movs	r2, r3
    18c0:	0023      	movs	r3, r4
    18c2:	4c60      	ldr	r4, [pc, #384]	; (1a44 <bme280_calc_dew+0x208>)
    18c4:	6a38      	ldr	r0, [r7, #32]
    18c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
    18c8:	47a0      	blx	r4
    18ca:	0003      	movs	r3, r0
    18cc:	000c      	movs	r4, r1
    18ce:	623b      	str	r3, [r7, #32]
    18d0:	627c      	str	r4, [r7, #36]	; 0x24
	RHS += -1.3816e-7 * (pow(10, (11.344 * (1 - 1/RATIO ))) - 1) ;
    18d2:	4c5a      	ldr	r4, [pc, #360]	; (1a3c <bme280_calc_dew+0x200>)
    18d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
    18d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    18d8:	2000      	movs	r0, #0
    18da:	495f      	ldr	r1, [pc, #380]	; (1a58 <bme280_calc_dew+0x21c>)
    18dc:	47a0      	blx	r4
    18de:	0003      	movs	r3, r0
    18e0:	000c      	movs	r4, r1
    18e2:	001a      	movs	r2, r3
    18e4:	0023      	movs	r3, r4
    18e6:	4c5b      	ldr	r4, [pc, #364]	; (1a54 <bme280_calc_dew+0x218>)
    18e8:	2000      	movs	r0, #0
    18ea:	495b      	ldr	r1, [pc, #364]	; (1a58 <bme280_calc_dew+0x21c>)
    18ec:	47a0      	blx	r4
    18ee:	0003      	movs	r3, r0
    18f0:	000c      	movs	r4, r1
    18f2:	0018      	movs	r0, r3
    18f4:	0021      	movs	r1, r4
    18f6:	4c59      	ldr	r4, [pc, #356]	; (1a5c <bme280_calc_dew+0x220>)
    18f8:	4a5e      	ldr	r2, [pc, #376]	; (1a74 <bme280_calc_dew+0x238>)
    18fa:	4b5f      	ldr	r3, [pc, #380]	; (1a78 <bme280_calc_dew+0x23c>)
    18fc:	47a0      	blx	r4
    18fe:	0003      	movs	r3, r0
    1900:	000c      	movs	r4, r1
    1902:	2000      	movs	r0, #0
    1904:	495d      	ldr	r1, [pc, #372]	; (1a7c <bme280_calc_dew+0x240>)
    1906:	001a      	movs	r2, r3
    1908:	0023      	movs	r3, r4
    190a:	4c5d      	ldr	r4, [pc, #372]	; (1a80 <bme280_calc_dew+0x244>)
    190c:	47a0      	blx	r4
    190e:	4c51      	ldr	r4, [pc, #324]	; (1a54 <bme280_calc_dew+0x218>)
    1910:	2200      	movs	r2, #0
    1912:	4b51      	ldr	r3, [pc, #324]	; (1a58 <bme280_calc_dew+0x21c>)
    1914:	47a0      	blx	r4
    1916:	0003      	movs	r3, r0
    1918:	000c      	movs	r4, r1
    191a:	0018      	movs	r0, r3
    191c:	0021      	movs	r1, r4
    191e:	4c4f      	ldr	r4, [pc, #316]	; (1a5c <bme280_calc_dew+0x220>)
    1920:	4a58      	ldr	r2, [pc, #352]	; (1a84 <bme280_calc_dew+0x248>)
    1922:	4b59      	ldr	r3, [pc, #356]	; (1a88 <bme280_calc_dew+0x24c>)
    1924:	47a0      	blx	r4
    1926:	0003      	movs	r3, r0
    1928:	000c      	movs	r4, r1
    192a:	001a      	movs	r2, r3
    192c:	0023      	movs	r3, r4
    192e:	4c45      	ldr	r4, [pc, #276]	; (1a44 <bme280_calc_dew+0x208>)
    1930:	6a38      	ldr	r0, [r7, #32]
    1932:	6a79      	ldr	r1, [r7, #36]	; 0x24
    1934:	47a0      	blx	r4
    1936:	0003      	movs	r3, r0
    1938:	000c      	movs	r4, r1
    193a:	623b      	str	r3, [r7, #32]
    193c:	627c      	str	r4, [r7, #36]	; 0x24
	RHS += 8.1328e-3 * (pow(10, (-3.49149 * (RATIO - 1))) - 1) ;
    193e:	4c45      	ldr	r4, [pc, #276]	; (1a54 <bme280_calc_dew+0x218>)
    1940:	2200      	movs	r2, #0
    1942:	4b45      	ldr	r3, [pc, #276]	; (1a58 <bme280_calc_dew+0x21c>)
    1944:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    1946:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    1948:	47a0      	blx	r4
    194a:	0003      	movs	r3, r0
    194c:	000c      	movs	r4, r1
    194e:	0018      	movs	r0, r3
    1950:	0021      	movs	r1, r4
    1952:	4c42      	ldr	r4, [pc, #264]	; (1a5c <bme280_calc_dew+0x220>)
    1954:	4a4d      	ldr	r2, [pc, #308]	; (1a8c <bme280_calc_dew+0x250>)
    1956:	4b4e      	ldr	r3, [pc, #312]	; (1a90 <bme280_calc_dew+0x254>)
    1958:	47a0      	blx	r4
    195a:	0003      	movs	r3, r0
    195c:	000c      	movs	r4, r1
    195e:	2000      	movs	r0, #0
    1960:	4946      	ldr	r1, [pc, #280]	; (1a7c <bme280_calc_dew+0x240>)
    1962:	001a      	movs	r2, r3
    1964:	0023      	movs	r3, r4
    1966:	4c46      	ldr	r4, [pc, #280]	; (1a80 <bme280_calc_dew+0x244>)
    1968:	47a0      	blx	r4
    196a:	4c3a      	ldr	r4, [pc, #232]	; (1a54 <bme280_calc_dew+0x218>)
    196c:	2200      	movs	r2, #0
    196e:	4b3a      	ldr	r3, [pc, #232]	; (1a58 <bme280_calc_dew+0x21c>)
    1970:	47a0      	blx	r4
    1972:	0003      	movs	r3, r0
    1974:	000c      	movs	r4, r1
    1976:	0018      	movs	r0, r3
    1978:	0021      	movs	r1, r4
    197a:	4c38      	ldr	r4, [pc, #224]	; (1a5c <bme280_calc_dew+0x220>)
    197c:	4a45      	ldr	r2, [pc, #276]	; (1a94 <bme280_calc_dew+0x258>)
    197e:	4b46      	ldr	r3, [pc, #280]	; (1a98 <bme280_calc_dew+0x25c>)
    1980:	47a0      	blx	r4
    1982:	0003      	movs	r3, r0
    1984:	000c      	movs	r4, r1
    1986:	001a      	movs	r2, r3
    1988:	0023      	movs	r3, r4
    198a:	4c2e      	ldr	r4, [pc, #184]	; (1a44 <bme280_calc_dew+0x208>)
    198c:	6a38      	ldr	r0, [r7, #32]
    198e:	6a79      	ldr	r1, [r7, #36]	; 0x24
    1990:	47a0      	blx	r4
    1992:	0003      	movs	r3, r0
    1994:	000c      	movs	r4, r1
    1996:	623b      	str	r3, [r7, #32]
    1998:	627c      	str	r4, [r7, #36]	; 0x24
	RHS += log10(1013.246);
    199a:	4c2a      	ldr	r4, [pc, #168]	; (1a44 <bme280_calc_dew+0x208>)
    199c:	4a3f      	ldr	r2, [pc, #252]	; (1a9c <bme280_calc_dew+0x260>)
    199e:	4b40      	ldr	r3, [pc, #256]	; (1aa0 <bme280_calc_dew+0x264>)
    19a0:	6a38      	ldr	r0, [r7, #32]
    19a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
    19a4:	47a0      	blx	r4
    19a6:	0003      	movs	r3, r0
    19a8:	000c      	movs	r4, r1
    19aa:	623b      	str	r3, [r7, #32]
    19ac:	627c      	str	r4, [r7, #36]	; 0x24
	// factor -3 is to adjust units - Vapor Pressure SVP * humidity
	double VP = pow(10, RHS - 3) * hum;
    19ae:	4c29      	ldr	r4, [pc, #164]	; (1a54 <bme280_calc_dew+0x218>)
    19b0:	2200      	movs	r2, #0
    19b2:	4b3c      	ldr	r3, [pc, #240]	; (1aa4 <bme280_calc_dew+0x268>)
    19b4:	6a38      	ldr	r0, [r7, #32]
    19b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
    19b8:	47a0      	blx	r4
    19ba:	0003      	movs	r3, r0
    19bc:	000c      	movs	r4, r1
    19be:	2000      	movs	r0, #0
    19c0:	492e      	ldr	r1, [pc, #184]	; (1a7c <bme280_calc_dew+0x240>)
    19c2:	001a      	movs	r2, r3
    19c4:	0023      	movs	r3, r4
    19c6:	4c2e      	ldr	r4, [pc, #184]	; (1a80 <bme280_calc_dew+0x244>)
    19c8:	47a0      	blx	r4
    19ca:	4c24      	ldr	r4, [pc, #144]	; (1a5c <bme280_calc_dew+0x220>)
    19cc:	683a      	ldr	r2, [r7, #0]
    19ce:	687b      	ldr	r3, [r7, #4]
    19d0:	47a0      	blx	r4
    19d2:	0003      	movs	r3, r0
    19d4:	000c      	movs	r4, r1
    19d6:	61bb      	str	r3, [r7, #24]
    19d8:	61fc      	str	r4, [r7, #28]
	// (2) DEWPOINT = F(Vapor Pressure)
	double T = log(VP/0.61078);   // temp var
    19da:	4c18      	ldr	r4, [pc, #96]	; (1a3c <bme280_calc_dew+0x200>)
    19dc:	4a32      	ldr	r2, [pc, #200]	; (1aa8 <bme280_calc_dew+0x26c>)
    19de:	4b33      	ldr	r3, [pc, #204]	; (1aac <bme280_calc_dew+0x270>)
    19e0:	69b8      	ldr	r0, [r7, #24]
    19e2:	69f9      	ldr	r1, [r7, #28]
    19e4:	47a0      	blx	r4
    19e6:	0003      	movs	r3, r0
    19e8:	000c      	movs	r4, r1
    19ea:	0018      	movs	r0, r3
    19ec:	0021      	movs	r1, r4
    19ee:	4b30      	ldr	r3, [pc, #192]	; (1ab0 <bme280_calc_dew+0x274>)
    19f0:	4798      	blx	r3
    19f2:	0003      	movs	r3, r0
    19f4:	000c      	movs	r4, r1
    19f6:	613b      	str	r3, [r7, #16]
    19f8:	617c      	str	r4, [r7, #20]
	return (241.88 * T) / (17.558 - T);
    19fa:	4c18      	ldr	r4, [pc, #96]	; (1a5c <bme280_calc_dew+0x220>)
    19fc:	4a2d      	ldr	r2, [pc, #180]	; (1ab4 <bme280_calc_dew+0x278>)
    19fe:	4b2e      	ldr	r3, [pc, #184]	; (1ab8 <bme280_calc_dew+0x27c>)
    1a00:	6938      	ldr	r0, [r7, #16]
    1a02:	6979      	ldr	r1, [r7, #20]
    1a04:	47a0      	blx	r4
    1a06:	0003      	movs	r3, r0
    1a08:	000c      	movs	r4, r1
    1a0a:	001d      	movs	r5, r3
    1a0c:	0026      	movs	r6, r4
    1a0e:	4c11      	ldr	r4, [pc, #68]	; (1a54 <bme280_calc_dew+0x218>)
    1a10:	693a      	ldr	r2, [r7, #16]
    1a12:	697b      	ldr	r3, [r7, #20]
    1a14:	4829      	ldr	r0, [pc, #164]	; (1abc <bme280_calc_dew+0x280>)
    1a16:	492a      	ldr	r1, [pc, #168]	; (1ac0 <bme280_calc_dew+0x284>)
    1a18:	47a0      	blx	r4
    1a1a:	0003      	movs	r3, r0
    1a1c:	000c      	movs	r4, r1
    1a1e:	001a      	movs	r2, r3
    1a20:	0023      	movs	r3, r4
    1a22:	4c06      	ldr	r4, [pc, #24]	; (1a3c <bme280_calc_dew+0x200>)
    1a24:	0028      	movs	r0, r5
    1a26:	0031      	movs	r1, r6
    1a28:	47a0      	blx	r4
    1a2a:	0003      	movs	r3, r0
    1a2c:	000c      	movs	r4, r1
}
    1a2e:	0018      	movs	r0, r3
    1a30:	0021      	movs	r1, r4
    1a32:	46bd      	mov	sp, r7
    1a34:	b00f      	add	sp, #60	; 0x3c
    1a36:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1a38:	00007d71 	.word	0x00007d71
    1a3c:	0000699d 	.word	0x0000699d
    1a40:	40590000 	.word	0x40590000
    1a44:	0000637d 	.word	0x0000637d
    1a48:	66666666 	.word	0x66666666
    1a4c:	40711266 	.word	0x40711266
    1a50:	40775266 	.word	0x40775266
    1a54:	00007705 	.word	0x00007705
    1a58:	3ff00000 	.word	0x3ff00000
    1a5c:	00007205 	.word	0x00007205
    1a60:	ca03c4b1 	.word	0xca03c4b1
    1a64:	c01f9ca6 	.word	0xc01f9ca6
    1a68:	000047c1 	.word	0x000047c1
    1a6c:	00e6afcd 	.word	0x00e6afcd
    1a70:	40141cc1 	.word	0x40141cc1
    1a74:	c49ba5e3 	.word	0xc49ba5e3
    1a78:	4026b020 	.word	0x4026b020
    1a7c:	40240000 	.word	0x40240000
    1a80:	000048d9 	.word	0x000048d9
    1a84:	36423db1 	.word	0x36423db1
    1a88:	be828b24 	.word	0xbe828b24
    1a8c:	4f227d03 	.word	0x4f227d03
    1a90:	c00bee92 	.word	0xc00bee92
    1a94:	f0330363 	.word	0xf0330363
    1a98:	3f80a7ed 	.word	0x3f80a7ed
    1a9c:	409e541b 	.word	0x409e541b
    1aa0:	40080bb4 	.word	0x40080bb4
    1aa4:	40080000 	.word	0x40080000
    1aa8:	7fa1a0cf 	.word	0x7fa1a0cf
    1aac:	3fe38b82 	.word	0x3fe38b82
    1ab0:	000046b1 	.word	0x000046b1
    1ab4:	f5c28f5c 	.word	0xf5c28f5c
    1ab8:	406e3c28 	.word	0x406e3c28
    1abc:	16872b02 	.word	0x16872b02
    1ac0:	40318ed9 	.word	0x40318ed9

00001ac4 <bme280_get_all_calced>:

void bme280_get_all_calced(struct bme280_data *bme280_data_object)
{
    1ac4:	b590      	push	{r4, r7, lr}
    1ac6:	b087      	sub	sp, #28
    1ac8:	af00      	add	r7, sp, #0
    1aca:	6078      	str	r0, [r7, #4]
	uint8_t temps[3];
	uint8_t pres[3];
	uint8_t hum[2];
	
	bme280_force_update();
    1acc:	4b36      	ldr	r3, [pc, #216]	; (1ba8 <bme280_get_all_calced+0xe4>)
    1ace:	4798      	blx	r3
		
	bme280_read_temp(&temps);
    1ad0:	2314      	movs	r3, #20
    1ad2:	18fb      	adds	r3, r7, r3
    1ad4:	0018      	movs	r0, r3
    1ad6:	4b35      	ldr	r3, [pc, #212]	; (1bac <bme280_get_all_calced+0xe8>)
    1ad8:	4798      	blx	r3
	bme280_read_pres(&pres);
    1ada:	2310      	movs	r3, #16
    1adc:	18fb      	adds	r3, r7, r3
    1ade:	0018      	movs	r0, r3
    1ae0:	4b33      	ldr	r3, [pc, #204]	; (1bb0 <bme280_get_all_calced+0xec>)
    1ae2:	4798      	blx	r3
	bme280_read_hum(&hum);
    1ae4:	230c      	movs	r3, #12
    1ae6:	18fb      	adds	r3, r7, r3
    1ae8:	0018      	movs	r0, r3
    1aea:	4b32      	ldr	r3, [pc, #200]	; (1bb4 <bme280_get_all_calced+0xf0>)
    1aec:	4798      	blx	r3
	
	bme280_data_object->temperature = bme280_calc_temp((int32_t)(temps[0]<<12)+(temps[1] << 4)+(temps[2] >> 4));
    1aee:	2314      	movs	r3, #20
    1af0:	18fb      	adds	r3, r7, r3
    1af2:	781b      	ldrb	r3, [r3, #0]
    1af4:	031a      	lsls	r2, r3, #12
    1af6:	2314      	movs	r3, #20
    1af8:	18fb      	adds	r3, r7, r3
    1afa:	785b      	ldrb	r3, [r3, #1]
    1afc:	011b      	lsls	r3, r3, #4
    1afe:	18d3      	adds	r3, r2, r3
    1b00:	2214      	movs	r2, #20
    1b02:	18ba      	adds	r2, r7, r2
    1b04:	7892      	ldrb	r2, [r2, #2]
    1b06:	0912      	lsrs	r2, r2, #4
    1b08:	b2d2      	uxtb	r2, r2
    1b0a:	189b      	adds	r3, r3, r2
    1b0c:	0018      	movs	r0, r3
    1b0e:	4b2a      	ldr	r3, [pc, #168]	; (1bb8 <bme280_get_all_calced+0xf4>)
    1b10:	4798      	blx	r3
    1b12:	0002      	movs	r2, r0
    1b14:	687b      	ldr	r3, [r7, #4]
    1b16:	601a      	str	r2, [r3, #0]
	bme280_data_object->pressure = bme280_calc_pres((int32_t)(pres[0]<<12)+(pres[1] << 4)+(pres[2] >> 4))/100;
    1b18:	2310      	movs	r3, #16
    1b1a:	18fb      	adds	r3, r7, r3
    1b1c:	781b      	ldrb	r3, [r3, #0]
    1b1e:	031a      	lsls	r2, r3, #12
    1b20:	2310      	movs	r3, #16
    1b22:	18fb      	adds	r3, r7, r3
    1b24:	785b      	ldrb	r3, [r3, #1]
    1b26:	011b      	lsls	r3, r3, #4
    1b28:	18d3      	adds	r3, r2, r3
    1b2a:	2210      	movs	r2, #16
    1b2c:	18ba      	adds	r2, r7, r2
    1b2e:	7892      	ldrb	r2, [r2, #2]
    1b30:	0912      	lsrs	r2, r2, #4
    1b32:	b2d2      	uxtb	r2, r2
    1b34:	189b      	adds	r3, r3, r2
    1b36:	0018      	movs	r0, r3
    1b38:	4b20      	ldr	r3, [pc, #128]	; (1bbc <bme280_get_all_calced+0xf8>)
    1b3a:	4798      	blx	r3
    1b3c:	0002      	movs	r2, r0
    1b3e:	4b20      	ldr	r3, [pc, #128]	; (1bc0 <bme280_get_all_calced+0xfc>)
    1b40:	2164      	movs	r1, #100	; 0x64
    1b42:	0010      	movs	r0, r2
    1b44:	4798      	blx	r3
    1b46:	0003      	movs	r3, r0
    1b48:	001a      	movs	r2, r3
    1b4a:	687b      	ldr	r3, [r7, #4]
    1b4c:	605a      	str	r2, [r3, #4]
	bme280_data_object->humidity = (float)bme280_calc_hum((hum[0]<<8)+hum[1]);
    1b4e:	230c      	movs	r3, #12
    1b50:	18fb      	adds	r3, r7, r3
    1b52:	781b      	ldrb	r3, [r3, #0]
    1b54:	021b      	lsls	r3, r3, #8
    1b56:	220c      	movs	r2, #12
    1b58:	18ba      	adds	r2, r7, r2
    1b5a:	7852      	ldrb	r2, [r2, #1]
    1b5c:	189b      	adds	r3, r3, r2
    1b5e:	0018      	movs	r0, r3
    1b60:	4b18      	ldr	r3, [pc, #96]	; (1bc4 <bme280_get_all_calced+0x100>)
    1b62:	4798      	blx	r3
    1b64:	000a      	movs	r2, r1
    1b66:	0001      	movs	r1, r0
    1b68:	4b17      	ldr	r3, [pc, #92]	; (1bc8 <bme280_get_all_calced+0x104>)
    1b6a:	0008      	movs	r0, r1
    1b6c:	0011      	movs	r1, r2
    1b6e:	4798      	blx	r3
    1b70:	1c02      	adds	r2, r0, #0
    1b72:	687b      	ldr	r3, [r7, #4]
    1b74:	609a      	str	r2, [r3, #8]
	bme280_data_object->dew_point = (float)bme280_calc_dew(bme280_data_object->temperature, bme280_data_object->humidity);
    1b76:	687b      	ldr	r3, [r7, #4]
    1b78:	681c      	ldr	r4, [r3, #0]
    1b7a:	687b      	ldr	r3, [r7, #4]
    1b7c:	689a      	ldr	r2, [r3, #8]
    1b7e:	4b13      	ldr	r3, [pc, #76]	; (1bcc <bme280_get_all_calced+0x108>)
    1b80:	1c10      	adds	r0, r2, #0
    1b82:	4798      	blx	r3
    1b84:	0002      	movs	r2, r0
    1b86:	000b      	movs	r3, r1
    1b88:	0020      	movs	r0, r4
    1b8a:	4911      	ldr	r1, [pc, #68]	; (1bd0 <bme280_get_all_calced+0x10c>)
    1b8c:	4788      	blx	r1
    1b8e:	000a      	movs	r2, r1
    1b90:	0001      	movs	r1, r0
    1b92:	4b0d      	ldr	r3, [pc, #52]	; (1bc8 <bme280_get_all_calced+0x104>)
    1b94:	0008      	movs	r0, r1
    1b96:	0011      	movs	r1, r2
    1b98:	4798      	blx	r3
    1b9a:	1c02      	adds	r2, r0, #0
    1b9c:	687b      	ldr	r3, [r7, #4]
    1b9e:	60da      	str	r2, [r3, #12]
}
    1ba0:	46c0      	nop			; (mov r8, r8)
    1ba2:	46bd      	mov	sp, r7
    1ba4:	b007      	add	sp, #28
    1ba6:	bd90      	pop	{r4, r7, pc}
    1ba8:	00001bd5 	.word	0x00001bd5
    1bac:	00001089 	.word	0x00001089
    1bb0:	000010e9 	.word	0x000010e9
    1bb4:	00001149 	.word	0x00001149
    1bb8:	0000142d 	.word	0x0000142d
    1bbc:	000014a5 	.word	0x000014a5
    1bc0:	000060e9 	.word	0x000060e9
    1bc4:	00001601 	.word	0x00001601
    1bc8:	00007f09 	.word	0x00007f09
    1bcc:	00007e65 	.word	0x00007e65
    1bd0:	0000183d 	.word	0x0000183d

00001bd4 <bme280_force_update>:

void bme280_force_update(void)
{
    1bd4:	b580      	push	{r7, lr}
    1bd6:	b082      	sub	sp, #8
    1bd8:	af00      	add	r7, sp, #0
	uint8_t data[2];
	data[0] = 0xF4;
    1bda:	1d3b      	adds	r3, r7, #4
    1bdc:	22f4      	movs	r2, #244	; 0xf4
    1bde:	701a      	strb	r2, [r3, #0]
	data[1] = 0x26;
    1be0:	1d3b      	adds	r3, r7, #4
    1be2:	2226      	movs	r2, #38	; 0x26
    1be4:	705a      	strb	r2, [r3, #1]
	bme280_spi_write(&data,2);
    1be6:	1d3b      	adds	r3, r7, #4
    1be8:	2102      	movs	r1, #2
    1bea:	0018      	movs	r0, r3
    1bec:	4b04      	ldr	r3, [pc, #16]	; (1c00 <bme280_force_update+0x2c>)
    1bee:	4798      	blx	r3
	delay_ms(15);
    1bf0:	200f      	movs	r0, #15
    1bf2:	4b04      	ldr	r3, [pc, #16]	; (1c04 <bme280_force_update+0x30>)
    1bf4:	4798      	blx	r3
}
    1bf6:	46c0      	nop			; (mov r8, r8)
    1bf8:	46bd      	mov	sp, r7
    1bfa:	b002      	add	sp, #8
    1bfc:	bd80      	pop	{r7, pc}
    1bfe:	46c0      	nop			; (mov r8, r8)
    1c00:	00000fa9 	.word	0x00000fa9
    1c04:	00000c4d 	.word	0x00000c4d

00001c08 <bme280_init>:

void bme280_init(void)
{
    1c08:	b580      	push	{r7, lr}
    1c0a:	b082      	sub	sp, #8
    1c0c:	af00      	add	r7, sp, #0
	bme280_get_cal_data();
    1c0e:	4b1c      	ldr	r3, [pc, #112]	; (1c80 <bme280_init+0x78>)
    1c10:	4798      	blx	r3
	bme280_calc_cal();
    1c12:	4b1c      	ldr	r3, [pc, #112]	; (1c84 <bme280_init+0x7c>)
    1c14:	4798      	blx	r3
	bme280_spi_read(&device_id,1,0xD0);
    1c16:	4b1c      	ldr	r3, [pc, #112]	; (1c88 <bme280_init+0x80>)
    1c18:	22d0      	movs	r2, #208	; 0xd0
    1c1a:	2101      	movs	r1, #1
    1c1c:	0018      	movs	r0, r3
    1c1e:	4b1b      	ldr	r3, [pc, #108]	; (1c8c <bme280_init+0x84>)
    1c20:	4798      	blx	r3
	uint8_t data[2];
	
	uint8_t temp =  0;
    1c22:	1cfb      	adds	r3, r7, #3
    1c24:	2200      	movs	r2, #0
    1c26:	701a      	strb	r2, [r3, #0]
	bme280_spi_read(&temp,1,0xF2);
    1c28:	1cfb      	adds	r3, r7, #3
    1c2a:	22f2      	movs	r2, #242	; 0xf2
    1c2c:	2101      	movs	r1, #1
    1c2e:	0018      	movs	r0, r3
    1c30:	4b16      	ldr	r3, [pc, #88]	; (1c8c <bme280_init+0x84>)
    1c32:	4798      	blx	r3
	
	data[0] = 0xF2;
    1c34:	1d3b      	adds	r3, r7, #4
    1c36:	22f2      	movs	r2, #242	; 0xf2
    1c38:	701a      	strb	r2, [r3, #0]
	data[1] = 0x01;
    1c3a:	1d3b      	adds	r3, r7, #4
    1c3c:	2201      	movs	r2, #1
    1c3e:	705a      	strb	r2, [r3, #1]
	bme280_spi_write(&data,2);
    1c40:	1d3b      	adds	r3, r7, #4
    1c42:	2102      	movs	r1, #2
    1c44:	0018      	movs	r0, r3
    1c46:	4b12      	ldr	r3, [pc, #72]	; (1c90 <bme280_init+0x88>)
    1c48:	4798      	blx	r3
	data[0] = 0xF4;
    1c4a:	1d3b      	adds	r3, r7, #4
    1c4c:	22f4      	movs	r2, #244	; 0xf4
    1c4e:	701a      	strb	r2, [r3, #0]
	data[1] = 0x26;
    1c50:	1d3b      	adds	r3, r7, #4
    1c52:	2226      	movs	r2, #38	; 0x26
    1c54:	705a      	strb	r2, [r3, #1]
	bme280_spi_write(&data,2);
    1c56:	1d3b      	adds	r3, r7, #4
    1c58:	2102      	movs	r1, #2
    1c5a:	0018      	movs	r0, r3
    1c5c:	4b0c      	ldr	r3, [pc, #48]	; (1c90 <bme280_init+0x88>)
    1c5e:	4798      	blx	r3
	
	data[0] = 0xF5;
    1c60:	1d3b      	adds	r3, r7, #4
    1c62:	22f5      	movs	r2, #245	; 0xf5
    1c64:	701a      	strb	r2, [r3, #0]
	data[1] = 0xC0;
    1c66:	1d3b      	adds	r3, r7, #4
    1c68:	22c0      	movs	r2, #192	; 0xc0
    1c6a:	705a      	strb	r2, [r3, #1]
	bme280_spi_write(&data,2);
    1c6c:	1d3b      	adds	r3, r7, #4
    1c6e:	2102      	movs	r1, #2
    1c70:	0018      	movs	r0, r3
    1c72:	4b07      	ldr	r3, [pc, #28]	; (1c90 <bme280_init+0x88>)
    1c74:	4798      	blx	r3
}
    1c76:	46c0      	nop			; (mov r8, r8)
    1c78:	46bd      	mov	sp, r7
    1c7a:	b002      	add	sp, #8
    1c7c:	bd80      	pop	{r7, pc}
    1c7e:	46c0      	nop			; (mov r8, r8)
    1c80:	000011a9 	.word	0x000011a9
    1c84:	00001229 	.word	0x00001229
    1c88:	2000014c 	.word	0x2000014c
    1c8c:	00001005 	.word	0x00001005
    1c90:	00000fa9 	.word	0x00000fa9

00001c94 <bme280_data_compress>:
		}hestestruct;
		uint8_t bytes[16];
	}testheste;

void bme280_data_compress(struct bme280_data *bme280_data_object, uint8_t *data_array)
{
    1c94:	b580      	push	{r7, lr}
    1c96:	b088      	sub	sp, #32
    1c98:	af00      	add	r7, sp, #0
    1c9a:	6078      	str	r0, [r7, #4]
    1c9c:	6039      	str	r1, [r7, #0]
	testheste testhest;
	testhest.hestestruct.temperature = bme280_data_object->temperature;
    1c9e:	687b      	ldr	r3, [r7, #4]
    1ca0:	681a      	ldr	r2, [r3, #0]
    1ca2:	230c      	movs	r3, #12
    1ca4:	18fb      	adds	r3, r7, r3
    1ca6:	601a      	str	r2, [r3, #0]
	testhest.hestestruct.pressure = bme280_data_object->pressure;
    1ca8:	687b      	ldr	r3, [r7, #4]
    1caa:	685a      	ldr	r2, [r3, #4]
    1cac:	230c      	movs	r3, #12
    1cae:	18fb      	adds	r3, r7, r3
    1cb0:	605a      	str	r2, [r3, #4]
	testhest.hestestruct.dew_point = bme280_data_object->dew_point;
    1cb2:	687b      	ldr	r3, [r7, #4]
    1cb4:	68da      	ldr	r2, [r3, #12]
    1cb6:	230c      	movs	r3, #12
    1cb8:	18fb      	adds	r3, r7, r3
    1cba:	60da      	str	r2, [r3, #12]
	testhest.hestestruct.humidity = bme280_data_object->humidity;
    1cbc:	687b      	ldr	r3, [r7, #4]
    1cbe:	689a      	ldr	r2, [r3, #8]
    1cc0:	230c      	movs	r3, #12
    1cc2:	18fb      	adds	r3, r7, r3
    1cc4:	609a      	str	r2, [r3, #8]
	
	for (int i=0;i<16;i++)
    1cc6:	2300      	movs	r3, #0
    1cc8:	61fb      	str	r3, [r7, #28]
    1cca:	e00b      	b.n	1ce4 <bme280_data_compress+0x50>
	{
		data_array[i] = testhest.bytes[i];
    1ccc:	69fb      	ldr	r3, [r7, #28]
    1cce:	683a      	ldr	r2, [r7, #0]
    1cd0:	18d3      	adds	r3, r2, r3
    1cd2:	220c      	movs	r2, #12
    1cd4:	18b9      	adds	r1, r7, r2
    1cd6:	69fa      	ldr	r2, [r7, #28]
    1cd8:	188a      	adds	r2, r1, r2
    1cda:	7812      	ldrb	r2, [r2, #0]
    1cdc:	701a      	strb	r2, [r3, #0]
	for (int i=0;i<16;i++)
    1cde:	69fb      	ldr	r3, [r7, #28]
    1ce0:	3301      	adds	r3, #1
    1ce2:	61fb      	str	r3, [r7, #28]
    1ce4:	69fb      	ldr	r3, [r7, #28]
    1ce6:	2b0f      	cmp	r3, #15
    1ce8:	ddf0      	ble.n	1ccc <bme280_data_compress+0x38>
	
	data_array[12] = tobytearray.bytes[0];
	data_array[13] = tobytearray.bytes[1];
	data_array[14] = tobytearray.bytes[2];
	data_array[15] = tobytearray.bytes[3];*/
    1cea:	46c0      	nop			; (mov r8, r8)
    1cec:	46bd      	mov	sp, r7
    1cee:	b008      	add	sp, #32
    1cf0:	bd80      	pop	{r7, pc}
	...

00001cf4 <system_pinmux_get_group_from_gpio_pin>:
{
    1cf4:	b580      	push	{r7, lr}
    1cf6:	b084      	sub	sp, #16
    1cf8:	af00      	add	r7, sp, #0
    1cfa:	0002      	movs	r2, r0
    1cfc:	1dfb      	adds	r3, r7, #7
    1cfe:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    1d00:	230f      	movs	r3, #15
    1d02:	18fb      	adds	r3, r7, r3
    1d04:	1dfa      	adds	r2, r7, #7
    1d06:	7812      	ldrb	r2, [r2, #0]
    1d08:	09d2      	lsrs	r2, r2, #7
    1d0a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    1d0c:	230e      	movs	r3, #14
    1d0e:	18fb      	adds	r3, r7, r3
    1d10:	1dfa      	adds	r2, r7, #7
    1d12:	7812      	ldrb	r2, [r2, #0]
    1d14:	0952      	lsrs	r2, r2, #5
    1d16:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    1d18:	4b0d      	ldr	r3, [pc, #52]	; (1d50 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    1d1a:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    1d1c:	230f      	movs	r3, #15
    1d1e:	18fb      	adds	r3, r7, r3
    1d20:	781b      	ldrb	r3, [r3, #0]
    1d22:	2b00      	cmp	r3, #0
    1d24:	d10f      	bne.n	1d46 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    1d26:	230f      	movs	r3, #15
    1d28:	18fb      	adds	r3, r7, r3
    1d2a:	781b      	ldrb	r3, [r3, #0]
    1d2c:	009b      	lsls	r3, r3, #2
    1d2e:	2210      	movs	r2, #16
    1d30:	4694      	mov	ip, r2
    1d32:	44bc      	add	ip, r7
    1d34:	4463      	add	r3, ip
    1d36:	3b08      	subs	r3, #8
    1d38:	681a      	ldr	r2, [r3, #0]
    1d3a:	230e      	movs	r3, #14
    1d3c:	18fb      	adds	r3, r7, r3
    1d3e:	781b      	ldrb	r3, [r3, #0]
    1d40:	01db      	lsls	r3, r3, #7
    1d42:	18d3      	adds	r3, r2, r3
    1d44:	e000      	b.n	1d48 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    1d46:	2300      	movs	r3, #0
}
    1d48:	0018      	movs	r0, r3
    1d4a:	46bd      	mov	sp, r7
    1d4c:	b004      	add	sp, #16
    1d4e:	bd80      	pop	{r7, pc}
    1d50:	41004400 	.word	0x41004400

00001d54 <port_get_group_from_gpio_pin>:
{
    1d54:	b580      	push	{r7, lr}
    1d56:	b082      	sub	sp, #8
    1d58:	af00      	add	r7, sp, #0
    1d5a:	0002      	movs	r2, r0
    1d5c:	1dfb      	adds	r3, r7, #7
    1d5e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    1d60:	1dfb      	adds	r3, r7, #7
    1d62:	781b      	ldrb	r3, [r3, #0]
    1d64:	0018      	movs	r0, r3
    1d66:	4b03      	ldr	r3, [pc, #12]	; (1d74 <port_get_group_from_gpio_pin+0x20>)
    1d68:	4798      	blx	r3
    1d6a:	0003      	movs	r3, r0
}
    1d6c:	0018      	movs	r0, r3
    1d6e:	46bd      	mov	sp, r7
    1d70:	b002      	add	sp, #8
    1d72:	bd80      	pop	{r7, pc}
    1d74:	00001cf5 	.word	0x00001cf5

00001d78 <port_get_config_defaults>:
{
    1d78:	b580      	push	{r7, lr}
    1d7a:	b082      	sub	sp, #8
    1d7c:	af00      	add	r7, sp, #0
    1d7e:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
    1d80:	687b      	ldr	r3, [r7, #4]
    1d82:	2200      	movs	r2, #0
    1d84:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    1d86:	687b      	ldr	r3, [r7, #4]
    1d88:	2201      	movs	r2, #1
    1d8a:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    1d8c:	687b      	ldr	r3, [r7, #4]
    1d8e:	2200      	movs	r2, #0
    1d90:	709a      	strb	r2, [r3, #2]
}
    1d92:	46c0      	nop			; (mov r8, r8)
    1d94:	46bd      	mov	sp, r7
    1d96:	b002      	add	sp, #8
    1d98:	bd80      	pop	{r7, pc}
	...

00001d9c <port_pin_set_output_level>:
{
    1d9c:	b580      	push	{r7, lr}
    1d9e:	b084      	sub	sp, #16
    1da0:	af00      	add	r7, sp, #0
    1da2:	0002      	movs	r2, r0
    1da4:	1dfb      	adds	r3, r7, #7
    1da6:	701a      	strb	r2, [r3, #0]
    1da8:	1dbb      	adds	r3, r7, #6
    1daa:	1c0a      	adds	r2, r1, #0
    1dac:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    1dae:	1dfb      	adds	r3, r7, #7
    1db0:	781b      	ldrb	r3, [r3, #0]
    1db2:	0018      	movs	r0, r3
    1db4:	4b0d      	ldr	r3, [pc, #52]	; (1dec <port_pin_set_output_level+0x50>)
    1db6:	4798      	blx	r3
    1db8:	0003      	movs	r3, r0
    1dba:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1dbc:	1dfb      	adds	r3, r7, #7
    1dbe:	781b      	ldrb	r3, [r3, #0]
    1dc0:	221f      	movs	r2, #31
    1dc2:	4013      	ands	r3, r2
    1dc4:	2201      	movs	r2, #1
    1dc6:	409a      	lsls	r2, r3
    1dc8:	0013      	movs	r3, r2
    1dca:	60bb      	str	r3, [r7, #8]
	if (level) {
    1dcc:	1dbb      	adds	r3, r7, #6
    1dce:	781b      	ldrb	r3, [r3, #0]
    1dd0:	2b00      	cmp	r3, #0
    1dd2:	d003      	beq.n	1ddc <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    1dd4:	68fb      	ldr	r3, [r7, #12]
    1dd6:	68ba      	ldr	r2, [r7, #8]
    1dd8:	619a      	str	r2, [r3, #24]
}
    1dda:	e002      	b.n	1de2 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    1ddc:	68fb      	ldr	r3, [r7, #12]
    1dde:	68ba      	ldr	r2, [r7, #8]
    1de0:	615a      	str	r2, [r3, #20]
}
    1de2:	46c0      	nop			; (mov r8, r8)
    1de4:	46bd      	mov	sp, r7
    1de6:	b004      	add	sp, #16
    1de8:	bd80      	pop	{r7, pc}
    1dea:	46c0      	nop			; (mov r8, r8)
    1dec:	00001d55 	.word	0x00001d55

00001df0 <nrf24l01_spi_write>:
 */ 

#include "nrf24l01.h"

uint32_t nrf24l01_spi_write(uint8_t *data,uint16_t length)
{
    1df0:	b580      	push	{r7, lr}
    1df2:	b084      	sub	sp, #16
    1df4:	af00      	add	r7, sp, #0
    1df6:	6078      	str	r0, [r7, #4]
    1df8:	000a      	movs	r2, r1
    1dfa:	1cbb      	adds	r3, r7, #2
    1dfc:	801a      	strh	r2, [r3, #0]
	spi_select_slave(&spi_master_instance,&nrf24l01_slave_instance,true);
    1dfe:	490d      	ldr	r1, [pc, #52]	; (1e34 <nrf24l01_spi_write+0x44>)
    1e00:	4b0d      	ldr	r3, [pc, #52]	; (1e38 <nrf24l01_spi_write+0x48>)
    1e02:	2201      	movs	r2, #1
    1e04:	0018      	movs	r0, r3
    1e06:	4b0d      	ldr	r3, [pc, #52]	; (1e3c <nrf24l01_spi_write+0x4c>)
    1e08:	4798      	blx	r3
	uint32_t status_code = (uint32_t) spi_write_buffer_wait(&spi_master_instance,data,length);
    1e0a:	1cbb      	adds	r3, r7, #2
    1e0c:	881a      	ldrh	r2, [r3, #0]
    1e0e:	6879      	ldr	r1, [r7, #4]
    1e10:	4b09      	ldr	r3, [pc, #36]	; (1e38 <nrf24l01_spi_write+0x48>)
    1e12:	0018      	movs	r0, r3
    1e14:	4b0a      	ldr	r3, [pc, #40]	; (1e40 <nrf24l01_spi_write+0x50>)
    1e16:	4798      	blx	r3
    1e18:	0003      	movs	r3, r0
    1e1a:	60fb      	str	r3, [r7, #12]
	spi_select_slave(&spi_master_instance,&nrf24l01_slave_instance,false);
    1e1c:	4905      	ldr	r1, [pc, #20]	; (1e34 <nrf24l01_spi_write+0x44>)
    1e1e:	4b06      	ldr	r3, [pc, #24]	; (1e38 <nrf24l01_spi_write+0x48>)
    1e20:	2200      	movs	r2, #0
    1e22:	0018      	movs	r0, r3
    1e24:	4b05      	ldr	r3, [pc, #20]	; (1e3c <nrf24l01_spi_write+0x4c>)
    1e26:	4798      	blx	r3
	return status_code;
    1e28:	68fb      	ldr	r3, [r7, #12]
}
    1e2a:	0018      	movs	r0, r3
    1e2c:	46bd      	mov	sp, r7
    1e2e:	b004      	add	sp, #16
    1e30:	bd80      	pop	{r7, pc}
    1e32:	46c0      	nop			; (mov r8, r8)
    1e34:	2000015c 	.word	0x2000015c
    1e38:	20000168 	.word	0x20000168
    1e3c:	000033c9 	.word	0x000033c9
    1e40:	000034b9 	.word	0x000034b9

00001e44 <nrf24l01_spi_write_single>:

uint32_t nrf24l01_spi_write_single(uint8_t *data)
{
    1e44:	b580      	push	{r7, lr}
    1e46:	b082      	sub	sp, #8
    1e48:	af00      	add	r7, sp, #0
    1e4a:	6078      	str	r0, [r7, #4]
	return nrf24l01_spi_write(data,1);
    1e4c:	687b      	ldr	r3, [r7, #4]
    1e4e:	2101      	movs	r1, #1
    1e50:	0018      	movs	r0, r3
    1e52:	4b03      	ldr	r3, [pc, #12]	; (1e60 <nrf24l01_spi_write_single+0x1c>)
    1e54:	4798      	blx	r3
    1e56:	0003      	movs	r3, r0
}
    1e58:	0018      	movs	r0, r3
    1e5a:	46bd      	mov	sp, r7
    1e5c:	b002      	add	sp, #8
    1e5e:	bd80      	pop	{r7, pc}
    1e60:	00001df1 	.word	0x00001df1

00001e64 <nrf24l01_cmd2>:

void nrf24l01_cmd2(uint32_t cmd, uint8_t length, uint8_t data_input)
{
    1e64:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e66:	b08b      	sub	sp, #44	; 0x2c
    1e68:	af00      	add	r7, sp, #0
    1e6a:	61f8      	str	r0, [r7, #28]
    1e6c:	0010      	movs	r0, r2
    1e6e:	221b      	movs	r2, #27
    1e70:	18ba      	adds	r2, r7, r2
    1e72:	7011      	strb	r1, [r2, #0]
    1e74:	221a      	movs	r2, #26
    1e76:	18ba      	adds	r2, r7, r2
    1e78:	1c01      	adds	r1, r0, #0
    1e7a:	7011      	strb	r1, [r2, #0]
    1e7c:	466a      	mov	r2, sp
    1e7e:	607a      	str	r2, [r7, #4]
	uint8_t data[length];
    1e80:	221b      	movs	r2, #27
    1e82:	18ba      	adds	r2, r7, r2
    1e84:	7812      	ldrb	r2, [r2, #0]
    1e86:	0011      	movs	r1, r2
    1e88:	3901      	subs	r1, #1
    1e8a:	6279      	str	r1, [r7, #36]	; 0x24
    1e8c:	613a      	str	r2, [r7, #16]
    1e8e:	2100      	movs	r1, #0
    1e90:	6179      	str	r1, [r7, #20]
    1e92:	6939      	ldr	r1, [r7, #16]
    1e94:	0f49      	lsrs	r1, r1, #29
    1e96:	6978      	ldr	r0, [r7, #20]
    1e98:	00c6      	lsls	r6, r0, #3
    1e9a:	430e      	orrs	r6, r1
    1e9c:	6939      	ldr	r1, [r7, #16]
    1e9e:	00cd      	lsls	r5, r1, #3
    1ea0:	60ba      	str	r2, [r7, #8]
    1ea2:	2100      	movs	r1, #0
    1ea4:	60f9      	str	r1, [r7, #12]
    1ea6:	68bd      	ldr	r5, [r7, #8]
    1ea8:	68fe      	ldr	r6, [r7, #12]
    1eaa:	0029      	movs	r1, r5
    1eac:	0f49      	lsrs	r1, r1, #29
    1eae:	0030      	movs	r0, r6
    1eb0:	00c4      	lsls	r4, r0, #3
    1eb2:	430c      	orrs	r4, r1
    1eb4:	0029      	movs	r1, r5
    1eb6:	00cb      	lsls	r3, r1, #3
    1eb8:	0013      	movs	r3, r2
    1eba:	3307      	adds	r3, #7
    1ebc:	08db      	lsrs	r3, r3, #3
    1ebe:	00db      	lsls	r3, r3, #3
    1ec0:	4669      	mov	r1, sp
    1ec2:	1acb      	subs	r3, r1, r3
    1ec4:	469d      	mov	sp, r3
    1ec6:	466b      	mov	r3, sp
    1ec8:	3300      	adds	r3, #0
    1eca:	623b      	str	r3, [r7, #32]
	data[0] = (uint8_t) cmd;
    1ecc:	69fb      	ldr	r3, [r7, #28]
    1ece:	b2da      	uxtb	r2, r3
    1ed0:	6a3b      	ldr	r3, [r7, #32]
    1ed2:	701a      	strb	r2, [r3, #0]
	data[1] = data_input;
    1ed4:	6a3b      	ldr	r3, [r7, #32]
    1ed6:	221a      	movs	r2, #26
    1ed8:	18ba      	adds	r2, r7, r2
    1eda:	7812      	ldrb	r2, [r2, #0]
    1edc:	705a      	strb	r2, [r3, #1]
	nrf24l01_spi_write(&data,2);
    1ede:	6a3b      	ldr	r3, [r7, #32]
    1ee0:	2102      	movs	r1, #2
    1ee2:	0018      	movs	r0, r3
    1ee4:	4b03      	ldr	r3, [pc, #12]	; (1ef4 <nrf24l01_cmd2+0x90>)
    1ee6:	4798      	blx	r3
    1ee8:	687b      	ldr	r3, [r7, #4]
    1eea:	469d      	mov	sp, r3
}
    1eec:	46c0      	nop			; (mov r8, r8)
    1eee:	46bd      	mov	sp, r7
    1ef0:	b00b      	add	sp, #44	; 0x2c
    1ef2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1ef4:	00001df1 	.word	0x00001df1

00001ef8 <nrf24l01_cmd>:

void nrf24l01_cmd(uint32_t cmd, uint8_t data_input)
{
    1ef8:	b580      	push	{r7, lr}
    1efa:	b082      	sub	sp, #8
    1efc:	af00      	add	r7, sp, #0
    1efe:	6078      	str	r0, [r7, #4]
    1f00:	000a      	movs	r2, r1
    1f02:	1cfb      	adds	r3, r7, #3
    1f04:	701a      	strb	r2, [r3, #0]
	nrf24l01_cmd2(cmd,2,data_input);	
    1f06:	1cfb      	adds	r3, r7, #3
    1f08:	781a      	ldrb	r2, [r3, #0]
    1f0a:	687b      	ldr	r3, [r7, #4]
    1f0c:	2102      	movs	r1, #2
    1f0e:	0018      	movs	r0, r3
    1f10:	4b02      	ldr	r3, [pc, #8]	; (1f1c <nrf24l01_cmd+0x24>)
    1f12:	4798      	blx	r3
}
    1f14:	46c0      	nop			; (mov r8, r8)
    1f16:	46bd      	mov	sp, r7
    1f18:	b002      	add	sp, #8
    1f1a:	bd80      	pop	{r7, pc}
    1f1c:	00001e65 	.word	0x00001e65

00001f20 <nrf24l01_spi_read>:

void nrf24l01_spi_read(uint8_t *data,uint16_t length,uint16_t reg)
{
    1f20:	b5b0      	push	{r4, r5, r7, lr}
    1f22:	b084      	sub	sp, #16
    1f24:	af00      	add	r7, sp, #0
    1f26:	6078      	str	r0, [r7, #4]
    1f28:	0008      	movs	r0, r1
    1f2a:	0011      	movs	r1, r2
    1f2c:	1cbb      	adds	r3, r7, #2
    1f2e:	1c02      	adds	r2, r0, #0
    1f30:	801a      	strh	r2, [r3, #0]
    1f32:	003b      	movs	r3, r7
    1f34:	1c0a      	adds	r2, r1, #0
    1f36:	801a      	strh	r2, [r3, #0]
	uint16_t dummy = reg | 0x80;
    1f38:	003b      	movs	r3, r7
    1f3a:	881a      	ldrh	r2, [r3, #0]
    1f3c:	230e      	movs	r3, #14
    1f3e:	18fb      	adds	r3, r7, r3
    1f40:	2180      	movs	r1, #128	; 0x80
    1f42:	430a      	orrs	r2, r1
    1f44:	801a      	strh	r2, [r3, #0]
	enum status_code ret_val = STATUS_OK;
    1f46:	230d      	movs	r3, #13
    1f48:	18fb      	adds	r3, r7, r3
    1f4a:	2200      	movs	r2, #0
    1f4c:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&spi_master_instance,&nrf24l01_slave_instance,true);
    1f4e:	4914      	ldr	r1, [pc, #80]	; (1fa0 <nrf24l01_spi_read+0x80>)
    1f50:	4b14      	ldr	r3, [pc, #80]	; (1fa4 <nrf24l01_spi_read+0x84>)
    1f52:	2201      	movs	r2, #1
    1f54:	0018      	movs	r0, r3
    1f56:	4b14      	ldr	r3, [pc, #80]	; (1fa8 <nrf24l01_spi_read+0x88>)
    1f58:	4798      	blx	r3
	ret_val = spi_write_buffer_wait(&spi_master_instance,&reg,1);
    1f5a:	230d      	movs	r3, #13
    1f5c:	18fc      	adds	r4, r7, r3
    1f5e:	0039      	movs	r1, r7
    1f60:	4b10      	ldr	r3, [pc, #64]	; (1fa4 <nrf24l01_spi_read+0x84>)
    1f62:	2201      	movs	r2, #1
    1f64:	0018      	movs	r0, r3
    1f66:	4b11      	ldr	r3, [pc, #68]	; (1fac <nrf24l01_spi_read+0x8c>)
    1f68:	4798      	blx	r3
    1f6a:	0003      	movs	r3, r0
    1f6c:	7023      	strb	r3, [r4, #0]
	ret_val = spi_read_buffer_wait(&spi_master_instance,data,length,dummy);
    1f6e:	230d      	movs	r3, #13
    1f70:	18fc      	adds	r4, r7, r3
    1f72:	230e      	movs	r3, #14
    1f74:	18fb      	adds	r3, r7, r3
    1f76:	881d      	ldrh	r5, [r3, #0]
    1f78:	1cbb      	adds	r3, r7, #2
    1f7a:	881a      	ldrh	r2, [r3, #0]
    1f7c:	6879      	ldr	r1, [r7, #4]
    1f7e:	4809      	ldr	r0, [pc, #36]	; (1fa4 <nrf24l01_spi_read+0x84>)
    1f80:	002b      	movs	r3, r5
    1f82:	4d0b      	ldr	r5, [pc, #44]	; (1fb0 <nrf24l01_spi_read+0x90>)
    1f84:	47a8      	blx	r5
    1f86:	0003      	movs	r3, r0
    1f88:	7023      	strb	r3, [r4, #0]
	//spi_transceive_wait(&spi_master_instance,reg,data);
	spi_select_slave(&spi_master_instance,&nrf24l01_slave_instance,false);
    1f8a:	4905      	ldr	r1, [pc, #20]	; (1fa0 <nrf24l01_spi_read+0x80>)
    1f8c:	4b05      	ldr	r3, [pc, #20]	; (1fa4 <nrf24l01_spi_read+0x84>)
    1f8e:	2200      	movs	r2, #0
    1f90:	0018      	movs	r0, r3
    1f92:	4b05      	ldr	r3, [pc, #20]	; (1fa8 <nrf24l01_spi_read+0x88>)
    1f94:	4798      	blx	r3
}
    1f96:	46c0      	nop			; (mov r8, r8)
    1f98:	46bd      	mov	sp, r7
    1f9a:	b004      	add	sp, #16
    1f9c:	bdb0      	pop	{r4, r5, r7, pc}
    1f9e:	46c0      	nop			; (mov r8, r8)
    1fa0:	2000015c 	.word	0x2000015c
    1fa4:	20000168 	.word	0x20000168
    1fa8:	000033c9 	.word	0x000033c9
    1fac:	000034b9 	.word	0x000034b9
    1fb0:	0000321d 	.word	0x0000321d

00001fb4 <nrf24l01_status>:

void nrf24l01_status(void)
{
    1fb4:	b580      	push	{r7, lr}
    1fb6:	b08a      	sub	sp, #40	; 0x28
    1fb8:	af00      	add	r7, sp, #0
	char buf[32];
	uint8_t retval = 0;
    1fba:	1dfb      	adds	r3, r7, #7
    1fbc:	2200      	movs	r2, #0
    1fbe:	701a      	strb	r2, [r3, #0]
	nrf24l01_spi_read(&retval,1,NRF_CONFIG_REG);
    1fc0:	1dfb      	adds	r3, r7, #7
    1fc2:	2200      	movs	r2, #0
    1fc4:	2101      	movs	r1, #1
    1fc6:	0018      	movs	r0, r3
    1fc8:	4b63      	ldr	r3, [pc, #396]	; (2158 <STACK_SIZE+0x158>)
    1fca:	4798      	blx	r3
	sprintf(buf,"NRF_CONFIG_REG:\t\t%02x\r\n",retval);
    1fcc:	1dfb      	adds	r3, r7, #7
    1fce:	781b      	ldrb	r3, [r3, #0]
    1fd0:	001a      	movs	r2, r3
    1fd2:	4962      	ldr	r1, [pc, #392]	; (215c <STACK_SIZE+0x15c>)
    1fd4:	2308      	movs	r3, #8
    1fd6:	18fb      	adds	r3, r7, r3
    1fd8:	0018      	movs	r0, r3
    1fda:	4b61      	ldr	r3, [pc, #388]	; (2160 <STACK_SIZE+0x160>)
    1fdc:	4798      	blx	r3
	uart_write(buf);
    1fde:	2308      	movs	r3, #8
    1fe0:	18fb      	adds	r3, r7, r3
    1fe2:	0018      	movs	r0, r3
    1fe4:	4b5f      	ldr	r3, [pc, #380]	; (2164 <STACK_SIZE+0x164>)
    1fe6:	4798      	blx	r3
	
	nrf24l01_spi_read(&retval,1,NRF_EN_AA_REG);
    1fe8:	1dfb      	adds	r3, r7, #7
    1fea:	2201      	movs	r2, #1
    1fec:	2101      	movs	r1, #1
    1fee:	0018      	movs	r0, r3
    1ff0:	4b59      	ldr	r3, [pc, #356]	; (2158 <STACK_SIZE+0x158>)
    1ff2:	4798      	blx	r3
	sprintf(buf,"NRF_EN_AA_REG:\t\t%02x\r\n",retval);
    1ff4:	1dfb      	adds	r3, r7, #7
    1ff6:	781b      	ldrb	r3, [r3, #0]
    1ff8:	001a      	movs	r2, r3
    1ffa:	495b      	ldr	r1, [pc, #364]	; (2168 <STACK_SIZE+0x168>)
    1ffc:	2308      	movs	r3, #8
    1ffe:	18fb      	adds	r3, r7, r3
    2000:	0018      	movs	r0, r3
    2002:	4b57      	ldr	r3, [pc, #348]	; (2160 <STACK_SIZE+0x160>)
    2004:	4798      	blx	r3
	uart_write(buf);
    2006:	2308      	movs	r3, #8
    2008:	18fb      	adds	r3, r7, r3
    200a:	0018      	movs	r0, r3
    200c:	4b55      	ldr	r3, [pc, #340]	; (2164 <STACK_SIZE+0x164>)
    200e:	4798      	blx	r3
	
	nrf24l01_spi_read(&retval,1,NRF_EN_RXADDR_REG);
    2010:	1dfb      	adds	r3, r7, #7
    2012:	2202      	movs	r2, #2
    2014:	2101      	movs	r1, #1
    2016:	0018      	movs	r0, r3
    2018:	4b4f      	ldr	r3, [pc, #316]	; (2158 <STACK_SIZE+0x158>)
    201a:	4798      	blx	r3
	sprintf(buf,"NRF_EN_RXADDR_REG:\t%02x\r\n",retval);
    201c:	1dfb      	adds	r3, r7, #7
    201e:	781b      	ldrb	r3, [r3, #0]
    2020:	001a      	movs	r2, r3
    2022:	4952      	ldr	r1, [pc, #328]	; (216c <STACK_SIZE+0x16c>)
    2024:	2308      	movs	r3, #8
    2026:	18fb      	adds	r3, r7, r3
    2028:	0018      	movs	r0, r3
    202a:	4b4d      	ldr	r3, [pc, #308]	; (2160 <STACK_SIZE+0x160>)
    202c:	4798      	blx	r3
	uart_write(buf);
    202e:	2308      	movs	r3, #8
    2030:	18fb      	adds	r3, r7, r3
    2032:	0018      	movs	r0, r3
    2034:	4b4b      	ldr	r3, [pc, #300]	; (2164 <STACK_SIZE+0x164>)
    2036:	4798      	blx	r3
	
	nrf24l01_spi_read(&retval,1,NRF_SETUP_AW_REG);
    2038:	1dfb      	adds	r3, r7, #7
    203a:	2203      	movs	r2, #3
    203c:	2101      	movs	r1, #1
    203e:	0018      	movs	r0, r3
    2040:	4b45      	ldr	r3, [pc, #276]	; (2158 <STACK_SIZE+0x158>)
    2042:	4798      	blx	r3
	sprintf(buf,"NRF_SETUP_AW_REG:\t%02x\r\n",retval);
    2044:	1dfb      	adds	r3, r7, #7
    2046:	781b      	ldrb	r3, [r3, #0]
    2048:	001a      	movs	r2, r3
    204a:	4949      	ldr	r1, [pc, #292]	; (2170 <STACK_SIZE+0x170>)
    204c:	2308      	movs	r3, #8
    204e:	18fb      	adds	r3, r7, r3
    2050:	0018      	movs	r0, r3
    2052:	4b43      	ldr	r3, [pc, #268]	; (2160 <STACK_SIZE+0x160>)
    2054:	4798      	blx	r3
	uart_write(buf);
    2056:	2308      	movs	r3, #8
    2058:	18fb      	adds	r3, r7, r3
    205a:	0018      	movs	r0, r3
    205c:	4b41      	ldr	r3, [pc, #260]	; (2164 <STACK_SIZE+0x164>)
    205e:	4798      	blx	r3
	
	nrf24l01_spi_read(&retval,1,NRF_SETUP_RETR_REG);
    2060:	1dfb      	adds	r3, r7, #7
    2062:	2204      	movs	r2, #4
    2064:	2101      	movs	r1, #1
    2066:	0018      	movs	r0, r3
    2068:	4b3b      	ldr	r3, [pc, #236]	; (2158 <STACK_SIZE+0x158>)
    206a:	4798      	blx	r3
	sprintf(buf,"NRF_SETUP_RETR_REG:\t%02x\r\n",retval);
    206c:	1dfb      	adds	r3, r7, #7
    206e:	781b      	ldrb	r3, [r3, #0]
    2070:	001a      	movs	r2, r3
    2072:	4940      	ldr	r1, [pc, #256]	; (2174 <STACK_SIZE+0x174>)
    2074:	2308      	movs	r3, #8
    2076:	18fb      	adds	r3, r7, r3
    2078:	0018      	movs	r0, r3
    207a:	4b39      	ldr	r3, [pc, #228]	; (2160 <STACK_SIZE+0x160>)
    207c:	4798      	blx	r3
	uart_write(buf);
    207e:	2308      	movs	r3, #8
    2080:	18fb      	adds	r3, r7, r3
    2082:	0018      	movs	r0, r3
    2084:	4b37      	ldr	r3, [pc, #220]	; (2164 <STACK_SIZE+0x164>)
    2086:	4798      	blx	r3
	
	nrf24l01_spi_read(&retval,1,NRF_RF_CH_REG);
    2088:	1dfb      	adds	r3, r7, #7
    208a:	2205      	movs	r2, #5
    208c:	2101      	movs	r1, #1
    208e:	0018      	movs	r0, r3
    2090:	4b31      	ldr	r3, [pc, #196]	; (2158 <STACK_SIZE+0x158>)
    2092:	4798      	blx	r3
	sprintf(buf,"NRF_RF_CH_REG:\t\t%02x\r\n",retval);
    2094:	1dfb      	adds	r3, r7, #7
    2096:	781b      	ldrb	r3, [r3, #0]
    2098:	001a      	movs	r2, r3
    209a:	4937      	ldr	r1, [pc, #220]	; (2178 <STACK_SIZE+0x178>)
    209c:	2308      	movs	r3, #8
    209e:	18fb      	adds	r3, r7, r3
    20a0:	0018      	movs	r0, r3
    20a2:	4b2f      	ldr	r3, [pc, #188]	; (2160 <STACK_SIZE+0x160>)
    20a4:	4798      	blx	r3
	uart_write(buf);
    20a6:	2308      	movs	r3, #8
    20a8:	18fb      	adds	r3, r7, r3
    20aa:	0018      	movs	r0, r3
    20ac:	4b2d      	ldr	r3, [pc, #180]	; (2164 <STACK_SIZE+0x164>)
    20ae:	4798      	blx	r3
	
	nrf24l01_spi_read(&retval,1,NRF_RF_SETUP_REG);
    20b0:	1dfb      	adds	r3, r7, #7
    20b2:	2206      	movs	r2, #6
    20b4:	2101      	movs	r1, #1
    20b6:	0018      	movs	r0, r3
    20b8:	4b27      	ldr	r3, [pc, #156]	; (2158 <STACK_SIZE+0x158>)
    20ba:	4798      	blx	r3
	sprintf(buf,"NRF_RF_SETUP_REG:\t%02x\r\n",retval);
    20bc:	1dfb      	adds	r3, r7, #7
    20be:	781b      	ldrb	r3, [r3, #0]
    20c0:	001a      	movs	r2, r3
    20c2:	492e      	ldr	r1, [pc, #184]	; (217c <STACK_SIZE+0x17c>)
    20c4:	2308      	movs	r3, #8
    20c6:	18fb      	adds	r3, r7, r3
    20c8:	0018      	movs	r0, r3
    20ca:	4b25      	ldr	r3, [pc, #148]	; (2160 <STACK_SIZE+0x160>)
    20cc:	4798      	blx	r3
	uart_write(buf);
    20ce:	2308      	movs	r3, #8
    20d0:	18fb      	adds	r3, r7, r3
    20d2:	0018      	movs	r0, r3
    20d4:	4b23      	ldr	r3, [pc, #140]	; (2164 <STACK_SIZE+0x164>)
    20d6:	4798      	blx	r3
	
	nrf24l01_spi_read(&retval,1,NRF_STATUS_REG);
    20d8:	1dfb      	adds	r3, r7, #7
    20da:	2207      	movs	r2, #7
    20dc:	2101      	movs	r1, #1
    20de:	0018      	movs	r0, r3
    20e0:	4b1d      	ldr	r3, [pc, #116]	; (2158 <STACK_SIZE+0x158>)
    20e2:	4798      	blx	r3
	sprintf(buf,"NRF_STATUS_REG:\t\t%02x\r\n",retval);
    20e4:	1dfb      	adds	r3, r7, #7
    20e6:	781b      	ldrb	r3, [r3, #0]
    20e8:	001a      	movs	r2, r3
    20ea:	4925      	ldr	r1, [pc, #148]	; (2180 <STACK_SIZE+0x180>)
    20ec:	2308      	movs	r3, #8
    20ee:	18fb      	adds	r3, r7, r3
    20f0:	0018      	movs	r0, r3
    20f2:	4b1b      	ldr	r3, [pc, #108]	; (2160 <STACK_SIZE+0x160>)
    20f4:	4798      	blx	r3
	uart_write(buf);
    20f6:	2308      	movs	r3, #8
    20f8:	18fb      	adds	r3, r7, r3
    20fa:	0018      	movs	r0, r3
    20fc:	4b19      	ldr	r3, [pc, #100]	; (2164 <STACK_SIZE+0x164>)
    20fe:	4798      	blx	r3
	
	nrf24l01_spi_read(&retval,1,NRF_FEATURE_REG);
    2100:	1dfb      	adds	r3, r7, #7
    2102:	221d      	movs	r2, #29
    2104:	2101      	movs	r1, #1
    2106:	0018      	movs	r0, r3
    2108:	4b13      	ldr	r3, [pc, #76]	; (2158 <STACK_SIZE+0x158>)
    210a:	4798      	blx	r3
	sprintf(buf,"NRF_FEATURE_REG:\t%02x\r\n",retval);
    210c:	1dfb      	adds	r3, r7, #7
    210e:	781b      	ldrb	r3, [r3, #0]
    2110:	001a      	movs	r2, r3
    2112:	491c      	ldr	r1, [pc, #112]	; (2184 <STACK_SIZE+0x184>)
    2114:	2308      	movs	r3, #8
    2116:	18fb      	adds	r3, r7, r3
    2118:	0018      	movs	r0, r3
    211a:	4b11      	ldr	r3, [pc, #68]	; (2160 <STACK_SIZE+0x160>)
    211c:	4798      	blx	r3
	uart_write(buf);
    211e:	2308      	movs	r3, #8
    2120:	18fb      	adds	r3, r7, r3
    2122:	0018      	movs	r0, r3
    2124:	4b0f      	ldr	r3, [pc, #60]	; (2164 <STACK_SIZE+0x164>)
    2126:	4798      	blx	r3
	
	nrf24l01_spi_read(&retval,1,NRF_DYNPD_REG);
    2128:	1dfb      	adds	r3, r7, #7
    212a:	221c      	movs	r2, #28
    212c:	2101      	movs	r1, #1
    212e:	0018      	movs	r0, r3
    2130:	4b09      	ldr	r3, [pc, #36]	; (2158 <STACK_SIZE+0x158>)
    2132:	4798      	blx	r3
	sprintf(buf,"NRF_DYNPD_REG:\t\t%02x\r\n",retval);
    2134:	1dfb      	adds	r3, r7, #7
    2136:	781b      	ldrb	r3, [r3, #0]
    2138:	001a      	movs	r2, r3
    213a:	4913      	ldr	r1, [pc, #76]	; (2188 <STACK_SIZE+0x188>)
    213c:	2308      	movs	r3, #8
    213e:	18fb      	adds	r3, r7, r3
    2140:	0018      	movs	r0, r3
    2142:	4b07      	ldr	r3, [pc, #28]	; (2160 <STACK_SIZE+0x160>)
    2144:	4798      	blx	r3
	uart_write(buf);
    2146:	2308      	movs	r3, #8
    2148:	18fb      	adds	r3, r7, r3
    214a:	0018      	movs	r0, r3
    214c:	4b05      	ldr	r3, [pc, #20]	; (2164 <STACK_SIZE+0x164>)
    214e:	4798      	blx	r3
}
    2150:	46c0      	nop			; (mov r8, r8)
    2152:	46bd      	mov	sp, r7
    2154:	b00a      	add	sp, #40	; 0x28
    2156:	bd80      	pop	{r7, pc}
    2158:	00001f21 	.word	0x00001f21
    215c:	0000892c 	.word	0x0000892c
    2160:	000080d1 	.word	0x000080d1
    2164:	00000b79 	.word	0x00000b79
    2168:	00008944 	.word	0x00008944
    216c:	0000895c 	.word	0x0000895c
    2170:	00008978 	.word	0x00008978
    2174:	00008994 	.word	0x00008994
    2178:	000089b0 	.word	0x000089b0
    217c:	000089c8 	.word	0x000089c8
    2180:	000089e4 	.word	0x000089e4
    2184:	000089fc 	.word	0x000089fc
    2188:	00008a14 	.word	0x00008a14

0000218c <nrf24l01_init>:

void nrf24l01_init(void)
{
    218c:	b590      	push	{r4, r7, lr}
    218e:	b08f      	sub	sp, #60	; 0x3c
    2190:	af00      	add	r7, sp, #0

	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
    2192:	2334      	movs	r3, #52	; 0x34
    2194:	18fb      	adds	r3, r7, r3
    2196:	0018      	movs	r0, r3
    2198:	4b54      	ldr	r3, [pc, #336]	; (22ec <nrf24l01_init+0x160>)
    219a:	4798      	blx	r3
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    219c:	2334      	movs	r3, #52	; 0x34
    219e:	18fb      	adds	r3, r7, r3
    21a0:	2201      	movs	r2, #1
    21a2:	701a      	strb	r2, [r3, #0]
	//config_port_pin.input_pull = PORT_PIN_PULL_DOWN;
	port_pin_set_config(NRF24L01_CE,&config_port_pin);
    21a4:	2334      	movs	r3, #52	; 0x34
    21a6:	18fb      	adds	r3, r7, r3
    21a8:	0019      	movs	r1, r3
    21aa:	200a      	movs	r0, #10
    21ac:	4b50      	ldr	r3, [pc, #320]	; (22f0 <nrf24l01_init+0x164>)
    21ae:	4798      	blx	r3
	port_pin_set_config(NRF_VCC_EN, &config_port_pin);
    21b0:	2334      	movs	r3, #52	; 0x34
    21b2:	18fb      	adds	r3, r7, r3
    21b4:	0019      	movs	r1, r3
    21b6:	2011      	movs	r0, #17
    21b8:	4b4d      	ldr	r3, [pc, #308]	; (22f0 <nrf24l01_init+0x164>)
    21ba:	4798      	blx	r3
	port_pin_set_output_level(NRF_VCC_EN,true);
    21bc:	2101      	movs	r1, #1
    21be:	2011      	movs	r0, #17
    21c0:	4b4c      	ldr	r3, [pc, #304]	; (22f4 <nrf24l01_init+0x168>)
    21c2:	4798      	blx	r3
	port_pin_set_output_level(NRF24L01_CE,false);
    21c4:	2100      	movs	r1, #0
    21c6:	200a      	movs	r0, #10
    21c8:	4b4a      	ldr	r3, [pc, #296]	; (22f4 <nrf24l01_init+0x168>)
    21ca:	4798      	blx	r3
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    21cc:	2334      	movs	r3, #52	; 0x34
    21ce:	18fb      	adds	r3, r7, r3
    21d0:	2200      	movs	r2, #0
    21d2:	701a      	strb	r2, [r3, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_NONE;
    21d4:	2334      	movs	r3, #52	; 0x34
    21d6:	18fb      	adds	r3, r7, r3
    21d8:	2200      	movs	r2, #0
    21da:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(NRF24L01_IRQ,&config_port_pin);
    21dc:	2334      	movs	r3, #52	; 0x34
    21de:	18fb      	adds	r3, r7, r3
    21e0:	0019      	movs	r1, r3
    21e2:	200d      	movs	r0, #13
    21e4:	4b42      	ldr	r3, [pc, #264]	; (22f0 <nrf24l01_init+0x164>)
    21e6:	4798      	blx	r3
	

	delay_ms(10);
    21e8:	200a      	movs	r0, #10
    21ea:	4b43      	ldr	r3, [pc, #268]	; (22f8 <nrf24l01_init+0x16c>)
    21ec:	4798      	blx	r3
	char config = 0;
    21ee:	2337      	movs	r3, #55	; 0x37
    21f0:	18fb      	adds	r3, r7, r3
    21f2:	2200      	movs	r2, #0
    21f4:	701a      	strb	r2, [r3, #0]
	char adr[5] = {0xc2,0xc2,0xc2,0xc2,0xc2};//{0x2A,0x2A,0x2A,0x2A,0x0};//{0x42,0x42,0x42,0x42,0x00};
    21f6:	232c      	movs	r3, #44	; 0x2c
    21f8:	18fb      	adds	r3, r7, r3
    21fa:	4a40      	ldr	r2, [pc, #256]	; (22fc <nrf24l01_init+0x170>)
    21fc:	6811      	ldr	r1, [r2, #0]
    21fe:	6019      	str	r1, [r3, #0]
    2200:	7912      	ldrb	r2, [r2, #4]
    2202:	711a      	strb	r2, [r3, #4]
	char TX_ADDR[5] = {0xe7,0xe7,0xe7,0xe7,0xe7};//{0xc2,0xc2,0xc2,0xc2,0xc2};
    2204:	2324      	movs	r3, #36	; 0x24
    2206:	18fb      	adds	r3, r7, r3
    2208:	4a3d      	ldr	r2, [pc, #244]	; (2300 <nrf24l01_init+0x174>)
    220a:	6811      	ldr	r1, [r2, #0]
    220c:	6019      	str	r1, [r3, #0]
    220e:	7912      	ldrb	r2, [r2, #4]
    2210:	711a      	strb	r2, [r3, #4]
	char RX_ADDR[5] = {0xc2,0xc2,0xc2,0xc2,0xc2};//;
    2212:	231c      	movs	r3, #28
    2214:	18fb      	adds	r3, r7, r3
    2216:	4a39      	ldr	r2, [pc, #228]	; (22fc <nrf24l01_init+0x170>)
    2218:	6811      	ldr	r1, [r2, #0]
    221a:	6019      	str	r1, [r3, #0]
    221c:	7912      	ldrb	r2, [r2, #4]
    221e:	711a      	strb	r2, [r3, #4]
		
	
	
	char hello_world[] = "Hello World! Prinsesse";
    2220:	1d3b      	adds	r3, r7, #4
    2222:	4a38      	ldr	r2, [pc, #224]	; (2304 <nrf24l01_init+0x178>)
    2224:	ca13      	ldmia	r2!, {r0, r1, r4}
    2226:	c313      	stmia	r3!, {r0, r1, r4}
    2228:	ca03      	ldmia	r2!, {r0, r1}
    222a:	c303      	stmia	r3!, {r0, r1}
    222c:	8811      	ldrh	r1, [r2, #0]
    222e:	8019      	strh	r1, [r3, #0]
    2230:	7892      	ldrb	r2, [r2, #2]
    2232:	709a      	strb	r2, [r3, #2]
	
	
	config = 0x0E;//NRF_CONFIG_PWR_UP | NRF_CONFIG_EN_CRC;
    2234:	2337      	movs	r3, #55	; 0x37
    2236:	18fb      	adds	r3, r7, r3
    2238:	220e      	movs	r2, #14
    223a:	701a      	strb	r2, [r3, #0]
	nrf24l01_cmd(NRF_W_REGISTER(NRF_CONFIG_REG),config);
    223c:	2337      	movs	r3, #55	; 0x37
    223e:	18fb      	adds	r3, r7, r3
    2240:	781b      	ldrb	r3, [r3, #0]
    2242:	0019      	movs	r1, r3
    2244:	2020      	movs	r0, #32
    2246:	4b30      	ldr	r3, [pc, #192]	; (2308 <nrf24l01_init+0x17c>)
    2248:	4798      	blx	r3
	
	config = 0x60;//0x4D;
    224a:	2337      	movs	r3, #55	; 0x37
    224c:	18fb      	adds	r3, r7, r3
    224e:	2260      	movs	r2, #96	; 0x60
    2250:	701a      	strb	r2, [r3, #0]
	nrf24l01_cmd(NRF_W_REGISTER(NRF_RF_CH_REG),config);
    2252:	2337      	movs	r3, #55	; 0x37
    2254:	18fb      	adds	r3, r7, r3
    2256:	781b      	ldrb	r3, [r3, #0]
    2258:	0019      	movs	r1, r3
    225a:	2025      	movs	r0, #37	; 0x25
    225c:	4b2a      	ldr	r3, [pc, #168]	; (2308 <nrf24l01_init+0x17c>)
    225e:	4798      	blx	r3
	
	config = 0x3f;//NRF_EN_AA_ENAA_P1;
    2260:	2337      	movs	r3, #55	; 0x37
    2262:	18fb      	adds	r3, r7, r3
    2264:	223f      	movs	r2, #63	; 0x3f
    2266:	701a      	strb	r2, [r3, #0]
	nrf24l01_cmd(NRF_W_REGISTER(NRF_EN_AA_REG),config);
    2268:	2337      	movs	r3, #55	; 0x37
    226a:	18fb      	adds	r3, r7, r3
    226c:	781b      	ldrb	r3, [r3, #0]
    226e:	0019      	movs	r1, r3
    2270:	2021      	movs	r0, #33	; 0x21
    2272:	4b25      	ldr	r3, [pc, #148]	; (2308 <nrf24l01_init+0x17c>)
    2274:	4798      	blx	r3
	config = NRF_SETUP_AW_4BYTES;
    2276:	2337      	movs	r3, #55	; 0x37
    2278:	18fb      	adds	r3, r7, r3
    227a:	2202      	movs	r2, #2
    227c:	701a      	strb	r2, [r3, #0]
	nrf24l01_cmd(NRF_W_REGISTER(NRF_SETUP_AW_REG),config);
    227e:	2337      	movs	r3, #55	; 0x37
    2280:	18fb      	adds	r3, r7, r3
    2282:	781b      	ldrb	r3, [r3, #0]
    2284:	0019      	movs	r1, r3
    2286:	2023      	movs	r0, #35	; 0x23
    2288:	4b1f      	ldr	r3, [pc, #124]	; (2308 <nrf24l01_init+0x17c>)
    228a:	4798      	blx	r3
	config = 0x06;//NRF_FEATURE_EN_DPL;
    228c:	2337      	movs	r3, #55	; 0x37
    228e:	18fb      	adds	r3, r7, r3
    2290:	2206      	movs	r2, #6
    2292:	701a      	strb	r2, [r3, #0]
	nrf24l01_cmd(NRF_W_REGISTER(NRF_FEATURE_REG),config);
    2294:	2337      	movs	r3, #55	; 0x37
    2296:	18fb      	adds	r3, r7, r3
    2298:	781b      	ldrb	r3, [r3, #0]
    229a:	0019      	movs	r1, r3
    229c:	203d      	movs	r0, #61	; 0x3d
    229e:	4b1a      	ldr	r3, [pc, #104]	; (2308 <nrf24l01_init+0x17c>)
    22a0:	4798      	blx	r3
	config = 0x3f;//(1<<0);
    22a2:	2337      	movs	r3, #55	; 0x37
    22a4:	18fb      	adds	r3, r7, r3
    22a6:	223f      	movs	r2, #63	; 0x3f
    22a8:	701a      	strb	r2, [r3, #0]
	nrf24l01_cmd(NRF_W_REGISTER(NRF_DYNPD_REG),config);
    22aa:	2337      	movs	r3, #55	; 0x37
    22ac:	18fb      	adds	r3, r7, r3
    22ae:	781b      	ldrb	r3, [r3, #0]
    22b0:	0019      	movs	r1, r3
    22b2:	203c      	movs	r0, #60	; 0x3c
    22b4:	4b14      	ldr	r3, [pc, #80]	; (2308 <nrf24l01_init+0x17c>)
    22b6:	4798      	blx	r3
	config = NRF_SETUP_RETR_ARC_RT1 | NRF_SETUP_RETR_ARD_W250;
    22b8:	2337      	movs	r3, #55	; 0x37
    22ba:	18fb      	adds	r3, r7, r3
    22bc:	2201      	movs	r2, #1
    22be:	701a      	strb	r2, [r3, #0]
	nrf24l01_cmd(NRF_W_REGISTER(NRF_SETUP_RETR_REG),config);
    22c0:	2337      	movs	r3, #55	; 0x37
    22c2:	18fb      	adds	r3, r7, r3
    22c4:	781b      	ldrb	r3, [r3, #0]
    22c6:	0019      	movs	r1, r3
    22c8:	2024      	movs	r0, #36	; 0x24
    22ca:	4b0f      	ldr	r3, [pc, #60]	; (2308 <nrf24l01_init+0x17c>)
    22cc:	4798      	blx	r3
	
	
	config = NRF_RF_SETUP_RF_PWR_18DBM | NRF_RF_SETUP_DR_2MBPS;
    22ce:	2337      	movs	r3, #55	; 0x37
    22d0:	18fb      	adds	r3, r7, r3
    22d2:	2208      	movs	r2, #8
    22d4:	701a      	strb	r2, [r3, #0]
	nrf24l01_cmd(NRF_W_REGISTER(NRF_RF_SETUP_REG),config);
    22d6:	2337      	movs	r3, #55	; 0x37
    22d8:	18fb      	adds	r3, r7, r3
    22da:	781b      	ldrb	r3, [r3, #0]
    22dc:	0019      	movs	r1, r3
    22de:	2026      	movs	r0, #38	; 0x26
    22e0:	4b09      	ldr	r3, [pc, #36]	; (2308 <nrf24l01_init+0x17c>)
    22e2:	4798      	blx	r3
	
	
	//nrf24l01_cmd2(NRF_W_REGISTER(NRF_TX_ADDR_REG),5,TX_ADDR);
	//nrf24l01_cmd2(NRF_W_REGISTER(NRF_RX_ADDR_P0_REG),5,RX_ADDR);
	//nrf24l01_cmd2(NRF_W_TX_PAYLOAD,strlen(hello_world),hello_world);
}
    22e4:	46c0      	nop			; (mov r8, r8)
    22e6:	46bd      	mov	sp, r7
    22e8:	b00f      	add	sp, #60	; 0x3c
    22ea:	bd90      	pop	{r4, r7, pc}
    22ec:	00001d79 	.word	0x00001d79
    22f0:	000037f5 	.word	0x000037f5
    22f4:	00001d9d 	.word	0x00001d9d
    22f8:	00000c4d 	.word	0x00000c4d
    22fc:	00008a2c 	.word	0x00008a2c
    2300:	00008a34 	.word	0x00008a34
    2304:	00008a3c 	.word	0x00008a3c
    2308:	00001ef9 	.word	0x00001ef9

0000230c <NRF_CS_Set>:




void NRF_CS_Set(void)
{
    230c:	b580      	push	{r7, lr}
    230e:	af00      	add	r7, sp, #0
	spi_select_slave(&spi_master_instance,&nrf24l01_slave_instance,true);
    2310:	4904      	ldr	r1, [pc, #16]	; (2324 <NRF_CS_Set+0x18>)
    2312:	4b05      	ldr	r3, [pc, #20]	; (2328 <NRF_CS_Set+0x1c>)
    2314:	2201      	movs	r2, #1
    2316:	0018      	movs	r0, r3
    2318:	4b04      	ldr	r3, [pc, #16]	; (232c <NRF_CS_Set+0x20>)
    231a:	4798      	blx	r3
	//port_pin_set_output_level(NRF24L01_CS,true);
	//PORT_IOBUS->Group[0].OUTSET.bit.OUTSET = PORT_PA10;
}
    231c:	46c0      	nop			; (mov r8, r8)
    231e:	46bd      	mov	sp, r7
    2320:	bd80      	pop	{r7, pc}
    2322:	46c0      	nop			; (mov r8, r8)
    2324:	2000015c 	.word	0x2000015c
    2328:	20000168 	.word	0x20000168
    232c:	000033c9 	.word	0x000033c9

00002330 <NRF_CS_Clear>:

void NRF_CS_Clear(void)
{
    2330:	b580      	push	{r7, lr}
    2332:	af00      	add	r7, sp, #0
	spi_select_slave(&spi_master_instance,&nrf24l01_slave_instance,false);
    2334:	4904      	ldr	r1, [pc, #16]	; (2348 <NRF_CS_Clear+0x18>)
    2336:	4b05      	ldr	r3, [pc, #20]	; (234c <NRF_CS_Clear+0x1c>)
    2338:	2200      	movs	r2, #0
    233a:	0018      	movs	r0, r3
    233c:	4b04      	ldr	r3, [pc, #16]	; (2350 <NRF_CS_Clear+0x20>)
    233e:	4798      	blx	r3
	//port_pin_set_output_level(NRF24L01_CS,false);
	//PORT_IOBUS->Group[0].OUTCLR.bit.OUTCLR = PORT_PA10;
}
    2340:	46c0      	nop			; (mov r8, r8)
    2342:	46bd      	mov	sp, r7
    2344:	bd80      	pop	{r7, pc}
    2346:	46c0      	nop			; (mov r8, r8)
    2348:	2000015c 	.word	0x2000015c
    234c:	20000168 	.word	0x20000168
    2350:	000033c9 	.word	0x000033c9

00002354 <NRF_CE_Set>:

void NRF_CE_Set(void)
{
    2354:	b580      	push	{r7, lr}
    2356:	af00      	add	r7, sp, #0
	port_pin_set_output_level(NRF24L01_CE,true);
    2358:	2101      	movs	r1, #1
    235a:	200a      	movs	r0, #10
    235c:	4b02      	ldr	r3, [pc, #8]	; (2368 <NRF_CE_Set+0x14>)
    235e:	4798      	blx	r3
	//PORT_IOBUS->Group[1].OUTSET.bit.OUTSET = PORT_PB11;
}
    2360:	46c0      	nop			; (mov r8, r8)
    2362:	46bd      	mov	sp, r7
    2364:	bd80      	pop	{r7, pc}
    2366:	46c0      	nop			; (mov r8, r8)
    2368:	00001d9d 	.word	0x00001d9d

0000236c <NRF_Read_single>:
	
	return Status_Reg;
}

uint32_t NRF_Read_single(uint32_t Command)
{
    236c:	b580      	push	{r7, lr}
    236e:	b084      	sub	sp, #16
    2370:	af00      	add	r7, sp, #0
    2372:	6078      	str	r0, [r7, #4]
	char buffer;
	//NRF_Read(Command,1,&buffer);
	nrf24l01_spi_read(&buffer,1,(uint16_t)Command);
    2374:	687b      	ldr	r3, [r7, #4]
    2376:	b29a      	uxth	r2, r3
    2378:	230f      	movs	r3, #15
    237a:	18fb      	adds	r3, r7, r3
    237c:	2101      	movs	r1, #1
    237e:	0018      	movs	r0, r3
    2380:	4b04      	ldr	r3, [pc, #16]	; (2394 <NRF_Read_single+0x28>)
    2382:	4798      	blx	r3
	return buffer;
    2384:	230f      	movs	r3, #15
    2386:	18fb      	adds	r3, r7, r3
    2388:	781b      	ldrb	r3, [r3, #0]
}
    238a:	0018      	movs	r0, r3
    238c:	46bd      	mov	sp, r7
    238e:	b004      	add	sp, #16
    2390:	bd80      	pop	{r7, pc}
    2392:	46c0      	nop			; (mov r8, r8)
    2394:	00001f21 	.word	0x00001f21

00002398 <NRF_Write>:


uint32_t NRF_Write(uint32_t Command, uint32_t Length, char *Input)
{
    2398:	b580      	push	{r7, lr}
    239a:	b088      	sub	sp, #32
    239c:	af00      	add	r7, sp, #0
    239e:	60f8      	str	r0, [r7, #12]
    23a0:	60b9      	str	r1, [r7, #8]
    23a2:	607a      	str	r2, [r7, #4]
	uint32_t Temp=0;
    23a4:	2300      	movs	r3, #0
    23a6:	61fb      	str	r3, [r7, #28]
	char *buffer = Input;
    23a8:	687b      	ldr	r3, [r7, #4]
    23aa:	61bb      	str	r3, [r7, #24]
	uint32_t i = 0;
    23ac:	2300      	movs	r3, #0
    23ae:	617b      	str	r3, [r7, #20]
	NRF_CS_Set();
    23b0:	4b11      	ldr	r3, [pc, #68]	; (23f8 <NRF_Write+0x60>)
    23b2:	4798      	blx	r3
	Temp = nrf24l01_spi_write_single(&Command);
    23b4:	230c      	movs	r3, #12
    23b6:	18fb      	adds	r3, r7, r3
    23b8:	0018      	movs	r0, r3
    23ba:	4b10      	ldr	r3, [pc, #64]	; (23fc <NRF_Write+0x64>)
    23bc:	4798      	blx	r3
    23be:	0003      	movs	r3, r0
    23c0:	61fb      	str	r3, [r7, #28]
	for (i = 0;i<Length;i++)
    23c2:	2300      	movs	r3, #0
    23c4:	617b      	str	r3, [r7, #20]
    23c6:	e00b      	b.n	23e0 <NRF_Write+0x48>
	{
		Temp = nrf24l01_spi_write_single(buffer);
    23c8:	69bb      	ldr	r3, [r7, #24]
    23ca:	0018      	movs	r0, r3
    23cc:	4b0b      	ldr	r3, [pc, #44]	; (23fc <NRF_Write+0x64>)
    23ce:	4798      	blx	r3
    23d0:	0003      	movs	r3, r0
    23d2:	61fb      	str	r3, [r7, #28]
		buffer++;
    23d4:	69bb      	ldr	r3, [r7, #24]
    23d6:	3301      	adds	r3, #1
    23d8:	61bb      	str	r3, [r7, #24]
	for (i = 0;i<Length;i++)
    23da:	697b      	ldr	r3, [r7, #20]
    23dc:	3301      	adds	r3, #1
    23de:	617b      	str	r3, [r7, #20]
    23e0:	697a      	ldr	r2, [r7, #20]
    23e2:	68bb      	ldr	r3, [r7, #8]
    23e4:	429a      	cmp	r2, r3
    23e6:	d3ef      	bcc.n	23c8 <NRF_Write+0x30>
	}
	NRF_CS_Clear();
    23e8:	4b05      	ldr	r3, [pc, #20]	; (2400 <NRF_Write+0x68>)
    23ea:	4798      	blx	r3
	
	return Temp;
    23ec:	69fb      	ldr	r3, [r7, #28]
}
    23ee:	0018      	movs	r0, r3
    23f0:	46bd      	mov	sp, r7
    23f2:	b008      	add	sp, #32
    23f4:	bd80      	pop	{r7, pc}
    23f6:	46c0      	nop			; (mov r8, r8)
    23f8:	0000230d 	.word	0x0000230d
    23fc:	00001e45 	.word	0x00001e45
    2400:	00002331 	.word	0x00002331

00002404 <NRF_Write_2>:

uint32_t NRF_Write_2(uint32_t Command, char Input)
{
    2404:	b580      	push	{r7, lr}
    2406:	b082      	sub	sp, #8
    2408:	af00      	add	r7, sp, #0
    240a:	6078      	str	r0, [r7, #4]
    240c:	000a      	movs	r2, r1
    240e:	1cfb      	adds	r3, r7, #3
    2410:	701a      	strb	r2, [r3, #0]
	return NRF_Write(Command,1,&Input);
    2412:	1cfa      	adds	r2, r7, #3
    2414:	687b      	ldr	r3, [r7, #4]
    2416:	2101      	movs	r1, #1
    2418:	0018      	movs	r0, r3
    241a:	4b03      	ldr	r3, [pc, #12]	; (2428 <NRF_Write_2+0x24>)
    241c:	4798      	blx	r3
    241e:	0003      	movs	r3, r0
}
    2420:	0018      	movs	r0, r3
    2422:	46bd      	mov	sp, r7
    2424:	b002      	add	sp, #8
    2426:	bd80      	pop	{r7, pc}
    2428:	00002399 	.word	0x00002399

0000242c <NRF_Write_1>:

uint32_t NRF_Write_1(uint32_t Command)
{
    242c:	b580      	push	{r7, lr}
    242e:	b082      	sub	sp, #8
    2430:	af00      	add	r7, sp, #0
    2432:	6078      	str	r0, [r7, #4]
	return NRF_Write(Command,0,'\0');
    2434:	687b      	ldr	r3, [r7, #4]
    2436:	2200      	movs	r2, #0
    2438:	2100      	movs	r1, #0
    243a:	0018      	movs	r0, r3
    243c:	4b03      	ldr	r3, [pc, #12]	; (244c <NRF_Write_1+0x20>)
    243e:	4798      	blx	r3
    2440:	0003      	movs	r3, r0
}
    2442:	0018      	movs	r0, r3
    2444:	46bd      	mov	sp, r7
    2446:	b002      	add	sp, #8
    2448:	bd80      	pop	{r7, pc}
    244a:	46c0      	nop			; (mov r8, r8)
    244c:	00002399 	.word	0x00002399

00002450 <NRF_TX_data>:


uint32_t NRF_TX_data(uint8_t *data, uint32_t length)
{
    2450:	b580      	push	{r7, lr}
    2452:	b08a      	sub	sp, #40	; 0x28
    2454:	af00      	add	r7, sp, #0
    2456:	6078      	str	r0, [r7, #4]
    2458:	6039      	str	r1, [r7, #0]
	if (length > 16)
    245a:	683b      	ldr	r3, [r7, #0]
    245c:	2b10      	cmp	r3, #16
    245e:	d901      	bls.n	2464 <NRF_TX_data+0x14>
	{
		return NRF_FAILURE;
    2460:	2300      	movs	r3, #0
    2462:	e0aa      	b.n	25ba <NRF_TX_data+0x16a>
	}
	
	uint32_t Temp=0;
    2464:	2300      	movs	r3, #0
    2466:	623b      	str	r3, [r7, #32]
	static char Count;
	Count++;
    2468:	4b56      	ldr	r3, [pc, #344]	; (25c4 <NRF_TX_data+0x174>)
    246a:	781b      	ldrb	r3, [r3, #0]
    246c:	3301      	adds	r3, #1
    246e:	b2da      	uxtb	r2, r3
    2470:	4b54      	ldr	r3, [pc, #336]	; (25c4 <NRF_TX_data+0x174>)
    2472:	701a      	strb	r2, [r3, #0]
	{
		Count=0;
	}
	//char Package_Data[4] = {(char)((Type>>8)&0xFF),(char)((Type>>0)&0xFF),(char)((Command>>8)&0xFF),(char)((Command>>0)&0xFF)};
	//char Package_Data[16] = {0x00,0x00,0x00,0x05,Count,0x00,0x00,0x00,0x01,(char)(Type&0x00),(char)((Command>>24)&0xFF),(char)((Command>>16)&0xFF)}(char)((Command>>8)&0xFF),(char)((Command>>0)&0xFF),0x2A,0x42};
	char Package_Data[20] = {0x2A,0x42,0x05,Count,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x2A,0x42};
    2474:	230c      	movs	r3, #12
    2476:	18fb      	adds	r3, r7, r3
    2478:	222a      	movs	r2, #42	; 0x2a
    247a:	701a      	strb	r2, [r3, #0]
    247c:	230c      	movs	r3, #12
    247e:	18fb      	adds	r3, r7, r3
    2480:	2242      	movs	r2, #66	; 0x42
    2482:	705a      	strb	r2, [r3, #1]
    2484:	230c      	movs	r3, #12
    2486:	18fb      	adds	r3, r7, r3
    2488:	2205      	movs	r2, #5
    248a:	709a      	strb	r2, [r3, #2]
    248c:	4b4d      	ldr	r3, [pc, #308]	; (25c4 <NRF_TX_data+0x174>)
    248e:	781a      	ldrb	r2, [r3, #0]
    2490:	230c      	movs	r3, #12
    2492:	18fb      	adds	r3, r7, r3
    2494:	70da      	strb	r2, [r3, #3]
    2496:	230c      	movs	r3, #12
    2498:	18fb      	adds	r3, r7, r3
    249a:	2200      	movs	r2, #0
    249c:	711a      	strb	r2, [r3, #4]
    249e:	230c      	movs	r3, #12
    24a0:	18fb      	adds	r3, r7, r3
    24a2:	2200      	movs	r2, #0
    24a4:	715a      	strb	r2, [r3, #5]
    24a6:	230c      	movs	r3, #12
    24a8:	18fb      	adds	r3, r7, r3
    24aa:	2200      	movs	r2, #0
    24ac:	719a      	strb	r2, [r3, #6]
    24ae:	230c      	movs	r3, #12
    24b0:	18fb      	adds	r3, r7, r3
    24b2:	2200      	movs	r2, #0
    24b4:	71da      	strb	r2, [r3, #7]
    24b6:	230c      	movs	r3, #12
    24b8:	18fb      	adds	r3, r7, r3
    24ba:	2200      	movs	r2, #0
    24bc:	721a      	strb	r2, [r3, #8]
    24be:	230c      	movs	r3, #12
    24c0:	18fb      	adds	r3, r7, r3
    24c2:	2200      	movs	r2, #0
    24c4:	725a      	strb	r2, [r3, #9]
    24c6:	230c      	movs	r3, #12
    24c8:	18fb      	adds	r3, r7, r3
    24ca:	2200      	movs	r2, #0
    24cc:	729a      	strb	r2, [r3, #10]
    24ce:	230c      	movs	r3, #12
    24d0:	18fb      	adds	r3, r7, r3
    24d2:	2200      	movs	r2, #0
    24d4:	72da      	strb	r2, [r3, #11]
    24d6:	230c      	movs	r3, #12
    24d8:	18fb      	adds	r3, r7, r3
    24da:	2200      	movs	r2, #0
    24dc:	731a      	strb	r2, [r3, #12]
    24de:	230c      	movs	r3, #12
    24e0:	18fb      	adds	r3, r7, r3
    24e2:	2200      	movs	r2, #0
    24e4:	735a      	strb	r2, [r3, #13]
    24e6:	230c      	movs	r3, #12
    24e8:	18fb      	adds	r3, r7, r3
    24ea:	2200      	movs	r2, #0
    24ec:	739a      	strb	r2, [r3, #14]
    24ee:	230c      	movs	r3, #12
    24f0:	18fb      	adds	r3, r7, r3
    24f2:	2200      	movs	r2, #0
    24f4:	73da      	strb	r2, [r3, #15]
    24f6:	230c      	movs	r3, #12
    24f8:	18fb      	adds	r3, r7, r3
    24fa:	2200      	movs	r2, #0
    24fc:	741a      	strb	r2, [r3, #16]
    24fe:	230c      	movs	r3, #12
    2500:	18fb      	adds	r3, r7, r3
    2502:	2201      	movs	r2, #1
    2504:	745a      	strb	r2, [r3, #17]
    2506:	230c      	movs	r3, #12
    2508:	18fb      	adds	r3, r7, r3
    250a:	222a      	movs	r2, #42	; 0x2a
    250c:	749a      	strb	r2, [r3, #18]
    250e:	230c      	movs	r3, #12
    2510:	18fb      	adds	r3, r7, r3
    2512:	2242      	movs	r2, #66	; 0x42
    2514:	74da      	strb	r2, [r3, #19]
	for (int i=0;i<length;i++)
    2516:	2300      	movs	r3, #0
    2518:	627b      	str	r3, [r7, #36]	; 0x24
    251a:	e00b      	b.n	2534 <NRF_TX_data+0xe4>
	{
		Package_Data[i+4] = data[i];
    251c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    251e:	3304      	adds	r3, #4
    2520:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    2522:	6879      	ldr	r1, [r7, #4]
    2524:	188a      	adds	r2, r1, r2
    2526:	7811      	ldrb	r1, [r2, #0]
    2528:	220c      	movs	r2, #12
    252a:	18ba      	adds	r2, r7, r2
    252c:	54d1      	strb	r1, [r2, r3]
	for (int i=0;i<length;i++)
    252e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2530:	3301      	adds	r3, #1
    2532:	627b      	str	r3, [r7, #36]	; 0x24
    2534:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    2536:	683b      	ldr	r3, [r7, #0]
    2538:	429a      	cmp	r2, r3
    253a:	d3ef      	bcc.n	251c <NRF_TX_data+0xcc>
	}
	
	
	NRF_Write_1(NRF_FLUSH_TX);
    253c:	20e1      	movs	r0, #225	; 0xe1
    253e:	4b22      	ldr	r3, [pc, #136]	; (25c8 <NRF_TX_data+0x178>)
    2540:	4798      	blx	r3
	NRF_Write(NRF_W_TX_PAYLOAD,20,&Package_Data);
    2542:	230c      	movs	r3, #12
    2544:	18fb      	adds	r3, r7, r3
    2546:	001a      	movs	r2, r3
    2548:	2114      	movs	r1, #20
    254a:	20a0      	movs	r0, #160	; 0xa0
    254c:	4b1f      	ldr	r3, [pc, #124]	; (25cc <NRF_TX_data+0x17c>)
    254e:	4798      	blx	r3
	
	NRF_CE_Set();
    2550:	4b1f      	ldr	r3, [pc, #124]	; (25d0 <NRF_TX_data+0x180>)
    2552:	4798      	blx	r3
	delay_ms(1);
    2554:	2001      	movs	r0, #1
    2556:	4b1f      	ldr	r3, [pc, #124]	; (25d4 <NRF_TX_data+0x184>)
    2558:	4798      	blx	r3
	do
	{
		Temp = NRF_Read_single(NRF_R_REGISTER(NRF_STATUS_REG));
    255a:	2007      	movs	r0, #7
    255c:	4b1e      	ldr	r3, [pc, #120]	; (25d8 <NRF_TX_data+0x188>)
    255e:	4798      	blx	r3
    2560:	0003      	movs	r3, r0
    2562:	623b      	str	r3, [r7, #32]
	}
	while (!(Temp & (NRF_STATUS_TX_DS | NRF_STATUS_MAX_RT)));
    2564:	6a3b      	ldr	r3, [r7, #32]
    2566:	2230      	movs	r2, #48	; 0x30
    2568:	4013      	ands	r3, r2
    256a:	d0f6      	beq.n	255a <NRF_TX_data+0x10a>
	
	
	if (Temp & NRF_STATUS_TX_DS )
    256c:	6a3b      	ldr	r3, [r7, #32]
    256e:	2220      	movs	r2, #32
    2570:	4013      	ands	r3, r2
    2572:	d005      	beq.n	2580 <NRF_TX_data+0x130>
	{
		NRF_Write_2(NRF_W_REGISTER(NRF_STATUS_REG),(NRF_STATUS_TX_DS | NRF_STATUS_MAX_RT));
    2574:	2130      	movs	r1, #48	; 0x30
    2576:	2027      	movs	r0, #39	; 0x27
    2578:	4b18      	ldr	r3, [pc, #96]	; (25dc <NRF_TX_data+0x18c>)
    257a:	4798      	blx	r3
		return NRF_SUCCES;
    257c:	2301      	movs	r3, #1
    257e:	e01c      	b.n	25ba <NRF_TX_data+0x16a>
	}
	else if (Temp & NRF_STATUS_MAX_RT)
    2580:	6a3b      	ldr	r3, [r7, #32]
    2582:	2210      	movs	r2, #16
    2584:	4013      	ands	r3, r2
    2586:	d017      	beq.n	25b8 <NRF_TX_data+0x168>
	{
		delay_ms(4);
    2588:	2004      	movs	r0, #4
    258a:	4b12      	ldr	r3, [pc, #72]	; (25d4 <NRF_TX_data+0x184>)
    258c:	4798      	blx	r3
		Temp = NRF_Read_single(NRF_R_REGISTER(NRF_STATUS_REG));
    258e:	2007      	movs	r0, #7
    2590:	4b11      	ldr	r3, [pc, #68]	; (25d8 <NRF_TX_data+0x188>)
    2592:	4798      	blx	r3
    2594:	0003      	movs	r3, r0
    2596:	623b      	str	r3, [r7, #32]
		if (Temp & NRF_STATUS_TX_DS )
    2598:	6a3b      	ldr	r3, [r7, #32]
    259a:	2220      	movs	r2, #32
    259c:	4013      	ands	r3, r2
    259e:	d005      	beq.n	25ac <NRF_TX_data+0x15c>
		{
			NRF_Write_2(NRF_W_REGISTER(NRF_STATUS_REG),(NRF_STATUS_TX_DS | NRF_STATUS_MAX_RT));
    25a0:	2130      	movs	r1, #48	; 0x30
    25a2:	2027      	movs	r0, #39	; 0x27
    25a4:	4b0d      	ldr	r3, [pc, #52]	; (25dc <NRF_TX_data+0x18c>)
    25a6:	4798      	blx	r3
			return NRF_SUCCES;
    25a8:	2301      	movs	r3, #1
    25aa:	e006      	b.n	25ba <NRF_TX_data+0x16a>
		}
		else
		{
			NRF_Write_2(NRF_W_REGISTER(NRF_STATUS_REG),(NRF_STATUS_TX_DS | NRF_STATUS_MAX_RT));
    25ac:	2130      	movs	r1, #48	; 0x30
    25ae:	2027      	movs	r0, #39	; 0x27
    25b0:	4b0a      	ldr	r3, [pc, #40]	; (25dc <NRF_TX_data+0x18c>)
    25b2:	4798      	blx	r3
			return NRF_FAILURE;
    25b4:	2300      	movs	r3, #0
    25b6:	e000      	b.n	25ba <NRF_TX_data+0x16a>
		}
		
	}
	return NRF_FAILURE;
    25b8:	2300      	movs	r3, #0
}
    25ba:	0018      	movs	r0, r3
    25bc:	46bd      	mov	sp, r7
    25be:	b00a      	add	sp, #40	; 0x28
    25c0:	bd80      	pop	{r7, pc}
    25c2:	46c0      	nop			; (mov r8, r8)
    25c4:	20000096 	.word	0x20000096
    25c8:	0000242d 	.word	0x0000242d
    25cc:	00002399 	.word	0x00002399
    25d0:	00002355 	.word	0x00002355
    25d4:	00000c4d 	.word	0x00000c4d
    25d8:	0000236d 	.word	0x0000236d
    25dc:	00002405 	.word	0x00002405

000025e0 <nrf_enable_vcc>:

nrf_enable_vcc(void)
{
    25e0:	b580      	push	{r7, lr}
    25e2:	af00      	add	r7, sp, #0
	port_pin_set_output_level(NRF_VCC_EN,true);
    25e4:	2101      	movs	r1, #1
    25e6:	2011      	movs	r0, #17
    25e8:	4b02      	ldr	r3, [pc, #8]	; (25f4 <nrf_enable_vcc+0x14>)
    25ea:	4798      	blx	r3
}
    25ec:	46c0      	nop			; (mov r8, r8)
    25ee:	0018      	movs	r0, r3
    25f0:	46bd      	mov	sp, r7
    25f2:	bd80      	pop	{r7, pc}
    25f4:	00001d9d 	.word	0x00001d9d

000025f8 <system_pinmux_get_group_from_gpio_pin>:
{
    25f8:	b580      	push	{r7, lr}
    25fa:	b084      	sub	sp, #16
    25fc:	af00      	add	r7, sp, #0
    25fe:	0002      	movs	r2, r0
    2600:	1dfb      	adds	r3, r7, #7
    2602:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    2604:	230f      	movs	r3, #15
    2606:	18fb      	adds	r3, r7, r3
    2608:	1dfa      	adds	r2, r7, #7
    260a:	7812      	ldrb	r2, [r2, #0]
    260c:	09d2      	lsrs	r2, r2, #7
    260e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    2610:	230e      	movs	r3, #14
    2612:	18fb      	adds	r3, r7, r3
    2614:	1dfa      	adds	r2, r7, #7
    2616:	7812      	ldrb	r2, [r2, #0]
    2618:	0952      	lsrs	r2, r2, #5
    261a:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    261c:	4b0d      	ldr	r3, [pc, #52]	; (2654 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    261e:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    2620:	230f      	movs	r3, #15
    2622:	18fb      	adds	r3, r7, r3
    2624:	781b      	ldrb	r3, [r3, #0]
    2626:	2b00      	cmp	r3, #0
    2628:	d10f      	bne.n	264a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    262a:	230f      	movs	r3, #15
    262c:	18fb      	adds	r3, r7, r3
    262e:	781b      	ldrb	r3, [r3, #0]
    2630:	009b      	lsls	r3, r3, #2
    2632:	2210      	movs	r2, #16
    2634:	4694      	mov	ip, r2
    2636:	44bc      	add	ip, r7
    2638:	4463      	add	r3, ip
    263a:	3b08      	subs	r3, #8
    263c:	681a      	ldr	r2, [r3, #0]
    263e:	230e      	movs	r3, #14
    2640:	18fb      	adds	r3, r7, r3
    2642:	781b      	ldrb	r3, [r3, #0]
    2644:	01db      	lsls	r3, r3, #7
    2646:	18d3      	adds	r3, r2, r3
    2648:	e000      	b.n	264c <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    264a:	2300      	movs	r3, #0
}
    264c:	0018      	movs	r0, r3
    264e:	46bd      	mov	sp, r7
    2650:	b004      	add	sp, #16
    2652:	bd80      	pop	{r7, pc}
    2654:	41004400 	.word	0x41004400

00002658 <port_get_group_from_gpio_pin>:
{
    2658:	b580      	push	{r7, lr}
    265a:	b082      	sub	sp, #8
    265c:	af00      	add	r7, sp, #0
    265e:	0002      	movs	r2, r0
    2660:	1dfb      	adds	r3, r7, #7
    2662:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    2664:	1dfb      	adds	r3, r7, #7
    2666:	781b      	ldrb	r3, [r3, #0]
    2668:	0018      	movs	r0, r3
    266a:	4b03      	ldr	r3, [pc, #12]	; (2678 <port_get_group_from_gpio_pin+0x20>)
    266c:	4798      	blx	r3
    266e:	0003      	movs	r3, r0
}
    2670:	0018      	movs	r0, r3
    2672:	46bd      	mov	sp, r7
    2674:	b002      	add	sp, #8
    2676:	bd80      	pop	{r7, pc}
    2678:	000025f9 	.word	0x000025f9

0000267c <port_get_config_defaults>:
{
    267c:	b580      	push	{r7, lr}
    267e:	b082      	sub	sp, #8
    2680:	af00      	add	r7, sp, #0
    2682:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
    2684:	687b      	ldr	r3, [r7, #4]
    2686:	2200      	movs	r2, #0
    2688:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    268a:	687b      	ldr	r3, [r7, #4]
    268c:	2201      	movs	r2, #1
    268e:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    2690:	687b      	ldr	r3, [r7, #4]
    2692:	2200      	movs	r2, #0
    2694:	709a      	strb	r2, [r3, #2]
}
    2696:	46c0      	nop			; (mov r8, r8)
    2698:	46bd      	mov	sp, r7
    269a:	b002      	add	sp, #8
    269c:	bd80      	pop	{r7, pc}
	...

000026a0 <port_pin_set_output_level>:
{
    26a0:	b580      	push	{r7, lr}
    26a2:	b084      	sub	sp, #16
    26a4:	af00      	add	r7, sp, #0
    26a6:	0002      	movs	r2, r0
    26a8:	1dfb      	adds	r3, r7, #7
    26aa:	701a      	strb	r2, [r3, #0]
    26ac:	1dbb      	adds	r3, r7, #6
    26ae:	1c0a      	adds	r2, r1, #0
    26b0:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    26b2:	1dfb      	adds	r3, r7, #7
    26b4:	781b      	ldrb	r3, [r3, #0]
    26b6:	0018      	movs	r0, r3
    26b8:	4b0d      	ldr	r3, [pc, #52]	; (26f0 <port_pin_set_output_level+0x50>)
    26ba:	4798      	blx	r3
    26bc:	0003      	movs	r3, r0
    26be:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    26c0:	1dfb      	adds	r3, r7, #7
    26c2:	781b      	ldrb	r3, [r3, #0]
    26c4:	221f      	movs	r2, #31
    26c6:	4013      	ands	r3, r2
    26c8:	2201      	movs	r2, #1
    26ca:	409a      	lsls	r2, r3
    26cc:	0013      	movs	r3, r2
    26ce:	60bb      	str	r3, [r7, #8]
	if (level) {
    26d0:	1dbb      	adds	r3, r7, #6
    26d2:	781b      	ldrb	r3, [r3, #0]
    26d4:	2b00      	cmp	r3, #0
    26d6:	d003      	beq.n	26e0 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    26d8:	68fb      	ldr	r3, [r7, #12]
    26da:	68ba      	ldr	r2, [r7, #8]
    26dc:	619a      	str	r2, [r3, #24]
}
    26de:	e002      	b.n	26e6 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    26e0:	68fb      	ldr	r3, [r7, #12]
    26e2:	68ba      	ldr	r2, [r7, #8]
    26e4:	615a      	str	r2, [r3, #20]
}
    26e6:	46c0      	nop			; (mov r8, r8)
    26e8:	46bd      	mov	sp, r7
    26ea:	b004      	add	sp, #16
    26ec:	bd80      	pop	{r7, pc}
    26ee:	46c0      	nop			; (mov r8, r8)
    26f0:	00002659 	.word	0x00002659

000026f4 <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
    26f4:	b580      	push	{r7, lr}
    26f6:	b084      	sub	sp, #16
    26f8:	af00      	add	r7, sp, #0
    26fa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    26fc:	687b      	ldr	r3, [r7, #4]
    26fe:	681b      	ldr	r3, [r3, #0]
    2700:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    2702:	68fb      	ldr	r3, [r7, #12]
    2704:	69db      	ldr	r3, [r3, #28]
    2706:	1e5a      	subs	r2, r3, #1
    2708:	4193      	sbcs	r3, r2
    270a:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
    270c:	0018      	movs	r0, r3
    270e:	46bd      	mov	sp, r7
    2710:	b004      	add	sp, #16
    2712:	bd80      	pop	{r7, pc}

00002714 <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
    2714:	b580      	push	{r7, lr}
    2716:	b082      	sub	sp, #8
    2718:	af00      	add	r7, sp, #0
    271a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    271c:	687b      	ldr	r3, [r7, #4]
    271e:	2201      	movs	r2, #1
    2720:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    2722:	687b      	ldr	r3, [r7, #4]
    2724:	2200      	movs	r2, #0
    2726:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    2728:	687b      	ldr	r3, [r7, #4]
    272a:	2200      	movs	r2, #0
    272c:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    272e:	687b      	ldr	r3, [r7, #4]
    2730:	22c0      	movs	r2, #192	; 0xc0
    2732:	0392      	lsls	r2, r2, #14
    2734:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    2736:	687b      	ldr	r3, [r7, #4]
    2738:	2200      	movs	r2, #0
    273a:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
    273c:	687b      	ldr	r3, [r7, #4]
    273e:	2200      	movs	r2, #0
    2740:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
    2742:	687b      	ldr	r3, [r7, #4]
    2744:	2201      	movs	r2, #1
    2746:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    2748:	687b      	ldr	r3, [r7, #4]
    274a:	2201      	movs	r2, #1
    274c:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    274e:	687b      	ldr	r3, [r7, #4]
    2750:	2200      	movs	r2, #0
    2752:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    2754:	687b      	ldr	r3, [r7, #4]
    2756:	2224      	movs	r2, #36	; 0x24
    2758:	2100      	movs	r1, #0
    275a:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    275c:	687b      	ldr	r3, [r7, #4]
    275e:	3318      	adds	r3, #24
    2760:	220c      	movs	r2, #12
    2762:	2100      	movs	r1, #0
    2764:	0018      	movs	r0, r3
    2766:	4b0a      	ldr	r3, [pc, #40]	; (2790 <spi_get_config_defaults+0x7c>)
    2768:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
    276a:	687b      	ldr	r3, [r7, #4]
    276c:	4a09      	ldr	r2, [pc, #36]	; (2794 <spi_get_config_defaults+0x80>)
    276e:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
    2770:	687b      	ldr	r3, [r7, #4]
    2772:	2200      	movs	r2, #0
    2774:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
    2776:	687b      	ldr	r3, [r7, #4]
    2778:	2200      	movs	r2, #0
    277a:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
    277c:	687b      	ldr	r3, [r7, #4]
    277e:	2200      	movs	r2, #0
    2780:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
    2782:	687b      	ldr	r3, [r7, #4]
    2784:	2200      	movs	r2, #0
    2786:	635a      	str	r2, [r3, #52]	; 0x34

};
    2788:	46c0      	nop			; (mov r8, r8)
    278a:	46bd      	mov	sp, r7
    278c:	b002      	add	sp, #8
    278e:	bd80      	pop	{r7, pc}
    2790:	000080bf 	.word	0x000080bf
    2794:	000186a0 	.word	0x000186a0

00002798 <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
    2798:	b580      	push	{r7, lr}
    279a:	b082      	sub	sp, #8
    279c:	af00      	add	r7, sp, #0
    279e:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
    27a0:	687b      	ldr	r3, [r7, #4]
    27a2:	220a      	movs	r2, #10
    27a4:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
    27a6:	687b      	ldr	r3, [r7, #4]
    27a8:	2200      	movs	r2, #0
    27aa:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
    27ac:	687b      	ldr	r3, [r7, #4]
    27ae:	2200      	movs	r2, #0
    27b0:	709a      	strb	r2, [r3, #2]
}
    27b2:	46c0      	nop			; (mov r8, r8)
    27b4:	46bd      	mov	sp, r7
    27b6:	b002      	add	sp, #8
    27b8:	bd80      	pop	{r7, pc}
	...

000027bc <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		const struct spi_slave_inst_config *const config)
{
    27bc:	b580      	push	{r7, lr}
    27be:	b084      	sub	sp, #16
    27c0:	af00      	add	r7, sp, #0
    27c2:	6078      	str	r0, [r7, #4]
    27c4:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    27c6:	683b      	ldr	r3, [r7, #0]
    27c8:	781a      	ldrb	r2, [r3, #0]
    27ca:	687b      	ldr	r3, [r7, #4]
    27cc:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
    27ce:	683b      	ldr	r3, [r7, #0]
    27d0:	785a      	ldrb	r2, [r3, #1]
    27d2:	687b      	ldr	r3, [r7, #4]
    27d4:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
    27d6:	683b      	ldr	r3, [r7, #0]
    27d8:	789a      	ldrb	r2, [r3, #2]
    27da:	687b      	ldr	r3, [r7, #4]
    27dc:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    27de:	230c      	movs	r3, #12
    27e0:	18fb      	adds	r3, r7, r3
    27e2:	0018      	movs	r0, r3
    27e4:	4b0b      	ldr	r3, [pc, #44]	; (2814 <spi_attach_slave+0x58>)
    27e6:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    27e8:	230c      	movs	r3, #12
    27ea:	18fb      	adds	r3, r7, r3
    27ec:	2201      	movs	r2, #1
    27ee:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    27f0:	687b      	ldr	r3, [r7, #4]
    27f2:	781b      	ldrb	r3, [r3, #0]
    27f4:	220c      	movs	r2, #12
    27f6:	18ba      	adds	r2, r7, r2
    27f8:	0011      	movs	r1, r2
    27fa:	0018      	movs	r0, r3
    27fc:	4b06      	ldr	r3, [pc, #24]	; (2818 <spi_attach_slave+0x5c>)
    27fe:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    2800:	687b      	ldr	r3, [r7, #4]
    2802:	781b      	ldrb	r3, [r3, #0]
    2804:	2101      	movs	r1, #1
    2806:	0018      	movs	r0, r3
    2808:	4b04      	ldr	r3, [pc, #16]	; (281c <spi_attach_slave+0x60>)
    280a:	4798      	blx	r3
}
    280c:	46c0      	nop			; (mov r8, r8)
    280e:	46bd      	mov	sp, r7
    2810:	b004      	add	sp, #16
    2812:	bd80      	pop	{r7, pc}
    2814:	0000267d 	.word	0x0000267d
    2818:	000037f5 	.word	0x000037f5
    281c:	000026a1 	.word	0x000026a1

00002820 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
    2820:	b580      	push	{r7, lr}
    2822:	b084      	sub	sp, #16
    2824:	af00      	add	r7, sp, #0
    2826:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2828:	687b      	ldr	r3, [r7, #4]
    282a:	681b      	ldr	r3, [r3, #0]
    282c:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
    282e:	46c0      	nop			; (mov r8, r8)
    2830:	687b      	ldr	r3, [r7, #4]
    2832:	0018      	movs	r0, r3
    2834:	4b06      	ldr	r3, [pc, #24]	; (2850 <spi_enable+0x30>)
    2836:	4798      	blx	r3
    2838:	1e03      	subs	r3, r0, #0
    283a:	d1f9      	bne.n	2830 <spi_enable+0x10>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    283c:	68fb      	ldr	r3, [r7, #12]
    283e:	681b      	ldr	r3, [r3, #0]
    2840:	2202      	movs	r2, #2
    2842:	431a      	orrs	r2, r3
    2844:	68fb      	ldr	r3, [r7, #12]
    2846:	601a      	str	r2, [r3, #0]
}
    2848:	46c0      	nop			; (mov r8, r8)
    284a:	46bd      	mov	sp, r7
    284c:	b004      	add	sp, #16
    284e:	bd80      	pop	{r7, pc}
    2850:	000026f5 	.word	0x000026f5

00002854 <spi_master_init>:
 */ 

#include "spi_master.h"

void spi_master_init(void)
{
    2854:	b580      	push	{r7, lr}
    2856:	b090      	sub	sp, #64	; 0x40
    2858:	af00      	add	r7, sp, #0
	struct spi_config config_spi;
	struct spi_slave_inst_config bme280_slave_config;
	struct spi_slave_inst_config nrf24l01_slave_config;
	
	spi_slave_inst_get_config_defaults(&bme280_slave_config);
    285a:	1d3b      	adds	r3, r7, #4
    285c:	0018      	movs	r0, r3
    285e:	4b23      	ldr	r3, [pc, #140]	; (28ec <spi_master_init+0x98>)
    2860:	4798      	blx	r3
	bme280_slave_config.ss_pin = BME280_CE;
    2862:	1d3b      	adds	r3, r7, #4
    2864:	2210      	movs	r2, #16
    2866:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&bme280_slave_instance, &bme280_slave_config);
    2868:	1d3a      	adds	r2, r7, #4
    286a:	4b21      	ldr	r3, [pc, #132]	; (28f0 <spi_master_init+0x9c>)
    286c:	0011      	movs	r1, r2
    286e:	0018      	movs	r0, r3
    2870:	4b20      	ldr	r3, [pc, #128]	; (28f4 <spi_master_init+0xa0>)
    2872:	4798      	blx	r3
	
	spi_slave_inst_get_config_defaults(&nrf24l01_slave_config);
    2874:	003b      	movs	r3, r7
    2876:	0018      	movs	r0, r3
    2878:	4b1c      	ldr	r3, [pc, #112]	; (28ec <spi_master_init+0x98>)
    287a:	4798      	blx	r3
	nrf24l01_slave_config.ss_pin = NRF24L01_SS;
    287c:	003b      	movs	r3, r7
    287e:	220c      	movs	r2, #12
    2880:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&nrf24l01_slave_instance, &nrf24l01_slave_config);
    2882:	003a      	movs	r2, r7
    2884:	4b1c      	ldr	r3, [pc, #112]	; (28f8 <spi_master_init+0xa4>)
    2886:	0011      	movs	r1, r2
    2888:	0018      	movs	r0, r3
    288a:	4b1a      	ldr	r3, [pc, #104]	; (28f4 <spi_master_init+0xa0>)
    288c:	4798      	blx	r3
	
	
	/* Configure, initialize and enable SERCOM SPI module */
	spi_get_config_defaults(&config_spi);
    288e:	2308      	movs	r3, #8
    2890:	18fb      	adds	r3, r7, r3
    2892:	0018      	movs	r0, r3
    2894:	4b19      	ldr	r3, [pc, #100]	; (28fc <spi_master_init+0xa8>)
    2896:	4798      	blx	r3
	config_spi.mux_setting = SPI_MUX_SETTING;
    2898:	2308      	movs	r3, #8
    289a:	18fb      	adds	r3, r7, r3
    289c:	22c0      	movs	r2, #192	; 0xc0
    289e:	0392      	lsls	r2, r2, #14
    28a0:	60da      	str	r2, [r3, #12]
	/* Configure pad 0 for data in */
	config_spi.pinmux_pad0 = SPI_MOSI;
    28a2:	2308      	movs	r3, #8
    28a4:	18fb      	adds	r3, r7, r3
    28a6:	4a16      	ldr	r2, [pc, #88]	; (2900 <spi_master_init+0xac>)
    28a8:	629a      	str	r2, [r3, #40]	; 0x28
	/* Configure pad 1 as unused */
	config_spi.pinmux_pad1 = SPI_SCK;
    28aa:	2308      	movs	r3, #8
    28ac:	18fb      	adds	r3, r7, r3
    28ae:	4a15      	ldr	r2, [pc, #84]	; (2904 <spi_master_init+0xb0>)
    28b0:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Configure pad 2 for data out */
	config_spi.pinmux_pad2 = PINMUX_UNUSED;
    28b2:	2308      	movs	r3, #8
    28b4:	18fb      	adds	r3, r7, r3
    28b6:	2201      	movs	r2, #1
    28b8:	4252      	negs	r2, r2
    28ba:	631a      	str	r2, [r3, #48]	; 0x30
	/* Configure pad 3 for SCK */
	config_spi.pinmux_pad3 = SPI_MISO;
    28bc:	2308      	movs	r3, #8
    28be:	18fb      	adds	r3, r7, r3
    28c0:	4a11      	ldr	r2, [pc, #68]	; (2908 <spi_master_init+0xb4>)
    28c2:	635a      	str	r2, [r3, #52]	; 0x34
	config_spi.receiver_enable = true;
    28c4:	2308      	movs	r3, #8
    28c6:	18fb      	adds	r3, r7, r3
    28c8:	2201      	movs	r2, #1
    28ca:	749a      	strb	r2, [r3, #18]
	spi_init(&spi_master_instance, SPI_MODULE, &config_spi); 
    28cc:	2308      	movs	r3, #8
    28ce:	18fa      	adds	r2, r7, r3
    28d0:	490e      	ldr	r1, [pc, #56]	; (290c <spi_master_init+0xb8>)
    28d2:	4b0f      	ldr	r3, [pc, #60]	; (2910 <spi_master_init+0xbc>)
    28d4:	0018      	movs	r0, r3
    28d6:	4b0f      	ldr	r3, [pc, #60]	; (2914 <spi_master_init+0xc0>)
    28d8:	4798      	blx	r3
	spi_enable(&spi_master_instance);
    28da:	4b0d      	ldr	r3, [pc, #52]	; (2910 <spi_master_init+0xbc>)
    28dc:	0018      	movs	r0, r3
    28de:	4b0e      	ldr	r3, [pc, #56]	; (2918 <spi_master_init+0xc4>)
    28e0:	4798      	blx	r3
}
    28e2:	46c0      	nop			; (mov r8, r8)
    28e4:	46bd      	mov	sp, r7
    28e6:	b010      	add	sp, #64	; 0x40
    28e8:	bd80      	pop	{r7, pc}
    28ea:	46c0      	nop			; (mov r8, r8)
    28ec:	00002799 	.word	0x00002799
    28f0:	20000164 	.word	0x20000164
    28f4:	000027bd 	.word	0x000027bd
    28f8:	2000015c 	.word	0x2000015c
    28fc:	00002715 	.word	0x00002715
    2900:	00080002 	.word	0x00080002
    2904:	00090002 	.word	0x00090002
    2908:	000b0002 	.word	0x000b0002
    290c:	42000800 	.word	0x42000800
    2910:	20000168 	.word	0x20000168
    2914:	00003115 	.word	0x00003115
    2918:	00002821 	.word	0x00002821

0000291c <system_pinmux_get_config_defaults>:
{
    291c:	b580      	push	{r7, lr}
    291e:	b082      	sub	sp, #8
    2920:	af00      	add	r7, sp, #0
    2922:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    2924:	687b      	ldr	r3, [r7, #4]
    2926:	2280      	movs	r2, #128	; 0x80
    2928:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    292a:	687b      	ldr	r3, [r7, #4]
    292c:	2200      	movs	r2, #0
    292e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    2930:	687b      	ldr	r3, [r7, #4]
    2932:	2201      	movs	r2, #1
    2934:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    2936:	687b      	ldr	r3, [r7, #4]
    2938:	2200      	movs	r2, #0
    293a:	70da      	strb	r2, [r3, #3]
}
    293c:	46c0      	nop			; (mov r8, r8)
    293e:	46bd      	mov	sp, r7
    2940:	b002      	add	sp, #8
    2942:	bd80      	pop	{r7, pc}

00002944 <system_pinmux_get_group_from_gpio_pin>:
{
    2944:	b580      	push	{r7, lr}
    2946:	b084      	sub	sp, #16
    2948:	af00      	add	r7, sp, #0
    294a:	0002      	movs	r2, r0
    294c:	1dfb      	adds	r3, r7, #7
    294e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    2950:	230f      	movs	r3, #15
    2952:	18fb      	adds	r3, r7, r3
    2954:	1dfa      	adds	r2, r7, #7
    2956:	7812      	ldrb	r2, [r2, #0]
    2958:	09d2      	lsrs	r2, r2, #7
    295a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    295c:	230e      	movs	r3, #14
    295e:	18fb      	adds	r3, r7, r3
    2960:	1dfa      	adds	r2, r7, #7
    2962:	7812      	ldrb	r2, [r2, #0]
    2964:	0952      	lsrs	r2, r2, #5
    2966:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    2968:	4b0d      	ldr	r3, [pc, #52]	; (29a0 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    296a:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    296c:	230f      	movs	r3, #15
    296e:	18fb      	adds	r3, r7, r3
    2970:	781b      	ldrb	r3, [r3, #0]
    2972:	2b00      	cmp	r3, #0
    2974:	d10f      	bne.n	2996 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    2976:	230f      	movs	r3, #15
    2978:	18fb      	adds	r3, r7, r3
    297a:	781b      	ldrb	r3, [r3, #0]
    297c:	009b      	lsls	r3, r3, #2
    297e:	2210      	movs	r2, #16
    2980:	4694      	mov	ip, r2
    2982:	44bc      	add	ip, r7
    2984:	4463      	add	r3, ip
    2986:	3b08      	subs	r3, #8
    2988:	681a      	ldr	r2, [r3, #0]
    298a:	230e      	movs	r3, #14
    298c:	18fb      	adds	r3, r7, r3
    298e:	781b      	ldrb	r3, [r3, #0]
    2990:	01db      	lsls	r3, r3, #7
    2992:	18d3      	adds	r3, r2, r3
    2994:	e000      	b.n	2998 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    2996:	2300      	movs	r3, #0
}
    2998:	0018      	movs	r0, r3
    299a:	46bd      	mov	sp, r7
    299c:	b004      	add	sp, #16
    299e:	bd80      	pop	{r7, pc}
    29a0:	41004400 	.word	0x41004400

000029a4 <system_pinmux_pin_get_mux_position>:
 *
 * \return Currently selected peripheral index on the specified pin.
 */
static inline uint8_t system_pinmux_pin_get_mux_position(
		const uint8_t gpio_pin)
{
    29a4:	b580      	push	{r7, lr}
    29a6:	b086      	sub	sp, #24
    29a8:	af00      	add	r7, sp, #0
    29aa:	0002      	movs	r2, r0
    29ac:	1dfb      	adds	r3, r7, #7
    29ae:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    29b0:	1dfb      	adds	r3, r7, #7
    29b2:	781b      	ldrb	r3, [r3, #0]
    29b4:	0018      	movs	r0, r3
    29b6:	4b19      	ldr	r3, [pc, #100]	; (2a1c <system_pinmux_pin_get_mux_position+0x78>)
    29b8:	4798      	blx	r3
    29ba:	0003      	movs	r3, r0
    29bc:	617b      	str	r3, [r7, #20]
	uint32_t pin_index = (gpio_pin % 32);
    29be:	1dfb      	adds	r3, r7, #7
    29c0:	781b      	ldrb	r3, [r3, #0]
    29c2:	221f      	movs	r2, #31
    29c4:	4013      	ands	r3, r2
    29c6:	613b      	str	r3, [r7, #16]

	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    29c8:	697a      	ldr	r2, [r7, #20]
    29ca:	2140      	movs	r1, #64	; 0x40
    29cc:	693b      	ldr	r3, [r7, #16]
    29ce:	18d3      	adds	r3, r2, r3
    29d0:	185b      	adds	r3, r3, r1
    29d2:	781b      	ldrb	r3, [r3, #0]
    29d4:	b2db      	uxtb	r3, r3
    29d6:	001a      	movs	r2, r3
    29d8:	2301      	movs	r3, #1
    29da:	4013      	ands	r3, r2
    29dc:	d101      	bne.n	29e2 <system_pinmux_pin_get_mux_position+0x3e>
		return SYSTEM_PINMUX_GPIO;
    29de:	2380      	movs	r3, #128	; 0x80
    29e0:	e018      	b.n	2a14 <system_pinmux_pin_get_mux_position+0x70>
	}

	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
    29e2:	693b      	ldr	r3, [r7, #16]
    29e4:	085b      	lsrs	r3, r3, #1
    29e6:	697a      	ldr	r2, [r7, #20]
    29e8:	2130      	movs	r1, #48	; 0x30
    29ea:	18d3      	adds	r3, r2, r3
    29ec:	185b      	adds	r3, r3, r1
    29ee:	781b      	ldrb	r3, [r3, #0]
    29f0:	b2db      	uxtb	r3, r3
    29f2:	60fb      	str	r3, [r7, #12]

	if (pin_index & 1) {
    29f4:	693b      	ldr	r3, [r7, #16]
    29f6:	2201      	movs	r2, #1
    29f8:	4013      	ands	r3, r2
    29fa:	d006      	beq.n	2a0a <system_pinmux_pin_get_mux_position+0x66>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
    29fc:	68fb      	ldr	r3, [r7, #12]
    29fe:	091b      	lsrs	r3, r3, #4
    2a00:	b2db      	uxtb	r3, r3
    2a02:	220f      	movs	r2, #15
    2a04:	4013      	ands	r3, r2
    2a06:	b2db      	uxtb	r3, r3
    2a08:	e004      	b.n	2a14 <system_pinmux_pin_get_mux_position+0x70>
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
    2a0a:	68fb      	ldr	r3, [r7, #12]
    2a0c:	b2db      	uxtb	r3, r3
    2a0e:	220f      	movs	r2, #15
    2a10:	4013      	ands	r3, r2
    2a12:	b2db      	uxtb	r3, r3
	}
}
    2a14:	0018      	movs	r0, r3
    2a16:	46bd      	mov	sp, r7
    2a18:	b006      	add	sp, #24
    2a1a:	bd80      	pop	{r7, pc}
    2a1c:	00002945 	.word	0x00002945

00002a20 <port_get_group_from_gpio_pin>:
{
    2a20:	b580      	push	{r7, lr}
    2a22:	b082      	sub	sp, #8
    2a24:	af00      	add	r7, sp, #0
    2a26:	0002      	movs	r2, r0
    2a28:	1dfb      	adds	r3, r7, #7
    2a2a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    2a2c:	1dfb      	adds	r3, r7, #7
    2a2e:	781b      	ldrb	r3, [r3, #0]
    2a30:	0018      	movs	r0, r3
    2a32:	4b03      	ldr	r3, [pc, #12]	; (2a40 <port_get_group_from_gpio_pin+0x20>)
    2a34:	4798      	blx	r3
    2a36:	0003      	movs	r3, r0
}
    2a38:	0018      	movs	r0, r3
    2a3a:	46bd      	mov	sp, r7
    2a3c:	b002      	add	sp, #8
    2a3e:	bd80      	pop	{r7, pc}
    2a40:	00002945 	.word	0x00002945

00002a44 <port_pin_set_output_level>:
{
    2a44:	b580      	push	{r7, lr}
    2a46:	b084      	sub	sp, #16
    2a48:	af00      	add	r7, sp, #0
    2a4a:	0002      	movs	r2, r0
    2a4c:	1dfb      	adds	r3, r7, #7
    2a4e:	701a      	strb	r2, [r3, #0]
    2a50:	1dbb      	adds	r3, r7, #6
    2a52:	1c0a      	adds	r2, r1, #0
    2a54:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    2a56:	1dfb      	adds	r3, r7, #7
    2a58:	781b      	ldrb	r3, [r3, #0]
    2a5a:	0018      	movs	r0, r3
    2a5c:	4b0d      	ldr	r3, [pc, #52]	; (2a94 <port_pin_set_output_level+0x50>)
    2a5e:	4798      	blx	r3
    2a60:	0003      	movs	r3, r0
    2a62:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    2a64:	1dfb      	adds	r3, r7, #7
    2a66:	781b      	ldrb	r3, [r3, #0]
    2a68:	221f      	movs	r2, #31
    2a6a:	4013      	ands	r3, r2
    2a6c:	2201      	movs	r2, #1
    2a6e:	409a      	lsls	r2, r3
    2a70:	0013      	movs	r3, r2
    2a72:	60bb      	str	r3, [r7, #8]
	if (level) {
    2a74:	1dbb      	adds	r3, r7, #6
    2a76:	781b      	ldrb	r3, [r3, #0]
    2a78:	2b00      	cmp	r3, #0
    2a7a:	d003      	beq.n	2a84 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    2a7c:	68fb      	ldr	r3, [r7, #12]
    2a7e:	68ba      	ldr	r2, [r7, #8]
    2a80:	619a      	str	r2, [r3, #24]
}
    2a82:	e002      	b.n	2a8a <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    2a84:	68fb      	ldr	r3, [r7, #12]
    2a86:	68ba      	ldr	r2, [r7, #8]
    2a88:	615a      	str	r2, [r3, #20]
}
    2a8a:	46c0      	nop			; (mov r8, r8)
    2a8c:	46bd      	mov	sp, r7
    2a8e:	b004      	add	sp, #16
    2a90:	bd80      	pop	{r7, pc}
    2a92:	46c0      	nop			; (mov r8, r8)
    2a94:	00002a21 	.word	0x00002a21

00002a98 <system_gclk_chan_get_config_defaults>:
{
    2a98:	b580      	push	{r7, lr}
    2a9a:	b082      	sub	sp, #8
    2a9c:	af00      	add	r7, sp, #0
    2a9e:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    2aa0:	687b      	ldr	r3, [r7, #4]
    2aa2:	2200      	movs	r2, #0
    2aa4:	701a      	strb	r2, [r3, #0]
}
    2aa6:	46c0      	nop			; (mov r8, r8)
    2aa8:	46bd      	mov	sp, r7
    2aaa:	b002      	add	sp, #8
    2aac:	bd80      	pop	{r7, pc}
	...

00002ab0 <system_apb_clock_set_mask>:
{
    2ab0:	b580      	push	{r7, lr}
    2ab2:	b082      	sub	sp, #8
    2ab4:	af00      	add	r7, sp, #0
    2ab6:	0002      	movs	r2, r0
    2ab8:	6039      	str	r1, [r7, #0]
    2aba:	1dfb      	adds	r3, r7, #7
    2abc:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    2abe:	1dfb      	adds	r3, r7, #7
    2ac0:	781b      	ldrb	r3, [r3, #0]
    2ac2:	2b01      	cmp	r3, #1
    2ac4:	d00a      	beq.n	2adc <system_apb_clock_set_mask+0x2c>
    2ac6:	2b02      	cmp	r3, #2
    2ac8:	d00f      	beq.n	2aea <system_apb_clock_set_mask+0x3a>
    2aca:	2b00      	cmp	r3, #0
    2acc:	d114      	bne.n	2af8 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    2ace:	4b0e      	ldr	r3, [pc, #56]	; (2b08 <system_apb_clock_set_mask+0x58>)
    2ad0:	4a0d      	ldr	r2, [pc, #52]	; (2b08 <system_apb_clock_set_mask+0x58>)
    2ad2:	6991      	ldr	r1, [r2, #24]
    2ad4:	683a      	ldr	r2, [r7, #0]
    2ad6:	430a      	orrs	r2, r1
    2ad8:	619a      	str	r2, [r3, #24]
			break;
    2ada:	e00f      	b.n	2afc <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    2adc:	4b0a      	ldr	r3, [pc, #40]	; (2b08 <system_apb_clock_set_mask+0x58>)
    2ade:	4a0a      	ldr	r2, [pc, #40]	; (2b08 <system_apb_clock_set_mask+0x58>)
    2ae0:	69d1      	ldr	r1, [r2, #28]
    2ae2:	683a      	ldr	r2, [r7, #0]
    2ae4:	430a      	orrs	r2, r1
    2ae6:	61da      	str	r2, [r3, #28]
			break;
    2ae8:	e008      	b.n	2afc <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    2aea:	4b07      	ldr	r3, [pc, #28]	; (2b08 <system_apb_clock_set_mask+0x58>)
    2aec:	4a06      	ldr	r2, [pc, #24]	; (2b08 <system_apb_clock_set_mask+0x58>)
    2aee:	6a11      	ldr	r1, [r2, #32]
    2af0:	683a      	ldr	r2, [r7, #0]
    2af2:	430a      	orrs	r2, r1
    2af4:	621a      	str	r2, [r3, #32]
			break;
    2af6:	e001      	b.n	2afc <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    2af8:	2317      	movs	r3, #23
    2afa:	e000      	b.n	2afe <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    2afc:	2300      	movs	r3, #0
}
    2afe:	0018      	movs	r0, r3
    2b00:	46bd      	mov	sp, r7
    2b02:	b002      	add	sp, #8
    2b04:	bd80      	pop	{r7, pc}
    2b06:	46c0      	nop			; (mov r8, r8)
    2b08:	40000400 	.word	0x40000400

00002b0c <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    2b0c:	b580      	push	{r7, lr}
    2b0e:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    2b10:	4b05      	ldr	r3, [pc, #20]	; (2b28 <system_is_debugger_present+0x1c>)
    2b12:	789b      	ldrb	r3, [r3, #2]
    2b14:	b2db      	uxtb	r3, r3
    2b16:	001a      	movs	r2, r3
    2b18:	2302      	movs	r3, #2
    2b1a:	4013      	ands	r3, r2
    2b1c:	1e5a      	subs	r2, r3, #1
    2b1e:	4193      	sbcs	r3, r2
    2b20:	b2db      	uxtb	r3, r3
}
    2b22:	0018      	movs	r0, r3
    2b24:	46bd      	mov	sp, r7
    2b26:	bd80      	pop	{r7, pc}
    2b28:	41002000 	.word	0x41002000

00002b2c <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
    2b2c:	b580      	push	{r7, lr}
    2b2e:	b084      	sub	sp, #16
    2b30:	af00      	add	r7, sp, #0
    2b32:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2b34:	687b      	ldr	r3, [r7, #4]
    2b36:	681b      	ldr	r3, [r3, #0]
    2b38:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    2b3a:	68fb      	ldr	r3, [r7, #12]
    2b3c:	7e1b      	ldrb	r3, [r3, #24]
    2b3e:	b2db      	uxtb	r3, r3
    2b40:	001a      	movs	r2, r3
    2b42:	2302      	movs	r3, #2
    2b44:	4013      	ands	r3, r2
    2b46:	1e5a      	subs	r2, r3, #1
    2b48:	4193      	sbcs	r3, r2
    2b4a:	b2db      	uxtb	r3, r3
}
    2b4c:	0018      	movs	r0, r3
    2b4e:	46bd      	mov	sp, r7
    2b50:	b004      	add	sp, #16
    2b52:	bd80      	pop	{r7, pc}

00002b54 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
    2b54:	b580      	push	{r7, lr}
    2b56:	b084      	sub	sp, #16
    2b58:	af00      	add	r7, sp, #0
    2b5a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2b5c:	687b      	ldr	r3, [r7, #4]
    2b5e:	681b      	ldr	r3, [r3, #0]
    2b60:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    2b62:	68fb      	ldr	r3, [r7, #12]
    2b64:	7e1b      	ldrb	r3, [r3, #24]
    2b66:	b2db      	uxtb	r3, r3
    2b68:	001a      	movs	r2, r3
    2b6a:	2301      	movs	r3, #1
    2b6c:	4013      	ands	r3, r2
    2b6e:	1e5a      	subs	r2, r3, #1
    2b70:	4193      	sbcs	r3, r2
    2b72:	b2db      	uxtb	r3, r3
}
    2b74:	0018      	movs	r0, r3
    2b76:	46bd      	mov	sp, r7
    2b78:	b004      	add	sp, #16
    2b7a:	bd80      	pop	{r7, pc}

00002b7c <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
    2b7c:	b580      	push	{r7, lr}
    2b7e:	b084      	sub	sp, #16
    2b80:	af00      	add	r7, sp, #0
    2b82:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2b84:	687b      	ldr	r3, [r7, #4]
    2b86:	681b      	ldr	r3, [r3, #0]
    2b88:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    2b8a:	68fb      	ldr	r3, [r7, #12]
    2b8c:	7e1b      	ldrb	r3, [r3, #24]
    2b8e:	b2db      	uxtb	r3, r3
    2b90:	001a      	movs	r2, r3
    2b92:	2304      	movs	r3, #4
    2b94:	4013      	ands	r3, r2
    2b96:	1e5a      	subs	r2, r3, #1
    2b98:	4193      	sbcs	r3, r2
    2b9a:	b2db      	uxtb	r3, r3
}
    2b9c:	0018      	movs	r0, r3
    2b9e:	46bd      	mov	sp, r7
    2ba0:	b004      	add	sp, #16
    2ba2:	bd80      	pop	{r7, pc}

00002ba4 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
    2ba4:	b580      	push	{r7, lr}
    2ba6:	b084      	sub	sp, #16
    2ba8:	af00      	add	r7, sp, #0
    2baa:	6078      	str	r0, [r7, #4]
    2bac:	000a      	movs	r2, r1
    2bae:	1cbb      	adds	r3, r7, #2
    2bb0:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2bb2:	687b      	ldr	r3, [r7, #4]
    2bb4:	681b      	ldr	r3, [r3, #0]
    2bb6:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    2bb8:	687b      	ldr	r3, [r7, #4]
    2bba:	0018      	movs	r0, r3
    2bbc:	4b0a      	ldr	r3, [pc, #40]	; (2be8 <spi_write+0x44>)
    2bbe:	4798      	blx	r3
    2bc0:	0003      	movs	r3, r0
    2bc2:	001a      	movs	r2, r3
    2bc4:	2301      	movs	r3, #1
    2bc6:	4053      	eors	r3, r2
    2bc8:	b2db      	uxtb	r3, r3
    2bca:	2b00      	cmp	r3, #0
    2bcc:	d001      	beq.n	2bd2 <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
    2bce:	2305      	movs	r3, #5
    2bd0:	e006      	b.n	2be0 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    2bd2:	1cbb      	adds	r3, r7, #2
    2bd4:	881b      	ldrh	r3, [r3, #0]
    2bd6:	05db      	lsls	r3, r3, #23
    2bd8:	0dda      	lsrs	r2, r3, #23
    2bda:	68fb      	ldr	r3, [r7, #12]
    2bdc:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
    2bde:	2300      	movs	r3, #0
}
    2be0:	0018      	movs	r0, r3
    2be2:	46bd      	mov	sp, r7
    2be4:	b004      	add	sp, #16
    2be6:	bd80      	pop	{r7, pc}
    2be8:	00002b55 	.word	0x00002b55

00002bec <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
    2bec:	b580      	push	{r7, lr}
    2bee:	b084      	sub	sp, #16
    2bf0:	af00      	add	r7, sp, #0
    2bf2:	6078      	str	r0, [r7, #4]
    2bf4:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2bf6:	687b      	ldr	r3, [r7, #4]
    2bf8:	681b      	ldr	r3, [r3, #0]
    2bfa:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    2bfc:	687b      	ldr	r3, [r7, #4]
    2bfe:	0018      	movs	r0, r3
    2c00:	4b1b      	ldr	r3, [pc, #108]	; (2c70 <spi_read+0x84>)
    2c02:	4798      	blx	r3
    2c04:	0003      	movs	r3, r0
    2c06:	001a      	movs	r2, r3
    2c08:	2301      	movs	r3, #1
    2c0a:	4053      	eors	r3, r2
    2c0c:	b2db      	uxtb	r3, r3
    2c0e:	2b00      	cmp	r3, #0
    2c10:	d001      	beq.n	2c16 <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
    2c12:	2310      	movs	r3, #16
    2c14:	e027      	b.n	2c66 <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
    2c16:	230f      	movs	r3, #15
    2c18:	18fb      	adds	r3, r7, r3
    2c1a:	2200      	movs	r2, #0
    2c1c:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    2c1e:	68bb      	ldr	r3, [r7, #8]
    2c20:	8b5b      	ldrh	r3, [r3, #26]
    2c22:	b29b      	uxth	r3, r3
    2c24:	001a      	movs	r2, r3
    2c26:	2304      	movs	r3, #4
    2c28:	4013      	ands	r3, r2
    2c2a:	d006      	beq.n	2c3a <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
    2c2c:	230f      	movs	r3, #15
    2c2e:	18fb      	adds	r3, r7, r3
    2c30:	221e      	movs	r2, #30
    2c32:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    2c34:	68bb      	ldr	r3, [r7, #8]
    2c36:	2204      	movs	r2, #4
    2c38:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2c3a:	687b      	ldr	r3, [r7, #4]
    2c3c:	799b      	ldrb	r3, [r3, #6]
    2c3e:	2b01      	cmp	r3, #1
    2c40:	d108      	bne.n	2c54 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    2c42:	68bb      	ldr	r3, [r7, #8]
    2c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2c46:	b29b      	uxth	r3, r3
    2c48:	05db      	lsls	r3, r3, #23
    2c4a:	0ddb      	lsrs	r3, r3, #23
    2c4c:	b29a      	uxth	r2, r3
    2c4e:	683b      	ldr	r3, [r7, #0]
    2c50:	801a      	strh	r2, [r3, #0]
    2c52:	e005      	b.n	2c60 <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    2c54:	68bb      	ldr	r3, [r7, #8]
    2c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2c58:	b2db      	uxtb	r3, r3
    2c5a:	b29a      	uxth	r2, r3
    2c5c:	683b      	ldr	r3, [r7, #0]
    2c5e:	801a      	strh	r2, [r3, #0]
	}

	return retval;
    2c60:	230f      	movs	r3, #15
    2c62:	18fb      	adds	r3, r7, r3
    2c64:	781b      	ldrb	r3, [r3, #0]
}
    2c66:	0018      	movs	r0, r3
    2c68:	46bd      	mov	sp, r7
    2c6a:	b004      	add	sp, #16
    2c6c:	bd80      	pop	{r7, pc}
    2c6e:	46c0      	nop			; (mov r8, r8)
    2c70:	00002b7d 	.word	0x00002b7d

00002c74 <_spi_clear_tx_complete_flag>:
 *
 * \param[in]  module  Pointer to the software instance struct
 */
static void _spi_clear_tx_complete_flag(
		struct spi_module *const module)
{
    2c74:	b580      	push	{r7, lr}
    2c76:	b084      	sub	sp, #16
    2c78:	af00      	add	r7, sp, #0
    2c7a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2c7c:	687b      	ldr	r3, [r7, #4]
    2c7e:	681b      	ldr	r3, [r3, #0]
    2c80:	60fb      	str	r3, [r7, #12]

	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    2c82:	68fb      	ldr	r3, [r7, #12]
    2c84:	2202      	movs	r2, #2
    2c86:	761a      	strb	r2, [r3, #24]
}
    2c88:	46c0      	nop			; (mov r8, r8)
    2c8a:	46bd      	mov	sp, r7
    2c8c:	b004      	add	sp, #16
    2c8e:	bd80      	pop	{r7, pc}

00002c90 <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
    2c90:	b590      	push	{r4, r7, lr}
    2c92:	b093      	sub	sp, #76	; 0x4c
    2c94:	af00      	add	r7, sp, #0
    2c96:	6078      	str	r0, [r7, #4]
    2c98:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2c9a:	687b      	ldr	r3, [r7, #4]
    2c9c:	681b      	ldr	r3, [r3, #0]
    2c9e:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
    2ca0:	687b      	ldr	r3, [r7, #4]
    2ca2:	681b      	ldr	r3, [r3, #0]
    2ca4:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    2ca6:	231c      	movs	r3, #28
    2ca8:	18fb      	adds	r3, r7, r3
    2caa:	0018      	movs	r0, r3
    2cac:	4b85      	ldr	r3, [pc, #532]	; (2ec4 <_spi_set_config+0x234>)
    2cae:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2cb0:	231c      	movs	r3, #28
    2cb2:	18fb      	adds	r3, r7, r3
    2cb4:	2200      	movs	r2, #0
    2cb6:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
    2cb8:	683b      	ldr	r3, [r7, #0]
    2cba:	781b      	ldrb	r3, [r3, #0]
    2cbc:	2b00      	cmp	r3, #0
    2cbe:	d103      	bne.n	2cc8 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    2cc0:	231c      	movs	r3, #28
    2cc2:	18fb      	adds	r3, r7, r3
    2cc4:	2200      	movs	r2, #0
    2cc6:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    2cc8:	683b      	ldr	r3, [r7, #0]
    2cca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
    2ccc:	230c      	movs	r3, #12
    2cce:	18fb      	adds	r3, r7, r3
    2cd0:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    2cd2:	683b      	ldr	r3, [r7, #0]
    2cd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
    2cd6:	230c      	movs	r3, #12
    2cd8:	18fb      	adds	r3, r7, r3
    2cda:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
    2cdc:	683b      	ldr	r3, [r7, #0]
    2cde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
    2ce0:	230c      	movs	r3, #12
    2ce2:	18fb      	adds	r3, r7, r3
    2ce4:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
    2ce6:	683b      	ldr	r3, [r7, #0]
    2ce8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
    2cea:	230c      	movs	r3, #12
    2cec:	18fb      	adds	r3, r7, r3
    2cee:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    2cf0:	2347      	movs	r3, #71	; 0x47
    2cf2:	18fb      	adds	r3, r7, r3
    2cf4:	2200      	movs	r2, #0
    2cf6:	701a      	strb	r2, [r3, #0]
    2cf8:	e02c      	b.n	2d54 <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    2cfa:	2347      	movs	r3, #71	; 0x47
    2cfc:	18fb      	adds	r3, r7, r3
    2cfe:	781a      	ldrb	r2, [r3, #0]
    2d00:	230c      	movs	r3, #12
    2d02:	18fb      	adds	r3, r7, r3
    2d04:	0092      	lsls	r2, r2, #2
    2d06:	58d3      	ldr	r3, [r2, r3]
    2d08:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    2d0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    2d0c:	2b00      	cmp	r3, #0
    2d0e:	d109      	bne.n	2d24 <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    2d10:	2347      	movs	r3, #71	; 0x47
    2d12:	18fb      	adds	r3, r7, r3
    2d14:	781a      	ldrb	r2, [r3, #0]
    2d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2d18:	0011      	movs	r1, r2
    2d1a:	0018      	movs	r0, r3
    2d1c:	4b6a      	ldr	r3, [pc, #424]	; (2ec8 <_spi_set_config+0x238>)
    2d1e:	4798      	blx	r3
    2d20:	0003      	movs	r3, r0
    2d22:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    2d24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    2d26:	3301      	adds	r3, #1
    2d28:	d00d      	beq.n	2d46 <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    2d2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    2d2c:	b2da      	uxtb	r2, r3
    2d2e:	231c      	movs	r3, #28
    2d30:	18fb      	adds	r3, r7, r3
    2d32:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    2d34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    2d36:	0c1b      	lsrs	r3, r3, #16
    2d38:	b2db      	uxtb	r3, r3
    2d3a:	221c      	movs	r2, #28
    2d3c:	18ba      	adds	r2, r7, r2
    2d3e:	0011      	movs	r1, r2
    2d40:	0018      	movs	r0, r3
    2d42:	4b62      	ldr	r3, [pc, #392]	; (2ecc <_spi_set_config+0x23c>)
    2d44:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
    2d46:	2347      	movs	r3, #71	; 0x47
    2d48:	18fb      	adds	r3, r7, r3
    2d4a:	781a      	ldrb	r2, [r3, #0]
    2d4c:	2347      	movs	r3, #71	; 0x47
    2d4e:	18fb      	adds	r3, r7, r3
    2d50:	3201      	adds	r2, #1
    2d52:	701a      	strb	r2, [r3, #0]
    2d54:	2347      	movs	r3, #71	; 0x47
    2d56:	18fb      	adds	r3, r7, r3
    2d58:	781b      	ldrb	r3, [r3, #0]
    2d5a:	2b03      	cmp	r3, #3
    2d5c:	d9cd      	bls.n	2cfa <_spi_set_config+0x6a>
		}
	}

	module->mode             = config->mode;
    2d5e:	683b      	ldr	r3, [r7, #0]
    2d60:	781a      	ldrb	r2, [r3, #0]
    2d62:	687b      	ldr	r3, [r7, #4]
    2d64:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
    2d66:	683b      	ldr	r3, [r7, #0]
    2d68:	7c1a      	ldrb	r2, [r3, #16]
    2d6a:	687b      	ldr	r3, [r7, #4]
    2d6c:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
    2d6e:	683b      	ldr	r3, [r7, #0]
    2d70:	7c9a      	ldrb	r2, [r3, #18]
    2d72:	687b      	ldr	r3, [r7, #4]
    2d74:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
    2d76:	683b      	ldr	r3, [r7, #0]
    2d78:	7d1a      	ldrb	r2, [r3, #20]
    2d7a:	687b      	ldr	r3, [r7, #4]
    2d7c:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
    2d7e:	230a      	movs	r3, #10
    2d80:	18fb      	adds	r3, r7, r3
    2d82:	2200      	movs	r2, #0
    2d84:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
    2d86:	2300      	movs	r3, #0
    2d88:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
    2d8a:	2300      	movs	r3, #0
    2d8c:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
    2d8e:	683b      	ldr	r3, [r7, #0]
    2d90:	781b      	ldrb	r3, [r3, #0]
    2d92:	2b01      	cmp	r3, #1
    2d94:	d129      	bne.n	2dea <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    2d96:	687b      	ldr	r3, [r7, #4]
    2d98:	681b      	ldr	r3, [r3, #0]
    2d9a:	0018      	movs	r0, r3
    2d9c:	4b4c      	ldr	r3, [pc, #304]	; (2ed0 <_spi_set_config+0x240>)
    2d9e:	4798      	blx	r3
    2da0:	0003      	movs	r3, r0
    2da2:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    2da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2da6:	3314      	adds	r3, #20
    2da8:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    2daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2dac:	b2db      	uxtb	r3, r3
    2dae:	0018      	movs	r0, r3
    2db0:	4b48      	ldr	r3, [pc, #288]	; (2ed4 <_spi_set_config+0x244>)
    2db2:	4798      	blx	r3
    2db4:	0003      	movs	r3, r0
    2db6:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
    2db8:	683b      	ldr	r3, [r7, #0]
    2dba:	699b      	ldr	r3, [r3, #24]
    2dbc:	2223      	movs	r2, #35	; 0x23
    2dbe:	18bc      	adds	r4, r7, r2
    2dc0:	220a      	movs	r2, #10
    2dc2:	18ba      	adds	r2, r7, r2
    2dc4:	6a79      	ldr	r1, [r7, #36]	; 0x24
    2dc6:	0018      	movs	r0, r3
    2dc8:	4b43      	ldr	r3, [pc, #268]	; (2ed8 <_spi_set_config+0x248>)
    2dca:	4798      	blx	r3
    2dcc:	0003      	movs	r3, r0
    2dce:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
    2dd0:	2323      	movs	r3, #35	; 0x23
    2dd2:	18fb      	adds	r3, r7, r3
    2dd4:	781b      	ldrb	r3, [r3, #0]
    2dd6:	2b00      	cmp	r3, #0
    2dd8:	d001      	beq.n	2dde <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    2dda:	2317      	movs	r3, #23
    2ddc:	e06d      	b.n	2eba <_spi_set_config+0x22a>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
    2dde:	230a      	movs	r3, #10
    2de0:	18fb      	adds	r3, r7, r3
    2de2:	881b      	ldrh	r3, [r3, #0]
    2de4:	b2da      	uxtb	r2, r3
    2de6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2de8:	731a      	strb	r2, [r3, #12]
	}
# endif
# if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    2dea:	683b      	ldr	r3, [r7, #0]
    2dec:	781b      	ldrb	r3, [r3, #0]
    2dee:	2b00      	cmp	r3, #0
    2df0:	d11a      	bne.n	2e28 <_spi_set_config+0x198>
		/* Set frame format */
		ctrla = config->mode_specific.slave.frame_format;
    2df2:	683b      	ldr	r3, [r7, #0]
    2df4:	699b      	ldr	r3, [r3, #24]
    2df6:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;
    2df8:	683b      	ldr	r3, [r7, #0]
    2dfa:	8b9b      	ldrh	r3, [r3, #28]
    2dfc:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
    2dfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    2e02:	683a      	ldr	r2, [r7, #0]
    2e04:	7f92      	ldrb	r2, [r2, #30]
    2e06:	0011      	movs	r1, r2
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    2e08:	683a      	ldr	r2, [r7, #0]
    2e0a:	7fd2      	ldrb	r2, [r2, #31]
    2e0c:	0412      	lsls	r2, r2, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    2e0e:	430a      	orrs	r2, r1
		spi_module->ADDR.reg |=
    2e10:	431a      	orrs	r2, r3
    2e12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2e14:	625a      	str	r2, [r3, #36]	; 0x24

		if (config->mode_specific.slave.preload_enable) {
    2e16:	683b      	ldr	r3, [r7, #0]
    2e18:	2220      	movs	r2, #32
    2e1a:	5c9b      	ldrb	r3, [r3, r2]
    2e1c:	2b00      	cmp	r3, #0
    2e1e:	d003      	beq.n	2e28 <_spi_set_config+0x198>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    2e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2e22:	2240      	movs	r2, #64	; 0x40
    2e24:	4313      	orrs	r3, r2
    2e26:	63bb      	str	r3, [r7, #56]	; 0x38
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
    2e28:	683b      	ldr	r3, [r7, #0]
    2e2a:	685b      	ldr	r3, [r3, #4]
    2e2c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    2e2e:	4313      	orrs	r3, r2
    2e30:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    2e32:	683b      	ldr	r3, [r7, #0]
    2e34:	689b      	ldr	r3, [r3, #8]
    2e36:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    2e38:	4313      	orrs	r3, r2
    2e3a:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    2e3c:	683b      	ldr	r3, [r7, #0]
    2e3e:	68db      	ldr	r3, [r3, #12]
    2e40:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    2e42:	4313      	orrs	r3, r2
    2e44:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
    2e46:	683b      	ldr	r3, [r7, #0]
    2e48:	7c1b      	ldrb	r3, [r3, #16]
    2e4a:	001a      	movs	r2, r3
    2e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2e4e:	4313      	orrs	r3, r2
    2e50:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    2e52:	683b      	ldr	r3, [r7, #0]
    2e54:	7c5b      	ldrb	r3, [r3, #17]
    2e56:	2b00      	cmp	r3, #0
    2e58:	d103      	bne.n	2e62 <_spi_set_config+0x1d2>
    2e5a:	4b20      	ldr	r3, [pc, #128]	; (2edc <_spi_set_config+0x24c>)
    2e5c:	4798      	blx	r3
    2e5e:	1e03      	subs	r3, r0, #0
    2e60:	d003      	beq.n	2e6a <_spi_set_config+0x1da>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    2e62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2e64:	2280      	movs	r2, #128	; 0x80
    2e66:	4313      	orrs	r3, r2
    2e68:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
    2e6a:	683b      	ldr	r3, [r7, #0]
    2e6c:	7c9b      	ldrb	r3, [r3, #18]
    2e6e:	2b00      	cmp	r3, #0
    2e70:	d004      	beq.n	2e7c <_spi_set_config+0x1ec>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    2e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2e74:	2280      	movs	r2, #128	; 0x80
    2e76:	0292      	lsls	r2, r2, #10
    2e78:	4313      	orrs	r3, r2
    2e7a:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    2e7c:	683b      	ldr	r3, [r7, #0]
    2e7e:	7cdb      	ldrb	r3, [r3, #19]
    2e80:	2b00      	cmp	r3, #0
    2e82:	d004      	beq.n	2e8e <_spi_set_config+0x1fe>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    2e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2e86:	2280      	movs	r2, #128	; 0x80
    2e88:	0092      	lsls	r2, r2, #2
    2e8a:	4313      	orrs	r3, r2
    2e8c:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    2e8e:	683b      	ldr	r3, [r7, #0]
    2e90:	7d1b      	ldrb	r3, [r3, #20]
    2e92:	2b00      	cmp	r3, #0
    2e94:	d004      	beq.n	2ea0 <_spi_set_config+0x210>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    2e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2e98:	2280      	movs	r2, #128	; 0x80
    2e9a:	0192      	lsls	r2, r2, #6
    2e9c:	4313      	orrs	r3, r2
    2e9e:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
    2ea0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2ea2:	681a      	ldr	r2, [r3, #0]
    2ea4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2ea6:	431a      	orrs	r2, r3
    2ea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2eaa:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
    2eac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2eae:	685a      	ldr	r2, [r3, #4]
    2eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2eb2:	431a      	orrs	r2, r3
    2eb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2eb6:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
    2eb8:	2300      	movs	r3, #0
}
    2eba:	0018      	movs	r0, r3
    2ebc:	46bd      	mov	sp, r7
    2ebe:	b013      	add	sp, #76	; 0x4c
    2ec0:	bd90      	pop	{r4, r7, pc}
    2ec2:	46c0      	nop			; (mov r8, r8)
    2ec4:	0000291d 	.word	0x0000291d
    2ec8:	00000d9d 	.word	0x00000d9d
    2ecc:	00004355 	.word	0x00004355
    2ed0:	00000f59 	.word	0x00000f59
    2ed4:	0000418d 	.word	0x0000418d
    2ed8:	00000c93 	.word	0x00000c93
    2edc:	00002b0d 	.word	0x00002b0d

00002ee0 <_spi_check_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_check_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
    2ee0:	b590      	push	{r4, r7, lr}
    2ee2:	b091      	sub	sp, #68	; 0x44
    2ee4:	af00      	add	r7, sp, #0
    2ee6:	6078      	str	r0, [r7, #4]
    2ee8:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2eea:	687b      	ldr	r3, [r7, #4]
    2eec:	681b      	ldr	r3, [r3, #0]
    2eee:	62fb      	str	r3, [r7, #44]	; 0x2c
	Sercom *const hw = module->hw;
    2ef0:	687b      	ldr	r3, [r7, #4]
    2ef2:	681b      	ldr	r3, [r3, #0]
    2ef4:	62bb      	str	r3, [r7, #40]	; 0x28

	uint32_t pad_pinmuxes[] = {
		config->pinmux_pad0, config->pinmux_pad1,
    2ef6:	683b      	ldr	r3, [r7, #0]
    2ef8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
    2efa:	230c      	movs	r3, #12
    2efc:	18fb      	adds	r3, r7, r3
    2efe:	601a      	str	r2, [r3, #0]
		config->pinmux_pad0, config->pinmux_pad1,
    2f00:	683b      	ldr	r3, [r7, #0]
    2f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
    2f04:	230c      	movs	r3, #12
    2f06:	18fb      	adds	r3, r7, r3
    2f08:	605a      	str	r2, [r3, #4]
		config->pinmux_pad2, config->pinmux_pad3
    2f0a:	683b      	ldr	r3, [r7, #0]
    2f0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
    2f0e:	230c      	movs	r3, #12
    2f10:	18fb      	adds	r3, r7, r3
    2f12:	609a      	str	r2, [r3, #8]
		config->pinmux_pad2, config->pinmux_pad3
    2f14:	683b      	ldr	r3, [r7, #0]
    2f16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
    2f18:	230c      	movs	r3, #12
    2f1a:	18fb      	adds	r3, r7, r3
    2f1c:	60da      	str	r2, [r3, #12]
	};

	/* Compare the current SERCOM pins against the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    2f1e:	233f      	movs	r3, #63	; 0x3f
    2f20:	18fb      	adds	r3, r7, r3
    2f22:	2200      	movs	r2, #0
    2f24:	701a      	strb	r2, [r3, #0]
    2f26:	e030      	b.n	2f8a <_spi_check_config+0xaa>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    2f28:	233f      	movs	r3, #63	; 0x3f
    2f2a:	18fb      	adds	r3, r7, r3
    2f2c:	781a      	ldrb	r2, [r3, #0]
    2f2e:	230c      	movs	r3, #12
    2f30:	18fb      	adds	r3, r7, r3
    2f32:	0092      	lsls	r2, r2, #2
    2f34:	58d3      	ldr	r3, [r2, r3]
    2f36:	63bb      	str	r3, [r7, #56]	; 0x38

		if (current_pinmux == PINMUX_DEFAULT) {
    2f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2f3a:	2b00      	cmp	r3, #0
    2f3c:	d109      	bne.n	2f52 <_spi_check_config+0x72>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    2f3e:	233f      	movs	r3, #63	; 0x3f
    2f40:	18fb      	adds	r3, r7, r3
    2f42:	781a      	ldrb	r2, [r3, #0]
    2f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2f46:	0011      	movs	r1, r2
    2f48:	0018      	movs	r0, r3
    2f4a:	4b6e      	ldr	r3, [pc, #440]	; (3104 <_spi_check_config+0x224>)
    2f4c:	4798      	blx	r3
    2f4e:	0003      	movs	r3, r0
    2f50:	63bb      	str	r3, [r7, #56]	; 0x38
		}

		if (current_pinmux == PINMUX_UNUSED) {
    2f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2f54:	3301      	adds	r3, #1
    2f56:	d010      	beq.n	2f7a <_spi_check_config+0x9a>
			continue;
		}

		if ((current_pinmux & 0xFFFF) !=
    2f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2f5a:	041b      	lsls	r3, r3, #16
    2f5c:	0c1c      	lsrs	r4, r3, #16
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
    2f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2f60:	0c1b      	lsrs	r3, r3, #16
    2f62:	b2db      	uxtb	r3, r3
    2f64:	0018      	movs	r0, r3
    2f66:	4b68      	ldr	r3, [pc, #416]	; (3108 <_spi_check_config+0x228>)
    2f68:	4798      	blx	r3
    2f6a:	0003      	movs	r3, r0
		if ((current_pinmux & 0xFFFF) !=
    2f6c:	429c      	cmp	r4, r3
    2f6e:	d005      	beq.n	2f7c <_spi_check_config+0x9c>
			module->hw = NULL;
    2f70:	687b      	ldr	r3, [r7, #4]
    2f72:	2200      	movs	r2, #0
    2f74:	601a      	str	r2, [r3, #0]
			return STATUS_ERR_DENIED;
    2f76:	231c      	movs	r3, #28
    2f78:	e0bf      	b.n	30fa <_spi_check_config+0x21a>
			continue;
    2f7a:	46c0      	nop			; (mov r8, r8)
	for (uint8_t pad = 0; pad < 4; pad++) {
    2f7c:	233f      	movs	r3, #63	; 0x3f
    2f7e:	18fb      	adds	r3, r7, r3
    2f80:	781a      	ldrb	r2, [r3, #0]
    2f82:	233f      	movs	r3, #63	; 0x3f
    2f84:	18fb      	adds	r3, r7, r3
    2f86:	3201      	adds	r2, #1
    2f88:	701a      	strb	r2, [r3, #0]
    2f8a:	233f      	movs	r3, #63	; 0x3f
    2f8c:	18fb      	adds	r3, r7, r3
    2f8e:	781b      	ldrb	r3, [r3, #0]
    2f90:	2b03      	cmp	r3, #3
    2f92:	d9c9      	bls.n	2f28 <_spi_check_config+0x48>
	}

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to read BAUD register */
	uint16_t baud;
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
    2f94:	2013      	movs	r0, #19
    2f96:	4b5d      	ldr	r3, [pc, #372]	; (310c <_spi_check_config+0x22c>)
    2f98:	4798      	blx	r3
    2f9a:	0003      	movs	r3, r0
    2f9c:	627b      	str	r3, [r7, #36]	; 0x24
#  endif
	/* Value to read CTRLA, CTRLB and ADDR register */
	uint32_t ctrla = 0;
    2f9e:	2300      	movs	r3, #0
    2fa0:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t ctrlb = 0;
    2fa2:	2300      	movs	r3, #0
    2fa4:	633b      	str	r3, [r7, #48]	; 0x30
#  if CONF_SPI_SLAVE_ENABLE == true
	uint32_t addr = 0;
    2fa6:	2300      	movs	r3, #0
    2fa8:	623b      	str	r3, [r7, #32]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and compare it */
	if (config->mode == SPI_MODE_MASTER) {
    2faa:	683b      	ldr	r3, [r7, #0]
    2fac:	781b      	ldrb	r3, [r3, #0]
    2fae:	2b01      	cmp	r3, #1
    2fb0:	d121      	bne.n	2ff6 <_spi_check_config+0x116>
		enum status_code error_code = _sercom_get_sync_baud_val(
    2fb2:	683b      	ldr	r3, [r7, #0]
    2fb4:	699b      	ldr	r3, [r3, #24]
    2fb6:	221f      	movs	r2, #31
    2fb8:	18bc      	adds	r4, r7, r2
    2fba:	220a      	movs	r2, #10
    2fbc:	18ba      	adds	r2, r7, r2
    2fbe:	6a79      	ldr	r1, [r7, #36]	; 0x24
    2fc0:	0018      	movs	r0, r3
    2fc2:	4b53      	ldr	r3, [pc, #332]	; (3110 <_spi_check_config+0x230>)
    2fc4:	4798      	blx	r3
    2fc6:	0003      	movs	r3, r0
    2fc8:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				external_clock, &baud);

		if (error_code != STATUS_OK) {
    2fca:	231f      	movs	r3, #31
    2fcc:	18fb      	adds	r3, r7, r3
    2fce:	781b      	ldrb	r3, [r3, #0]
    2fd0:	2b00      	cmp	r3, #0
    2fd2:	d001      	beq.n	2fd8 <_spi_check_config+0xf8>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    2fd4:	2317      	movs	r3, #23
    2fd6:	e090      	b.n	30fa <_spi_check_config+0x21a>
		}

		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    2fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2fda:	7b1b      	ldrb	r3, [r3, #12]
    2fdc:	b2da      	uxtb	r2, r3
    2fde:	230a      	movs	r3, #10
    2fe0:	18fb      	adds	r3, r7, r3
    2fe2:	881b      	ldrh	r3, [r3, #0]
    2fe4:	b2db      	uxtb	r3, r3
    2fe6:	429a      	cmp	r2, r3
    2fe8:	d001      	beq.n	2fee <_spi_check_config+0x10e>
			return STATUS_ERR_DENIED;
    2fea:	231c      	movs	r3, #28
    2fec:	e085      	b.n	30fa <_spi_check_config+0x21a>
		}

		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
    2fee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2ff0:	220c      	movs	r2, #12
    2ff2:	4313      	orrs	r3, r2
    2ff4:	637b      	str	r3, [r7, #52]	; 0x34
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    2ff6:	683b      	ldr	r3, [r7, #0]
    2ff8:	781b      	ldrb	r3, [r3, #0]
    2ffa:	2b00      	cmp	r3, #0
    2ffc:	d129      	bne.n	3052 <_spi_check_config+0x172>

		/* Set frame format */
		ctrla |= config->mode_specific.slave.frame_format;
    2ffe:	683b      	ldr	r3, [r7, #0]
    3000:	699b      	ldr	r3, [r3, #24]
    3002:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    3004:	4313      	orrs	r3, r2
    3006:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set address mode */
		ctrlb |= config->mode_specific.slave.address_mode;
    3008:	683b      	ldr	r3, [r7, #0]
    300a:	8b9b      	ldrh	r3, [r3, #28]
    300c:	001a      	movs	r2, r3
    300e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3010:	4313      	orrs	r3, r2
    3012:	633b      	str	r3, [r7, #48]	; 0x30

		/* Set address and address mask*/
		addr |= (config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    3014:	683b      	ldr	r3, [r7, #0]
    3016:	7f9b      	ldrb	r3, [r3, #30]
    3018:	001a      	movs	r2, r3
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    301a:	683b      	ldr	r3, [r7, #0]
    301c:	7fdb      	ldrb	r3, [r3, #31]
    301e:	041b      	lsls	r3, r3, #16
		addr |= (config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    3020:	4313      	orrs	r3, r2
    3022:	001a      	movs	r2, r3
    3024:	6a3b      	ldr	r3, [r7, #32]
    3026:	4313      	orrs	r3, r2
    3028:	623b      	str	r3, [r7, #32]
		if (spi_module->CTRLA.reg != addr) {
    302a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    302c:	681a      	ldr	r2, [r3, #0]
    302e:	6a3b      	ldr	r3, [r7, #32]
    3030:	429a      	cmp	r2, r3
    3032:	d001      	beq.n	3038 <_spi_check_config+0x158>
			return STATUS_ERR_DENIED;
    3034:	231c      	movs	r3, #28
    3036:	e060      	b.n	30fa <_spi_check_config+0x21a>
		}

		if (config->mode_specific.slave.preload_enable) {
    3038:	683b      	ldr	r3, [r7, #0]
    303a:	2220      	movs	r2, #32
    303c:	5c9b      	ldrb	r3, [r3, r2]
    303e:	2b00      	cmp	r3, #0
    3040:	d003      	beq.n	304a <_spi_check_config+0x16a>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    3042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3044:	2240      	movs	r2, #64	; 0x40
    3046:	4313      	orrs	r3, r2
    3048:	633b      	str	r3, [r7, #48]	; 0x30
		}
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x2);
    304a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    304c:	2208      	movs	r2, #8
    304e:	4313      	orrs	r3, r2
    3050:	637b      	str	r3, [r7, #52]	; 0x34
	}
#  endif
	/* Set data order */
	ctrla |= config->data_order;
    3052:	683b      	ldr	r3, [r7, #0]
    3054:	685b      	ldr	r3, [r3, #4]
    3056:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    3058:	4313      	orrs	r3, r2
    305a:	637b      	str	r3, [r7, #52]	; 0x34

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    305c:	683b      	ldr	r3, [r7, #0]
    305e:	689b      	ldr	r3, [r3, #8]
    3060:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    3062:	4313      	orrs	r3, r2
    3064:	637b      	str	r3, [r7, #52]	; 0x34

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    3066:	683b      	ldr	r3, [r7, #0]
    3068:	68db      	ldr	r3, [r3, #12]
    306a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    306c:	4313      	orrs	r3, r2
    306e:	637b      	str	r3, [r7, #52]	; 0x34

	/* Set SPI character size */
	ctrlb |= config->character_size;
    3070:	683b      	ldr	r3, [r7, #0]
    3072:	7c1b      	ldrb	r3, [r3, #16]
    3074:	001a      	movs	r2, r3
    3076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3078:	4313      	orrs	r3, r2
    307a:	633b      	str	r3, [r7, #48]	; 0x30

	if (config->run_in_standby) {
    307c:	683b      	ldr	r3, [r7, #0]
    307e:	7c5b      	ldrb	r3, [r3, #17]
    3080:	2b00      	cmp	r3, #0
    3082:	d003      	beq.n	308c <_spi_check_config+0x1ac>
		/* Enable in sleep mode */
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    3084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3086:	2280      	movs	r2, #128	; 0x80
    3088:	4313      	orrs	r3, r2
    308a:	637b      	str	r3, [r7, #52]	; 0x34
	}

	if (config->receiver_enable) {
    308c:	683b      	ldr	r3, [r7, #0]
    308e:	7c9b      	ldrb	r3, [r3, #18]
    3090:	2b00      	cmp	r3, #0
    3092:	d004      	beq.n	309e <_spi_check_config+0x1be>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    3094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3096:	2280      	movs	r2, #128	; 0x80
    3098:	0292      	lsls	r2, r2, #10
    309a:	4313      	orrs	r3, r2
    309c:	633b      	str	r3, [r7, #48]	; 0x30
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    309e:	683b      	ldr	r3, [r7, #0]
    30a0:	7cdb      	ldrb	r3, [r3, #19]
    30a2:	2b00      	cmp	r3, #0
    30a4:	d004      	beq.n	30b0 <_spi_check_config+0x1d0>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    30a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    30a8:	2280      	movs	r2, #128	; 0x80
    30aa:	0092      	lsls	r2, r2, #2
    30ac:	4313      	orrs	r3, r2
    30ae:	633b      	str	r3, [r7, #48]	; 0x30
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    30b0:	683b      	ldr	r3, [r7, #0]
    30b2:	7d1b      	ldrb	r3, [r3, #20]
    30b4:	2b00      	cmp	r3, #0
    30b6:	d004      	beq.n	30c2 <_spi_check_config+0x1e2>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    30b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    30ba:	2280      	movs	r2, #128	; 0x80
    30bc:	0192      	lsls	r2, r2, #6
    30be:	4313      	orrs	r3, r2
    30c0:	633b      	str	r3, [r7, #48]	; 0x30
	}
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
    30c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    30c4:	2202      	movs	r2, #2
    30c6:	4313      	orrs	r3, r2
    30c8:	637b      	str	r3, [r7, #52]	; 0x34

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
    30ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    30cc:	681a      	ldr	r2, [r3, #0]
    30ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    30d0:	429a      	cmp	r2, r3
    30d2:	d10e      	bne.n	30f2 <_spi_check_config+0x212>
			spi_module->CTRLB.reg == ctrlb) {
    30d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    30d6:	685a      	ldr	r2, [r3, #4]
	if (spi_module->CTRLA.reg == ctrla &&
    30d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    30da:	429a      	cmp	r2, r3
    30dc:	d109      	bne.n	30f2 <_spi_check_config+0x212>
		module->mode           = config->mode;
    30de:	683b      	ldr	r3, [r7, #0]
    30e0:	781a      	ldrb	r2, [r3, #0]
    30e2:	687b      	ldr	r3, [r7, #4]
    30e4:	715a      	strb	r2, [r3, #5]
		module->character_size = config->character_size;
    30e6:	683b      	ldr	r3, [r7, #0]
    30e8:	7c1a      	ldrb	r2, [r3, #16]
    30ea:	687b      	ldr	r3, [r7, #4]
    30ec:	719a      	strb	r2, [r3, #6]
		return STATUS_OK;
    30ee:	2300      	movs	r3, #0
    30f0:	e003      	b.n	30fa <_spi_check_config+0x21a>
	}

	/* Not same config, wipe module pointer and return */
	module->hw = NULL;
    30f2:	687b      	ldr	r3, [r7, #4]
    30f4:	2200      	movs	r2, #0
    30f6:	601a      	str	r2, [r3, #0]

	return STATUS_ERR_DENIED;
    30f8:	231c      	movs	r3, #28
}
    30fa:	0018      	movs	r0, r3
    30fc:	46bd      	mov	sp, r7
    30fe:	b011      	add	sp, #68	; 0x44
    3100:	bd90      	pop	{r4, r7, pc}
    3102:	46c0      	nop			; (mov r8, r8)
    3104:	00000d9d 	.word	0x00000d9d
    3108:	000029a5 	.word	0x000029a5
    310c:	0000418d 	.word	0x0000418d
    3110:	00000c93 	.word	0x00000c93

00003114 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    3114:	b580      	push	{r7, lr}
    3116:	b08a      	sub	sp, #40	; 0x28
    3118:	af00      	add	r7, sp, #0
    311a:	60f8      	str	r0, [r7, #12]
    311c:	60b9      	str	r1, [r7, #8]
    311e:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    3120:	68fb      	ldr	r3, [r7, #12]
    3122:	68ba      	ldr	r2, [r7, #8]
    3124:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
    3126:	68fb      	ldr	r3, [r7, #12]
    3128:	681b      	ldr	r3, [r3, #0]
    312a:	627b      	str	r3, [r7, #36]	; 0x24

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    312c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    312e:	681b      	ldr	r3, [r3, #0]
    3130:	2202      	movs	r2, #2
    3132:	4013      	ands	r3, r2
    3134:	d007      	beq.n	3146 <spi_init+0x32>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
    3136:	687a      	ldr	r2, [r7, #4]
    3138:	68fb      	ldr	r3, [r7, #12]
    313a:	0011      	movs	r1, r2
    313c:	0018      	movs	r0, r3
    313e:	4b2f      	ldr	r3, [pc, #188]	; (31fc <spi_init+0xe8>)
    3140:	4798      	blx	r3
    3142:	0003      	movs	r3, r0
    3144:	e055      	b.n	31f2 <spi_init+0xde>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    3146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3148:	681b      	ldr	r3, [r3, #0]
    314a:	2201      	movs	r2, #1
    314c:	4013      	ands	r3, r2
    314e:	d001      	beq.n	3154 <spi_init+0x40>
		return STATUS_BUSY;
    3150:	2305      	movs	r3, #5
    3152:	e04e      	b.n	31f2 <spi_init+0xde>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    3154:	68fb      	ldr	r3, [r7, #12]
    3156:	681b      	ldr	r3, [r3, #0]
    3158:	0018      	movs	r0, r3
    315a:	4b29      	ldr	r3, [pc, #164]	; (3200 <spi_init+0xec>)
    315c:	4798      	blx	r3
    315e:	0003      	movs	r3, r0
    3160:	623b      	str	r3, [r7, #32]
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    3162:	6a3b      	ldr	r3, [r7, #32]
    3164:	3302      	adds	r3, #2
    3166:	61fb      	str	r3, [r7, #28]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    3168:	6a3b      	ldr	r3, [r7, #32]
    316a:	3314      	adds	r3, #20
    316c:	61bb      	str	r3, [r7, #24]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    316e:	2201      	movs	r2, #1
    3170:	69fb      	ldr	r3, [r7, #28]
    3172:	409a      	lsls	r2, r3
    3174:	0013      	movs	r3, r2
    3176:	0019      	movs	r1, r3
    3178:	2002      	movs	r0, #2
    317a:	4b22      	ldr	r3, [pc, #136]	; (3204 <spi_init+0xf0>)
    317c:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    317e:	2314      	movs	r3, #20
    3180:	18fb      	adds	r3, r7, r3
    3182:	0018      	movs	r0, r3
    3184:	4b20      	ldr	r3, [pc, #128]	; (3208 <spi_init+0xf4>)
    3186:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    3188:	687b      	ldr	r3, [r7, #4]
    318a:	2224      	movs	r2, #36	; 0x24
    318c:	5c9a      	ldrb	r2, [r3, r2]
    318e:	2314      	movs	r3, #20
    3190:	18fb      	adds	r3, r7, r3
    3192:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    3194:	69bb      	ldr	r3, [r7, #24]
    3196:	b2db      	uxtb	r3, r3
    3198:	2214      	movs	r2, #20
    319a:	18ba      	adds	r2, r7, r2
    319c:	0011      	movs	r1, r2
    319e:	0018      	movs	r0, r3
    31a0:	4b1a      	ldr	r3, [pc, #104]	; (320c <spi_init+0xf8>)
    31a2:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    31a4:	69bb      	ldr	r3, [r7, #24]
    31a6:	b2db      	uxtb	r3, r3
    31a8:	0018      	movs	r0, r3
    31aa:	4b19      	ldr	r3, [pc, #100]	; (3210 <spi_init+0xfc>)
    31ac:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    31ae:	687b      	ldr	r3, [r7, #4]
    31b0:	2224      	movs	r2, #36	; 0x24
    31b2:	5c9b      	ldrb	r3, [r3, r2]
    31b4:	2100      	movs	r1, #0
    31b6:	0018      	movs	r0, r3
    31b8:	4b16      	ldr	r3, [pc, #88]	; (3214 <spi_init+0x100>)
    31ba:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    31bc:	687b      	ldr	r3, [r7, #4]
    31be:	781b      	ldrb	r3, [r3, #0]
    31c0:	2b01      	cmp	r3, #1
    31c2:	d105      	bne.n	31d0 <spi_init+0xbc>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    31c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    31c6:	681b      	ldr	r3, [r3, #0]
    31c8:	220c      	movs	r2, #12
    31ca:	431a      	orrs	r2, r3
    31cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    31ce:	601a      	str	r2, [r3, #0]
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    31d0:	687b      	ldr	r3, [r7, #4]
    31d2:	781b      	ldrb	r3, [r3, #0]
    31d4:	2b00      	cmp	r3, #0
    31d6:	d105      	bne.n	31e4 <spi_init+0xd0>
		/* Set the SERCOM in SPI slave mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    31d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    31da:	681b      	ldr	r3, [r3, #0]
    31dc:	2208      	movs	r2, #8
    31de:	431a      	orrs	r2, r3
    31e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    31e2:	601a      	str	r2, [r3, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
    31e4:	687a      	ldr	r2, [r7, #4]
    31e6:	68fb      	ldr	r3, [r7, #12]
    31e8:	0011      	movs	r1, r2
    31ea:	0018      	movs	r0, r3
    31ec:	4b0a      	ldr	r3, [pc, #40]	; (3218 <spi_init+0x104>)
    31ee:	4798      	blx	r3
    31f0:	0003      	movs	r3, r0
}
    31f2:	0018      	movs	r0, r3
    31f4:	46bd      	mov	sp, r7
    31f6:	b00a      	add	sp, #40	; 0x28
    31f8:	bd80      	pop	{r7, pc}
    31fa:	46c0      	nop			; (mov r8, r8)
    31fc:	00002ee1 	.word	0x00002ee1
    3200:	00000f59 	.word	0x00000f59
    3204:	00002ab1 	.word	0x00002ab1
    3208:	00002a99 	.word	0x00002a99
    320c:	00004069 	.word	0x00004069
    3210:	000040ad 	.word	0x000040ad
    3214:	00000d11 	.word	0x00000d11
    3218:	00002c91 	.word	0x00002c91

0000321c <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    321c:	b590      	push	{r4, r7, lr}
    321e:	b089      	sub	sp, #36	; 0x24
    3220:	af00      	add	r7, sp, #0
    3222:	60f8      	str	r0, [r7, #12]
    3224:	60b9      	str	r1, [r7, #8]
    3226:	0019      	movs	r1, r3
    3228:	1dbb      	adds	r3, r7, #6
    322a:	801a      	strh	r2, [r3, #0]
    322c:	1d3b      	adds	r3, r7, #4
    322e:	1c0a      	adds	r2, r1, #0
    3230:	801a      	strh	r2, [r3, #0]
		return STATUS_BUSY;
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
    3232:	1dbb      	adds	r3, r7, #6
    3234:	881b      	ldrh	r3, [r3, #0]
    3236:	2b00      	cmp	r3, #0
    3238:	d101      	bne.n	323e <spi_read_buffer_wait+0x22>
		return STATUS_ERR_INVALID_ARG;
    323a:	2317      	movs	r3, #23
    323c:	e0b2      	b.n	33a4 <spi_read_buffer_wait+0x188>
	}

	if (!(module->receiver_enabled)) {
    323e:	68fb      	ldr	r3, [r7, #12]
    3240:	79db      	ldrb	r3, [r3, #7]
    3242:	2201      	movs	r2, #1
    3244:	4053      	eors	r3, r2
    3246:	b2db      	uxtb	r3, r3
    3248:	2b00      	cmp	r3, #0
    324a:	d001      	beq.n	3250 <spi_read_buffer_wait+0x34>
		return STATUS_ERR_DENIED;
    324c:	231c      	movs	r3, #28
    324e:	e0a9      	b.n	33a4 <spi_read_buffer_wait+0x188>
	}
#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    3250:	68fb      	ldr	r3, [r7, #12]
    3252:	795b      	ldrb	r3, [r3, #5]
    3254:	2b00      	cmp	r3, #0
    3256:	d109      	bne.n	326c <spi_read_buffer_wait+0x50>
    3258:	68fb      	ldr	r3, [r7, #12]
    325a:	0018      	movs	r0, r3
    325c:	4b53      	ldr	r3, [pc, #332]	; (33ac <spi_read_buffer_wait+0x190>)
    325e:	4798      	blx	r3
    3260:	1e03      	subs	r3, r0, #0
    3262:	d003      	beq.n	326c <spi_read_buffer_wait+0x50>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
    3264:	68fb      	ldr	r3, [r7, #12]
    3266:	0018      	movs	r0, r3
    3268:	4b51      	ldr	r3, [pc, #324]	; (33b0 <spi_read_buffer_wait+0x194>)
    326a:	4798      	blx	r3
	}
#  endif
	uint16_t rx_pos = 0;
    326c:	231e      	movs	r3, #30
    326e:	18fb      	adds	r3, r7, r3
    3270:	2200      	movs	r2, #0
    3272:	801a      	strh	r2, [r3, #0]

	while (length--) {
    3274:	e08d      	b.n	3392 <spi_read_buffer_wait+0x176>
#  if CONF_SPI_MASTER_ENABLE == true
		if (module->mode == SPI_MODE_MASTER) {
    3276:	68fb      	ldr	r3, [r7, #12]
    3278:	795b      	ldrb	r3, [r3, #5]
    327a:	2b01      	cmp	r3, #1
    327c:	d112      	bne.n	32a4 <spi_read_buffer_wait+0x88>
			/* Wait until the module is ready to write a character */
			while (!spi_is_ready_to_write(module)) {
    327e:	46c0      	nop			; (mov r8, r8)
    3280:	68fb      	ldr	r3, [r7, #12]
    3282:	0018      	movs	r0, r3
    3284:	4b4b      	ldr	r3, [pc, #300]	; (33b4 <spi_read_buffer_wait+0x198>)
    3286:	4798      	blx	r3
    3288:	0003      	movs	r3, r0
    328a:	001a      	movs	r2, r3
    328c:	2301      	movs	r3, #1
    328e:	4053      	eors	r3, r2
    3290:	b2db      	uxtb	r3, r3
    3292:	2b00      	cmp	r3, #0
    3294:	d1f4      	bne.n	3280 <spi_read_buffer_wait+0x64>
			}

			/* Send dummy SPI character to read in master mode */
			spi_write(module, dummy);
    3296:	1d3b      	adds	r3, r7, #4
    3298:	881a      	ldrh	r2, [r3, #0]
    329a:	68fb      	ldr	r3, [r7, #12]
    329c:	0011      	movs	r1, r2
    329e:	0018      	movs	r0, r3
    32a0:	4b45      	ldr	r3, [pc, #276]	; (33b8 <spi_read_buffer_wait+0x19c>)
    32a2:	4798      	blx	r3
		}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
    32a4:	68fb      	ldr	r3, [r7, #12]
    32a6:	795b      	ldrb	r3, [r3, #5]
    32a8:	2b00      	cmp	r3, #0
    32aa:	d12a      	bne.n	3302 <spi_read_buffer_wait+0xe6>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    32ac:	2300      	movs	r3, #0
    32ae:	61bb      	str	r3, [r7, #24]
    32b0:	e008      	b.n	32c4 <spi_read_buffer_wait+0xa8>
				if (spi_is_ready_to_read(module)) {
    32b2:	68fb      	ldr	r3, [r7, #12]
    32b4:	0018      	movs	r0, r3
    32b6:	4b41      	ldr	r3, [pc, #260]	; (33bc <spi_read_buffer_wait+0x1a0>)
    32b8:	4798      	blx	r3
    32ba:	1e03      	subs	r3, r0, #0
    32bc:	d107      	bne.n	32ce <spi_read_buffer_wait+0xb2>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    32be:	69bb      	ldr	r3, [r7, #24]
    32c0:	3301      	adds	r3, #1
    32c2:	61bb      	str	r3, [r7, #24]
    32c4:	69bb      	ldr	r3, [r7, #24]
    32c6:	4a3e      	ldr	r2, [pc, #248]	; (33c0 <spi_read_buffer_wait+0x1a4>)
    32c8:	4293      	cmp	r3, r2
    32ca:	d9f2      	bls.n	32b2 <spi_read_buffer_wait+0x96>
    32cc:	e000      	b.n	32d0 <spi_read_buffer_wait+0xb4>
					break;
    32ce:	46c0      	nop			; (mov r8, r8)
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
    32d0:	68fb      	ldr	r3, [r7, #12]
    32d2:	0018      	movs	r0, r3
    32d4:	4b35      	ldr	r3, [pc, #212]	; (33ac <spi_read_buffer_wait+0x190>)
    32d6:	4798      	blx	r3
    32d8:	1e03      	subs	r3, r0, #0
    32da:	d005      	beq.n	32e8 <spi_read_buffer_wait+0xcc>
				_spi_clear_tx_complete_flag(module);
    32dc:	68fb      	ldr	r3, [r7, #12]
    32de:	0018      	movs	r0, r3
    32e0:	4b33      	ldr	r3, [pc, #204]	; (33b0 <spi_read_buffer_wait+0x194>)
    32e2:	4798      	blx	r3
				return STATUS_ABORTED;
    32e4:	2304      	movs	r3, #4
    32e6:	e05d      	b.n	33a4 <spi_read_buffer_wait+0x188>
			}

			if (!spi_is_ready_to_read(module)) {
    32e8:	68fb      	ldr	r3, [r7, #12]
    32ea:	0018      	movs	r0, r3
    32ec:	4b33      	ldr	r3, [pc, #204]	; (33bc <spi_read_buffer_wait+0x1a0>)
    32ee:	4798      	blx	r3
    32f0:	0003      	movs	r3, r0
    32f2:	001a      	movs	r2, r3
    32f4:	2301      	movs	r3, #1
    32f6:	4053      	eors	r3, r2
    32f8:	b2db      	uxtb	r3, r3
    32fa:	2b00      	cmp	r3, #0
    32fc:	d001      	beq.n	3302 <spi_read_buffer_wait+0xe6>
				/* Not ready to read data within timeout period */
				return STATUS_ERR_TIMEOUT;
    32fe:	2312      	movs	r3, #18
    3300:	e050      	b.n	33a4 <spi_read_buffer_wait+0x188>
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
    3302:	46c0      	nop			; (mov r8, r8)
    3304:	68fb      	ldr	r3, [r7, #12]
    3306:	0018      	movs	r0, r3
    3308:	4b2c      	ldr	r3, [pc, #176]	; (33bc <spi_read_buffer_wait+0x1a0>)
    330a:	4798      	blx	r3
    330c:	0003      	movs	r3, r0
    330e:	001a      	movs	r2, r3
    3310:	2301      	movs	r3, #1
    3312:	4053      	eors	r3, r2
    3314:	b2db      	uxtb	r3, r3
    3316:	2b00      	cmp	r3, #0
    3318:	d1f4      	bne.n	3304 <spi_read_buffer_wait+0xe8>
		}

		uint16_t received_data = 0;
    331a:	2314      	movs	r3, #20
    331c:	18fb      	adds	r3, r7, r3
    331e:	2200      	movs	r2, #0
    3320:	801a      	strh	r2, [r3, #0]
		enum status_code retval = spi_read(module, &received_data);
    3322:	2317      	movs	r3, #23
    3324:	18fc      	adds	r4, r7, r3
    3326:	2314      	movs	r3, #20
    3328:	18fa      	adds	r2, r7, r3
    332a:	68fb      	ldr	r3, [r7, #12]
    332c:	0011      	movs	r1, r2
    332e:	0018      	movs	r0, r3
    3330:	4b24      	ldr	r3, [pc, #144]	; (33c4 <spi_read_buffer_wait+0x1a8>)
    3332:	4798      	blx	r3
    3334:	0003      	movs	r3, r0
    3336:	7023      	strb	r3, [r4, #0]

		if (retval != STATUS_OK) {
    3338:	2317      	movs	r3, #23
    333a:	18fb      	adds	r3, r7, r3
    333c:	781b      	ldrb	r3, [r3, #0]
    333e:	2b00      	cmp	r3, #0
    3340:	d003      	beq.n	334a <spi_read_buffer_wait+0x12e>
			/* Overflow, abort */
			return retval;
    3342:	2317      	movs	r3, #23
    3344:	18fb      	adds	r3, r7, r3
    3346:	781b      	ldrb	r3, [r3, #0]
    3348:	e02c      	b.n	33a4 <spi_read_buffer_wait+0x188>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    334a:	231e      	movs	r3, #30
    334c:	18fb      	adds	r3, r7, r3
    334e:	881b      	ldrh	r3, [r3, #0]
    3350:	221e      	movs	r2, #30
    3352:	18ba      	adds	r2, r7, r2
    3354:	1c59      	adds	r1, r3, #1
    3356:	8011      	strh	r1, [r2, #0]
    3358:	001a      	movs	r2, r3
    335a:	68bb      	ldr	r3, [r7, #8]
    335c:	189b      	adds	r3, r3, r2
    335e:	2214      	movs	r2, #20
    3360:	18ba      	adds	r2, r7, r2
    3362:	8812      	ldrh	r2, [r2, #0]
    3364:	b2d2      	uxtb	r2, r2
    3366:	701a      	strb	r2, [r3, #0]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3368:	68fb      	ldr	r3, [r7, #12]
    336a:	799b      	ldrb	r3, [r3, #6]
    336c:	2b01      	cmp	r3, #1
    336e:	d110      	bne.n	3392 <spi_read_buffer_wait+0x176>
			rx_data[rx_pos++] = (received_data >> 8);
    3370:	231e      	movs	r3, #30
    3372:	18fb      	adds	r3, r7, r3
    3374:	881b      	ldrh	r3, [r3, #0]
    3376:	221e      	movs	r2, #30
    3378:	18ba      	adds	r2, r7, r2
    337a:	1c59      	adds	r1, r3, #1
    337c:	8011      	strh	r1, [r2, #0]
    337e:	001a      	movs	r2, r3
    3380:	68bb      	ldr	r3, [r7, #8]
    3382:	189b      	adds	r3, r3, r2
    3384:	2214      	movs	r2, #20
    3386:	18ba      	adds	r2, r7, r2
    3388:	8812      	ldrh	r2, [r2, #0]
    338a:	0a12      	lsrs	r2, r2, #8
    338c:	b292      	uxth	r2, r2
    338e:	b2d2      	uxtb	r2, r2
    3390:	701a      	strb	r2, [r3, #0]
	while (length--) {
    3392:	1dbb      	adds	r3, r7, #6
    3394:	881b      	ldrh	r3, [r3, #0]
    3396:	1dba      	adds	r2, r7, #6
    3398:	1e59      	subs	r1, r3, #1
    339a:	8011      	strh	r1, [r2, #0]
    339c:	2b00      	cmp	r3, #0
    339e:	d000      	beq.n	33a2 <spi_read_buffer_wait+0x186>
    33a0:	e769      	b.n	3276 <spi_read_buffer_wait+0x5a>
		}
	}

	return STATUS_OK;
    33a2:	2300      	movs	r3, #0
}
    33a4:	0018      	movs	r0, r3
    33a6:	46bd      	mov	sp, r7
    33a8:	b009      	add	sp, #36	; 0x24
    33aa:	bd90      	pop	{r4, r7, pc}
    33ac:	00002b2d 	.word	0x00002b2d
    33b0:	00002c75 	.word	0x00002c75
    33b4:	00002b55 	.word	0x00002b55
    33b8:	00002ba5 	.word	0x00002ba5
    33bc:	00002b7d 	.word	0x00002b7d
    33c0:	00002710 	.word	0x00002710
    33c4:	00002bed 	.word	0x00002bed

000033c8 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    33c8:	b580      	push	{r7, lr}
    33ca:	b086      	sub	sp, #24
    33cc:	af00      	add	r7, sp, #0
    33ce:	60f8      	str	r0, [r7, #12]
    33d0:	60b9      	str	r1, [r7, #8]
    33d2:	1dfb      	adds	r3, r7, #7
    33d4:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    33d6:	68fb      	ldr	r3, [r7, #12]
    33d8:	795b      	ldrb	r3, [r3, #5]
    33da:	2b01      	cmp	r3, #1
    33dc:	d001      	beq.n	33e2 <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
    33de:	2315      	movs	r3, #21
    33e0:	e05c      	b.n	349c <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    33e2:	68fb      	ldr	r3, [r7, #12]
    33e4:	7a1b      	ldrb	r3, [r3, #8]
    33e6:	2201      	movs	r2, #1
    33e8:	4053      	eors	r3, r2
    33ea:	b2db      	uxtb	r3, r3
    33ec:	2b00      	cmp	r3, #0
    33ee:	d054      	beq.n	349a <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
    33f0:	1dfb      	adds	r3, r7, #7
    33f2:	781b      	ldrb	r3, [r3, #0]
    33f4:	2b00      	cmp	r3, #0
    33f6:	d04a      	beq.n	348e <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
    33f8:	68bb      	ldr	r3, [r7, #8]
    33fa:	785b      	ldrb	r3, [r3, #1]
    33fc:	2b00      	cmp	r3, #0
    33fe:	d03f      	beq.n	3480 <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
    3400:	68fb      	ldr	r3, [r7, #12]
    3402:	0018      	movs	r0, r3
    3404:	4b27      	ldr	r3, [pc, #156]	; (34a4 <spi_select_slave+0xdc>)
    3406:	4798      	blx	r3
    3408:	0003      	movs	r3, r0
    340a:	001a      	movs	r2, r3
    340c:	2301      	movs	r3, #1
    340e:	4053      	eors	r3, r2
    3410:	b2db      	uxtb	r3, r3
    3412:	2b00      	cmp	r3, #0
    3414:	d007      	beq.n	3426 <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
    3416:	68bb      	ldr	r3, [r7, #8]
    3418:	781b      	ldrb	r3, [r3, #0]
    341a:	2101      	movs	r1, #1
    341c:	0018      	movs	r0, r3
    341e:	4b22      	ldr	r3, [pc, #136]	; (34a8 <spi_select_slave+0xe0>)
    3420:	4798      	blx	r3
					return STATUS_BUSY;
    3422:	2305      	movs	r3, #5
    3424:	e03a      	b.n	349c <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    3426:	68bb      	ldr	r3, [r7, #8]
    3428:	781b      	ldrb	r3, [r3, #0]
    342a:	2100      	movs	r1, #0
    342c:	0018      	movs	r0, r3
    342e:	4b1e      	ldr	r3, [pc, #120]	; (34a8 <spi_select_slave+0xe0>)
    3430:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
    3432:	68bb      	ldr	r3, [r7, #8]
    3434:	789b      	ldrb	r3, [r3, #2]
    3436:	b29a      	uxth	r2, r3
    3438:	68fb      	ldr	r3, [r7, #12]
    343a:	0011      	movs	r1, r2
    343c:	0018      	movs	r0, r3
    343e:	4b1b      	ldr	r3, [pc, #108]	; (34ac <spi_select_slave+0xe4>)
    3440:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
    3442:	68fb      	ldr	r3, [r7, #12]
    3444:	79db      	ldrb	r3, [r3, #7]
    3446:	2201      	movs	r2, #1
    3448:	4053      	eors	r3, r2
    344a:	b2db      	uxtb	r3, r3
    344c:	2b00      	cmp	r3, #0
    344e:	d024      	beq.n	349a <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
    3450:	46c0      	nop			; (mov r8, r8)
    3452:	68fb      	ldr	r3, [r7, #12]
    3454:	0018      	movs	r0, r3
    3456:	4b16      	ldr	r3, [pc, #88]	; (34b0 <spi_select_slave+0xe8>)
    3458:	4798      	blx	r3
    345a:	0003      	movs	r3, r0
    345c:	001a      	movs	r2, r3
    345e:	2301      	movs	r3, #1
    3460:	4053      	eors	r3, r2
    3462:	b2db      	uxtb	r3, r3
    3464:	2b00      	cmp	r3, #0
    3466:	d1f4      	bne.n	3452 <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
    3468:	2316      	movs	r3, #22
    346a:	18fb      	adds	r3, r7, r3
    346c:	2200      	movs	r2, #0
    346e:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
    3470:	2316      	movs	r3, #22
    3472:	18fa      	adds	r2, r7, r3
    3474:	68fb      	ldr	r3, [r7, #12]
    3476:	0011      	movs	r1, r2
    3478:	0018      	movs	r0, r3
    347a:	4b0e      	ldr	r3, [pc, #56]	; (34b4 <spi_select_slave+0xec>)
    347c:	4798      	blx	r3
    347e:	e00c      	b.n	349a <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    3480:	68bb      	ldr	r3, [r7, #8]
    3482:	781b      	ldrb	r3, [r3, #0]
    3484:	2100      	movs	r1, #0
    3486:	0018      	movs	r0, r3
    3488:	4b07      	ldr	r3, [pc, #28]	; (34a8 <spi_select_slave+0xe0>)
    348a:	4798      	blx	r3
    348c:	e005      	b.n	349a <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
    348e:	68bb      	ldr	r3, [r7, #8]
    3490:	781b      	ldrb	r3, [r3, #0]
    3492:	2101      	movs	r1, #1
    3494:	0018      	movs	r0, r3
    3496:	4b04      	ldr	r3, [pc, #16]	; (34a8 <spi_select_slave+0xe0>)
    3498:	4798      	blx	r3
		}
	}
	return STATUS_OK;
    349a:	2300      	movs	r3, #0
}
    349c:	0018      	movs	r0, r3
    349e:	46bd      	mov	sp, r7
    34a0:	b006      	add	sp, #24
    34a2:	bd80      	pop	{r7, pc}
    34a4:	00002b55 	.word	0x00002b55
    34a8:	00002a45 	.word	0x00002a45
    34ac:	00002ba5 	.word	0x00002ba5
    34b0:	00002b7d 	.word	0x00002b7d
    34b4:	00002bed 	.word	0x00002bed

000034b8 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    34b8:	b580      	push	{r7, lr}
    34ba:	b08a      	sub	sp, #40	; 0x28
    34bc:	af00      	add	r7, sp, #0
    34be:	60f8      	str	r0, [r7, #12]
    34c0:	60b9      	str	r1, [r7, #8]
    34c2:	1dbb      	adds	r3, r7, #6
    34c4:	801a      	strh	r2, [r3, #0]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
	}
#  endif

	if (length == 0) {
    34c6:	1dbb      	adds	r3, r7, #6
    34c8:	881b      	ldrh	r3, [r3, #0]
    34ca:	2b00      	cmp	r3, #0
    34cc:	d101      	bne.n	34d2 <spi_write_buffer_wait+0x1a>
		return STATUS_ERR_INVALID_ARG;
    34ce:	2317      	movs	r3, #23
    34d0:	e16a      	b.n	37a8 <spi_write_buffer_wait+0x2f0>
	}

#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    34d2:	68fb      	ldr	r3, [r7, #12]
    34d4:	795b      	ldrb	r3, [r3, #5]
    34d6:	2b00      	cmp	r3, #0
    34d8:	d109      	bne.n	34ee <spi_write_buffer_wait+0x36>
    34da:	68fb      	ldr	r3, [r7, #12]
    34dc:	0018      	movs	r0, r3
    34de:	4bb4      	ldr	r3, [pc, #720]	; (37b0 <spi_write_buffer_wait+0x2f8>)
    34e0:	4798      	blx	r3
    34e2:	1e03      	subs	r3, r0, #0
    34e4:	d003      	beq.n	34ee <spi_write_buffer_wait+0x36>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
    34e6:	68fb      	ldr	r3, [r7, #12]
    34e8:	0018      	movs	r0, r3
    34ea:	4bb2      	ldr	r3, [pc, #712]	; (37b4 <spi_write_buffer_wait+0x2fc>)
    34ec:	4798      	blx	r3
	}
#  endif

	uint16_t tx_pos = 0;
    34ee:	2326      	movs	r3, #38	; 0x26
    34f0:	18fb      	adds	r3, r7, r3
    34f2:	2200      	movs	r2, #0
    34f4:	801a      	strh	r2, [r3, #0]
	uint16_t flush_length = length;
    34f6:	2324      	movs	r3, #36	; 0x24
    34f8:	18fb      	adds	r3, r7, r3
    34fa:	1dba      	adds	r2, r7, #6
    34fc:	8812      	ldrh	r2, [r2, #0]
    34fe:	801a      	strh	r2, [r3, #0]

	/* Write block */
	while (length--) {
    3500:	e0fe      	b.n	3700 <spi_write_buffer_wait+0x248>
#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
    3502:	68fb      	ldr	r3, [r7, #12]
    3504:	795b      	ldrb	r3, [r3, #5]
    3506:	2b00      	cmp	r3, #0
    3508:	d12a      	bne.n	3560 <spi_write_buffer_wait+0xa8>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    350a:	2300      	movs	r3, #0
    350c:	623b      	str	r3, [r7, #32]
    350e:	e008      	b.n	3522 <spi_write_buffer_wait+0x6a>
				if (spi_is_ready_to_write(module)) {
    3510:	68fb      	ldr	r3, [r7, #12]
    3512:	0018      	movs	r0, r3
    3514:	4ba8      	ldr	r3, [pc, #672]	; (37b8 <spi_write_buffer_wait+0x300>)
    3516:	4798      	blx	r3
    3518:	1e03      	subs	r3, r0, #0
    351a:	d107      	bne.n	352c <spi_write_buffer_wait+0x74>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    351c:	6a3b      	ldr	r3, [r7, #32]
    351e:	3301      	adds	r3, #1
    3520:	623b      	str	r3, [r7, #32]
    3522:	6a3b      	ldr	r3, [r7, #32]
    3524:	4aa5      	ldr	r2, [pc, #660]	; (37bc <spi_write_buffer_wait+0x304>)
    3526:	4293      	cmp	r3, r2
    3528:	d9f2      	bls.n	3510 <spi_write_buffer_wait+0x58>
    352a:	e000      	b.n	352e <spi_write_buffer_wait+0x76>
					break;
    352c:	46c0      	nop			; (mov r8, r8)
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
    352e:	68fb      	ldr	r3, [r7, #12]
    3530:	0018      	movs	r0, r3
    3532:	4b9f      	ldr	r3, [pc, #636]	; (37b0 <spi_write_buffer_wait+0x2f8>)
    3534:	4798      	blx	r3
    3536:	1e03      	subs	r3, r0, #0
    3538:	d005      	beq.n	3546 <spi_write_buffer_wait+0x8e>
				_spi_clear_tx_complete_flag(module);
    353a:	68fb      	ldr	r3, [r7, #12]
    353c:	0018      	movs	r0, r3
    353e:	4b9d      	ldr	r3, [pc, #628]	; (37b4 <spi_write_buffer_wait+0x2fc>)
    3540:	4798      	blx	r3
				return STATUS_ABORTED;
    3542:	2304      	movs	r3, #4
    3544:	e130      	b.n	37a8 <spi_write_buffer_wait+0x2f0>
			}

			if (!spi_is_ready_to_write(module)) {
    3546:	68fb      	ldr	r3, [r7, #12]
    3548:	0018      	movs	r0, r3
    354a:	4b9b      	ldr	r3, [pc, #620]	; (37b8 <spi_write_buffer_wait+0x300>)
    354c:	4798      	blx	r3
    354e:	0003      	movs	r3, r0
    3550:	001a      	movs	r2, r3
    3552:	2301      	movs	r3, #1
    3554:	4053      	eors	r3, r2
    3556:	b2db      	uxtb	r3, r3
    3558:	2b00      	cmp	r3, #0
    355a:	d001      	beq.n	3560 <spi_write_buffer_wait+0xa8>
				/* Not ready to write data within timeout period */
				return STATUS_ERR_TIMEOUT;
    355c:	2312      	movs	r3, #18
    355e:	e123      	b.n	37a8 <spi_write_buffer_wait+0x2f0>
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
    3560:	46c0      	nop			; (mov r8, r8)
    3562:	68fb      	ldr	r3, [r7, #12]
    3564:	0018      	movs	r0, r3
    3566:	4b94      	ldr	r3, [pc, #592]	; (37b8 <spi_write_buffer_wait+0x300>)
    3568:	4798      	blx	r3
    356a:	0003      	movs	r3, r0
    356c:	001a      	movs	r2, r3
    356e:	2301      	movs	r3, #1
    3570:	4053      	eors	r3, r2
    3572:	b2db      	uxtb	r3, r3
    3574:	2b00      	cmp	r3, #0
    3576:	d1f4      	bne.n	3562 <spi_write_buffer_wait+0xaa>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
    3578:	2326      	movs	r3, #38	; 0x26
    357a:	18fb      	adds	r3, r7, r3
    357c:	881b      	ldrh	r3, [r3, #0]
    357e:	2226      	movs	r2, #38	; 0x26
    3580:	18ba      	adds	r2, r7, r2
    3582:	1c59      	adds	r1, r3, #1
    3584:	8011      	strh	r1, [r2, #0]
    3586:	001a      	movs	r2, r3
    3588:	68bb      	ldr	r3, [r7, #8]
    358a:	189b      	adds	r3, r3, r2
    358c:	781a      	ldrb	r2, [r3, #0]
    358e:	231e      	movs	r3, #30
    3590:	18fb      	adds	r3, r7, r3
    3592:	801a      	strh	r2, [r3, #0]

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3594:	68fb      	ldr	r3, [r7, #12]
    3596:	799b      	ldrb	r3, [r3, #6]
    3598:	2b01      	cmp	r3, #1
    359a:	d115      	bne.n	35c8 <spi_write_buffer_wait+0x110>
			data_to_send |= (tx_data[tx_pos++] << 8);
    359c:	2326      	movs	r3, #38	; 0x26
    359e:	18fb      	adds	r3, r7, r3
    35a0:	881b      	ldrh	r3, [r3, #0]
    35a2:	2226      	movs	r2, #38	; 0x26
    35a4:	18ba      	adds	r2, r7, r2
    35a6:	1c59      	adds	r1, r3, #1
    35a8:	8011      	strh	r1, [r2, #0]
    35aa:	001a      	movs	r2, r3
    35ac:	68bb      	ldr	r3, [r7, #8]
    35ae:	189b      	adds	r3, r3, r2
    35b0:	781b      	ldrb	r3, [r3, #0]
    35b2:	021b      	lsls	r3, r3, #8
    35b4:	b21a      	sxth	r2, r3
    35b6:	231e      	movs	r3, #30
    35b8:	18fb      	adds	r3, r7, r3
    35ba:	2100      	movs	r1, #0
    35bc:	5e5b      	ldrsh	r3, [r3, r1]
    35be:	4313      	orrs	r3, r2
    35c0:	b21a      	sxth	r2, r3
    35c2:	231e      	movs	r3, #30
    35c4:	18fb      	adds	r3, r7, r3
    35c6:	801a      	strh	r2, [r3, #0]
		}

		/* Write the data to send */
		spi_write(module, data_to_send);
    35c8:	231e      	movs	r3, #30
    35ca:	18fb      	adds	r3, r7, r3
    35cc:	881a      	ldrh	r2, [r3, #0]
    35ce:	68fb      	ldr	r3, [r7, #12]
    35d0:	0011      	movs	r1, r2
    35d2:	0018      	movs	r0, r3
    35d4:	4b7a      	ldr	r3, [pc, #488]	; (37c0 <spi_write_buffer_wait+0x308>)
    35d6:	4798      	blx	r3

		if (module->receiver_enabled) {
    35d8:	68fb      	ldr	r3, [r7, #12]
    35da:	79db      	ldrb	r3, [r3, #7]
    35dc:	2224      	movs	r2, #36	; 0x24
    35de:	18ba      	adds	r2, r7, r2
    35e0:	2124      	movs	r1, #36	; 0x24
    35e2:	1879      	adds	r1, r7, r1
    35e4:	8809      	ldrh	r1, [r1, #0]
    35e6:	8011      	strh	r1, [r2, #0]
    35e8:	2b00      	cmp	r3, #0
    35ea:	d100      	bne.n	35ee <spi_write_buffer_wait+0x136>
    35ec:	e088      	b.n	3700 <spi_write_buffer_wait+0x248>
#  if CONF_SPI_SLAVE_ENABLE == true
			/* Start timeout period for slave */
			if (module->mode == SPI_MODE_SLAVE) {
    35ee:	68fb      	ldr	r3, [r7, #12]
    35f0:	795b      	ldrb	r3, [r3, #5]
    35f2:	2b00      	cmp	r3, #0
    35f4:	d000      	beq.n	35f8 <spi_write_buffer_wait+0x140>
    35f6:	e069      	b.n	36cc <spi_write_buffer_wait+0x214>
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    35f8:	2300      	movs	r3, #0
    35fa:	61bb      	str	r3, [r7, #24]
    35fc:	e047      	b.n	368e <spi_write_buffer_wait+0x1d6>
					if (length && spi_is_ready_to_write(module)) {
    35fe:	1dbb      	adds	r3, r7, #6
    3600:	881b      	ldrh	r3, [r3, #0]
    3602:	2b00      	cmp	r3, #0
    3604:	d03a      	beq.n	367c <spi_write_buffer_wait+0x1c4>
    3606:	68fb      	ldr	r3, [r7, #12]
    3608:	0018      	movs	r0, r3
    360a:	4b6b      	ldr	r3, [pc, #428]	; (37b8 <spi_write_buffer_wait+0x300>)
    360c:	4798      	blx	r3
    360e:	1e03      	subs	r3, r0, #0
    3610:	d034      	beq.n	367c <spi_write_buffer_wait+0x1c4>
						data_to_send = tx_data[tx_pos++];
    3612:	2326      	movs	r3, #38	; 0x26
    3614:	18fb      	adds	r3, r7, r3
    3616:	881b      	ldrh	r3, [r3, #0]
    3618:	2226      	movs	r2, #38	; 0x26
    361a:	18ba      	adds	r2, r7, r2
    361c:	1c59      	adds	r1, r3, #1
    361e:	8011      	strh	r1, [r2, #0]
    3620:	001a      	movs	r2, r3
    3622:	68bb      	ldr	r3, [r7, #8]
    3624:	189b      	adds	r3, r3, r2
    3626:	781a      	ldrb	r2, [r3, #0]
    3628:	231e      	movs	r3, #30
    362a:	18fb      	adds	r3, r7, r3
    362c:	801a      	strh	r2, [r3, #0]
						/* If 9-bit data, get next byte to send from the buffer */
						if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    362e:	68fb      	ldr	r3, [r7, #12]
    3630:	799b      	ldrb	r3, [r3, #6]
    3632:	2b01      	cmp	r3, #1
    3634:	d115      	bne.n	3662 <spi_write_buffer_wait+0x1aa>
							data_to_send |= (tx_data[tx_pos++] << 8);
    3636:	2326      	movs	r3, #38	; 0x26
    3638:	18fb      	adds	r3, r7, r3
    363a:	881b      	ldrh	r3, [r3, #0]
    363c:	2226      	movs	r2, #38	; 0x26
    363e:	18ba      	adds	r2, r7, r2
    3640:	1c59      	adds	r1, r3, #1
    3642:	8011      	strh	r1, [r2, #0]
    3644:	001a      	movs	r2, r3
    3646:	68bb      	ldr	r3, [r7, #8]
    3648:	189b      	adds	r3, r3, r2
    364a:	781b      	ldrb	r3, [r3, #0]
    364c:	021b      	lsls	r3, r3, #8
    364e:	b21a      	sxth	r2, r3
    3650:	231e      	movs	r3, #30
    3652:	18fb      	adds	r3, r7, r3
    3654:	2100      	movs	r1, #0
    3656:	5e5b      	ldrsh	r3, [r3, r1]
    3658:	4313      	orrs	r3, r2
    365a:	b21a      	sxth	r2, r3
    365c:	231e      	movs	r3, #30
    365e:	18fb      	adds	r3, r7, r3
    3660:	801a      	strh	r2, [r3, #0]
						}

						/* Write the data to send */
						spi_write(module, data_to_send);
    3662:	231e      	movs	r3, #30
    3664:	18fb      	adds	r3, r7, r3
    3666:	881a      	ldrh	r2, [r3, #0]
    3668:	68fb      	ldr	r3, [r7, #12]
    366a:	0011      	movs	r1, r2
    366c:	0018      	movs	r0, r3
    366e:	4b54      	ldr	r3, [pc, #336]	; (37c0 <spi_write_buffer_wait+0x308>)
    3670:	4798      	blx	r3
						length--;
    3672:	1dbb      	adds	r3, r7, #6
    3674:	881a      	ldrh	r2, [r3, #0]
    3676:	1dbb      	adds	r3, r7, #6
    3678:	3a01      	subs	r2, #1
    367a:	801a      	strh	r2, [r3, #0]
					}
					if (spi_is_ready_to_read(module)) {
    367c:	68fb      	ldr	r3, [r7, #12]
    367e:	0018      	movs	r0, r3
    3680:	4b50      	ldr	r3, [pc, #320]	; (37c4 <spi_write_buffer_wait+0x30c>)
    3682:	4798      	blx	r3
    3684:	1e03      	subs	r3, r0, #0
    3686:	d107      	bne.n	3698 <spi_write_buffer_wait+0x1e0>
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    3688:	69bb      	ldr	r3, [r7, #24]
    368a:	3301      	adds	r3, #1
    368c:	61bb      	str	r3, [r7, #24]
    368e:	69bb      	ldr	r3, [r7, #24]
    3690:	4a4a      	ldr	r2, [pc, #296]	; (37bc <spi_write_buffer_wait+0x304>)
    3692:	4293      	cmp	r3, r2
    3694:	d9b3      	bls.n	35fe <spi_write_buffer_wait+0x146>
    3696:	e000      	b.n	369a <spi_write_buffer_wait+0x1e2>
						break;
    3698:	46c0      	nop			; (mov r8, r8)
					}
				}

				/* Check if master has ended the transaction */
				if (spi_is_write_complete(module)) {
    369a:	68fb      	ldr	r3, [r7, #12]
    369c:	0018      	movs	r0, r3
    369e:	4b44      	ldr	r3, [pc, #272]	; (37b0 <spi_write_buffer_wait+0x2f8>)
    36a0:	4798      	blx	r3
    36a2:	1e03      	subs	r3, r0, #0
    36a4:	d005      	beq.n	36b2 <spi_write_buffer_wait+0x1fa>
					_spi_clear_tx_complete_flag(module);
    36a6:	68fb      	ldr	r3, [r7, #12]
    36a8:	0018      	movs	r0, r3
    36aa:	4b42      	ldr	r3, [pc, #264]	; (37b4 <spi_write_buffer_wait+0x2fc>)
    36ac:	4798      	blx	r3
					return STATUS_ABORTED;
    36ae:	2304      	movs	r3, #4
    36b0:	e07a      	b.n	37a8 <spi_write_buffer_wait+0x2f0>
				}

				if (!spi_is_ready_to_read(module)) {
    36b2:	68fb      	ldr	r3, [r7, #12]
    36b4:	0018      	movs	r0, r3
    36b6:	4b43      	ldr	r3, [pc, #268]	; (37c4 <spi_write_buffer_wait+0x30c>)
    36b8:	4798      	blx	r3
    36ba:	0003      	movs	r3, r0
    36bc:	001a      	movs	r2, r3
    36be:	2301      	movs	r3, #1
    36c0:	4053      	eors	r3, r2
    36c2:	b2db      	uxtb	r3, r3
    36c4:	2b00      	cmp	r3, #0
    36c6:	d001      	beq.n	36cc <spi_write_buffer_wait+0x214>
					/* Not ready to read data within timeout period */
					return STATUS_ERR_TIMEOUT;
    36c8:	2312      	movs	r3, #18
    36ca:	e06d      	b.n	37a8 <spi_write_buffer_wait+0x2f0>
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
    36cc:	46c0      	nop			; (mov r8, r8)
    36ce:	68fb      	ldr	r3, [r7, #12]
    36d0:	0018      	movs	r0, r3
    36d2:	4b3c      	ldr	r3, [pc, #240]	; (37c4 <spi_write_buffer_wait+0x30c>)
    36d4:	4798      	blx	r3
    36d6:	0003      	movs	r3, r0
    36d8:	001a      	movs	r2, r3
    36da:	2301      	movs	r3, #1
    36dc:	4053      	eors	r3, r2
    36de:	b2db      	uxtb	r3, r3
    36e0:	2b00      	cmp	r3, #0
    36e2:	d1f4      	bne.n	36ce <spi_write_buffer_wait+0x216>
			}

			/* Flush read buffer */
			uint16_t flush;
			spi_read(module, &flush);
    36e4:	2312      	movs	r3, #18
    36e6:	18fa      	adds	r2, r7, r3
    36e8:	68fb      	ldr	r3, [r7, #12]
    36ea:	0011      	movs	r1, r2
    36ec:	0018      	movs	r0, r3
    36ee:	4b36      	ldr	r3, [pc, #216]	; (37c8 <spi_write_buffer_wait+0x310>)
    36f0:	4798      	blx	r3
			flush_length--;
    36f2:	2324      	movs	r3, #36	; 0x24
    36f4:	18fb      	adds	r3, r7, r3
    36f6:	881a      	ldrh	r2, [r3, #0]
    36f8:	2324      	movs	r3, #36	; 0x24
    36fa:	18fb      	adds	r3, r7, r3
    36fc:	3a01      	subs	r2, #1
    36fe:	801a      	strh	r2, [r3, #0]
	while (length--) {
    3700:	1dbb      	adds	r3, r7, #6
    3702:	881b      	ldrh	r3, [r3, #0]
    3704:	1dba      	adds	r2, r7, #6
    3706:	1e59      	subs	r1, r3, #1
    3708:	8011      	strh	r1, [r2, #0]
    370a:	2b00      	cmp	r3, #0
    370c:	d000      	beq.n	3710 <spi_write_buffer_wait+0x258>
    370e:	e6f8      	b.n	3502 <spi_write_buffer_wait+0x4a>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
    3710:	68fb      	ldr	r3, [r7, #12]
    3712:	795b      	ldrb	r3, [r3, #5]
    3714:	2b01      	cmp	r3, #1
    3716:	d10b      	bne.n	3730 <spi_write_buffer_wait+0x278>
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
    3718:	46c0      	nop			; (mov r8, r8)
    371a:	68fb      	ldr	r3, [r7, #12]
    371c:	0018      	movs	r0, r3
    371e:	4b24      	ldr	r3, [pc, #144]	; (37b0 <spi_write_buffer_wait+0x2f8>)
    3720:	4798      	blx	r3
    3722:	0003      	movs	r3, r0
    3724:	001a      	movs	r2, r3
    3726:	2301      	movs	r3, #1
    3728:	4053      	eors	r3, r2
    372a:	b2db      	uxtb	r3, r3
    372c:	2b00      	cmp	r3, #0
    372e:	d1f4      	bne.n	371a <spi_write_buffer_wait+0x262>
		}
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
    3730:	68fb      	ldr	r3, [r7, #12]
    3732:	795b      	ldrb	r3, [r3, #5]
    3734:	2b00      	cmp	r3, #0
    3736:	d136      	bne.n	37a6 <spi_write_buffer_wait+0x2ee>
		if (module->receiver_enabled) {
    3738:	68fb      	ldr	r3, [r7, #12]
    373a:	79db      	ldrb	r3, [r3, #7]
    373c:	2b00      	cmp	r3, #0
    373e:	d032      	beq.n	37a6 <spi_write_buffer_wait+0x2ee>
			while (flush_length) {
    3740:	e02c      	b.n	379c <spi_write_buffer_wait+0x2e4>
				/* Start timeout period for slave */
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    3742:	2300      	movs	r3, #0
    3744:	617b      	str	r3, [r7, #20]
    3746:	e008      	b.n	375a <spi_write_buffer_wait+0x2a2>
					if (spi_is_ready_to_read(module)) {
    3748:	68fb      	ldr	r3, [r7, #12]
    374a:	0018      	movs	r0, r3
    374c:	4b1d      	ldr	r3, [pc, #116]	; (37c4 <spi_write_buffer_wait+0x30c>)
    374e:	4798      	blx	r3
    3750:	1e03      	subs	r3, r0, #0
    3752:	d107      	bne.n	3764 <spi_write_buffer_wait+0x2ac>
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    3754:	697b      	ldr	r3, [r7, #20]
    3756:	3301      	adds	r3, #1
    3758:	617b      	str	r3, [r7, #20]
    375a:	697b      	ldr	r3, [r7, #20]
    375c:	4a17      	ldr	r2, [pc, #92]	; (37bc <spi_write_buffer_wait+0x304>)
    375e:	4293      	cmp	r3, r2
    3760:	d9f2      	bls.n	3748 <spi_write_buffer_wait+0x290>
    3762:	e000      	b.n	3766 <spi_write_buffer_wait+0x2ae>
						break;
    3764:	46c0      	nop			; (mov r8, r8)
					}
				}
				if (!spi_is_ready_to_read(module)) {
    3766:	68fb      	ldr	r3, [r7, #12]
    3768:	0018      	movs	r0, r3
    376a:	4b16      	ldr	r3, [pc, #88]	; (37c4 <spi_write_buffer_wait+0x30c>)
    376c:	4798      	blx	r3
    376e:	0003      	movs	r3, r0
    3770:	001a      	movs	r2, r3
    3772:	2301      	movs	r3, #1
    3774:	4053      	eors	r3, r2
    3776:	b2db      	uxtb	r3, r3
    3778:	2b00      	cmp	r3, #0
    377a:	d001      	beq.n	3780 <spi_write_buffer_wait+0x2c8>
					/* Not ready to read data within timeout period */
					return STATUS_ERR_TIMEOUT;
    377c:	2312      	movs	r3, #18
    377e:	e013      	b.n	37a8 <spi_write_buffer_wait+0x2f0>
				}
				/* Flush read buffer */
				uint16_t flush;
				spi_read(module, &flush);
    3780:	2310      	movs	r3, #16
    3782:	18fa      	adds	r2, r7, r3
    3784:	68fb      	ldr	r3, [r7, #12]
    3786:	0011      	movs	r1, r2
    3788:	0018      	movs	r0, r3
    378a:	4b0f      	ldr	r3, [pc, #60]	; (37c8 <spi_write_buffer_wait+0x310>)
    378c:	4798      	blx	r3
				flush_length--;
    378e:	2324      	movs	r3, #36	; 0x24
    3790:	18fb      	adds	r3, r7, r3
    3792:	881a      	ldrh	r2, [r3, #0]
    3794:	2324      	movs	r3, #36	; 0x24
    3796:	18fb      	adds	r3, r7, r3
    3798:	3a01      	subs	r2, #1
    379a:	801a      	strh	r2, [r3, #0]
			while (flush_length) {
    379c:	2324      	movs	r3, #36	; 0x24
    379e:	18fb      	adds	r3, r7, r3
    37a0:	881b      	ldrh	r3, [r3, #0]
    37a2:	2b00      	cmp	r3, #0
    37a4:	d1cd      	bne.n	3742 <spi_write_buffer_wait+0x28a>
			}
		}
	}
#  endif
	return STATUS_OK;
    37a6:	2300      	movs	r3, #0
}
    37a8:	0018      	movs	r0, r3
    37aa:	46bd      	mov	sp, r7
    37ac:	b00a      	add	sp, #40	; 0x28
    37ae:	bd80      	pop	{r7, pc}
    37b0:	00002b2d 	.word	0x00002b2d
    37b4:	00002c75 	.word	0x00002c75
    37b8:	00002b55 	.word	0x00002b55
    37bc:	00002710 	.word	0x00002710
    37c0:	00002ba5 	.word	0x00002ba5
    37c4:	00002b7d 	.word	0x00002b7d
    37c8:	00002bed 	.word	0x00002bed

000037cc <system_pinmux_get_config_defaults>:
{
    37cc:	b580      	push	{r7, lr}
    37ce:	b082      	sub	sp, #8
    37d0:	af00      	add	r7, sp, #0
    37d2:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    37d4:	687b      	ldr	r3, [r7, #4]
    37d6:	2280      	movs	r2, #128	; 0x80
    37d8:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    37da:	687b      	ldr	r3, [r7, #4]
    37dc:	2200      	movs	r2, #0
    37de:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    37e0:	687b      	ldr	r3, [r7, #4]
    37e2:	2201      	movs	r2, #1
    37e4:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    37e6:	687b      	ldr	r3, [r7, #4]
    37e8:	2200      	movs	r2, #0
    37ea:	70da      	strb	r2, [r3, #3]
}
    37ec:	46c0      	nop			; (mov r8, r8)
    37ee:	46bd      	mov	sp, r7
    37f0:	b002      	add	sp, #8
    37f2:	bd80      	pop	{r7, pc}

000037f4 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    37f4:	b580      	push	{r7, lr}
    37f6:	b084      	sub	sp, #16
    37f8:	af00      	add	r7, sp, #0
    37fa:	0002      	movs	r2, r0
    37fc:	6039      	str	r1, [r7, #0]
    37fe:	1dfb      	adds	r3, r7, #7
    3800:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    3802:	230c      	movs	r3, #12
    3804:	18fb      	adds	r3, r7, r3
    3806:	0018      	movs	r0, r3
    3808:	4b10      	ldr	r3, [pc, #64]	; (384c <port_pin_set_config+0x58>)
    380a:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
    380c:	230c      	movs	r3, #12
    380e:	18fb      	adds	r3, r7, r3
    3810:	2280      	movs	r2, #128	; 0x80
    3812:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    3814:	683b      	ldr	r3, [r7, #0]
    3816:	781a      	ldrb	r2, [r3, #0]
    3818:	230c      	movs	r3, #12
    381a:	18fb      	adds	r3, r7, r3
    381c:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    381e:	683b      	ldr	r3, [r7, #0]
    3820:	785a      	ldrb	r2, [r3, #1]
    3822:	230c      	movs	r3, #12
    3824:	18fb      	adds	r3, r7, r3
    3826:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    3828:	683b      	ldr	r3, [r7, #0]
    382a:	789a      	ldrb	r2, [r3, #2]
    382c:	230c      	movs	r3, #12
    382e:	18fb      	adds	r3, r7, r3
    3830:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    3832:	230c      	movs	r3, #12
    3834:	18fa      	adds	r2, r7, r3
    3836:	1dfb      	adds	r3, r7, #7
    3838:	781b      	ldrb	r3, [r3, #0]
    383a:	0011      	movs	r1, r2
    383c:	0018      	movs	r0, r3
    383e:	4b04      	ldr	r3, [pc, #16]	; (3850 <port_pin_set_config+0x5c>)
    3840:	4798      	blx	r3
}
    3842:	46c0      	nop			; (mov r8, r8)
    3844:	46bd      	mov	sp, r7
    3846:	b004      	add	sp, #16
    3848:	bd80      	pop	{r7, pc}
    384a:	46c0      	nop			; (mov r8, r8)
    384c:	000037cd 	.word	0x000037cd
    3850:	00004355 	.word	0x00004355

00003854 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    3854:	b580      	push	{r7, lr}
    3856:	af00      	add	r7, sp, #0
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    3858:	46c0      	nop			; (mov r8, r8)
    385a:	46bd      	mov	sp, r7
    385c:	bd80      	pop	{r7, pc}
	...

00003860 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    3860:	b580      	push	{r7, lr}
    3862:	b082      	sub	sp, #8
    3864:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    3866:	4b10      	ldr	r3, [pc, #64]	; (38a8 <cpu_irq_enter_critical+0x48>)
    3868:	681b      	ldr	r3, [r3, #0]
    386a:	2b00      	cmp	r3, #0
    386c:	d112      	bne.n	3894 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    386e:	f3ef 8310 	mrs	r3, PRIMASK
    3872:	607b      	str	r3, [r7, #4]
  return(result);
    3874:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    3876:	2b00      	cmp	r3, #0
    3878:	d109      	bne.n	388e <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
    387a:	b672      	cpsid	i
    387c:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    3880:	4b0a      	ldr	r3, [pc, #40]	; (38ac <cpu_irq_enter_critical+0x4c>)
    3882:	2200      	movs	r2, #0
    3884:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    3886:	4b0a      	ldr	r3, [pc, #40]	; (38b0 <cpu_irq_enter_critical+0x50>)
    3888:	2201      	movs	r2, #1
    388a:	701a      	strb	r2, [r3, #0]
    388c:	e002      	b.n	3894 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    388e:	4b08      	ldr	r3, [pc, #32]	; (38b0 <cpu_irq_enter_critical+0x50>)
    3890:	2200      	movs	r2, #0
    3892:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    3894:	4b04      	ldr	r3, [pc, #16]	; (38a8 <cpu_irq_enter_critical+0x48>)
    3896:	681b      	ldr	r3, [r3, #0]
    3898:	1c5a      	adds	r2, r3, #1
    389a:	4b03      	ldr	r3, [pc, #12]	; (38a8 <cpu_irq_enter_critical+0x48>)
    389c:	601a      	str	r2, [r3, #0]
}
    389e:	46c0      	nop			; (mov r8, r8)
    38a0:	46bd      	mov	sp, r7
    38a2:	b002      	add	sp, #8
    38a4:	bd80      	pop	{r7, pc}
    38a6:	46c0      	nop			; (mov r8, r8)
    38a8:	20000098 	.word	0x20000098
    38ac:	20000008 	.word	0x20000008
    38b0:	2000009c 	.word	0x2000009c

000038b4 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    38b4:	b580      	push	{r7, lr}
    38b6:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    38b8:	4b0b      	ldr	r3, [pc, #44]	; (38e8 <cpu_irq_leave_critical+0x34>)
    38ba:	681b      	ldr	r3, [r3, #0]
    38bc:	1e5a      	subs	r2, r3, #1
    38be:	4b0a      	ldr	r3, [pc, #40]	; (38e8 <cpu_irq_leave_critical+0x34>)
    38c0:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    38c2:	4b09      	ldr	r3, [pc, #36]	; (38e8 <cpu_irq_leave_critical+0x34>)
    38c4:	681b      	ldr	r3, [r3, #0]
    38c6:	2b00      	cmp	r3, #0
    38c8:	d10a      	bne.n	38e0 <cpu_irq_leave_critical+0x2c>
    38ca:	4b08      	ldr	r3, [pc, #32]	; (38ec <cpu_irq_leave_critical+0x38>)
    38cc:	781b      	ldrb	r3, [r3, #0]
    38ce:	b2db      	uxtb	r3, r3
    38d0:	2b00      	cmp	r3, #0
    38d2:	d005      	beq.n	38e0 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    38d4:	4b06      	ldr	r3, [pc, #24]	; (38f0 <cpu_irq_leave_critical+0x3c>)
    38d6:	2201      	movs	r2, #1
    38d8:	701a      	strb	r2, [r3, #0]
    38da:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    38de:	b662      	cpsie	i
	}
}
    38e0:	46c0      	nop			; (mov r8, r8)
    38e2:	46bd      	mov	sp, r7
    38e4:	bd80      	pop	{r7, pc}
    38e6:	46c0      	nop			; (mov r8, r8)
    38e8:	20000098 	.word	0x20000098
    38ec:	2000009c 	.word	0x2000009c
    38f0:	20000008 	.word	0x20000008

000038f4 <system_gclk_gen_get_config_defaults>:
{
    38f4:	b580      	push	{r7, lr}
    38f6:	b082      	sub	sp, #8
    38f8:	af00      	add	r7, sp, #0
    38fa:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
    38fc:	687b      	ldr	r3, [r7, #4]
    38fe:	2201      	movs	r2, #1
    3900:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    3902:	687b      	ldr	r3, [r7, #4]
    3904:	2200      	movs	r2, #0
    3906:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    3908:	687b      	ldr	r3, [r7, #4]
    390a:	2206      	movs	r2, #6
    390c:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
    390e:	687b      	ldr	r3, [r7, #4]
    3910:	2200      	movs	r2, #0
    3912:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    3914:	687b      	ldr	r3, [r7, #4]
    3916:	2200      	movs	r2, #0
    3918:	725a      	strb	r2, [r3, #9]
}
    391a:	46c0      	nop			; (mov r8, r8)
    391c:	46bd      	mov	sp, r7
    391e:	b002      	add	sp, #8
    3920:	bd80      	pop	{r7, pc}

00003922 <system_clock_source_osc8m_get_config_defaults>:
{
    3922:	b580      	push	{r7, lr}
    3924:	b082      	sub	sp, #8
    3926:	af00      	add	r7, sp, #0
    3928:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    392a:	687b      	ldr	r3, [r7, #4]
    392c:	2203      	movs	r2, #3
    392e:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    3930:	687b      	ldr	r3, [r7, #4]
    3932:	2200      	movs	r2, #0
    3934:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    3936:	687b      	ldr	r3, [r7, #4]
    3938:	2201      	movs	r2, #1
    393a:	709a      	strb	r2, [r3, #2]
}
    393c:	46c0      	nop			; (mov r8, r8)
    393e:	46bd      	mov	sp, r7
    3940:	b002      	add	sp, #8
    3942:	bd80      	pop	{r7, pc}

00003944 <system_cpu_clock_set_divider>:
{
    3944:	b580      	push	{r7, lr}
    3946:	b082      	sub	sp, #8
    3948:	af00      	add	r7, sp, #0
    394a:	0002      	movs	r2, r0
    394c:	1dfb      	adds	r3, r7, #7
    394e:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
    3950:	4a03      	ldr	r2, [pc, #12]	; (3960 <system_cpu_clock_set_divider+0x1c>)
    3952:	1dfb      	adds	r3, r7, #7
    3954:	781b      	ldrb	r3, [r3, #0]
    3956:	7213      	strb	r3, [r2, #8]
}
    3958:	46c0      	nop			; (mov r8, r8)
    395a:	46bd      	mov	sp, r7
    395c:	b002      	add	sp, #8
    395e:	bd80      	pop	{r7, pc}
    3960:	40000400 	.word	0x40000400

00003964 <system_apb_clock_set_divider>:
{
    3964:	b580      	push	{r7, lr}
    3966:	b082      	sub	sp, #8
    3968:	af00      	add	r7, sp, #0
    396a:	0002      	movs	r2, r0
    396c:	1dfb      	adds	r3, r7, #7
    396e:	701a      	strb	r2, [r3, #0]
    3970:	1dbb      	adds	r3, r7, #6
    3972:	1c0a      	adds	r2, r1, #0
    3974:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    3976:	1dfb      	adds	r3, r7, #7
    3978:	781b      	ldrb	r3, [r3, #0]
    397a:	2b01      	cmp	r3, #1
    397c:	d008      	beq.n	3990 <system_apb_clock_set_divider+0x2c>
    397e:	2b02      	cmp	r3, #2
    3980:	d00b      	beq.n	399a <system_apb_clock_set_divider+0x36>
    3982:	2b00      	cmp	r3, #0
    3984:	d10e      	bne.n	39a4 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
    3986:	4a0b      	ldr	r2, [pc, #44]	; (39b4 <system_apb_clock_set_divider+0x50>)
    3988:	1dbb      	adds	r3, r7, #6
    398a:	781b      	ldrb	r3, [r3, #0]
    398c:	7253      	strb	r3, [r2, #9]
			break;
    398e:	e00b      	b.n	39a8 <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
    3990:	4a08      	ldr	r2, [pc, #32]	; (39b4 <system_apb_clock_set_divider+0x50>)
    3992:	1dbb      	adds	r3, r7, #6
    3994:	781b      	ldrb	r3, [r3, #0]
    3996:	7293      	strb	r3, [r2, #10]
			break;
    3998:	e006      	b.n	39a8 <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
    399a:	4a06      	ldr	r2, [pc, #24]	; (39b4 <system_apb_clock_set_divider+0x50>)
    399c:	1dbb      	adds	r3, r7, #6
    399e:	781b      	ldrb	r3, [r3, #0]
    39a0:	72d3      	strb	r3, [r2, #11]
			break;
    39a2:	e001      	b.n	39a8 <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
    39a4:	2317      	movs	r3, #23
    39a6:	e000      	b.n	39aa <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
    39a8:	2300      	movs	r3, #0
}
    39aa:	0018      	movs	r0, r3
    39ac:	46bd      	mov	sp, r7
    39ae:	b002      	add	sp, #8
    39b0:	bd80      	pop	{r7, pc}
    39b2:	46c0      	nop			; (mov r8, r8)
    39b4:	40000400 	.word	0x40000400

000039b8 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    39b8:	b580      	push	{r7, lr}
    39ba:	b082      	sub	sp, #8
    39bc:	af00      	add	r7, sp, #0
    39be:	0002      	movs	r2, r0
    39c0:	1dfb      	adds	r3, r7, #7
    39c2:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    39c4:	4a08      	ldr	r2, [pc, #32]	; (39e8 <system_flash_set_waitstates+0x30>)
    39c6:	1dfb      	adds	r3, r7, #7
    39c8:	781b      	ldrb	r3, [r3, #0]
    39ca:	210f      	movs	r1, #15
    39cc:	400b      	ands	r3, r1
    39ce:	b2d9      	uxtb	r1, r3
    39d0:	6853      	ldr	r3, [r2, #4]
    39d2:	200f      	movs	r0, #15
    39d4:	4001      	ands	r1, r0
    39d6:	0049      	lsls	r1, r1, #1
    39d8:	201e      	movs	r0, #30
    39da:	4383      	bics	r3, r0
    39dc:	430b      	orrs	r3, r1
    39de:	6053      	str	r3, [r2, #4]
}
    39e0:	46c0      	nop			; (mov r8, r8)
    39e2:	46bd      	mov	sp, r7
    39e4:	b002      	add	sp, #8
    39e6:	bd80      	pop	{r7, pc}
    39e8:	41004000 	.word	0x41004000

000039ec <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    39ec:	b580      	push	{r7, lr}
    39ee:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    39f0:	46c0      	nop			; (mov r8, r8)
    39f2:	4b04      	ldr	r3, [pc, #16]	; (3a04 <_system_dfll_wait_for_sync+0x18>)
    39f4:	68db      	ldr	r3, [r3, #12]
    39f6:	2210      	movs	r2, #16
    39f8:	4013      	ands	r3, r2
    39fa:	d0fa      	beq.n	39f2 <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    39fc:	46c0      	nop			; (mov r8, r8)
    39fe:	46bd      	mov	sp, r7
    3a00:	bd80      	pop	{r7, pc}
    3a02:	46c0      	nop			; (mov r8, r8)
    3a04:	40000800 	.word	0x40000800

00003a08 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    3a08:	b580      	push	{r7, lr}
    3a0a:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    3a0c:	4b0c      	ldr	r3, [pc, #48]	; (3a40 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    3a0e:	2202      	movs	r2, #2
    3a10:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    3a12:	4b0c      	ldr	r3, [pc, #48]	; (3a44 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    3a14:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    3a16:	4a0a      	ldr	r2, [pc, #40]	; (3a40 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    3a18:	4b0b      	ldr	r3, [pc, #44]	; (3a48 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    3a1a:	689b      	ldr	r3, [r3, #8]
    3a1c:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    3a1e:	4a08      	ldr	r2, [pc, #32]	; (3a40 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    3a20:	4b09      	ldr	r3, [pc, #36]	; (3a48 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    3a22:	685b      	ldr	r3, [r3, #4]
    3a24:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    3a26:	4b06      	ldr	r3, [pc, #24]	; (3a40 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    3a28:	2200      	movs	r2, #0
    3a2a:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    3a2c:	4b05      	ldr	r3, [pc, #20]	; (3a44 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    3a2e:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    3a30:	4a03      	ldr	r2, [pc, #12]	; (3a40 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    3a32:	4b05      	ldr	r3, [pc, #20]	; (3a48 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    3a34:	681b      	ldr	r3, [r3, #0]
    3a36:	b29b      	uxth	r3, r3
    3a38:	8493      	strh	r3, [r2, #36]	; 0x24
}
    3a3a:	46c0      	nop			; (mov r8, r8)
    3a3c:	46bd      	mov	sp, r7
    3a3e:	bd80      	pop	{r7, pc}
    3a40:	40000800 	.word	0x40000800
    3a44:	000039ed 	.word	0x000039ed
    3a48:	200000a0 	.word	0x200000a0

00003a4c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    3a4c:	b580      	push	{r7, lr}
    3a4e:	b082      	sub	sp, #8
    3a50:	af00      	add	r7, sp, #0
    3a52:	0002      	movs	r2, r0
    3a54:	1dfb      	adds	r3, r7, #7
    3a56:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    3a58:	1dfb      	adds	r3, r7, #7
    3a5a:	781b      	ldrb	r3, [r3, #0]
    3a5c:	2b08      	cmp	r3, #8
    3a5e:	d841      	bhi.n	3ae4 <system_clock_source_get_hz+0x98>
    3a60:	009a      	lsls	r2, r3, #2
    3a62:	4b23      	ldr	r3, [pc, #140]	; (3af0 <system_clock_source_get_hz+0xa4>)
    3a64:	18d3      	adds	r3, r2, r3
    3a66:	681b      	ldr	r3, [r3, #0]
    3a68:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    3a6a:	4b22      	ldr	r3, [pc, #136]	; (3af4 <system_clock_source_get_hz+0xa8>)
    3a6c:	691b      	ldr	r3, [r3, #16]
    3a6e:	e03a      	b.n	3ae6 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    3a70:	4b21      	ldr	r3, [pc, #132]	; (3af8 <system_clock_source_get_hz+0xac>)
    3a72:	6a1b      	ldr	r3, [r3, #32]
    3a74:	059b      	lsls	r3, r3, #22
    3a76:	0f9b      	lsrs	r3, r3, #30
    3a78:	b2db      	uxtb	r3, r3
    3a7a:	001a      	movs	r2, r3
    3a7c:	4b1f      	ldr	r3, [pc, #124]	; (3afc <system_clock_source_get_hz+0xb0>)
    3a7e:	40d3      	lsrs	r3, r2
    3a80:	e031      	b.n	3ae6 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    3a82:	2380      	movs	r3, #128	; 0x80
    3a84:	021b      	lsls	r3, r3, #8
    3a86:	e02e      	b.n	3ae6 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    3a88:	2380      	movs	r3, #128	; 0x80
    3a8a:	021b      	lsls	r3, r3, #8
    3a8c:	e02b      	b.n	3ae6 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    3a8e:	4b19      	ldr	r3, [pc, #100]	; (3af4 <system_clock_source_get_hz+0xa8>)
    3a90:	695b      	ldr	r3, [r3, #20]
    3a92:	e028      	b.n	3ae6 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    3a94:	4b17      	ldr	r3, [pc, #92]	; (3af4 <system_clock_source_get_hz+0xa8>)
    3a96:	681b      	ldr	r3, [r3, #0]
    3a98:	2202      	movs	r2, #2
    3a9a:	4013      	ands	r3, r2
    3a9c:	d101      	bne.n	3aa2 <system_clock_source_get_hz+0x56>
			return 0;
    3a9e:	2300      	movs	r3, #0
    3aa0:	e021      	b.n	3ae6 <system_clock_source_get_hz+0x9a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    3aa2:	4b17      	ldr	r3, [pc, #92]	; (3b00 <system_clock_source_get_hz+0xb4>)
    3aa4:	4798      	blx	r3

		/* Check if operating in closed loop (USB) mode */
		switch(_system_clock_inst.dfll.control &
    3aa6:	4b13      	ldr	r3, [pc, #76]	; (3af4 <system_clock_source_get_hz+0xa8>)
    3aa8:	681b      	ldr	r3, [r3, #0]
    3aaa:	2224      	movs	r2, #36	; 0x24
    3aac:	4013      	ands	r3, r2
    3aae:	2b04      	cmp	r3, #4
    3ab0:	d109      	bne.n	3ac6 <system_clock_source_get_hz+0x7a>
				(SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_USBCRM)) {
		case SYSCTRL_DFLLCTRL_MODE:
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    3ab2:	2000      	movs	r0, #0
    3ab4:	4b13      	ldr	r3, [pc, #76]	; (3b04 <system_clock_source_get_hz+0xb8>)
    3ab6:	4798      	blx	r3
    3ab8:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    3aba:	4b0e      	ldr	r3, [pc, #56]	; (3af4 <system_clock_source_get_hz+0xa8>)
    3abc:	689b      	ldr	r3, [r3, #8]
    3abe:	041b      	lsls	r3, r3, #16
    3ac0:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    3ac2:	4353      	muls	r3, r2
    3ac4:	e00f      	b.n	3ae6 <system_clock_source_get_hz+0x9a>
		default:
			return 48000000UL;
    3ac6:	4b10      	ldr	r3, [pc, #64]	; (3b08 <system_clock_source_get_hz+0xbc>)
    3ac8:	e00d      	b.n	3ae6 <system_clock_source_get_hz+0x9a>
		}

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    3aca:	4a0b      	ldr	r2, [pc, #44]	; (3af8 <system_clock_source_get_hz+0xac>)
    3acc:	2350      	movs	r3, #80	; 0x50
    3ace:	5cd3      	ldrb	r3, [r2, r3]
    3ad0:	b2db      	uxtb	r3, r3
    3ad2:	001a      	movs	r2, r3
    3ad4:	2304      	movs	r3, #4
    3ad6:	4013      	ands	r3, r2
    3ad8:	d101      	bne.n	3ade <system_clock_source_get_hz+0x92>
			return 0;
    3ada:	2300      	movs	r3, #0
    3adc:	e003      	b.n	3ae6 <system_clock_source_get_hz+0x9a>
		}

		return _system_clock_inst.dpll.frequency;
    3ade:	4b05      	ldr	r3, [pc, #20]	; (3af4 <system_clock_source_get_hz+0xa8>)
    3ae0:	68db      	ldr	r3, [r3, #12]
    3ae2:	e000      	b.n	3ae6 <system_clock_source_get_hz+0x9a>
#endif

	default:
		return 0;
    3ae4:	2300      	movs	r3, #0
	}
}
    3ae6:	0018      	movs	r0, r3
    3ae8:	46bd      	mov	sp, r7
    3aea:	b002      	add	sp, #8
    3aec:	bd80      	pop	{r7, pc}
    3aee:	46c0      	nop			; (mov r8, r8)
    3af0:	00008a54 	.word	0x00008a54
    3af4:	200000a0 	.word	0x200000a0
    3af8:	40000800 	.word	0x40000800
    3afc:	007a1200 	.word	0x007a1200
    3b00:	000039ed 	.word	0x000039ed
    3b04:	0000418d 	.word	0x0000418d
    3b08:	02dc6c00 	.word	0x02dc6c00

00003b0c <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    3b0c:	b580      	push	{r7, lr}
    3b0e:	b084      	sub	sp, #16
    3b10:	af00      	add	r7, sp, #0
    3b12:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    3b14:	4b1a      	ldr	r3, [pc, #104]	; (3b80 <system_clock_source_osc8m_set_config+0x74>)
    3b16:	6a1b      	ldr	r3, [r3, #32]
    3b18:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    3b1a:	687b      	ldr	r3, [r7, #4]
    3b1c:	781b      	ldrb	r3, [r3, #0]
    3b1e:	1c1a      	adds	r2, r3, #0
    3b20:	2303      	movs	r3, #3
    3b22:	4013      	ands	r3, r2
    3b24:	b2da      	uxtb	r2, r3
    3b26:	230d      	movs	r3, #13
    3b28:	18fb      	adds	r3, r7, r3
    3b2a:	2103      	movs	r1, #3
    3b2c:	400a      	ands	r2, r1
    3b2e:	0010      	movs	r0, r2
    3b30:	781a      	ldrb	r2, [r3, #0]
    3b32:	2103      	movs	r1, #3
    3b34:	438a      	bics	r2, r1
    3b36:	1c11      	adds	r1, r2, #0
    3b38:	1c02      	adds	r2, r0, #0
    3b3a:	430a      	orrs	r2, r1
    3b3c:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    3b3e:	687b      	ldr	r3, [r7, #4]
    3b40:	789a      	ldrb	r2, [r3, #2]
    3b42:	230c      	movs	r3, #12
    3b44:	18fb      	adds	r3, r7, r3
    3b46:	01d0      	lsls	r0, r2, #7
    3b48:	781a      	ldrb	r2, [r3, #0]
    3b4a:	217f      	movs	r1, #127	; 0x7f
    3b4c:	400a      	ands	r2, r1
    3b4e:	1c11      	adds	r1, r2, #0
    3b50:	1c02      	adds	r2, r0, #0
    3b52:	430a      	orrs	r2, r1
    3b54:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    3b56:	687b      	ldr	r3, [r7, #4]
    3b58:	785a      	ldrb	r2, [r3, #1]
    3b5a:	230c      	movs	r3, #12
    3b5c:	18fb      	adds	r3, r7, r3
    3b5e:	2101      	movs	r1, #1
    3b60:	400a      	ands	r2, r1
    3b62:	0190      	lsls	r0, r2, #6
    3b64:	781a      	ldrb	r2, [r3, #0]
    3b66:	2140      	movs	r1, #64	; 0x40
    3b68:	438a      	bics	r2, r1
    3b6a:	1c11      	adds	r1, r2, #0
    3b6c:	1c02      	adds	r2, r0, #0
    3b6e:	430a      	orrs	r2, r1
    3b70:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    3b72:	4b03      	ldr	r3, [pc, #12]	; (3b80 <system_clock_source_osc8m_set_config+0x74>)
    3b74:	68fa      	ldr	r2, [r7, #12]
    3b76:	621a      	str	r2, [r3, #32]
}
    3b78:	46c0      	nop			; (mov r8, r8)
    3b7a:	46bd      	mov	sp, r7
    3b7c:	b004      	add	sp, #16
    3b7e:	bd80      	pop	{r7, pc}
    3b80:	40000800 	.word	0x40000800

00003b84 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    3b84:	b580      	push	{r7, lr}
    3b86:	b082      	sub	sp, #8
    3b88:	af00      	add	r7, sp, #0
    3b8a:	0002      	movs	r2, r0
    3b8c:	1dfb      	adds	r3, r7, #7
    3b8e:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    3b90:	1dfb      	adds	r3, r7, #7
    3b92:	781b      	ldrb	r3, [r3, #0]
    3b94:	2b08      	cmp	r3, #8
    3b96:	d83b      	bhi.n	3c10 <system_clock_source_enable+0x8c>
    3b98:	009a      	lsls	r2, r3, #2
    3b9a:	4b21      	ldr	r3, [pc, #132]	; (3c20 <system_clock_source_enable+0x9c>)
    3b9c:	18d3      	adds	r3, r2, r3
    3b9e:	681b      	ldr	r3, [r3, #0]
    3ba0:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    3ba2:	4b20      	ldr	r3, [pc, #128]	; (3c24 <system_clock_source_enable+0xa0>)
    3ba4:	4a1f      	ldr	r2, [pc, #124]	; (3c24 <system_clock_source_enable+0xa0>)
    3ba6:	6a12      	ldr	r2, [r2, #32]
    3ba8:	2102      	movs	r1, #2
    3baa:	430a      	orrs	r2, r1
    3bac:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    3bae:	2300      	movs	r3, #0
    3bb0:	e031      	b.n	3c16 <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    3bb2:	4b1c      	ldr	r3, [pc, #112]	; (3c24 <system_clock_source_enable+0xa0>)
    3bb4:	4a1b      	ldr	r2, [pc, #108]	; (3c24 <system_clock_source_enable+0xa0>)
    3bb6:	6992      	ldr	r2, [r2, #24]
    3bb8:	2102      	movs	r1, #2
    3bba:	430a      	orrs	r2, r1
    3bbc:	619a      	str	r2, [r3, #24]
		break;
    3bbe:	e029      	b.n	3c14 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    3bc0:	4a18      	ldr	r2, [pc, #96]	; (3c24 <system_clock_source_enable+0xa0>)
    3bc2:	4b18      	ldr	r3, [pc, #96]	; (3c24 <system_clock_source_enable+0xa0>)
    3bc4:	8a1b      	ldrh	r3, [r3, #16]
    3bc6:	b29b      	uxth	r3, r3
    3bc8:	2102      	movs	r1, #2
    3bca:	430b      	orrs	r3, r1
    3bcc:	b29b      	uxth	r3, r3
    3bce:	8213      	strh	r3, [r2, #16]
		break;
    3bd0:	e020      	b.n	3c14 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    3bd2:	4a14      	ldr	r2, [pc, #80]	; (3c24 <system_clock_source_enable+0xa0>)
    3bd4:	4b13      	ldr	r3, [pc, #76]	; (3c24 <system_clock_source_enable+0xa0>)
    3bd6:	8a9b      	ldrh	r3, [r3, #20]
    3bd8:	b29b      	uxth	r3, r3
    3bda:	2102      	movs	r1, #2
    3bdc:	430b      	orrs	r3, r1
    3bde:	b29b      	uxth	r3, r3
    3be0:	8293      	strh	r3, [r2, #20]
		break;
    3be2:	e017      	b.n	3c14 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    3be4:	4b10      	ldr	r3, [pc, #64]	; (3c28 <system_clock_source_enable+0xa4>)
    3be6:	681b      	ldr	r3, [r3, #0]
    3be8:	2202      	movs	r2, #2
    3bea:	431a      	orrs	r2, r3
    3bec:	4b0e      	ldr	r3, [pc, #56]	; (3c28 <system_clock_source_enable+0xa4>)
    3bee:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    3bf0:	4b0e      	ldr	r3, [pc, #56]	; (3c2c <system_clock_source_enable+0xa8>)
    3bf2:	4798      	blx	r3
		break;
    3bf4:	e00e      	b.n	3c14 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    3bf6:	4a0b      	ldr	r2, [pc, #44]	; (3c24 <system_clock_source_enable+0xa0>)
    3bf8:	490a      	ldr	r1, [pc, #40]	; (3c24 <system_clock_source_enable+0xa0>)
    3bfa:	2344      	movs	r3, #68	; 0x44
    3bfc:	5ccb      	ldrb	r3, [r1, r3]
    3bfe:	b2db      	uxtb	r3, r3
    3c00:	2102      	movs	r1, #2
    3c02:	430b      	orrs	r3, r1
    3c04:	b2d9      	uxtb	r1, r3
    3c06:	2344      	movs	r3, #68	; 0x44
    3c08:	54d1      	strb	r1, [r2, r3]
		break;
    3c0a:	e003      	b.n	3c14 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    3c0c:	2300      	movs	r3, #0
    3c0e:	e002      	b.n	3c16 <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    3c10:	2317      	movs	r3, #23
    3c12:	e000      	b.n	3c16 <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    3c14:	2300      	movs	r3, #0
}
    3c16:	0018      	movs	r0, r3
    3c18:	46bd      	mov	sp, r7
    3c1a:	b002      	add	sp, #8
    3c1c:	bd80      	pop	{r7, pc}
    3c1e:	46c0      	nop			; (mov r8, r8)
    3c20:	00008a78 	.word	0x00008a78
    3c24:	40000800 	.word	0x40000800
    3c28:	200000a0 	.word	0x200000a0
    3c2c:	00003a09 	.word	0x00003a09

00003c30 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    3c30:	b580      	push	{r7, lr}
    3c32:	b082      	sub	sp, #8
    3c34:	af00      	add	r7, sp, #0
	uint32_t gclk_id;
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    3c36:	003b      	movs	r3, r7
    3c38:	2201      	movs	r2, #1
    3c3a:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    3c3c:	2300      	movs	r3, #0
    3c3e:	607b      	str	r3, [r7, #4]
    3c40:	e009      	b.n	3c56 <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    3c42:	687b      	ldr	r3, [r7, #4]
    3c44:	b2db      	uxtb	r3, r3
    3c46:	003a      	movs	r2, r7
    3c48:	0011      	movs	r1, r2
    3c4a:	0018      	movs	r0, r3
    3c4c:	4b05      	ldr	r3, [pc, #20]	; (3c64 <_switch_peripheral_gclk+0x34>)
    3c4e:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    3c50:	687b      	ldr	r3, [r7, #4]
    3c52:	3301      	adds	r3, #1
    3c54:	607b      	str	r3, [r7, #4]
    3c56:	687b      	ldr	r3, [r7, #4]
    3c58:	2b24      	cmp	r3, #36	; 0x24
    3c5a:	d9f2      	bls.n	3c42 <_switch_peripheral_gclk+0x12>
	}
}
    3c5c:	46c0      	nop			; (mov r8, r8)
    3c5e:	46bd      	mov	sp, r7
    3c60:	b002      	add	sp, #8
    3c62:	bd80      	pop	{r7, pc}
    3c64:	00004069 	.word	0x00004069

00003c68 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    3c68:	b580      	push	{r7, lr}
    3c6a:	b0a0      	sub	sp, #128	; 0x80
    3c6c:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    3c6e:	4b27      	ldr	r3, [pc, #156]	; (3d0c <system_clock_init+0xa4>)
    3c70:	22c2      	movs	r2, #194	; 0xc2
    3c72:	00d2      	lsls	r2, r2, #3
    3c74:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    3c76:	2000      	movs	r0, #0
    3c78:	4b25      	ldr	r3, [pc, #148]	; (3d10 <system_clock_init+0xa8>)
    3c7a:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    3c7c:	4b25      	ldr	r3, [pc, #148]	; (3d14 <system_clock_init+0xac>)
    3c7e:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    3c80:	237c      	movs	r3, #124	; 0x7c
    3c82:	18fb      	adds	r3, r7, r3
    3c84:	0018      	movs	r0, r3
    3c86:	4b24      	ldr	r3, [pc, #144]	; (3d18 <system_clock_init+0xb0>)
    3c88:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    3c8a:	237c      	movs	r3, #124	; 0x7c
    3c8c:	18fb      	adds	r3, r7, r3
    3c8e:	2200      	movs	r2, #0
    3c90:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    3c92:	237c      	movs	r3, #124	; 0x7c
    3c94:	18fb      	adds	r3, r7, r3
    3c96:	2201      	movs	r2, #1
    3c98:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    3c9a:	237c      	movs	r3, #124	; 0x7c
    3c9c:	18fb      	adds	r3, r7, r3
    3c9e:	2200      	movs	r2, #0
    3ca0:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    3ca2:	237c      	movs	r3, #124	; 0x7c
    3ca4:	18fb      	adds	r3, r7, r3
    3ca6:	0018      	movs	r0, r3
    3ca8:	4b1c      	ldr	r3, [pc, #112]	; (3d1c <system_clock_init+0xb4>)
    3caa:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    3cac:	2006      	movs	r0, #6
    3cae:	4b1c      	ldr	r3, [pc, #112]	; (3d20 <system_clock_init+0xb8>)
    3cb0:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    3cb2:	4b1c      	ldr	r3, [pc, #112]	; (3d24 <system_clock_init+0xbc>)
    3cb4:	4798      	blx	r3

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    3cb6:	2000      	movs	r0, #0
    3cb8:	4b1b      	ldr	r3, [pc, #108]	; (3d28 <system_clock_init+0xc0>)
    3cba:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    3cbc:	2100      	movs	r1, #0
    3cbe:	2000      	movs	r0, #0
    3cc0:	4b1a      	ldr	r3, [pc, #104]	; (3d2c <system_clock_init+0xc4>)
    3cc2:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    3cc4:	2100      	movs	r1, #0
    3cc6:	2001      	movs	r0, #1
    3cc8:	4b18      	ldr	r3, [pc, #96]	; (3d2c <system_clock_init+0xc4>)
    3cca:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    3ccc:	2100      	movs	r1, #0
    3cce:	2002      	movs	r0, #2
    3cd0:	4b16      	ldr	r3, [pc, #88]	; (3d2c <system_clock_init+0xc4>)
    3cd2:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    3cd4:	1d3b      	adds	r3, r7, #4
    3cd6:	0018      	movs	r0, r3
    3cd8:	4b15      	ldr	r3, [pc, #84]	; (3d30 <system_clock_init+0xc8>)
    3cda:	4798      	blx	r3
    3cdc:	1d3b      	adds	r3, r7, #4
    3cde:	2206      	movs	r2, #6
    3ce0:	701a      	strb	r2, [r3, #0]
    3ce2:	1d3b      	adds	r3, r7, #4
    3ce4:	2201      	movs	r2, #1
    3ce6:	605a      	str	r2, [r3, #4]
    3ce8:	1d3b      	adds	r3, r7, #4
    3cea:	2200      	movs	r2, #0
    3cec:	721a      	strb	r2, [r3, #8]
    3cee:	1d3b      	adds	r3, r7, #4
    3cf0:	2200      	movs	r2, #0
    3cf2:	725a      	strb	r2, [r3, #9]
    3cf4:	1d3b      	adds	r3, r7, #4
    3cf6:	0019      	movs	r1, r3
    3cf8:	2000      	movs	r0, #0
    3cfa:	4b0e      	ldr	r3, [pc, #56]	; (3d34 <system_clock_init+0xcc>)
    3cfc:	4798      	blx	r3
    3cfe:	2000      	movs	r0, #0
    3d00:	4b0d      	ldr	r3, [pc, #52]	; (3d38 <system_clock_init+0xd0>)
    3d02:	4798      	blx	r3
#endif
}
    3d04:	46c0      	nop			; (mov r8, r8)
    3d06:	46bd      	mov	sp, r7
    3d08:	b020      	add	sp, #128	; 0x80
    3d0a:	bd80      	pop	{r7, pc}
    3d0c:	40000800 	.word	0x40000800
    3d10:	000039b9 	.word	0x000039b9
    3d14:	00003c31 	.word	0x00003c31
    3d18:	00003923 	.word	0x00003923
    3d1c:	00003b0d 	.word	0x00003b0d
    3d20:	00003b85 	.word	0x00003b85
    3d24:	00003de1 	.word	0x00003de1
    3d28:	00003945 	.word	0x00003945
    3d2c:	00003965 	.word	0x00003965
    3d30:	000038f5 	.word	0x000038f5
    3d34:	00003e11 	.word	0x00003e11
    3d38:	00003f35 	.word	0x00003f35

00003d3c <system_apb_clock_set_mask>:
{
    3d3c:	b580      	push	{r7, lr}
    3d3e:	b082      	sub	sp, #8
    3d40:	af00      	add	r7, sp, #0
    3d42:	0002      	movs	r2, r0
    3d44:	6039      	str	r1, [r7, #0]
    3d46:	1dfb      	adds	r3, r7, #7
    3d48:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    3d4a:	1dfb      	adds	r3, r7, #7
    3d4c:	781b      	ldrb	r3, [r3, #0]
    3d4e:	2b01      	cmp	r3, #1
    3d50:	d00a      	beq.n	3d68 <system_apb_clock_set_mask+0x2c>
    3d52:	2b02      	cmp	r3, #2
    3d54:	d00f      	beq.n	3d76 <system_apb_clock_set_mask+0x3a>
    3d56:	2b00      	cmp	r3, #0
    3d58:	d114      	bne.n	3d84 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    3d5a:	4b0e      	ldr	r3, [pc, #56]	; (3d94 <system_apb_clock_set_mask+0x58>)
    3d5c:	4a0d      	ldr	r2, [pc, #52]	; (3d94 <system_apb_clock_set_mask+0x58>)
    3d5e:	6991      	ldr	r1, [r2, #24]
    3d60:	683a      	ldr	r2, [r7, #0]
    3d62:	430a      	orrs	r2, r1
    3d64:	619a      	str	r2, [r3, #24]
			break;
    3d66:	e00f      	b.n	3d88 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    3d68:	4b0a      	ldr	r3, [pc, #40]	; (3d94 <system_apb_clock_set_mask+0x58>)
    3d6a:	4a0a      	ldr	r2, [pc, #40]	; (3d94 <system_apb_clock_set_mask+0x58>)
    3d6c:	69d1      	ldr	r1, [r2, #28]
    3d6e:	683a      	ldr	r2, [r7, #0]
    3d70:	430a      	orrs	r2, r1
    3d72:	61da      	str	r2, [r3, #28]
			break;
    3d74:	e008      	b.n	3d88 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    3d76:	4b07      	ldr	r3, [pc, #28]	; (3d94 <system_apb_clock_set_mask+0x58>)
    3d78:	4a06      	ldr	r2, [pc, #24]	; (3d94 <system_apb_clock_set_mask+0x58>)
    3d7a:	6a11      	ldr	r1, [r2, #32]
    3d7c:	683a      	ldr	r2, [r7, #0]
    3d7e:	430a      	orrs	r2, r1
    3d80:	621a      	str	r2, [r3, #32]
			break;
    3d82:	e001      	b.n	3d88 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    3d84:	2317      	movs	r3, #23
    3d86:	e000      	b.n	3d8a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    3d88:	2300      	movs	r3, #0
}
    3d8a:	0018      	movs	r0, r3
    3d8c:	46bd      	mov	sp, r7
    3d8e:	b002      	add	sp, #8
    3d90:	bd80      	pop	{r7, pc}
    3d92:	46c0      	nop			; (mov r8, r8)
    3d94:	40000400 	.word	0x40000400

00003d98 <system_interrupt_enter_critical_section>:
{
    3d98:	b580      	push	{r7, lr}
    3d9a:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    3d9c:	4b02      	ldr	r3, [pc, #8]	; (3da8 <system_interrupt_enter_critical_section+0x10>)
    3d9e:	4798      	blx	r3
}
    3da0:	46c0      	nop			; (mov r8, r8)
    3da2:	46bd      	mov	sp, r7
    3da4:	bd80      	pop	{r7, pc}
    3da6:	46c0      	nop			; (mov r8, r8)
    3da8:	00003861 	.word	0x00003861

00003dac <system_interrupt_leave_critical_section>:
{
    3dac:	b580      	push	{r7, lr}
    3dae:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    3db0:	4b02      	ldr	r3, [pc, #8]	; (3dbc <system_interrupt_leave_critical_section+0x10>)
    3db2:	4798      	blx	r3
}
    3db4:	46c0      	nop			; (mov r8, r8)
    3db6:	46bd      	mov	sp, r7
    3db8:	bd80      	pop	{r7, pc}
    3dba:	46c0      	nop			; (mov r8, r8)
    3dbc:	000038b5 	.word	0x000038b5

00003dc0 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    3dc0:	b580      	push	{r7, lr}
    3dc2:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3dc4:	4b05      	ldr	r3, [pc, #20]	; (3ddc <system_gclk_is_syncing+0x1c>)
    3dc6:	785b      	ldrb	r3, [r3, #1]
    3dc8:	b2db      	uxtb	r3, r3
    3dca:	b25b      	sxtb	r3, r3
    3dcc:	2b00      	cmp	r3, #0
    3dce:	da01      	bge.n	3dd4 <system_gclk_is_syncing+0x14>
		return true;
    3dd0:	2301      	movs	r3, #1
    3dd2:	e000      	b.n	3dd6 <system_gclk_is_syncing+0x16>
	}

	return false;
    3dd4:	2300      	movs	r3, #0
}
    3dd6:	0018      	movs	r0, r3
    3dd8:	46bd      	mov	sp, r7
    3dda:	bd80      	pop	{r7, pc}
    3ddc:	40000c00 	.word	0x40000c00

00003de0 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    3de0:	b580      	push	{r7, lr}
    3de2:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    3de4:	2108      	movs	r1, #8
    3de6:	2000      	movs	r0, #0
    3de8:	4b07      	ldr	r3, [pc, #28]	; (3e08 <system_gclk_init+0x28>)
    3dea:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    3dec:	4b07      	ldr	r3, [pc, #28]	; (3e0c <system_gclk_init+0x2c>)
    3dee:	2201      	movs	r2, #1
    3df0:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    3df2:	46c0      	nop			; (mov r8, r8)
    3df4:	4b05      	ldr	r3, [pc, #20]	; (3e0c <system_gclk_init+0x2c>)
    3df6:	781b      	ldrb	r3, [r3, #0]
    3df8:	b2db      	uxtb	r3, r3
    3dfa:	001a      	movs	r2, r3
    3dfc:	2301      	movs	r3, #1
    3dfe:	4013      	ands	r3, r2
    3e00:	d1f8      	bne.n	3df4 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    3e02:	46c0      	nop			; (mov r8, r8)
    3e04:	46bd      	mov	sp, r7
    3e06:	bd80      	pop	{r7, pc}
    3e08:	00003d3d 	.word	0x00003d3d
    3e0c:	40000c00 	.word	0x40000c00

00003e10 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    3e10:	b580      	push	{r7, lr}
    3e12:	b086      	sub	sp, #24
    3e14:	af00      	add	r7, sp, #0
    3e16:	0002      	movs	r2, r0
    3e18:	6039      	str	r1, [r7, #0]
    3e1a:	1dfb      	adds	r3, r7, #7
    3e1c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    3e1e:	1dfb      	adds	r3, r7, #7
    3e20:	781b      	ldrb	r3, [r3, #0]
    3e22:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    3e24:	1dfb      	adds	r3, r7, #7
    3e26:	781b      	ldrb	r3, [r3, #0]
    3e28:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    3e2a:	683b      	ldr	r3, [r7, #0]
    3e2c:	781b      	ldrb	r3, [r3, #0]
    3e2e:	021b      	lsls	r3, r3, #8
    3e30:	001a      	movs	r2, r3
    3e32:	697b      	ldr	r3, [r7, #20]
    3e34:	4313      	orrs	r3, r2
    3e36:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    3e38:	683b      	ldr	r3, [r7, #0]
    3e3a:	785b      	ldrb	r3, [r3, #1]
    3e3c:	2b00      	cmp	r3, #0
    3e3e:	d004      	beq.n	3e4a <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    3e40:	697b      	ldr	r3, [r7, #20]
    3e42:	2280      	movs	r2, #128	; 0x80
    3e44:	02d2      	lsls	r2, r2, #11
    3e46:	4313      	orrs	r3, r2
    3e48:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    3e4a:	683b      	ldr	r3, [r7, #0]
    3e4c:	7a5b      	ldrb	r3, [r3, #9]
    3e4e:	2b00      	cmp	r3, #0
    3e50:	d004      	beq.n	3e5c <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    3e52:	697b      	ldr	r3, [r7, #20]
    3e54:	2280      	movs	r2, #128	; 0x80
    3e56:	0312      	lsls	r2, r2, #12
    3e58:	4313      	orrs	r3, r2
    3e5a:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    3e5c:	683b      	ldr	r3, [r7, #0]
    3e5e:	685b      	ldr	r3, [r3, #4]
    3e60:	2b01      	cmp	r3, #1
    3e62:	d92c      	bls.n	3ebe <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    3e64:	683b      	ldr	r3, [r7, #0]
    3e66:	685a      	ldr	r2, [r3, #4]
    3e68:	683b      	ldr	r3, [r7, #0]
    3e6a:	685b      	ldr	r3, [r3, #4]
    3e6c:	3b01      	subs	r3, #1
    3e6e:	4013      	ands	r3, r2
    3e70:	d11a      	bne.n	3ea8 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    3e72:	2300      	movs	r3, #0
    3e74:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    3e76:	2302      	movs	r3, #2
    3e78:	60bb      	str	r3, [r7, #8]
    3e7a:	e005      	b.n	3e88 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    3e7c:	68fb      	ldr	r3, [r7, #12]
    3e7e:	3301      	adds	r3, #1
    3e80:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
    3e82:	68bb      	ldr	r3, [r7, #8]
    3e84:	005b      	lsls	r3, r3, #1
    3e86:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
    3e88:	683b      	ldr	r3, [r7, #0]
    3e8a:	685a      	ldr	r2, [r3, #4]
    3e8c:	68bb      	ldr	r3, [r7, #8]
    3e8e:	429a      	cmp	r2, r3
    3e90:	d8f4      	bhi.n	3e7c <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    3e92:	68fb      	ldr	r3, [r7, #12]
    3e94:	021b      	lsls	r3, r3, #8
    3e96:	693a      	ldr	r2, [r7, #16]
    3e98:	4313      	orrs	r3, r2
    3e9a:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    3e9c:	697b      	ldr	r3, [r7, #20]
    3e9e:	2280      	movs	r2, #128	; 0x80
    3ea0:	0352      	lsls	r2, r2, #13
    3ea2:	4313      	orrs	r3, r2
    3ea4:	617b      	str	r3, [r7, #20]
    3ea6:	e00a      	b.n	3ebe <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    3ea8:	683b      	ldr	r3, [r7, #0]
    3eaa:	685b      	ldr	r3, [r3, #4]
    3eac:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
    3eae:	693a      	ldr	r2, [r7, #16]
    3eb0:	4313      	orrs	r3, r2
    3eb2:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    3eb4:	697b      	ldr	r3, [r7, #20]
    3eb6:	2280      	movs	r2, #128	; 0x80
    3eb8:	0292      	lsls	r2, r2, #10
    3eba:	4313      	orrs	r3, r2
    3ebc:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    3ebe:	683b      	ldr	r3, [r7, #0]
    3ec0:	7a1b      	ldrb	r3, [r3, #8]
    3ec2:	2b00      	cmp	r3, #0
    3ec4:	d004      	beq.n	3ed0 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    3ec6:	697b      	ldr	r3, [r7, #20]
    3ec8:	2280      	movs	r2, #128	; 0x80
    3eca:	0392      	lsls	r2, r2, #14
    3ecc:	4313      	orrs	r3, r2
    3ece:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    3ed0:	46c0      	nop			; (mov r8, r8)
    3ed2:	4b13      	ldr	r3, [pc, #76]	; (3f20 <system_gclk_gen_set_config+0x110>)
    3ed4:	4798      	blx	r3
    3ed6:	1e03      	subs	r3, r0, #0
    3ed8:	d1fb      	bne.n	3ed2 <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    3eda:	4b12      	ldr	r3, [pc, #72]	; (3f24 <system_gclk_gen_set_config+0x114>)
    3edc:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    3ede:	4a12      	ldr	r2, [pc, #72]	; (3f28 <system_gclk_gen_set_config+0x118>)
    3ee0:	1dfb      	adds	r3, r7, #7
    3ee2:	781b      	ldrb	r3, [r3, #0]
    3ee4:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    3ee6:	46c0      	nop			; (mov r8, r8)
    3ee8:	4b0d      	ldr	r3, [pc, #52]	; (3f20 <system_gclk_gen_set_config+0x110>)
    3eea:	4798      	blx	r3
    3eec:	1e03      	subs	r3, r0, #0
    3eee:	d1fb      	bne.n	3ee8 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    3ef0:	4b0e      	ldr	r3, [pc, #56]	; (3f2c <system_gclk_gen_set_config+0x11c>)
    3ef2:	693a      	ldr	r2, [r7, #16]
    3ef4:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    3ef6:	46c0      	nop			; (mov r8, r8)
    3ef8:	4b09      	ldr	r3, [pc, #36]	; (3f20 <system_gclk_gen_set_config+0x110>)
    3efa:	4798      	blx	r3
    3efc:	1e03      	subs	r3, r0, #0
    3efe:	d1fb      	bne.n	3ef8 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    3f00:	4b0a      	ldr	r3, [pc, #40]	; (3f2c <system_gclk_gen_set_config+0x11c>)
    3f02:	4a0a      	ldr	r2, [pc, #40]	; (3f2c <system_gclk_gen_set_config+0x11c>)
    3f04:	6851      	ldr	r1, [r2, #4]
    3f06:	2280      	movs	r2, #128	; 0x80
    3f08:	0252      	lsls	r2, r2, #9
    3f0a:	4011      	ands	r1, r2
    3f0c:	697a      	ldr	r2, [r7, #20]
    3f0e:	430a      	orrs	r2, r1
    3f10:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    3f12:	4b07      	ldr	r3, [pc, #28]	; (3f30 <system_gclk_gen_set_config+0x120>)
    3f14:	4798      	blx	r3
}
    3f16:	46c0      	nop			; (mov r8, r8)
    3f18:	46bd      	mov	sp, r7
    3f1a:	b006      	add	sp, #24
    3f1c:	bd80      	pop	{r7, pc}
    3f1e:	46c0      	nop			; (mov r8, r8)
    3f20:	00003dc1 	.word	0x00003dc1
    3f24:	00003d99 	.word	0x00003d99
    3f28:	40000c08 	.word	0x40000c08
    3f2c:	40000c00 	.word	0x40000c00
    3f30:	00003dad 	.word	0x00003dad

00003f34 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    3f34:	b580      	push	{r7, lr}
    3f36:	b082      	sub	sp, #8
    3f38:	af00      	add	r7, sp, #0
    3f3a:	0002      	movs	r2, r0
    3f3c:	1dfb      	adds	r3, r7, #7
    3f3e:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    3f40:	46c0      	nop			; (mov r8, r8)
    3f42:	4b0e      	ldr	r3, [pc, #56]	; (3f7c <system_gclk_gen_enable+0x48>)
    3f44:	4798      	blx	r3
    3f46:	1e03      	subs	r3, r0, #0
    3f48:	d1fb      	bne.n	3f42 <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    3f4a:	4b0d      	ldr	r3, [pc, #52]	; (3f80 <system_gclk_gen_enable+0x4c>)
    3f4c:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    3f4e:	4a0d      	ldr	r2, [pc, #52]	; (3f84 <system_gclk_gen_enable+0x50>)
    3f50:	1dfb      	adds	r3, r7, #7
    3f52:	781b      	ldrb	r3, [r3, #0]
    3f54:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    3f56:	46c0      	nop			; (mov r8, r8)
    3f58:	4b08      	ldr	r3, [pc, #32]	; (3f7c <system_gclk_gen_enable+0x48>)
    3f5a:	4798      	blx	r3
    3f5c:	1e03      	subs	r3, r0, #0
    3f5e:	d1fb      	bne.n	3f58 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    3f60:	4b09      	ldr	r3, [pc, #36]	; (3f88 <system_gclk_gen_enable+0x54>)
    3f62:	4a09      	ldr	r2, [pc, #36]	; (3f88 <system_gclk_gen_enable+0x54>)
    3f64:	6852      	ldr	r2, [r2, #4]
    3f66:	2180      	movs	r1, #128	; 0x80
    3f68:	0249      	lsls	r1, r1, #9
    3f6a:	430a      	orrs	r2, r1
    3f6c:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    3f6e:	4b07      	ldr	r3, [pc, #28]	; (3f8c <system_gclk_gen_enable+0x58>)
    3f70:	4798      	blx	r3
}
    3f72:	46c0      	nop			; (mov r8, r8)
    3f74:	46bd      	mov	sp, r7
    3f76:	b002      	add	sp, #8
    3f78:	bd80      	pop	{r7, pc}
    3f7a:	46c0      	nop			; (mov r8, r8)
    3f7c:	00003dc1 	.word	0x00003dc1
    3f80:	00003d99 	.word	0x00003d99
    3f84:	40000c04 	.word	0x40000c04
    3f88:	40000c00 	.word	0x40000c00
    3f8c:	00003dad 	.word	0x00003dad

00003f90 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    3f90:	b580      	push	{r7, lr}
    3f92:	b086      	sub	sp, #24
    3f94:	af00      	add	r7, sp, #0
    3f96:	0002      	movs	r2, r0
    3f98:	1dfb      	adds	r3, r7, #7
    3f9a:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    3f9c:	46c0      	nop			; (mov r8, r8)
    3f9e:	4b2a      	ldr	r3, [pc, #168]	; (4048 <system_gclk_gen_get_hz+0xb8>)
    3fa0:	4798      	blx	r3
    3fa2:	1e03      	subs	r3, r0, #0
    3fa4:	d1fb      	bne.n	3f9e <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    3fa6:	4b29      	ldr	r3, [pc, #164]	; (404c <system_gclk_gen_get_hz+0xbc>)
    3fa8:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    3faa:	4a29      	ldr	r2, [pc, #164]	; (4050 <system_gclk_gen_get_hz+0xc0>)
    3fac:	1dfb      	adds	r3, r7, #7
    3fae:	781b      	ldrb	r3, [r3, #0]
    3fb0:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    3fb2:	46c0      	nop			; (mov r8, r8)
    3fb4:	4b24      	ldr	r3, [pc, #144]	; (4048 <system_gclk_gen_get_hz+0xb8>)
    3fb6:	4798      	blx	r3
    3fb8:	1e03      	subs	r3, r0, #0
    3fba:	d1fb      	bne.n	3fb4 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    3fbc:	4b25      	ldr	r3, [pc, #148]	; (4054 <system_gclk_gen_get_hz+0xc4>)
    3fbe:	685b      	ldr	r3, [r3, #4]
    3fc0:	04db      	lsls	r3, r3, #19
    3fc2:	0edb      	lsrs	r3, r3, #27
    3fc4:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
    3fc6:	0018      	movs	r0, r3
    3fc8:	4b23      	ldr	r3, [pc, #140]	; (4058 <system_gclk_gen_get_hz+0xc8>)
    3fca:	4798      	blx	r3
    3fcc:	0003      	movs	r3, r0
    3fce:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    3fd0:	4a1f      	ldr	r2, [pc, #124]	; (4050 <system_gclk_gen_get_hz+0xc0>)
    3fd2:	1dfb      	adds	r3, r7, #7
    3fd4:	781b      	ldrb	r3, [r3, #0]
    3fd6:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    3fd8:	4b1e      	ldr	r3, [pc, #120]	; (4054 <system_gclk_gen_get_hz+0xc4>)
    3fda:	685b      	ldr	r3, [r3, #4]
    3fdc:	02db      	lsls	r3, r3, #11
    3fde:	0fdb      	lsrs	r3, r3, #31
    3fe0:	b2da      	uxtb	r2, r3
    3fe2:	2313      	movs	r3, #19
    3fe4:	18fb      	adds	r3, r7, r3
    3fe6:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    3fe8:	4a1c      	ldr	r2, [pc, #112]	; (405c <system_gclk_gen_get_hz+0xcc>)
    3fea:	1dfb      	adds	r3, r7, #7
    3fec:	781b      	ldrb	r3, [r3, #0]
    3fee:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    3ff0:	46c0      	nop			; (mov r8, r8)
    3ff2:	4b15      	ldr	r3, [pc, #84]	; (4048 <system_gclk_gen_get_hz+0xb8>)
    3ff4:	4798      	blx	r3
    3ff6:	1e03      	subs	r3, r0, #0
    3ff8:	d1fb      	bne.n	3ff2 <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    3ffa:	4b16      	ldr	r3, [pc, #88]	; (4054 <system_gclk_gen_get_hz+0xc4>)
    3ffc:	689b      	ldr	r3, [r3, #8]
    3ffe:	021b      	lsls	r3, r3, #8
    4000:	0c1b      	lsrs	r3, r3, #16
    4002:	b29b      	uxth	r3, r3
    4004:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    4006:	4b16      	ldr	r3, [pc, #88]	; (4060 <system_gclk_gen_get_hz+0xd0>)
    4008:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    400a:	2313      	movs	r3, #19
    400c:	18fb      	adds	r3, r7, r3
    400e:	781b      	ldrb	r3, [r3, #0]
    4010:	2b00      	cmp	r3, #0
    4012:	d109      	bne.n	4028 <system_gclk_gen_get_hz+0x98>
    4014:	68fb      	ldr	r3, [r7, #12]
    4016:	2b01      	cmp	r3, #1
    4018:	d906      	bls.n	4028 <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
    401a:	4b12      	ldr	r3, [pc, #72]	; (4064 <system_gclk_gen_get_hz+0xd4>)
    401c:	68f9      	ldr	r1, [r7, #12]
    401e:	6978      	ldr	r0, [r7, #20]
    4020:	4798      	blx	r3
    4022:	0003      	movs	r3, r0
    4024:	617b      	str	r3, [r7, #20]
    4026:	e00a      	b.n	403e <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
    4028:	2313      	movs	r3, #19
    402a:	18fb      	adds	r3, r7, r3
    402c:	781b      	ldrb	r3, [r3, #0]
    402e:	2b00      	cmp	r3, #0
    4030:	d005      	beq.n	403e <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
    4032:	68fb      	ldr	r3, [r7, #12]
    4034:	3301      	adds	r3, #1
    4036:	697a      	ldr	r2, [r7, #20]
    4038:	40da      	lsrs	r2, r3
    403a:	0013      	movs	r3, r2
    403c:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    403e:	697b      	ldr	r3, [r7, #20]
}
    4040:	0018      	movs	r0, r3
    4042:	46bd      	mov	sp, r7
    4044:	b006      	add	sp, #24
    4046:	bd80      	pop	{r7, pc}
    4048:	00003dc1 	.word	0x00003dc1
    404c:	00003d99 	.word	0x00003d99
    4050:	40000c04 	.word	0x40000c04
    4054:	40000c00 	.word	0x40000c00
    4058:	00003a4d 	.word	0x00003a4d
    405c:	40000c08 	.word	0x40000c08
    4060:	00003dad 	.word	0x00003dad
    4064:	00005fd5 	.word	0x00005fd5

00004068 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    4068:	b580      	push	{r7, lr}
    406a:	b084      	sub	sp, #16
    406c:	af00      	add	r7, sp, #0
    406e:	0002      	movs	r2, r0
    4070:	6039      	str	r1, [r7, #0]
    4072:	1dfb      	adds	r3, r7, #7
    4074:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    4076:	1dfb      	adds	r3, r7, #7
    4078:	781b      	ldrb	r3, [r3, #0]
    407a:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    407c:	683b      	ldr	r3, [r7, #0]
    407e:	781b      	ldrb	r3, [r3, #0]
    4080:	021b      	lsls	r3, r3, #8
    4082:	001a      	movs	r2, r3
    4084:	68fb      	ldr	r3, [r7, #12]
    4086:	4313      	orrs	r3, r2
    4088:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    408a:	1dfb      	adds	r3, r7, #7
    408c:	781b      	ldrb	r3, [r3, #0]
    408e:	0018      	movs	r0, r3
    4090:	4b04      	ldr	r3, [pc, #16]	; (40a4 <system_gclk_chan_set_config+0x3c>)
    4092:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    4094:	4b04      	ldr	r3, [pc, #16]	; (40a8 <system_gclk_chan_set_config+0x40>)
    4096:	68fa      	ldr	r2, [r7, #12]
    4098:	b292      	uxth	r2, r2
    409a:	805a      	strh	r2, [r3, #2]
}
    409c:	46c0      	nop			; (mov r8, r8)
    409e:	46bd      	mov	sp, r7
    40a0:	b004      	add	sp, #16
    40a2:	bd80      	pop	{r7, pc}
    40a4:	000040f5 	.word	0x000040f5
    40a8:	40000c00 	.word	0x40000c00

000040ac <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    40ac:	b580      	push	{r7, lr}
    40ae:	b082      	sub	sp, #8
    40b0:	af00      	add	r7, sp, #0
    40b2:	0002      	movs	r2, r0
    40b4:	1dfb      	adds	r3, r7, #7
    40b6:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    40b8:	4b0a      	ldr	r3, [pc, #40]	; (40e4 <system_gclk_chan_enable+0x38>)
    40ba:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    40bc:	4a0a      	ldr	r2, [pc, #40]	; (40e8 <system_gclk_chan_enable+0x3c>)
    40be:	1dfb      	adds	r3, r7, #7
    40c0:	781b      	ldrb	r3, [r3, #0]
    40c2:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    40c4:	4909      	ldr	r1, [pc, #36]	; (40ec <system_gclk_chan_enable+0x40>)
    40c6:	4b09      	ldr	r3, [pc, #36]	; (40ec <system_gclk_chan_enable+0x40>)
    40c8:	885b      	ldrh	r3, [r3, #2]
    40ca:	b29b      	uxth	r3, r3
    40cc:	2280      	movs	r2, #128	; 0x80
    40ce:	01d2      	lsls	r2, r2, #7
    40d0:	4313      	orrs	r3, r2
    40d2:	b29b      	uxth	r3, r3
    40d4:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    40d6:	4b06      	ldr	r3, [pc, #24]	; (40f0 <system_gclk_chan_enable+0x44>)
    40d8:	4798      	blx	r3
}
    40da:	46c0      	nop			; (mov r8, r8)
    40dc:	46bd      	mov	sp, r7
    40de:	b002      	add	sp, #8
    40e0:	bd80      	pop	{r7, pc}
    40e2:	46c0      	nop			; (mov r8, r8)
    40e4:	00003d99 	.word	0x00003d99
    40e8:	40000c02 	.word	0x40000c02
    40ec:	40000c00 	.word	0x40000c00
    40f0:	00003dad 	.word	0x00003dad

000040f4 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    40f4:	b580      	push	{r7, lr}
    40f6:	b084      	sub	sp, #16
    40f8:	af00      	add	r7, sp, #0
    40fa:	0002      	movs	r2, r0
    40fc:	1dfb      	adds	r3, r7, #7
    40fe:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    4100:	4b1c      	ldr	r3, [pc, #112]	; (4174 <system_gclk_chan_disable+0x80>)
    4102:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    4104:	4a1c      	ldr	r2, [pc, #112]	; (4178 <system_gclk_chan_disable+0x84>)
    4106:	1dfb      	adds	r3, r7, #7
    4108:	781b      	ldrb	r3, [r3, #0]
    410a:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    410c:	4b1b      	ldr	r3, [pc, #108]	; (417c <system_gclk_chan_disable+0x88>)
    410e:	885b      	ldrh	r3, [r3, #2]
    4110:	051b      	lsls	r3, r3, #20
    4112:	0f1b      	lsrs	r3, r3, #28
    4114:	b2db      	uxtb	r3, r3
    4116:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    4118:	4a18      	ldr	r2, [pc, #96]	; (417c <system_gclk_chan_disable+0x88>)
    411a:	8853      	ldrh	r3, [r2, #2]
    411c:	4918      	ldr	r1, [pc, #96]	; (4180 <system_gclk_chan_disable+0x8c>)
    411e:	400b      	ands	r3, r1
    4120:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    4122:	4a16      	ldr	r2, [pc, #88]	; (417c <system_gclk_chan_disable+0x88>)
    4124:	4b15      	ldr	r3, [pc, #84]	; (417c <system_gclk_chan_disable+0x88>)
    4126:	885b      	ldrh	r3, [r3, #2]
    4128:	b29b      	uxth	r3, r3
    412a:	4916      	ldr	r1, [pc, #88]	; (4184 <system_gclk_chan_disable+0x90>)
    412c:	400b      	ands	r3, r1
    412e:	b29b      	uxth	r3, r3
    4130:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    4132:	46c0      	nop			; (mov r8, r8)
    4134:	4b11      	ldr	r3, [pc, #68]	; (417c <system_gclk_chan_disable+0x88>)
    4136:	885b      	ldrh	r3, [r3, #2]
    4138:	b29b      	uxth	r3, r3
    413a:	001a      	movs	r2, r3
    413c:	2380      	movs	r3, #128	; 0x80
    413e:	01db      	lsls	r3, r3, #7
    4140:	4013      	ands	r3, r2
    4142:	d1f7      	bne.n	4134 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    4144:	4a0d      	ldr	r2, [pc, #52]	; (417c <system_gclk_chan_disable+0x88>)
    4146:	68fb      	ldr	r3, [r7, #12]
    4148:	b2db      	uxtb	r3, r3
    414a:	1c19      	adds	r1, r3, #0
    414c:	230f      	movs	r3, #15
    414e:	400b      	ands	r3, r1
    4150:	b2d9      	uxtb	r1, r3
    4152:	8853      	ldrh	r3, [r2, #2]
    4154:	1c08      	adds	r0, r1, #0
    4156:	210f      	movs	r1, #15
    4158:	4001      	ands	r1, r0
    415a:	0208      	lsls	r0, r1, #8
    415c:	4908      	ldr	r1, [pc, #32]	; (4180 <system_gclk_chan_disable+0x8c>)
    415e:	400b      	ands	r3, r1
    4160:	1c19      	adds	r1, r3, #0
    4162:	1c03      	adds	r3, r0, #0
    4164:	430b      	orrs	r3, r1
    4166:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    4168:	4b07      	ldr	r3, [pc, #28]	; (4188 <system_gclk_chan_disable+0x94>)
    416a:	4798      	blx	r3
}
    416c:	46c0      	nop			; (mov r8, r8)
    416e:	46bd      	mov	sp, r7
    4170:	b004      	add	sp, #16
    4172:	bd80      	pop	{r7, pc}
    4174:	00003d99 	.word	0x00003d99
    4178:	40000c02 	.word	0x40000c02
    417c:	40000c00 	.word	0x40000c00
    4180:	fffff0ff 	.word	0xfffff0ff
    4184:	ffffbfff 	.word	0xffffbfff
    4188:	00003dad 	.word	0x00003dad

0000418c <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    418c:	b580      	push	{r7, lr}
    418e:	b084      	sub	sp, #16
    4190:	af00      	add	r7, sp, #0
    4192:	0002      	movs	r2, r0
    4194:	1dfb      	adds	r3, r7, #7
    4196:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    4198:	4b0d      	ldr	r3, [pc, #52]	; (41d0 <system_gclk_chan_get_hz+0x44>)
    419a:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    419c:	4a0d      	ldr	r2, [pc, #52]	; (41d4 <system_gclk_chan_get_hz+0x48>)
    419e:	1dfb      	adds	r3, r7, #7
    41a0:	781b      	ldrb	r3, [r3, #0]
    41a2:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    41a4:	4b0c      	ldr	r3, [pc, #48]	; (41d8 <system_gclk_chan_get_hz+0x4c>)
    41a6:	885b      	ldrh	r3, [r3, #2]
    41a8:	051b      	lsls	r3, r3, #20
    41aa:	0f1b      	lsrs	r3, r3, #28
    41ac:	b2da      	uxtb	r2, r3
    41ae:	230f      	movs	r3, #15
    41b0:	18fb      	adds	r3, r7, r3
    41b2:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    41b4:	4b09      	ldr	r3, [pc, #36]	; (41dc <system_gclk_chan_get_hz+0x50>)
    41b6:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    41b8:	230f      	movs	r3, #15
    41ba:	18fb      	adds	r3, r7, r3
    41bc:	781b      	ldrb	r3, [r3, #0]
    41be:	0018      	movs	r0, r3
    41c0:	4b07      	ldr	r3, [pc, #28]	; (41e0 <system_gclk_chan_get_hz+0x54>)
    41c2:	4798      	blx	r3
    41c4:	0003      	movs	r3, r0
}
    41c6:	0018      	movs	r0, r3
    41c8:	46bd      	mov	sp, r7
    41ca:	b004      	add	sp, #16
    41cc:	bd80      	pop	{r7, pc}
    41ce:	46c0      	nop			; (mov r8, r8)
    41d0:	00003d99 	.word	0x00003d99
    41d4:	40000c02 	.word	0x40000c02
    41d8:	40000c00 	.word	0x40000c00
    41dc:	00003dad 	.word	0x00003dad
    41e0:	00003f91 	.word	0x00003f91

000041e4 <system_pinmux_get_group_from_gpio_pin>:
{
    41e4:	b580      	push	{r7, lr}
    41e6:	b084      	sub	sp, #16
    41e8:	af00      	add	r7, sp, #0
    41ea:	0002      	movs	r2, r0
    41ec:	1dfb      	adds	r3, r7, #7
    41ee:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    41f0:	230f      	movs	r3, #15
    41f2:	18fb      	adds	r3, r7, r3
    41f4:	1dfa      	adds	r2, r7, #7
    41f6:	7812      	ldrb	r2, [r2, #0]
    41f8:	09d2      	lsrs	r2, r2, #7
    41fa:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    41fc:	230e      	movs	r3, #14
    41fe:	18fb      	adds	r3, r7, r3
    4200:	1dfa      	adds	r2, r7, #7
    4202:	7812      	ldrb	r2, [r2, #0]
    4204:	0952      	lsrs	r2, r2, #5
    4206:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    4208:	4b0d      	ldr	r3, [pc, #52]	; (4240 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    420a:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    420c:	230f      	movs	r3, #15
    420e:	18fb      	adds	r3, r7, r3
    4210:	781b      	ldrb	r3, [r3, #0]
    4212:	2b00      	cmp	r3, #0
    4214:	d10f      	bne.n	4236 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    4216:	230f      	movs	r3, #15
    4218:	18fb      	adds	r3, r7, r3
    421a:	781b      	ldrb	r3, [r3, #0]
    421c:	009b      	lsls	r3, r3, #2
    421e:	2210      	movs	r2, #16
    4220:	4694      	mov	ip, r2
    4222:	44bc      	add	ip, r7
    4224:	4463      	add	r3, ip
    4226:	3b08      	subs	r3, #8
    4228:	681a      	ldr	r2, [r3, #0]
    422a:	230e      	movs	r3, #14
    422c:	18fb      	adds	r3, r7, r3
    422e:	781b      	ldrb	r3, [r3, #0]
    4230:	01db      	lsls	r3, r3, #7
    4232:	18d3      	adds	r3, r2, r3
    4234:	e000      	b.n	4238 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    4236:	2300      	movs	r3, #0
}
    4238:	0018      	movs	r0, r3
    423a:	46bd      	mov	sp, r7
    423c:	b004      	add	sp, #16
    423e:	bd80      	pop	{r7, pc}
    4240:	41004400 	.word	0x41004400

00004244 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    4244:	b580      	push	{r7, lr}
    4246:	b088      	sub	sp, #32
    4248:	af00      	add	r7, sp, #0
    424a:	60f8      	str	r0, [r7, #12]
    424c:	60b9      	str	r1, [r7, #8]
    424e:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    4250:	2300      	movs	r3, #0
    4252:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    4254:	687b      	ldr	r3, [r7, #4]
    4256:	78db      	ldrb	r3, [r3, #3]
    4258:	2201      	movs	r2, #1
    425a:	4053      	eors	r3, r2
    425c:	b2db      	uxtb	r3, r3
    425e:	2b00      	cmp	r3, #0
    4260:	d035      	beq.n	42ce <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    4262:	687b      	ldr	r3, [r7, #4]
    4264:	781b      	ldrb	r3, [r3, #0]
    4266:	2b80      	cmp	r3, #128	; 0x80
    4268:	d00b      	beq.n	4282 <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    426a:	69fb      	ldr	r3, [r7, #28]
    426c:	2280      	movs	r2, #128	; 0x80
    426e:	0252      	lsls	r2, r2, #9
    4270:	4313      	orrs	r3, r2
    4272:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    4274:	687b      	ldr	r3, [r7, #4]
    4276:	781b      	ldrb	r3, [r3, #0]
    4278:	061b      	lsls	r3, r3, #24
    427a:	001a      	movs	r2, r3
    427c:	69fb      	ldr	r3, [r7, #28]
    427e:	4313      	orrs	r3, r2
    4280:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    4282:	687b      	ldr	r3, [r7, #4]
    4284:	785b      	ldrb	r3, [r3, #1]
    4286:	2b00      	cmp	r3, #0
    4288:	d003      	beq.n	4292 <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    428a:	687b      	ldr	r3, [r7, #4]
    428c:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    428e:	2b02      	cmp	r3, #2
    4290:	d110      	bne.n	42b4 <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    4292:	69fb      	ldr	r3, [r7, #28]
    4294:	2280      	movs	r2, #128	; 0x80
    4296:	0292      	lsls	r2, r2, #10
    4298:	4313      	orrs	r3, r2
    429a:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    429c:	687b      	ldr	r3, [r7, #4]
    429e:	789b      	ldrb	r3, [r3, #2]
    42a0:	2b00      	cmp	r3, #0
    42a2:	d004      	beq.n	42ae <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    42a4:	69fb      	ldr	r3, [r7, #28]
    42a6:	2280      	movs	r2, #128	; 0x80
    42a8:	02d2      	lsls	r2, r2, #11
    42aa:	4313      	orrs	r3, r2
    42ac:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    42ae:	68fb      	ldr	r3, [r7, #12]
    42b0:	68ba      	ldr	r2, [r7, #8]
    42b2:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    42b4:	687b      	ldr	r3, [r7, #4]
    42b6:	785b      	ldrb	r3, [r3, #1]
    42b8:	2b01      	cmp	r3, #1
    42ba:	d003      	beq.n	42c4 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    42bc:	687b      	ldr	r3, [r7, #4]
    42be:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    42c0:	2b02      	cmp	r3, #2
    42c2:	d107      	bne.n	42d4 <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    42c4:	69fb      	ldr	r3, [r7, #28]
    42c6:	4a22      	ldr	r2, [pc, #136]	; (4350 <_system_pinmux_config+0x10c>)
    42c8:	4013      	ands	r3, r2
    42ca:	61fb      	str	r3, [r7, #28]
    42cc:	e002      	b.n	42d4 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    42ce:	68fb      	ldr	r3, [r7, #12]
    42d0:	68ba      	ldr	r2, [r7, #8]
    42d2:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    42d4:	68bb      	ldr	r3, [r7, #8]
    42d6:	041b      	lsls	r3, r3, #16
    42d8:	0c1b      	lsrs	r3, r3, #16
    42da:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    42dc:	68bb      	ldr	r3, [r7, #8]
    42de:	0c1b      	lsrs	r3, r3, #16
    42e0:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    42e2:	69ba      	ldr	r2, [r7, #24]
    42e4:	69fb      	ldr	r3, [r7, #28]
    42e6:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    42e8:	22a0      	movs	r2, #160	; 0xa0
    42ea:	05d2      	lsls	r2, r2, #23
    42ec:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    42ee:	68fb      	ldr	r3, [r7, #12]
    42f0:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    42f2:	697a      	ldr	r2, [r7, #20]
    42f4:	69fb      	ldr	r3, [r7, #28]
    42f6:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    42f8:	22d0      	movs	r2, #208	; 0xd0
    42fa:	0612      	lsls	r2, r2, #24
    42fc:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    42fe:	68fb      	ldr	r3, [r7, #12]
    4300:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    4302:	687b      	ldr	r3, [r7, #4]
    4304:	78db      	ldrb	r3, [r3, #3]
    4306:	2201      	movs	r2, #1
    4308:	4053      	eors	r3, r2
    430a:	b2db      	uxtb	r3, r3
    430c:	2b00      	cmp	r3, #0
    430e:	d01a      	beq.n	4346 <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    4310:	69fa      	ldr	r2, [r7, #28]
    4312:	2380      	movs	r3, #128	; 0x80
    4314:	02db      	lsls	r3, r3, #11
    4316:	4013      	ands	r3, r2
    4318:	d00a      	beq.n	4330 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    431a:	687b      	ldr	r3, [r7, #4]
    431c:	789b      	ldrb	r3, [r3, #2]
    431e:	2b01      	cmp	r3, #1
    4320:	d103      	bne.n	432a <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    4322:	68fb      	ldr	r3, [r7, #12]
    4324:	68ba      	ldr	r2, [r7, #8]
    4326:	619a      	str	r2, [r3, #24]
    4328:	e002      	b.n	4330 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    432a:	68fb      	ldr	r3, [r7, #12]
    432c:	68ba      	ldr	r2, [r7, #8]
    432e:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    4330:	687b      	ldr	r3, [r7, #4]
    4332:	785b      	ldrb	r3, [r3, #1]
    4334:	2b01      	cmp	r3, #1
    4336:	d003      	beq.n	4340 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    4338:	687b      	ldr	r3, [r7, #4]
    433a:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    433c:	2b02      	cmp	r3, #2
    433e:	d102      	bne.n	4346 <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    4340:	68fb      	ldr	r3, [r7, #12]
    4342:	68ba      	ldr	r2, [r7, #8]
    4344:	609a      	str	r2, [r3, #8]
		}
	}
}
    4346:	46c0      	nop			; (mov r8, r8)
    4348:	46bd      	mov	sp, r7
    434a:	b008      	add	sp, #32
    434c:	bd80      	pop	{r7, pc}
    434e:	46c0      	nop			; (mov r8, r8)
    4350:	fffbffff 	.word	0xfffbffff

00004354 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    4354:	b580      	push	{r7, lr}
    4356:	b084      	sub	sp, #16
    4358:	af00      	add	r7, sp, #0
    435a:	0002      	movs	r2, r0
    435c:	6039      	str	r1, [r7, #0]
    435e:	1dfb      	adds	r3, r7, #7
    4360:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    4362:	1dfb      	adds	r3, r7, #7
    4364:	781b      	ldrb	r3, [r3, #0]
    4366:	0018      	movs	r0, r3
    4368:	4b0a      	ldr	r3, [pc, #40]	; (4394 <system_pinmux_pin_set_config+0x40>)
    436a:	4798      	blx	r3
    436c:	0003      	movs	r3, r0
    436e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    4370:	1dfb      	adds	r3, r7, #7
    4372:	781b      	ldrb	r3, [r3, #0]
    4374:	221f      	movs	r2, #31
    4376:	4013      	ands	r3, r2
    4378:	2201      	movs	r2, #1
    437a:	409a      	lsls	r2, r3
    437c:	0013      	movs	r3, r2
    437e:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    4380:	683a      	ldr	r2, [r7, #0]
    4382:	68b9      	ldr	r1, [r7, #8]
    4384:	68fb      	ldr	r3, [r7, #12]
    4386:	0018      	movs	r0, r3
    4388:	4b03      	ldr	r3, [pc, #12]	; (4398 <system_pinmux_pin_set_config+0x44>)
    438a:	4798      	blx	r3
}
    438c:	46c0      	nop			; (mov r8, r8)
    438e:	46bd      	mov	sp, r7
    4390:	b004      	add	sp, #16
    4392:	bd80      	pop	{r7, pc}
    4394:	000041e5 	.word	0x000041e5
    4398:	00004245 	.word	0x00004245

0000439c <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    439c:	b580      	push	{r7, lr}
    439e:	af00      	add	r7, sp, #0
	return;
    43a0:	46c0      	nop			; (mov r8, r8)
}
    43a2:	46bd      	mov	sp, r7
    43a4:	bd80      	pop	{r7, pc}
	...

000043a8 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    43a8:	b580      	push	{r7, lr}
    43aa:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    43ac:	4b06      	ldr	r3, [pc, #24]	; (43c8 <system_init+0x20>)
    43ae:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    43b0:	4b06      	ldr	r3, [pc, #24]	; (43cc <system_init+0x24>)
    43b2:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    43b4:	4b06      	ldr	r3, [pc, #24]	; (43d0 <system_init+0x28>)
    43b6:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    43b8:	4b06      	ldr	r3, [pc, #24]	; (43d4 <system_init+0x2c>)
    43ba:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    43bc:	4b06      	ldr	r3, [pc, #24]	; (43d8 <system_init+0x30>)
    43be:	4798      	blx	r3
}
    43c0:	46c0      	nop			; (mov r8, r8)
    43c2:	46bd      	mov	sp, r7
    43c4:	bd80      	pop	{r7, pc}
    43c6:	46c0      	nop			; (mov r8, r8)
    43c8:	00003c69 	.word	0x00003c69
    43cc:	00003855 	.word	0x00003855
    43d0:	0000439d 	.word	0x0000439d
    43d4:	00000455 	.word	0x00000455
    43d8:	0000439d 	.word	0x0000439d

000043dc <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    43dc:	b580      	push	{r7, lr}
    43de:	b082      	sub	sp, #8
    43e0:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    43e2:	4b2f      	ldr	r3, [pc, #188]	; (44a0 <Reset_Handler+0xc4>)
    43e4:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    43e6:	4b2f      	ldr	r3, [pc, #188]	; (44a4 <Reset_Handler+0xc8>)
    43e8:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    43ea:	687a      	ldr	r2, [r7, #4]
    43ec:	683b      	ldr	r3, [r7, #0]
    43ee:	429a      	cmp	r2, r3
    43f0:	d00c      	beq.n	440c <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    43f2:	e007      	b.n	4404 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    43f4:	683b      	ldr	r3, [r7, #0]
    43f6:	1d1a      	adds	r2, r3, #4
    43f8:	603a      	str	r2, [r7, #0]
    43fa:	687a      	ldr	r2, [r7, #4]
    43fc:	1d11      	adds	r1, r2, #4
    43fe:	6079      	str	r1, [r7, #4]
    4400:	6812      	ldr	r2, [r2, #0]
    4402:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
    4404:	683a      	ldr	r2, [r7, #0]
    4406:	4b28      	ldr	r3, [pc, #160]	; (44a8 <Reset_Handler+0xcc>)
    4408:	429a      	cmp	r2, r3
    440a:	d3f3      	bcc.n	43f4 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    440c:	4b27      	ldr	r3, [pc, #156]	; (44ac <Reset_Handler+0xd0>)
    440e:	603b      	str	r3, [r7, #0]
    4410:	e004      	b.n	441c <Reset_Handler+0x40>
                *pDest++ = 0;
    4412:	683b      	ldr	r3, [r7, #0]
    4414:	1d1a      	adds	r2, r3, #4
    4416:	603a      	str	r2, [r7, #0]
    4418:	2200      	movs	r2, #0
    441a:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
    441c:	683a      	ldr	r2, [r7, #0]
    441e:	4b24      	ldr	r3, [pc, #144]	; (44b0 <Reset_Handler+0xd4>)
    4420:	429a      	cmp	r2, r3
    4422:	d3f6      	bcc.n	4412 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    4424:	4b23      	ldr	r3, [pc, #140]	; (44b4 <Reset_Handler+0xd8>)
    4426:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    4428:	4b23      	ldr	r3, [pc, #140]	; (44b8 <Reset_Handler+0xdc>)
    442a:	687a      	ldr	r2, [r7, #4]
    442c:	21ff      	movs	r1, #255	; 0xff
    442e:	438a      	bics	r2, r1
    4430:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    4432:	4a22      	ldr	r2, [pc, #136]	; (44bc <Reset_Handler+0xe0>)
    4434:	2390      	movs	r3, #144	; 0x90
    4436:	005b      	lsls	r3, r3, #1
    4438:	2102      	movs	r1, #2
    443a:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    443c:	4a20      	ldr	r2, [pc, #128]	; (44c0 <Reset_Handler+0xe4>)
    443e:	78d3      	ldrb	r3, [r2, #3]
    4440:	2103      	movs	r1, #3
    4442:	438b      	bics	r3, r1
    4444:	1c19      	adds	r1, r3, #0
    4446:	2302      	movs	r3, #2
    4448:	430b      	orrs	r3, r1
    444a:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    444c:	4a1c      	ldr	r2, [pc, #112]	; (44c0 <Reset_Handler+0xe4>)
    444e:	78d3      	ldrb	r3, [r2, #3]
    4450:	210c      	movs	r1, #12
    4452:	438b      	bics	r3, r1
    4454:	1c19      	adds	r1, r3, #0
    4456:	2308      	movs	r3, #8
    4458:	430b      	orrs	r3, r1
    445a:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    445c:	4a19      	ldr	r2, [pc, #100]	; (44c4 <Reset_Handler+0xe8>)
    445e:	7b93      	ldrb	r3, [r2, #14]
    4460:	2130      	movs	r1, #48	; 0x30
    4462:	438b      	bics	r3, r1
    4464:	1c19      	adds	r1, r3, #0
    4466:	2320      	movs	r3, #32
    4468:	430b      	orrs	r3, r1
    446a:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    446c:	4a15      	ldr	r2, [pc, #84]	; (44c4 <Reset_Handler+0xe8>)
    446e:	7b93      	ldrb	r3, [r2, #14]
    4470:	210c      	movs	r1, #12
    4472:	438b      	bics	r3, r1
    4474:	1c19      	adds	r1, r3, #0
    4476:	2308      	movs	r3, #8
    4478:	430b      	orrs	r3, r1
    447a:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    447c:	4a11      	ldr	r2, [pc, #68]	; (44c4 <Reset_Handler+0xe8>)
    447e:	7b93      	ldrb	r3, [r2, #14]
    4480:	2103      	movs	r1, #3
    4482:	438b      	bics	r3, r1
    4484:	1c19      	adds	r1, r3, #0
    4486:	2302      	movs	r3, #2
    4488:	430b      	orrs	r3, r1
    448a:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    448c:	4a0e      	ldr	r2, [pc, #56]	; (44c8 <Reset_Handler+0xec>)
    448e:	6853      	ldr	r3, [r2, #4]
    4490:	2180      	movs	r1, #128	; 0x80
    4492:	430b      	orrs	r3, r1
    4494:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    4496:	4b0d      	ldr	r3, [pc, #52]	; (44cc <Reset_Handler+0xf0>)
    4498:	4798      	blx	r3

        /* Branch to main function */
        main();
    449a:	4b0d      	ldr	r3, [pc, #52]	; (44d0 <Reset_Handler+0xf4>)
    449c:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    449e:	e7fe      	b.n	449e <Reset_Handler+0xc2>
    44a0:	00008bfc 	.word	0x00008bfc
    44a4:	20000000 	.word	0x20000000
    44a8:	20000078 	.word	0x20000078
    44ac:	20000078 	.word	0x20000078
    44b0:	200001e4 	.word	0x200001e4
    44b4:	00000000 	.word	0x00000000
    44b8:	e000ed00 	.word	0xe000ed00
    44bc:	41007000 	.word	0x41007000
    44c0:	41005000 	.word	0x41005000
    44c4:	41004800 	.word	0x41004800
    44c8:	41004000 	.word	0x41004000
    44cc:	00008065 	.word	0x00008065
    44d0:	00004565 	.word	0x00004565

000044d4 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
uint32_t phantomISR = 9999;

void Dummy_Handler(void)
{
    44d4:	b580      	push	{r7, lr}
    44d6:	b082      	sub	sp, #8
    44d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    44da:	f3ef 8305 	mrs	r3, IPSR
    44de:	607b      	str	r3, [r7, #4]
  return(result);
    44e0:	687a      	ldr	r2, [r7, #4]
        while (1) {
			phantomISR = __get_IPSR();
    44e2:	4b01      	ldr	r3, [pc, #4]	; (44e8 <Dummy_Handler+0x14>)
    44e4:	601a      	str	r2, [r3, #0]
    44e6:	e7f8      	b.n	44da <Dummy_Handler+0x6>
    44e8:	2000000c 	.word	0x2000000c

000044ec <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    44ec:	b580      	push	{r7, lr}
    44ee:	b084      	sub	sp, #16
    44f0:	af00      	add	r7, sp, #0
    44f2:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    44f4:	4b0a      	ldr	r3, [pc, #40]	; (4520 <_sbrk+0x34>)
    44f6:	681b      	ldr	r3, [r3, #0]
    44f8:	2b00      	cmp	r3, #0
    44fa:	d102      	bne.n	4502 <_sbrk+0x16>
		heap = (unsigned char *)&_end;
    44fc:	4b08      	ldr	r3, [pc, #32]	; (4520 <_sbrk+0x34>)
    44fe:	4a09      	ldr	r2, [pc, #36]	; (4524 <_sbrk+0x38>)
    4500:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    4502:	4b07      	ldr	r3, [pc, #28]	; (4520 <_sbrk+0x34>)
    4504:	681b      	ldr	r3, [r3, #0]
    4506:	60fb      	str	r3, [r7, #12]

	heap += incr;
    4508:	4b05      	ldr	r3, [pc, #20]	; (4520 <_sbrk+0x34>)
    450a:	681a      	ldr	r2, [r3, #0]
    450c:	687b      	ldr	r3, [r7, #4]
    450e:	18d2      	adds	r2, r2, r3
    4510:	4b03      	ldr	r3, [pc, #12]	; (4520 <_sbrk+0x34>)
    4512:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
    4514:	68fb      	ldr	r3, [r7, #12]
}
    4516:	0018      	movs	r0, r3
    4518:	46bd      	mov	sp, r7
    451a:	b004      	add	sp, #16
    451c:	bd80      	pop	{r7, pc}
    451e:	46c0      	nop			; (mov r8, r8)
    4520:	200000b8 	.word	0x200000b8
    4524:	200021e8 	.word	0x200021e8

00004528 <sleepmgr_init>:
 * Sets all lock counts to 0, except the very last one, which is set to 1. This
 * is done to simplify the algorithm for finding the deepest allowable sleep
 * mode in \ref sleepmgr_enter_sleep.
 */
static inline void sleepmgr_init(void)
{
    4528:	b580      	push	{r7, lr}
    452a:	b082      	sub	sp, #8
    452c:	af00      	add	r7, sp, #0
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
    452e:	1dfb      	adds	r3, r7, #7
    4530:	2200      	movs	r2, #0
    4532:	701a      	strb	r2, [r3, #0]
    4534:	e009      	b.n	454a <sleepmgr_init+0x22>
		sleepmgr_locks[i] = 0;
    4536:	1dfb      	adds	r3, r7, #7
    4538:	781b      	ldrb	r3, [r3, #0]
    453a:	4a09      	ldr	r2, [pc, #36]	; (4560 <sleepmgr_init+0x38>)
    453c:	2100      	movs	r1, #0
    453e:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
    4540:	1dfb      	adds	r3, r7, #7
    4542:	781a      	ldrb	r2, [r3, #0]
    4544:	1dfb      	adds	r3, r7, #7
    4546:	3201      	adds	r2, #1
    4548:	701a      	strb	r2, [r3, #0]
    454a:	1dfb      	adds	r3, r7, #7
    454c:	781b      	ldrb	r3, [r3, #0]
    454e:	2b03      	cmp	r3, #3
    4550:	d9f1      	bls.n	4536 <sleepmgr_init+0xe>
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    4552:	4b03      	ldr	r3, [pc, #12]	; (4560 <sleepmgr_init+0x38>)
    4554:	2201      	movs	r2, #1
    4556:	711a      	strb	r2, [r3, #4]
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
    4558:	46c0      	nop			; (mov r8, r8)
    455a:	46bd      	mov	sp, r7
    455c:	b002      	add	sp, #8
    455e:	bd80      	pop	{r7, pc}
    4560:	2000010c 	.word	0x2000010c

00004564 <main>:
	
uint8_t data_array[16];
char str_buf[64];

int main (void)
{
    4564:	b590      	push	{r4, r7, lr}
    4566:	b085      	sub	sp, #20
    4568:	af02      	add	r7, sp, #8
	system_init();
    456a:	4b36      	ldr	r3, [pc, #216]	; (4644 <main+0xe0>)
    456c:	4798      	blx	r3
	delay_init();
    456e:	4b36      	ldr	r3, [pc, #216]	; (4648 <main+0xe4>)
    4570:	4798      	blx	r3
	spi_master_init();
    4572:	4b36      	ldr	r3, [pc, #216]	; (464c <main+0xe8>)
    4574:	4798      	blx	r3
	uart_init();
    4576:	4b36      	ldr	r3, [pc, #216]	; (4650 <main+0xec>)
    4578:	4798      	blx	r3
	bme280_init();
    457a:	4b36      	ldr	r3, [pc, #216]	; (4654 <main+0xf0>)
    457c:	4798      	blx	r3
	rotenc_init();
    457e:	4b36      	ldr	r3, [pc, #216]	; (4658 <main+0xf4>)
    4580:	4798      	blx	r3
	sleepmgr_init();
    4582:	4b36      	ldr	r3, [pc, #216]	; (465c <main+0xf8>)
    4584:	4798      	blx	r3
	
	//vbat_init();
	nrf24l01_init();
    4586:	4b36      	ldr	r3, [pc, #216]	; (4660 <main+0xfc>)
    4588:	4798      	blx	r3
	
	sprintf(str_buf,"\r\nBooting nrf24l01-node - app\r\n");
    458a:	4a36      	ldr	r2, [pc, #216]	; (4664 <main+0x100>)
    458c:	4b36      	ldr	r3, [pc, #216]	; (4668 <main+0x104>)
    458e:	0010      	movs	r0, r2
    4590:	0019      	movs	r1, r3
    4592:	2320      	movs	r3, #32
    4594:	001a      	movs	r2, r3
    4596:	4b35      	ldr	r3, [pc, #212]	; (466c <main+0x108>)
    4598:	4798      	blx	r3
	uart_write(str_buf);
    459a:	4b32      	ldr	r3, [pc, #200]	; (4664 <main+0x100>)
    459c:	0018      	movs	r0, r3
    459e:	4b34      	ldr	r3, [pc, #208]	; (4670 <main+0x10c>)
    45a0:	4798      	blx	r3
	sprintf(str_buf,"SW version: %d\r\n",SOFTWARE_VERSION);
    45a2:	4934      	ldr	r1, [pc, #208]	; (4674 <main+0x110>)
    45a4:	4b2f      	ldr	r3, [pc, #188]	; (4664 <main+0x100>)
    45a6:	222a      	movs	r2, #42	; 0x2a
    45a8:	0018      	movs	r0, r3
    45aa:	4b33      	ldr	r3, [pc, #204]	; (4678 <main+0x114>)
    45ac:	4798      	blx	r3
	uart_write(str_buf);
    45ae:	4b2d      	ldr	r3, [pc, #180]	; (4664 <main+0x100>)
    45b0:	0018      	movs	r0, r3
    45b2:	4b2f      	ldr	r3, [pc, #188]	; (4670 <main+0x10c>)
    45b4:	4798      	blx	r3
	
	delay_ms(500);
    45b6:	23fa      	movs	r3, #250	; 0xfa
    45b8:	005b      	lsls	r3, r3, #1
    45ba:	0018      	movs	r0, r3
    45bc:	4b2f      	ldr	r3, [pc, #188]	; (467c <main+0x118>)
    45be:	4798      	blx	r3
	nrf24l01_status();
    45c0:	4b2f      	ldr	r3, [pc, #188]	; (4680 <main+0x11c>)
    45c2:	4798      	blx	r3
	
	woke = true;
    45c4:	4b2f      	ldr	r3, [pc, #188]	; (4684 <main+0x120>)
    45c6:	2201      	movs	r2, #1
    45c8:	701a      	strb	r2, [r3, #0]
	//sleepmgr_enter_sleep();
	
	
	while (1)
	{
		if(woke)
    45ca:	4b2e      	ldr	r3, [pc, #184]	; (4684 <main+0x120>)
    45cc:	781b      	ldrb	r3, [r3, #0]
    45ce:	2b00      	cmp	r3, #0
    45d0:	d0fb      	beq.n	45ca <main+0x66>
		{
			nrf_enable_vcc();
    45d2:	4b2d      	ldr	r3, [pc, #180]	; (4688 <main+0x124>)
    45d4:	4798      	blx	r3
			bme280_get_all_calced(&bme280_data_object);
    45d6:	4b2d      	ldr	r3, [pc, #180]	; (468c <main+0x128>)
    45d8:	0018      	movs	r0, r3
    45da:	4b2d      	ldr	r3, [pc, #180]	; (4690 <main+0x12c>)
    45dc:	4798      	blx	r3
			bme280_data_compress(&bme280_data_object,&data_array);
    45de:	4a2d      	ldr	r2, [pc, #180]	; (4694 <main+0x130>)
    45e0:	4b2a      	ldr	r3, [pc, #168]	; (468c <main+0x128>)
    45e2:	0011      	movs	r1, r2
    45e4:	0018      	movs	r0, r3
    45e6:	4b2c      	ldr	r3, [pc, #176]	; (4698 <main+0x134>)
    45e8:	4798      	blx	r3
			//NRF_Enter_TX_Mode(TX_ADDR,RX_ADDR);
			uint32_t status = NRF_TX_data(&data_array,16);	
    45ea:	4b2a      	ldr	r3, [pc, #168]	; (4694 <main+0x130>)
    45ec:	2110      	movs	r1, #16
    45ee:	0018      	movs	r0, r3
    45f0:	4b2a      	ldr	r3, [pc, #168]	; (469c <main+0x138>)
    45f2:	4798      	blx	r3
    45f4:	0003      	movs	r3, r0
    45f6:	607b      	str	r3, [r7, #4]
			nrf24l01_status();
    45f8:	4b21      	ldr	r3, [pc, #132]	; (4680 <main+0x11c>)
    45fa:	4798      	blx	r3
			//uint32_t status = NRF_TX(NRF_CONTACT_2BTN_V1,NRF_CMD_OFF);
			uart_write("----------------\r\n");
    45fc:	4b28      	ldr	r3, [pc, #160]	; (46a0 <main+0x13c>)
    45fe:	0018      	movs	r0, r3
    4600:	4b1b      	ldr	r3, [pc, #108]	; (4670 <main+0x10c>)
    4602:	4798      	blx	r3
			sprintf(str_buf,"T:\t%d\r\nH:\t%d\r\nP:\t%ld\r\n\r\n",bme280_data_object.temperature/100,(int)bme280_data_object.humidity,(int)bme280_data_object.pressure);
    4604:	4b21      	ldr	r3, [pc, #132]	; (468c <main+0x128>)
    4606:	681a      	ldr	r2, [r3, #0]
    4608:	4b26      	ldr	r3, [pc, #152]	; (46a4 <main+0x140>)
    460a:	2164      	movs	r1, #100	; 0x64
    460c:	0010      	movs	r0, r2
    460e:	4798      	blx	r3
    4610:	0003      	movs	r3, r0
    4612:	001c      	movs	r4, r3
    4614:	4b1d      	ldr	r3, [pc, #116]	; (468c <main+0x128>)
    4616:	689a      	ldr	r2, [r3, #8]
    4618:	4b23      	ldr	r3, [pc, #140]	; (46a8 <main+0x144>)
    461a:	1c10      	adds	r0, r2, #0
    461c:	4798      	blx	r3
    461e:	0002      	movs	r2, r0
    4620:	4b1a      	ldr	r3, [pc, #104]	; (468c <main+0x128>)
    4622:	685b      	ldr	r3, [r3, #4]
    4624:	4921      	ldr	r1, [pc, #132]	; (46ac <main+0x148>)
    4626:	480f      	ldr	r0, [pc, #60]	; (4664 <main+0x100>)
    4628:	9300      	str	r3, [sp, #0]
    462a:	0013      	movs	r3, r2
    462c:	0022      	movs	r2, r4
    462e:	4c12      	ldr	r4, [pc, #72]	; (4678 <main+0x114>)
    4630:	47a0      	blx	r4
			uart_write(str_buf);
    4632:	4b0c      	ldr	r3, [pc, #48]	; (4664 <main+0x100>)
    4634:	0018      	movs	r0, r3
    4636:	4b0e      	ldr	r3, [pc, #56]	; (4670 <main+0x10c>)
    4638:	4798      	blx	r3
			woke = false;
    463a:	4b12      	ldr	r3, [pc, #72]	; (4684 <main+0x120>)
    463c:	2200      	movs	r2, #0
    463e:	701a      	strb	r2, [r3, #0]
		if(woke)
    4640:	e7c3      	b.n	45ca <main+0x66>
    4642:	46c0      	nop			; (mov r8, r8)
    4644:	000043a9 	.word	0x000043a9
    4648:	00000bf5 	.word	0x00000bf5
    464c:	00002855 	.word	0x00002855
    4650:	00000af9 	.word	0x00000af9
    4654:	00001c09 	.word	0x00001c09
    4658:	000007e1 	.word	0x000007e1
    465c:	00004529 	.word	0x00004529
    4660:	0000218d 	.word	0x0000218d
    4664:	20000180 	.word	0x20000180
    4668:	00008a9c 	.word	0x00008a9c
    466c:	000080ad 	.word	0x000080ad
    4670:	00000b79 	.word	0x00000b79
    4674:	00008abc 	.word	0x00008abc
    4678:	000080d1 	.word	0x000080d1
    467c:	00000c4d 	.word	0x00000c4d
    4680:	00001fb5 	.word	0x00001fb5
    4684:	20000108 	.word	0x20000108
    4688:	000025e1 	.word	0x000025e1
    468c:	200001c0 	.word	0x200001c0
    4690:	00001ac5 	.word	0x00001ac5
    4694:	200001d0 	.word	0x200001d0
    4698:	00001c95 	.word	0x00001c95
    469c:	00002451 	.word	0x00002451
    46a0:	00008ad0 	.word	0x00008ad0
    46a4:	000060e9 	.word	0x000060e9
    46a8:	0000633d 	.word	0x0000633d
    46ac:	00008ae4 	.word	0x00008ae4

000046b0 <log>:
    46b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    46b2:	46c6      	mov	lr, r8
    46b4:	b500      	push	{lr}
    46b6:	b08c      	sub	sp, #48	; 0x30
    46b8:	0004      	movs	r4, r0
    46ba:	000d      	movs	r5, r1
    46bc:	f000 fab8 	bl	4c30 <__ieee754_log>
    46c0:	4b3a      	ldr	r3, [pc, #232]	; (47ac <log+0xfc>)
    46c2:	0006      	movs	r6, r0
    46c4:	781b      	ldrb	r3, [r3, #0]
    46c6:	000f      	movs	r7, r1
    46c8:	b25b      	sxtb	r3, r3
    46ca:	4698      	mov	r8, r3
    46cc:	3301      	adds	r3, #1
    46ce:	d00f      	beq.n	46f0 <log+0x40>
    46d0:	0022      	movs	r2, r4
    46d2:	002b      	movs	r3, r5
    46d4:	0020      	movs	r0, r4
    46d6:	0029      	movs	r1, r5
    46d8:	f003 fb2a 	bl	7d30 <__aeabi_dcmpun>
    46dc:	2800      	cmp	r0, #0
    46de:	d107      	bne.n	46f0 <log+0x40>
    46e0:	2200      	movs	r2, #0
    46e2:	2300      	movs	r3, #0
    46e4:	0020      	movs	r0, r4
    46e6:	0029      	movs	r1, r5
    46e8:	f001 fe14 	bl	6314 <__aeabi_dcmpgt>
    46ec:	2800      	cmp	r0, #0
    46ee:	d005      	beq.n	46fc <log+0x4c>
    46f0:	0030      	movs	r0, r6
    46f2:	0039      	movs	r1, r7
    46f4:	b00c      	add	sp, #48	; 0x30
    46f6:	bc04      	pop	{r2}
    46f8:	4690      	mov	r8, r2
    46fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    46fc:	4b2c      	ldr	r3, [pc, #176]	; (47b0 <log+0x100>)
    46fe:	900a      	str	r0, [sp, #40]	; 0x28
    4700:	9303      	str	r3, [sp, #12]
    4702:	4643      	mov	r3, r8
    4704:	9404      	str	r4, [sp, #16]
    4706:	9505      	str	r5, [sp, #20]
    4708:	9406      	str	r4, [sp, #24]
    470a:	9507      	str	r5, [sp, #28]
    470c:	2b00      	cmp	r3, #0
    470e:	d11a      	bne.n	4746 <log+0x96>
    4710:	22e0      	movs	r2, #224	; 0xe0
    4712:	4b28      	ldr	r3, [pc, #160]	; (47b4 <log+0x104>)
    4714:	0612      	lsls	r2, r2, #24
    4716:	9208      	str	r2, [sp, #32]
    4718:	9309      	str	r3, [sp, #36]	; 0x24
    471a:	0020      	movs	r0, r4
    471c:	2200      	movs	r2, #0
    471e:	2300      	movs	r3, #0
    4720:	0029      	movs	r1, r5
    4722:	f001 fddd 	bl	62e0 <__aeabi_dcmpeq>
    4726:	2800      	cmp	r0, #0
    4728:	d038      	beq.n	479c <log+0xec>
    472a:	2302      	movs	r3, #2
    472c:	9302      	str	r3, [sp, #8]
    472e:	a802      	add	r0, sp, #8
    4730:	f001 fb36 	bl	5da0 <matherr>
    4734:	2800      	cmp	r0, #0
    4736:	d017      	beq.n	4768 <log+0xb8>
    4738:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    473a:	9301      	str	r3, [sp, #4]
    473c:	2b00      	cmp	r3, #0
    473e:	d118      	bne.n	4772 <log+0xc2>
    4740:	9e08      	ldr	r6, [sp, #32]
    4742:	9f09      	ldr	r7, [sp, #36]	; 0x24
    4744:	e7d4      	b.n	46f0 <log+0x40>
    4746:	2200      	movs	r2, #0
    4748:	4b1b      	ldr	r3, [pc, #108]	; (47b8 <log+0x108>)
    474a:	0020      	movs	r0, r4
    474c:	9208      	str	r2, [sp, #32]
    474e:	9309      	str	r3, [sp, #36]	; 0x24
    4750:	0029      	movs	r1, r5
    4752:	2200      	movs	r2, #0
    4754:	2300      	movs	r3, #0
    4756:	f001 fdc3 	bl	62e0 <__aeabi_dcmpeq>
    475a:	2800      	cmp	r0, #0
    475c:	d00f      	beq.n	477e <log+0xce>
    475e:	2302      	movs	r3, #2
    4760:	9302      	str	r3, [sp, #8]
    4762:	4643      	mov	r3, r8
    4764:	2b02      	cmp	r3, #2
    4766:	d1e2      	bne.n	472e <log+0x7e>
    4768:	f003 fc76 	bl	8058 <__errno>
    476c:	2322      	movs	r3, #34	; 0x22
    476e:	6003      	str	r3, [r0, #0]
    4770:	e7e2      	b.n	4738 <log+0x88>
    4772:	f003 fc71 	bl	8058 <__errno>
    4776:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4778:	9301      	str	r3, [sp, #4]
    477a:	6003      	str	r3, [r0, #0]
    477c:	e7e0      	b.n	4740 <log+0x90>
    477e:	2301      	movs	r3, #1
    4780:	9302      	str	r3, [sp, #8]
    4782:	4643      	mov	r3, r8
    4784:	2b02      	cmp	r3, #2
    4786:	d10b      	bne.n	47a0 <log+0xf0>
    4788:	f003 fc66 	bl	8058 <__errno>
    478c:	2321      	movs	r3, #33	; 0x21
    478e:	6003      	str	r3, [r0, #0]
    4790:	480a      	ldr	r0, [pc, #40]	; (47bc <log+0x10c>)
    4792:	f001 fb07 	bl	5da4 <nan>
    4796:	9008      	str	r0, [sp, #32]
    4798:	9109      	str	r1, [sp, #36]	; 0x24
    479a:	e7cd      	b.n	4738 <log+0x88>
    479c:	2301      	movs	r3, #1
    479e:	9302      	str	r3, [sp, #8]
    47a0:	a802      	add	r0, sp, #8
    47a2:	f001 fafd 	bl	5da0 <matherr>
    47a6:	2800      	cmp	r0, #0
    47a8:	d1f2      	bne.n	4790 <log+0xe0>
    47aa:	e7ed      	b.n	4788 <log+0xd8>
    47ac:	20000010 	.word	0x20000010
    47b0:	00008b00 	.word	0x00008b00
    47b4:	c7efffff 	.word	0xc7efffff
    47b8:	fff00000 	.word	0xfff00000
    47bc:	00008b04 	.word	0x00008b04

000047c0 <log10>:
    47c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    47c2:	4647      	mov	r7, r8
    47c4:	46ce      	mov	lr, r9
    47c6:	b580      	push	{r7, lr}
    47c8:	b08d      	sub	sp, #52	; 0x34
    47ca:	0004      	movs	r4, r0
    47cc:	000d      	movs	r5, r1
    47ce:	f000 fc31 	bl	5034 <__ieee754_log10>
    47d2:	4b3c      	ldr	r3, [pc, #240]	; (48c4 <log10+0x104>)
    47d4:	0006      	movs	r6, r0
    47d6:	781b      	ldrb	r3, [r3, #0]
    47d8:	000f      	movs	r7, r1
    47da:	b25b      	sxtb	r3, r3
    47dc:	4698      	mov	r8, r3
    47de:	3301      	adds	r3, #1
    47e0:	d010      	beq.n	4804 <log10+0x44>
    47e2:	0022      	movs	r2, r4
    47e4:	002b      	movs	r3, r5
    47e6:	0020      	movs	r0, r4
    47e8:	0029      	movs	r1, r5
    47ea:	f003 faa1 	bl	7d30 <__aeabi_dcmpun>
    47ee:	4681      	mov	r9, r0
    47f0:	2800      	cmp	r0, #0
    47f2:	d107      	bne.n	4804 <log10+0x44>
    47f4:	2200      	movs	r2, #0
    47f6:	2300      	movs	r3, #0
    47f8:	0020      	movs	r0, r4
    47fa:	0029      	movs	r1, r5
    47fc:	f001 fd80 	bl	6300 <__aeabi_dcmple>
    4800:	2800      	cmp	r0, #0
    4802:	d106      	bne.n	4812 <log10+0x52>
    4804:	0030      	movs	r0, r6
    4806:	0039      	movs	r1, r7
    4808:	b00d      	add	sp, #52	; 0x34
    480a:	bc0c      	pop	{r2, r3}
    480c:	4690      	mov	r8, r2
    480e:	4699      	mov	r9, r3
    4810:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4812:	4b2d      	ldr	r3, [pc, #180]	; (48c8 <log10+0x108>)
    4814:	9404      	str	r4, [sp, #16]
    4816:	9505      	str	r5, [sp, #20]
    4818:	9303      	str	r3, [sp, #12]
    481a:	464b      	mov	r3, r9
    481c:	930a      	str	r3, [sp, #40]	; 0x28
    481e:	4643      	mov	r3, r8
    4820:	9406      	str	r4, [sp, #24]
    4822:	9507      	str	r5, [sp, #28]
    4824:	2b00      	cmp	r3, #0
    4826:	d11a      	bne.n	485e <log10+0x9e>
    4828:	22e0      	movs	r2, #224	; 0xe0
    482a:	4b28      	ldr	r3, [pc, #160]	; (48cc <log10+0x10c>)
    482c:	0612      	lsls	r2, r2, #24
    482e:	9208      	str	r2, [sp, #32]
    4830:	9309      	str	r3, [sp, #36]	; 0x24
    4832:	0020      	movs	r0, r4
    4834:	2200      	movs	r2, #0
    4836:	2300      	movs	r3, #0
    4838:	0029      	movs	r1, r5
    483a:	f001 fd51 	bl	62e0 <__aeabi_dcmpeq>
    483e:	2800      	cmp	r0, #0
    4840:	d038      	beq.n	48b4 <log10+0xf4>
    4842:	2302      	movs	r3, #2
    4844:	9302      	str	r3, [sp, #8]
    4846:	a802      	add	r0, sp, #8
    4848:	f001 faaa 	bl	5da0 <matherr>
    484c:	2800      	cmp	r0, #0
    484e:	d017      	beq.n	4880 <log10+0xc0>
    4850:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4852:	9301      	str	r3, [sp, #4]
    4854:	2b00      	cmp	r3, #0
    4856:	d118      	bne.n	488a <log10+0xca>
    4858:	9e08      	ldr	r6, [sp, #32]
    485a:	9f09      	ldr	r7, [sp, #36]	; 0x24
    485c:	e7d2      	b.n	4804 <log10+0x44>
    485e:	2200      	movs	r2, #0
    4860:	4b1b      	ldr	r3, [pc, #108]	; (48d0 <log10+0x110>)
    4862:	0020      	movs	r0, r4
    4864:	9208      	str	r2, [sp, #32]
    4866:	9309      	str	r3, [sp, #36]	; 0x24
    4868:	0029      	movs	r1, r5
    486a:	2200      	movs	r2, #0
    486c:	2300      	movs	r3, #0
    486e:	f001 fd37 	bl	62e0 <__aeabi_dcmpeq>
    4872:	2800      	cmp	r0, #0
    4874:	d00f      	beq.n	4896 <log10+0xd6>
    4876:	2302      	movs	r3, #2
    4878:	9302      	str	r3, [sp, #8]
    487a:	4643      	mov	r3, r8
    487c:	2b02      	cmp	r3, #2
    487e:	d1e2      	bne.n	4846 <log10+0x86>
    4880:	f003 fbea 	bl	8058 <__errno>
    4884:	2322      	movs	r3, #34	; 0x22
    4886:	6003      	str	r3, [r0, #0]
    4888:	e7e2      	b.n	4850 <log10+0x90>
    488a:	f003 fbe5 	bl	8058 <__errno>
    488e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4890:	9301      	str	r3, [sp, #4]
    4892:	6003      	str	r3, [r0, #0]
    4894:	e7e0      	b.n	4858 <log10+0x98>
    4896:	2301      	movs	r3, #1
    4898:	9302      	str	r3, [sp, #8]
    489a:	4643      	mov	r3, r8
    489c:	2b02      	cmp	r3, #2
    489e:	d10b      	bne.n	48b8 <log10+0xf8>
    48a0:	f003 fbda 	bl	8058 <__errno>
    48a4:	2321      	movs	r3, #33	; 0x21
    48a6:	6003      	str	r3, [r0, #0]
    48a8:	480a      	ldr	r0, [pc, #40]	; (48d4 <log10+0x114>)
    48aa:	f001 fa7b 	bl	5da4 <nan>
    48ae:	9008      	str	r0, [sp, #32]
    48b0:	9109      	str	r1, [sp, #36]	; 0x24
    48b2:	e7cd      	b.n	4850 <log10+0x90>
    48b4:	2301      	movs	r3, #1
    48b6:	9302      	str	r3, [sp, #8]
    48b8:	a802      	add	r0, sp, #8
    48ba:	f001 fa71 	bl	5da0 <matherr>
    48be:	2800      	cmp	r0, #0
    48c0:	d1f2      	bne.n	48a8 <log10+0xe8>
    48c2:	e7ed      	b.n	48a0 <log10+0xe0>
    48c4:	20000010 	.word	0x20000010
    48c8:	00008b08 	.word	0x00008b08
    48cc:	c7efffff 	.word	0xc7efffff
    48d0:	fff00000 	.word	0xfff00000
    48d4:	00008b04 	.word	0x00008b04

000048d8 <pow>:
    48d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    48da:	4657      	mov	r7, sl
    48dc:	464e      	mov	r6, r9
    48de:	46de      	mov	lr, fp
    48e0:	4645      	mov	r5, r8
    48e2:	b5e0      	push	{r5, r6, r7, lr}
    48e4:	b08f      	sub	sp, #60	; 0x3c
    48e6:	001d      	movs	r5, r3
    48e8:	0006      	movs	r6, r0
    48ea:	000f      	movs	r7, r1
    48ec:	0014      	movs	r4, r2
    48ee:	f000 fc33 	bl	5158 <__ieee754_pow>
    48f2:	4bc7      	ldr	r3, [pc, #796]	; (4c10 <pow+0x338>)
    48f4:	9000      	str	r0, [sp, #0]
    48f6:	9101      	str	r1, [sp, #4]
    48f8:	469a      	mov	sl, r3
    48fa:	781b      	ldrb	r3, [r3, #0]
    48fc:	b25b      	sxtb	r3, r3
    48fe:	4699      	mov	r9, r3
    4900:	3301      	adds	r3, #1
    4902:	d03e      	beq.n	4982 <pow+0xaa>
    4904:	0022      	movs	r2, r4
    4906:	002b      	movs	r3, r5
    4908:	0020      	movs	r0, r4
    490a:	0029      	movs	r1, r5
    490c:	f003 fa10 	bl	7d30 <__aeabi_dcmpun>
    4910:	4683      	mov	fp, r0
    4912:	2800      	cmp	r0, #0
    4914:	d135      	bne.n	4982 <pow+0xaa>
    4916:	0032      	movs	r2, r6
    4918:	003b      	movs	r3, r7
    491a:	0030      	movs	r0, r6
    491c:	0039      	movs	r1, r7
    491e:	f003 fa07 	bl	7d30 <__aeabi_dcmpun>
    4922:	2200      	movs	r2, #0
    4924:	9003      	str	r0, [sp, #12]
    4926:	2800      	cmp	r0, #0
    4928:	d000      	beq.n	492c <pow+0x54>
    492a:	e0b6      	b.n	4a9a <pow+0x1c2>
    492c:	2300      	movs	r3, #0
    492e:	0030      	movs	r0, r6
    4930:	0039      	movs	r1, r7
    4932:	f001 fcd5 	bl	62e0 <__aeabi_dcmpeq>
    4936:	2800      	cmp	r0, #0
    4938:	d02c      	beq.n	4994 <pow+0xbc>
    493a:	2200      	movs	r2, #0
    493c:	2300      	movs	r3, #0
    493e:	0020      	movs	r0, r4
    4940:	0029      	movs	r1, r5
    4942:	f001 fccd 	bl	62e0 <__aeabi_dcmpeq>
    4946:	4683      	mov	fp, r0
    4948:	2800      	cmp	r0, #0
    494a:	d100      	bne.n	494e <pow+0x76>
    494c:	e077      	b.n	4a3e <pow+0x166>
    494e:	ab04      	add	r3, sp, #16
    4950:	4698      	mov	r8, r3
    4952:	2301      	movs	r3, #1
    4954:	4642      	mov	r2, r8
    4956:	9304      	str	r3, [sp, #16]
    4958:	4bae      	ldr	r3, [pc, #696]	; (4c14 <pow+0x33c>)
    495a:	6053      	str	r3, [r2, #4]
    495c:	4643      	mov	r3, r8
    495e:	9a03      	ldr	r2, [sp, #12]
    4960:	611c      	str	r4, [r3, #16]
    4962:	615d      	str	r5, [r3, #20]
    4964:	621a      	str	r2, [r3, #32]
    4966:	609e      	str	r6, [r3, #8]
    4968:	60df      	str	r7, [r3, #12]
    496a:	4642      	mov	r2, r8
    496c:	2300      	movs	r3, #0
    496e:	2400      	movs	r4, #0
    4970:	6193      	str	r3, [r2, #24]
    4972:	61d4      	str	r4, [r2, #28]
    4974:	464b      	mov	r3, r9
    4976:	2b00      	cmp	r3, #0
    4978:	d04d      	beq.n	4a16 <pow+0x13e>
    497a:	2300      	movs	r3, #0
    497c:	4ca6      	ldr	r4, [pc, #664]	; (4c18 <pow+0x340>)
    497e:	9300      	str	r3, [sp, #0]
    4980:	9401      	str	r4, [sp, #4]
    4982:	9800      	ldr	r0, [sp, #0]
    4984:	9901      	ldr	r1, [sp, #4]
    4986:	b00f      	add	sp, #60	; 0x3c
    4988:	bc3c      	pop	{r2, r3, r4, r5}
    498a:	4690      	mov	r8, r2
    498c:	4699      	mov	r9, r3
    498e:	46a2      	mov	sl, r4
    4990:	46ab      	mov	fp, r5
    4992:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4994:	9800      	ldr	r0, [sp, #0]
    4996:	9901      	ldr	r1, [sp, #4]
    4998:	f001 f9f8 	bl	5d8c <finite>
    499c:	4681      	mov	r9, r0
    499e:	2800      	cmp	r0, #0
    49a0:	d100      	bne.n	49a4 <pow+0xcc>
    49a2:	e09b      	b.n	4adc <pow+0x204>
    49a4:	9800      	ldr	r0, [sp, #0]
    49a6:	9901      	ldr	r1, [sp, #4]
    49a8:	2200      	movs	r2, #0
    49aa:	2300      	movs	r3, #0
    49ac:	f001 fc98 	bl	62e0 <__aeabi_dcmpeq>
    49b0:	2800      	cmp	r0, #0
    49b2:	d0e6      	beq.n	4982 <pow+0xaa>
    49b4:	0030      	movs	r0, r6
    49b6:	0039      	movs	r1, r7
    49b8:	f001 f9e8 	bl	5d8c <finite>
    49bc:	2800      	cmp	r0, #0
    49be:	d0e0      	beq.n	4982 <pow+0xaa>
    49c0:	0020      	movs	r0, r4
    49c2:	0029      	movs	r1, r5
    49c4:	f001 f9e2 	bl	5d8c <finite>
    49c8:	2800      	cmp	r0, #0
    49ca:	d0da      	beq.n	4982 <pow+0xaa>
    49cc:	ab04      	add	r3, sp, #16
    49ce:	4698      	mov	r8, r3
    49d0:	2304      	movs	r3, #4
    49d2:	4642      	mov	r2, r8
    49d4:	9304      	str	r3, [sp, #16]
    49d6:	4b8f      	ldr	r3, [pc, #572]	; (4c14 <pow+0x33c>)
    49d8:	6114      	str	r4, [r2, #16]
    49da:	6155      	str	r5, [r2, #20]
    49dc:	6053      	str	r3, [r2, #4]
    49de:	2300      	movs	r3, #0
    49e0:	2400      	movs	r4, #0
    49e2:	6213      	str	r3, [r2, #32]
    49e4:	2300      	movs	r3, #0
    49e6:	6193      	str	r3, [r2, #24]
    49e8:	61d4      	str	r4, [r2, #28]
    49ea:	4653      	mov	r3, sl
    49ec:	781b      	ldrb	r3, [r3, #0]
    49ee:	6096      	str	r6, [r2, #8]
    49f0:	60d7      	str	r7, [r2, #12]
    49f2:	b25b      	sxtb	r3, r3
    49f4:	2b02      	cmp	r3, #2
    49f6:	d004      	beq.n	4a02 <pow+0x12a>
    49f8:	4640      	mov	r0, r8
    49fa:	f001 f9d1 	bl	5da0 <matherr>
    49fe:	2800      	cmp	r0, #0
    4a00:	d10e      	bne.n	4a20 <pow+0x148>
    4a02:	f003 fb29 	bl	8058 <__errno>
    4a06:	2322      	movs	r3, #34	; 0x22
    4a08:	6003      	str	r3, [r0, #0]
    4a0a:	e009      	b.n	4a20 <pow+0x148>
    4a0c:	4642      	mov	r2, r8
    4a0e:	2300      	movs	r3, #0
    4a10:	2400      	movs	r4, #0
    4a12:	6193      	str	r3, [r2, #24]
    4a14:	61d4      	str	r4, [r2, #28]
    4a16:	4640      	mov	r0, r8
    4a18:	f001 f9c2 	bl	5da0 <matherr>
    4a1c:	2800      	cmp	r0, #0
    4a1e:	d037      	beq.n	4a90 <pow+0x1b8>
    4a20:	4643      	mov	r3, r8
    4a22:	6a1b      	ldr	r3, [r3, #32]
    4a24:	2b00      	cmp	r3, #0
    4a26:	d004      	beq.n	4a32 <pow+0x15a>
    4a28:	f003 fb16 	bl	8058 <__errno>
    4a2c:	4643      	mov	r3, r8
    4a2e:	6a1b      	ldr	r3, [r3, #32]
    4a30:	6003      	str	r3, [r0, #0]
    4a32:	4643      	mov	r3, r8
    4a34:	69dc      	ldr	r4, [r3, #28]
    4a36:	699b      	ldr	r3, [r3, #24]
    4a38:	9300      	str	r3, [sp, #0]
    4a3a:	9401      	str	r4, [sp, #4]
    4a3c:	e7a1      	b.n	4982 <pow+0xaa>
    4a3e:	0020      	movs	r0, r4
    4a40:	0029      	movs	r1, r5
    4a42:	f001 f9a3 	bl	5d8c <finite>
    4a46:	2800      	cmp	r0, #0
    4a48:	d09b      	beq.n	4982 <pow+0xaa>
    4a4a:	2200      	movs	r2, #0
    4a4c:	2300      	movs	r3, #0
    4a4e:	0020      	movs	r0, r4
    4a50:	0029      	movs	r1, r5
    4a52:	f001 fc4b 	bl	62ec <__aeabi_dcmplt>
    4a56:	2800      	cmp	r0, #0
    4a58:	d100      	bne.n	4a5c <pow+0x184>
    4a5a:	e792      	b.n	4982 <pow+0xaa>
    4a5c:	ab04      	add	r3, sp, #16
    4a5e:	4698      	mov	r8, r3
    4a60:	2301      	movs	r3, #1
    4a62:	4642      	mov	r2, r8
    4a64:	9304      	str	r3, [sp, #16]
    4a66:	4b6b      	ldr	r3, [pc, #428]	; (4c14 <pow+0x33c>)
    4a68:	6053      	str	r3, [r2, #4]
    4a6a:	4643      	mov	r3, r8
    4a6c:	465a      	mov	r2, fp
    4a6e:	609e      	str	r6, [r3, #8]
    4a70:	60df      	str	r7, [r3, #12]
    4a72:	621a      	str	r2, [r3, #32]
    4a74:	611c      	str	r4, [r3, #16]
    4a76:	615d      	str	r5, [r3, #20]
    4a78:	4653      	mov	r3, sl
    4a7a:	781b      	ldrb	r3, [r3, #0]
    4a7c:	b25b      	sxtb	r3, r3
    4a7e:	2b00      	cmp	r3, #0
    4a80:	d0c4      	beq.n	4a0c <pow+0x134>
    4a82:	2000      	movs	r0, #0
    4a84:	4642      	mov	r2, r8
    4a86:	4965      	ldr	r1, [pc, #404]	; (4c1c <pow+0x344>)
    4a88:	6190      	str	r0, [r2, #24]
    4a8a:	61d1      	str	r1, [r2, #28]
    4a8c:	2b02      	cmp	r3, #2
    4a8e:	d1c2      	bne.n	4a16 <pow+0x13e>
    4a90:	f003 fae2 	bl	8058 <__errno>
    4a94:	2321      	movs	r3, #33	; 0x21
    4a96:	6003      	str	r3, [r0, #0]
    4a98:	e7c2      	b.n	4a20 <pow+0x148>
    4a9a:	2300      	movs	r3, #0
    4a9c:	0020      	movs	r0, r4
    4a9e:	0029      	movs	r1, r5
    4aa0:	f001 fc1e 	bl	62e0 <__aeabi_dcmpeq>
    4aa4:	2800      	cmp	r0, #0
    4aa6:	d100      	bne.n	4aaa <pow+0x1d2>
    4aa8:	e76b      	b.n	4982 <pow+0xaa>
    4aaa:	ab04      	add	r3, sp, #16
    4aac:	4698      	mov	r8, r3
    4aae:	2301      	movs	r3, #1
    4ab0:	4642      	mov	r2, r8
    4ab2:	9304      	str	r3, [sp, #16]
    4ab4:	4b57      	ldr	r3, [pc, #348]	; (4c14 <pow+0x33c>)
    4ab6:	4641      	mov	r1, r8
    4ab8:	6053      	str	r3, [r2, #4]
    4aba:	4643      	mov	r3, r8
    4abc:	465a      	mov	r2, fp
    4abe:	621a      	str	r2, [r3, #32]
    4ac0:	2200      	movs	r2, #0
    4ac2:	609e      	str	r6, [r3, #8]
    4ac4:	60df      	str	r7, [r3, #12]
    4ac6:	611c      	str	r4, [r3, #16]
    4ac8:	615d      	str	r5, [r3, #20]
    4aca:	4b53      	ldr	r3, [pc, #332]	; (4c18 <pow+0x340>)
    4acc:	618a      	str	r2, [r1, #24]
    4ace:	61cb      	str	r3, [r1, #28]
    4ad0:	9200      	str	r2, [sp, #0]
    4ad2:	9301      	str	r3, [sp, #4]
    4ad4:	464b      	mov	r3, r9
    4ad6:	2b02      	cmp	r3, #2
    4ad8:	d19d      	bne.n	4a16 <pow+0x13e>
    4ada:	e752      	b.n	4982 <pow+0xaa>
    4adc:	0030      	movs	r0, r6
    4ade:	0039      	movs	r1, r7
    4ae0:	f001 f954 	bl	5d8c <finite>
    4ae4:	2800      	cmp	r0, #0
    4ae6:	d100      	bne.n	4aea <pow+0x212>
    4ae8:	e75c      	b.n	49a4 <pow+0xcc>
    4aea:	0020      	movs	r0, r4
    4aec:	0029      	movs	r1, r5
    4aee:	f001 f94d 	bl	5d8c <finite>
    4af2:	2800      	cmp	r0, #0
    4af4:	d100      	bne.n	4af8 <pow+0x220>
    4af6:	e755      	b.n	49a4 <pow+0xcc>
    4af8:	9800      	ldr	r0, [sp, #0]
    4afa:	9901      	ldr	r1, [sp, #4]
    4afc:	000b      	movs	r3, r1
    4afe:	0002      	movs	r2, r0
    4b00:	f003 f916 	bl	7d30 <__aeabi_dcmpun>
    4b04:	ab04      	add	r3, sp, #16
    4b06:	4698      	mov	r8, r3
    4b08:	2800      	cmp	r0, #0
    4b0a:	d161      	bne.n	4bd0 <pow+0x2f8>
    4b0c:	2303      	movs	r3, #3
    4b0e:	4642      	mov	r2, r8
    4b10:	9304      	str	r3, [sp, #16]
    4b12:	4b40      	ldr	r3, [pc, #256]	; (4c14 <pow+0x33c>)
    4b14:	6210      	str	r0, [r2, #32]
    4b16:	6053      	str	r3, [r2, #4]
    4b18:	4653      	mov	r3, sl
    4b1a:	781b      	ldrb	r3, [r3, #0]
    4b1c:	6096      	str	r6, [r2, #8]
    4b1e:	60d7      	str	r7, [r2, #12]
    4b20:	b25b      	sxtb	r3, r3
    4b22:	6114      	str	r4, [r2, #16]
    4b24:	6155      	str	r5, [r2, #20]
    4b26:	4699      	mov	r9, r3
    4b28:	2b00      	cmp	r3, #0
    4b2a:	d12f      	bne.n	4b8c <pow+0x2b4>
    4b2c:	22e0      	movs	r2, #224	; 0xe0
    4b2e:	4641      	mov	r1, r8
    4b30:	4b3b      	ldr	r3, [pc, #236]	; (4c20 <pow+0x348>)
    4b32:	0612      	lsls	r2, r2, #24
    4b34:	618a      	str	r2, [r1, #24]
    4b36:	61cb      	str	r3, [r1, #28]
    4b38:	0030      	movs	r0, r6
    4b3a:	2200      	movs	r2, #0
    4b3c:	2300      	movs	r3, #0
    4b3e:	0039      	movs	r1, r7
    4b40:	f001 fbd4 	bl	62ec <__aeabi_dcmplt>
    4b44:	2800      	cmp	r0, #0
    4b46:	d100      	bne.n	4b4a <pow+0x272>
    4b48:	e756      	b.n	49f8 <pow+0x120>
    4b4a:	2200      	movs	r2, #0
    4b4c:	4b35      	ldr	r3, [pc, #212]	; (4c24 <pow+0x34c>)
    4b4e:	0020      	movs	r0, r4
    4b50:	0029      	movs	r1, r5
    4b52:	f002 fb57 	bl	7204 <__aeabi_dmul>
    4b56:	0004      	movs	r4, r0
    4b58:	000d      	movs	r5, r1
    4b5a:	f001 f929 	bl	5db0 <rint>
    4b5e:	0002      	movs	r2, r0
    4b60:	000b      	movs	r3, r1
    4b62:	0020      	movs	r0, r4
    4b64:	0029      	movs	r1, r5
    4b66:	f001 fbbb 	bl	62e0 <__aeabi_dcmpeq>
    4b6a:	2800      	cmp	r0, #0
    4b6c:	d105      	bne.n	4b7a <pow+0x2a2>
    4b6e:	22e0      	movs	r2, #224	; 0xe0
    4b70:	4b2d      	ldr	r3, [pc, #180]	; (4c28 <pow+0x350>)
    4b72:	0612      	lsls	r2, r2, #24
    4b74:	4641      	mov	r1, r8
    4b76:	618a      	str	r2, [r1, #24]
    4b78:	61cb      	str	r3, [r1, #28]
    4b7a:	4653      	mov	r3, sl
    4b7c:	781b      	ldrb	r3, [r3, #0]
    4b7e:	b25b      	sxtb	r3, r3
    4b80:	4699      	mov	r9, r3
    4b82:	464b      	mov	r3, r9
    4b84:	2b02      	cmp	r3, #2
    4b86:	d000      	beq.n	4b8a <pow+0x2b2>
    4b88:	e736      	b.n	49f8 <pow+0x120>
    4b8a:	e73a      	b.n	4a02 <pow+0x12a>
    4b8c:	2200      	movs	r2, #0
    4b8e:	4641      	mov	r1, r8
    4b90:	4b26      	ldr	r3, [pc, #152]	; (4c2c <pow+0x354>)
    4b92:	0030      	movs	r0, r6
    4b94:	618a      	str	r2, [r1, #24]
    4b96:	61cb      	str	r3, [r1, #28]
    4b98:	2200      	movs	r2, #0
    4b9a:	2300      	movs	r3, #0
    4b9c:	0039      	movs	r1, r7
    4b9e:	f001 fba5 	bl	62ec <__aeabi_dcmplt>
    4ba2:	2800      	cmp	r0, #0
    4ba4:	d0ed      	beq.n	4b82 <pow+0x2aa>
    4ba6:	2200      	movs	r2, #0
    4ba8:	4b1e      	ldr	r3, [pc, #120]	; (4c24 <pow+0x34c>)
    4baa:	0020      	movs	r0, r4
    4bac:	0029      	movs	r1, r5
    4bae:	f002 fb29 	bl	7204 <__aeabi_dmul>
    4bb2:	0004      	movs	r4, r0
    4bb4:	000d      	movs	r5, r1
    4bb6:	f001 f8fb 	bl	5db0 <rint>
    4bba:	0002      	movs	r2, r0
    4bbc:	000b      	movs	r3, r1
    4bbe:	0020      	movs	r0, r4
    4bc0:	0029      	movs	r1, r5
    4bc2:	f001 fb8d 	bl	62e0 <__aeabi_dcmpeq>
    4bc6:	2800      	cmp	r0, #0
    4bc8:	d1d7      	bne.n	4b7a <pow+0x2a2>
    4bca:	2200      	movs	r2, #0
    4bcc:	4b13      	ldr	r3, [pc, #76]	; (4c1c <pow+0x344>)
    4bce:	e7d1      	b.n	4b74 <pow+0x29c>
    4bd0:	2301      	movs	r3, #1
    4bd2:	4642      	mov	r2, r8
    4bd4:	9304      	str	r3, [sp, #16]
    4bd6:	4b0f      	ldr	r3, [pc, #60]	; (4c14 <pow+0x33c>)
    4bd8:	6053      	str	r3, [r2, #4]
    4bda:	4643      	mov	r3, r8
    4bdc:	464a      	mov	r2, r9
    4bde:	611c      	str	r4, [r3, #16]
    4be0:	615d      	str	r5, [r3, #20]
    4be2:	621a      	str	r2, [r3, #32]
    4be4:	609e      	str	r6, [r3, #8]
    4be6:	60df      	str	r7, [r3, #12]
    4be8:	2400      	movs	r4, #0
    4bea:	4653      	mov	r3, sl
    4bec:	571c      	ldrsb	r4, [r3, r4]
    4bee:	2c00      	cmp	r4, #0
    4bf0:	d100      	bne.n	4bf4 <pow+0x31c>
    4bf2:	e70b      	b.n	4a0c <pow+0x134>
    4bf4:	2300      	movs	r3, #0
    4bf6:	2200      	movs	r2, #0
    4bf8:	0019      	movs	r1, r3
    4bfa:	0010      	movs	r0, r2
    4bfc:	f001 fece 	bl	699c <__aeabi_ddiv>
    4c00:	4643      	mov	r3, r8
    4c02:	6198      	str	r0, [r3, #24]
    4c04:	61d9      	str	r1, [r3, #28]
    4c06:	2c02      	cmp	r4, #2
    4c08:	d100      	bne.n	4c0c <pow+0x334>
    4c0a:	e741      	b.n	4a90 <pow+0x1b8>
    4c0c:	e703      	b.n	4a16 <pow+0x13e>
    4c0e:	46c0      	nop			; (mov r8, r8)
    4c10:	20000010 	.word	0x20000010
    4c14:	00008b10 	.word	0x00008b10
    4c18:	3ff00000 	.word	0x3ff00000
    4c1c:	fff00000 	.word	0xfff00000
    4c20:	47efffff 	.word	0x47efffff
    4c24:	3fe00000 	.word	0x3fe00000
    4c28:	c7efffff 	.word	0xc7efffff
    4c2c:	7ff00000 	.word	0x7ff00000

00004c30 <__ieee754_log>:
    4c30:	b5f0      	push	{r4, r5, r6, r7, lr}
    4c32:	46d6      	mov	lr, sl
    4c34:	464f      	mov	r7, r9
    4c36:	4646      	mov	r6, r8
    4c38:	b5c0      	push	{r6, r7, lr}
    4c3a:	4ada      	ldr	r2, [pc, #872]	; (4fa4 <__ieee754_log+0x374>)
    4c3c:	b088      	sub	sp, #32
    4c3e:	000b      	movs	r3, r1
    4c40:	4291      	cmp	r1, r2
    4c42:	dc55      	bgt.n	4cf0 <__ieee754_log+0xc0>
    4c44:	004a      	lsls	r2, r1, #1
    4c46:	0852      	lsrs	r2, r2, #1
    4c48:	4302      	orrs	r2, r0
    4c4a:	d100      	bne.n	4c4e <__ieee754_log+0x1e>
    4c4c:	e0ef      	b.n	4e2e <__ieee754_log+0x1fe>
    4c4e:	2900      	cmp	r1, #0
    4c50:	da00      	bge.n	4c54 <__ieee754_log+0x24>
    4c52:	e179      	b.n	4f48 <__ieee754_log+0x318>
    4c54:	4bd4      	ldr	r3, [pc, #848]	; (4fa8 <__ieee754_log+0x378>)
    4c56:	2200      	movs	r2, #0
    4c58:	f002 fad4 	bl	7204 <__aeabi_dmul>
    4c5c:	2536      	movs	r5, #54	; 0x36
    4c5e:	4cd3      	ldr	r4, [pc, #844]	; (4fac <__ieee754_log+0x37c>)
    4c60:	000b      	movs	r3, r1
    4c62:	426d      	negs	r5, r5
    4c64:	42a3      	cmp	r3, r4
    4c66:	dc47      	bgt.n	4cf8 <__ieee754_log+0xc8>
    4c68:	151a      	asrs	r2, r3, #20
    4c6a:	4cd1      	ldr	r4, [pc, #836]	; (4fb0 <__ieee754_log+0x380>)
    4c6c:	031b      	lsls	r3, r3, #12
    4c6e:	0b1b      	lsrs	r3, r3, #12
    4c70:	4698      	mov	r8, r3
    4c72:	46a4      	mov	ip, r4
    4c74:	2480      	movs	r4, #128	; 0x80
    4c76:	4bcf      	ldr	r3, [pc, #828]	; (4fb4 <__ieee754_log+0x384>)
    4c78:	0364      	lsls	r4, r4, #13
    4c7a:	4443      	add	r3, r8
    4c7c:	4023      	ands	r3, r4
    4c7e:	4cce      	ldr	r4, [pc, #824]	; (4fb8 <__ieee754_log+0x388>)
    4c80:	4462      	add	r2, ip
    4c82:	1952      	adds	r2, r2, r5
    4c84:	405c      	eors	r4, r3
    4c86:	4645      	mov	r5, r8
    4c88:	151b      	asrs	r3, r3, #20
    4c8a:	4699      	mov	r9, r3
    4c8c:	4325      	orrs	r5, r4
    4c8e:	4bca      	ldr	r3, [pc, #808]	; (4fb8 <__ieee754_log+0x388>)
    4c90:	0029      	movs	r1, r5
    4c92:	4491      	add	r9, r2
    4c94:	2200      	movs	r2, #0
    4c96:	f002 fd35 	bl	7704 <__aeabi_dsub>
    4c9a:	4643      	mov	r3, r8
    4c9c:	3302      	adds	r3, #2
    4c9e:	031b      	lsls	r3, r3, #12
    4ca0:	0006      	movs	r6, r0
    4ca2:	000f      	movs	r7, r1
    4ca4:	0b1b      	lsrs	r3, r3, #12
    4ca6:	2200      	movs	r2, #0
    4ca8:	2b02      	cmp	r3, #2
    4caa:	dc2f      	bgt.n	4d0c <__ieee754_log+0xdc>
    4cac:	2300      	movs	r3, #0
    4cae:	f001 fb17 	bl	62e0 <__aeabi_dcmpeq>
    4cb2:	2800      	cmp	r0, #0
    4cb4:	d100      	bne.n	4cb8 <__ieee754_log+0x88>
    4cb6:	e0c1      	b.n	4e3c <__ieee754_log+0x20c>
    4cb8:	464b      	mov	r3, r9
    4cba:	2b00      	cmp	r3, #0
    4cbc:	d100      	bne.n	4cc0 <__ieee754_log+0x90>
    4cbe:	e14c      	b.n	4f5a <__ieee754_log+0x32a>
    4cc0:	4648      	mov	r0, r9
    4cc2:	f003 f855 	bl	7d70 <__aeabi_i2d>
    4cc6:	4abd      	ldr	r2, [pc, #756]	; (4fbc <__ieee754_log+0x38c>)
    4cc8:	4bbd      	ldr	r3, [pc, #756]	; (4fc0 <__ieee754_log+0x390>)
    4cca:	0004      	movs	r4, r0
    4ccc:	000d      	movs	r5, r1
    4cce:	f002 fa99 	bl	7204 <__aeabi_dmul>
    4cd2:	4abc      	ldr	r2, [pc, #752]	; (4fc4 <__ieee754_log+0x394>)
    4cd4:	0006      	movs	r6, r0
    4cd6:	000f      	movs	r7, r1
    4cd8:	4bbb      	ldr	r3, [pc, #748]	; (4fc8 <__ieee754_log+0x398>)
    4cda:	0020      	movs	r0, r4
    4cdc:	0029      	movs	r1, r5
    4cde:	f002 fa91 	bl	7204 <__aeabi_dmul>
    4ce2:	0002      	movs	r2, r0
    4ce4:	000b      	movs	r3, r1
    4ce6:	0030      	movs	r0, r6
    4ce8:	0039      	movs	r1, r7
    4cea:	f001 fb47 	bl	637c <__aeabi_dadd>
    4cee:	e007      	b.n	4d00 <__ieee754_log+0xd0>
    4cf0:	4cae      	ldr	r4, [pc, #696]	; (4fac <__ieee754_log+0x37c>)
    4cf2:	2500      	movs	r5, #0
    4cf4:	42a3      	cmp	r3, r4
    4cf6:	ddb7      	ble.n	4c68 <__ieee754_log+0x38>
    4cf8:	0002      	movs	r2, r0
    4cfa:	000b      	movs	r3, r1
    4cfc:	f001 fb3e 	bl	637c <__aeabi_dadd>
    4d00:	b008      	add	sp, #32
    4d02:	bc1c      	pop	{r2, r3, r4}
    4d04:	4690      	mov	r8, r2
    4d06:	4699      	mov	r9, r3
    4d08:	46a2      	mov	sl, r4
    4d0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4d0c:	2380      	movs	r3, #128	; 0x80
    4d0e:	05db      	lsls	r3, r3, #23
    4d10:	f001 fb34 	bl	637c <__aeabi_dadd>
    4d14:	0002      	movs	r2, r0
    4d16:	000b      	movs	r3, r1
    4d18:	0030      	movs	r0, r6
    4d1a:	0039      	movs	r1, r7
    4d1c:	f001 fe3e 	bl	699c <__aeabi_ddiv>
    4d20:	0004      	movs	r4, r0
    4d22:	4648      	mov	r0, r9
    4d24:	000d      	movs	r5, r1
    4d26:	f003 f823 	bl	7d70 <__aeabi_i2d>
    4d2a:	0022      	movs	r2, r4
    4d2c:	9002      	str	r0, [sp, #8]
    4d2e:	9103      	str	r1, [sp, #12]
    4d30:	002b      	movs	r3, r5
    4d32:	0020      	movs	r0, r4
    4d34:	0029      	movs	r1, r5
    4d36:	9404      	str	r4, [sp, #16]
    4d38:	9505      	str	r5, [sp, #20]
    4d3a:	f002 fa63 	bl	7204 <__aeabi_dmul>
    4d3e:	0004      	movs	r4, r0
    4d40:	000d      	movs	r5, r1
    4d42:	4ba2      	ldr	r3, [pc, #648]	; (4fcc <__ieee754_log+0x39c>)
    4d44:	0002      	movs	r2, r0
    4d46:	4443      	add	r3, r8
    4d48:	469a      	mov	sl, r3
    4d4a:	000b      	movs	r3, r1
    4d4c:	9400      	str	r4, [sp, #0]
    4d4e:	9501      	str	r5, [sp, #4]
    4d50:	f002 fa58 	bl	7204 <__aeabi_dmul>
    4d54:	0004      	movs	r4, r0
    4d56:	000d      	movs	r5, r1
    4d58:	4a9d      	ldr	r2, [pc, #628]	; (4fd0 <__ieee754_log+0x3a0>)
    4d5a:	4b9e      	ldr	r3, [pc, #632]	; (4fd4 <__ieee754_log+0x3a4>)
    4d5c:	f002 fa52 	bl	7204 <__aeabi_dmul>
    4d60:	4a9d      	ldr	r2, [pc, #628]	; (4fd8 <__ieee754_log+0x3a8>)
    4d62:	4b9e      	ldr	r3, [pc, #632]	; (4fdc <__ieee754_log+0x3ac>)
    4d64:	f001 fb0a 	bl	637c <__aeabi_dadd>
    4d68:	0022      	movs	r2, r4
    4d6a:	002b      	movs	r3, r5
    4d6c:	f002 fa4a 	bl	7204 <__aeabi_dmul>
    4d70:	4a9b      	ldr	r2, [pc, #620]	; (4fe0 <__ieee754_log+0x3b0>)
    4d72:	4b9c      	ldr	r3, [pc, #624]	; (4fe4 <__ieee754_log+0x3b4>)
    4d74:	f001 fb02 	bl	637c <__aeabi_dadd>
    4d78:	0022      	movs	r2, r4
    4d7a:	002b      	movs	r3, r5
    4d7c:	f002 fa42 	bl	7204 <__aeabi_dmul>
    4d80:	4a99      	ldr	r2, [pc, #612]	; (4fe8 <__ieee754_log+0x3b8>)
    4d82:	4b9a      	ldr	r3, [pc, #616]	; (4fec <__ieee754_log+0x3bc>)
    4d84:	f001 fafa 	bl	637c <__aeabi_dadd>
    4d88:	9a00      	ldr	r2, [sp, #0]
    4d8a:	9b01      	ldr	r3, [sp, #4]
    4d8c:	f002 fa3a 	bl	7204 <__aeabi_dmul>
    4d90:	4a97      	ldr	r2, [pc, #604]	; (4ff0 <__ieee754_log+0x3c0>)
    4d92:	9000      	str	r0, [sp, #0]
    4d94:	9101      	str	r1, [sp, #4]
    4d96:	4b97      	ldr	r3, [pc, #604]	; (4ff4 <__ieee754_log+0x3c4>)
    4d98:	0020      	movs	r0, r4
    4d9a:	0029      	movs	r1, r5
    4d9c:	f002 fa32 	bl	7204 <__aeabi_dmul>
    4da0:	4a95      	ldr	r2, [pc, #596]	; (4ff8 <__ieee754_log+0x3c8>)
    4da2:	4b96      	ldr	r3, [pc, #600]	; (4ffc <__ieee754_log+0x3cc>)
    4da4:	f001 faea 	bl	637c <__aeabi_dadd>
    4da8:	0022      	movs	r2, r4
    4daa:	002b      	movs	r3, r5
    4dac:	f002 fa2a 	bl	7204 <__aeabi_dmul>
    4db0:	4a93      	ldr	r2, [pc, #588]	; (5000 <__ieee754_log+0x3d0>)
    4db2:	4b94      	ldr	r3, [pc, #592]	; (5004 <__ieee754_log+0x3d4>)
    4db4:	f001 fae2 	bl	637c <__aeabi_dadd>
    4db8:	0022      	movs	r2, r4
    4dba:	002b      	movs	r3, r5
    4dbc:	f002 fa22 	bl	7204 <__aeabi_dmul>
    4dc0:	000b      	movs	r3, r1
    4dc2:	0002      	movs	r2, r0
    4dc4:	9800      	ldr	r0, [sp, #0]
    4dc6:	9901      	ldr	r1, [sp, #4]
    4dc8:	f001 fad8 	bl	637c <__aeabi_dadd>
    4dcc:	000d      	movs	r5, r1
    4dce:	4641      	mov	r1, r8
    4dd0:	4b8d      	ldr	r3, [pc, #564]	; (5008 <__ieee754_log+0x3d8>)
    4dd2:	0004      	movs	r4, r0
    4dd4:	1a5b      	subs	r3, r3, r1
    4dd6:	4651      	mov	r1, sl
    4dd8:	430b      	orrs	r3, r1
    4dda:	2b00      	cmp	r3, #0
    4ddc:	dd54      	ble.n	4e88 <__ieee754_log+0x258>
    4dde:	2200      	movs	r2, #0
    4de0:	4b8a      	ldr	r3, [pc, #552]	; (500c <__ieee754_log+0x3dc>)
    4de2:	0030      	movs	r0, r6
    4de4:	0039      	movs	r1, r7
    4de6:	f002 fa0d 	bl	7204 <__aeabi_dmul>
    4dea:	0032      	movs	r2, r6
    4dec:	003b      	movs	r3, r7
    4dee:	f002 fa09 	bl	7204 <__aeabi_dmul>
    4df2:	464b      	mov	r3, r9
    4df4:	000a      	movs	r2, r1
    4df6:	0001      	movs	r1, r0
    4df8:	9100      	str	r1, [sp, #0]
    4dfa:	9201      	str	r2, [sp, #4]
    4dfc:	2b00      	cmp	r3, #0
    4dfe:	d172      	bne.n	4ee6 <__ieee754_log+0x2b6>
    4e00:	0013      	movs	r3, r2
    4e02:	0029      	movs	r1, r5
    4e04:	0002      	movs	r2, r0
    4e06:	0020      	movs	r0, r4
    4e08:	f001 fab8 	bl	637c <__aeabi_dadd>
    4e0c:	9a04      	ldr	r2, [sp, #16]
    4e0e:	9b05      	ldr	r3, [sp, #20]
    4e10:	f002 f9f8 	bl	7204 <__aeabi_dmul>
    4e14:	0002      	movs	r2, r0
    4e16:	000b      	movs	r3, r1
    4e18:	9800      	ldr	r0, [sp, #0]
    4e1a:	9901      	ldr	r1, [sp, #4]
    4e1c:	f002 fc72 	bl	7704 <__aeabi_dsub>
    4e20:	0002      	movs	r2, r0
    4e22:	000b      	movs	r3, r1
    4e24:	0030      	movs	r0, r6
    4e26:	0039      	movs	r1, r7
    4e28:	f002 fc6c 	bl	7704 <__aeabi_dsub>
    4e2c:	e768      	b.n	4d00 <__ieee754_log+0xd0>
    4e2e:	2200      	movs	r2, #0
    4e30:	2300      	movs	r3, #0
    4e32:	2000      	movs	r0, #0
    4e34:	4976      	ldr	r1, [pc, #472]	; (5010 <__ieee754_log+0x3e0>)
    4e36:	f001 fdb1 	bl	699c <__aeabi_ddiv>
    4e3a:	e761      	b.n	4d00 <__ieee754_log+0xd0>
    4e3c:	4a75      	ldr	r2, [pc, #468]	; (5014 <__ieee754_log+0x3e4>)
    4e3e:	4b76      	ldr	r3, [pc, #472]	; (5018 <__ieee754_log+0x3e8>)
    4e40:	0030      	movs	r0, r6
    4e42:	0039      	movs	r1, r7
    4e44:	f002 f9de 	bl	7204 <__aeabi_dmul>
    4e48:	0002      	movs	r2, r0
    4e4a:	000b      	movs	r3, r1
    4e4c:	2000      	movs	r0, #0
    4e4e:	496f      	ldr	r1, [pc, #444]	; (500c <__ieee754_log+0x3dc>)
    4e50:	f002 fc58 	bl	7704 <__aeabi_dsub>
    4e54:	0032      	movs	r2, r6
    4e56:	0004      	movs	r4, r0
    4e58:	000d      	movs	r5, r1
    4e5a:	003b      	movs	r3, r7
    4e5c:	0030      	movs	r0, r6
    4e5e:	0039      	movs	r1, r7
    4e60:	f002 f9d0 	bl	7204 <__aeabi_dmul>
    4e64:	000b      	movs	r3, r1
    4e66:	0002      	movs	r2, r0
    4e68:	0029      	movs	r1, r5
    4e6a:	0020      	movs	r0, r4
    4e6c:	f002 f9ca 	bl	7204 <__aeabi_dmul>
    4e70:	464b      	mov	r3, r9
    4e72:	0004      	movs	r4, r0
    4e74:	000d      	movs	r5, r1
    4e76:	2b00      	cmp	r3, #0
    4e78:	d172      	bne.n	4f60 <__ieee754_log+0x330>
    4e7a:	0002      	movs	r2, r0
    4e7c:	000b      	movs	r3, r1
    4e7e:	0030      	movs	r0, r6
    4e80:	0039      	movs	r1, r7
    4e82:	f002 fc3f 	bl	7704 <__aeabi_dsub>
    4e86:	e73b      	b.n	4d00 <__ieee754_log+0xd0>
    4e88:	464b      	mov	r3, r9
    4e8a:	2b00      	cmp	r3, #0
    4e8c:	d100      	bne.n	4e90 <__ieee754_log+0x260>
    4e8e:	e0c5      	b.n	501c <__ieee754_log+0x3ec>
    4e90:	9802      	ldr	r0, [sp, #8]
    4e92:	9903      	ldr	r1, [sp, #12]
    4e94:	4a49      	ldr	r2, [pc, #292]	; (4fbc <__ieee754_log+0x38c>)
    4e96:	4b4a      	ldr	r3, [pc, #296]	; (4fc0 <__ieee754_log+0x390>)
    4e98:	f002 f9b4 	bl	7204 <__aeabi_dmul>
    4e9c:	0022      	movs	r2, r4
    4e9e:	9000      	str	r0, [sp, #0]
    4ea0:	9101      	str	r1, [sp, #4]
    4ea2:	002b      	movs	r3, r5
    4ea4:	0030      	movs	r0, r6
    4ea6:	0039      	movs	r1, r7
    4ea8:	f002 fc2c 	bl	7704 <__aeabi_dsub>
    4eac:	9a04      	ldr	r2, [sp, #16]
    4eae:	9b05      	ldr	r3, [sp, #20]
    4eb0:	f002 f9a8 	bl	7204 <__aeabi_dmul>
    4eb4:	4a43      	ldr	r2, [pc, #268]	; (4fc4 <__ieee754_log+0x394>)
    4eb6:	0004      	movs	r4, r0
    4eb8:	000d      	movs	r5, r1
    4eba:	9802      	ldr	r0, [sp, #8]
    4ebc:	9903      	ldr	r1, [sp, #12]
    4ebe:	4b42      	ldr	r3, [pc, #264]	; (4fc8 <__ieee754_log+0x398>)
    4ec0:	f002 f9a0 	bl	7204 <__aeabi_dmul>
    4ec4:	0002      	movs	r2, r0
    4ec6:	000b      	movs	r3, r1
    4ec8:	0020      	movs	r0, r4
    4eca:	0029      	movs	r1, r5
    4ecc:	f002 fc1a 	bl	7704 <__aeabi_dsub>
    4ed0:	0032      	movs	r2, r6
    4ed2:	003b      	movs	r3, r7
    4ed4:	f002 fc16 	bl	7704 <__aeabi_dsub>
    4ed8:	0002      	movs	r2, r0
    4eda:	000b      	movs	r3, r1
    4edc:	9800      	ldr	r0, [sp, #0]
    4ede:	9901      	ldr	r1, [sp, #4]
    4ee0:	f002 fc10 	bl	7704 <__aeabi_dsub>
    4ee4:	e70c      	b.n	4d00 <__ieee754_log+0xd0>
    4ee6:	4a35      	ldr	r2, [pc, #212]	; (4fbc <__ieee754_log+0x38c>)
    4ee8:	4b35      	ldr	r3, [pc, #212]	; (4fc0 <__ieee754_log+0x390>)
    4eea:	9802      	ldr	r0, [sp, #8]
    4eec:	9903      	ldr	r1, [sp, #12]
    4eee:	f002 f989 	bl	7204 <__aeabi_dmul>
    4ef2:	9a00      	ldr	r2, [sp, #0]
    4ef4:	9b01      	ldr	r3, [sp, #4]
    4ef6:	9006      	str	r0, [sp, #24]
    4ef8:	9107      	str	r1, [sp, #28]
    4efa:	0020      	movs	r0, r4
    4efc:	0029      	movs	r1, r5
    4efe:	f001 fa3d 	bl	637c <__aeabi_dadd>
    4f02:	9a04      	ldr	r2, [sp, #16]
    4f04:	9b05      	ldr	r3, [sp, #20]
    4f06:	f002 f97d 	bl	7204 <__aeabi_dmul>
    4f0a:	4a2e      	ldr	r2, [pc, #184]	; (4fc4 <__ieee754_log+0x394>)
    4f0c:	0004      	movs	r4, r0
    4f0e:	000d      	movs	r5, r1
    4f10:	9802      	ldr	r0, [sp, #8]
    4f12:	9903      	ldr	r1, [sp, #12]
    4f14:	4b2c      	ldr	r3, [pc, #176]	; (4fc8 <__ieee754_log+0x398>)
    4f16:	f002 f975 	bl	7204 <__aeabi_dmul>
    4f1a:	0002      	movs	r2, r0
    4f1c:	000b      	movs	r3, r1
    4f1e:	0020      	movs	r0, r4
    4f20:	0029      	movs	r1, r5
    4f22:	f001 fa2b 	bl	637c <__aeabi_dadd>
    4f26:	0002      	movs	r2, r0
    4f28:	000b      	movs	r3, r1
    4f2a:	9800      	ldr	r0, [sp, #0]
    4f2c:	9901      	ldr	r1, [sp, #4]
    4f2e:	f002 fbe9 	bl	7704 <__aeabi_dsub>
    4f32:	0032      	movs	r2, r6
    4f34:	003b      	movs	r3, r7
    4f36:	f002 fbe5 	bl	7704 <__aeabi_dsub>
    4f3a:	0002      	movs	r2, r0
    4f3c:	000b      	movs	r3, r1
    4f3e:	9806      	ldr	r0, [sp, #24]
    4f40:	9907      	ldr	r1, [sp, #28]
    4f42:	f002 fbdf 	bl	7704 <__aeabi_dsub>
    4f46:	e6db      	b.n	4d00 <__ieee754_log+0xd0>
    4f48:	0002      	movs	r2, r0
    4f4a:	000b      	movs	r3, r1
    4f4c:	f002 fbda 	bl	7704 <__aeabi_dsub>
    4f50:	2200      	movs	r2, #0
    4f52:	2300      	movs	r3, #0
    4f54:	f001 fd22 	bl	699c <__aeabi_ddiv>
    4f58:	e6d2      	b.n	4d00 <__ieee754_log+0xd0>
    4f5a:	2000      	movs	r0, #0
    4f5c:	2100      	movs	r1, #0
    4f5e:	e6cf      	b.n	4d00 <__ieee754_log+0xd0>
    4f60:	4648      	mov	r0, r9
    4f62:	f002 ff05 	bl	7d70 <__aeabi_i2d>
    4f66:	4a15      	ldr	r2, [pc, #84]	; (4fbc <__ieee754_log+0x38c>)
    4f68:	4b15      	ldr	r3, [pc, #84]	; (4fc0 <__ieee754_log+0x390>)
    4f6a:	9000      	str	r0, [sp, #0]
    4f6c:	9101      	str	r1, [sp, #4]
    4f6e:	f002 f949 	bl	7204 <__aeabi_dmul>
    4f72:	4a14      	ldr	r2, [pc, #80]	; (4fc4 <__ieee754_log+0x394>)
    4f74:	9002      	str	r0, [sp, #8]
    4f76:	9103      	str	r1, [sp, #12]
    4f78:	9800      	ldr	r0, [sp, #0]
    4f7a:	9901      	ldr	r1, [sp, #4]
    4f7c:	4b12      	ldr	r3, [pc, #72]	; (4fc8 <__ieee754_log+0x398>)
    4f7e:	f002 f941 	bl	7204 <__aeabi_dmul>
    4f82:	0002      	movs	r2, r0
    4f84:	000b      	movs	r3, r1
    4f86:	0020      	movs	r0, r4
    4f88:	0029      	movs	r1, r5
    4f8a:	f002 fbbb 	bl	7704 <__aeabi_dsub>
    4f8e:	0032      	movs	r2, r6
    4f90:	003b      	movs	r3, r7
    4f92:	f002 fbb7 	bl	7704 <__aeabi_dsub>
    4f96:	0002      	movs	r2, r0
    4f98:	000b      	movs	r3, r1
    4f9a:	9802      	ldr	r0, [sp, #8]
    4f9c:	9903      	ldr	r1, [sp, #12]
    4f9e:	f002 fbb1 	bl	7704 <__aeabi_dsub>
    4fa2:	e6ad      	b.n	4d00 <__ieee754_log+0xd0>
    4fa4:	000fffff 	.word	0x000fffff
    4fa8:	43500000 	.word	0x43500000
    4fac:	7fefffff 	.word	0x7fefffff
    4fb0:	fffffc01 	.word	0xfffffc01
    4fb4:	00095f64 	.word	0x00095f64
    4fb8:	3ff00000 	.word	0x3ff00000
    4fbc:	fee00000 	.word	0xfee00000
    4fc0:	3fe62e42 	.word	0x3fe62e42
    4fc4:	35793c76 	.word	0x35793c76
    4fc8:	3dea39ef 	.word	0x3dea39ef
    4fcc:	fff9eb86 	.word	0xfff9eb86
    4fd0:	df3e5244 	.word	0xdf3e5244
    4fd4:	3fc2f112 	.word	0x3fc2f112
    4fd8:	96cb03de 	.word	0x96cb03de
    4fdc:	3fc74664 	.word	0x3fc74664
    4fe0:	94229359 	.word	0x94229359
    4fe4:	3fd24924 	.word	0x3fd24924
    4fe8:	55555593 	.word	0x55555593
    4fec:	3fe55555 	.word	0x3fe55555
    4ff0:	d078c69f 	.word	0xd078c69f
    4ff4:	3fc39a09 	.word	0x3fc39a09
    4ff8:	1d8e78af 	.word	0x1d8e78af
    4ffc:	3fcc71c5 	.word	0x3fcc71c5
    5000:	9997fa04 	.word	0x9997fa04
    5004:	3fd99999 	.word	0x3fd99999
    5008:	0006b851 	.word	0x0006b851
    500c:	3fe00000 	.word	0x3fe00000
    5010:	c3500000 	.word	0xc3500000
    5014:	55555555 	.word	0x55555555
    5018:	3fd55555 	.word	0x3fd55555
    501c:	0022      	movs	r2, r4
    501e:	002b      	movs	r3, r5
    5020:	0030      	movs	r0, r6
    5022:	0039      	movs	r1, r7
    5024:	f002 fb6e 	bl	7704 <__aeabi_dsub>
    5028:	9a04      	ldr	r2, [sp, #16]
    502a:	9b05      	ldr	r3, [sp, #20]
    502c:	f002 f8ea 	bl	7204 <__aeabi_dmul>
    5030:	e6f6      	b.n	4e20 <__ieee754_log+0x1f0>
    5032:	46c0      	nop			; (mov r8, r8)

00005034 <__ieee754_log10>:
    5034:	b5f0      	push	{r4, r5, r6, r7, lr}
    5036:	46ce      	mov	lr, r9
    5038:	4647      	mov	r7, r8
    503a:	b580      	push	{r7, lr}
    503c:	4a3a      	ldr	r2, [pc, #232]	; (5128 <__ieee754_log10+0xf4>)
    503e:	b083      	sub	sp, #12
    5040:	0004      	movs	r4, r0
    5042:	000d      	movs	r5, r1
    5044:	000b      	movs	r3, r1
    5046:	4291      	cmp	r1, r2
    5048:	dc1c      	bgt.n	5084 <__ieee754_log10+0x50>
    504a:	004a      	lsls	r2, r1, #1
    504c:	0852      	lsrs	r2, r2, #1
    504e:	4302      	orrs	r2, r0
    5050:	d05a      	beq.n	5108 <__ieee754_log10+0xd4>
    5052:	2900      	cmp	r1, #0
    5054:	db5f      	blt.n	5116 <__ieee754_log10+0xe2>
    5056:	2200      	movs	r2, #0
    5058:	4b34      	ldr	r3, [pc, #208]	; (512c <__ieee754_log10+0xf8>)
    505a:	f002 f8d3 	bl	7204 <__aeabi_dmul>
    505e:	000d      	movs	r5, r1
    5060:	000b      	movs	r3, r1
    5062:	2136      	movs	r1, #54	; 0x36
    5064:	4a32      	ldr	r2, [pc, #200]	; (5130 <__ieee754_log10+0xfc>)
    5066:	0004      	movs	r4, r0
    5068:	4249      	negs	r1, r1
    506a:	4293      	cmp	r3, r2
    506c:	dd0e      	ble.n	508c <__ieee754_log10+0x58>
    506e:	0022      	movs	r2, r4
    5070:	002b      	movs	r3, r5
    5072:	0020      	movs	r0, r4
    5074:	0029      	movs	r1, r5
    5076:	f001 f981 	bl	637c <__aeabi_dadd>
    507a:	b003      	add	sp, #12
    507c:	bc0c      	pop	{r2, r3}
    507e:	4690      	mov	r8, r2
    5080:	4699      	mov	r9, r3
    5082:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5084:	4a2a      	ldr	r2, [pc, #168]	; (5130 <__ieee754_log10+0xfc>)
    5086:	2100      	movs	r1, #0
    5088:	4293      	cmp	r3, r2
    508a:	dcf0      	bgt.n	506e <__ieee754_log10+0x3a>
    508c:	4a29      	ldr	r2, [pc, #164]	; (5134 <__ieee754_log10+0x100>)
    508e:	1518      	asrs	r0, r3, #20
    5090:	4694      	mov	ip, r2
    5092:	4460      	add	r0, ip
    5094:	1840      	adds	r0, r0, r1
    5096:	0fc2      	lsrs	r2, r0, #31
    5098:	4691      	mov	r9, r2
    509a:	031b      	lsls	r3, r3, #12
    509c:	0b1b      	lsrs	r3, r3, #12
    509e:	4448      	add	r0, r9
    50a0:	4698      	mov	r8, r3
    50a2:	f002 fe65 	bl	7d70 <__aeabi_i2d>
    50a6:	464a      	mov	r2, r9
    50a8:	4b23      	ldr	r3, [pc, #140]	; (5138 <__ieee754_log10+0x104>)
    50aa:	0006      	movs	r6, r0
    50ac:	1a9b      	subs	r3, r3, r2
    50ae:	4642      	mov	r2, r8
    50b0:	051b      	lsls	r3, r3, #20
    50b2:	431a      	orrs	r2, r3
    50b4:	000f      	movs	r7, r1
    50b6:	0020      	movs	r0, r4
    50b8:	0011      	movs	r1, r2
    50ba:	f7ff fdb9 	bl	4c30 <__ieee754_log>
    50be:	4a1f      	ldr	r2, [pc, #124]	; (513c <__ieee754_log10+0x108>)
    50c0:	0004      	movs	r4, r0
    50c2:	000d      	movs	r5, r1
    50c4:	4b1e      	ldr	r3, [pc, #120]	; (5140 <__ieee754_log10+0x10c>)
    50c6:	0030      	movs	r0, r6
    50c8:	0039      	movs	r1, r7
    50ca:	f002 f89b 	bl	7204 <__aeabi_dmul>
    50ce:	4a1d      	ldr	r2, [pc, #116]	; (5144 <__ieee754_log10+0x110>)
    50d0:	9000      	str	r0, [sp, #0]
    50d2:	9101      	str	r1, [sp, #4]
    50d4:	4b1c      	ldr	r3, [pc, #112]	; (5148 <__ieee754_log10+0x114>)
    50d6:	0020      	movs	r0, r4
    50d8:	0029      	movs	r1, r5
    50da:	f002 f893 	bl	7204 <__aeabi_dmul>
    50de:	0002      	movs	r2, r0
    50e0:	000b      	movs	r3, r1
    50e2:	9800      	ldr	r0, [sp, #0]
    50e4:	9901      	ldr	r1, [sp, #4]
    50e6:	f001 f949 	bl	637c <__aeabi_dadd>
    50ea:	4a18      	ldr	r2, [pc, #96]	; (514c <__ieee754_log10+0x118>)
    50ec:	0004      	movs	r4, r0
    50ee:	000d      	movs	r5, r1
    50f0:	4b17      	ldr	r3, [pc, #92]	; (5150 <__ieee754_log10+0x11c>)
    50f2:	0030      	movs	r0, r6
    50f4:	0039      	movs	r1, r7
    50f6:	f002 f885 	bl	7204 <__aeabi_dmul>
    50fa:	0002      	movs	r2, r0
    50fc:	000b      	movs	r3, r1
    50fe:	0020      	movs	r0, r4
    5100:	0029      	movs	r1, r5
    5102:	f001 f93b 	bl	637c <__aeabi_dadd>
    5106:	e7b8      	b.n	507a <__ieee754_log10+0x46>
    5108:	2200      	movs	r2, #0
    510a:	2300      	movs	r3, #0
    510c:	2000      	movs	r0, #0
    510e:	4911      	ldr	r1, [pc, #68]	; (5154 <__ieee754_log10+0x120>)
    5110:	f001 fc44 	bl	699c <__aeabi_ddiv>
    5114:	e7b1      	b.n	507a <__ieee754_log10+0x46>
    5116:	0002      	movs	r2, r0
    5118:	000b      	movs	r3, r1
    511a:	f002 faf3 	bl	7704 <__aeabi_dsub>
    511e:	2200      	movs	r2, #0
    5120:	2300      	movs	r3, #0
    5122:	f001 fc3b 	bl	699c <__aeabi_ddiv>
    5126:	e7a8      	b.n	507a <__ieee754_log10+0x46>
    5128:	000fffff 	.word	0x000fffff
    512c:	43500000 	.word	0x43500000
    5130:	7fefffff 	.word	0x7fefffff
    5134:	fffffc01 	.word	0xfffffc01
    5138:	000003ff 	.word	0x000003ff
    513c:	11f12b36 	.word	0x11f12b36
    5140:	3d59fef3 	.word	0x3d59fef3
    5144:	1526e50e 	.word	0x1526e50e
    5148:	3fdbcb7b 	.word	0x3fdbcb7b
    514c:	509f6000 	.word	0x509f6000
    5150:	3fd34413 	.word	0x3fd34413
    5154:	c3500000 	.word	0xc3500000

00005158 <__ieee754_pow>:
    5158:	b5f0      	push	{r4, r5, r6, r7, lr}
    515a:	4657      	mov	r7, sl
    515c:	464e      	mov	r6, r9
    515e:	4645      	mov	r5, r8
    5160:	46de      	mov	lr, fp
    5162:	001c      	movs	r4, r3
    5164:	0013      	movs	r3, r2
    5166:	b5e0      	push	{r5, r6, r7, lr}
    5168:	0065      	lsls	r5, r4, #1
    516a:	b091      	sub	sp, #68	; 0x44
    516c:	086d      	lsrs	r5, r5, #1
    516e:	9300      	str	r3, [sp, #0]
    5170:	9401      	str	r4, [sp, #4]
    5172:	0007      	movs	r7, r0
    5174:	000e      	movs	r6, r1
    5176:	4680      	mov	r8, r0
    5178:	4689      	mov	r9, r1
    517a:	46a2      	mov	sl, r4
    517c:	432b      	orrs	r3, r5
    517e:	d031      	beq.n	51e4 <__ieee754_pow+0x8c>
    5180:	4b67      	ldr	r3, [pc, #412]	; (5320 <__ieee754_pow+0x1c8>)
    5182:	0074      	lsls	r4, r6, #1
    5184:	0864      	lsrs	r4, r4, #1
    5186:	429c      	cmp	r4, r3
    5188:	dc27      	bgt.n	51da <__ieee754_pow+0x82>
    518a:	d024      	beq.n	51d6 <__ieee754_pow+0x7e>
    518c:	429d      	cmp	r5, r3
    518e:	dc24      	bgt.n	51da <__ieee754_pow+0x82>
    5190:	4b63      	ldr	r3, [pc, #396]	; (5320 <__ieee754_pow+0x1c8>)
    5192:	429d      	cmp	r5, r3
    5194:	d100      	bne.n	5198 <__ieee754_pow+0x40>
    5196:	e081      	b.n	529c <__ieee754_pow+0x144>
    5198:	2300      	movs	r3, #0
    519a:	469b      	mov	fp, r3
    519c:	464b      	mov	r3, r9
    519e:	2b00      	cmp	r3, #0
    51a0:	da00      	bge.n	51a4 <__ieee754_pow+0x4c>
    51a2:	e07f      	b.n	52a4 <__ieee754_pow+0x14c>
    51a4:	2a00      	cmp	r2, #0
    51a6:	d12c      	bne.n	5202 <__ieee754_pow+0xaa>
    51a8:	4b5d      	ldr	r3, [pc, #372]	; (5320 <__ieee754_pow+0x1c8>)
    51aa:	429d      	cmp	r5, r3
    51ac:	d100      	bne.n	51b0 <__ieee754_pow+0x58>
    51ae:	e097      	b.n	52e0 <__ieee754_pow+0x188>
    51b0:	4b5c      	ldr	r3, [pc, #368]	; (5324 <__ieee754_pow+0x1cc>)
    51b2:	429d      	cmp	r5, r3
    51b4:	d066      	beq.n	5284 <__ieee754_pow+0x12c>
    51b6:	2380      	movs	r3, #128	; 0x80
    51b8:	05db      	lsls	r3, r3, #23
    51ba:	459a      	cmp	sl, r3
    51bc:	d100      	bne.n	51c0 <__ieee754_pow+0x68>
    51be:	e3b9      	b.n	5934 <__ieee754_pow+0x7dc>
    51c0:	4b59      	ldr	r3, [pc, #356]	; (5328 <__ieee754_pow+0x1d0>)
    51c2:	459a      	cmp	sl, r3
    51c4:	d11d      	bne.n	5202 <__ieee754_pow+0xaa>
    51c6:	464b      	mov	r3, r9
    51c8:	2b00      	cmp	r3, #0
    51ca:	db1a      	blt.n	5202 <__ieee754_pow+0xaa>
    51cc:	0038      	movs	r0, r7
    51ce:	0031      	movs	r1, r6
    51d0:	f000 fcf8 	bl	5bc4 <__ieee754_sqrt>
    51d4:	e008      	b.n	51e8 <__ieee754_pow+0x90>
    51d6:	2800      	cmp	r0, #0
    51d8:	d00d      	beq.n	51f6 <__ieee754_pow+0x9e>
    51da:	4b54      	ldr	r3, [pc, #336]	; (532c <__ieee754_pow+0x1d4>)
    51dc:	469c      	mov	ip, r3
    51de:	4464      	add	r4, ip
    51e0:	4327      	orrs	r7, r4
    51e2:	d10a      	bne.n	51fa <__ieee754_pow+0xa2>
    51e4:	2000      	movs	r0, #0
    51e6:	494f      	ldr	r1, [pc, #316]	; (5324 <__ieee754_pow+0x1cc>)
    51e8:	b011      	add	sp, #68	; 0x44
    51ea:	bc3c      	pop	{r2, r3, r4, r5}
    51ec:	4690      	mov	r8, r2
    51ee:	4699      	mov	r9, r3
    51f0:	46a2      	mov	sl, r4
    51f2:	46ab      	mov	fp, r5
    51f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    51f6:	42a5      	cmp	r5, r4
    51f8:	ddca      	ble.n	5190 <__ieee754_pow+0x38>
    51fa:	484d      	ldr	r0, [pc, #308]	; (5330 <__ieee754_pow+0x1d8>)
    51fc:	f000 fdd2 	bl	5da4 <nan>
    5200:	e7f2      	b.n	51e8 <__ieee754_pow+0x90>
    5202:	0038      	movs	r0, r7
    5204:	0031      	movs	r1, r6
    5206:	f000 fdbd 	bl	5d84 <fabs>
    520a:	4643      	mov	r3, r8
    520c:	2b00      	cmp	r3, #0
    520e:	d11d      	bne.n	524c <__ieee754_pow+0xf4>
    5210:	2c00      	cmp	r4, #0
    5212:	d004      	beq.n	521e <__ieee754_pow+0xc6>
    5214:	4a43      	ldr	r2, [pc, #268]	; (5324 <__ieee754_pow+0x1cc>)
    5216:	00b3      	lsls	r3, r6, #2
    5218:	089b      	lsrs	r3, r3, #2
    521a:	4293      	cmp	r3, r2
    521c:	d116      	bne.n	524c <__ieee754_pow+0xf4>
    521e:	4653      	mov	r3, sl
    5220:	2b00      	cmp	r3, #0
    5222:	da00      	bge.n	5226 <__ieee754_pow+0xce>
    5224:	e3c5      	b.n	59b2 <__ieee754_pow+0x85a>
    5226:	464b      	mov	r3, r9
    5228:	2b00      	cmp	r3, #0
    522a:	dadd      	bge.n	51e8 <__ieee754_pow+0x90>
    522c:	4b3f      	ldr	r3, [pc, #252]	; (532c <__ieee754_pow+0x1d4>)
    522e:	469c      	mov	ip, r3
    5230:	465b      	mov	r3, fp
    5232:	4464      	add	r4, ip
    5234:	431c      	orrs	r4, r3
    5236:	d101      	bne.n	523c <__ieee754_pow+0xe4>
    5238:	f000 fc53 	bl	5ae2 <__ieee754_pow+0x98a>
    523c:	465b      	mov	r3, fp
    523e:	2b01      	cmp	r3, #1
    5240:	d1d2      	bne.n	51e8 <__ieee754_pow+0x90>
    5242:	2480      	movs	r4, #128	; 0x80
    5244:	0624      	lsls	r4, r4, #24
    5246:	190b      	adds	r3, r1, r4
    5248:	0019      	movs	r1, r3
    524a:	e7cd      	b.n	51e8 <__ieee754_pow+0x90>
    524c:	0ff3      	lsrs	r3, r6, #31
    524e:	3b01      	subs	r3, #1
    5250:	4698      	mov	r8, r3
    5252:	465b      	mov	r3, fp
    5254:	4642      	mov	r2, r8
    5256:	4313      	orrs	r3, r2
    5258:	d057      	beq.n	530a <__ieee754_pow+0x1b2>
    525a:	4b36      	ldr	r3, [pc, #216]	; (5334 <__ieee754_pow+0x1dc>)
    525c:	429d      	cmp	r5, r3
    525e:	dd77      	ble.n	5350 <__ieee754_pow+0x1f8>
    5260:	4b35      	ldr	r3, [pc, #212]	; (5338 <__ieee754_pow+0x1e0>)
    5262:	429d      	cmp	r5, r3
    5264:	dc00      	bgt.n	5268 <__ieee754_pow+0x110>
    5266:	e3b1      	b.n	59cc <__ieee754_pow+0x874>
    5268:	4b34      	ldr	r3, [pc, #208]	; (533c <__ieee754_pow+0x1e4>)
    526a:	429c      	cmp	r4, r3
    526c:	dc00      	bgt.n	5270 <__ieee754_pow+0x118>
    526e:	e3a8      	b.n	59c2 <__ieee754_pow+0x86a>
    5270:	4653      	mov	r3, sl
    5272:	2b00      	cmp	r3, #0
    5274:	dd43      	ble.n	52fe <__ieee754_pow+0x1a6>
    5276:	4a32      	ldr	r2, [pc, #200]	; (5340 <__ieee754_pow+0x1e8>)
    5278:	4b32      	ldr	r3, [pc, #200]	; (5344 <__ieee754_pow+0x1ec>)
    527a:	0010      	movs	r0, r2
    527c:	0019      	movs	r1, r3
    527e:	f001 ffc1 	bl	7204 <__aeabi_dmul>
    5282:	e7b1      	b.n	51e8 <__ieee754_pow+0x90>
    5284:	4653      	mov	r3, sl
    5286:	0038      	movs	r0, r7
    5288:	0031      	movs	r1, r6
    528a:	2b00      	cmp	r3, #0
    528c:	daac      	bge.n	51e8 <__ieee754_pow+0x90>
    528e:	003a      	movs	r2, r7
    5290:	0033      	movs	r3, r6
    5292:	2000      	movs	r0, #0
    5294:	4923      	ldr	r1, [pc, #140]	; (5324 <__ieee754_pow+0x1cc>)
    5296:	f001 fb81 	bl	699c <__aeabi_ddiv>
    529a:	e7a5      	b.n	51e8 <__ieee754_pow+0x90>
    529c:	2a00      	cmp	r2, #0
    529e:	d100      	bne.n	52a2 <__ieee754_pow+0x14a>
    52a0:	e77a      	b.n	5198 <__ieee754_pow+0x40>
    52a2:	e79a      	b.n	51da <__ieee754_pow+0x82>
    52a4:	4b28      	ldr	r3, [pc, #160]	; (5348 <__ieee754_pow+0x1f0>)
    52a6:	429d      	cmp	r5, r3
    52a8:	dc2c      	bgt.n	5304 <__ieee754_pow+0x1ac>
    52aa:	4b24      	ldr	r3, [pc, #144]	; (533c <__ieee754_pow+0x1e4>)
    52ac:	429d      	cmp	r5, r3
    52ae:	dc00      	bgt.n	52b2 <__ieee754_pow+0x15a>
    52b0:	e778      	b.n	51a4 <__ieee754_pow+0x4c>
    52b2:	4926      	ldr	r1, [pc, #152]	; (534c <__ieee754_pow+0x1f4>)
    52b4:	152b      	asrs	r3, r5, #20
    52b6:	468c      	mov	ip, r1
    52b8:	4463      	add	r3, ip
    52ba:	2b14      	cmp	r3, #20
    52bc:	dc01      	bgt.n	52c2 <__ieee754_pow+0x16a>
    52be:	f000 fbf3 	bl	5aa8 <__ieee754_pow+0x950>
    52c2:	2134      	movs	r1, #52	; 0x34
    52c4:	1acb      	subs	r3, r1, r3
    52c6:	9900      	ldr	r1, [sp, #0]
    52c8:	40d9      	lsrs	r1, r3
    52ca:	0008      	movs	r0, r1
    52cc:	4098      	lsls	r0, r3
    52ce:	4282      	cmp	r2, r0
    52d0:	d000      	beq.n	52d4 <__ieee754_pow+0x17c>
    52d2:	e767      	b.n	51a4 <__ieee754_pow+0x4c>
    52d4:	2301      	movs	r3, #1
    52d6:	4019      	ands	r1, r3
    52d8:	3301      	adds	r3, #1
    52da:	1a5b      	subs	r3, r3, r1
    52dc:	469b      	mov	fp, r3
    52de:	e761      	b.n	51a4 <__ieee754_pow+0x4c>
    52e0:	4b12      	ldr	r3, [pc, #72]	; (532c <__ieee754_pow+0x1d4>)
    52e2:	18e3      	adds	r3, r4, r3
    52e4:	431f      	orrs	r7, r3
    52e6:	d100      	bne.n	52ea <__ieee754_pow+0x192>
    52e8:	e77c      	b.n	51e4 <__ieee754_pow+0x8c>
    52ea:	4b14      	ldr	r3, [pc, #80]	; (533c <__ieee754_pow+0x1e4>)
    52ec:	429c      	cmp	r4, r3
    52ee:	dc00      	bgt.n	52f2 <__ieee754_pow+0x19a>
    52f0:	e327      	b.n	5942 <__ieee754_pow+0x7ea>
    52f2:	9800      	ldr	r0, [sp, #0]
    52f4:	9901      	ldr	r1, [sp, #4]
    52f6:	4653      	mov	r3, sl
    52f8:	2b00      	cmp	r3, #0
    52fa:	db00      	blt.n	52fe <__ieee754_pow+0x1a6>
    52fc:	e774      	b.n	51e8 <__ieee754_pow+0x90>
    52fe:	2000      	movs	r0, #0
    5300:	2100      	movs	r1, #0
    5302:	e771      	b.n	51e8 <__ieee754_pow+0x90>
    5304:	2302      	movs	r3, #2
    5306:	469b      	mov	fp, r3
    5308:	e74c      	b.n	51a4 <__ieee754_pow+0x4c>
    530a:	003a      	movs	r2, r7
    530c:	0033      	movs	r3, r6
    530e:	0038      	movs	r0, r7
    5310:	0031      	movs	r1, r6
    5312:	f002 f9f7 	bl	7704 <__aeabi_dsub>
    5316:	0002      	movs	r2, r0
    5318:	000b      	movs	r3, r1
    531a:	f001 fb3f 	bl	699c <__aeabi_ddiv>
    531e:	e763      	b.n	51e8 <__ieee754_pow+0x90>
    5320:	7ff00000 	.word	0x7ff00000
    5324:	3ff00000 	.word	0x3ff00000
    5328:	3fe00000 	.word	0x3fe00000
    532c:	c0100000 	.word	0xc0100000
    5330:	00008b04 	.word	0x00008b04
    5334:	41e00000 	.word	0x41e00000
    5338:	43f00000 	.word	0x43f00000
    533c:	3fefffff 	.word	0x3fefffff
    5340:	8800759c 	.word	0x8800759c
    5344:	7e37e43c 	.word	0x7e37e43c
    5348:	433fffff 	.word	0x433fffff
    534c:	fffffc01 	.word	0xfffffc01
    5350:	4be9      	ldr	r3, [pc, #932]	; (56f8 <__ieee754_pow+0x5a0>)
    5352:	2200      	movs	r2, #0
    5354:	429c      	cmp	r4, r3
    5356:	dc06      	bgt.n	5366 <__ieee754_pow+0x20e>
    5358:	2200      	movs	r2, #0
    535a:	4be8      	ldr	r3, [pc, #928]	; (56fc <__ieee754_pow+0x5a4>)
    535c:	f001 ff52 	bl	7204 <__aeabi_dmul>
    5360:	2235      	movs	r2, #53	; 0x35
    5362:	000c      	movs	r4, r1
    5364:	4252      	negs	r2, r2
    5366:	4de6      	ldr	r5, [pc, #920]	; (5700 <__ieee754_pow+0x5a8>)
    5368:	1523      	asrs	r3, r4, #20
    536a:	46ac      	mov	ip, r5
    536c:	4463      	add	r3, ip
    536e:	4699      	mov	r9, r3
    5370:	0324      	lsls	r4, r4, #12
    5372:	4de4      	ldr	r5, [pc, #912]	; (5704 <__ieee754_pow+0x5ac>)
    5374:	4be4      	ldr	r3, [pc, #912]	; (5708 <__ieee754_pow+0x5b0>)
    5376:	0b24      	lsrs	r4, r4, #12
    5378:	4491      	add	r9, r2
    537a:	4325      	orrs	r5, r4
    537c:	429c      	cmp	r4, r3
    537e:	dd09      	ble.n	5394 <__ieee754_pow+0x23c>
    5380:	4be2      	ldr	r3, [pc, #904]	; (570c <__ieee754_pow+0x5b4>)
    5382:	429c      	cmp	r4, r3
    5384:	dc00      	bgt.n	5388 <__ieee754_pow+0x230>
    5386:	e3b6      	b.n	5af6 <__ieee754_pow+0x99e>
    5388:	2301      	movs	r3, #1
    538a:	469c      	mov	ip, r3
    538c:	4be0      	ldr	r3, [pc, #896]	; (5710 <__ieee754_pow+0x5b8>)
    538e:	44e1      	add	r9, ip
    5390:	469c      	mov	ip, r3
    5392:	4465      	add	r5, ip
    5394:	2300      	movs	r3, #0
    5396:	2400      	movs	r4, #0
    5398:	2200      	movs	r2, #0
    539a:	9308      	str	r3, [sp, #32]
    539c:	9409      	str	r4, [sp, #36]	; 0x24
    539e:	930c      	str	r3, [sp, #48]	; 0x30
    53a0:	940d      	str	r4, [sp, #52]	; 0x34
    53a2:	2400      	movs	r4, #0
    53a4:	4bd7      	ldr	r3, [pc, #860]	; (5704 <__ieee754_pow+0x5ac>)
    53a6:	9206      	str	r2, [sp, #24]
    53a8:	9307      	str	r3, [sp, #28]
    53aa:	9a06      	ldr	r2, [sp, #24]
    53ac:	9b07      	ldr	r3, [sp, #28]
    53ae:	0029      	movs	r1, r5
    53b0:	900a      	str	r0, [sp, #40]	; 0x28
    53b2:	910b      	str	r1, [sp, #44]	; 0x2c
    53b4:	f002 f9a6 	bl	7704 <__aeabi_dsub>
    53b8:	9a06      	ldr	r2, [sp, #24]
    53ba:	9b07      	ldr	r3, [sp, #28]
    53bc:	0006      	movs	r6, r0
    53be:	000f      	movs	r7, r1
    53c0:	980a      	ldr	r0, [sp, #40]	; 0x28
    53c2:	990b      	ldr	r1, [sp, #44]	; 0x2c
    53c4:	f000 ffda 	bl	637c <__aeabi_dadd>
    53c8:	0002      	movs	r2, r0
    53ca:	000b      	movs	r3, r1
    53cc:	2000      	movs	r0, #0
    53ce:	49cd      	ldr	r1, [pc, #820]	; (5704 <__ieee754_pow+0x5ac>)
    53d0:	f001 fae4 	bl	699c <__aeabi_ddiv>
    53d4:	000a      	movs	r2, r1
    53d6:	0001      	movs	r1, r0
    53d8:	0013      	movs	r3, r2
    53da:	910e      	str	r1, [sp, #56]	; 0x38
    53dc:	920f      	str	r2, [sp, #60]	; 0x3c
    53de:	0002      	movs	r2, r0
    53e0:	0039      	movs	r1, r7
    53e2:	0030      	movs	r0, r6
    53e4:	f001 ff0e 	bl	7204 <__aeabi_dmul>
    53e8:	000a      	movs	r2, r1
    53ea:	0001      	movs	r1, r0
    53ec:	2080      	movs	r0, #128	; 0x80
    53ee:	9104      	str	r1, [sp, #16]
    53f0:	9205      	str	r2, [sp, #20]
    53f2:	0013      	movs	r3, r2
    53f4:	2200      	movs	r2, #0
    53f6:	1069      	asrs	r1, r5, #1
    53f8:	2580      	movs	r5, #128	; 0x80
    53fa:	0300      	lsls	r0, r0, #12
    53fc:	4684      	mov	ip, r0
    53fe:	9202      	str	r2, [sp, #8]
    5400:	9303      	str	r3, [sp, #12]
    5402:	2200      	movs	r2, #0
    5404:	05ad      	lsls	r5, r5, #22
    5406:	430d      	orrs	r5, r1
    5408:	4465      	add	r5, ip
    540a:	192b      	adds	r3, r5, r4
    540c:	9802      	ldr	r0, [sp, #8]
    540e:	9903      	ldr	r1, [sp, #12]
    5410:	0014      	movs	r4, r2
    5412:	001d      	movs	r5, r3
    5414:	f001 fef6 	bl	7204 <__aeabi_dmul>
    5418:	0002      	movs	r2, r0
    541a:	000b      	movs	r3, r1
    541c:	0030      	movs	r0, r6
    541e:	0039      	movs	r1, r7
    5420:	f002 f970 	bl	7704 <__aeabi_dsub>
    5424:	9a06      	ldr	r2, [sp, #24]
    5426:	9b07      	ldr	r3, [sp, #28]
    5428:	0006      	movs	r6, r0
    542a:	000f      	movs	r7, r1
    542c:	0020      	movs	r0, r4
    542e:	0029      	movs	r1, r5
    5430:	f002 f968 	bl	7704 <__aeabi_dsub>
    5434:	0002      	movs	r2, r0
    5436:	000b      	movs	r3, r1
    5438:	980a      	ldr	r0, [sp, #40]	; 0x28
    543a:	990b      	ldr	r1, [sp, #44]	; 0x2c
    543c:	f002 f962 	bl	7704 <__aeabi_dsub>
    5440:	9a02      	ldr	r2, [sp, #8]
    5442:	9b03      	ldr	r3, [sp, #12]
    5444:	f001 fede 	bl	7204 <__aeabi_dmul>
    5448:	0002      	movs	r2, r0
    544a:	000b      	movs	r3, r1
    544c:	0030      	movs	r0, r6
    544e:	0039      	movs	r1, r7
    5450:	f002 f958 	bl	7704 <__aeabi_dsub>
    5454:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    5456:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    5458:	f001 fed4 	bl	7204 <__aeabi_dmul>
    545c:	9d04      	ldr	r5, [sp, #16]
    545e:	9e05      	ldr	r6, [sp, #20]
    5460:	9006      	str	r0, [sp, #24]
    5462:	9107      	str	r1, [sp, #28]
    5464:	002a      	movs	r2, r5
    5466:	0033      	movs	r3, r6
    5468:	0028      	movs	r0, r5
    546a:	0031      	movs	r1, r6
    546c:	f001 feca 	bl	7204 <__aeabi_dmul>
    5470:	0006      	movs	r6, r0
    5472:	000f      	movs	r7, r1
    5474:	4aa7      	ldr	r2, [pc, #668]	; (5714 <__ieee754_pow+0x5bc>)
    5476:	4ba8      	ldr	r3, [pc, #672]	; (5718 <__ieee754_pow+0x5c0>)
    5478:	f001 fec4 	bl	7204 <__aeabi_dmul>
    547c:	4aa7      	ldr	r2, [pc, #668]	; (571c <__ieee754_pow+0x5c4>)
    547e:	4ba8      	ldr	r3, [pc, #672]	; (5720 <__ieee754_pow+0x5c8>)
    5480:	f000 ff7c 	bl	637c <__aeabi_dadd>
    5484:	0032      	movs	r2, r6
    5486:	003b      	movs	r3, r7
    5488:	f001 febc 	bl	7204 <__aeabi_dmul>
    548c:	4aa5      	ldr	r2, [pc, #660]	; (5724 <__ieee754_pow+0x5cc>)
    548e:	4ba6      	ldr	r3, [pc, #664]	; (5728 <__ieee754_pow+0x5d0>)
    5490:	f000 ff74 	bl	637c <__aeabi_dadd>
    5494:	0032      	movs	r2, r6
    5496:	003b      	movs	r3, r7
    5498:	f001 feb4 	bl	7204 <__aeabi_dmul>
    549c:	4aa3      	ldr	r2, [pc, #652]	; (572c <__ieee754_pow+0x5d4>)
    549e:	4ba4      	ldr	r3, [pc, #656]	; (5730 <__ieee754_pow+0x5d8>)
    54a0:	f000 ff6c 	bl	637c <__aeabi_dadd>
    54a4:	0032      	movs	r2, r6
    54a6:	003b      	movs	r3, r7
    54a8:	f001 feac 	bl	7204 <__aeabi_dmul>
    54ac:	4aa1      	ldr	r2, [pc, #644]	; (5734 <__ieee754_pow+0x5dc>)
    54ae:	4ba2      	ldr	r3, [pc, #648]	; (5738 <__ieee754_pow+0x5e0>)
    54b0:	f000 ff64 	bl	637c <__aeabi_dadd>
    54b4:	0032      	movs	r2, r6
    54b6:	003b      	movs	r3, r7
    54b8:	f001 fea4 	bl	7204 <__aeabi_dmul>
    54bc:	4a9f      	ldr	r2, [pc, #636]	; (573c <__ieee754_pow+0x5e4>)
    54be:	4ba0      	ldr	r3, [pc, #640]	; (5740 <__ieee754_pow+0x5e8>)
    54c0:	f000 ff5c 	bl	637c <__aeabi_dadd>
    54c4:	0032      	movs	r2, r6
    54c6:	0004      	movs	r4, r0
    54c8:	000d      	movs	r5, r1
    54ca:	003b      	movs	r3, r7
    54cc:	0030      	movs	r0, r6
    54ce:	0039      	movs	r1, r7
    54d0:	f001 fe98 	bl	7204 <__aeabi_dmul>
    54d4:	0002      	movs	r2, r0
    54d6:	000b      	movs	r3, r1
    54d8:	0020      	movs	r0, r4
    54da:	0029      	movs	r1, r5
    54dc:	f001 fe92 	bl	7204 <__aeabi_dmul>
    54e0:	9e02      	ldr	r6, [sp, #8]
    54e2:	9f03      	ldr	r7, [sp, #12]
    54e4:	0004      	movs	r4, r0
    54e6:	000d      	movs	r5, r1
    54e8:	9804      	ldr	r0, [sp, #16]
    54ea:	9905      	ldr	r1, [sp, #20]
    54ec:	0032      	movs	r2, r6
    54ee:	003b      	movs	r3, r7
    54f0:	f000 ff44 	bl	637c <__aeabi_dadd>
    54f4:	9a06      	ldr	r2, [sp, #24]
    54f6:	9b07      	ldr	r3, [sp, #28]
    54f8:	f001 fe84 	bl	7204 <__aeabi_dmul>
    54fc:	0022      	movs	r2, r4
    54fe:	002b      	movs	r3, r5
    5500:	f000 ff3c 	bl	637c <__aeabi_dadd>
    5504:	0032      	movs	r2, r6
    5506:	900a      	str	r0, [sp, #40]	; 0x28
    5508:	910b      	str	r1, [sp, #44]	; 0x2c
    550a:	003b      	movs	r3, r7
    550c:	0030      	movs	r0, r6
    550e:	0039      	movs	r1, r7
    5510:	9602      	str	r6, [sp, #8]
    5512:	9703      	str	r7, [sp, #12]
    5514:	f001 fe76 	bl	7204 <__aeabi_dmul>
    5518:	2200      	movs	r2, #0
    551a:	4b8a      	ldr	r3, [pc, #552]	; (5744 <__ieee754_pow+0x5ec>)
    551c:	0004      	movs	r4, r0
    551e:	000d      	movs	r5, r1
    5520:	f000 ff2c 	bl	637c <__aeabi_dadd>
    5524:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    5526:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    5528:	f000 ff28 	bl	637c <__aeabi_dadd>
    552c:	2600      	movs	r6, #0
    552e:	000f      	movs	r7, r1
    5530:	0032      	movs	r2, r6
    5532:	000b      	movs	r3, r1
    5534:	9802      	ldr	r0, [sp, #8]
    5536:	9903      	ldr	r1, [sp, #12]
    5538:	f001 fe64 	bl	7204 <__aeabi_dmul>
    553c:	2200      	movs	r2, #0
    553e:	9002      	str	r0, [sp, #8]
    5540:	9103      	str	r1, [sp, #12]
    5542:	4b80      	ldr	r3, [pc, #512]	; (5744 <__ieee754_pow+0x5ec>)
    5544:	0030      	movs	r0, r6
    5546:	0039      	movs	r1, r7
    5548:	f002 f8dc 	bl	7704 <__aeabi_dsub>
    554c:	0022      	movs	r2, r4
    554e:	002b      	movs	r3, r5
    5550:	f002 f8d8 	bl	7704 <__aeabi_dsub>
    5554:	0002      	movs	r2, r0
    5556:	000b      	movs	r3, r1
    5558:	980a      	ldr	r0, [sp, #40]	; 0x28
    555a:	990b      	ldr	r1, [sp, #44]	; 0x2c
    555c:	f002 f8d2 	bl	7704 <__aeabi_dsub>
    5560:	9a04      	ldr	r2, [sp, #16]
    5562:	9b05      	ldr	r3, [sp, #20]
    5564:	f001 fe4e 	bl	7204 <__aeabi_dmul>
    5568:	0032      	movs	r2, r6
    556a:	0004      	movs	r4, r0
    556c:	000d      	movs	r5, r1
    556e:	9806      	ldr	r0, [sp, #24]
    5570:	9907      	ldr	r1, [sp, #28]
    5572:	003b      	movs	r3, r7
    5574:	f001 fe46 	bl	7204 <__aeabi_dmul>
    5578:	0002      	movs	r2, r0
    557a:	000b      	movs	r3, r1
    557c:	0020      	movs	r0, r4
    557e:	0029      	movs	r1, r5
    5580:	f000 fefc 	bl	637c <__aeabi_dadd>
    5584:	0004      	movs	r4, r0
    5586:	000d      	movs	r5, r1
    5588:	0002      	movs	r2, r0
    558a:	000b      	movs	r3, r1
    558c:	9802      	ldr	r0, [sp, #8]
    558e:	9903      	ldr	r1, [sp, #12]
    5590:	f000 fef4 	bl	637c <__aeabi_dadd>
    5594:	2600      	movs	r6, #0
    5596:	22e0      	movs	r2, #224	; 0xe0
    5598:	4b6b      	ldr	r3, [pc, #428]	; (5748 <__ieee754_pow+0x5f0>)
    559a:	0612      	lsls	r2, r2, #24
    559c:	0030      	movs	r0, r6
    559e:	000f      	movs	r7, r1
    55a0:	f001 fe30 	bl	7204 <__aeabi_dmul>
    55a4:	9a02      	ldr	r2, [sp, #8]
    55a6:	9b03      	ldr	r3, [sp, #12]
    55a8:	9004      	str	r0, [sp, #16]
    55aa:	9105      	str	r1, [sp, #20]
    55ac:	0030      	movs	r0, r6
    55ae:	0039      	movs	r1, r7
    55b0:	f002 f8a8 	bl	7704 <__aeabi_dsub>
    55b4:	0002      	movs	r2, r0
    55b6:	000b      	movs	r3, r1
    55b8:	0020      	movs	r0, r4
    55ba:	0029      	movs	r1, r5
    55bc:	f002 f8a2 	bl	7704 <__aeabi_dsub>
    55c0:	4a62      	ldr	r2, [pc, #392]	; (574c <__ieee754_pow+0x5f4>)
    55c2:	4b61      	ldr	r3, [pc, #388]	; (5748 <__ieee754_pow+0x5f0>)
    55c4:	f001 fe1e 	bl	7204 <__aeabi_dmul>
    55c8:	4a61      	ldr	r2, [pc, #388]	; (5750 <__ieee754_pow+0x5f8>)
    55ca:	0004      	movs	r4, r0
    55cc:	000d      	movs	r5, r1
    55ce:	4b61      	ldr	r3, [pc, #388]	; (5754 <__ieee754_pow+0x5fc>)
    55d0:	0030      	movs	r0, r6
    55d2:	0039      	movs	r1, r7
    55d4:	f001 fe16 	bl	7204 <__aeabi_dmul>
    55d8:	0002      	movs	r2, r0
    55da:	000b      	movs	r3, r1
    55dc:	0020      	movs	r0, r4
    55de:	0029      	movs	r1, r5
    55e0:	f000 fecc 	bl	637c <__aeabi_dadd>
    55e4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    55e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    55e8:	f000 fec8 	bl	637c <__aeabi_dadd>
    55ec:	0006      	movs	r6, r0
    55ee:	4648      	mov	r0, r9
    55f0:	000f      	movs	r7, r1
    55f2:	f002 fbbd 	bl	7d70 <__aeabi_i2d>
    55f6:	0004      	movs	r4, r0
    55f8:	000d      	movs	r5, r1
    55fa:	9804      	ldr	r0, [sp, #16]
    55fc:	9905      	ldr	r1, [sp, #20]
    55fe:	0032      	movs	r2, r6
    5600:	003b      	movs	r3, r7
    5602:	f000 febb 	bl	637c <__aeabi_dadd>
    5606:	9a08      	ldr	r2, [sp, #32]
    5608:	9b09      	ldr	r3, [sp, #36]	; 0x24
    560a:	f000 feb7 	bl	637c <__aeabi_dadd>
    560e:	0022      	movs	r2, r4
    5610:	002b      	movs	r3, r5
    5612:	f000 feb3 	bl	637c <__aeabi_dadd>
    5616:	2000      	movs	r0, #0
    5618:	0022      	movs	r2, r4
    561a:	002b      	movs	r3, r5
    561c:	9002      	str	r0, [sp, #8]
    561e:	9103      	str	r1, [sp, #12]
    5620:	f002 f870 	bl	7704 <__aeabi_dsub>
    5624:	9a08      	ldr	r2, [sp, #32]
    5626:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5628:	f002 f86c 	bl	7704 <__aeabi_dsub>
    562c:	9a04      	ldr	r2, [sp, #16]
    562e:	9b05      	ldr	r3, [sp, #20]
    5630:	f002 f868 	bl	7704 <__aeabi_dsub>
    5634:	0002      	movs	r2, r0
    5636:	000b      	movs	r3, r1
    5638:	0030      	movs	r0, r6
    563a:	0039      	movs	r1, r7
    563c:	f002 f862 	bl	7704 <__aeabi_dsub>
    5640:	9004      	str	r0, [sp, #16]
    5642:	9105      	str	r1, [sp, #20]
    5644:	465b      	mov	r3, fp
    5646:	4642      	mov	r2, r8
    5648:	3b01      	subs	r3, #1
    564a:	4313      	orrs	r3, r2
    564c:	d100      	bne.n	5650 <__ieee754_pow+0x4f8>
    564e:	e1ab      	b.n	59a8 <__ieee754_pow+0x850>
    5650:	2300      	movs	r3, #0
    5652:	4c2c      	ldr	r4, [pc, #176]	; (5704 <__ieee754_pow+0x5ac>)
    5654:	9306      	str	r3, [sp, #24]
    5656:	9407      	str	r4, [sp, #28]
    5658:	9800      	ldr	r0, [sp, #0]
    565a:	9901      	ldr	r1, [sp, #4]
    565c:	2600      	movs	r6, #0
    565e:	000b      	movs	r3, r1
    5660:	0032      	movs	r2, r6
    5662:	000f      	movs	r7, r1
    5664:	f002 f84e 	bl	7704 <__aeabi_dsub>
    5668:	9a02      	ldr	r2, [sp, #8]
    566a:	9b03      	ldr	r3, [sp, #12]
    566c:	f001 fdca 	bl	7204 <__aeabi_dmul>
    5670:	9a00      	ldr	r2, [sp, #0]
    5672:	9b01      	ldr	r3, [sp, #4]
    5674:	0004      	movs	r4, r0
    5676:	000d      	movs	r5, r1
    5678:	9804      	ldr	r0, [sp, #16]
    567a:	9905      	ldr	r1, [sp, #20]
    567c:	f001 fdc2 	bl	7204 <__aeabi_dmul>
    5680:	0002      	movs	r2, r0
    5682:	000b      	movs	r3, r1
    5684:	0020      	movs	r0, r4
    5686:	0029      	movs	r1, r5
    5688:	f000 fe78 	bl	637c <__aeabi_dadd>
    568c:	0004      	movs	r4, r0
    568e:	000d      	movs	r5, r1
    5690:	9802      	ldr	r0, [sp, #8]
    5692:	9903      	ldr	r1, [sp, #12]
    5694:	0032      	movs	r2, r6
    5696:	003b      	movs	r3, r7
    5698:	9400      	str	r4, [sp, #0]
    569a:	9501      	str	r5, [sp, #4]
    569c:	f001 fdb2 	bl	7204 <__aeabi_dmul>
    56a0:	0002      	movs	r2, r0
    56a2:	000b      	movs	r3, r1
    56a4:	0006      	movs	r6, r0
    56a6:	000f      	movs	r7, r1
    56a8:	0020      	movs	r0, r4
    56aa:	0029      	movs	r1, r5
    56ac:	f000 fe66 	bl	637c <__aeabi_dadd>
    56b0:	4b29      	ldr	r3, [pc, #164]	; (5758 <__ieee754_pow+0x600>)
    56b2:	0004      	movs	r4, r0
    56b4:	000d      	movs	r5, r1
    56b6:	0002      	movs	r2, r0
    56b8:	468b      	mov	fp, r1
    56ba:	4299      	cmp	r1, r3
    56bc:	dc00      	bgt.n	56c0 <__ieee754_pow+0x568>
    56be:	e14f      	b.n	5960 <__ieee754_pow+0x808>
    56c0:	4b26      	ldr	r3, [pc, #152]	; (575c <__ieee754_pow+0x604>)
    56c2:	18cb      	adds	r3, r1, r3
    56c4:	4303      	orrs	r3, r0
    56c6:	d000      	beq.n	56ca <__ieee754_pow+0x572>
    56c8:	e1e2      	b.n	5a90 <__ieee754_pow+0x938>
    56ca:	9800      	ldr	r0, [sp, #0]
    56cc:	9901      	ldr	r1, [sp, #4]
    56ce:	4a24      	ldr	r2, [pc, #144]	; (5760 <__ieee754_pow+0x608>)
    56d0:	4b24      	ldr	r3, [pc, #144]	; (5764 <__ieee754_pow+0x60c>)
    56d2:	f000 fe53 	bl	637c <__aeabi_dadd>
    56d6:	0032      	movs	r2, r6
    56d8:	9002      	str	r0, [sp, #8]
    56da:	9103      	str	r1, [sp, #12]
    56dc:	003b      	movs	r3, r7
    56de:	0020      	movs	r0, r4
    56e0:	0029      	movs	r1, r5
    56e2:	f002 f80f 	bl	7704 <__aeabi_dsub>
    56e6:	0002      	movs	r2, r0
    56e8:	000b      	movs	r3, r1
    56ea:	9802      	ldr	r0, [sp, #8]
    56ec:	9903      	ldr	r1, [sp, #12]
    56ee:	f000 fe11 	bl	6314 <__aeabi_dcmpgt>
    56f2:	46aa      	mov	sl, r5
    56f4:	e038      	b.n	5768 <__ieee754_pow+0x610>
    56f6:	46c0      	nop			; (mov r8, r8)
    56f8:	000fffff 	.word	0x000fffff
    56fc:	43400000 	.word	0x43400000
    5700:	fffffc01 	.word	0xfffffc01
    5704:	3ff00000 	.word	0x3ff00000
    5708:	0003988e 	.word	0x0003988e
    570c:	000bb679 	.word	0x000bb679
    5710:	fff00000 	.word	0xfff00000
    5714:	4a454eef 	.word	0x4a454eef
    5718:	3fca7e28 	.word	0x3fca7e28
    571c:	93c9db65 	.word	0x93c9db65
    5720:	3fcd864a 	.word	0x3fcd864a
    5724:	a91d4101 	.word	0xa91d4101
    5728:	3fd17460 	.word	0x3fd17460
    572c:	518f264d 	.word	0x518f264d
    5730:	3fd55555 	.word	0x3fd55555
    5734:	db6fabff 	.word	0xdb6fabff
    5738:	3fdb6db6 	.word	0x3fdb6db6
    573c:	33333303 	.word	0x33333303
    5740:	3fe33333 	.word	0x3fe33333
    5744:	40080000 	.word	0x40080000
    5748:	3feec709 	.word	0x3feec709
    574c:	dc3a03fd 	.word	0xdc3a03fd
    5750:	145b01f5 	.word	0x145b01f5
    5754:	be3e2fe0 	.word	0xbe3e2fe0
    5758:	408fffff 	.word	0x408fffff
    575c:	bf700000 	.word	0xbf700000
    5760:	652b82fe 	.word	0x652b82fe
    5764:	3c971547 	.word	0x3c971547
    5768:	2800      	cmp	r0, #0
    576a:	d000      	beq.n	576e <__ieee754_pow+0x616>
    576c:	e190      	b.n	5a90 <__ieee754_pow+0x938>
    576e:	4aec      	ldr	r2, [pc, #944]	; (5b20 <__ieee754_pow+0x9c8>)
    5770:	4653      	mov	r3, sl
    5772:	4694      	mov	ip, r2
    5774:	2280      	movs	r2, #128	; 0x80
    5776:	0352      	lsls	r2, r2, #13
    5778:	0011      	movs	r1, r2
    577a:	151b      	asrs	r3, r3, #20
    577c:	4463      	add	r3, ip
    577e:	4119      	asrs	r1, r3
    5780:	000b      	movs	r3, r1
    5782:	4690      	mov	r8, r2
    5784:	4ae7      	ldr	r2, [pc, #924]	; (5b24 <__ieee754_pow+0x9cc>)
    5786:	445b      	add	r3, fp
    5788:	4694      	mov	ip, r2
    578a:	005c      	lsls	r4, r3, #1
    578c:	0d64      	lsrs	r4, r4, #21
    578e:	4de6      	ldr	r5, [pc, #920]	; (5b28 <__ieee754_pow+0x9d0>)
    5790:	4464      	add	r4, ip
    5792:	4125      	asrs	r5, r4
    5794:	001a      	movs	r2, r3
    5796:	43aa      	bics	r2, r5
    5798:	0011      	movs	r1, r2
    579a:	4642      	mov	r2, r8
    579c:	031b      	lsls	r3, r3, #12
    579e:	0b1b      	lsrs	r3, r3, #12
    57a0:	4313      	orrs	r3, r2
    57a2:	2214      	movs	r2, #20
    57a4:	1b14      	subs	r4, r2, r4
    57a6:	4123      	asrs	r3, r4
    57a8:	4699      	mov	r9, r3
    57aa:	465b      	mov	r3, fp
    57ac:	2000      	movs	r0, #0
    57ae:	2b00      	cmp	r3, #0
    57b0:	da00      	bge.n	57b4 <__ieee754_pow+0x65c>
    57b2:	e1b0      	b.n	5b16 <__ieee754_pow+0x9be>
    57b4:	0002      	movs	r2, r0
    57b6:	000b      	movs	r3, r1
    57b8:	0030      	movs	r0, r6
    57ba:	0039      	movs	r1, r7
    57bc:	f001 ffa2 	bl	7704 <__aeabi_dsub>
    57c0:	000b      	movs	r3, r1
    57c2:	0002      	movs	r2, r0
    57c4:	0006      	movs	r6, r0
    57c6:	000f      	movs	r7, r1
    57c8:	9800      	ldr	r0, [sp, #0]
    57ca:	9901      	ldr	r1, [sp, #4]
    57cc:	f000 fdd6 	bl	637c <__aeabi_dadd>
    57d0:	464b      	mov	r3, r9
    57d2:	051b      	lsls	r3, r3, #20
    57d4:	000d      	movs	r5, r1
    57d6:	4698      	mov	r8, r3
    57d8:	2400      	movs	r4, #0
    57da:	2200      	movs	r2, #0
    57dc:	4bd3      	ldr	r3, [pc, #844]	; (5b2c <__ieee754_pow+0x9d4>)
    57de:	0020      	movs	r0, r4
    57e0:	0029      	movs	r1, r5
    57e2:	f001 fd0f 	bl	7204 <__aeabi_dmul>
    57e6:	0032      	movs	r2, r6
    57e8:	9002      	str	r0, [sp, #8]
    57ea:	9103      	str	r1, [sp, #12]
    57ec:	003b      	movs	r3, r7
    57ee:	0020      	movs	r0, r4
    57f0:	0029      	movs	r1, r5
    57f2:	f001 ff87 	bl	7704 <__aeabi_dsub>
    57f6:	0002      	movs	r2, r0
    57f8:	000b      	movs	r3, r1
    57fa:	9800      	ldr	r0, [sp, #0]
    57fc:	9901      	ldr	r1, [sp, #4]
    57fe:	f001 ff81 	bl	7704 <__aeabi_dsub>
    5802:	4acb      	ldr	r2, [pc, #812]	; (5b30 <__ieee754_pow+0x9d8>)
    5804:	4bcb      	ldr	r3, [pc, #812]	; (5b34 <__ieee754_pow+0x9dc>)
    5806:	f001 fcfd 	bl	7204 <__aeabi_dmul>
    580a:	4acb      	ldr	r2, [pc, #812]	; (5b38 <__ieee754_pow+0x9e0>)
    580c:	0006      	movs	r6, r0
    580e:	000f      	movs	r7, r1
    5810:	4bca      	ldr	r3, [pc, #808]	; (5b3c <__ieee754_pow+0x9e4>)
    5812:	0020      	movs	r0, r4
    5814:	0029      	movs	r1, r5
    5816:	f001 fcf5 	bl	7204 <__aeabi_dmul>
    581a:	0002      	movs	r2, r0
    581c:	000b      	movs	r3, r1
    581e:	0030      	movs	r0, r6
    5820:	0039      	movs	r1, r7
    5822:	f000 fdab 	bl	637c <__aeabi_dadd>
    5826:	0004      	movs	r4, r0
    5828:	000d      	movs	r5, r1
    582a:	0002      	movs	r2, r0
    582c:	000b      	movs	r3, r1
    582e:	9802      	ldr	r0, [sp, #8]
    5830:	9903      	ldr	r1, [sp, #12]
    5832:	f000 fda3 	bl	637c <__aeabi_dadd>
    5836:	9a02      	ldr	r2, [sp, #8]
    5838:	9b03      	ldr	r3, [sp, #12]
    583a:	0006      	movs	r6, r0
    583c:	000f      	movs	r7, r1
    583e:	f001 ff61 	bl	7704 <__aeabi_dsub>
    5842:	0002      	movs	r2, r0
    5844:	000b      	movs	r3, r1
    5846:	0020      	movs	r0, r4
    5848:	0029      	movs	r1, r5
    584a:	f001 ff5b 	bl	7704 <__aeabi_dsub>
    584e:	0032      	movs	r2, r6
    5850:	9000      	str	r0, [sp, #0]
    5852:	9101      	str	r1, [sp, #4]
    5854:	003b      	movs	r3, r7
    5856:	0030      	movs	r0, r6
    5858:	0039      	movs	r1, r7
    585a:	f001 fcd3 	bl	7204 <__aeabi_dmul>
    585e:	0004      	movs	r4, r0
    5860:	000d      	movs	r5, r1
    5862:	4ab7      	ldr	r2, [pc, #732]	; (5b40 <__ieee754_pow+0x9e8>)
    5864:	4bb7      	ldr	r3, [pc, #732]	; (5b44 <__ieee754_pow+0x9ec>)
    5866:	f001 fccd 	bl	7204 <__aeabi_dmul>
    586a:	4ab7      	ldr	r2, [pc, #732]	; (5b48 <__ieee754_pow+0x9f0>)
    586c:	4bb7      	ldr	r3, [pc, #732]	; (5b4c <__ieee754_pow+0x9f4>)
    586e:	f001 ff49 	bl	7704 <__aeabi_dsub>
    5872:	0022      	movs	r2, r4
    5874:	002b      	movs	r3, r5
    5876:	f001 fcc5 	bl	7204 <__aeabi_dmul>
    587a:	4ab5      	ldr	r2, [pc, #724]	; (5b50 <__ieee754_pow+0x9f8>)
    587c:	4bb5      	ldr	r3, [pc, #724]	; (5b54 <__ieee754_pow+0x9fc>)
    587e:	f000 fd7d 	bl	637c <__aeabi_dadd>
    5882:	0022      	movs	r2, r4
    5884:	002b      	movs	r3, r5
    5886:	f001 fcbd 	bl	7204 <__aeabi_dmul>
    588a:	4ab3      	ldr	r2, [pc, #716]	; (5b58 <__ieee754_pow+0xa00>)
    588c:	4bb3      	ldr	r3, [pc, #716]	; (5b5c <__ieee754_pow+0xa04>)
    588e:	f001 ff39 	bl	7704 <__aeabi_dsub>
    5892:	0022      	movs	r2, r4
    5894:	002b      	movs	r3, r5
    5896:	f001 fcb5 	bl	7204 <__aeabi_dmul>
    589a:	4ab1      	ldr	r2, [pc, #708]	; (5b60 <__ieee754_pow+0xa08>)
    589c:	4bb1      	ldr	r3, [pc, #708]	; (5b64 <__ieee754_pow+0xa0c>)
    589e:	f000 fd6d 	bl	637c <__aeabi_dadd>
    58a2:	0022      	movs	r2, r4
    58a4:	002b      	movs	r3, r5
    58a6:	f001 fcad 	bl	7204 <__aeabi_dmul>
    58aa:	0002      	movs	r2, r0
    58ac:	000b      	movs	r3, r1
    58ae:	0030      	movs	r0, r6
    58b0:	0039      	movs	r1, r7
    58b2:	f001 ff27 	bl	7704 <__aeabi_dsub>
    58b6:	0004      	movs	r4, r0
    58b8:	000d      	movs	r5, r1
    58ba:	0002      	movs	r2, r0
    58bc:	000b      	movs	r3, r1
    58be:	0030      	movs	r0, r6
    58c0:	0039      	movs	r1, r7
    58c2:	f001 fc9f 	bl	7204 <__aeabi_dmul>
    58c6:	2380      	movs	r3, #128	; 0x80
    58c8:	9002      	str	r0, [sp, #8]
    58ca:	9103      	str	r1, [sp, #12]
    58cc:	2200      	movs	r2, #0
    58ce:	05db      	lsls	r3, r3, #23
    58d0:	0020      	movs	r0, r4
    58d2:	0029      	movs	r1, r5
    58d4:	f001 ff16 	bl	7704 <__aeabi_dsub>
    58d8:	0002      	movs	r2, r0
    58da:	000b      	movs	r3, r1
    58dc:	9802      	ldr	r0, [sp, #8]
    58de:	9903      	ldr	r1, [sp, #12]
    58e0:	f001 f85c 	bl	699c <__aeabi_ddiv>
    58e4:	9a00      	ldr	r2, [sp, #0]
    58e6:	9b01      	ldr	r3, [sp, #4]
    58e8:	0004      	movs	r4, r0
    58ea:	000d      	movs	r5, r1
    58ec:	0030      	movs	r0, r6
    58ee:	0039      	movs	r1, r7
    58f0:	f001 fc88 	bl	7204 <__aeabi_dmul>
    58f4:	9a00      	ldr	r2, [sp, #0]
    58f6:	9b01      	ldr	r3, [sp, #4]
    58f8:	f000 fd40 	bl	637c <__aeabi_dadd>
    58fc:	0002      	movs	r2, r0
    58fe:	000b      	movs	r3, r1
    5900:	0020      	movs	r0, r4
    5902:	0029      	movs	r1, r5
    5904:	f001 fefe 	bl	7704 <__aeabi_dsub>
    5908:	0032      	movs	r2, r6
    590a:	003b      	movs	r3, r7
    590c:	f001 fefa 	bl	7704 <__aeabi_dsub>
    5910:	0002      	movs	r2, r0
    5912:	000b      	movs	r3, r1
    5914:	2000      	movs	r0, #0
    5916:	4994      	ldr	r1, [pc, #592]	; (5b68 <__ieee754_pow+0xa10>)
    5918:	f001 fef4 	bl	7704 <__aeabi_dsub>
    591c:	4643      	mov	r3, r8
    591e:	185b      	adds	r3, r3, r1
    5920:	151a      	asrs	r2, r3, #20
    5922:	2a00      	cmp	r2, #0
    5924:	dc00      	bgt.n	5928 <__ieee754_pow+0x7d0>
    5926:	e149      	b.n	5bbc <__ieee754_pow+0xa64>
    5928:	0019      	movs	r1, r3
    592a:	9a06      	ldr	r2, [sp, #24]
    592c:	9b07      	ldr	r3, [sp, #28]
    592e:	f001 fc69 	bl	7204 <__aeabi_dmul>
    5932:	e459      	b.n	51e8 <__ieee754_pow+0x90>
    5934:	003a      	movs	r2, r7
    5936:	0033      	movs	r3, r6
    5938:	0038      	movs	r0, r7
    593a:	0031      	movs	r1, r6
    593c:	f001 fc62 	bl	7204 <__aeabi_dmul>
    5940:	e452      	b.n	51e8 <__ieee754_pow+0x90>
    5942:	4653      	mov	r3, sl
    5944:	2b00      	cmp	r3, #0
    5946:	db00      	blt.n	594a <__ieee754_pow+0x7f2>
    5948:	e4d9      	b.n	52fe <__ieee754_pow+0x1a6>
    594a:	9c00      	ldr	r4, [sp, #0]
    594c:	9d01      	ldr	r5, [sp, #4]
    594e:	2280      	movs	r2, #128	; 0x80
    5950:	0612      	lsls	r2, r2, #24
    5952:	002b      	movs	r3, r5
    5954:	4694      	mov	ip, r2
    5956:	4463      	add	r3, ip
    5958:	0020      	movs	r0, r4
    595a:	0019      	movs	r1, r3
    595c:	f7ff fc44 	bl	51e8 <__ieee754_pow+0x90>
    5960:	004b      	lsls	r3, r1, #1
    5962:	085b      	lsrs	r3, r3, #1
    5964:	469a      	mov	sl, r3
    5966:	4b81      	ldr	r3, [pc, #516]	; (5b6c <__ieee754_pow+0xa14>)
    5968:	459a      	cmp	sl, r3
    596a:	dc00      	bgt.n	596e <__ieee754_pow+0x816>
    596c:	e0b1      	b.n	5ad2 <__ieee754_pow+0x97a>
    596e:	4b80      	ldr	r3, [pc, #512]	; (5b70 <__ieee754_pow+0xa18>)
    5970:	445b      	add	r3, fp
    5972:	431a      	orrs	r2, r3
    5974:	d10c      	bne.n	5990 <__ieee754_pow+0x838>
    5976:	0032      	movs	r2, r6
    5978:	003b      	movs	r3, r7
    597a:	f001 fec3 	bl	7704 <__aeabi_dsub>
    597e:	0002      	movs	r2, r0
    5980:	000b      	movs	r3, r1
    5982:	9800      	ldr	r0, [sp, #0]
    5984:	9901      	ldr	r1, [sp, #4]
    5986:	f000 fcbb 	bl	6300 <__aeabi_dcmple>
    598a:	2800      	cmp	r0, #0
    598c:	d100      	bne.n	5990 <__ieee754_pow+0x838>
    598e:	e6ee      	b.n	576e <__ieee754_pow+0x616>
    5990:	9806      	ldr	r0, [sp, #24]
    5992:	9907      	ldr	r1, [sp, #28]
    5994:	4a77      	ldr	r2, [pc, #476]	; (5b74 <__ieee754_pow+0xa1c>)
    5996:	4b78      	ldr	r3, [pc, #480]	; (5b78 <__ieee754_pow+0xa20>)
    5998:	f001 fc34 	bl	7204 <__aeabi_dmul>
    599c:	4a75      	ldr	r2, [pc, #468]	; (5b74 <__ieee754_pow+0xa1c>)
    599e:	4b76      	ldr	r3, [pc, #472]	; (5b78 <__ieee754_pow+0xa20>)
    59a0:	f001 fc30 	bl	7204 <__aeabi_dmul>
    59a4:	f7ff fc20 	bl	51e8 <__ieee754_pow+0x90>
    59a8:	2300      	movs	r3, #0
    59aa:	4c74      	ldr	r4, [pc, #464]	; (5b7c <__ieee754_pow+0xa24>)
    59ac:	9306      	str	r3, [sp, #24]
    59ae:	9407      	str	r4, [sp, #28]
    59b0:	e652      	b.n	5658 <__ieee754_pow+0x500>
    59b2:	0002      	movs	r2, r0
    59b4:	000b      	movs	r3, r1
    59b6:	2000      	movs	r0, #0
    59b8:	496b      	ldr	r1, [pc, #428]	; (5b68 <__ieee754_pow+0xa10>)
    59ba:	f000 ffef 	bl	699c <__aeabi_ddiv>
    59be:	f7ff fc32 	bl	5226 <__ieee754_pow+0xce>
    59c2:	4653      	mov	r3, sl
    59c4:	2b00      	cmp	r3, #0
    59c6:	db00      	blt.n	59ca <__ieee754_pow+0x872>
    59c8:	e499      	b.n	52fe <__ieee754_pow+0x1a6>
    59ca:	e454      	b.n	5276 <__ieee754_pow+0x11e>
    59cc:	4b6c      	ldr	r3, [pc, #432]	; (5b80 <__ieee754_pow+0xa28>)
    59ce:	429c      	cmp	r4, r3
    59d0:	ddf7      	ble.n	59c2 <__ieee754_pow+0x86a>
    59d2:	4b65      	ldr	r3, [pc, #404]	; (5b68 <__ieee754_pow+0xa10>)
    59d4:	429c      	cmp	r4, r3
    59d6:	dd00      	ble.n	59da <__ieee754_pow+0x882>
    59d8:	e44a      	b.n	5270 <__ieee754_pow+0x118>
    59da:	2200      	movs	r2, #0
    59dc:	4b62      	ldr	r3, [pc, #392]	; (5b68 <__ieee754_pow+0xa10>)
    59de:	f001 fe91 	bl	7704 <__aeabi_dsub>
    59e2:	22c0      	movs	r2, #192	; 0xc0
    59e4:	4b67      	ldr	r3, [pc, #412]	; (5b84 <__ieee754_pow+0xa2c>)
    59e6:	05d2      	lsls	r2, r2, #23
    59e8:	0004      	movs	r4, r0
    59ea:	000d      	movs	r5, r1
    59ec:	f001 fc0a 	bl	7204 <__aeabi_dmul>
    59f0:	4a65      	ldr	r2, [pc, #404]	; (5b88 <__ieee754_pow+0xa30>)
    59f2:	0006      	movs	r6, r0
    59f4:	000f      	movs	r7, r1
    59f6:	4b65      	ldr	r3, [pc, #404]	; (5b8c <__ieee754_pow+0xa34>)
    59f8:	0020      	movs	r0, r4
    59fa:	0029      	movs	r1, r5
    59fc:	f001 fc02 	bl	7204 <__aeabi_dmul>
    5a00:	2200      	movs	r2, #0
    5a02:	9002      	str	r0, [sp, #8]
    5a04:	9103      	str	r1, [sp, #12]
    5a06:	4b62      	ldr	r3, [pc, #392]	; (5b90 <__ieee754_pow+0xa38>)
    5a08:	0020      	movs	r0, r4
    5a0a:	0029      	movs	r1, r5
    5a0c:	f001 fbfa 	bl	7204 <__aeabi_dmul>
    5a10:	0002      	movs	r2, r0
    5a12:	000b      	movs	r3, r1
    5a14:	485f      	ldr	r0, [pc, #380]	; (5b94 <__ieee754_pow+0xa3c>)
    5a16:	4960      	ldr	r1, [pc, #384]	; (5b98 <__ieee754_pow+0xa40>)
    5a18:	f001 fe74 	bl	7704 <__aeabi_dsub>
    5a1c:	0022      	movs	r2, r4
    5a1e:	002b      	movs	r3, r5
    5a20:	f001 fbf0 	bl	7204 <__aeabi_dmul>
    5a24:	0002      	movs	r2, r0
    5a26:	000b      	movs	r3, r1
    5a28:	2000      	movs	r0, #0
    5a2a:	495c      	ldr	r1, [pc, #368]	; (5b9c <__ieee754_pow+0xa44>)
    5a2c:	f001 fe6a 	bl	7704 <__aeabi_dsub>
    5a30:	0022      	movs	r2, r4
    5a32:	9004      	str	r0, [sp, #16]
    5a34:	9105      	str	r1, [sp, #20]
    5a36:	002b      	movs	r3, r5
    5a38:	0020      	movs	r0, r4
    5a3a:	0029      	movs	r1, r5
    5a3c:	f001 fbe2 	bl	7204 <__aeabi_dmul>
    5a40:	0002      	movs	r2, r0
    5a42:	000b      	movs	r3, r1
    5a44:	9804      	ldr	r0, [sp, #16]
    5a46:	9905      	ldr	r1, [sp, #20]
    5a48:	f001 fbdc 	bl	7204 <__aeabi_dmul>
    5a4c:	4a54      	ldr	r2, [pc, #336]	; (5ba0 <__ieee754_pow+0xa48>)
    5a4e:	4b4d      	ldr	r3, [pc, #308]	; (5b84 <__ieee754_pow+0xa2c>)
    5a50:	f001 fbd8 	bl	7204 <__aeabi_dmul>
    5a54:	0002      	movs	r2, r0
    5a56:	000b      	movs	r3, r1
    5a58:	9802      	ldr	r0, [sp, #8]
    5a5a:	9903      	ldr	r1, [sp, #12]
    5a5c:	f001 fe52 	bl	7704 <__aeabi_dsub>
    5a60:	0002      	movs	r2, r0
    5a62:	000b      	movs	r3, r1
    5a64:	0004      	movs	r4, r0
    5a66:	000d      	movs	r5, r1
    5a68:	0030      	movs	r0, r6
    5a6a:	0039      	movs	r1, r7
    5a6c:	f000 fc86 	bl	637c <__aeabi_dadd>
    5a70:	2000      	movs	r0, #0
    5a72:	0032      	movs	r2, r6
    5a74:	003b      	movs	r3, r7
    5a76:	9002      	str	r0, [sp, #8]
    5a78:	9103      	str	r1, [sp, #12]
    5a7a:	f001 fe43 	bl	7704 <__aeabi_dsub>
    5a7e:	0002      	movs	r2, r0
    5a80:	000b      	movs	r3, r1
    5a82:	0020      	movs	r0, r4
    5a84:	0029      	movs	r1, r5
    5a86:	f001 fe3d 	bl	7704 <__aeabi_dsub>
    5a8a:	9004      	str	r0, [sp, #16]
    5a8c:	9105      	str	r1, [sp, #20]
    5a8e:	e5d9      	b.n	5644 <__ieee754_pow+0x4ec>
    5a90:	4a44      	ldr	r2, [pc, #272]	; (5ba4 <__ieee754_pow+0xa4c>)
    5a92:	4b45      	ldr	r3, [pc, #276]	; (5ba8 <__ieee754_pow+0xa50>)
    5a94:	9806      	ldr	r0, [sp, #24]
    5a96:	9907      	ldr	r1, [sp, #28]
    5a98:	f001 fbb4 	bl	7204 <__aeabi_dmul>
    5a9c:	4a41      	ldr	r2, [pc, #260]	; (5ba4 <__ieee754_pow+0xa4c>)
    5a9e:	4b42      	ldr	r3, [pc, #264]	; (5ba8 <__ieee754_pow+0xa50>)
    5aa0:	f001 fbb0 	bl	7204 <__aeabi_dmul>
    5aa4:	f7ff fba0 	bl	51e8 <__ieee754_pow+0x90>
    5aa8:	2a00      	cmp	r2, #0
    5aaa:	d001      	beq.n	5ab0 <__ieee754_pow+0x958>
    5aac:	f7ff fba9 	bl	5202 <__ieee754_pow+0xaa>
    5ab0:	3214      	adds	r2, #20
    5ab2:	1ad3      	subs	r3, r2, r3
    5ab4:	002a      	movs	r2, r5
    5ab6:	411a      	asrs	r2, r3
    5ab8:	0011      	movs	r1, r2
    5aba:	4099      	lsls	r1, r3
    5abc:	428d      	cmp	r5, r1
    5abe:	d001      	beq.n	5ac4 <__ieee754_pow+0x96c>
    5ac0:	f7ff fb76 	bl	51b0 <__ieee754_pow+0x58>
    5ac4:	2301      	movs	r3, #1
    5ac6:	401a      	ands	r2, r3
    5ac8:	18db      	adds	r3, r3, r3
    5aca:	1a9b      	subs	r3, r3, r2
    5acc:	469b      	mov	fp, r3
    5ace:	f7ff fb6f 	bl	51b0 <__ieee754_pow+0x58>
    5ad2:	2200      	movs	r2, #0
    5ad4:	4b31      	ldr	r3, [pc, #196]	; (5b9c <__ieee754_pow+0xa44>)
    5ad6:	4690      	mov	r8, r2
    5ad8:	4691      	mov	r9, r2
    5ada:	459a      	cmp	sl, r3
    5adc:	dc00      	bgt.n	5ae0 <__ieee754_pow+0x988>
    5ade:	e67b      	b.n	57d8 <__ieee754_pow+0x680>
    5ae0:	e645      	b.n	576e <__ieee754_pow+0x616>
    5ae2:	0002      	movs	r2, r0
    5ae4:	000b      	movs	r3, r1
    5ae6:	f001 fe0d 	bl	7704 <__aeabi_dsub>
    5aea:	0002      	movs	r2, r0
    5aec:	000b      	movs	r3, r1
    5aee:	f000 ff55 	bl	699c <__aeabi_ddiv>
    5af2:	f7ff fb79 	bl	51e8 <__ieee754_pow+0x90>
    5af6:	2380      	movs	r3, #128	; 0x80
    5af8:	4c2c      	ldr	r4, [pc, #176]	; (5bac <__ieee754_pow+0xa54>)
    5afa:	05db      	lsls	r3, r3, #23
    5afc:	9308      	str	r3, [sp, #32]
    5afe:	9409      	str	r4, [sp, #36]	; 0x24
    5b00:	4b2b      	ldr	r3, [pc, #172]	; (5bb0 <__ieee754_pow+0xa58>)
    5b02:	4c2c      	ldr	r4, [pc, #176]	; (5bb4 <__ieee754_pow+0xa5c>)
    5b04:	2200      	movs	r2, #0
    5b06:	930c      	str	r3, [sp, #48]	; 0x30
    5b08:	940d      	str	r4, [sp, #52]	; 0x34
    5b0a:	2480      	movs	r4, #128	; 0x80
    5b0c:	4b2a      	ldr	r3, [pc, #168]	; (5bb8 <__ieee754_pow+0xa60>)
    5b0e:	02e4      	lsls	r4, r4, #11
    5b10:	9206      	str	r2, [sp, #24]
    5b12:	9307      	str	r3, [sp, #28]
    5b14:	e449      	b.n	53aa <__ieee754_pow+0x252>
    5b16:	464b      	mov	r3, r9
    5b18:	425b      	negs	r3, r3
    5b1a:	4699      	mov	r9, r3
    5b1c:	e64a      	b.n	57b4 <__ieee754_pow+0x65c>
    5b1e:	46c0      	nop			; (mov r8, r8)
    5b20:	fffffc02 	.word	0xfffffc02
    5b24:	fffffc01 	.word	0xfffffc01
    5b28:	000fffff 	.word	0x000fffff
    5b2c:	3fe62e43 	.word	0x3fe62e43
    5b30:	fefa39ef 	.word	0xfefa39ef
    5b34:	3fe62e42 	.word	0x3fe62e42
    5b38:	0ca86c39 	.word	0x0ca86c39
    5b3c:	be205c61 	.word	0xbe205c61
    5b40:	72bea4d0 	.word	0x72bea4d0
    5b44:	3e663769 	.word	0x3e663769
    5b48:	c5d26bf1 	.word	0xc5d26bf1
    5b4c:	3ebbbd41 	.word	0x3ebbbd41
    5b50:	af25de2c 	.word	0xaf25de2c
    5b54:	3f11566a 	.word	0x3f11566a
    5b58:	16bebd93 	.word	0x16bebd93
    5b5c:	3f66c16c 	.word	0x3f66c16c
    5b60:	5555553e 	.word	0x5555553e
    5b64:	3fc55555 	.word	0x3fc55555
    5b68:	3ff00000 	.word	0x3ff00000
    5b6c:	4090cbff 	.word	0x4090cbff
    5b70:	3f6f3400 	.word	0x3f6f3400
    5b74:	c2f8f359 	.word	0xc2f8f359
    5b78:	01a56e1f 	.word	0x01a56e1f
    5b7c:	bff00000 	.word	0xbff00000
    5b80:	3feffffe 	.word	0x3feffffe
    5b84:	3ff71547 	.word	0x3ff71547
    5b88:	f85ddf44 	.word	0xf85ddf44
    5b8c:	3e54ae0b 	.word	0x3e54ae0b
    5b90:	3fd00000 	.word	0x3fd00000
    5b94:	55555555 	.word	0x55555555
    5b98:	3fd55555 	.word	0x3fd55555
    5b9c:	3fe00000 	.word	0x3fe00000
    5ba0:	652b82fe 	.word	0x652b82fe
    5ba4:	8800759c 	.word	0x8800759c
    5ba8:	7e37e43c 	.word	0x7e37e43c
    5bac:	3fe2b803 	.word	0x3fe2b803
    5bb0:	43cfd006 	.word	0x43cfd006
    5bb4:	3e4cfdeb 	.word	0x3e4cfdeb
    5bb8:	3ff80000 	.word	0x3ff80000
    5bbc:	464a      	mov	r2, r9
    5bbe:	f000 f999 	bl	5ef4 <scalbn>
    5bc2:	e6b2      	b.n	592a <__ieee754_pow+0x7d2>

00005bc4 <__ieee754_sqrt>:
    5bc4:	4b6c      	ldr	r3, [pc, #432]	; (5d78 <__ieee754_sqrt+0x1b4>)
    5bc6:	b5f0      	push	{r4, r5, r6, r7, lr}
    5bc8:	000a      	movs	r2, r1
    5bca:	4646      	mov	r6, r8
    5bcc:	000d      	movs	r5, r1
    5bce:	46d6      	mov	lr, sl
    5bd0:	464f      	mov	r7, r9
    5bd2:	0019      	movs	r1, r3
    5bd4:	b5c0      	push	{r6, r7, lr}
    5bd6:	0004      	movs	r4, r0
    5bd8:	0006      	movs	r6, r0
    5bda:	4029      	ands	r1, r5
    5bdc:	4299      	cmp	r1, r3
    5bde:	d100      	bne.n	5be2 <__ieee754_sqrt+0x1e>
    5be0:	e0a7      	b.n	5d32 <__ieee754_sqrt+0x16e>
    5be2:	2d00      	cmp	r5, #0
    5be4:	dc00      	bgt.n	5be8 <__ieee754_sqrt+0x24>
    5be6:	e081      	b.n	5cec <__ieee754_sqrt+0x128>
    5be8:	152f      	asrs	r7, r5, #20
    5bea:	d100      	bne.n	5bee <__ieee754_sqrt+0x2a>
    5bec:	e08e      	b.n	5d0c <__ieee754_sqrt+0x148>
    5bee:	4b63      	ldr	r3, [pc, #396]	; (5d7c <__ieee754_sqrt+0x1b8>)
    5bf0:	0312      	lsls	r2, r2, #12
    5bf2:	469c      	mov	ip, r3
    5bf4:	2380      	movs	r3, #128	; 0x80
    5bf6:	0b12      	lsrs	r2, r2, #12
    5bf8:	035b      	lsls	r3, r3, #13
    5bfa:	4467      	add	r7, ip
    5bfc:	431a      	orrs	r2, r3
    5bfe:	07fb      	lsls	r3, r7, #31
    5c00:	d468      	bmi.n	5cd4 <__ieee754_sqrt+0x110>
    5c02:	107b      	asrs	r3, r7, #1
    5c04:	469c      	mov	ip, r3
    5c06:	0fe3      	lsrs	r3, r4, #31
    5c08:	189b      	adds	r3, r3, r2
    5c0a:	189b      	adds	r3, r3, r2
    5c0c:	2280      	movs	r2, #128	; 0x80
    5c0e:	2116      	movs	r1, #22
    5c10:	2600      	movs	r6, #0
    5c12:	2500      	movs	r5, #0
    5c14:	0064      	lsls	r4, r4, #1
    5c16:	0392      	lsls	r2, r2, #14
    5c18:	18a8      	adds	r0, r5, r2
    5c1a:	4298      	cmp	r0, r3
    5c1c:	dc02      	bgt.n	5c24 <__ieee754_sqrt+0x60>
    5c1e:	1885      	adds	r5, r0, r2
    5c20:	1a1b      	subs	r3, r3, r0
    5c22:	18b6      	adds	r6, r6, r2
    5c24:	0fe0      	lsrs	r0, r4, #31
    5c26:	005b      	lsls	r3, r3, #1
    5c28:	3901      	subs	r1, #1
    5c2a:	181b      	adds	r3, r3, r0
    5c2c:	0064      	lsls	r4, r4, #1
    5c2e:	0852      	lsrs	r2, r2, #1
    5c30:	2900      	cmp	r1, #0
    5c32:	d1f1      	bne.n	5c18 <__ieee754_sqrt+0x54>
    5c34:	2200      	movs	r2, #0
    5c36:	4692      	mov	sl, r2
    5c38:	4690      	mov	r8, r2
    5c3a:	2280      	movs	r2, #128	; 0x80
    5c3c:	2020      	movs	r0, #32
    5c3e:	0612      	lsls	r2, r2, #24
    5c40:	e009      	b.n	5c56 <__ieee754_sqrt+0x92>
    5c42:	42ab      	cmp	r3, r5
    5c44:	d038      	beq.n	5cb8 <__ieee754_sqrt+0xf4>
    5c46:	0fe1      	lsrs	r1, r4, #31
    5c48:	18c9      	adds	r1, r1, r3
    5c4a:	3801      	subs	r0, #1
    5c4c:	18cb      	adds	r3, r1, r3
    5c4e:	0064      	lsls	r4, r4, #1
    5c50:	0852      	lsrs	r2, r2, #1
    5c52:	2800      	cmp	r0, #0
    5c54:	d018      	beq.n	5c88 <__ieee754_sqrt+0xc4>
    5c56:	4641      	mov	r1, r8
    5c58:	1851      	adds	r1, r2, r1
    5c5a:	42ab      	cmp	r3, r5
    5c5c:	ddf1      	ble.n	5c42 <__ieee754_sqrt+0x7e>
    5c5e:	188f      	adds	r7, r1, r2
    5c60:	46b8      	mov	r8, r7
    5c62:	46a9      	mov	r9, r5
    5c64:	2900      	cmp	r1, #0
    5c66:	db30      	blt.n	5cca <__ieee754_sqrt+0x106>
    5c68:	1b5b      	subs	r3, r3, r5
    5c6a:	428c      	cmp	r4, r1
    5c6c:	41ad      	sbcs	r5, r5
    5c6e:	426d      	negs	r5, r5
    5c70:	1b5b      	subs	r3, r3, r5
    5c72:	1a64      	subs	r4, r4, r1
    5c74:	0fe1      	lsrs	r1, r4, #31
    5c76:	18c9      	adds	r1, r1, r3
    5c78:	3801      	subs	r0, #1
    5c7a:	4492      	add	sl, r2
    5c7c:	464d      	mov	r5, r9
    5c7e:	18cb      	adds	r3, r1, r3
    5c80:	0064      	lsls	r4, r4, #1
    5c82:	0852      	lsrs	r2, r2, #1
    5c84:	2800      	cmp	r0, #0
    5c86:	d1e6      	bne.n	5c56 <__ieee754_sqrt+0x92>
    5c88:	4323      	orrs	r3, r4
    5c8a:	d128      	bne.n	5cde <__ieee754_sqrt+0x11a>
    5c8c:	4653      	mov	r3, sl
    5c8e:	085b      	lsrs	r3, r3, #1
    5c90:	493b      	ldr	r1, [pc, #236]	; (5d80 <__ieee754_sqrt+0x1bc>)
    5c92:	1072      	asrs	r2, r6, #1
    5c94:	4688      	mov	r8, r1
    5c96:	4442      	add	r2, r8
    5c98:	07f1      	lsls	r1, r6, #31
    5c9a:	d502      	bpl.n	5ca2 <__ieee754_sqrt+0xde>
    5c9c:	2180      	movs	r1, #128	; 0x80
    5c9e:	0609      	lsls	r1, r1, #24
    5ca0:	430b      	orrs	r3, r1
    5ca2:	4661      	mov	r1, ip
    5ca4:	001e      	movs	r6, r3
    5ca6:	050f      	lsls	r7, r1, #20
    5ca8:	18bd      	adds	r5, r7, r2
    5caa:	0030      	movs	r0, r6
    5cac:	0029      	movs	r1, r5
    5cae:	bc1c      	pop	{r2, r3, r4}
    5cb0:	4690      	mov	r8, r2
    5cb2:	4699      	mov	r9, r3
    5cb4:	46a2      	mov	sl, r4
    5cb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5cb8:	42a1      	cmp	r1, r4
    5cba:	d8c4      	bhi.n	5c46 <__ieee754_sqrt+0x82>
    5cbc:	188f      	adds	r7, r1, r2
    5cbe:	46b8      	mov	r8, r7
    5cc0:	2900      	cmp	r1, #0
    5cc2:	db42      	blt.n	5d4a <__ieee754_sqrt+0x186>
    5cc4:	4699      	mov	r9, r3
    5cc6:	2300      	movs	r3, #0
    5cc8:	e7d3      	b.n	5c72 <__ieee754_sqrt+0xae>
    5cca:	2f00      	cmp	r7, #0
    5ccc:	db2f      	blt.n	5d2e <__ieee754_sqrt+0x16a>
    5cce:	1c6f      	adds	r7, r5, #1
    5cd0:	46b9      	mov	r9, r7
    5cd2:	e7c9      	b.n	5c68 <__ieee754_sqrt+0xa4>
    5cd4:	0fe1      	lsrs	r1, r4, #31
    5cd6:	0052      	lsls	r2, r2, #1
    5cd8:	188a      	adds	r2, r1, r2
    5cda:	0064      	lsls	r4, r4, #1
    5cdc:	e791      	b.n	5c02 <__ieee754_sqrt+0x3e>
    5cde:	4653      	mov	r3, sl
    5ce0:	3301      	adds	r3, #1
    5ce2:	d035      	beq.n	5d50 <__ieee754_sqrt+0x18c>
    5ce4:	4653      	mov	r3, sl
    5ce6:	3301      	adds	r3, #1
    5ce8:	085b      	lsrs	r3, r3, #1
    5cea:	e7d1      	b.n	5c90 <__ieee754_sqrt+0xcc>
    5cec:	006b      	lsls	r3, r5, #1
    5cee:	085b      	lsrs	r3, r3, #1
    5cf0:	4303      	orrs	r3, r0
    5cf2:	d0da      	beq.n	5caa <__ieee754_sqrt+0xe6>
    5cf4:	2700      	movs	r7, #0
    5cf6:	2d00      	cmp	r5, #0
    5cf8:	d132      	bne.n	5d60 <__ieee754_sqrt+0x19c>
    5cfa:	0ae2      	lsrs	r2, r4, #11
    5cfc:	3f15      	subs	r7, #21
    5cfe:	0564      	lsls	r4, r4, #21
    5d00:	2a00      	cmp	r2, #0
    5d02:	d0fa      	beq.n	5cfa <__ieee754_sqrt+0x136>
    5d04:	2380      	movs	r3, #128	; 0x80
    5d06:	035b      	lsls	r3, r3, #13
    5d08:	421a      	tst	r2, r3
    5d0a:	d124      	bne.n	5d56 <__ieee754_sqrt+0x192>
    5d0c:	2080      	movs	r0, #128	; 0x80
    5d0e:	2300      	movs	r3, #0
    5d10:	0340      	lsls	r0, r0, #13
    5d12:	e000      	b.n	5d16 <__ieee754_sqrt+0x152>
    5d14:	000b      	movs	r3, r1
    5d16:	0052      	lsls	r2, r2, #1
    5d18:	1c59      	adds	r1, r3, #1
    5d1a:	4202      	tst	r2, r0
    5d1c:	d0fa      	beq.n	5d14 <__ieee754_sqrt+0x150>
    5d1e:	2020      	movs	r0, #32
    5d20:	1a40      	subs	r0, r0, r1
    5d22:	1aff      	subs	r7, r7, r3
    5d24:	0023      	movs	r3, r4
    5d26:	40c3      	lsrs	r3, r0
    5d28:	408c      	lsls	r4, r1
    5d2a:	431a      	orrs	r2, r3
    5d2c:	e75f      	b.n	5bee <__ieee754_sqrt+0x2a>
    5d2e:	46a9      	mov	r9, r5
    5d30:	e79a      	b.n	5c68 <__ieee754_sqrt+0xa4>
    5d32:	002b      	movs	r3, r5
    5d34:	0002      	movs	r2, r0
    5d36:	0029      	movs	r1, r5
    5d38:	f001 fa64 	bl	7204 <__aeabi_dmul>
    5d3c:	0032      	movs	r2, r6
    5d3e:	002b      	movs	r3, r5
    5d40:	f000 fb1c 	bl	637c <__aeabi_dadd>
    5d44:	0006      	movs	r6, r0
    5d46:	000d      	movs	r5, r1
    5d48:	e7af      	b.n	5caa <__ieee754_sqrt+0xe6>
    5d4a:	2f00      	cmp	r7, #0
    5d4c:	dabf      	bge.n	5cce <__ieee754_sqrt+0x10a>
    5d4e:	e7b9      	b.n	5cc4 <__ieee754_sqrt+0x100>
    5d50:	3601      	adds	r6, #1
    5d52:	2300      	movs	r3, #0
    5d54:	e79c      	b.n	5c90 <__ieee754_sqrt+0xcc>
    5d56:	2301      	movs	r3, #1
    5d58:	2100      	movs	r1, #0
    5d5a:	2020      	movs	r0, #32
    5d5c:	425b      	negs	r3, r3
    5d5e:	e7e0      	b.n	5d22 <__ieee754_sqrt+0x15e>
    5d60:	002b      	movs	r3, r5
    5d62:	0002      	movs	r2, r0
    5d64:	0029      	movs	r1, r5
    5d66:	f001 fccd 	bl	7704 <__aeabi_dsub>
    5d6a:	0002      	movs	r2, r0
    5d6c:	000b      	movs	r3, r1
    5d6e:	f000 fe15 	bl	699c <__aeabi_ddiv>
    5d72:	0006      	movs	r6, r0
    5d74:	000d      	movs	r5, r1
    5d76:	e798      	b.n	5caa <__ieee754_sqrt+0xe6>
    5d78:	7ff00000 	.word	0x7ff00000
    5d7c:	fffffc01 	.word	0xfffffc01
    5d80:	3fe00000 	.word	0x3fe00000

00005d84 <fabs>:
    5d84:	0049      	lsls	r1, r1, #1
    5d86:	084b      	lsrs	r3, r1, #1
    5d88:	0019      	movs	r1, r3
    5d8a:	4770      	bx	lr

00005d8c <finite>:
    5d8c:	4b03      	ldr	r3, [pc, #12]	; (5d9c <finite+0x10>)
    5d8e:	0048      	lsls	r0, r1, #1
    5d90:	469c      	mov	ip, r3
    5d92:	0840      	lsrs	r0, r0, #1
    5d94:	4460      	add	r0, ip
    5d96:	0fc0      	lsrs	r0, r0, #31
    5d98:	4770      	bx	lr
    5d9a:	46c0      	nop			; (mov r8, r8)
    5d9c:	80100000 	.word	0x80100000

00005da0 <matherr>:
    5da0:	2000      	movs	r0, #0
    5da2:	4770      	bx	lr

00005da4 <nan>:
    5da4:	2000      	movs	r0, #0
    5da6:	4901      	ldr	r1, [pc, #4]	; (5dac <nan+0x8>)
    5da8:	4770      	bx	lr
    5daa:	46c0      	nop			; (mov r8, r8)
    5dac:	7ff80000 	.word	0x7ff80000

00005db0 <rint>:
    5db0:	b5f0      	push	{r4, r5, r6, r7, lr}
    5db2:	46c6      	mov	lr, r8
    5db4:	b500      	push	{lr}
    5db6:	0fcb      	lsrs	r3, r1, #31
    5db8:	4698      	mov	r8, r3
    5dba:	4c4a      	ldr	r4, [pc, #296]	; (5ee4 <rint+0x134>)
    5dbc:	004b      	lsls	r3, r1, #1
    5dbe:	0d5b      	lsrs	r3, r3, #21
    5dc0:	191e      	adds	r6, r3, r4
    5dc2:	b082      	sub	sp, #8
    5dc4:	0007      	movs	r7, r0
    5dc6:	000a      	movs	r2, r1
    5dc8:	2e13      	cmp	r6, #19
    5dca:	dc35      	bgt.n	5e38 <rint+0x88>
    5dcc:	2e00      	cmp	r6, #0
    5dce:	db57      	blt.n	5e80 <rint+0xd0>
    5dd0:	4b45      	ldr	r3, [pc, #276]	; (5ee8 <rint+0x138>)
    5dd2:	0004      	movs	r4, r0
    5dd4:	4133      	asrs	r3, r6
    5dd6:	001f      	movs	r7, r3
    5dd8:	400f      	ands	r7, r1
    5dda:	4307      	orrs	r7, r0
    5ddc:	000d      	movs	r5, r1
    5dde:	2f00      	cmp	r7, #0
    5de0:	d024      	beq.n	5e2c <rint+0x7c>
    5de2:	085b      	lsrs	r3, r3, #1
    5de4:	001c      	movs	r4, r3
    5de6:	400c      	ands	r4, r1
    5de8:	4320      	orrs	r0, r4
    5dea:	2700      	movs	r7, #0
    5dec:	2800      	cmp	r0, #0
    5dee:	d007      	beq.n	5e00 <rint+0x50>
    5df0:	2e13      	cmp	r6, #19
    5df2:	d100      	bne.n	5df6 <rint+0x46>
    5df4:	e073      	b.n	5ede <rint+0x12e>
    5df6:	2280      	movs	r2, #128	; 0x80
    5df8:	02d2      	lsls	r2, r2, #11
    5dfa:	4132      	asrs	r2, r6
    5dfc:	4399      	bics	r1, r3
    5dfe:	430a      	orrs	r2, r1
    5e00:	4643      	mov	r3, r8
    5e02:	00de      	lsls	r6, r3, #3
    5e04:	4b39      	ldr	r3, [pc, #228]	; (5eec <rint+0x13c>)
    5e06:	0011      	movs	r1, r2
    5e08:	199e      	adds	r6, r3, r6
    5e0a:	6834      	ldr	r4, [r6, #0]
    5e0c:	6875      	ldr	r5, [r6, #4]
    5e0e:	0038      	movs	r0, r7
    5e10:	0022      	movs	r2, r4
    5e12:	002b      	movs	r3, r5
    5e14:	f000 fab2 	bl	637c <__aeabi_dadd>
    5e18:	9000      	str	r0, [sp, #0]
    5e1a:	9101      	str	r1, [sp, #4]
    5e1c:	9800      	ldr	r0, [sp, #0]
    5e1e:	9901      	ldr	r1, [sp, #4]
    5e20:	0022      	movs	r2, r4
    5e22:	002b      	movs	r3, r5
    5e24:	f001 fc6e 	bl	7704 <__aeabi_dsub>
    5e28:	0004      	movs	r4, r0
    5e2a:	000d      	movs	r5, r1
    5e2c:	0020      	movs	r0, r4
    5e2e:	0029      	movs	r1, r5
    5e30:	b002      	add	sp, #8
    5e32:	bc04      	pop	{r2}
    5e34:	4690      	mov	r8, r2
    5e36:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5e38:	2e33      	cmp	r6, #51	; 0x33
    5e3a:	dd0c      	ble.n	5e56 <rint+0xa6>
    5e3c:	2380      	movs	r3, #128	; 0x80
    5e3e:	0004      	movs	r4, r0
    5e40:	00db      	lsls	r3, r3, #3
    5e42:	000d      	movs	r5, r1
    5e44:	429e      	cmp	r6, r3
    5e46:	d1f1      	bne.n	5e2c <rint+0x7c>
    5e48:	0002      	movs	r2, r0
    5e4a:	000b      	movs	r3, r1
    5e4c:	f000 fa96 	bl	637c <__aeabi_dadd>
    5e50:	0004      	movs	r4, r0
    5e52:	000d      	movs	r5, r1
    5e54:	e7ea      	b.n	5e2c <rint+0x7c>
    5e56:	4c26      	ldr	r4, [pc, #152]	; (5ef0 <rint+0x140>)
    5e58:	000d      	movs	r5, r1
    5e5a:	46a4      	mov	ip, r4
    5e5c:	2401      	movs	r4, #1
    5e5e:	4463      	add	r3, ip
    5e60:	4264      	negs	r4, r4
    5e62:	40dc      	lsrs	r4, r3
    5e64:	46a4      	mov	ip, r4
    5e66:	4661      	mov	r1, ip
    5e68:	0004      	movs	r4, r0
    5e6a:	4201      	tst	r1, r0
    5e6c:	d0de      	beq.n	5e2c <rint+0x7c>
    5e6e:	0849      	lsrs	r1, r1, #1
    5e70:	4201      	tst	r1, r0
    5e72:	d0c5      	beq.n	5e00 <rint+0x50>
    5e74:	2780      	movs	r7, #128	; 0x80
    5e76:	05ff      	lsls	r7, r7, #23
    5e78:	411f      	asrs	r7, r3
    5e7a:	4388      	bics	r0, r1
    5e7c:	4307      	orrs	r7, r0
    5e7e:	e7bf      	b.n	5e00 <rint+0x50>
    5e80:	004b      	lsls	r3, r1, #1
    5e82:	085b      	lsrs	r3, r3, #1
    5e84:	4303      	orrs	r3, r0
    5e86:	0004      	movs	r4, r0
    5e88:	000d      	movs	r5, r1
    5e8a:	2b00      	cmp	r3, #0
    5e8c:	d0ce      	beq.n	5e2c <rint+0x7c>
    5e8e:	030b      	lsls	r3, r1, #12
    5e90:	0b1b      	lsrs	r3, r3, #12
    5e92:	4303      	orrs	r3, r0
    5e94:	001a      	movs	r2, r3
    5e96:	425b      	negs	r3, r3
    5e98:	4313      	orrs	r3, r2
    5e9a:	2280      	movs	r2, #128	; 0x80
    5e9c:	0b1b      	lsrs	r3, r3, #12
    5e9e:	0312      	lsls	r2, r2, #12
    5ea0:	4013      	ands	r3, r2
    5ea2:	0c4a      	lsrs	r2, r1, #17
    5ea4:	0452      	lsls	r2, r2, #17
    5ea6:	4313      	orrs	r3, r2
    5ea8:	0019      	movs	r1, r3
    5eaa:	4643      	mov	r3, r8
    5eac:	00da      	lsls	r2, r3, #3
    5eae:	4b0f      	ldr	r3, [pc, #60]	; (5eec <rint+0x13c>)
    5eb0:	189b      	adds	r3, r3, r2
    5eb2:	681c      	ldr	r4, [r3, #0]
    5eb4:	685d      	ldr	r5, [r3, #4]
    5eb6:	0022      	movs	r2, r4
    5eb8:	002b      	movs	r3, r5
    5eba:	f000 fa5f 	bl	637c <__aeabi_dadd>
    5ebe:	9000      	str	r0, [sp, #0]
    5ec0:	9101      	str	r1, [sp, #4]
    5ec2:	9800      	ldr	r0, [sp, #0]
    5ec4:	9901      	ldr	r1, [sp, #4]
    5ec6:	0022      	movs	r2, r4
    5ec8:	002b      	movs	r3, r5
    5eca:	f001 fc1b 	bl	7704 <__aeabi_dsub>
    5ece:	4642      	mov	r2, r8
    5ed0:	004b      	lsls	r3, r1, #1
    5ed2:	085b      	lsrs	r3, r3, #1
    5ed4:	07d6      	lsls	r6, r2, #31
    5ed6:	4333      	orrs	r3, r6
    5ed8:	0004      	movs	r4, r0
    5eda:	001d      	movs	r5, r3
    5edc:	e7a6      	b.n	5e2c <rint+0x7c>
    5ede:	2780      	movs	r7, #128	; 0x80
    5ee0:	063f      	lsls	r7, r7, #24
    5ee2:	e788      	b.n	5df6 <rint+0x46>
    5ee4:	fffffc01 	.word	0xfffffc01
    5ee8:	000fffff 	.word	0x000fffff
    5eec:	00008b18 	.word	0x00008b18
    5ef0:	fffffbed 	.word	0xfffffbed

00005ef4 <scalbn>:
    5ef4:	004b      	lsls	r3, r1, #1
    5ef6:	b570      	push	{r4, r5, r6, lr}
    5ef8:	0d5b      	lsrs	r3, r3, #21
    5efa:	0014      	movs	r4, r2
    5efc:	000a      	movs	r2, r1
    5efe:	2b00      	cmp	r3, #0
    5f00:	d11a      	bne.n	5f38 <scalbn+0x44>
    5f02:	004b      	lsls	r3, r1, #1
    5f04:	085b      	lsrs	r3, r3, #1
    5f06:	4303      	orrs	r3, r0
    5f08:	d015      	beq.n	5f36 <scalbn+0x42>
    5f0a:	2200      	movs	r2, #0
    5f0c:	4b22      	ldr	r3, [pc, #136]	; (5f98 <scalbn+0xa4>)
    5f0e:	f001 f979 	bl	7204 <__aeabi_dmul>
    5f12:	4b22      	ldr	r3, [pc, #136]	; (5f9c <scalbn+0xa8>)
    5f14:	000a      	movs	r2, r1
    5f16:	429c      	cmp	r4, r3
    5f18:	db22      	blt.n	5f60 <scalbn+0x6c>
    5f1a:	004b      	lsls	r3, r1, #1
    5f1c:	0d5b      	lsrs	r3, r3, #21
    5f1e:	3b36      	subs	r3, #54	; 0x36
    5f20:	4d1f      	ldr	r5, [pc, #124]	; (5fa0 <scalbn+0xac>)
    5f22:	18e3      	adds	r3, r4, r3
    5f24:	42ab      	cmp	r3, r5
    5f26:	dc20      	bgt.n	5f6a <scalbn+0x76>
    5f28:	2b00      	cmp	r3, #0
    5f2a:	dd0d      	ble.n	5f48 <scalbn+0x54>
    5f2c:	4c1d      	ldr	r4, [pc, #116]	; (5fa4 <scalbn+0xb0>)
    5f2e:	051b      	lsls	r3, r3, #20
    5f30:	4022      	ands	r2, r4
    5f32:	431a      	orrs	r2, r3
    5f34:	0011      	movs	r1, r2
    5f36:	bd70      	pop	{r4, r5, r6, pc}
    5f38:	4d1b      	ldr	r5, [pc, #108]	; (5fa8 <scalbn+0xb4>)
    5f3a:	42ab      	cmp	r3, r5
    5f3c:	d1f0      	bne.n	5f20 <scalbn+0x2c>
    5f3e:	0002      	movs	r2, r0
    5f40:	000b      	movs	r3, r1
    5f42:	f000 fa1b 	bl	637c <__aeabi_dadd>
    5f46:	e7f6      	b.n	5f36 <scalbn+0x42>
    5f48:	001d      	movs	r5, r3
    5f4a:	3535      	adds	r5, #53	; 0x35
    5f4c:	da18      	bge.n	5f80 <scalbn+0x8c>
    5f4e:	4b17      	ldr	r3, [pc, #92]	; (5fac <scalbn+0xb8>)
    5f50:	0002      	movs	r2, r0
    5f52:	429c      	cmp	r4, r3
    5f54:	dc0a      	bgt.n	5f6c <scalbn+0x78>
    5f56:	000b      	movs	r3, r1
    5f58:	4815      	ldr	r0, [pc, #84]	; (5fb0 <scalbn+0xbc>)
    5f5a:	4916      	ldr	r1, [pc, #88]	; (5fb4 <scalbn+0xc0>)
    5f5c:	f000 f832 	bl	5fc4 <copysign>
    5f60:	4a13      	ldr	r2, [pc, #76]	; (5fb0 <scalbn+0xbc>)
    5f62:	4b14      	ldr	r3, [pc, #80]	; (5fb4 <scalbn+0xc0>)
    5f64:	f001 f94e 	bl	7204 <__aeabi_dmul>
    5f68:	e7e5      	b.n	5f36 <scalbn+0x42>
    5f6a:	0002      	movs	r2, r0
    5f6c:	000b      	movs	r3, r1
    5f6e:	4812      	ldr	r0, [pc, #72]	; (5fb8 <scalbn+0xc4>)
    5f70:	4912      	ldr	r1, [pc, #72]	; (5fbc <scalbn+0xc8>)
    5f72:	f000 f827 	bl	5fc4 <copysign>
    5f76:	4a10      	ldr	r2, [pc, #64]	; (5fb8 <scalbn+0xc4>)
    5f78:	4b10      	ldr	r3, [pc, #64]	; (5fbc <scalbn+0xc8>)
    5f7a:	f001 f943 	bl	7204 <__aeabi_dmul>
    5f7e:	e7da      	b.n	5f36 <scalbn+0x42>
    5f80:	4c08      	ldr	r4, [pc, #32]	; (5fa4 <scalbn+0xb0>)
    5f82:	3336      	adds	r3, #54	; 0x36
    5f84:	4022      	ands	r2, r4
    5f86:	051b      	lsls	r3, r3, #20
    5f88:	4313      	orrs	r3, r2
    5f8a:	0019      	movs	r1, r3
    5f8c:	2200      	movs	r2, #0
    5f8e:	4b0c      	ldr	r3, [pc, #48]	; (5fc0 <scalbn+0xcc>)
    5f90:	f001 f938 	bl	7204 <__aeabi_dmul>
    5f94:	e7cf      	b.n	5f36 <scalbn+0x42>
    5f96:	46c0      	nop			; (mov r8, r8)
    5f98:	43500000 	.word	0x43500000
    5f9c:	ffff3cb0 	.word	0xffff3cb0
    5fa0:	000007fe 	.word	0x000007fe
    5fa4:	800fffff 	.word	0x800fffff
    5fa8:	000007ff 	.word	0x000007ff
    5fac:	0000c350 	.word	0x0000c350
    5fb0:	c2f8f359 	.word	0xc2f8f359
    5fb4:	01a56e1f 	.word	0x01a56e1f
    5fb8:	8800759c 	.word	0x8800759c
    5fbc:	7e37e43c 	.word	0x7e37e43c
    5fc0:	3c900000 	.word	0x3c900000

00005fc4 <copysign>:
    5fc4:	b530      	push	{r4, r5, lr}
    5fc6:	004a      	lsls	r2, r1, #1
    5fc8:	0fdb      	lsrs	r3, r3, #31
    5fca:	07db      	lsls	r3, r3, #31
    5fcc:	0852      	lsrs	r2, r2, #1
    5fce:	431a      	orrs	r2, r3
    5fd0:	0011      	movs	r1, r2
    5fd2:	bd30      	pop	{r4, r5, pc}

00005fd4 <__udivsi3>:
    5fd4:	2200      	movs	r2, #0
    5fd6:	0843      	lsrs	r3, r0, #1
    5fd8:	428b      	cmp	r3, r1
    5fda:	d374      	bcc.n	60c6 <__udivsi3+0xf2>
    5fdc:	0903      	lsrs	r3, r0, #4
    5fde:	428b      	cmp	r3, r1
    5fe0:	d35f      	bcc.n	60a2 <__udivsi3+0xce>
    5fe2:	0a03      	lsrs	r3, r0, #8
    5fe4:	428b      	cmp	r3, r1
    5fe6:	d344      	bcc.n	6072 <__udivsi3+0x9e>
    5fe8:	0b03      	lsrs	r3, r0, #12
    5fea:	428b      	cmp	r3, r1
    5fec:	d328      	bcc.n	6040 <__udivsi3+0x6c>
    5fee:	0c03      	lsrs	r3, r0, #16
    5ff0:	428b      	cmp	r3, r1
    5ff2:	d30d      	bcc.n	6010 <__udivsi3+0x3c>
    5ff4:	22ff      	movs	r2, #255	; 0xff
    5ff6:	0209      	lsls	r1, r1, #8
    5ff8:	ba12      	rev	r2, r2
    5ffa:	0c03      	lsrs	r3, r0, #16
    5ffc:	428b      	cmp	r3, r1
    5ffe:	d302      	bcc.n	6006 <__udivsi3+0x32>
    6000:	1212      	asrs	r2, r2, #8
    6002:	0209      	lsls	r1, r1, #8
    6004:	d065      	beq.n	60d2 <__udivsi3+0xfe>
    6006:	0b03      	lsrs	r3, r0, #12
    6008:	428b      	cmp	r3, r1
    600a:	d319      	bcc.n	6040 <__udivsi3+0x6c>
    600c:	e000      	b.n	6010 <__udivsi3+0x3c>
    600e:	0a09      	lsrs	r1, r1, #8
    6010:	0bc3      	lsrs	r3, r0, #15
    6012:	428b      	cmp	r3, r1
    6014:	d301      	bcc.n	601a <__udivsi3+0x46>
    6016:	03cb      	lsls	r3, r1, #15
    6018:	1ac0      	subs	r0, r0, r3
    601a:	4152      	adcs	r2, r2
    601c:	0b83      	lsrs	r3, r0, #14
    601e:	428b      	cmp	r3, r1
    6020:	d301      	bcc.n	6026 <__udivsi3+0x52>
    6022:	038b      	lsls	r3, r1, #14
    6024:	1ac0      	subs	r0, r0, r3
    6026:	4152      	adcs	r2, r2
    6028:	0b43      	lsrs	r3, r0, #13
    602a:	428b      	cmp	r3, r1
    602c:	d301      	bcc.n	6032 <__udivsi3+0x5e>
    602e:	034b      	lsls	r3, r1, #13
    6030:	1ac0      	subs	r0, r0, r3
    6032:	4152      	adcs	r2, r2
    6034:	0b03      	lsrs	r3, r0, #12
    6036:	428b      	cmp	r3, r1
    6038:	d301      	bcc.n	603e <__udivsi3+0x6a>
    603a:	030b      	lsls	r3, r1, #12
    603c:	1ac0      	subs	r0, r0, r3
    603e:	4152      	adcs	r2, r2
    6040:	0ac3      	lsrs	r3, r0, #11
    6042:	428b      	cmp	r3, r1
    6044:	d301      	bcc.n	604a <__udivsi3+0x76>
    6046:	02cb      	lsls	r3, r1, #11
    6048:	1ac0      	subs	r0, r0, r3
    604a:	4152      	adcs	r2, r2
    604c:	0a83      	lsrs	r3, r0, #10
    604e:	428b      	cmp	r3, r1
    6050:	d301      	bcc.n	6056 <__udivsi3+0x82>
    6052:	028b      	lsls	r3, r1, #10
    6054:	1ac0      	subs	r0, r0, r3
    6056:	4152      	adcs	r2, r2
    6058:	0a43      	lsrs	r3, r0, #9
    605a:	428b      	cmp	r3, r1
    605c:	d301      	bcc.n	6062 <__udivsi3+0x8e>
    605e:	024b      	lsls	r3, r1, #9
    6060:	1ac0      	subs	r0, r0, r3
    6062:	4152      	adcs	r2, r2
    6064:	0a03      	lsrs	r3, r0, #8
    6066:	428b      	cmp	r3, r1
    6068:	d301      	bcc.n	606e <__udivsi3+0x9a>
    606a:	020b      	lsls	r3, r1, #8
    606c:	1ac0      	subs	r0, r0, r3
    606e:	4152      	adcs	r2, r2
    6070:	d2cd      	bcs.n	600e <__udivsi3+0x3a>
    6072:	09c3      	lsrs	r3, r0, #7
    6074:	428b      	cmp	r3, r1
    6076:	d301      	bcc.n	607c <__udivsi3+0xa8>
    6078:	01cb      	lsls	r3, r1, #7
    607a:	1ac0      	subs	r0, r0, r3
    607c:	4152      	adcs	r2, r2
    607e:	0983      	lsrs	r3, r0, #6
    6080:	428b      	cmp	r3, r1
    6082:	d301      	bcc.n	6088 <__udivsi3+0xb4>
    6084:	018b      	lsls	r3, r1, #6
    6086:	1ac0      	subs	r0, r0, r3
    6088:	4152      	adcs	r2, r2
    608a:	0943      	lsrs	r3, r0, #5
    608c:	428b      	cmp	r3, r1
    608e:	d301      	bcc.n	6094 <__udivsi3+0xc0>
    6090:	014b      	lsls	r3, r1, #5
    6092:	1ac0      	subs	r0, r0, r3
    6094:	4152      	adcs	r2, r2
    6096:	0903      	lsrs	r3, r0, #4
    6098:	428b      	cmp	r3, r1
    609a:	d301      	bcc.n	60a0 <__udivsi3+0xcc>
    609c:	010b      	lsls	r3, r1, #4
    609e:	1ac0      	subs	r0, r0, r3
    60a0:	4152      	adcs	r2, r2
    60a2:	08c3      	lsrs	r3, r0, #3
    60a4:	428b      	cmp	r3, r1
    60a6:	d301      	bcc.n	60ac <__udivsi3+0xd8>
    60a8:	00cb      	lsls	r3, r1, #3
    60aa:	1ac0      	subs	r0, r0, r3
    60ac:	4152      	adcs	r2, r2
    60ae:	0883      	lsrs	r3, r0, #2
    60b0:	428b      	cmp	r3, r1
    60b2:	d301      	bcc.n	60b8 <__udivsi3+0xe4>
    60b4:	008b      	lsls	r3, r1, #2
    60b6:	1ac0      	subs	r0, r0, r3
    60b8:	4152      	adcs	r2, r2
    60ba:	0843      	lsrs	r3, r0, #1
    60bc:	428b      	cmp	r3, r1
    60be:	d301      	bcc.n	60c4 <__udivsi3+0xf0>
    60c0:	004b      	lsls	r3, r1, #1
    60c2:	1ac0      	subs	r0, r0, r3
    60c4:	4152      	adcs	r2, r2
    60c6:	1a41      	subs	r1, r0, r1
    60c8:	d200      	bcs.n	60cc <__udivsi3+0xf8>
    60ca:	4601      	mov	r1, r0
    60cc:	4152      	adcs	r2, r2
    60ce:	4610      	mov	r0, r2
    60d0:	4770      	bx	lr
    60d2:	e7ff      	b.n	60d4 <__udivsi3+0x100>
    60d4:	b501      	push	{r0, lr}
    60d6:	2000      	movs	r0, #0
    60d8:	f000 f8f0 	bl	62bc <__aeabi_idiv0>
    60dc:	bd02      	pop	{r1, pc}
    60de:	46c0      	nop			; (mov r8, r8)

000060e0 <__aeabi_uidivmod>:
    60e0:	2900      	cmp	r1, #0
    60e2:	d0f7      	beq.n	60d4 <__udivsi3+0x100>
    60e4:	e776      	b.n	5fd4 <__udivsi3>
    60e6:	4770      	bx	lr

000060e8 <__divsi3>:
    60e8:	4603      	mov	r3, r0
    60ea:	430b      	orrs	r3, r1
    60ec:	d47f      	bmi.n	61ee <__divsi3+0x106>
    60ee:	2200      	movs	r2, #0
    60f0:	0843      	lsrs	r3, r0, #1
    60f2:	428b      	cmp	r3, r1
    60f4:	d374      	bcc.n	61e0 <__divsi3+0xf8>
    60f6:	0903      	lsrs	r3, r0, #4
    60f8:	428b      	cmp	r3, r1
    60fa:	d35f      	bcc.n	61bc <__divsi3+0xd4>
    60fc:	0a03      	lsrs	r3, r0, #8
    60fe:	428b      	cmp	r3, r1
    6100:	d344      	bcc.n	618c <__divsi3+0xa4>
    6102:	0b03      	lsrs	r3, r0, #12
    6104:	428b      	cmp	r3, r1
    6106:	d328      	bcc.n	615a <__divsi3+0x72>
    6108:	0c03      	lsrs	r3, r0, #16
    610a:	428b      	cmp	r3, r1
    610c:	d30d      	bcc.n	612a <__divsi3+0x42>
    610e:	22ff      	movs	r2, #255	; 0xff
    6110:	0209      	lsls	r1, r1, #8
    6112:	ba12      	rev	r2, r2
    6114:	0c03      	lsrs	r3, r0, #16
    6116:	428b      	cmp	r3, r1
    6118:	d302      	bcc.n	6120 <__divsi3+0x38>
    611a:	1212      	asrs	r2, r2, #8
    611c:	0209      	lsls	r1, r1, #8
    611e:	d065      	beq.n	61ec <__divsi3+0x104>
    6120:	0b03      	lsrs	r3, r0, #12
    6122:	428b      	cmp	r3, r1
    6124:	d319      	bcc.n	615a <__divsi3+0x72>
    6126:	e000      	b.n	612a <__divsi3+0x42>
    6128:	0a09      	lsrs	r1, r1, #8
    612a:	0bc3      	lsrs	r3, r0, #15
    612c:	428b      	cmp	r3, r1
    612e:	d301      	bcc.n	6134 <__divsi3+0x4c>
    6130:	03cb      	lsls	r3, r1, #15
    6132:	1ac0      	subs	r0, r0, r3
    6134:	4152      	adcs	r2, r2
    6136:	0b83      	lsrs	r3, r0, #14
    6138:	428b      	cmp	r3, r1
    613a:	d301      	bcc.n	6140 <__divsi3+0x58>
    613c:	038b      	lsls	r3, r1, #14
    613e:	1ac0      	subs	r0, r0, r3
    6140:	4152      	adcs	r2, r2
    6142:	0b43      	lsrs	r3, r0, #13
    6144:	428b      	cmp	r3, r1
    6146:	d301      	bcc.n	614c <__divsi3+0x64>
    6148:	034b      	lsls	r3, r1, #13
    614a:	1ac0      	subs	r0, r0, r3
    614c:	4152      	adcs	r2, r2
    614e:	0b03      	lsrs	r3, r0, #12
    6150:	428b      	cmp	r3, r1
    6152:	d301      	bcc.n	6158 <__divsi3+0x70>
    6154:	030b      	lsls	r3, r1, #12
    6156:	1ac0      	subs	r0, r0, r3
    6158:	4152      	adcs	r2, r2
    615a:	0ac3      	lsrs	r3, r0, #11
    615c:	428b      	cmp	r3, r1
    615e:	d301      	bcc.n	6164 <__divsi3+0x7c>
    6160:	02cb      	lsls	r3, r1, #11
    6162:	1ac0      	subs	r0, r0, r3
    6164:	4152      	adcs	r2, r2
    6166:	0a83      	lsrs	r3, r0, #10
    6168:	428b      	cmp	r3, r1
    616a:	d301      	bcc.n	6170 <__divsi3+0x88>
    616c:	028b      	lsls	r3, r1, #10
    616e:	1ac0      	subs	r0, r0, r3
    6170:	4152      	adcs	r2, r2
    6172:	0a43      	lsrs	r3, r0, #9
    6174:	428b      	cmp	r3, r1
    6176:	d301      	bcc.n	617c <__divsi3+0x94>
    6178:	024b      	lsls	r3, r1, #9
    617a:	1ac0      	subs	r0, r0, r3
    617c:	4152      	adcs	r2, r2
    617e:	0a03      	lsrs	r3, r0, #8
    6180:	428b      	cmp	r3, r1
    6182:	d301      	bcc.n	6188 <__divsi3+0xa0>
    6184:	020b      	lsls	r3, r1, #8
    6186:	1ac0      	subs	r0, r0, r3
    6188:	4152      	adcs	r2, r2
    618a:	d2cd      	bcs.n	6128 <__divsi3+0x40>
    618c:	09c3      	lsrs	r3, r0, #7
    618e:	428b      	cmp	r3, r1
    6190:	d301      	bcc.n	6196 <__divsi3+0xae>
    6192:	01cb      	lsls	r3, r1, #7
    6194:	1ac0      	subs	r0, r0, r3
    6196:	4152      	adcs	r2, r2
    6198:	0983      	lsrs	r3, r0, #6
    619a:	428b      	cmp	r3, r1
    619c:	d301      	bcc.n	61a2 <__divsi3+0xba>
    619e:	018b      	lsls	r3, r1, #6
    61a0:	1ac0      	subs	r0, r0, r3
    61a2:	4152      	adcs	r2, r2
    61a4:	0943      	lsrs	r3, r0, #5
    61a6:	428b      	cmp	r3, r1
    61a8:	d301      	bcc.n	61ae <__divsi3+0xc6>
    61aa:	014b      	lsls	r3, r1, #5
    61ac:	1ac0      	subs	r0, r0, r3
    61ae:	4152      	adcs	r2, r2
    61b0:	0903      	lsrs	r3, r0, #4
    61b2:	428b      	cmp	r3, r1
    61b4:	d301      	bcc.n	61ba <__divsi3+0xd2>
    61b6:	010b      	lsls	r3, r1, #4
    61b8:	1ac0      	subs	r0, r0, r3
    61ba:	4152      	adcs	r2, r2
    61bc:	08c3      	lsrs	r3, r0, #3
    61be:	428b      	cmp	r3, r1
    61c0:	d301      	bcc.n	61c6 <__divsi3+0xde>
    61c2:	00cb      	lsls	r3, r1, #3
    61c4:	1ac0      	subs	r0, r0, r3
    61c6:	4152      	adcs	r2, r2
    61c8:	0883      	lsrs	r3, r0, #2
    61ca:	428b      	cmp	r3, r1
    61cc:	d301      	bcc.n	61d2 <__divsi3+0xea>
    61ce:	008b      	lsls	r3, r1, #2
    61d0:	1ac0      	subs	r0, r0, r3
    61d2:	4152      	adcs	r2, r2
    61d4:	0843      	lsrs	r3, r0, #1
    61d6:	428b      	cmp	r3, r1
    61d8:	d301      	bcc.n	61de <__divsi3+0xf6>
    61da:	004b      	lsls	r3, r1, #1
    61dc:	1ac0      	subs	r0, r0, r3
    61de:	4152      	adcs	r2, r2
    61e0:	1a41      	subs	r1, r0, r1
    61e2:	d200      	bcs.n	61e6 <__divsi3+0xfe>
    61e4:	4601      	mov	r1, r0
    61e6:	4152      	adcs	r2, r2
    61e8:	4610      	mov	r0, r2
    61ea:	4770      	bx	lr
    61ec:	e05d      	b.n	62aa <__divsi3+0x1c2>
    61ee:	0fca      	lsrs	r2, r1, #31
    61f0:	d000      	beq.n	61f4 <__divsi3+0x10c>
    61f2:	4249      	negs	r1, r1
    61f4:	1003      	asrs	r3, r0, #32
    61f6:	d300      	bcc.n	61fa <__divsi3+0x112>
    61f8:	4240      	negs	r0, r0
    61fa:	4053      	eors	r3, r2
    61fc:	2200      	movs	r2, #0
    61fe:	469c      	mov	ip, r3
    6200:	0903      	lsrs	r3, r0, #4
    6202:	428b      	cmp	r3, r1
    6204:	d32d      	bcc.n	6262 <__divsi3+0x17a>
    6206:	0a03      	lsrs	r3, r0, #8
    6208:	428b      	cmp	r3, r1
    620a:	d312      	bcc.n	6232 <__divsi3+0x14a>
    620c:	22fc      	movs	r2, #252	; 0xfc
    620e:	0189      	lsls	r1, r1, #6
    6210:	ba12      	rev	r2, r2
    6212:	0a03      	lsrs	r3, r0, #8
    6214:	428b      	cmp	r3, r1
    6216:	d30c      	bcc.n	6232 <__divsi3+0x14a>
    6218:	0189      	lsls	r1, r1, #6
    621a:	1192      	asrs	r2, r2, #6
    621c:	428b      	cmp	r3, r1
    621e:	d308      	bcc.n	6232 <__divsi3+0x14a>
    6220:	0189      	lsls	r1, r1, #6
    6222:	1192      	asrs	r2, r2, #6
    6224:	428b      	cmp	r3, r1
    6226:	d304      	bcc.n	6232 <__divsi3+0x14a>
    6228:	0189      	lsls	r1, r1, #6
    622a:	d03a      	beq.n	62a2 <__divsi3+0x1ba>
    622c:	1192      	asrs	r2, r2, #6
    622e:	e000      	b.n	6232 <__divsi3+0x14a>
    6230:	0989      	lsrs	r1, r1, #6
    6232:	09c3      	lsrs	r3, r0, #7
    6234:	428b      	cmp	r3, r1
    6236:	d301      	bcc.n	623c <__divsi3+0x154>
    6238:	01cb      	lsls	r3, r1, #7
    623a:	1ac0      	subs	r0, r0, r3
    623c:	4152      	adcs	r2, r2
    623e:	0983      	lsrs	r3, r0, #6
    6240:	428b      	cmp	r3, r1
    6242:	d301      	bcc.n	6248 <__divsi3+0x160>
    6244:	018b      	lsls	r3, r1, #6
    6246:	1ac0      	subs	r0, r0, r3
    6248:	4152      	adcs	r2, r2
    624a:	0943      	lsrs	r3, r0, #5
    624c:	428b      	cmp	r3, r1
    624e:	d301      	bcc.n	6254 <__divsi3+0x16c>
    6250:	014b      	lsls	r3, r1, #5
    6252:	1ac0      	subs	r0, r0, r3
    6254:	4152      	adcs	r2, r2
    6256:	0903      	lsrs	r3, r0, #4
    6258:	428b      	cmp	r3, r1
    625a:	d301      	bcc.n	6260 <__divsi3+0x178>
    625c:	010b      	lsls	r3, r1, #4
    625e:	1ac0      	subs	r0, r0, r3
    6260:	4152      	adcs	r2, r2
    6262:	08c3      	lsrs	r3, r0, #3
    6264:	428b      	cmp	r3, r1
    6266:	d301      	bcc.n	626c <__divsi3+0x184>
    6268:	00cb      	lsls	r3, r1, #3
    626a:	1ac0      	subs	r0, r0, r3
    626c:	4152      	adcs	r2, r2
    626e:	0883      	lsrs	r3, r0, #2
    6270:	428b      	cmp	r3, r1
    6272:	d301      	bcc.n	6278 <__divsi3+0x190>
    6274:	008b      	lsls	r3, r1, #2
    6276:	1ac0      	subs	r0, r0, r3
    6278:	4152      	adcs	r2, r2
    627a:	d2d9      	bcs.n	6230 <__divsi3+0x148>
    627c:	0843      	lsrs	r3, r0, #1
    627e:	428b      	cmp	r3, r1
    6280:	d301      	bcc.n	6286 <__divsi3+0x19e>
    6282:	004b      	lsls	r3, r1, #1
    6284:	1ac0      	subs	r0, r0, r3
    6286:	4152      	adcs	r2, r2
    6288:	1a41      	subs	r1, r0, r1
    628a:	d200      	bcs.n	628e <__divsi3+0x1a6>
    628c:	4601      	mov	r1, r0
    628e:	4663      	mov	r3, ip
    6290:	4152      	adcs	r2, r2
    6292:	105b      	asrs	r3, r3, #1
    6294:	4610      	mov	r0, r2
    6296:	d301      	bcc.n	629c <__divsi3+0x1b4>
    6298:	4240      	negs	r0, r0
    629a:	2b00      	cmp	r3, #0
    629c:	d500      	bpl.n	62a0 <__divsi3+0x1b8>
    629e:	4249      	negs	r1, r1
    62a0:	4770      	bx	lr
    62a2:	4663      	mov	r3, ip
    62a4:	105b      	asrs	r3, r3, #1
    62a6:	d300      	bcc.n	62aa <__divsi3+0x1c2>
    62a8:	4240      	negs	r0, r0
    62aa:	b501      	push	{r0, lr}
    62ac:	2000      	movs	r0, #0
    62ae:	f000 f805 	bl	62bc <__aeabi_idiv0>
    62b2:	bd02      	pop	{r1, pc}

000062b4 <__aeabi_idivmod>:
    62b4:	2900      	cmp	r1, #0
    62b6:	d0f8      	beq.n	62aa <__divsi3+0x1c2>
    62b8:	e716      	b.n	60e8 <__divsi3>
    62ba:	4770      	bx	lr

000062bc <__aeabi_idiv0>:
    62bc:	4770      	bx	lr
    62be:	46c0      	nop			; (mov r8, r8)

000062c0 <__aeabi_cdrcmple>:
    62c0:	4684      	mov	ip, r0
    62c2:	1c10      	adds	r0, r2, #0
    62c4:	4662      	mov	r2, ip
    62c6:	468c      	mov	ip, r1
    62c8:	1c19      	adds	r1, r3, #0
    62ca:	4663      	mov	r3, ip
    62cc:	e000      	b.n	62d0 <__aeabi_cdcmpeq>
    62ce:	46c0      	nop			; (mov r8, r8)

000062d0 <__aeabi_cdcmpeq>:
    62d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    62d2:	f000 ff35 	bl	7140 <__ledf2>
    62d6:	2800      	cmp	r0, #0
    62d8:	d401      	bmi.n	62de <__aeabi_cdcmpeq+0xe>
    62da:	2100      	movs	r1, #0
    62dc:	42c8      	cmn	r0, r1
    62de:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

000062e0 <__aeabi_dcmpeq>:
    62e0:	b510      	push	{r4, lr}
    62e2:	f000 fe8f 	bl	7004 <__eqdf2>
    62e6:	4240      	negs	r0, r0
    62e8:	3001      	adds	r0, #1
    62ea:	bd10      	pop	{r4, pc}

000062ec <__aeabi_dcmplt>:
    62ec:	b510      	push	{r4, lr}
    62ee:	f000 ff27 	bl	7140 <__ledf2>
    62f2:	2800      	cmp	r0, #0
    62f4:	db01      	blt.n	62fa <__aeabi_dcmplt+0xe>
    62f6:	2000      	movs	r0, #0
    62f8:	bd10      	pop	{r4, pc}
    62fa:	2001      	movs	r0, #1
    62fc:	bd10      	pop	{r4, pc}
    62fe:	46c0      	nop			; (mov r8, r8)

00006300 <__aeabi_dcmple>:
    6300:	b510      	push	{r4, lr}
    6302:	f000 ff1d 	bl	7140 <__ledf2>
    6306:	2800      	cmp	r0, #0
    6308:	dd01      	ble.n	630e <__aeabi_dcmple+0xe>
    630a:	2000      	movs	r0, #0
    630c:	bd10      	pop	{r4, pc}
    630e:	2001      	movs	r0, #1
    6310:	bd10      	pop	{r4, pc}
    6312:	46c0      	nop			; (mov r8, r8)

00006314 <__aeabi_dcmpgt>:
    6314:	b510      	push	{r4, lr}
    6316:	f000 feaf 	bl	7078 <__gedf2>
    631a:	2800      	cmp	r0, #0
    631c:	dc01      	bgt.n	6322 <__aeabi_dcmpgt+0xe>
    631e:	2000      	movs	r0, #0
    6320:	bd10      	pop	{r4, pc}
    6322:	2001      	movs	r0, #1
    6324:	bd10      	pop	{r4, pc}
    6326:	46c0      	nop			; (mov r8, r8)

00006328 <__aeabi_dcmpge>:
    6328:	b510      	push	{r4, lr}
    632a:	f000 fea5 	bl	7078 <__gedf2>
    632e:	2800      	cmp	r0, #0
    6330:	da01      	bge.n	6336 <__aeabi_dcmpge+0xe>
    6332:	2000      	movs	r0, #0
    6334:	bd10      	pop	{r4, pc}
    6336:	2001      	movs	r0, #1
    6338:	bd10      	pop	{r4, pc}
    633a:	46c0      	nop			; (mov r8, r8)

0000633c <__aeabi_f2iz>:
    633c:	0241      	lsls	r1, r0, #9
    633e:	0043      	lsls	r3, r0, #1
    6340:	0fc2      	lsrs	r2, r0, #31
    6342:	0a49      	lsrs	r1, r1, #9
    6344:	0e1b      	lsrs	r3, r3, #24
    6346:	2000      	movs	r0, #0
    6348:	2b7e      	cmp	r3, #126	; 0x7e
    634a:	dd0d      	ble.n	6368 <__aeabi_f2iz+0x2c>
    634c:	2b9d      	cmp	r3, #157	; 0x9d
    634e:	dc0c      	bgt.n	636a <__aeabi_f2iz+0x2e>
    6350:	2080      	movs	r0, #128	; 0x80
    6352:	0400      	lsls	r0, r0, #16
    6354:	4301      	orrs	r1, r0
    6356:	2b95      	cmp	r3, #149	; 0x95
    6358:	dc0a      	bgt.n	6370 <__aeabi_f2iz+0x34>
    635a:	2096      	movs	r0, #150	; 0x96
    635c:	1ac3      	subs	r3, r0, r3
    635e:	40d9      	lsrs	r1, r3
    6360:	4248      	negs	r0, r1
    6362:	2a00      	cmp	r2, #0
    6364:	d100      	bne.n	6368 <__aeabi_f2iz+0x2c>
    6366:	0008      	movs	r0, r1
    6368:	4770      	bx	lr
    636a:	4b03      	ldr	r3, [pc, #12]	; (6378 <__aeabi_f2iz+0x3c>)
    636c:	18d0      	adds	r0, r2, r3
    636e:	e7fb      	b.n	6368 <__aeabi_f2iz+0x2c>
    6370:	3b96      	subs	r3, #150	; 0x96
    6372:	4099      	lsls	r1, r3
    6374:	e7f4      	b.n	6360 <__aeabi_f2iz+0x24>
    6376:	46c0      	nop			; (mov r8, r8)
    6378:	7fffffff 	.word	0x7fffffff

0000637c <__aeabi_dadd>:
    637c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    637e:	4645      	mov	r5, r8
    6380:	46de      	mov	lr, fp
    6382:	4657      	mov	r7, sl
    6384:	464e      	mov	r6, r9
    6386:	030c      	lsls	r4, r1, #12
    6388:	b5e0      	push	{r5, r6, r7, lr}
    638a:	004e      	lsls	r6, r1, #1
    638c:	0fc9      	lsrs	r1, r1, #31
    638e:	4688      	mov	r8, r1
    6390:	000d      	movs	r5, r1
    6392:	0a61      	lsrs	r1, r4, #9
    6394:	0f44      	lsrs	r4, r0, #29
    6396:	430c      	orrs	r4, r1
    6398:	00c7      	lsls	r7, r0, #3
    639a:	0319      	lsls	r1, r3, #12
    639c:	0058      	lsls	r0, r3, #1
    639e:	0fdb      	lsrs	r3, r3, #31
    63a0:	469b      	mov	fp, r3
    63a2:	0a4b      	lsrs	r3, r1, #9
    63a4:	0f51      	lsrs	r1, r2, #29
    63a6:	430b      	orrs	r3, r1
    63a8:	0d76      	lsrs	r6, r6, #21
    63aa:	0d40      	lsrs	r0, r0, #21
    63ac:	0019      	movs	r1, r3
    63ae:	00d2      	lsls	r2, r2, #3
    63b0:	45d8      	cmp	r8, fp
    63b2:	d100      	bne.n	63b6 <__aeabi_dadd+0x3a>
    63b4:	e0ae      	b.n	6514 <__aeabi_dadd+0x198>
    63b6:	1a35      	subs	r5, r6, r0
    63b8:	2d00      	cmp	r5, #0
    63ba:	dc00      	bgt.n	63be <__aeabi_dadd+0x42>
    63bc:	e0f6      	b.n	65ac <__aeabi_dadd+0x230>
    63be:	2800      	cmp	r0, #0
    63c0:	d10f      	bne.n	63e2 <__aeabi_dadd+0x66>
    63c2:	4313      	orrs	r3, r2
    63c4:	d100      	bne.n	63c8 <__aeabi_dadd+0x4c>
    63c6:	e0db      	b.n	6580 <__aeabi_dadd+0x204>
    63c8:	1e6b      	subs	r3, r5, #1
    63ca:	2b00      	cmp	r3, #0
    63cc:	d000      	beq.n	63d0 <__aeabi_dadd+0x54>
    63ce:	e137      	b.n	6640 <__aeabi_dadd+0x2c4>
    63d0:	1aba      	subs	r2, r7, r2
    63d2:	4297      	cmp	r7, r2
    63d4:	41bf      	sbcs	r7, r7
    63d6:	1a64      	subs	r4, r4, r1
    63d8:	427f      	negs	r7, r7
    63da:	1be4      	subs	r4, r4, r7
    63dc:	2601      	movs	r6, #1
    63de:	0017      	movs	r7, r2
    63e0:	e024      	b.n	642c <__aeabi_dadd+0xb0>
    63e2:	4bc6      	ldr	r3, [pc, #792]	; (66fc <__aeabi_dadd+0x380>)
    63e4:	429e      	cmp	r6, r3
    63e6:	d04d      	beq.n	6484 <__aeabi_dadd+0x108>
    63e8:	2380      	movs	r3, #128	; 0x80
    63ea:	041b      	lsls	r3, r3, #16
    63ec:	4319      	orrs	r1, r3
    63ee:	2d38      	cmp	r5, #56	; 0x38
    63f0:	dd00      	ble.n	63f4 <__aeabi_dadd+0x78>
    63f2:	e107      	b.n	6604 <__aeabi_dadd+0x288>
    63f4:	2d1f      	cmp	r5, #31
    63f6:	dd00      	ble.n	63fa <__aeabi_dadd+0x7e>
    63f8:	e138      	b.n	666c <__aeabi_dadd+0x2f0>
    63fa:	2020      	movs	r0, #32
    63fc:	1b43      	subs	r3, r0, r5
    63fe:	469a      	mov	sl, r3
    6400:	000b      	movs	r3, r1
    6402:	4650      	mov	r0, sl
    6404:	4083      	lsls	r3, r0
    6406:	4699      	mov	r9, r3
    6408:	0013      	movs	r3, r2
    640a:	4648      	mov	r0, r9
    640c:	40eb      	lsrs	r3, r5
    640e:	4318      	orrs	r0, r3
    6410:	0003      	movs	r3, r0
    6412:	4650      	mov	r0, sl
    6414:	4082      	lsls	r2, r0
    6416:	1e50      	subs	r0, r2, #1
    6418:	4182      	sbcs	r2, r0
    641a:	40e9      	lsrs	r1, r5
    641c:	431a      	orrs	r2, r3
    641e:	1aba      	subs	r2, r7, r2
    6420:	1a61      	subs	r1, r4, r1
    6422:	4297      	cmp	r7, r2
    6424:	41a4      	sbcs	r4, r4
    6426:	0017      	movs	r7, r2
    6428:	4264      	negs	r4, r4
    642a:	1b0c      	subs	r4, r1, r4
    642c:	0223      	lsls	r3, r4, #8
    642e:	d562      	bpl.n	64f6 <__aeabi_dadd+0x17a>
    6430:	0264      	lsls	r4, r4, #9
    6432:	0a65      	lsrs	r5, r4, #9
    6434:	2d00      	cmp	r5, #0
    6436:	d100      	bne.n	643a <__aeabi_dadd+0xbe>
    6438:	e0df      	b.n	65fa <__aeabi_dadd+0x27e>
    643a:	0028      	movs	r0, r5
    643c:	f001 fdee 	bl	801c <__clzsi2>
    6440:	0003      	movs	r3, r0
    6442:	3b08      	subs	r3, #8
    6444:	2b1f      	cmp	r3, #31
    6446:	dd00      	ble.n	644a <__aeabi_dadd+0xce>
    6448:	e0d2      	b.n	65f0 <__aeabi_dadd+0x274>
    644a:	2220      	movs	r2, #32
    644c:	003c      	movs	r4, r7
    644e:	1ad2      	subs	r2, r2, r3
    6450:	409d      	lsls	r5, r3
    6452:	40d4      	lsrs	r4, r2
    6454:	409f      	lsls	r7, r3
    6456:	4325      	orrs	r5, r4
    6458:	429e      	cmp	r6, r3
    645a:	dd00      	ble.n	645e <__aeabi_dadd+0xe2>
    645c:	e0c4      	b.n	65e8 <__aeabi_dadd+0x26c>
    645e:	1b9e      	subs	r6, r3, r6
    6460:	1c73      	adds	r3, r6, #1
    6462:	2b1f      	cmp	r3, #31
    6464:	dd00      	ble.n	6468 <__aeabi_dadd+0xec>
    6466:	e0f1      	b.n	664c <__aeabi_dadd+0x2d0>
    6468:	2220      	movs	r2, #32
    646a:	0038      	movs	r0, r7
    646c:	0029      	movs	r1, r5
    646e:	1ad2      	subs	r2, r2, r3
    6470:	40d8      	lsrs	r0, r3
    6472:	4091      	lsls	r1, r2
    6474:	4097      	lsls	r7, r2
    6476:	002c      	movs	r4, r5
    6478:	4301      	orrs	r1, r0
    647a:	1e78      	subs	r0, r7, #1
    647c:	4187      	sbcs	r7, r0
    647e:	40dc      	lsrs	r4, r3
    6480:	2600      	movs	r6, #0
    6482:	430f      	orrs	r7, r1
    6484:	077b      	lsls	r3, r7, #29
    6486:	d009      	beq.n	649c <__aeabi_dadd+0x120>
    6488:	230f      	movs	r3, #15
    648a:	403b      	ands	r3, r7
    648c:	2b04      	cmp	r3, #4
    648e:	d005      	beq.n	649c <__aeabi_dadd+0x120>
    6490:	1d3b      	adds	r3, r7, #4
    6492:	42bb      	cmp	r3, r7
    6494:	41bf      	sbcs	r7, r7
    6496:	427f      	negs	r7, r7
    6498:	19e4      	adds	r4, r4, r7
    649a:	001f      	movs	r7, r3
    649c:	0223      	lsls	r3, r4, #8
    649e:	d52c      	bpl.n	64fa <__aeabi_dadd+0x17e>
    64a0:	4b96      	ldr	r3, [pc, #600]	; (66fc <__aeabi_dadd+0x380>)
    64a2:	3601      	adds	r6, #1
    64a4:	429e      	cmp	r6, r3
    64a6:	d100      	bne.n	64aa <__aeabi_dadd+0x12e>
    64a8:	e09a      	b.n	65e0 <__aeabi_dadd+0x264>
    64aa:	4645      	mov	r5, r8
    64ac:	4b94      	ldr	r3, [pc, #592]	; (6700 <__aeabi_dadd+0x384>)
    64ae:	08ff      	lsrs	r7, r7, #3
    64b0:	401c      	ands	r4, r3
    64b2:	0760      	lsls	r0, r4, #29
    64b4:	0576      	lsls	r6, r6, #21
    64b6:	0264      	lsls	r4, r4, #9
    64b8:	4307      	orrs	r7, r0
    64ba:	0b24      	lsrs	r4, r4, #12
    64bc:	0d76      	lsrs	r6, r6, #21
    64be:	2100      	movs	r1, #0
    64c0:	0324      	lsls	r4, r4, #12
    64c2:	0b23      	lsrs	r3, r4, #12
    64c4:	0d0c      	lsrs	r4, r1, #20
    64c6:	4a8f      	ldr	r2, [pc, #572]	; (6704 <__aeabi_dadd+0x388>)
    64c8:	0524      	lsls	r4, r4, #20
    64ca:	431c      	orrs	r4, r3
    64cc:	4014      	ands	r4, r2
    64ce:	0533      	lsls	r3, r6, #20
    64d0:	4323      	orrs	r3, r4
    64d2:	005b      	lsls	r3, r3, #1
    64d4:	07ed      	lsls	r5, r5, #31
    64d6:	085b      	lsrs	r3, r3, #1
    64d8:	432b      	orrs	r3, r5
    64da:	0038      	movs	r0, r7
    64dc:	0019      	movs	r1, r3
    64de:	bc3c      	pop	{r2, r3, r4, r5}
    64e0:	4690      	mov	r8, r2
    64e2:	4699      	mov	r9, r3
    64e4:	46a2      	mov	sl, r4
    64e6:	46ab      	mov	fp, r5
    64e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    64ea:	4664      	mov	r4, ip
    64ec:	4304      	orrs	r4, r0
    64ee:	d100      	bne.n	64f2 <__aeabi_dadd+0x176>
    64f0:	e211      	b.n	6916 <__aeabi_dadd+0x59a>
    64f2:	0004      	movs	r4, r0
    64f4:	4667      	mov	r7, ip
    64f6:	077b      	lsls	r3, r7, #29
    64f8:	d1c6      	bne.n	6488 <__aeabi_dadd+0x10c>
    64fa:	4645      	mov	r5, r8
    64fc:	0760      	lsls	r0, r4, #29
    64fe:	08ff      	lsrs	r7, r7, #3
    6500:	4307      	orrs	r7, r0
    6502:	08e4      	lsrs	r4, r4, #3
    6504:	4b7d      	ldr	r3, [pc, #500]	; (66fc <__aeabi_dadd+0x380>)
    6506:	429e      	cmp	r6, r3
    6508:	d030      	beq.n	656c <__aeabi_dadd+0x1f0>
    650a:	0324      	lsls	r4, r4, #12
    650c:	0576      	lsls	r6, r6, #21
    650e:	0b24      	lsrs	r4, r4, #12
    6510:	0d76      	lsrs	r6, r6, #21
    6512:	e7d4      	b.n	64be <__aeabi_dadd+0x142>
    6514:	1a33      	subs	r3, r6, r0
    6516:	469a      	mov	sl, r3
    6518:	2b00      	cmp	r3, #0
    651a:	dd78      	ble.n	660e <__aeabi_dadd+0x292>
    651c:	2800      	cmp	r0, #0
    651e:	d031      	beq.n	6584 <__aeabi_dadd+0x208>
    6520:	4876      	ldr	r0, [pc, #472]	; (66fc <__aeabi_dadd+0x380>)
    6522:	4286      	cmp	r6, r0
    6524:	d0ae      	beq.n	6484 <__aeabi_dadd+0x108>
    6526:	2080      	movs	r0, #128	; 0x80
    6528:	0400      	lsls	r0, r0, #16
    652a:	4301      	orrs	r1, r0
    652c:	4653      	mov	r3, sl
    652e:	2b38      	cmp	r3, #56	; 0x38
    6530:	dc00      	bgt.n	6534 <__aeabi_dadd+0x1b8>
    6532:	e0e9      	b.n	6708 <__aeabi_dadd+0x38c>
    6534:	430a      	orrs	r2, r1
    6536:	1e51      	subs	r1, r2, #1
    6538:	418a      	sbcs	r2, r1
    653a:	2100      	movs	r1, #0
    653c:	19d2      	adds	r2, r2, r7
    653e:	42ba      	cmp	r2, r7
    6540:	41bf      	sbcs	r7, r7
    6542:	1909      	adds	r1, r1, r4
    6544:	427c      	negs	r4, r7
    6546:	0017      	movs	r7, r2
    6548:	190c      	adds	r4, r1, r4
    654a:	0223      	lsls	r3, r4, #8
    654c:	d5d3      	bpl.n	64f6 <__aeabi_dadd+0x17a>
    654e:	4b6b      	ldr	r3, [pc, #428]	; (66fc <__aeabi_dadd+0x380>)
    6550:	3601      	adds	r6, #1
    6552:	429e      	cmp	r6, r3
    6554:	d100      	bne.n	6558 <__aeabi_dadd+0x1dc>
    6556:	e13a      	b.n	67ce <__aeabi_dadd+0x452>
    6558:	2001      	movs	r0, #1
    655a:	4b69      	ldr	r3, [pc, #420]	; (6700 <__aeabi_dadd+0x384>)
    655c:	401c      	ands	r4, r3
    655e:	087b      	lsrs	r3, r7, #1
    6560:	4007      	ands	r7, r0
    6562:	431f      	orrs	r7, r3
    6564:	07e0      	lsls	r0, r4, #31
    6566:	4307      	orrs	r7, r0
    6568:	0864      	lsrs	r4, r4, #1
    656a:	e78b      	b.n	6484 <__aeabi_dadd+0x108>
    656c:	0023      	movs	r3, r4
    656e:	433b      	orrs	r3, r7
    6570:	d100      	bne.n	6574 <__aeabi_dadd+0x1f8>
    6572:	e1cb      	b.n	690c <__aeabi_dadd+0x590>
    6574:	2280      	movs	r2, #128	; 0x80
    6576:	0312      	lsls	r2, r2, #12
    6578:	4314      	orrs	r4, r2
    657a:	0324      	lsls	r4, r4, #12
    657c:	0b24      	lsrs	r4, r4, #12
    657e:	e79e      	b.n	64be <__aeabi_dadd+0x142>
    6580:	002e      	movs	r6, r5
    6582:	e77f      	b.n	6484 <__aeabi_dadd+0x108>
    6584:	0008      	movs	r0, r1
    6586:	4310      	orrs	r0, r2
    6588:	d100      	bne.n	658c <__aeabi_dadd+0x210>
    658a:	e0b4      	b.n	66f6 <__aeabi_dadd+0x37a>
    658c:	1e58      	subs	r0, r3, #1
    658e:	2800      	cmp	r0, #0
    6590:	d000      	beq.n	6594 <__aeabi_dadd+0x218>
    6592:	e0de      	b.n	6752 <__aeabi_dadd+0x3d6>
    6594:	18ba      	adds	r2, r7, r2
    6596:	42ba      	cmp	r2, r7
    6598:	419b      	sbcs	r3, r3
    659a:	1864      	adds	r4, r4, r1
    659c:	425b      	negs	r3, r3
    659e:	18e4      	adds	r4, r4, r3
    65a0:	0017      	movs	r7, r2
    65a2:	2601      	movs	r6, #1
    65a4:	0223      	lsls	r3, r4, #8
    65a6:	d5a6      	bpl.n	64f6 <__aeabi_dadd+0x17a>
    65a8:	2602      	movs	r6, #2
    65aa:	e7d5      	b.n	6558 <__aeabi_dadd+0x1dc>
    65ac:	2d00      	cmp	r5, #0
    65ae:	d16e      	bne.n	668e <__aeabi_dadd+0x312>
    65b0:	1c70      	adds	r0, r6, #1
    65b2:	0540      	lsls	r0, r0, #21
    65b4:	0d40      	lsrs	r0, r0, #21
    65b6:	2801      	cmp	r0, #1
    65b8:	dc00      	bgt.n	65bc <__aeabi_dadd+0x240>
    65ba:	e0f9      	b.n	67b0 <__aeabi_dadd+0x434>
    65bc:	1ab8      	subs	r0, r7, r2
    65be:	4684      	mov	ip, r0
    65c0:	4287      	cmp	r7, r0
    65c2:	4180      	sbcs	r0, r0
    65c4:	1ae5      	subs	r5, r4, r3
    65c6:	4240      	negs	r0, r0
    65c8:	1a2d      	subs	r5, r5, r0
    65ca:	0228      	lsls	r0, r5, #8
    65cc:	d400      	bmi.n	65d0 <__aeabi_dadd+0x254>
    65ce:	e089      	b.n	66e4 <__aeabi_dadd+0x368>
    65d0:	1bd7      	subs	r7, r2, r7
    65d2:	42ba      	cmp	r2, r7
    65d4:	4192      	sbcs	r2, r2
    65d6:	1b1c      	subs	r4, r3, r4
    65d8:	4252      	negs	r2, r2
    65da:	1aa5      	subs	r5, r4, r2
    65dc:	46d8      	mov	r8, fp
    65de:	e729      	b.n	6434 <__aeabi_dadd+0xb8>
    65e0:	4645      	mov	r5, r8
    65e2:	2400      	movs	r4, #0
    65e4:	2700      	movs	r7, #0
    65e6:	e76a      	b.n	64be <__aeabi_dadd+0x142>
    65e8:	4c45      	ldr	r4, [pc, #276]	; (6700 <__aeabi_dadd+0x384>)
    65ea:	1af6      	subs	r6, r6, r3
    65ec:	402c      	ands	r4, r5
    65ee:	e749      	b.n	6484 <__aeabi_dadd+0x108>
    65f0:	003d      	movs	r5, r7
    65f2:	3828      	subs	r0, #40	; 0x28
    65f4:	4085      	lsls	r5, r0
    65f6:	2700      	movs	r7, #0
    65f8:	e72e      	b.n	6458 <__aeabi_dadd+0xdc>
    65fa:	0038      	movs	r0, r7
    65fc:	f001 fd0e 	bl	801c <__clzsi2>
    6600:	3020      	adds	r0, #32
    6602:	e71d      	b.n	6440 <__aeabi_dadd+0xc4>
    6604:	430a      	orrs	r2, r1
    6606:	1e51      	subs	r1, r2, #1
    6608:	418a      	sbcs	r2, r1
    660a:	2100      	movs	r1, #0
    660c:	e707      	b.n	641e <__aeabi_dadd+0xa2>
    660e:	2b00      	cmp	r3, #0
    6610:	d000      	beq.n	6614 <__aeabi_dadd+0x298>
    6612:	e0f3      	b.n	67fc <__aeabi_dadd+0x480>
    6614:	1c70      	adds	r0, r6, #1
    6616:	0543      	lsls	r3, r0, #21
    6618:	0d5b      	lsrs	r3, r3, #21
    661a:	2b01      	cmp	r3, #1
    661c:	dc00      	bgt.n	6620 <__aeabi_dadd+0x2a4>
    661e:	e0ad      	b.n	677c <__aeabi_dadd+0x400>
    6620:	4b36      	ldr	r3, [pc, #216]	; (66fc <__aeabi_dadd+0x380>)
    6622:	4298      	cmp	r0, r3
    6624:	d100      	bne.n	6628 <__aeabi_dadd+0x2ac>
    6626:	e0d1      	b.n	67cc <__aeabi_dadd+0x450>
    6628:	18ba      	adds	r2, r7, r2
    662a:	42ba      	cmp	r2, r7
    662c:	41bf      	sbcs	r7, r7
    662e:	1864      	adds	r4, r4, r1
    6630:	427f      	negs	r7, r7
    6632:	19e4      	adds	r4, r4, r7
    6634:	07e7      	lsls	r7, r4, #31
    6636:	0852      	lsrs	r2, r2, #1
    6638:	4317      	orrs	r7, r2
    663a:	0864      	lsrs	r4, r4, #1
    663c:	0006      	movs	r6, r0
    663e:	e721      	b.n	6484 <__aeabi_dadd+0x108>
    6640:	482e      	ldr	r0, [pc, #184]	; (66fc <__aeabi_dadd+0x380>)
    6642:	4285      	cmp	r5, r0
    6644:	d100      	bne.n	6648 <__aeabi_dadd+0x2cc>
    6646:	e093      	b.n	6770 <__aeabi_dadd+0x3f4>
    6648:	001d      	movs	r5, r3
    664a:	e6d0      	b.n	63ee <__aeabi_dadd+0x72>
    664c:	0029      	movs	r1, r5
    664e:	3e1f      	subs	r6, #31
    6650:	40f1      	lsrs	r1, r6
    6652:	2b20      	cmp	r3, #32
    6654:	d100      	bne.n	6658 <__aeabi_dadd+0x2dc>
    6656:	e08d      	b.n	6774 <__aeabi_dadd+0x3f8>
    6658:	2240      	movs	r2, #64	; 0x40
    665a:	1ad3      	subs	r3, r2, r3
    665c:	409d      	lsls	r5, r3
    665e:	432f      	orrs	r7, r5
    6660:	1e7d      	subs	r5, r7, #1
    6662:	41af      	sbcs	r7, r5
    6664:	2400      	movs	r4, #0
    6666:	430f      	orrs	r7, r1
    6668:	2600      	movs	r6, #0
    666a:	e744      	b.n	64f6 <__aeabi_dadd+0x17a>
    666c:	002b      	movs	r3, r5
    666e:	0008      	movs	r0, r1
    6670:	3b20      	subs	r3, #32
    6672:	40d8      	lsrs	r0, r3
    6674:	0003      	movs	r3, r0
    6676:	2d20      	cmp	r5, #32
    6678:	d100      	bne.n	667c <__aeabi_dadd+0x300>
    667a:	e07d      	b.n	6778 <__aeabi_dadd+0x3fc>
    667c:	2040      	movs	r0, #64	; 0x40
    667e:	1b45      	subs	r5, r0, r5
    6680:	40a9      	lsls	r1, r5
    6682:	430a      	orrs	r2, r1
    6684:	1e51      	subs	r1, r2, #1
    6686:	418a      	sbcs	r2, r1
    6688:	2100      	movs	r1, #0
    668a:	431a      	orrs	r2, r3
    668c:	e6c7      	b.n	641e <__aeabi_dadd+0xa2>
    668e:	2e00      	cmp	r6, #0
    6690:	d050      	beq.n	6734 <__aeabi_dadd+0x3b8>
    6692:	4e1a      	ldr	r6, [pc, #104]	; (66fc <__aeabi_dadd+0x380>)
    6694:	42b0      	cmp	r0, r6
    6696:	d057      	beq.n	6748 <__aeabi_dadd+0x3cc>
    6698:	2680      	movs	r6, #128	; 0x80
    669a:	426b      	negs	r3, r5
    669c:	4699      	mov	r9, r3
    669e:	0436      	lsls	r6, r6, #16
    66a0:	4334      	orrs	r4, r6
    66a2:	464b      	mov	r3, r9
    66a4:	2b38      	cmp	r3, #56	; 0x38
    66a6:	dd00      	ble.n	66aa <__aeabi_dadd+0x32e>
    66a8:	e0d6      	b.n	6858 <__aeabi_dadd+0x4dc>
    66aa:	2b1f      	cmp	r3, #31
    66ac:	dd00      	ble.n	66b0 <__aeabi_dadd+0x334>
    66ae:	e135      	b.n	691c <__aeabi_dadd+0x5a0>
    66b0:	2620      	movs	r6, #32
    66b2:	1af5      	subs	r5, r6, r3
    66b4:	0026      	movs	r6, r4
    66b6:	40ae      	lsls	r6, r5
    66b8:	46b2      	mov	sl, r6
    66ba:	003e      	movs	r6, r7
    66bc:	40de      	lsrs	r6, r3
    66be:	46ac      	mov	ip, r5
    66c0:	0035      	movs	r5, r6
    66c2:	4656      	mov	r6, sl
    66c4:	432e      	orrs	r6, r5
    66c6:	4665      	mov	r5, ip
    66c8:	40af      	lsls	r7, r5
    66ca:	1e7d      	subs	r5, r7, #1
    66cc:	41af      	sbcs	r7, r5
    66ce:	40dc      	lsrs	r4, r3
    66d0:	4337      	orrs	r7, r6
    66d2:	1bd7      	subs	r7, r2, r7
    66d4:	42ba      	cmp	r2, r7
    66d6:	4192      	sbcs	r2, r2
    66d8:	1b0c      	subs	r4, r1, r4
    66da:	4252      	negs	r2, r2
    66dc:	1aa4      	subs	r4, r4, r2
    66de:	0006      	movs	r6, r0
    66e0:	46d8      	mov	r8, fp
    66e2:	e6a3      	b.n	642c <__aeabi_dadd+0xb0>
    66e4:	4664      	mov	r4, ip
    66e6:	4667      	mov	r7, ip
    66e8:	432c      	orrs	r4, r5
    66ea:	d000      	beq.n	66ee <__aeabi_dadd+0x372>
    66ec:	e6a2      	b.n	6434 <__aeabi_dadd+0xb8>
    66ee:	2500      	movs	r5, #0
    66f0:	2600      	movs	r6, #0
    66f2:	2700      	movs	r7, #0
    66f4:	e706      	b.n	6504 <__aeabi_dadd+0x188>
    66f6:	001e      	movs	r6, r3
    66f8:	e6c4      	b.n	6484 <__aeabi_dadd+0x108>
    66fa:	46c0      	nop			; (mov r8, r8)
    66fc:	000007ff 	.word	0x000007ff
    6700:	ff7fffff 	.word	0xff7fffff
    6704:	800fffff 	.word	0x800fffff
    6708:	2b1f      	cmp	r3, #31
    670a:	dc63      	bgt.n	67d4 <__aeabi_dadd+0x458>
    670c:	2020      	movs	r0, #32
    670e:	1ac3      	subs	r3, r0, r3
    6710:	0008      	movs	r0, r1
    6712:	4098      	lsls	r0, r3
    6714:	469c      	mov	ip, r3
    6716:	4683      	mov	fp, r0
    6718:	4653      	mov	r3, sl
    671a:	0010      	movs	r0, r2
    671c:	40d8      	lsrs	r0, r3
    671e:	0003      	movs	r3, r0
    6720:	4658      	mov	r0, fp
    6722:	4318      	orrs	r0, r3
    6724:	4663      	mov	r3, ip
    6726:	409a      	lsls	r2, r3
    6728:	1e53      	subs	r3, r2, #1
    672a:	419a      	sbcs	r2, r3
    672c:	4653      	mov	r3, sl
    672e:	4302      	orrs	r2, r0
    6730:	40d9      	lsrs	r1, r3
    6732:	e703      	b.n	653c <__aeabi_dadd+0x1c0>
    6734:	0026      	movs	r6, r4
    6736:	433e      	orrs	r6, r7
    6738:	d006      	beq.n	6748 <__aeabi_dadd+0x3cc>
    673a:	43eb      	mvns	r3, r5
    673c:	4699      	mov	r9, r3
    673e:	2b00      	cmp	r3, #0
    6740:	d0c7      	beq.n	66d2 <__aeabi_dadd+0x356>
    6742:	4e94      	ldr	r6, [pc, #592]	; (6994 <__aeabi_dadd+0x618>)
    6744:	42b0      	cmp	r0, r6
    6746:	d1ac      	bne.n	66a2 <__aeabi_dadd+0x326>
    6748:	000c      	movs	r4, r1
    674a:	0017      	movs	r7, r2
    674c:	0006      	movs	r6, r0
    674e:	46d8      	mov	r8, fp
    6750:	e698      	b.n	6484 <__aeabi_dadd+0x108>
    6752:	4b90      	ldr	r3, [pc, #576]	; (6994 <__aeabi_dadd+0x618>)
    6754:	459a      	cmp	sl, r3
    6756:	d00b      	beq.n	6770 <__aeabi_dadd+0x3f4>
    6758:	4682      	mov	sl, r0
    675a:	e6e7      	b.n	652c <__aeabi_dadd+0x1b0>
    675c:	2800      	cmp	r0, #0
    675e:	d000      	beq.n	6762 <__aeabi_dadd+0x3e6>
    6760:	e09e      	b.n	68a0 <__aeabi_dadd+0x524>
    6762:	0018      	movs	r0, r3
    6764:	4310      	orrs	r0, r2
    6766:	d100      	bne.n	676a <__aeabi_dadd+0x3ee>
    6768:	e0e9      	b.n	693e <__aeabi_dadd+0x5c2>
    676a:	001c      	movs	r4, r3
    676c:	0017      	movs	r7, r2
    676e:	46d8      	mov	r8, fp
    6770:	4e88      	ldr	r6, [pc, #544]	; (6994 <__aeabi_dadd+0x618>)
    6772:	e687      	b.n	6484 <__aeabi_dadd+0x108>
    6774:	2500      	movs	r5, #0
    6776:	e772      	b.n	665e <__aeabi_dadd+0x2e2>
    6778:	2100      	movs	r1, #0
    677a:	e782      	b.n	6682 <__aeabi_dadd+0x306>
    677c:	0023      	movs	r3, r4
    677e:	433b      	orrs	r3, r7
    6780:	2e00      	cmp	r6, #0
    6782:	d000      	beq.n	6786 <__aeabi_dadd+0x40a>
    6784:	e0ab      	b.n	68de <__aeabi_dadd+0x562>
    6786:	2b00      	cmp	r3, #0
    6788:	d100      	bne.n	678c <__aeabi_dadd+0x410>
    678a:	e0e7      	b.n	695c <__aeabi_dadd+0x5e0>
    678c:	000b      	movs	r3, r1
    678e:	4313      	orrs	r3, r2
    6790:	d100      	bne.n	6794 <__aeabi_dadd+0x418>
    6792:	e677      	b.n	6484 <__aeabi_dadd+0x108>
    6794:	18ba      	adds	r2, r7, r2
    6796:	42ba      	cmp	r2, r7
    6798:	41bf      	sbcs	r7, r7
    679a:	1864      	adds	r4, r4, r1
    679c:	427f      	negs	r7, r7
    679e:	19e4      	adds	r4, r4, r7
    67a0:	0223      	lsls	r3, r4, #8
    67a2:	d400      	bmi.n	67a6 <__aeabi_dadd+0x42a>
    67a4:	e0f2      	b.n	698c <__aeabi_dadd+0x610>
    67a6:	4b7c      	ldr	r3, [pc, #496]	; (6998 <__aeabi_dadd+0x61c>)
    67a8:	0017      	movs	r7, r2
    67aa:	401c      	ands	r4, r3
    67ac:	0006      	movs	r6, r0
    67ae:	e669      	b.n	6484 <__aeabi_dadd+0x108>
    67b0:	0020      	movs	r0, r4
    67b2:	4338      	orrs	r0, r7
    67b4:	2e00      	cmp	r6, #0
    67b6:	d1d1      	bne.n	675c <__aeabi_dadd+0x3e0>
    67b8:	2800      	cmp	r0, #0
    67ba:	d15b      	bne.n	6874 <__aeabi_dadd+0x4f8>
    67bc:	001c      	movs	r4, r3
    67be:	4314      	orrs	r4, r2
    67c0:	d100      	bne.n	67c4 <__aeabi_dadd+0x448>
    67c2:	e0a8      	b.n	6916 <__aeabi_dadd+0x59a>
    67c4:	001c      	movs	r4, r3
    67c6:	0017      	movs	r7, r2
    67c8:	46d8      	mov	r8, fp
    67ca:	e65b      	b.n	6484 <__aeabi_dadd+0x108>
    67cc:	0006      	movs	r6, r0
    67ce:	2400      	movs	r4, #0
    67d0:	2700      	movs	r7, #0
    67d2:	e697      	b.n	6504 <__aeabi_dadd+0x188>
    67d4:	4650      	mov	r0, sl
    67d6:	000b      	movs	r3, r1
    67d8:	3820      	subs	r0, #32
    67da:	40c3      	lsrs	r3, r0
    67dc:	4699      	mov	r9, r3
    67de:	4653      	mov	r3, sl
    67e0:	2b20      	cmp	r3, #32
    67e2:	d100      	bne.n	67e6 <__aeabi_dadd+0x46a>
    67e4:	e095      	b.n	6912 <__aeabi_dadd+0x596>
    67e6:	2340      	movs	r3, #64	; 0x40
    67e8:	4650      	mov	r0, sl
    67ea:	1a1b      	subs	r3, r3, r0
    67ec:	4099      	lsls	r1, r3
    67ee:	430a      	orrs	r2, r1
    67f0:	1e51      	subs	r1, r2, #1
    67f2:	418a      	sbcs	r2, r1
    67f4:	464b      	mov	r3, r9
    67f6:	2100      	movs	r1, #0
    67f8:	431a      	orrs	r2, r3
    67fa:	e69f      	b.n	653c <__aeabi_dadd+0x1c0>
    67fc:	2e00      	cmp	r6, #0
    67fe:	d130      	bne.n	6862 <__aeabi_dadd+0x4e6>
    6800:	0026      	movs	r6, r4
    6802:	433e      	orrs	r6, r7
    6804:	d067      	beq.n	68d6 <__aeabi_dadd+0x55a>
    6806:	43db      	mvns	r3, r3
    6808:	469a      	mov	sl, r3
    680a:	2b00      	cmp	r3, #0
    680c:	d01c      	beq.n	6848 <__aeabi_dadd+0x4cc>
    680e:	4e61      	ldr	r6, [pc, #388]	; (6994 <__aeabi_dadd+0x618>)
    6810:	42b0      	cmp	r0, r6
    6812:	d060      	beq.n	68d6 <__aeabi_dadd+0x55a>
    6814:	4653      	mov	r3, sl
    6816:	2b38      	cmp	r3, #56	; 0x38
    6818:	dd00      	ble.n	681c <__aeabi_dadd+0x4a0>
    681a:	e096      	b.n	694a <__aeabi_dadd+0x5ce>
    681c:	2b1f      	cmp	r3, #31
    681e:	dd00      	ble.n	6822 <__aeabi_dadd+0x4a6>
    6820:	e09f      	b.n	6962 <__aeabi_dadd+0x5e6>
    6822:	2620      	movs	r6, #32
    6824:	1af3      	subs	r3, r6, r3
    6826:	0026      	movs	r6, r4
    6828:	409e      	lsls	r6, r3
    682a:	469c      	mov	ip, r3
    682c:	46b3      	mov	fp, r6
    682e:	4653      	mov	r3, sl
    6830:	003e      	movs	r6, r7
    6832:	40de      	lsrs	r6, r3
    6834:	0033      	movs	r3, r6
    6836:	465e      	mov	r6, fp
    6838:	431e      	orrs	r6, r3
    683a:	4663      	mov	r3, ip
    683c:	409f      	lsls	r7, r3
    683e:	1e7b      	subs	r3, r7, #1
    6840:	419f      	sbcs	r7, r3
    6842:	4653      	mov	r3, sl
    6844:	40dc      	lsrs	r4, r3
    6846:	4337      	orrs	r7, r6
    6848:	18bf      	adds	r7, r7, r2
    684a:	4297      	cmp	r7, r2
    684c:	4192      	sbcs	r2, r2
    684e:	1864      	adds	r4, r4, r1
    6850:	4252      	negs	r2, r2
    6852:	18a4      	adds	r4, r4, r2
    6854:	0006      	movs	r6, r0
    6856:	e678      	b.n	654a <__aeabi_dadd+0x1ce>
    6858:	4327      	orrs	r7, r4
    685a:	1e7c      	subs	r4, r7, #1
    685c:	41a7      	sbcs	r7, r4
    685e:	2400      	movs	r4, #0
    6860:	e737      	b.n	66d2 <__aeabi_dadd+0x356>
    6862:	4e4c      	ldr	r6, [pc, #304]	; (6994 <__aeabi_dadd+0x618>)
    6864:	42b0      	cmp	r0, r6
    6866:	d036      	beq.n	68d6 <__aeabi_dadd+0x55a>
    6868:	2680      	movs	r6, #128	; 0x80
    686a:	425b      	negs	r3, r3
    686c:	0436      	lsls	r6, r6, #16
    686e:	469a      	mov	sl, r3
    6870:	4334      	orrs	r4, r6
    6872:	e7cf      	b.n	6814 <__aeabi_dadd+0x498>
    6874:	0018      	movs	r0, r3
    6876:	4310      	orrs	r0, r2
    6878:	d100      	bne.n	687c <__aeabi_dadd+0x500>
    687a:	e603      	b.n	6484 <__aeabi_dadd+0x108>
    687c:	1ab8      	subs	r0, r7, r2
    687e:	4684      	mov	ip, r0
    6880:	4567      	cmp	r7, ip
    6882:	41ad      	sbcs	r5, r5
    6884:	1ae0      	subs	r0, r4, r3
    6886:	426d      	negs	r5, r5
    6888:	1b40      	subs	r0, r0, r5
    688a:	0205      	lsls	r5, r0, #8
    688c:	d400      	bmi.n	6890 <__aeabi_dadd+0x514>
    688e:	e62c      	b.n	64ea <__aeabi_dadd+0x16e>
    6890:	1bd7      	subs	r7, r2, r7
    6892:	42ba      	cmp	r2, r7
    6894:	4192      	sbcs	r2, r2
    6896:	1b1c      	subs	r4, r3, r4
    6898:	4252      	negs	r2, r2
    689a:	1aa4      	subs	r4, r4, r2
    689c:	46d8      	mov	r8, fp
    689e:	e5f1      	b.n	6484 <__aeabi_dadd+0x108>
    68a0:	0018      	movs	r0, r3
    68a2:	4310      	orrs	r0, r2
    68a4:	d100      	bne.n	68a8 <__aeabi_dadd+0x52c>
    68a6:	e763      	b.n	6770 <__aeabi_dadd+0x3f4>
    68a8:	08f8      	lsrs	r0, r7, #3
    68aa:	0767      	lsls	r7, r4, #29
    68ac:	4307      	orrs	r7, r0
    68ae:	2080      	movs	r0, #128	; 0x80
    68b0:	08e4      	lsrs	r4, r4, #3
    68b2:	0300      	lsls	r0, r0, #12
    68b4:	4204      	tst	r4, r0
    68b6:	d008      	beq.n	68ca <__aeabi_dadd+0x54e>
    68b8:	08dd      	lsrs	r5, r3, #3
    68ba:	4205      	tst	r5, r0
    68bc:	d105      	bne.n	68ca <__aeabi_dadd+0x54e>
    68be:	08d2      	lsrs	r2, r2, #3
    68c0:	0759      	lsls	r1, r3, #29
    68c2:	4311      	orrs	r1, r2
    68c4:	000f      	movs	r7, r1
    68c6:	002c      	movs	r4, r5
    68c8:	46d8      	mov	r8, fp
    68ca:	0f7b      	lsrs	r3, r7, #29
    68cc:	00e4      	lsls	r4, r4, #3
    68ce:	431c      	orrs	r4, r3
    68d0:	00ff      	lsls	r7, r7, #3
    68d2:	4e30      	ldr	r6, [pc, #192]	; (6994 <__aeabi_dadd+0x618>)
    68d4:	e5d6      	b.n	6484 <__aeabi_dadd+0x108>
    68d6:	000c      	movs	r4, r1
    68d8:	0017      	movs	r7, r2
    68da:	0006      	movs	r6, r0
    68dc:	e5d2      	b.n	6484 <__aeabi_dadd+0x108>
    68de:	2b00      	cmp	r3, #0
    68e0:	d038      	beq.n	6954 <__aeabi_dadd+0x5d8>
    68e2:	000b      	movs	r3, r1
    68e4:	4313      	orrs	r3, r2
    68e6:	d100      	bne.n	68ea <__aeabi_dadd+0x56e>
    68e8:	e742      	b.n	6770 <__aeabi_dadd+0x3f4>
    68ea:	08f8      	lsrs	r0, r7, #3
    68ec:	0767      	lsls	r7, r4, #29
    68ee:	4307      	orrs	r7, r0
    68f0:	2080      	movs	r0, #128	; 0x80
    68f2:	08e4      	lsrs	r4, r4, #3
    68f4:	0300      	lsls	r0, r0, #12
    68f6:	4204      	tst	r4, r0
    68f8:	d0e7      	beq.n	68ca <__aeabi_dadd+0x54e>
    68fa:	08cb      	lsrs	r3, r1, #3
    68fc:	4203      	tst	r3, r0
    68fe:	d1e4      	bne.n	68ca <__aeabi_dadd+0x54e>
    6900:	08d2      	lsrs	r2, r2, #3
    6902:	0749      	lsls	r1, r1, #29
    6904:	4311      	orrs	r1, r2
    6906:	000f      	movs	r7, r1
    6908:	001c      	movs	r4, r3
    690a:	e7de      	b.n	68ca <__aeabi_dadd+0x54e>
    690c:	2700      	movs	r7, #0
    690e:	2400      	movs	r4, #0
    6910:	e5d5      	b.n	64be <__aeabi_dadd+0x142>
    6912:	2100      	movs	r1, #0
    6914:	e76b      	b.n	67ee <__aeabi_dadd+0x472>
    6916:	2500      	movs	r5, #0
    6918:	2700      	movs	r7, #0
    691a:	e5f3      	b.n	6504 <__aeabi_dadd+0x188>
    691c:	464e      	mov	r6, r9
    691e:	0025      	movs	r5, r4
    6920:	3e20      	subs	r6, #32
    6922:	40f5      	lsrs	r5, r6
    6924:	464b      	mov	r3, r9
    6926:	002e      	movs	r6, r5
    6928:	2b20      	cmp	r3, #32
    692a:	d02d      	beq.n	6988 <__aeabi_dadd+0x60c>
    692c:	2540      	movs	r5, #64	; 0x40
    692e:	1aed      	subs	r5, r5, r3
    6930:	40ac      	lsls	r4, r5
    6932:	4327      	orrs	r7, r4
    6934:	1e7c      	subs	r4, r7, #1
    6936:	41a7      	sbcs	r7, r4
    6938:	2400      	movs	r4, #0
    693a:	4337      	orrs	r7, r6
    693c:	e6c9      	b.n	66d2 <__aeabi_dadd+0x356>
    693e:	2480      	movs	r4, #128	; 0x80
    6940:	2500      	movs	r5, #0
    6942:	0324      	lsls	r4, r4, #12
    6944:	4e13      	ldr	r6, [pc, #76]	; (6994 <__aeabi_dadd+0x618>)
    6946:	2700      	movs	r7, #0
    6948:	e5dc      	b.n	6504 <__aeabi_dadd+0x188>
    694a:	4327      	orrs	r7, r4
    694c:	1e7c      	subs	r4, r7, #1
    694e:	41a7      	sbcs	r7, r4
    6950:	2400      	movs	r4, #0
    6952:	e779      	b.n	6848 <__aeabi_dadd+0x4cc>
    6954:	000c      	movs	r4, r1
    6956:	0017      	movs	r7, r2
    6958:	4e0e      	ldr	r6, [pc, #56]	; (6994 <__aeabi_dadd+0x618>)
    695a:	e593      	b.n	6484 <__aeabi_dadd+0x108>
    695c:	000c      	movs	r4, r1
    695e:	0017      	movs	r7, r2
    6960:	e590      	b.n	6484 <__aeabi_dadd+0x108>
    6962:	4656      	mov	r6, sl
    6964:	0023      	movs	r3, r4
    6966:	3e20      	subs	r6, #32
    6968:	40f3      	lsrs	r3, r6
    696a:	4699      	mov	r9, r3
    696c:	4653      	mov	r3, sl
    696e:	2b20      	cmp	r3, #32
    6970:	d00e      	beq.n	6990 <__aeabi_dadd+0x614>
    6972:	2340      	movs	r3, #64	; 0x40
    6974:	4656      	mov	r6, sl
    6976:	1b9b      	subs	r3, r3, r6
    6978:	409c      	lsls	r4, r3
    697a:	4327      	orrs	r7, r4
    697c:	1e7c      	subs	r4, r7, #1
    697e:	41a7      	sbcs	r7, r4
    6980:	464b      	mov	r3, r9
    6982:	2400      	movs	r4, #0
    6984:	431f      	orrs	r7, r3
    6986:	e75f      	b.n	6848 <__aeabi_dadd+0x4cc>
    6988:	2400      	movs	r4, #0
    698a:	e7d2      	b.n	6932 <__aeabi_dadd+0x5b6>
    698c:	0017      	movs	r7, r2
    698e:	e5b2      	b.n	64f6 <__aeabi_dadd+0x17a>
    6990:	2400      	movs	r4, #0
    6992:	e7f2      	b.n	697a <__aeabi_dadd+0x5fe>
    6994:	000007ff 	.word	0x000007ff
    6998:	ff7fffff 	.word	0xff7fffff

0000699c <__aeabi_ddiv>:
    699c:	b5f0      	push	{r4, r5, r6, r7, lr}
    699e:	4657      	mov	r7, sl
    69a0:	4645      	mov	r5, r8
    69a2:	46de      	mov	lr, fp
    69a4:	464e      	mov	r6, r9
    69a6:	b5e0      	push	{r5, r6, r7, lr}
    69a8:	004c      	lsls	r4, r1, #1
    69aa:	030e      	lsls	r6, r1, #12
    69ac:	b087      	sub	sp, #28
    69ae:	4683      	mov	fp, r0
    69b0:	4692      	mov	sl, r2
    69b2:	001d      	movs	r5, r3
    69b4:	4680      	mov	r8, r0
    69b6:	0b36      	lsrs	r6, r6, #12
    69b8:	0d64      	lsrs	r4, r4, #21
    69ba:	0fcf      	lsrs	r7, r1, #31
    69bc:	2c00      	cmp	r4, #0
    69be:	d04f      	beq.n	6a60 <__aeabi_ddiv+0xc4>
    69c0:	4b6f      	ldr	r3, [pc, #444]	; (6b80 <__aeabi_ddiv+0x1e4>)
    69c2:	429c      	cmp	r4, r3
    69c4:	d035      	beq.n	6a32 <__aeabi_ddiv+0x96>
    69c6:	2380      	movs	r3, #128	; 0x80
    69c8:	0f42      	lsrs	r2, r0, #29
    69ca:	041b      	lsls	r3, r3, #16
    69cc:	00f6      	lsls	r6, r6, #3
    69ce:	4313      	orrs	r3, r2
    69d0:	4333      	orrs	r3, r6
    69d2:	4699      	mov	r9, r3
    69d4:	00c3      	lsls	r3, r0, #3
    69d6:	4698      	mov	r8, r3
    69d8:	4b6a      	ldr	r3, [pc, #424]	; (6b84 <__aeabi_ddiv+0x1e8>)
    69da:	2600      	movs	r6, #0
    69dc:	469c      	mov	ip, r3
    69de:	2300      	movs	r3, #0
    69e0:	4464      	add	r4, ip
    69e2:	9303      	str	r3, [sp, #12]
    69e4:	032b      	lsls	r3, r5, #12
    69e6:	0b1b      	lsrs	r3, r3, #12
    69e8:	469b      	mov	fp, r3
    69ea:	006b      	lsls	r3, r5, #1
    69ec:	0fed      	lsrs	r5, r5, #31
    69ee:	4650      	mov	r0, sl
    69f0:	0d5b      	lsrs	r3, r3, #21
    69f2:	9501      	str	r5, [sp, #4]
    69f4:	d05e      	beq.n	6ab4 <__aeabi_ddiv+0x118>
    69f6:	4a62      	ldr	r2, [pc, #392]	; (6b80 <__aeabi_ddiv+0x1e4>)
    69f8:	4293      	cmp	r3, r2
    69fa:	d053      	beq.n	6aa4 <__aeabi_ddiv+0x108>
    69fc:	465a      	mov	r2, fp
    69fe:	00d1      	lsls	r1, r2, #3
    6a00:	2280      	movs	r2, #128	; 0x80
    6a02:	0f40      	lsrs	r0, r0, #29
    6a04:	0412      	lsls	r2, r2, #16
    6a06:	4302      	orrs	r2, r0
    6a08:	430a      	orrs	r2, r1
    6a0a:	4693      	mov	fp, r2
    6a0c:	4652      	mov	r2, sl
    6a0e:	00d1      	lsls	r1, r2, #3
    6a10:	4a5c      	ldr	r2, [pc, #368]	; (6b84 <__aeabi_ddiv+0x1e8>)
    6a12:	4694      	mov	ip, r2
    6a14:	2200      	movs	r2, #0
    6a16:	4463      	add	r3, ip
    6a18:	0038      	movs	r0, r7
    6a1a:	4068      	eors	r0, r5
    6a1c:	4684      	mov	ip, r0
    6a1e:	9002      	str	r0, [sp, #8]
    6a20:	1ae4      	subs	r4, r4, r3
    6a22:	4316      	orrs	r6, r2
    6a24:	2e0f      	cmp	r6, #15
    6a26:	d900      	bls.n	6a2a <__aeabi_ddiv+0x8e>
    6a28:	e0b4      	b.n	6b94 <__aeabi_ddiv+0x1f8>
    6a2a:	4b57      	ldr	r3, [pc, #348]	; (6b88 <__aeabi_ddiv+0x1ec>)
    6a2c:	00b6      	lsls	r6, r6, #2
    6a2e:	599b      	ldr	r3, [r3, r6]
    6a30:	469f      	mov	pc, r3
    6a32:	0003      	movs	r3, r0
    6a34:	4333      	orrs	r3, r6
    6a36:	4699      	mov	r9, r3
    6a38:	d16c      	bne.n	6b14 <__aeabi_ddiv+0x178>
    6a3a:	2300      	movs	r3, #0
    6a3c:	4698      	mov	r8, r3
    6a3e:	3302      	adds	r3, #2
    6a40:	2608      	movs	r6, #8
    6a42:	9303      	str	r3, [sp, #12]
    6a44:	e7ce      	b.n	69e4 <__aeabi_ddiv+0x48>
    6a46:	46cb      	mov	fp, r9
    6a48:	4641      	mov	r1, r8
    6a4a:	9a03      	ldr	r2, [sp, #12]
    6a4c:	9701      	str	r7, [sp, #4]
    6a4e:	2a02      	cmp	r2, #2
    6a50:	d165      	bne.n	6b1e <__aeabi_ddiv+0x182>
    6a52:	9b01      	ldr	r3, [sp, #4]
    6a54:	4c4a      	ldr	r4, [pc, #296]	; (6b80 <__aeabi_ddiv+0x1e4>)
    6a56:	469c      	mov	ip, r3
    6a58:	2300      	movs	r3, #0
    6a5a:	2200      	movs	r2, #0
    6a5c:	4698      	mov	r8, r3
    6a5e:	e06b      	b.n	6b38 <__aeabi_ddiv+0x19c>
    6a60:	0003      	movs	r3, r0
    6a62:	4333      	orrs	r3, r6
    6a64:	4699      	mov	r9, r3
    6a66:	d04e      	beq.n	6b06 <__aeabi_ddiv+0x16a>
    6a68:	2e00      	cmp	r6, #0
    6a6a:	d100      	bne.n	6a6e <__aeabi_ddiv+0xd2>
    6a6c:	e1bc      	b.n	6de8 <__aeabi_ddiv+0x44c>
    6a6e:	0030      	movs	r0, r6
    6a70:	f001 fad4 	bl	801c <__clzsi2>
    6a74:	0003      	movs	r3, r0
    6a76:	3b0b      	subs	r3, #11
    6a78:	2b1c      	cmp	r3, #28
    6a7a:	dd00      	ble.n	6a7e <__aeabi_ddiv+0xe2>
    6a7c:	e1ac      	b.n	6dd8 <__aeabi_ddiv+0x43c>
    6a7e:	221d      	movs	r2, #29
    6a80:	1ad3      	subs	r3, r2, r3
    6a82:	465a      	mov	r2, fp
    6a84:	0001      	movs	r1, r0
    6a86:	40da      	lsrs	r2, r3
    6a88:	3908      	subs	r1, #8
    6a8a:	408e      	lsls	r6, r1
    6a8c:	0013      	movs	r3, r2
    6a8e:	4333      	orrs	r3, r6
    6a90:	4699      	mov	r9, r3
    6a92:	465b      	mov	r3, fp
    6a94:	408b      	lsls	r3, r1
    6a96:	4698      	mov	r8, r3
    6a98:	2300      	movs	r3, #0
    6a9a:	4c3c      	ldr	r4, [pc, #240]	; (6b8c <__aeabi_ddiv+0x1f0>)
    6a9c:	2600      	movs	r6, #0
    6a9e:	1a24      	subs	r4, r4, r0
    6aa0:	9303      	str	r3, [sp, #12]
    6aa2:	e79f      	b.n	69e4 <__aeabi_ddiv+0x48>
    6aa4:	4651      	mov	r1, sl
    6aa6:	465a      	mov	r2, fp
    6aa8:	4311      	orrs	r1, r2
    6aaa:	d129      	bne.n	6b00 <__aeabi_ddiv+0x164>
    6aac:	2200      	movs	r2, #0
    6aae:	4693      	mov	fp, r2
    6ab0:	3202      	adds	r2, #2
    6ab2:	e7b1      	b.n	6a18 <__aeabi_ddiv+0x7c>
    6ab4:	4659      	mov	r1, fp
    6ab6:	4301      	orrs	r1, r0
    6ab8:	d01e      	beq.n	6af8 <__aeabi_ddiv+0x15c>
    6aba:	465b      	mov	r3, fp
    6abc:	2b00      	cmp	r3, #0
    6abe:	d100      	bne.n	6ac2 <__aeabi_ddiv+0x126>
    6ac0:	e19e      	b.n	6e00 <__aeabi_ddiv+0x464>
    6ac2:	4658      	mov	r0, fp
    6ac4:	f001 faaa 	bl	801c <__clzsi2>
    6ac8:	0003      	movs	r3, r0
    6aca:	3b0b      	subs	r3, #11
    6acc:	2b1c      	cmp	r3, #28
    6ace:	dd00      	ble.n	6ad2 <__aeabi_ddiv+0x136>
    6ad0:	e18f      	b.n	6df2 <__aeabi_ddiv+0x456>
    6ad2:	0002      	movs	r2, r0
    6ad4:	4659      	mov	r1, fp
    6ad6:	3a08      	subs	r2, #8
    6ad8:	4091      	lsls	r1, r2
    6ada:	468b      	mov	fp, r1
    6adc:	211d      	movs	r1, #29
    6ade:	1acb      	subs	r3, r1, r3
    6ae0:	4651      	mov	r1, sl
    6ae2:	40d9      	lsrs	r1, r3
    6ae4:	000b      	movs	r3, r1
    6ae6:	4659      	mov	r1, fp
    6ae8:	430b      	orrs	r3, r1
    6aea:	4651      	mov	r1, sl
    6aec:	469b      	mov	fp, r3
    6aee:	4091      	lsls	r1, r2
    6af0:	4b26      	ldr	r3, [pc, #152]	; (6b8c <__aeabi_ddiv+0x1f0>)
    6af2:	2200      	movs	r2, #0
    6af4:	1a1b      	subs	r3, r3, r0
    6af6:	e78f      	b.n	6a18 <__aeabi_ddiv+0x7c>
    6af8:	2300      	movs	r3, #0
    6afa:	2201      	movs	r2, #1
    6afc:	469b      	mov	fp, r3
    6afe:	e78b      	b.n	6a18 <__aeabi_ddiv+0x7c>
    6b00:	4651      	mov	r1, sl
    6b02:	2203      	movs	r2, #3
    6b04:	e788      	b.n	6a18 <__aeabi_ddiv+0x7c>
    6b06:	2300      	movs	r3, #0
    6b08:	4698      	mov	r8, r3
    6b0a:	3301      	adds	r3, #1
    6b0c:	2604      	movs	r6, #4
    6b0e:	2400      	movs	r4, #0
    6b10:	9303      	str	r3, [sp, #12]
    6b12:	e767      	b.n	69e4 <__aeabi_ddiv+0x48>
    6b14:	2303      	movs	r3, #3
    6b16:	46b1      	mov	r9, r6
    6b18:	9303      	str	r3, [sp, #12]
    6b1a:	260c      	movs	r6, #12
    6b1c:	e762      	b.n	69e4 <__aeabi_ddiv+0x48>
    6b1e:	2a03      	cmp	r2, #3
    6b20:	d100      	bne.n	6b24 <__aeabi_ddiv+0x188>
    6b22:	e25c      	b.n	6fde <__aeabi_ddiv+0x642>
    6b24:	9b01      	ldr	r3, [sp, #4]
    6b26:	2a01      	cmp	r2, #1
    6b28:	d000      	beq.n	6b2c <__aeabi_ddiv+0x190>
    6b2a:	e1e4      	b.n	6ef6 <__aeabi_ddiv+0x55a>
    6b2c:	4013      	ands	r3, r2
    6b2e:	469c      	mov	ip, r3
    6b30:	2300      	movs	r3, #0
    6b32:	2400      	movs	r4, #0
    6b34:	2200      	movs	r2, #0
    6b36:	4698      	mov	r8, r3
    6b38:	2100      	movs	r1, #0
    6b3a:	0312      	lsls	r2, r2, #12
    6b3c:	0b13      	lsrs	r3, r2, #12
    6b3e:	0d0a      	lsrs	r2, r1, #20
    6b40:	0512      	lsls	r2, r2, #20
    6b42:	431a      	orrs	r2, r3
    6b44:	0523      	lsls	r3, r4, #20
    6b46:	4c12      	ldr	r4, [pc, #72]	; (6b90 <__aeabi_ddiv+0x1f4>)
    6b48:	4640      	mov	r0, r8
    6b4a:	4022      	ands	r2, r4
    6b4c:	4313      	orrs	r3, r2
    6b4e:	4662      	mov	r2, ip
    6b50:	005b      	lsls	r3, r3, #1
    6b52:	07d2      	lsls	r2, r2, #31
    6b54:	085b      	lsrs	r3, r3, #1
    6b56:	4313      	orrs	r3, r2
    6b58:	0019      	movs	r1, r3
    6b5a:	b007      	add	sp, #28
    6b5c:	bc3c      	pop	{r2, r3, r4, r5}
    6b5e:	4690      	mov	r8, r2
    6b60:	4699      	mov	r9, r3
    6b62:	46a2      	mov	sl, r4
    6b64:	46ab      	mov	fp, r5
    6b66:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6b68:	2300      	movs	r3, #0
    6b6a:	2280      	movs	r2, #128	; 0x80
    6b6c:	469c      	mov	ip, r3
    6b6e:	0312      	lsls	r2, r2, #12
    6b70:	4698      	mov	r8, r3
    6b72:	4c03      	ldr	r4, [pc, #12]	; (6b80 <__aeabi_ddiv+0x1e4>)
    6b74:	e7e0      	b.n	6b38 <__aeabi_ddiv+0x19c>
    6b76:	2300      	movs	r3, #0
    6b78:	4c01      	ldr	r4, [pc, #4]	; (6b80 <__aeabi_ddiv+0x1e4>)
    6b7a:	2200      	movs	r2, #0
    6b7c:	4698      	mov	r8, r3
    6b7e:	e7db      	b.n	6b38 <__aeabi_ddiv+0x19c>
    6b80:	000007ff 	.word	0x000007ff
    6b84:	fffffc01 	.word	0xfffffc01
    6b88:	00008b28 	.word	0x00008b28
    6b8c:	fffffc0d 	.word	0xfffffc0d
    6b90:	800fffff 	.word	0x800fffff
    6b94:	45d9      	cmp	r9, fp
    6b96:	d900      	bls.n	6b9a <__aeabi_ddiv+0x1fe>
    6b98:	e139      	b.n	6e0e <__aeabi_ddiv+0x472>
    6b9a:	d100      	bne.n	6b9e <__aeabi_ddiv+0x202>
    6b9c:	e134      	b.n	6e08 <__aeabi_ddiv+0x46c>
    6b9e:	2300      	movs	r3, #0
    6ba0:	4646      	mov	r6, r8
    6ba2:	464d      	mov	r5, r9
    6ba4:	469a      	mov	sl, r3
    6ba6:	3c01      	subs	r4, #1
    6ba8:	465b      	mov	r3, fp
    6baa:	0e0a      	lsrs	r2, r1, #24
    6bac:	021b      	lsls	r3, r3, #8
    6bae:	431a      	orrs	r2, r3
    6bb0:	020b      	lsls	r3, r1, #8
    6bb2:	0c17      	lsrs	r7, r2, #16
    6bb4:	9303      	str	r3, [sp, #12]
    6bb6:	0413      	lsls	r3, r2, #16
    6bb8:	0c1b      	lsrs	r3, r3, #16
    6bba:	0039      	movs	r1, r7
    6bbc:	0028      	movs	r0, r5
    6bbe:	4690      	mov	r8, r2
    6bc0:	9301      	str	r3, [sp, #4]
    6bc2:	f7ff fa07 	bl	5fd4 <__udivsi3>
    6bc6:	0002      	movs	r2, r0
    6bc8:	9b01      	ldr	r3, [sp, #4]
    6bca:	4683      	mov	fp, r0
    6bcc:	435a      	muls	r2, r3
    6bce:	0028      	movs	r0, r5
    6bd0:	0039      	movs	r1, r7
    6bd2:	4691      	mov	r9, r2
    6bd4:	f7ff fa84 	bl	60e0 <__aeabi_uidivmod>
    6bd8:	0c35      	lsrs	r5, r6, #16
    6bda:	0409      	lsls	r1, r1, #16
    6bdc:	430d      	orrs	r5, r1
    6bde:	45a9      	cmp	r9, r5
    6be0:	d90d      	bls.n	6bfe <__aeabi_ddiv+0x262>
    6be2:	465b      	mov	r3, fp
    6be4:	4445      	add	r5, r8
    6be6:	3b01      	subs	r3, #1
    6be8:	45a8      	cmp	r8, r5
    6bea:	d900      	bls.n	6bee <__aeabi_ddiv+0x252>
    6bec:	e13a      	b.n	6e64 <__aeabi_ddiv+0x4c8>
    6bee:	45a9      	cmp	r9, r5
    6bf0:	d800      	bhi.n	6bf4 <__aeabi_ddiv+0x258>
    6bf2:	e137      	b.n	6e64 <__aeabi_ddiv+0x4c8>
    6bf4:	2302      	movs	r3, #2
    6bf6:	425b      	negs	r3, r3
    6bf8:	469c      	mov	ip, r3
    6bfa:	4445      	add	r5, r8
    6bfc:	44e3      	add	fp, ip
    6bfe:	464b      	mov	r3, r9
    6c00:	1aeb      	subs	r3, r5, r3
    6c02:	0039      	movs	r1, r7
    6c04:	0018      	movs	r0, r3
    6c06:	9304      	str	r3, [sp, #16]
    6c08:	f7ff f9e4 	bl	5fd4 <__udivsi3>
    6c0c:	9b01      	ldr	r3, [sp, #4]
    6c0e:	0005      	movs	r5, r0
    6c10:	4343      	muls	r3, r0
    6c12:	0039      	movs	r1, r7
    6c14:	9804      	ldr	r0, [sp, #16]
    6c16:	4699      	mov	r9, r3
    6c18:	f7ff fa62 	bl	60e0 <__aeabi_uidivmod>
    6c1c:	0433      	lsls	r3, r6, #16
    6c1e:	0409      	lsls	r1, r1, #16
    6c20:	0c1b      	lsrs	r3, r3, #16
    6c22:	430b      	orrs	r3, r1
    6c24:	4599      	cmp	r9, r3
    6c26:	d909      	bls.n	6c3c <__aeabi_ddiv+0x2a0>
    6c28:	4443      	add	r3, r8
    6c2a:	1e6a      	subs	r2, r5, #1
    6c2c:	4598      	cmp	r8, r3
    6c2e:	d900      	bls.n	6c32 <__aeabi_ddiv+0x296>
    6c30:	e11a      	b.n	6e68 <__aeabi_ddiv+0x4cc>
    6c32:	4599      	cmp	r9, r3
    6c34:	d800      	bhi.n	6c38 <__aeabi_ddiv+0x29c>
    6c36:	e117      	b.n	6e68 <__aeabi_ddiv+0x4cc>
    6c38:	3d02      	subs	r5, #2
    6c3a:	4443      	add	r3, r8
    6c3c:	464a      	mov	r2, r9
    6c3e:	1a9b      	subs	r3, r3, r2
    6c40:	465a      	mov	r2, fp
    6c42:	0412      	lsls	r2, r2, #16
    6c44:	432a      	orrs	r2, r5
    6c46:	9903      	ldr	r1, [sp, #12]
    6c48:	4693      	mov	fp, r2
    6c4a:	0c10      	lsrs	r0, r2, #16
    6c4c:	0c0a      	lsrs	r2, r1, #16
    6c4e:	4691      	mov	r9, r2
    6c50:	0409      	lsls	r1, r1, #16
    6c52:	465a      	mov	r2, fp
    6c54:	0c09      	lsrs	r1, r1, #16
    6c56:	464e      	mov	r6, r9
    6c58:	000d      	movs	r5, r1
    6c5a:	0412      	lsls	r2, r2, #16
    6c5c:	0c12      	lsrs	r2, r2, #16
    6c5e:	4345      	muls	r5, r0
    6c60:	9105      	str	r1, [sp, #20]
    6c62:	4351      	muls	r1, r2
    6c64:	4372      	muls	r2, r6
    6c66:	4370      	muls	r0, r6
    6c68:	1952      	adds	r2, r2, r5
    6c6a:	0c0e      	lsrs	r6, r1, #16
    6c6c:	18b2      	adds	r2, r6, r2
    6c6e:	4295      	cmp	r5, r2
    6c70:	d903      	bls.n	6c7a <__aeabi_ddiv+0x2de>
    6c72:	2580      	movs	r5, #128	; 0x80
    6c74:	026d      	lsls	r5, r5, #9
    6c76:	46ac      	mov	ip, r5
    6c78:	4460      	add	r0, ip
    6c7a:	0c15      	lsrs	r5, r2, #16
    6c7c:	0409      	lsls	r1, r1, #16
    6c7e:	0412      	lsls	r2, r2, #16
    6c80:	0c09      	lsrs	r1, r1, #16
    6c82:	1828      	adds	r0, r5, r0
    6c84:	1852      	adds	r2, r2, r1
    6c86:	4283      	cmp	r3, r0
    6c88:	d200      	bcs.n	6c8c <__aeabi_ddiv+0x2f0>
    6c8a:	e0ce      	b.n	6e2a <__aeabi_ddiv+0x48e>
    6c8c:	d100      	bne.n	6c90 <__aeabi_ddiv+0x2f4>
    6c8e:	e0c8      	b.n	6e22 <__aeabi_ddiv+0x486>
    6c90:	1a1d      	subs	r5, r3, r0
    6c92:	4653      	mov	r3, sl
    6c94:	1a9e      	subs	r6, r3, r2
    6c96:	45b2      	cmp	sl, r6
    6c98:	4192      	sbcs	r2, r2
    6c9a:	4252      	negs	r2, r2
    6c9c:	1aab      	subs	r3, r5, r2
    6c9e:	469a      	mov	sl, r3
    6ca0:	4598      	cmp	r8, r3
    6ca2:	d100      	bne.n	6ca6 <__aeabi_ddiv+0x30a>
    6ca4:	e117      	b.n	6ed6 <__aeabi_ddiv+0x53a>
    6ca6:	0039      	movs	r1, r7
    6ca8:	0018      	movs	r0, r3
    6caa:	f7ff f993 	bl	5fd4 <__udivsi3>
    6cae:	9b01      	ldr	r3, [sp, #4]
    6cb0:	0005      	movs	r5, r0
    6cb2:	4343      	muls	r3, r0
    6cb4:	0039      	movs	r1, r7
    6cb6:	4650      	mov	r0, sl
    6cb8:	9304      	str	r3, [sp, #16]
    6cba:	f7ff fa11 	bl	60e0 <__aeabi_uidivmod>
    6cbe:	9804      	ldr	r0, [sp, #16]
    6cc0:	040b      	lsls	r3, r1, #16
    6cc2:	0c31      	lsrs	r1, r6, #16
    6cc4:	4319      	orrs	r1, r3
    6cc6:	4288      	cmp	r0, r1
    6cc8:	d909      	bls.n	6cde <__aeabi_ddiv+0x342>
    6cca:	4441      	add	r1, r8
    6ccc:	1e6b      	subs	r3, r5, #1
    6cce:	4588      	cmp	r8, r1
    6cd0:	d900      	bls.n	6cd4 <__aeabi_ddiv+0x338>
    6cd2:	e107      	b.n	6ee4 <__aeabi_ddiv+0x548>
    6cd4:	4288      	cmp	r0, r1
    6cd6:	d800      	bhi.n	6cda <__aeabi_ddiv+0x33e>
    6cd8:	e104      	b.n	6ee4 <__aeabi_ddiv+0x548>
    6cda:	3d02      	subs	r5, #2
    6cdc:	4441      	add	r1, r8
    6cde:	9b04      	ldr	r3, [sp, #16]
    6ce0:	1acb      	subs	r3, r1, r3
    6ce2:	0018      	movs	r0, r3
    6ce4:	0039      	movs	r1, r7
    6ce6:	9304      	str	r3, [sp, #16]
    6ce8:	f7ff f974 	bl	5fd4 <__udivsi3>
    6cec:	9b01      	ldr	r3, [sp, #4]
    6cee:	4682      	mov	sl, r0
    6cf0:	4343      	muls	r3, r0
    6cf2:	0039      	movs	r1, r7
    6cf4:	9804      	ldr	r0, [sp, #16]
    6cf6:	9301      	str	r3, [sp, #4]
    6cf8:	f7ff f9f2 	bl	60e0 <__aeabi_uidivmod>
    6cfc:	9801      	ldr	r0, [sp, #4]
    6cfe:	040b      	lsls	r3, r1, #16
    6d00:	0431      	lsls	r1, r6, #16
    6d02:	0c09      	lsrs	r1, r1, #16
    6d04:	4319      	orrs	r1, r3
    6d06:	4288      	cmp	r0, r1
    6d08:	d90d      	bls.n	6d26 <__aeabi_ddiv+0x38a>
    6d0a:	4653      	mov	r3, sl
    6d0c:	4441      	add	r1, r8
    6d0e:	3b01      	subs	r3, #1
    6d10:	4588      	cmp	r8, r1
    6d12:	d900      	bls.n	6d16 <__aeabi_ddiv+0x37a>
    6d14:	e0e8      	b.n	6ee8 <__aeabi_ddiv+0x54c>
    6d16:	4288      	cmp	r0, r1
    6d18:	d800      	bhi.n	6d1c <__aeabi_ddiv+0x380>
    6d1a:	e0e5      	b.n	6ee8 <__aeabi_ddiv+0x54c>
    6d1c:	2302      	movs	r3, #2
    6d1e:	425b      	negs	r3, r3
    6d20:	469c      	mov	ip, r3
    6d22:	4441      	add	r1, r8
    6d24:	44e2      	add	sl, ip
    6d26:	9b01      	ldr	r3, [sp, #4]
    6d28:	042d      	lsls	r5, r5, #16
    6d2a:	1ace      	subs	r6, r1, r3
    6d2c:	4651      	mov	r1, sl
    6d2e:	4329      	orrs	r1, r5
    6d30:	9d05      	ldr	r5, [sp, #20]
    6d32:	464f      	mov	r7, r9
    6d34:	002a      	movs	r2, r5
    6d36:	040b      	lsls	r3, r1, #16
    6d38:	0c08      	lsrs	r0, r1, #16
    6d3a:	0c1b      	lsrs	r3, r3, #16
    6d3c:	435a      	muls	r2, r3
    6d3e:	4345      	muls	r5, r0
    6d40:	437b      	muls	r3, r7
    6d42:	4378      	muls	r0, r7
    6d44:	195b      	adds	r3, r3, r5
    6d46:	0c17      	lsrs	r7, r2, #16
    6d48:	18fb      	adds	r3, r7, r3
    6d4a:	429d      	cmp	r5, r3
    6d4c:	d903      	bls.n	6d56 <__aeabi_ddiv+0x3ba>
    6d4e:	2580      	movs	r5, #128	; 0x80
    6d50:	026d      	lsls	r5, r5, #9
    6d52:	46ac      	mov	ip, r5
    6d54:	4460      	add	r0, ip
    6d56:	0c1d      	lsrs	r5, r3, #16
    6d58:	0412      	lsls	r2, r2, #16
    6d5a:	041b      	lsls	r3, r3, #16
    6d5c:	0c12      	lsrs	r2, r2, #16
    6d5e:	1828      	adds	r0, r5, r0
    6d60:	189b      	adds	r3, r3, r2
    6d62:	4286      	cmp	r6, r0
    6d64:	d200      	bcs.n	6d68 <__aeabi_ddiv+0x3cc>
    6d66:	e093      	b.n	6e90 <__aeabi_ddiv+0x4f4>
    6d68:	d100      	bne.n	6d6c <__aeabi_ddiv+0x3d0>
    6d6a:	e08e      	b.n	6e8a <__aeabi_ddiv+0x4ee>
    6d6c:	2301      	movs	r3, #1
    6d6e:	4319      	orrs	r1, r3
    6d70:	4ba0      	ldr	r3, [pc, #640]	; (6ff4 <__aeabi_ddiv+0x658>)
    6d72:	18e3      	adds	r3, r4, r3
    6d74:	2b00      	cmp	r3, #0
    6d76:	dc00      	bgt.n	6d7a <__aeabi_ddiv+0x3de>
    6d78:	e099      	b.n	6eae <__aeabi_ddiv+0x512>
    6d7a:	074a      	lsls	r2, r1, #29
    6d7c:	d000      	beq.n	6d80 <__aeabi_ddiv+0x3e4>
    6d7e:	e09e      	b.n	6ebe <__aeabi_ddiv+0x522>
    6d80:	465a      	mov	r2, fp
    6d82:	01d2      	lsls	r2, r2, #7
    6d84:	d506      	bpl.n	6d94 <__aeabi_ddiv+0x3f8>
    6d86:	465a      	mov	r2, fp
    6d88:	4b9b      	ldr	r3, [pc, #620]	; (6ff8 <__aeabi_ddiv+0x65c>)
    6d8a:	401a      	ands	r2, r3
    6d8c:	2380      	movs	r3, #128	; 0x80
    6d8e:	4693      	mov	fp, r2
    6d90:	00db      	lsls	r3, r3, #3
    6d92:	18e3      	adds	r3, r4, r3
    6d94:	4a99      	ldr	r2, [pc, #612]	; (6ffc <__aeabi_ddiv+0x660>)
    6d96:	4293      	cmp	r3, r2
    6d98:	dd68      	ble.n	6e6c <__aeabi_ddiv+0x4d0>
    6d9a:	2301      	movs	r3, #1
    6d9c:	9a02      	ldr	r2, [sp, #8]
    6d9e:	4c98      	ldr	r4, [pc, #608]	; (7000 <__aeabi_ddiv+0x664>)
    6da0:	401a      	ands	r2, r3
    6da2:	2300      	movs	r3, #0
    6da4:	4694      	mov	ip, r2
    6da6:	4698      	mov	r8, r3
    6da8:	2200      	movs	r2, #0
    6daa:	e6c5      	b.n	6b38 <__aeabi_ddiv+0x19c>
    6dac:	2280      	movs	r2, #128	; 0x80
    6dae:	464b      	mov	r3, r9
    6db0:	0312      	lsls	r2, r2, #12
    6db2:	4213      	tst	r3, r2
    6db4:	d00a      	beq.n	6dcc <__aeabi_ddiv+0x430>
    6db6:	465b      	mov	r3, fp
    6db8:	4213      	tst	r3, r2
    6dba:	d106      	bne.n	6dca <__aeabi_ddiv+0x42e>
    6dbc:	431a      	orrs	r2, r3
    6dbe:	0312      	lsls	r2, r2, #12
    6dc0:	0b12      	lsrs	r2, r2, #12
    6dc2:	46ac      	mov	ip, r5
    6dc4:	4688      	mov	r8, r1
    6dc6:	4c8e      	ldr	r4, [pc, #568]	; (7000 <__aeabi_ddiv+0x664>)
    6dc8:	e6b6      	b.n	6b38 <__aeabi_ddiv+0x19c>
    6dca:	464b      	mov	r3, r9
    6dcc:	431a      	orrs	r2, r3
    6dce:	0312      	lsls	r2, r2, #12
    6dd0:	0b12      	lsrs	r2, r2, #12
    6dd2:	46bc      	mov	ip, r7
    6dd4:	4c8a      	ldr	r4, [pc, #552]	; (7000 <__aeabi_ddiv+0x664>)
    6dd6:	e6af      	b.n	6b38 <__aeabi_ddiv+0x19c>
    6dd8:	0003      	movs	r3, r0
    6dda:	465a      	mov	r2, fp
    6ddc:	3b28      	subs	r3, #40	; 0x28
    6dde:	409a      	lsls	r2, r3
    6de0:	2300      	movs	r3, #0
    6de2:	4691      	mov	r9, r2
    6de4:	4698      	mov	r8, r3
    6de6:	e657      	b.n	6a98 <__aeabi_ddiv+0xfc>
    6de8:	4658      	mov	r0, fp
    6dea:	f001 f917 	bl	801c <__clzsi2>
    6dee:	3020      	adds	r0, #32
    6df0:	e640      	b.n	6a74 <__aeabi_ddiv+0xd8>
    6df2:	0003      	movs	r3, r0
    6df4:	4652      	mov	r2, sl
    6df6:	3b28      	subs	r3, #40	; 0x28
    6df8:	409a      	lsls	r2, r3
    6dfa:	2100      	movs	r1, #0
    6dfc:	4693      	mov	fp, r2
    6dfe:	e677      	b.n	6af0 <__aeabi_ddiv+0x154>
    6e00:	f001 f90c 	bl	801c <__clzsi2>
    6e04:	3020      	adds	r0, #32
    6e06:	e65f      	b.n	6ac8 <__aeabi_ddiv+0x12c>
    6e08:	4588      	cmp	r8, r1
    6e0a:	d200      	bcs.n	6e0e <__aeabi_ddiv+0x472>
    6e0c:	e6c7      	b.n	6b9e <__aeabi_ddiv+0x202>
    6e0e:	464b      	mov	r3, r9
    6e10:	07de      	lsls	r6, r3, #31
    6e12:	085d      	lsrs	r5, r3, #1
    6e14:	4643      	mov	r3, r8
    6e16:	085b      	lsrs	r3, r3, #1
    6e18:	431e      	orrs	r6, r3
    6e1a:	4643      	mov	r3, r8
    6e1c:	07db      	lsls	r3, r3, #31
    6e1e:	469a      	mov	sl, r3
    6e20:	e6c2      	b.n	6ba8 <__aeabi_ddiv+0x20c>
    6e22:	2500      	movs	r5, #0
    6e24:	4592      	cmp	sl, r2
    6e26:	d300      	bcc.n	6e2a <__aeabi_ddiv+0x48e>
    6e28:	e733      	b.n	6c92 <__aeabi_ddiv+0x2f6>
    6e2a:	9e03      	ldr	r6, [sp, #12]
    6e2c:	4659      	mov	r1, fp
    6e2e:	46b4      	mov	ip, r6
    6e30:	44e2      	add	sl, ip
    6e32:	45b2      	cmp	sl, r6
    6e34:	41ad      	sbcs	r5, r5
    6e36:	426d      	negs	r5, r5
    6e38:	4445      	add	r5, r8
    6e3a:	18eb      	adds	r3, r5, r3
    6e3c:	3901      	subs	r1, #1
    6e3e:	4598      	cmp	r8, r3
    6e40:	d207      	bcs.n	6e52 <__aeabi_ddiv+0x4b6>
    6e42:	4298      	cmp	r0, r3
    6e44:	d900      	bls.n	6e48 <__aeabi_ddiv+0x4ac>
    6e46:	e07f      	b.n	6f48 <__aeabi_ddiv+0x5ac>
    6e48:	d100      	bne.n	6e4c <__aeabi_ddiv+0x4b0>
    6e4a:	e0bc      	b.n	6fc6 <__aeabi_ddiv+0x62a>
    6e4c:	1a1d      	subs	r5, r3, r0
    6e4e:	468b      	mov	fp, r1
    6e50:	e71f      	b.n	6c92 <__aeabi_ddiv+0x2f6>
    6e52:	4598      	cmp	r8, r3
    6e54:	d1fa      	bne.n	6e4c <__aeabi_ddiv+0x4b0>
    6e56:	9d03      	ldr	r5, [sp, #12]
    6e58:	4555      	cmp	r5, sl
    6e5a:	d9f2      	bls.n	6e42 <__aeabi_ddiv+0x4a6>
    6e5c:	4643      	mov	r3, r8
    6e5e:	468b      	mov	fp, r1
    6e60:	1a1d      	subs	r5, r3, r0
    6e62:	e716      	b.n	6c92 <__aeabi_ddiv+0x2f6>
    6e64:	469b      	mov	fp, r3
    6e66:	e6ca      	b.n	6bfe <__aeabi_ddiv+0x262>
    6e68:	0015      	movs	r5, r2
    6e6a:	e6e7      	b.n	6c3c <__aeabi_ddiv+0x2a0>
    6e6c:	465a      	mov	r2, fp
    6e6e:	08c9      	lsrs	r1, r1, #3
    6e70:	0752      	lsls	r2, r2, #29
    6e72:	430a      	orrs	r2, r1
    6e74:	055b      	lsls	r3, r3, #21
    6e76:	4690      	mov	r8, r2
    6e78:	0d5c      	lsrs	r4, r3, #21
    6e7a:	465a      	mov	r2, fp
    6e7c:	2301      	movs	r3, #1
    6e7e:	9902      	ldr	r1, [sp, #8]
    6e80:	0252      	lsls	r2, r2, #9
    6e82:	4019      	ands	r1, r3
    6e84:	0b12      	lsrs	r2, r2, #12
    6e86:	468c      	mov	ip, r1
    6e88:	e656      	b.n	6b38 <__aeabi_ddiv+0x19c>
    6e8a:	2b00      	cmp	r3, #0
    6e8c:	d100      	bne.n	6e90 <__aeabi_ddiv+0x4f4>
    6e8e:	e76f      	b.n	6d70 <__aeabi_ddiv+0x3d4>
    6e90:	4446      	add	r6, r8
    6e92:	1e4a      	subs	r2, r1, #1
    6e94:	45b0      	cmp	r8, r6
    6e96:	d929      	bls.n	6eec <__aeabi_ddiv+0x550>
    6e98:	0011      	movs	r1, r2
    6e9a:	4286      	cmp	r6, r0
    6e9c:	d000      	beq.n	6ea0 <__aeabi_ddiv+0x504>
    6e9e:	e765      	b.n	6d6c <__aeabi_ddiv+0x3d0>
    6ea0:	9a03      	ldr	r2, [sp, #12]
    6ea2:	4293      	cmp	r3, r2
    6ea4:	d000      	beq.n	6ea8 <__aeabi_ddiv+0x50c>
    6ea6:	e761      	b.n	6d6c <__aeabi_ddiv+0x3d0>
    6ea8:	e762      	b.n	6d70 <__aeabi_ddiv+0x3d4>
    6eaa:	2101      	movs	r1, #1
    6eac:	4249      	negs	r1, r1
    6eae:	2001      	movs	r0, #1
    6eb0:	1ac2      	subs	r2, r0, r3
    6eb2:	2a38      	cmp	r2, #56	; 0x38
    6eb4:	dd21      	ble.n	6efa <__aeabi_ddiv+0x55e>
    6eb6:	9b02      	ldr	r3, [sp, #8]
    6eb8:	4003      	ands	r3, r0
    6eba:	469c      	mov	ip, r3
    6ebc:	e638      	b.n	6b30 <__aeabi_ddiv+0x194>
    6ebe:	220f      	movs	r2, #15
    6ec0:	400a      	ands	r2, r1
    6ec2:	2a04      	cmp	r2, #4
    6ec4:	d100      	bne.n	6ec8 <__aeabi_ddiv+0x52c>
    6ec6:	e75b      	b.n	6d80 <__aeabi_ddiv+0x3e4>
    6ec8:	000a      	movs	r2, r1
    6eca:	1d11      	adds	r1, r2, #4
    6ecc:	4291      	cmp	r1, r2
    6ece:	4192      	sbcs	r2, r2
    6ed0:	4252      	negs	r2, r2
    6ed2:	4493      	add	fp, r2
    6ed4:	e754      	b.n	6d80 <__aeabi_ddiv+0x3e4>
    6ed6:	4b47      	ldr	r3, [pc, #284]	; (6ff4 <__aeabi_ddiv+0x658>)
    6ed8:	18e3      	adds	r3, r4, r3
    6eda:	2b00      	cmp	r3, #0
    6edc:	dde5      	ble.n	6eaa <__aeabi_ddiv+0x50e>
    6ede:	2201      	movs	r2, #1
    6ee0:	4252      	negs	r2, r2
    6ee2:	e7f2      	b.n	6eca <__aeabi_ddiv+0x52e>
    6ee4:	001d      	movs	r5, r3
    6ee6:	e6fa      	b.n	6cde <__aeabi_ddiv+0x342>
    6ee8:	469a      	mov	sl, r3
    6eea:	e71c      	b.n	6d26 <__aeabi_ddiv+0x38a>
    6eec:	42b0      	cmp	r0, r6
    6eee:	d839      	bhi.n	6f64 <__aeabi_ddiv+0x5c8>
    6ef0:	d06e      	beq.n	6fd0 <__aeabi_ddiv+0x634>
    6ef2:	0011      	movs	r1, r2
    6ef4:	e73a      	b.n	6d6c <__aeabi_ddiv+0x3d0>
    6ef6:	9302      	str	r3, [sp, #8]
    6ef8:	e73a      	b.n	6d70 <__aeabi_ddiv+0x3d4>
    6efa:	2a1f      	cmp	r2, #31
    6efc:	dc3c      	bgt.n	6f78 <__aeabi_ddiv+0x5dc>
    6efe:	2320      	movs	r3, #32
    6f00:	1a9b      	subs	r3, r3, r2
    6f02:	000c      	movs	r4, r1
    6f04:	4658      	mov	r0, fp
    6f06:	4099      	lsls	r1, r3
    6f08:	4098      	lsls	r0, r3
    6f0a:	1e4b      	subs	r3, r1, #1
    6f0c:	4199      	sbcs	r1, r3
    6f0e:	465b      	mov	r3, fp
    6f10:	40d4      	lsrs	r4, r2
    6f12:	40d3      	lsrs	r3, r2
    6f14:	4320      	orrs	r0, r4
    6f16:	4308      	orrs	r0, r1
    6f18:	001a      	movs	r2, r3
    6f1a:	0743      	lsls	r3, r0, #29
    6f1c:	d009      	beq.n	6f32 <__aeabi_ddiv+0x596>
    6f1e:	230f      	movs	r3, #15
    6f20:	4003      	ands	r3, r0
    6f22:	2b04      	cmp	r3, #4
    6f24:	d005      	beq.n	6f32 <__aeabi_ddiv+0x596>
    6f26:	0001      	movs	r1, r0
    6f28:	1d08      	adds	r0, r1, #4
    6f2a:	4288      	cmp	r0, r1
    6f2c:	419b      	sbcs	r3, r3
    6f2e:	425b      	negs	r3, r3
    6f30:	18d2      	adds	r2, r2, r3
    6f32:	0213      	lsls	r3, r2, #8
    6f34:	d53a      	bpl.n	6fac <__aeabi_ddiv+0x610>
    6f36:	2301      	movs	r3, #1
    6f38:	9a02      	ldr	r2, [sp, #8]
    6f3a:	2401      	movs	r4, #1
    6f3c:	401a      	ands	r2, r3
    6f3e:	2300      	movs	r3, #0
    6f40:	4694      	mov	ip, r2
    6f42:	4698      	mov	r8, r3
    6f44:	2200      	movs	r2, #0
    6f46:	e5f7      	b.n	6b38 <__aeabi_ddiv+0x19c>
    6f48:	2102      	movs	r1, #2
    6f4a:	4249      	negs	r1, r1
    6f4c:	468c      	mov	ip, r1
    6f4e:	9d03      	ldr	r5, [sp, #12]
    6f50:	44e3      	add	fp, ip
    6f52:	46ac      	mov	ip, r5
    6f54:	44e2      	add	sl, ip
    6f56:	45aa      	cmp	sl, r5
    6f58:	41ad      	sbcs	r5, r5
    6f5a:	426d      	negs	r5, r5
    6f5c:	4445      	add	r5, r8
    6f5e:	18ed      	adds	r5, r5, r3
    6f60:	1a2d      	subs	r5, r5, r0
    6f62:	e696      	b.n	6c92 <__aeabi_ddiv+0x2f6>
    6f64:	1e8a      	subs	r2, r1, #2
    6f66:	9903      	ldr	r1, [sp, #12]
    6f68:	004d      	lsls	r5, r1, #1
    6f6a:	428d      	cmp	r5, r1
    6f6c:	4189      	sbcs	r1, r1
    6f6e:	4249      	negs	r1, r1
    6f70:	4441      	add	r1, r8
    6f72:	1876      	adds	r6, r6, r1
    6f74:	9503      	str	r5, [sp, #12]
    6f76:	e78f      	b.n	6e98 <__aeabi_ddiv+0x4fc>
    6f78:	201f      	movs	r0, #31
    6f7a:	4240      	negs	r0, r0
    6f7c:	1ac3      	subs	r3, r0, r3
    6f7e:	4658      	mov	r0, fp
    6f80:	40d8      	lsrs	r0, r3
    6f82:	0003      	movs	r3, r0
    6f84:	2a20      	cmp	r2, #32
    6f86:	d028      	beq.n	6fda <__aeabi_ddiv+0x63e>
    6f88:	2040      	movs	r0, #64	; 0x40
    6f8a:	465d      	mov	r5, fp
    6f8c:	1a82      	subs	r2, r0, r2
    6f8e:	4095      	lsls	r5, r2
    6f90:	4329      	orrs	r1, r5
    6f92:	1e4a      	subs	r2, r1, #1
    6f94:	4191      	sbcs	r1, r2
    6f96:	4319      	orrs	r1, r3
    6f98:	2307      	movs	r3, #7
    6f9a:	2200      	movs	r2, #0
    6f9c:	400b      	ands	r3, r1
    6f9e:	d009      	beq.n	6fb4 <__aeabi_ddiv+0x618>
    6fa0:	230f      	movs	r3, #15
    6fa2:	2200      	movs	r2, #0
    6fa4:	400b      	ands	r3, r1
    6fa6:	0008      	movs	r0, r1
    6fa8:	2b04      	cmp	r3, #4
    6faa:	d1bd      	bne.n	6f28 <__aeabi_ddiv+0x58c>
    6fac:	0001      	movs	r1, r0
    6fae:	0753      	lsls	r3, r2, #29
    6fb0:	0252      	lsls	r2, r2, #9
    6fb2:	0b12      	lsrs	r2, r2, #12
    6fb4:	08c9      	lsrs	r1, r1, #3
    6fb6:	4319      	orrs	r1, r3
    6fb8:	2301      	movs	r3, #1
    6fba:	4688      	mov	r8, r1
    6fbc:	9902      	ldr	r1, [sp, #8]
    6fbe:	2400      	movs	r4, #0
    6fc0:	4019      	ands	r1, r3
    6fc2:	468c      	mov	ip, r1
    6fc4:	e5b8      	b.n	6b38 <__aeabi_ddiv+0x19c>
    6fc6:	4552      	cmp	r2, sl
    6fc8:	d8be      	bhi.n	6f48 <__aeabi_ddiv+0x5ac>
    6fca:	468b      	mov	fp, r1
    6fcc:	2500      	movs	r5, #0
    6fce:	e660      	b.n	6c92 <__aeabi_ddiv+0x2f6>
    6fd0:	9d03      	ldr	r5, [sp, #12]
    6fd2:	429d      	cmp	r5, r3
    6fd4:	d3c6      	bcc.n	6f64 <__aeabi_ddiv+0x5c8>
    6fd6:	0011      	movs	r1, r2
    6fd8:	e762      	b.n	6ea0 <__aeabi_ddiv+0x504>
    6fda:	2500      	movs	r5, #0
    6fdc:	e7d8      	b.n	6f90 <__aeabi_ddiv+0x5f4>
    6fde:	2280      	movs	r2, #128	; 0x80
    6fe0:	465b      	mov	r3, fp
    6fe2:	0312      	lsls	r2, r2, #12
    6fe4:	431a      	orrs	r2, r3
    6fe6:	9b01      	ldr	r3, [sp, #4]
    6fe8:	0312      	lsls	r2, r2, #12
    6fea:	0b12      	lsrs	r2, r2, #12
    6fec:	469c      	mov	ip, r3
    6fee:	4688      	mov	r8, r1
    6ff0:	4c03      	ldr	r4, [pc, #12]	; (7000 <__aeabi_ddiv+0x664>)
    6ff2:	e5a1      	b.n	6b38 <__aeabi_ddiv+0x19c>
    6ff4:	000003ff 	.word	0x000003ff
    6ff8:	feffffff 	.word	0xfeffffff
    6ffc:	000007fe 	.word	0x000007fe
    7000:	000007ff 	.word	0x000007ff

00007004 <__eqdf2>:
    7004:	b5f0      	push	{r4, r5, r6, r7, lr}
    7006:	464f      	mov	r7, r9
    7008:	4646      	mov	r6, r8
    700a:	46d6      	mov	lr, sl
    700c:	005c      	lsls	r4, r3, #1
    700e:	b5c0      	push	{r6, r7, lr}
    7010:	031f      	lsls	r7, r3, #12
    7012:	0fdb      	lsrs	r3, r3, #31
    7014:	469a      	mov	sl, r3
    7016:	4b17      	ldr	r3, [pc, #92]	; (7074 <__eqdf2+0x70>)
    7018:	030e      	lsls	r6, r1, #12
    701a:	004d      	lsls	r5, r1, #1
    701c:	4684      	mov	ip, r0
    701e:	4680      	mov	r8, r0
    7020:	0b36      	lsrs	r6, r6, #12
    7022:	0d6d      	lsrs	r5, r5, #21
    7024:	0fc9      	lsrs	r1, r1, #31
    7026:	4691      	mov	r9, r2
    7028:	0b3f      	lsrs	r7, r7, #12
    702a:	0d64      	lsrs	r4, r4, #21
    702c:	2001      	movs	r0, #1
    702e:	429d      	cmp	r5, r3
    7030:	d008      	beq.n	7044 <__eqdf2+0x40>
    7032:	429c      	cmp	r4, r3
    7034:	d001      	beq.n	703a <__eqdf2+0x36>
    7036:	42a5      	cmp	r5, r4
    7038:	d00b      	beq.n	7052 <__eqdf2+0x4e>
    703a:	bc1c      	pop	{r2, r3, r4}
    703c:	4690      	mov	r8, r2
    703e:	4699      	mov	r9, r3
    7040:	46a2      	mov	sl, r4
    7042:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7044:	4663      	mov	r3, ip
    7046:	4333      	orrs	r3, r6
    7048:	d1f7      	bne.n	703a <__eqdf2+0x36>
    704a:	42ac      	cmp	r4, r5
    704c:	d1f5      	bne.n	703a <__eqdf2+0x36>
    704e:	433a      	orrs	r2, r7
    7050:	d1f3      	bne.n	703a <__eqdf2+0x36>
    7052:	2001      	movs	r0, #1
    7054:	42be      	cmp	r6, r7
    7056:	d1f0      	bne.n	703a <__eqdf2+0x36>
    7058:	45c8      	cmp	r8, r9
    705a:	d1ee      	bne.n	703a <__eqdf2+0x36>
    705c:	4551      	cmp	r1, sl
    705e:	d007      	beq.n	7070 <__eqdf2+0x6c>
    7060:	2d00      	cmp	r5, #0
    7062:	d1ea      	bne.n	703a <__eqdf2+0x36>
    7064:	4663      	mov	r3, ip
    7066:	431e      	orrs	r6, r3
    7068:	0030      	movs	r0, r6
    706a:	1e46      	subs	r6, r0, #1
    706c:	41b0      	sbcs	r0, r6
    706e:	e7e4      	b.n	703a <__eqdf2+0x36>
    7070:	2000      	movs	r0, #0
    7072:	e7e2      	b.n	703a <__eqdf2+0x36>
    7074:	000007ff 	.word	0x000007ff

00007078 <__gedf2>:
    7078:	b5f0      	push	{r4, r5, r6, r7, lr}
    707a:	4645      	mov	r5, r8
    707c:	46de      	mov	lr, fp
    707e:	4657      	mov	r7, sl
    7080:	464e      	mov	r6, r9
    7082:	b5e0      	push	{r5, r6, r7, lr}
    7084:	031f      	lsls	r7, r3, #12
    7086:	0b3d      	lsrs	r5, r7, #12
    7088:	4f2c      	ldr	r7, [pc, #176]	; (713c <__gedf2+0xc4>)
    708a:	030e      	lsls	r6, r1, #12
    708c:	004c      	lsls	r4, r1, #1
    708e:	46ab      	mov	fp, r5
    7090:	005d      	lsls	r5, r3, #1
    7092:	4684      	mov	ip, r0
    7094:	0b36      	lsrs	r6, r6, #12
    7096:	0d64      	lsrs	r4, r4, #21
    7098:	0fc9      	lsrs	r1, r1, #31
    709a:	4690      	mov	r8, r2
    709c:	0d6d      	lsrs	r5, r5, #21
    709e:	0fdb      	lsrs	r3, r3, #31
    70a0:	42bc      	cmp	r4, r7
    70a2:	d02a      	beq.n	70fa <__gedf2+0x82>
    70a4:	4f25      	ldr	r7, [pc, #148]	; (713c <__gedf2+0xc4>)
    70a6:	42bd      	cmp	r5, r7
    70a8:	d02d      	beq.n	7106 <__gedf2+0x8e>
    70aa:	2c00      	cmp	r4, #0
    70ac:	d10f      	bne.n	70ce <__gedf2+0x56>
    70ae:	4330      	orrs	r0, r6
    70b0:	0007      	movs	r7, r0
    70b2:	4681      	mov	r9, r0
    70b4:	4278      	negs	r0, r7
    70b6:	4178      	adcs	r0, r7
    70b8:	b2c0      	uxtb	r0, r0
    70ba:	2d00      	cmp	r5, #0
    70bc:	d117      	bne.n	70ee <__gedf2+0x76>
    70be:	465f      	mov	r7, fp
    70c0:	433a      	orrs	r2, r7
    70c2:	d114      	bne.n	70ee <__gedf2+0x76>
    70c4:	464b      	mov	r3, r9
    70c6:	2000      	movs	r0, #0
    70c8:	2b00      	cmp	r3, #0
    70ca:	d00a      	beq.n	70e2 <__gedf2+0x6a>
    70cc:	e006      	b.n	70dc <__gedf2+0x64>
    70ce:	2d00      	cmp	r5, #0
    70d0:	d102      	bne.n	70d8 <__gedf2+0x60>
    70d2:	4658      	mov	r0, fp
    70d4:	4302      	orrs	r2, r0
    70d6:	d001      	beq.n	70dc <__gedf2+0x64>
    70d8:	4299      	cmp	r1, r3
    70da:	d018      	beq.n	710e <__gedf2+0x96>
    70dc:	4248      	negs	r0, r1
    70de:	2101      	movs	r1, #1
    70e0:	4308      	orrs	r0, r1
    70e2:	bc3c      	pop	{r2, r3, r4, r5}
    70e4:	4690      	mov	r8, r2
    70e6:	4699      	mov	r9, r3
    70e8:	46a2      	mov	sl, r4
    70ea:	46ab      	mov	fp, r5
    70ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    70ee:	2800      	cmp	r0, #0
    70f0:	d0f2      	beq.n	70d8 <__gedf2+0x60>
    70f2:	2001      	movs	r0, #1
    70f4:	3b01      	subs	r3, #1
    70f6:	4318      	orrs	r0, r3
    70f8:	e7f3      	b.n	70e2 <__gedf2+0x6a>
    70fa:	0037      	movs	r7, r6
    70fc:	4307      	orrs	r7, r0
    70fe:	d0d1      	beq.n	70a4 <__gedf2+0x2c>
    7100:	2002      	movs	r0, #2
    7102:	4240      	negs	r0, r0
    7104:	e7ed      	b.n	70e2 <__gedf2+0x6a>
    7106:	465f      	mov	r7, fp
    7108:	4317      	orrs	r7, r2
    710a:	d0ce      	beq.n	70aa <__gedf2+0x32>
    710c:	e7f8      	b.n	7100 <__gedf2+0x88>
    710e:	42ac      	cmp	r4, r5
    7110:	dce4      	bgt.n	70dc <__gedf2+0x64>
    7112:	da03      	bge.n	711c <__gedf2+0xa4>
    7114:	1e48      	subs	r0, r1, #1
    7116:	2101      	movs	r1, #1
    7118:	4308      	orrs	r0, r1
    711a:	e7e2      	b.n	70e2 <__gedf2+0x6a>
    711c:	455e      	cmp	r6, fp
    711e:	d8dd      	bhi.n	70dc <__gedf2+0x64>
    7120:	d006      	beq.n	7130 <__gedf2+0xb8>
    7122:	2000      	movs	r0, #0
    7124:	455e      	cmp	r6, fp
    7126:	d2dc      	bcs.n	70e2 <__gedf2+0x6a>
    7128:	2301      	movs	r3, #1
    712a:	1e48      	subs	r0, r1, #1
    712c:	4318      	orrs	r0, r3
    712e:	e7d8      	b.n	70e2 <__gedf2+0x6a>
    7130:	45c4      	cmp	ip, r8
    7132:	d8d3      	bhi.n	70dc <__gedf2+0x64>
    7134:	2000      	movs	r0, #0
    7136:	45c4      	cmp	ip, r8
    7138:	d3f6      	bcc.n	7128 <__gedf2+0xb0>
    713a:	e7d2      	b.n	70e2 <__gedf2+0x6a>
    713c:	000007ff 	.word	0x000007ff

00007140 <__ledf2>:
    7140:	b5f0      	push	{r4, r5, r6, r7, lr}
    7142:	464e      	mov	r6, r9
    7144:	4645      	mov	r5, r8
    7146:	46de      	mov	lr, fp
    7148:	4657      	mov	r7, sl
    714a:	005c      	lsls	r4, r3, #1
    714c:	b5e0      	push	{r5, r6, r7, lr}
    714e:	031f      	lsls	r7, r3, #12
    7150:	0fdb      	lsrs	r3, r3, #31
    7152:	4699      	mov	r9, r3
    7154:	4b2a      	ldr	r3, [pc, #168]	; (7200 <__ledf2+0xc0>)
    7156:	030e      	lsls	r6, r1, #12
    7158:	004d      	lsls	r5, r1, #1
    715a:	0fc9      	lsrs	r1, r1, #31
    715c:	4684      	mov	ip, r0
    715e:	0b36      	lsrs	r6, r6, #12
    7160:	0d6d      	lsrs	r5, r5, #21
    7162:	468b      	mov	fp, r1
    7164:	4690      	mov	r8, r2
    7166:	0b3f      	lsrs	r7, r7, #12
    7168:	0d64      	lsrs	r4, r4, #21
    716a:	429d      	cmp	r5, r3
    716c:	d020      	beq.n	71b0 <__ledf2+0x70>
    716e:	4b24      	ldr	r3, [pc, #144]	; (7200 <__ledf2+0xc0>)
    7170:	429c      	cmp	r4, r3
    7172:	d022      	beq.n	71ba <__ledf2+0x7a>
    7174:	2d00      	cmp	r5, #0
    7176:	d112      	bne.n	719e <__ledf2+0x5e>
    7178:	4330      	orrs	r0, r6
    717a:	4243      	negs	r3, r0
    717c:	4143      	adcs	r3, r0
    717e:	b2db      	uxtb	r3, r3
    7180:	2c00      	cmp	r4, #0
    7182:	d01f      	beq.n	71c4 <__ledf2+0x84>
    7184:	2b00      	cmp	r3, #0
    7186:	d00c      	beq.n	71a2 <__ledf2+0x62>
    7188:	464b      	mov	r3, r9
    718a:	2001      	movs	r0, #1
    718c:	3b01      	subs	r3, #1
    718e:	4303      	orrs	r3, r0
    7190:	0018      	movs	r0, r3
    7192:	bc3c      	pop	{r2, r3, r4, r5}
    7194:	4690      	mov	r8, r2
    7196:	4699      	mov	r9, r3
    7198:	46a2      	mov	sl, r4
    719a:	46ab      	mov	fp, r5
    719c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    719e:	2c00      	cmp	r4, #0
    71a0:	d016      	beq.n	71d0 <__ledf2+0x90>
    71a2:	45cb      	cmp	fp, r9
    71a4:	d017      	beq.n	71d6 <__ledf2+0x96>
    71a6:	465b      	mov	r3, fp
    71a8:	4259      	negs	r1, r3
    71aa:	2301      	movs	r3, #1
    71ac:	430b      	orrs	r3, r1
    71ae:	e7ef      	b.n	7190 <__ledf2+0x50>
    71b0:	0031      	movs	r1, r6
    71b2:	2302      	movs	r3, #2
    71b4:	4301      	orrs	r1, r0
    71b6:	d1eb      	bne.n	7190 <__ledf2+0x50>
    71b8:	e7d9      	b.n	716e <__ledf2+0x2e>
    71ba:	0039      	movs	r1, r7
    71bc:	2302      	movs	r3, #2
    71be:	4311      	orrs	r1, r2
    71c0:	d1e6      	bne.n	7190 <__ledf2+0x50>
    71c2:	e7d7      	b.n	7174 <__ledf2+0x34>
    71c4:	433a      	orrs	r2, r7
    71c6:	d1dd      	bne.n	7184 <__ledf2+0x44>
    71c8:	2300      	movs	r3, #0
    71ca:	2800      	cmp	r0, #0
    71cc:	d0e0      	beq.n	7190 <__ledf2+0x50>
    71ce:	e7ea      	b.n	71a6 <__ledf2+0x66>
    71d0:	433a      	orrs	r2, r7
    71d2:	d1e6      	bne.n	71a2 <__ledf2+0x62>
    71d4:	e7e7      	b.n	71a6 <__ledf2+0x66>
    71d6:	42a5      	cmp	r5, r4
    71d8:	dce5      	bgt.n	71a6 <__ledf2+0x66>
    71da:	db05      	blt.n	71e8 <__ledf2+0xa8>
    71dc:	42be      	cmp	r6, r7
    71de:	d8e2      	bhi.n	71a6 <__ledf2+0x66>
    71e0:	d007      	beq.n	71f2 <__ledf2+0xb2>
    71e2:	2300      	movs	r3, #0
    71e4:	42be      	cmp	r6, r7
    71e6:	d2d3      	bcs.n	7190 <__ledf2+0x50>
    71e8:	4659      	mov	r1, fp
    71ea:	2301      	movs	r3, #1
    71ec:	3901      	subs	r1, #1
    71ee:	430b      	orrs	r3, r1
    71f0:	e7ce      	b.n	7190 <__ledf2+0x50>
    71f2:	45c4      	cmp	ip, r8
    71f4:	d8d7      	bhi.n	71a6 <__ledf2+0x66>
    71f6:	2300      	movs	r3, #0
    71f8:	45c4      	cmp	ip, r8
    71fa:	d3f5      	bcc.n	71e8 <__ledf2+0xa8>
    71fc:	e7c8      	b.n	7190 <__ledf2+0x50>
    71fe:	46c0      	nop			; (mov r8, r8)
    7200:	000007ff 	.word	0x000007ff

00007204 <__aeabi_dmul>:
    7204:	b5f0      	push	{r4, r5, r6, r7, lr}
    7206:	4657      	mov	r7, sl
    7208:	4645      	mov	r5, r8
    720a:	46de      	mov	lr, fp
    720c:	464e      	mov	r6, r9
    720e:	b5e0      	push	{r5, r6, r7, lr}
    7210:	030c      	lsls	r4, r1, #12
    7212:	4698      	mov	r8, r3
    7214:	004e      	lsls	r6, r1, #1
    7216:	0b23      	lsrs	r3, r4, #12
    7218:	b087      	sub	sp, #28
    721a:	0007      	movs	r7, r0
    721c:	4692      	mov	sl, r2
    721e:	469b      	mov	fp, r3
    7220:	0d76      	lsrs	r6, r6, #21
    7222:	0fcd      	lsrs	r5, r1, #31
    7224:	2e00      	cmp	r6, #0
    7226:	d06b      	beq.n	7300 <__aeabi_dmul+0xfc>
    7228:	4b6d      	ldr	r3, [pc, #436]	; (73e0 <__aeabi_dmul+0x1dc>)
    722a:	429e      	cmp	r6, r3
    722c:	d035      	beq.n	729a <__aeabi_dmul+0x96>
    722e:	2480      	movs	r4, #128	; 0x80
    7230:	465b      	mov	r3, fp
    7232:	0f42      	lsrs	r2, r0, #29
    7234:	0424      	lsls	r4, r4, #16
    7236:	00db      	lsls	r3, r3, #3
    7238:	4314      	orrs	r4, r2
    723a:	431c      	orrs	r4, r3
    723c:	00c3      	lsls	r3, r0, #3
    723e:	4699      	mov	r9, r3
    7240:	4b68      	ldr	r3, [pc, #416]	; (73e4 <__aeabi_dmul+0x1e0>)
    7242:	46a3      	mov	fp, r4
    7244:	469c      	mov	ip, r3
    7246:	2300      	movs	r3, #0
    7248:	2700      	movs	r7, #0
    724a:	4466      	add	r6, ip
    724c:	9302      	str	r3, [sp, #8]
    724e:	4643      	mov	r3, r8
    7250:	031c      	lsls	r4, r3, #12
    7252:	005a      	lsls	r2, r3, #1
    7254:	0fdb      	lsrs	r3, r3, #31
    7256:	4650      	mov	r0, sl
    7258:	0b24      	lsrs	r4, r4, #12
    725a:	0d52      	lsrs	r2, r2, #21
    725c:	4698      	mov	r8, r3
    725e:	d100      	bne.n	7262 <__aeabi_dmul+0x5e>
    7260:	e076      	b.n	7350 <__aeabi_dmul+0x14c>
    7262:	4b5f      	ldr	r3, [pc, #380]	; (73e0 <__aeabi_dmul+0x1dc>)
    7264:	429a      	cmp	r2, r3
    7266:	d06d      	beq.n	7344 <__aeabi_dmul+0x140>
    7268:	2380      	movs	r3, #128	; 0x80
    726a:	0f41      	lsrs	r1, r0, #29
    726c:	041b      	lsls	r3, r3, #16
    726e:	430b      	orrs	r3, r1
    7270:	495c      	ldr	r1, [pc, #368]	; (73e4 <__aeabi_dmul+0x1e0>)
    7272:	00e4      	lsls	r4, r4, #3
    7274:	468c      	mov	ip, r1
    7276:	431c      	orrs	r4, r3
    7278:	00c3      	lsls	r3, r0, #3
    727a:	2000      	movs	r0, #0
    727c:	4462      	add	r2, ip
    727e:	4641      	mov	r1, r8
    7280:	18b6      	adds	r6, r6, r2
    7282:	4069      	eors	r1, r5
    7284:	1c72      	adds	r2, r6, #1
    7286:	9101      	str	r1, [sp, #4]
    7288:	4694      	mov	ip, r2
    728a:	4307      	orrs	r7, r0
    728c:	2f0f      	cmp	r7, #15
    728e:	d900      	bls.n	7292 <__aeabi_dmul+0x8e>
    7290:	e0b0      	b.n	73f4 <__aeabi_dmul+0x1f0>
    7292:	4a55      	ldr	r2, [pc, #340]	; (73e8 <__aeabi_dmul+0x1e4>)
    7294:	00bf      	lsls	r7, r7, #2
    7296:	59d2      	ldr	r2, [r2, r7]
    7298:	4697      	mov	pc, r2
    729a:	465b      	mov	r3, fp
    729c:	4303      	orrs	r3, r0
    729e:	4699      	mov	r9, r3
    72a0:	d000      	beq.n	72a4 <__aeabi_dmul+0xa0>
    72a2:	e087      	b.n	73b4 <__aeabi_dmul+0x1b0>
    72a4:	2300      	movs	r3, #0
    72a6:	469b      	mov	fp, r3
    72a8:	3302      	adds	r3, #2
    72aa:	2708      	movs	r7, #8
    72ac:	9302      	str	r3, [sp, #8]
    72ae:	e7ce      	b.n	724e <__aeabi_dmul+0x4a>
    72b0:	4642      	mov	r2, r8
    72b2:	9201      	str	r2, [sp, #4]
    72b4:	2802      	cmp	r0, #2
    72b6:	d067      	beq.n	7388 <__aeabi_dmul+0x184>
    72b8:	2803      	cmp	r0, #3
    72ba:	d100      	bne.n	72be <__aeabi_dmul+0xba>
    72bc:	e20e      	b.n	76dc <__aeabi_dmul+0x4d8>
    72be:	2801      	cmp	r0, #1
    72c0:	d000      	beq.n	72c4 <__aeabi_dmul+0xc0>
    72c2:	e162      	b.n	758a <__aeabi_dmul+0x386>
    72c4:	2300      	movs	r3, #0
    72c6:	2400      	movs	r4, #0
    72c8:	2200      	movs	r2, #0
    72ca:	4699      	mov	r9, r3
    72cc:	9901      	ldr	r1, [sp, #4]
    72ce:	4001      	ands	r1, r0
    72d0:	b2cd      	uxtb	r5, r1
    72d2:	2100      	movs	r1, #0
    72d4:	0312      	lsls	r2, r2, #12
    72d6:	0d0b      	lsrs	r3, r1, #20
    72d8:	0b12      	lsrs	r2, r2, #12
    72da:	051b      	lsls	r3, r3, #20
    72dc:	4313      	orrs	r3, r2
    72de:	4a43      	ldr	r2, [pc, #268]	; (73ec <__aeabi_dmul+0x1e8>)
    72e0:	0524      	lsls	r4, r4, #20
    72e2:	4013      	ands	r3, r2
    72e4:	431c      	orrs	r4, r3
    72e6:	0064      	lsls	r4, r4, #1
    72e8:	07ed      	lsls	r5, r5, #31
    72ea:	0864      	lsrs	r4, r4, #1
    72ec:	432c      	orrs	r4, r5
    72ee:	4648      	mov	r0, r9
    72f0:	0021      	movs	r1, r4
    72f2:	b007      	add	sp, #28
    72f4:	bc3c      	pop	{r2, r3, r4, r5}
    72f6:	4690      	mov	r8, r2
    72f8:	4699      	mov	r9, r3
    72fa:	46a2      	mov	sl, r4
    72fc:	46ab      	mov	fp, r5
    72fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7300:	4303      	orrs	r3, r0
    7302:	4699      	mov	r9, r3
    7304:	d04f      	beq.n	73a6 <__aeabi_dmul+0x1a2>
    7306:	465b      	mov	r3, fp
    7308:	2b00      	cmp	r3, #0
    730a:	d100      	bne.n	730e <__aeabi_dmul+0x10a>
    730c:	e189      	b.n	7622 <__aeabi_dmul+0x41e>
    730e:	4658      	mov	r0, fp
    7310:	f000 fe84 	bl	801c <__clzsi2>
    7314:	0003      	movs	r3, r0
    7316:	3b0b      	subs	r3, #11
    7318:	2b1c      	cmp	r3, #28
    731a:	dd00      	ble.n	731e <__aeabi_dmul+0x11a>
    731c:	e17a      	b.n	7614 <__aeabi_dmul+0x410>
    731e:	221d      	movs	r2, #29
    7320:	1ad3      	subs	r3, r2, r3
    7322:	003a      	movs	r2, r7
    7324:	0001      	movs	r1, r0
    7326:	465c      	mov	r4, fp
    7328:	40da      	lsrs	r2, r3
    732a:	3908      	subs	r1, #8
    732c:	408c      	lsls	r4, r1
    732e:	0013      	movs	r3, r2
    7330:	408f      	lsls	r7, r1
    7332:	4323      	orrs	r3, r4
    7334:	469b      	mov	fp, r3
    7336:	46b9      	mov	r9, r7
    7338:	2300      	movs	r3, #0
    733a:	4e2d      	ldr	r6, [pc, #180]	; (73f0 <__aeabi_dmul+0x1ec>)
    733c:	2700      	movs	r7, #0
    733e:	1a36      	subs	r6, r6, r0
    7340:	9302      	str	r3, [sp, #8]
    7342:	e784      	b.n	724e <__aeabi_dmul+0x4a>
    7344:	4653      	mov	r3, sl
    7346:	4323      	orrs	r3, r4
    7348:	d12a      	bne.n	73a0 <__aeabi_dmul+0x19c>
    734a:	2400      	movs	r4, #0
    734c:	2002      	movs	r0, #2
    734e:	e796      	b.n	727e <__aeabi_dmul+0x7a>
    7350:	4653      	mov	r3, sl
    7352:	4323      	orrs	r3, r4
    7354:	d020      	beq.n	7398 <__aeabi_dmul+0x194>
    7356:	2c00      	cmp	r4, #0
    7358:	d100      	bne.n	735c <__aeabi_dmul+0x158>
    735a:	e157      	b.n	760c <__aeabi_dmul+0x408>
    735c:	0020      	movs	r0, r4
    735e:	f000 fe5d 	bl	801c <__clzsi2>
    7362:	0003      	movs	r3, r0
    7364:	3b0b      	subs	r3, #11
    7366:	2b1c      	cmp	r3, #28
    7368:	dd00      	ble.n	736c <__aeabi_dmul+0x168>
    736a:	e149      	b.n	7600 <__aeabi_dmul+0x3fc>
    736c:	211d      	movs	r1, #29
    736e:	1acb      	subs	r3, r1, r3
    7370:	4651      	mov	r1, sl
    7372:	0002      	movs	r2, r0
    7374:	40d9      	lsrs	r1, r3
    7376:	4653      	mov	r3, sl
    7378:	3a08      	subs	r2, #8
    737a:	4094      	lsls	r4, r2
    737c:	4093      	lsls	r3, r2
    737e:	430c      	orrs	r4, r1
    7380:	4a1b      	ldr	r2, [pc, #108]	; (73f0 <__aeabi_dmul+0x1ec>)
    7382:	1a12      	subs	r2, r2, r0
    7384:	2000      	movs	r0, #0
    7386:	e77a      	b.n	727e <__aeabi_dmul+0x7a>
    7388:	2501      	movs	r5, #1
    738a:	9b01      	ldr	r3, [sp, #4]
    738c:	4c14      	ldr	r4, [pc, #80]	; (73e0 <__aeabi_dmul+0x1dc>)
    738e:	401d      	ands	r5, r3
    7390:	2300      	movs	r3, #0
    7392:	2200      	movs	r2, #0
    7394:	4699      	mov	r9, r3
    7396:	e79c      	b.n	72d2 <__aeabi_dmul+0xce>
    7398:	2400      	movs	r4, #0
    739a:	2200      	movs	r2, #0
    739c:	2001      	movs	r0, #1
    739e:	e76e      	b.n	727e <__aeabi_dmul+0x7a>
    73a0:	4653      	mov	r3, sl
    73a2:	2003      	movs	r0, #3
    73a4:	e76b      	b.n	727e <__aeabi_dmul+0x7a>
    73a6:	2300      	movs	r3, #0
    73a8:	469b      	mov	fp, r3
    73aa:	3301      	adds	r3, #1
    73ac:	2704      	movs	r7, #4
    73ae:	2600      	movs	r6, #0
    73b0:	9302      	str	r3, [sp, #8]
    73b2:	e74c      	b.n	724e <__aeabi_dmul+0x4a>
    73b4:	2303      	movs	r3, #3
    73b6:	4681      	mov	r9, r0
    73b8:	270c      	movs	r7, #12
    73ba:	9302      	str	r3, [sp, #8]
    73bc:	e747      	b.n	724e <__aeabi_dmul+0x4a>
    73be:	2280      	movs	r2, #128	; 0x80
    73c0:	2300      	movs	r3, #0
    73c2:	2500      	movs	r5, #0
    73c4:	0312      	lsls	r2, r2, #12
    73c6:	4699      	mov	r9, r3
    73c8:	4c05      	ldr	r4, [pc, #20]	; (73e0 <__aeabi_dmul+0x1dc>)
    73ca:	e782      	b.n	72d2 <__aeabi_dmul+0xce>
    73cc:	465c      	mov	r4, fp
    73ce:	464b      	mov	r3, r9
    73d0:	9802      	ldr	r0, [sp, #8]
    73d2:	e76f      	b.n	72b4 <__aeabi_dmul+0xb0>
    73d4:	465c      	mov	r4, fp
    73d6:	464b      	mov	r3, r9
    73d8:	9501      	str	r5, [sp, #4]
    73da:	9802      	ldr	r0, [sp, #8]
    73dc:	e76a      	b.n	72b4 <__aeabi_dmul+0xb0>
    73de:	46c0      	nop			; (mov r8, r8)
    73e0:	000007ff 	.word	0x000007ff
    73e4:	fffffc01 	.word	0xfffffc01
    73e8:	00008b68 	.word	0x00008b68
    73ec:	800fffff 	.word	0x800fffff
    73f0:	fffffc0d 	.word	0xfffffc0d
    73f4:	464a      	mov	r2, r9
    73f6:	4649      	mov	r1, r9
    73f8:	0c17      	lsrs	r7, r2, #16
    73fa:	0c1a      	lsrs	r2, r3, #16
    73fc:	041b      	lsls	r3, r3, #16
    73fe:	0c1b      	lsrs	r3, r3, #16
    7400:	0408      	lsls	r0, r1, #16
    7402:	0019      	movs	r1, r3
    7404:	0c00      	lsrs	r0, r0, #16
    7406:	4341      	muls	r1, r0
    7408:	0015      	movs	r5, r2
    740a:	4688      	mov	r8, r1
    740c:	0019      	movs	r1, r3
    740e:	437d      	muls	r5, r7
    7410:	4379      	muls	r1, r7
    7412:	9503      	str	r5, [sp, #12]
    7414:	4689      	mov	r9, r1
    7416:	0029      	movs	r1, r5
    7418:	0015      	movs	r5, r2
    741a:	4345      	muls	r5, r0
    741c:	444d      	add	r5, r9
    741e:	9502      	str	r5, [sp, #8]
    7420:	4645      	mov	r5, r8
    7422:	0c2d      	lsrs	r5, r5, #16
    7424:	46aa      	mov	sl, r5
    7426:	9d02      	ldr	r5, [sp, #8]
    7428:	4455      	add	r5, sl
    742a:	45a9      	cmp	r9, r5
    742c:	d906      	bls.n	743c <__aeabi_dmul+0x238>
    742e:	468a      	mov	sl, r1
    7430:	2180      	movs	r1, #128	; 0x80
    7432:	0249      	lsls	r1, r1, #9
    7434:	4689      	mov	r9, r1
    7436:	44ca      	add	sl, r9
    7438:	4651      	mov	r1, sl
    743a:	9103      	str	r1, [sp, #12]
    743c:	0c29      	lsrs	r1, r5, #16
    743e:	9104      	str	r1, [sp, #16]
    7440:	4641      	mov	r1, r8
    7442:	0409      	lsls	r1, r1, #16
    7444:	042d      	lsls	r5, r5, #16
    7446:	0c09      	lsrs	r1, r1, #16
    7448:	4688      	mov	r8, r1
    744a:	0029      	movs	r1, r5
    744c:	0c25      	lsrs	r5, r4, #16
    744e:	0424      	lsls	r4, r4, #16
    7450:	4441      	add	r1, r8
    7452:	0c24      	lsrs	r4, r4, #16
    7454:	9105      	str	r1, [sp, #20]
    7456:	0021      	movs	r1, r4
    7458:	4341      	muls	r1, r0
    745a:	4688      	mov	r8, r1
    745c:	0021      	movs	r1, r4
    745e:	4379      	muls	r1, r7
    7460:	468a      	mov	sl, r1
    7462:	4368      	muls	r0, r5
    7464:	4641      	mov	r1, r8
    7466:	4450      	add	r0, sl
    7468:	4681      	mov	r9, r0
    746a:	0c08      	lsrs	r0, r1, #16
    746c:	4448      	add	r0, r9
    746e:	436f      	muls	r7, r5
    7470:	4582      	cmp	sl, r0
    7472:	d903      	bls.n	747c <__aeabi_dmul+0x278>
    7474:	2180      	movs	r1, #128	; 0x80
    7476:	0249      	lsls	r1, r1, #9
    7478:	4689      	mov	r9, r1
    747a:	444f      	add	r7, r9
    747c:	0c01      	lsrs	r1, r0, #16
    747e:	4689      	mov	r9, r1
    7480:	0039      	movs	r1, r7
    7482:	4449      	add	r1, r9
    7484:	9102      	str	r1, [sp, #8]
    7486:	4641      	mov	r1, r8
    7488:	040f      	lsls	r7, r1, #16
    748a:	9904      	ldr	r1, [sp, #16]
    748c:	0c3f      	lsrs	r7, r7, #16
    748e:	4688      	mov	r8, r1
    7490:	0400      	lsls	r0, r0, #16
    7492:	19c0      	adds	r0, r0, r7
    7494:	4480      	add	r8, r0
    7496:	4641      	mov	r1, r8
    7498:	9104      	str	r1, [sp, #16]
    749a:	4659      	mov	r1, fp
    749c:	0c0f      	lsrs	r7, r1, #16
    749e:	0409      	lsls	r1, r1, #16
    74a0:	0c09      	lsrs	r1, r1, #16
    74a2:	4688      	mov	r8, r1
    74a4:	4359      	muls	r1, r3
    74a6:	468a      	mov	sl, r1
    74a8:	0039      	movs	r1, r7
    74aa:	4351      	muls	r1, r2
    74ac:	4689      	mov	r9, r1
    74ae:	4641      	mov	r1, r8
    74b0:	434a      	muls	r2, r1
    74b2:	4651      	mov	r1, sl
    74b4:	0c09      	lsrs	r1, r1, #16
    74b6:	468b      	mov	fp, r1
    74b8:	437b      	muls	r3, r7
    74ba:	18d2      	adds	r2, r2, r3
    74bc:	445a      	add	r2, fp
    74be:	4293      	cmp	r3, r2
    74c0:	d903      	bls.n	74ca <__aeabi_dmul+0x2c6>
    74c2:	2380      	movs	r3, #128	; 0x80
    74c4:	025b      	lsls	r3, r3, #9
    74c6:	469b      	mov	fp, r3
    74c8:	44d9      	add	r9, fp
    74ca:	4651      	mov	r1, sl
    74cc:	0409      	lsls	r1, r1, #16
    74ce:	0c09      	lsrs	r1, r1, #16
    74d0:	468a      	mov	sl, r1
    74d2:	4641      	mov	r1, r8
    74d4:	4361      	muls	r1, r4
    74d6:	437c      	muls	r4, r7
    74d8:	0c13      	lsrs	r3, r2, #16
    74da:	0412      	lsls	r2, r2, #16
    74dc:	444b      	add	r3, r9
    74de:	4452      	add	r2, sl
    74e0:	46a1      	mov	r9, r4
    74e2:	468a      	mov	sl, r1
    74e4:	003c      	movs	r4, r7
    74e6:	4641      	mov	r1, r8
    74e8:	436c      	muls	r4, r5
    74ea:	434d      	muls	r5, r1
    74ec:	4651      	mov	r1, sl
    74ee:	444d      	add	r5, r9
    74f0:	0c0f      	lsrs	r7, r1, #16
    74f2:	197d      	adds	r5, r7, r5
    74f4:	45a9      	cmp	r9, r5
    74f6:	d903      	bls.n	7500 <__aeabi_dmul+0x2fc>
    74f8:	2180      	movs	r1, #128	; 0x80
    74fa:	0249      	lsls	r1, r1, #9
    74fc:	4688      	mov	r8, r1
    74fe:	4444      	add	r4, r8
    7500:	9f04      	ldr	r7, [sp, #16]
    7502:	9903      	ldr	r1, [sp, #12]
    7504:	46b8      	mov	r8, r7
    7506:	4441      	add	r1, r8
    7508:	468b      	mov	fp, r1
    750a:	4583      	cmp	fp, r0
    750c:	4180      	sbcs	r0, r0
    750e:	4241      	negs	r1, r0
    7510:	4688      	mov	r8, r1
    7512:	4651      	mov	r1, sl
    7514:	0408      	lsls	r0, r1, #16
    7516:	042f      	lsls	r7, r5, #16
    7518:	0c00      	lsrs	r0, r0, #16
    751a:	183f      	adds	r7, r7, r0
    751c:	4658      	mov	r0, fp
    751e:	9902      	ldr	r1, [sp, #8]
    7520:	1810      	adds	r0, r2, r0
    7522:	4689      	mov	r9, r1
    7524:	4290      	cmp	r0, r2
    7526:	4192      	sbcs	r2, r2
    7528:	444f      	add	r7, r9
    752a:	46ba      	mov	sl, r7
    752c:	4252      	negs	r2, r2
    752e:	4699      	mov	r9, r3
    7530:	4693      	mov	fp, r2
    7532:	44c2      	add	sl, r8
    7534:	44d1      	add	r9, sl
    7536:	44cb      	add	fp, r9
    7538:	428f      	cmp	r7, r1
    753a:	41bf      	sbcs	r7, r7
    753c:	45c2      	cmp	sl, r8
    753e:	4189      	sbcs	r1, r1
    7540:	4599      	cmp	r9, r3
    7542:	419b      	sbcs	r3, r3
    7544:	4593      	cmp	fp, r2
    7546:	4192      	sbcs	r2, r2
    7548:	427f      	negs	r7, r7
    754a:	4249      	negs	r1, r1
    754c:	0c2d      	lsrs	r5, r5, #16
    754e:	4252      	negs	r2, r2
    7550:	430f      	orrs	r7, r1
    7552:	425b      	negs	r3, r3
    7554:	4313      	orrs	r3, r2
    7556:	197f      	adds	r7, r7, r5
    7558:	18ff      	adds	r7, r7, r3
    755a:	465b      	mov	r3, fp
    755c:	193c      	adds	r4, r7, r4
    755e:	0ddb      	lsrs	r3, r3, #23
    7560:	9a05      	ldr	r2, [sp, #20]
    7562:	0264      	lsls	r4, r4, #9
    7564:	431c      	orrs	r4, r3
    7566:	0243      	lsls	r3, r0, #9
    7568:	4313      	orrs	r3, r2
    756a:	1e5d      	subs	r5, r3, #1
    756c:	41ab      	sbcs	r3, r5
    756e:	465a      	mov	r2, fp
    7570:	0dc0      	lsrs	r0, r0, #23
    7572:	4303      	orrs	r3, r0
    7574:	0252      	lsls	r2, r2, #9
    7576:	4313      	orrs	r3, r2
    7578:	01e2      	lsls	r2, r4, #7
    757a:	d556      	bpl.n	762a <__aeabi_dmul+0x426>
    757c:	2001      	movs	r0, #1
    757e:	085a      	lsrs	r2, r3, #1
    7580:	4003      	ands	r3, r0
    7582:	4313      	orrs	r3, r2
    7584:	07e2      	lsls	r2, r4, #31
    7586:	4313      	orrs	r3, r2
    7588:	0864      	lsrs	r4, r4, #1
    758a:	485a      	ldr	r0, [pc, #360]	; (76f4 <__aeabi_dmul+0x4f0>)
    758c:	4460      	add	r0, ip
    758e:	2800      	cmp	r0, #0
    7590:	dd4d      	ble.n	762e <__aeabi_dmul+0x42a>
    7592:	075a      	lsls	r2, r3, #29
    7594:	d009      	beq.n	75aa <__aeabi_dmul+0x3a6>
    7596:	220f      	movs	r2, #15
    7598:	401a      	ands	r2, r3
    759a:	2a04      	cmp	r2, #4
    759c:	d005      	beq.n	75aa <__aeabi_dmul+0x3a6>
    759e:	1d1a      	adds	r2, r3, #4
    75a0:	429a      	cmp	r2, r3
    75a2:	419b      	sbcs	r3, r3
    75a4:	425b      	negs	r3, r3
    75a6:	18e4      	adds	r4, r4, r3
    75a8:	0013      	movs	r3, r2
    75aa:	01e2      	lsls	r2, r4, #7
    75ac:	d504      	bpl.n	75b8 <__aeabi_dmul+0x3b4>
    75ae:	2080      	movs	r0, #128	; 0x80
    75b0:	4a51      	ldr	r2, [pc, #324]	; (76f8 <__aeabi_dmul+0x4f4>)
    75b2:	00c0      	lsls	r0, r0, #3
    75b4:	4014      	ands	r4, r2
    75b6:	4460      	add	r0, ip
    75b8:	4a50      	ldr	r2, [pc, #320]	; (76fc <__aeabi_dmul+0x4f8>)
    75ba:	4290      	cmp	r0, r2
    75bc:	dd00      	ble.n	75c0 <__aeabi_dmul+0x3bc>
    75be:	e6e3      	b.n	7388 <__aeabi_dmul+0x184>
    75c0:	2501      	movs	r5, #1
    75c2:	08db      	lsrs	r3, r3, #3
    75c4:	0762      	lsls	r2, r4, #29
    75c6:	431a      	orrs	r2, r3
    75c8:	0264      	lsls	r4, r4, #9
    75ca:	9b01      	ldr	r3, [sp, #4]
    75cc:	4691      	mov	r9, r2
    75ce:	0b22      	lsrs	r2, r4, #12
    75d0:	0544      	lsls	r4, r0, #21
    75d2:	0d64      	lsrs	r4, r4, #21
    75d4:	401d      	ands	r5, r3
    75d6:	e67c      	b.n	72d2 <__aeabi_dmul+0xce>
    75d8:	2280      	movs	r2, #128	; 0x80
    75da:	4659      	mov	r1, fp
    75dc:	0312      	lsls	r2, r2, #12
    75de:	4211      	tst	r1, r2
    75e0:	d008      	beq.n	75f4 <__aeabi_dmul+0x3f0>
    75e2:	4214      	tst	r4, r2
    75e4:	d106      	bne.n	75f4 <__aeabi_dmul+0x3f0>
    75e6:	4322      	orrs	r2, r4
    75e8:	0312      	lsls	r2, r2, #12
    75ea:	0b12      	lsrs	r2, r2, #12
    75ec:	4645      	mov	r5, r8
    75ee:	4699      	mov	r9, r3
    75f0:	4c43      	ldr	r4, [pc, #268]	; (7700 <__aeabi_dmul+0x4fc>)
    75f2:	e66e      	b.n	72d2 <__aeabi_dmul+0xce>
    75f4:	465b      	mov	r3, fp
    75f6:	431a      	orrs	r2, r3
    75f8:	0312      	lsls	r2, r2, #12
    75fa:	0b12      	lsrs	r2, r2, #12
    75fc:	4c40      	ldr	r4, [pc, #256]	; (7700 <__aeabi_dmul+0x4fc>)
    75fe:	e668      	b.n	72d2 <__aeabi_dmul+0xce>
    7600:	0003      	movs	r3, r0
    7602:	4654      	mov	r4, sl
    7604:	3b28      	subs	r3, #40	; 0x28
    7606:	409c      	lsls	r4, r3
    7608:	2300      	movs	r3, #0
    760a:	e6b9      	b.n	7380 <__aeabi_dmul+0x17c>
    760c:	f000 fd06 	bl	801c <__clzsi2>
    7610:	3020      	adds	r0, #32
    7612:	e6a6      	b.n	7362 <__aeabi_dmul+0x15e>
    7614:	0003      	movs	r3, r0
    7616:	3b28      	subs	r3, #40	; 0x28
    7618:	409f      	lsls	r7, r3
    761a:	2300      	movs	r3, #0
    761c:	46bb      	mov	fp, r7
    761e:	4699      	mov	r9, r3
    7620:	e68a      	b.n	7338 <__aeabi_dmul+0x134>
    7622:	f000 fcfb 	bl	801c <__clzsi2>
    7626:	3020      	adds	r0, #32
    7628:	e674      	b.n	7314 <__aeabi_dmul+0x110>
    762a:	46b4      	mov	ip, r6
    762c:	e7ad      	b.n	758a <__aeabi_dmul+0x386>
    762e:	2501      	movs	r5, #1
    7630:	1a2a      	subs	r2, r5, r0
    7632:	2a38      	cmp	r2, #56	; 0x38
    7634:	dd06      	ble.n	7644 <__aeabi_dmul+0x440>
    7636:	9b01      	ldr	r3, [sp, #4]
    7638:	2400      	movs	r4, #0
    763a:	401d      	ands	r5, r3
    763c:	2300      	movs	r3, #0
    763e:	2200      	movs	r2, #0
    7640:	4699      	mov	r9, r3
    7642:	e646      	b.n	72d2 <__aeabi_dmul+0xce>
    7644:	2a1f      	cmp	r2, #31
    7646:	dc21      	bgt.n	768c <__aeabi_dmul+0x488>
    7648:	2520      	movs	r5, #32
    764a:	0020      	movs	r0, r4
    764c:	1aad      	subs	r5, r5, r2
    764e:	001e      	movs	r6, r3
    7650:	40ab      	lsls	r3, r5
    7652:	40a8      	lsls	r0, r5
    7654:	40d6      	lsrs	r6, r2
    7656:	1e5d      	subs	r5, r3, #1
    7658:	41ab      	sbcs	r3, r5
    765a:	4330      	orrs	r0, r6
    765c:	4318      	orrs	r0, r3
    765e:	40d4      	lsrs	r4, r2
    7660:	0743      	lsls	r3, r0, #29
    7662:	d009      	beq.n	7678 <__aeabi_dmul+0x474>
    7664:	230f      	movs	r3, #15
    7666:	4003      	ands	r3, r0
    7668:	2b04      	cmp	r3, #4
    766a:	d005      	beq.n	7678 <__aeabi_dmul+0x474>
    766c:	0003      	movs	r3, r0
    766e:	1d18      	adds	r0, r3, #4
    7670:	4298      	cmp	r0, r3
    7672:	419b      	sbcs	r3, r3
    7674:	425b      	negs	r3, r3
    7676:	18e4      	adds	r4, r4, r3
    7678:	0223      	lsls	r3, r4, #8
    767a:	d521      	bpl.n	76c0 <__aeabi_dmul+0x4bc>
    767c:	2501      	movs	r5, #1
    767e:	9b01      	ldr	r3, [sp, #4]
    7680:	2401      	movs	r4, #1
    7682:	401d      	ands	r5, r3
    7684:	2300      	movs	r3, #0
    7686:	2200      	movs	r2, #0
    7688:	4699      	mov	r9, r3
    768a:	e622      	b.n	72d2 <__aeabi_dmul+0xce>
    768c:	251f      	movs	r5, #31
    768e:	0021      	movs	r1, r4
    7690:	426d      	negs	r5, r5
    7692:	1a28      	subs	r0, r5, r0
    7694:	40c1      	lsrs	r1, r0
    7696:	0008      	movs	r0, r1
    7698:	2a20      	cmp	r2, #32
    769a:	d01d      	beq.n	76d8 <__aeabi_dmul+0x4d4>
    769c:	355f      	adds	r5, #95	; 0x5f
    769e:	1aaa      	subs	r2, r5, r2
    76a0:	4094      	lsls	r4, r2
    76a2:	4323      	orrs	r3, r4
    76a4:	1e5c      	subs	r4, r3, #1
    76a6:	41a3      	sbcs	r3, r4
    76a8:	2507      	movs	r5, #7
    76aa:	4303      	orrs	r3, r0
    76ac:	401d      	ands	r5, r3
    76ae:	2200      	movs	r2, #0
    76b0:	2d00      	cmp	r5, #0
    76b2:	d009      	beq.n	76c8 <__aeabi_dmul+0x4c4>
    76b4:	220f      	movs	r2, #15
    76b6:	2400      	movs	r4, #0
    76b8:	401a      	ands	r2, r3
    76ba:	0018      	movs	r0, r3
    76bc:	2a04      	cmp	r2, #4
    76be:	d1d6      	bne.n	766e <__aeabi_dmul+0x46a>
    76c0:	0003      	movs	r3, r0
    76c2:	0765      	lsls	r5, r4, #29
    76c4:	0264      	lsls	r4, r4, #9
    76c6:	0b22      	lsrs	r2, r4, #12
    76c8:	08db      	lsrs	r3, r3, #3
    76ca:	432b      	orrs	r3, r5
    76cc:	2501      	movs	r5, #1
    76ce:	4699      	mov	r9, r3
    76d0:	9b01      	ldr	r3, [sp, #4]
    76d2:	2400      	movs	r4, #0
    76d4:	401d      	ands	r5, r3
    76d6:	e5fc      	b.n	72d2 <__aeabi_dmul+0xce>
    76d8:	2400      	movs	r4, #0
    76da:	e7e2      	b.n	76a2 <__aeabi_dmul+0x49e>
    76dc:	2280      	movs	r2, #128	; 0x80
    76de:	2501      	movs	r5, #1
    76e0:	0312      	lsls	r2, r2, #12
    76e2:	4322      	orrs	r2, r4
    76e4:	9901      	ldr	r1, [sp, #4]
    76e6:	0312      	lsls	r2, r2, #12
    76e8:	0b12      	lsrs	r2, r2, #12
    76ea:	400d      	ands	r5, r1
    76ec:	4699      	mov	r9, r3
    76ee:	4c04      	ldr	r4, [pc, #16]	; (7700 <__aeabi_dmul+0x4fc>)
    76f0:	e5ef      	b.n	72d2 <__aeabi_dmul+0xce>
    76f2:	46c0      	nop			; (mov r8, r8)
    76f4:	000003ff 	.word	0x000003ff
    76f8:	feffffff 	.word	0xfeffffff
    76fc:	000007fe 	.word	0x000007fe
    7700:	000007ff 	.word	0x000007ff

00007704 <__aeabi_dsub>:
    7704:	b5f0      	push	{r4, r5, r6, r7, lr}
    7706:	4646      	mov	r6, r8
    7708:	46d6      	mov	lr, sl
    770a:	464f      	mov	r7, r9
    770c:	030c      	lsls	r4, r1, #12
    770e:	b5c0      	push	{r6, r7, lr}
    7710:	0fcd      	lsrs	r5, r1, #31
    7712:	004e      	lsls	r6, r1, #1
    7714:	0a61      	lsrs	r1, r4, #9
    7716:	0f44      	lsrs	r4, r0, #29
    7718:	430c      	orrs	r4, r1
    771a:	00c1      	lsls	r1, r0, #3
    771c:	0058      	lsls	r0, r3, #1
    771e:	0d40      	lsrs	r0, r0, #21
    7720:	4684      	mov	ip, r0
    7722:	468a      	mov	sl, r1
    7724:	000f      	movs	r7, r1
    7726:	0319      	lsls	r1, r3, #12
    7728:	0f50      	lsrs	r0, r2, #29
    772a:	0a49      	lsrs	r1, r1, #9
    772c:	4301      	orrs	r1, r0
    772e:	48c6      	ldr	r0, [pc, #792]	; (7a48 <__aeabi_dsub+0x344>)
    7730:	0d76      	lsrs	r6, r6, #21
    7732:	46a8      	mov	r8, r5
    7734:	0fdb      	lsrs	r3, r3, #31
    7736:	00d2      	lsls	r2, r2, #3
    7738:	4584      	cmp	ip, r0
    773a:	d100      	bne.n	773e <__aeabi_dsub+0x3a>
    773c:	e0d8      	b.n	78f0 <__aeabi_dsub+0x1ec>
    773e:	2001      	movs	r0, #1
    7740:	4043      	eors	r3, r0
    7742:	42ab      	cmp	r3, r5
    7744:	d100      	bne.n	7748 <__aeabi_dsub+0x44>
    7746:	e0a6      	b.n	7896 <__aeabi_dsub+0x192>
    7748:	4660      	mov	r0, ip
    774a:	1a35      	subs	r5, r6, r0
    774c:	2d00      	cmp	r5, #0
    774e:	dc00      	bgt.n	7752 <__aeabi_dsub+0x4e>
    7750:	e105      	b.n	795e <__aeabi_dsub+0x25a>
    7752:	2800      	cmp	r0, #0
    7754:	d110      	bne.n	7778 <__aeabi_dsub+0x74>
    7756:	000b      	movs	r3, r1
    7758:	4313      	orrs	r3, r2
    775a:	d100      	bne.n	775e <__aeabi_dsub+0x5a>
    775c:	e0d7      	b.n	790e <__aeabi_dsub+0x20a>
    775e:	1e6b      	subs	r3, r5, #1
    7760:	2b00      	cmp	r3, #0
    7762:	d000      	beq.n	7766 <__aeabi_dsub+0x62>
    7764:	e14b      	b.n	79fe <__aeabi_dsub+0x2fa>
    7766:	4653      	mov	r3, sl
    7768:	1a9f      	subs	r7, r3, r2
    776a:	45ba      	cmp	sl, r7
    776c:	4180      	sbcs	r0, r0
    776e:	1a64      	subs	r4, r4, r1
    7770:	4240      	negs	r0, r0
    7772:	1a24      	subs	r4, r4, r0
    7774:	2601      	movs	r6, #1
    7776:	e01e      	b.n	77b6 <__aeabi_dsub+0xb2>
    7778:	4bb3      	ldr	r3, [pc, #716]	; (7a48 <__aeabi_dsub+0x344>)
    777a:	429e      	cmp	r6, r3
    777c:	d048      	beq.n	7810 <__aeabi_dsub+0x10c>
    777e:	2380      	movs	r3, #128	; 0x80
    7780:	041b      	lsls	r3, r3, #16
    7782:	4319      	orrs	r1, r3
    7784:	2d38      	cmp	r5, #56	; 0x38
    7786:	dd00      	ble.n	778a <__aeabi_dsub+0x86>
    7788:	e119      	b.n	79be <__aeabi_dsub+0x2ba>
    778a:	2d1f      	cmp	r5, #31
    778c:	dd00      	ble.n	7790 <__aeabi_dsub+0x8c>
    778e:	e14c      	b.n	7a2a <__aeabi_dsub+0x326>
    7790:	2320      	movs	r3, #32
    7792:	000f      	movs	r7, r1
    7794:	1b5b      	subs	r3, r3, r5
    7796:	0010      	movs	r0, r2
    7798:	409a      	lsls	r2, r3
    779a:	409f      	lsls	r7, r3
    779c:	40e8      	lsrs	r0, r5
    779e:	1e53      	subs	r3, r2, #1
    77a0:	419a      	sbcs	r2, r3
    77a2:	40e9      	lsrs	r1, r5
    77a4:	4307      	orrs	r7, r0
    77a6:	4317      	orrs	r7, r2
    77a8:	4653      	mov	r3, sl
    77aa:	1bdf      	subs	r7, r3, r7
    77ac:	1a61      	subs	r1, r4, r1
    77ae:	45ba      	cmp	sl, r7
    77b0:	41a4      	sbcs	r4, r4
    77b2:	4264      	negs	r4, r4
    77b4:	1b0c      	subs	r4, r1, r4
    77b6:	0223      	lsls	r3, r4, #8
    77b8:	d400      	bmi.n	77bc <__aeabi_dsub+0xb8>
    77ba:	e0c5      	b.n	7948 <__aeabi_dsub+0x244>
    77bc:	0264      	lsls	r4, r4, #9
    77be:	0a65      	lsrs	r5, r4, #9
    77c0:	2d00      	cmp	r5, #0
    77c2:	d100      	bne.n	77c6 <__aeabi_dsub+0xc2>
    77c4:	e0f6      	b.n	79b4 <__aeabi_dsub+0x2b0>
    77c6:	0028      	movs	r0, r5
    77c8:	f000 fc28 	bl	801c <__clzsi2>
    77cc:	0003      	movs	r3, r0
    77ce:	3b08      	subs	r3, #8
    77d0:	2b1f      	cmp	r3, #31
    77d2:	dd00      	ble.n	77d6 <__aeabi_dsub+0xd2>
    77d4:	e0e9      	b.n	79aa <__aeabi_dsub+0x2a6>
    77d6:	2220      	movs	r2, #32
    77d8:	003c      	movs	r4, r7
    77da:	1ad2      	subs	r2, r2, r3
    77dc:	409d      	lsls	r5, r3
    77de:	40d4      	lsrs	r4, r2
    77e0:	409f      	lsls	r7, r3
    77e2:	4325      	orrs	r5, r4
    77e4:	429e      	cmp	r6, r3
    77e6:	dd00      	ble.n	77ea <__aeabi_dsub+0xe6>
    77e8:	e0db      	b.n	79a2 <__aeabi_dsub+0x29e>
    77ea:	1b9e      	subs	r6, r3, r6
    77ec:	1c73      	adds	r3, r6, #1
    77ee:	2b1f      	cmp	r3, #31
    77f0:	dd00      	ble.n	77f4 <__aeabi_dsub+0xf0>
    77f2:	e10a      	b.n	7a0a <__aeabi_dsub+0x306>
    77f4:	2220      	movs	r2, #32
    77f6:	0038      	movs	r0, r7
    77f8:	1ad2      	subs	r2, r2, r3
    77fa:	0029      	movs	r1, r5
    77fc:	4097      	lsls	r7, r2
    77fe:	002c      	movs	r4, r5
    7800:	4091      	lsls	r1, r2
    7802:	40d8      	lsrs	r0, r3
    7804:	1e7a      	subs	r2, r7, #1
    7806:	4197      	sbcs	r7, r2
    7808:	40dc      	lsrs	r4, r3
    780a:	2600      	movs	r6, #0
    780c:	4301      	orrs	r1, r0
    780e:	430f      	orrs	r7, r1
    7810:	077b      	lsls	r3, r7, #29
    7812:	d009      	beq.n	7828 <__aeabi_dsub+0x124>
    7814:	230f      	movs	r3, #15
    7816:	403b      	ands	r3, r7
    7818:	2b04      	cmp	r3, #4
    781a:	d005      	beq.n	7828 <__aeabi_dsub+0x124>
    781c:	1d3b      	adds	r3, r7, #4
    781e:	42bb      	cmp	r3, r7
    7820:	41bf      	sbcs	r7, r7
    7822:	427f      	negs	r7, r7
    7824:	19e4      	adds	r4, r4, r7
    7826:	001f      	movs	r7, r3
    7828:	0223      	lsls	r3, r4, #8
    782a:	d525      	bpl.n	7878 <__aeabi_dsub+0x174>
    782c:	4b86      	ldr	r3, [pc, #536]	; (7a48 <__aeabi_dsub+0x344>)
    782e:	3601      	adds	r6, #1
    7830:	429e      	cmp	r6, r3
    7832:	d100      	bne.n	7836 <__aeabi_dsub+0x132>
    7834:	e0af      	b.n	7996 <__aeabi_dsub+0x292>
    7836:	4b85      	ldr	r3, [pc, #532]	; (7a4c <__aeabi_dsub+0x348>)
    7838:	2501      	movs	r5, #1
    783a:	401c      	ands	r4, r3
    783c:	4643      	mov	r3, r8
    783e:	0762      	lsls	r2, r4, #29
    7840:	08ff      	lsrs	r7, r7, #3
    7842:	0264      	lsls	r4, r4, #9
    7844:	0576      	lsls	r6, r6, #21
    7846:	4317      	orrs	r7, r2
    7848:	0b24      	lsrs	r4, r4, #12
    784a:	0d76      	lsrs	r6, r6, #21
    784c:	401d      	ands	r5, r3
    784e:	2100      	movs	r1, #0
    7850:	0324      	lsls	r4, r4, #12
    7852:	0b23      	lsrs	r3, r4, #12
    7854:	0d0c      	lsrs	r4, r1, #20
    7856:	4a7e      	ldr	r2, [pc, #504]	; (7a50 <__aeabi_dsub+0x34c>)
    7858:	0524      	lsls	r4, r4, #20
    785a:	431c      	orrs	r4, r3
    785c:	4014      	ands	r4, r2
    785e:	0533      	lsls	r3, r6, #20
    7860:	4323      	orrs	r3, r4
    7862:	005b      	lsls	r3, r3, #1
    7864:	07ed      	lsls	r5, r5, #31
    7866:	085b      	lsrs	r3, r3, #1
    7868:	432b      	orrs	r3, r5
    786a:	0038      	movs	r0, r7
    786c:	0019      	movs	r1, r3
    786e:	bc1c      	pop	{r2, r3, r4}
    7870:	4690      	mov	r8, r2
    7872:	4699      	mov	r9, r3
    7874:	46a2      	mov	sl, r4
    7876:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7878:	2501      	movs	r5, #1
    787a:	4643      	mov	r3, r8
    787c:	0762      	lsls	r2, r4, #29
    787e:	08ff      	lsrs	r7, r7, #3
    7880:	4317      	orrs	r7, r2
    7882:	08e4      	lsrs	r4, r4, #3
    7884:	401d      	ands	r5, r3
    7886:	4b70      	ldr	r3, [pc, #448]	; (7a48 <__aeabi_dsub+0x344>)
    7888:	429e      	cmp	r6, r3
    788a:	d036      	beq.n	78fa <__aeabi_dsub+0x1f6>
    788c:	0324      	lsls	r4, r4, #12
    788e:	0576      	lsls	r6, r6, #21
    7890:	0b24      	lsrs	r4, r4, #12
    7892:	0d76      	lsrs	r6, r6, #21
    7894:	e7db      	b.n	784e <__aeabi_dsub+0x14a>
    7896:	4663      	mov	r3, ip
    7898:	1af3      	subs	r3, r6, r3
    789a:	2b00      	cmp	r3, #0
    789c:	dc00      	bgt.n	78a0 <__aeabi_dsub+0x19c>
    789e:	e094      	b.n	79ca <__aeabi_dsub+0x2c6>
    78a0:	4660      	mov	r0, ip
    78a2:	2800      	cmp	r0, #0
    78a4:	d035      	beq.n	7912 <__aeabi_dsub+0x20e>
    78a6:	4868      	ldr	r0, [pc, #416]	; (7a48 <__aeabi_dsub+0x344>)
    78a8:	4286      	cmp	r6, r0
    78aa:	d0b1      	beq.n	7810 <__aeabi_dsub+0x10c>
    78ac:	2780      	movs	r7, #128	; 0x80
    78ae:	043f      	lsls	r7, r7, #16
    78b0:	4339      	orrs	r1, r7
    78b2:	2b38      	cmp	r3, #56	; 0x38
    78b4:	dc00      	bgt.n	78b8 <__aeabi_dsub+0x1b4>
    78b6:	e0fd      	b.n	7ab4 <__aeabi_dsub+0x3b0>
    78b8:	430a      	orrs	r2, r1
    78ba:	0017      	movs	r7, r2
    78bc:	2100      	movs	r1, #0
    78be:	1e7a      	subs	r2, r7, #1
    78c0:	4197      	sbcs	r7, r2
    78c2:	4457      	add	r7, sl
    78c4:	4557      	cmp	r7, sl
    78c6:	4180      	sbcs	r0, r0
    78c8:	1909      	adds	r1, r1, r4
    78ca:	4244      	negs	r4, r0
    78cc:	190c      	adds	r4, r1, r4
    78ce:	0223      	lsls	r3, r4, #8
    78d0:	d53a      	bpl.n	7948 <__aeabi_dsub+0x244>
    78d2:	4b5d      	ldr	r3, [pc, #372]	; (7a48 <__aeabi_dsub+0x344>)
    78d4:	3601      	adds	r6, #1
    78d6:	429e      	cmp	r6, r3
    78d8:	d100      	bne.n	78dc <__aeabi_dsub+0x1d8>
    78da:	e14b      	b.n	7b74 <__aeabi_dsub+0x470>
    78dc:	2201      	movs	r2, #1
    78de:	4b5b      	ldr	r3, [pc, #364]	; (7a4c <__aeabi_dsub+0x348>)
    78e0:	401c      	ands	r4, r3
    78e2:	087b      	lsrs	r3, r7, #1
    78e4:	4017      	ands	r7, r2
    78e6:	431f      	orrs	r7, r3
    78e8:	07e2      	lsls	r2, r4, #31
    78ea:	4317      	orrs	r7, r2
    78ec:	0864      	lsrs	r4, r4, #1
    78ee:	e78f      	b.n	7810 <__aeabi_dsub+0x10c>
    78f0:	0008      	movs	r0, r1
    78f2:	4310      	orrs	r0, r2
    78f4:	d000      	beq.n	78f8 <__aeabi_dsub+0x1f4>
    78f6:	e724      	b.n	7742 <__aeabi_dsub+0x3e>
    78f8:	e721      	b.n	773e <__aeabi_dsub+0x3a>
    78fa:	0023      	movs	r3, r4
    78fc:	433b      	orrs	r3, r7
    78fe:	d100      	bne.n	7902 <__aeabi_dsub+0x1fe>
    7900:	e1b9      	b.n	7c76 <__aeabi_dsub+0x572>
    7902:	2280      	movs	r2, #128	; 0x80
    7904:	0312      	lsls	r2, r2, #12
    7906:	4314      	orrs	r4, r2
    7908:	0324      	lsls	r4, r4, #12
    790a:	0b24      	lsrs	r4, r4, #12
    790c:	e79f      	b.n	784e <__aeabi_dsub+0x14a>
    790e:	002e      	movs	r6, r5
    7910:	e77e      	b.n	7810 <__aeabi_dsub+0x10c>
    7912:	0008      	movs	r0, r1
    7914:	4310      	orrs	r0, r2
    7916:	d100      	bne.n	791a <__aeabi_dsub+0x216>
    7918:	e0ca      	b.n	7ab0 <__aeabi_dsub+0x3ac>
    791a:	1e58      	subs	r0, r3, #1
    791c:	4684      	mov	ip, r0
    791e:	2800      	cmp	r0, #0
    7920:	d000      	beq.n	7924 <__aeabi_dsub+0x220>
    7922:	e0e7      	b.n	7af4 <__aeabi_dsub+0x3f0>
    7924:	4452      	add	r2, sl
    7926:	4552      	cmp	r2, sl
    7928:	4180      	sbcs	r0, r0
    792a:	1864      	adds	r4, r4, r1
    792c:	4240      	negs	r0, r0
    792e:	1824      	adds	r4, r4, r0
    7930:	0017      	movs	r7, r2
    7932:	2601      	movs	r6, #1
    7934:	0223      	lsls	r3, r4, #8
    7936:	d507      	bpl.n	7948 <__aeabi_dsub+0x244>
    7938:	2602      	movs	r6, #2
    793a:	e7cf      	b.n	78dc <__aeabi_dsub+0x1d8>
    793c:	4664      	mov	r4, ip
    793e:	432c      	orrs	r4, r5
    7940:	d100      	bne.n	7944 <__aeabi_dsub+0x240>
    7942:	e1b3      	b.n	7cac <__aeabi_dsub+0x5a8>
    7944:	002c      	movs	r4, r5
    7946:	4667      	mov	r7, ip
    7948:	077b      	lsls	r3, r7, #29
    794a:	d000      	beq.n	794e <__aeabi_dsub+0x24a>
    794c:	e762      	b.n	7814 <__aeabi_dsub+0x110>
    794e:	0763      	lsls	r3, r4, #29
    7950:	08ff      	lsrs	r7, r7, #3
    7952:	431f      	orrs	r7, r3
    7954:	2501      	movs	r5, #1
    7956:	4643      	mov	r3, r8
    7958:	08e4      	lsrs	r4, r4, #3
    795a:	401d      	ands	r5, r3
    795c:	e793      	b.n	7886 <__aeabi_dsub+0x182>
    795e:	2d00      	cmp	r5, #0
    7960:	d178      	bne.n	7a54 <__aeabi_dsub+0x350>
    7962:	1c75      	adds	r5, r6, #1
    7964:	056d      	lsls	r5, r5, #21
    7966:	0d6d      	lsrs	r5, r5, #21
    7968:	2d01      	cmp	r5, #1
    796a:	dc00      	bgt.n	796e <__aeabi_dsub+0x26a>
    796c:	e0f2      	b.n	7b54 <__aeabi_dsub+0x450>
    796e:	4650      	mov	r0, sl
    7970:	1a80      	subs	r0, r0, r2
    7972:	4582      	cmp	sl, r0
    7974:	41bf      	sbcs	r7, r7
    7976:	1a65      	subs	r5, r4, r1
    7978:	427f      	negs	r7, r7
    797a:	1bed      	subs	r5, r5, r7
    797c:	4684      	mov	ip, r0
    797e:	0228      	lsls	r0, r5, #8
    7980:	d400      	bmi.n	7984 <__aeabi_dsub+0x280>
    7982:	e08c      	b.n	7a9e <__aeabi_dsub+0x39a>
    7984:	4650      	mov	r0, sl
    7986:	1a17      	subs	r7, r2, r0
    7988:	42ba      	cmp	r2, r7
    798a:	4192      	sbcs	r2, r2
    798c:	1b0c      	subs	r4, r1, r4
    798e:	4255      	negs	r5, r2
    7990:	1b65      	subs	r5, r4, r5
    7992:	4698      	mov	r8, r3
    7994:	e714      	b.n	77c0 <__aeabi_dsub+0xbc>
    7996:	2501      	movs	r5, #1
    7998:	4643      	mov	r3, r8
    799a:	2400      	movs	r4, #0
    799c:	401d      	ands	r5, r3
    799e:	2700      	movs	r7, #0
    79a0:	e755      	b.n	784e <__aeabi_dsub+0x14a>
    79a2:	4c2a      	ldr	r4, [pc, #168]	; (7a4c <__aeabi_dsub+0x348>)
    79a4:	1af6      	subs	r6, r6, r3
    79a6:	402c      	ands	r4, r5
    79a8:	e732      	b.n	7810 <__aeabi_dsub+0x10c>
    79aa:	003d      	movs	r5, r7
    79ac:	3828      	subs	r0, #40	; 0x28
    79ae:	4085      	lsls	r5, r0
    79b0:	2700      	movs	r7, #0
    79b2:	e717      	b.n	77e4 <__aeabi_dsub+0xe0>
    79b4:	0038      	movs	r0, r7
    79b6:	f000 fb31 	bl	801c <__clzsi2>
    79ba:	3020      	adds	r0, #32
    79bc:	e706      	b.n	77cc <__aeabi_dsub+0xc8>
    79be:	430a      	orrs	r2, r1
    79c0:	0017      	movs	r7, r2
    79c2:	2100      	movs	r1, #0
    79c4:	1e7a      	subs	r2, r7, #1
    79c6:	4197      	sbcs	r7, r2
    79c8:	e6ee      	b.n	77a8 <__aeabi_dsub+0xa4>
    79ca:	2b00      	cmp	r3, #0
    79cc:	d000      	beq.n	79d0 <__aeabi_dsub+0x2cc>
    79ce:	e0e5      	b.n	7b9c <__aeabi_dsub+0x498>
    79d0:	1c73      	adds	r3, r6, #1
    79d2:	469c      	mov	ip, r3
    79d4:	055b      	lsls	r3, r3, #21
    79d6:	0d5b      	lsrs	r3, r3, #21
    79d8:	2b01      	cmp	r3, #1
    79da:	dc00      	bgt.n	79de <__aeabi_dsub+0x2da>
    79dc:	e09f      	b.n	7b1e <__aeabi_dsub+0x41a>
    79de:	4b1a      	ldr	r3, [pc, #104]	; (7a48 <__aeabi_dsub+0x344>)
    79e0:	459c      	cmp	ip, r3
    79e2:	d100      	bne.n	79e6 <__aeabi_dsub+0x2e2>
    79e4:	e0c5      	b.n	7b72 <__aeabi_dsub+0x46e>
    79e6:	4452      	add	r2, sl
    79e8:	4552      	cmp	r2, sl
    79ea:	4180      	sbcs	r0, r0
    79ec:	1864      	adds	r4, r4, r1
    79ee:	4240      	negs	r0, r0
    79f0:	1824      	adds	r4, r4, r0
    79f2:	07e7      	lsls	r7, r4, #31
    79f4:	0852      	lsrs	r2, r2, #1
    79f6:	4317      	orrs	r7, r2
    79f8:	0864      	lsrs	r4, r4, #1
    79fa:	4666      	mov	r6, ip
    79fc:	e708      	b.n	7810 <__aeabi_dsub+0x10c>
    79fe:	4812      	ldr	r0, [pc, #72]	; (7a48 <__aeabi_dsub+0x344>)
    7a00:	4285      	cmp	r5, r0
    7a02:	d100      	bne.n	7a06 <__aeabi_dsub+0x302>
    7a04:	e085      	b.n	7b12 <__aeabi_dsub+0x40e>
    7a06:	001d      	movs	r5, r3
    7a08:	e6bc      	b.n	7784 <__aeabi_dsub+0x80>
    7a0a:	0029      	movs	r1, r5
    7a0c:	3e1f      	subs	r6, #31
    7a0e:	40f1      	lsrs	r1, r6
    7a10:	2b20      	cmp	r3, #32
    7a12:	d100      	bne.n	7a16 <__aeabi_dsub+0x312>
    7a14:	e07f      	b.n	7b16 <__aeabi_dsub+0x412>
    7a16:	2240      	movs	r2, #64	; 0x40
    7a18:	1ad3      	subs	r3, r2, r3
    7a1a:	409d      	lsls	r5, r3
    7a1c:	432f      	orrs	r7, r5
    7a1e:	1e7d      	subs	r5, r7, #1
    7a20:	41af      	sbcs	r7, r5
    7a22:	2400      	movs	r4, #0
    7a24:	430f      	orrs	r7, r1
    7a26:	2600      	movs	r6, #0
    7a28:	e78e      	b.n	7948 <__aeabi_dsub+0x244>
    7a2a:	002b      	movs	r3, r5
    7a2c:	000f      	movs	r7, r1
    7a2e:	3b20      	subs	r3, #32
    7a30:	40df      	lsrs	r7, r3
    7a32:	2d20      	cmp	r5, #32
    7a34:	d071      	beq.n	7b1a <__aeabi_dsub+0x416>
    7a36:	2340      	movs	r3, #64	; 0x40
    7a38:	1b5d      	subs	r5, r3, r5
    7a3a:	40a9      	lsls	r1, r5
    7a3c:	430a      	orrs	r2, r1
    7a3e:	1e51      	subs	r1, r2, #1
    7a40:	418a      	sbcs	r2, r1
    7a42:	2100      	movs	r1, #0
    7a44:	4317      	orrs	r7, r2
    7a46:	e6af      	b.n	77a8 <__aeabi_dsub+0xa4>
    7a48:	000007ff 	.word	0x000007ff
    7a4c:	ff7fffff 	.word	0xff7fffff
    7a50:	800fffff 	.word	0x800fffff
    7a54:	2e00      	cmp	r6, #0
    7a56:	d03e      	beq.n	7ad6 <__aeabi_dsub+0x3d2>
    7a58:	4eb3      	ldr	r6, [pc, #716]	; (7d28 <__aeabi_dsub+0x624>)
    7a5a:	45b4      	cmp	ip, r6
    7a5c:	d045      	beq.n	7aea <__aeabi_dsub+0x3e6>
    7a5e:	2680      	movs	r6, #128	; 0x80
    7a60:	0436      	lsls	r6, r6, #16
    7a62:	426d      	negs	r5, r5
    7a64:	4334      	orrs	r4, r6
    7a66:	2d38      	cmp	r5, #56	; 0x38
    7a68:	dd00      	ble.n	7a6c <__aeabi_dsub+0x368>
    7a6a:	e0a8      	b.n	7bbe <__aeabi_dsub+0x4ba>
    7a6c:	2d1f      	cmp	r5, #31
    7a6e:	dd00      	ble.n	7a72 <__aeabi_dsub+0x36e>
    7a70:	e11f      	b.n	7cb2 <__aeabi_dsub+0x5ae>
    7a72:	2620      	movs	r6, #32
    7a74:	0027      	movs	r7, r4
    7a76:	4650      	mov	r0, sl
    7a78:	1b76      	subs	r6, r6, r5
    7a7a:	40b7      	lsls	r7, r6
    7a7c:	40e8      	lsrs	r0, r5
    7a7e:	4307      	orrs	r7, r0
    7a80:	4650      	mov	r0, sl
    7a82:	40b0      	lsls	r0, r6
    7a84:	1e46      	subs	r6, r0, #1
    7a86:	41b0      	sbcs	r0, r6
    7a88:	40ec      	lsrs	r4, r5
    7a8a:	4338      	orrs	r0, r7
    7a8c:	1a17      	subs	r7, r2, r0
    7a8e:	42ba      	cmp	r2, r7
    7a90:	4192      	sbcs	r2, r2
    7a92:	1b0c      	subs	r4, r1, r4
    7a94:	4252      	negs	r2, r2
    7a96:	1aa4      	subs	r4, r4, r2
    7a98:	4666      	mov	r6, ip
    7a9a:	4698      	mov	r8, r3
    7a9c:	e68b      	b.n	77b6 <__aeabi_dsub+0xb2>
    7a9e:	4664      	mov	r4, ip
    7aa0:	4667      	mov	r7, ip
    7aa2:	432c      	orrs	r4, r5
    7aa4:	d000      	beq.n	7aa8 <__aeabi_dsub+0x3a4>
    7aa6:	e68b      	b.n	77c0 <__aeabi_dsub+0xbc>
    7aa8:	2500      	movs	r5, #0
    7aaa:	2600      	movs	r6, #0
    7aac:	2700      	movs	r7, #0
    7aae:	e6ea      	b.n	7886 <__aeabi_dsub+0x182>
    7ab0:	001e      	movs	r6, r3
    7ab2:	e6ad      	b.n	7810 <__aeabi_dsub+0x10c>
    7ab4:	2b1f      	cmp	r3, #31
    7ab6:	dc60      	bgt.n	7b7a <__aeabi_dsub+0x476>
    7ab8:	2720      	movs	r7, #32
    7aba:	1af8      	subs	r0, r7, r3
    7abc:	000f      	movs	r7, r1
    7abe:	4684      	mov	ip, r0
    7ac0:	4087      	lsls	r7, r0
    7ac2:	0010      	movs	r0, r2
    7ac4:	40d8      	lsrs	r0, r3
    7ac6:	4307      	orrs	r7, r0
    7ac8:	4660      	mov	r0, ip
    7aca:	4082      	lsls	r2, r0
    7acc:	1e50      	subs	r0, r2, #1
    7ace:	4182      	sbcs	r2, r0
    7ad0:	40d9      	lsrs	r1, r3
    7ad2:	4317      	orrs	r7, r2
    7ad4:	e6f5      	b.n	78c2 <__aeabi_dsub+0x1be>
    7ad6:	0026      	movs	r6, r4
    7ad8:	4650      	mov	r0, sl
    7ada:	4306      	orrs	r6, r0
    7adc:	d005      	beq.n	7aea <__aeabi_dsub+0x3e6>
    7ade:	43ed      	mvns	r5, r5
    7ae0:	2d00      	cmp	r5, #0
    7ae2:	d0d3      	beq.n	7a8c <__aeabi_dsub+0x388>
    7ae4:	4e90      	ldr	r6, [pc, #576]	; (7d28 <__aeabi_dsub+0x624>)
    7ae6:	45b4      	cmp	ip, r6
    7ae8:	d1bd      	bne.n	7a66 <__aeabi_dsub+0x362>
    7aea:	000c      	movs	r4, r1
    7aec:	0017      	movs	r7, r2
    7aee:	4666      	mov	r6, ip
    7af0:	4698      	mov	r8, r3
    7af2:	e68d      	b.n	7810 <__aeabi_dsub+0x10c>
    7af4:	488c      	ldr	r0, [pc, #560]	; (7d28 <__aeabi_dsub+0x624>)
    7af6:	4283      	cmp	r3, r0
    7af8:	d00b      	beq.n	7b12 <__aeabi_dsub+0x40e>
    7afa:	4663      	mov	r3, ip
    7afc:	e6d9      	b.n	78b2 <__aeabi_dsub+0x1ae>
    7afe:	2d00      	cmp	r5, #0
    7b00:	d000      	beq.n	7b04 <__aeabi_dsub+0x400>
    7b02:	e096      	b.n	7c32 <__aeabi_dsub+0x52e>
    7b04:	0008      	movs	r0, r1
    7b06:	4310      	orrs	r0, r2
    7b08:	d100      	bne.n	7b0c <__aeabi_dsub+0x408>
    7b0a:	e0e2      	b.n	7cd2 <__aeabi_dsub+0x5ce>
    7b0c:	000c      	movs	r4, r1
    7b0e:	0017      	movs	r7, r2
    7b10:	4698      	mov	r8, r3
    7b12:	4e85      	ldr	r6, [pc, #532]	; (7d28 <__aeabi_dsub+0x624>)
    7b14:	e67c      	b.n	7810 <__aeabi_dsub+0x10c>
    7b16:	2500      	movs	r5, #0
    7b18:	e780      	b.n	7a1c <__aeabi_dsub+0x318>
    7b1a:	2100      	movs	r1, #0
    7b1c:	e78e      	b.n	7a3c <__aeabi_dsub+0x338>
    7b1e:	0023      	movs	r3, r4
    7b20:	4650      	mov	r0, sl
    7b22:	4303      	orrs	r3, r0
    7b24:	2e00      	cmp	r6, #0
    7b26:	d000      	beq.n	7b2a <__aeabi_dsub+0x426>
    7b28:	e0a8      	b.n	7c7c <__aeabi_dsub+0x578>
    7b2a:	2b00      	cmp	r3, #0
    7b2c:	d100      	bne.n	7b30 <__aeabi_dsub+0x42c>
    7b2e:	e0de      	b.n	7cee <__aeabi_dsub+0x5ea>
    7b30:	000b      	movs	r3, r1
    7b32:	4313      	orrs	r3, r2
    7b34:	d100      	bne.n	7b38 <__aeabi_dsub+0x434>
    7b36:	e66b      	b.n	7810 <__aeabi_dsub+0x10c>
    7b38:	4452      	add	r2, sl
    7b3a:	4552      	cmp	r2, sl
    7b3c:	4180      	sbcs	r0, r0
    7b3e:	1864      	adds	r4, r4, r1
    7b40:	4240      	negs	r0, r0
    7b42:	1824      	adds	r4, r4, r0
    7b44:	0017      	movs	r7, r2
    7b46:	0223      	lsls	r3, r4, #8
    7b48:	d400      	bmi.n	7b4c <__aeabi_dsub+0x448>
    7b4a:	e6fd      	b.n	7948 <__aeabi_dsub+0x244>
    7b4c:	4b77      	ldr	r3, [pc, #476]	; (7d2c <__aeabi_dsub+0x628>)
    7b4e:	4666      	mov	r6, ip
    7b50:	401c      	ands	r4, r3
    7b52:	e65d      	b.n	7810 <__aeabi_dsub+0x10c>
    7b54:	0025      	movs	r5, r4
    7b56:	4650      	mov	r0, sl
    7b58:	4305      	orrs	r5, r0
    7b5a:	2e00      	cmp	r6, #0
    7b5c:	d1cf      	bne.n	7afe <__aeabi_dsub+0x3fa>
    7b5e:	2d00      	cmp	r5, #0
    7b60:	d14f      	bne.n	7c02 <__aeabi_dsub+0x4fe>
    7b62:	000c      	movs	r4, r1
    7b64:	4314      	orrs	r4, r2
    7b66:	d100      	bne.n	7b6a <__aeabi_dsub+0x466>
    7b68:	e0a0      	b.n	7cac <__aeabi_dsub+0x5a8>
    7b6a:	000c      	movs	r4, r1
    7b6c:	0017      	movs	r7, r2
    7b6e:	4698      	mov	r8, r3
    7b70:	e64e      	b.n	7810 <__aeabi_dsub+0x10c>
    7b72:	4666      	mov	r6, ip
    7b74:	2400      	movs	r4, #0
    7b76:	2700      	movs	r7, #0
    7b78:	e685      	b.n	7886 <__aeabi_dsub+0x182>
    7b7a:	001f      	movs	r7, r3
    7b7c:	0008      	movs	r0, r1
    7b7e:	3f20      	subs	r7, #32
    7b80:	40f8      	lsrs	r0, r7
    7b82:	0007      	movs	r7, r0
    7b84:	2b20      	cmp	r3, #32
    7b86:	d100      	bne.n	7b8a <__aeabi_dsub+0x486>
    7b88:	e08e      	b.n	7ca8 <__aeabi_dsub+0x5a4>
    7b8a:	2040      	movs	r0, #64	; 0x40
    7b8c:	1ac3      	subs	r3, r0, r3
    7b8e:	4099      	lsls	r1, r3
    7b90:	430a      	orrs	r2, r1
    7b92:	1e51      	subs	r1, r2, #1
    7b94:	418a      	sbcs	r2, r1
    7b96:	2100      	movs	r1, #0
    7b98:	4317      	orrs	r7, r2
    7b9a:	e692      	b.n	78c2 <__aeabi_dsub+0x1be>
    7b9c:	2e00      	cmp	r6, #0
    7b9e:	d114      	bne.n	7bca <__aeabi_dsub+0x4c6>
    7ba0:	0026      	movs	r6, r4
    7ba2:	4650      	mov	r0, sl
    7ba4:	4306      	orrs	r6, r0
    7ba6:	d062      	beq.n	7c6e <__aeabi_dsub+0x56a>
    7ba8:	43db      	mvns	r3, r3
    7baa:	2b00      	cmp	r3, #0
    7bac:	d15c      	bne.n	7c68 <__aeabi_dsub+0x564>
    7bae:	1887      	adds	r7, r0, r2
    7bb0:	4297      	cmp	r7, r2
    7bb2:	4192      	sbcs	r2, r2
    7bb4:	1864      	adds	r4, r4, r1
    7bb6:	4252      	negs	r2, r2
    7bb8:	18a4      	adds	r4, r4, r2
    7bba:	4666      	mov	r6, ip
    7bbc:	e687      	b.n	78ce <__aeabi_dsub+0x1ca>
    7bbe:	4650      	mov	r0, sl
    7bc0:	4320      	orrs	r0, r4
    7bc2:	1e44      	subs	r4, r0, #1
    7bc4:	41a0      	sbcs	r0, r4
    7bc6:	2400      	movs	r4, #0
    7bc8:	e760      	b.n	7a8c <__aeabi_dsub+0x388>
    7bca:	4e57      	ldr	r6, [pc, #348]	; (7d28 <__aeabi_dsub+0x624>)
    7bcc:	45b4      	cmp	ip, r6
    7bce:	d04e      	beq.n	7c6e <__aeabi_dsub+0x56a>
    7bd0:	2680      	movs	r6, #128	; 0x80
    7bd2:	0436      	lsls	r6, r6, #16
    7bd4:	425b      	negs	r3, r3
    7bd6:	4334      	orrs	r4, r6
    7bd8:	2b38      	cmp	r3, #56	; 0x38
    7bda:	dd00      	ble.n	7bde <__aeabi_dsub+0x4da>
    7bdc:	e07f      	b.n	7cde <__aeabi_dsub+0x5da>
    7bde:	2b1f      	cmp	r3, #31
    7be0:	dd00      	ble.n	7be4 <__aeabi_dsub+0x4e0>
    7be2:	e08b      	b.n	7cfc <__aeabi_dsub+0x5f8>
    7be4:	2620      	movs	r6, #32
    7be6:	0027      	movs	r7, r4
    7be8:	4650      	mov	r0, sl
    7bea:	1af6      	subs	r6, r6, r3
    7bec:	40b7      	lsls	r7, r6
    7bee:	40d8      	lsrs	r0, r3
    7bf0:	4307      	orrs	r7, r0
    7bf2:	4650      	mov	r0, sl
    7bf4:	40b0      	lsls	r0, r6
    7bf6:	1e46      	subs	r6, r0, #1
    7bf8:	41b0      	sbcs	r0, r6
    7bfa:	4307      	orrs	r7, r0
    7bfc:	40dc      	lsrs	r4, r3
    7bfe:	18bf      	adds	r7, r7, r2
    7c00:	e7d6      	b.n	7bb0 <__aeabi_dsub+0x4ac>
    7c02:	000d      	movs	r5, r1
    7c04:	4315      	orrs	r5, r2
    7c06:	d100      	bne.n	7c0a <__aeabi_dsub+0x506>
    7c08:	e602      	b.n	7810 <__aeabi_dsub+0x10c>
    7c0a:	4650      	mov	r0, sl
    7c0c:	1a80      	subs	r0, r0, r2
    7c0e:	4582      	cmp	sl, r0
    7c10:	41bf      	sbcs	r7, r7
    7c12:	1a65      	subs	r5, r4, r1
    7c14:	427f      	negs	r7, r7
    7c16:	1bed      	subs	r5, r5, r7
    7c18:	4684      	mov	ip, r0
    7c1a:	0228      	lsls	r0, r5, #8
    7c1c:	d400      	bmi.n	7c20 <__aeabi_dsub+0x51c>
    7c1e:	e68d      	b.n	793c <__aeabi_dsub+0x238>
    7c20:	4650      	mov	r0, sl
    7c22:	1a17      	subs	r7, r2, r0
    7c24:	42ba      	cmp	r2, r7
    7c26:	4192      	sbcs	r2, r2
    7c28:	1b0c      	subs	r4, r1, r4
    7c2a:	4252      	negs	r2, r2
    7c2c:	1aa4      	subs	r4, r4, r2
    7c2e:	4698      	mov	r8, r3
    7c30:	e5ee      	b.n	7810 <__aeabi_dsub+0x10c>
    7c32:	000d      	movs	r5, r1
    7c34:	4315      	orrs	r5, r2
    7c36:	d100      	bne.n	7c3a <__aeabi_dsub+0x536>
    7c38:	e76b      	b.n	7b12 <__aeabi_dsub+0x40e>
    7c3a:	4650      	mov	r0, sl
    7c3c:	0767      	lsls	r7, r4, #29
    7c3e:	08c0      	lsrs	r0, r0, #3
    7c40:	4307      	orrs	r7, r0
    7c42:	2080      	movs	r0, #128	; 0x80
    7c44:	08e4      	lsrs	r4, r4, #3
    7c46:	0300      	lsls	r0, r0, #12
    7c48:	4204      	tst	r4, r0
    7c4a:	d007      	beq.n	7c5c <__aeabi_dsub+0x558>
    7c4c:	08cd      	lsrs	r5, r1, #3
    7c4e:	4205      	tst	r5, r0
    7c50:	d104      	bne.n	7c5c <__aeabi_dsub+0x558>
    7c52:	002c      	movs	r4, r5
    7c54:	4698      	mov	r8, r3
    7c56:	08d7      	lsrs	r7, r2, #3
    7c58:	0749      	lsls	r1, r1, #29
    7c5a:	430f      	orrs	r7, r1
    7c5c:	0f7b      	lsrs	r3, r7, #29
    7c5e:	00e4      	lsls	r4, r4, #3
    7c60:	431c      	orrs	r4, r3
    7c62:	00ff      	lsls	r7, r7, #3
    7c64:	4e30      	ldr	r6, [pc, #192]	; (7d28 <__aeabi_dsub+0x624>)
    7c66:	e5d3      	b.n	7810 <__aeabi_dsub+0x10c>
    7c68:	4e2f      	ldr	r6, [pc, #188]	; (7d28 <__aeabi_dsub+0x624>)
    7c6a:	45b4      	cmp	ip, r6
    7c6c:	d1b4      	bne.n	7bd8 <__aeabi_dsub+0x4d4>
    7c6e:	000c      	movs	r4, r1
    7c70:	0017      	movs	r7, r2
    7c72:	4666      	mov	r6, ip
    7c74:	e5cc      	b.n	7810 <__aeabi_dsub+0x10c>
    7c76:	2700      	movs	r7, #0
    7c78:	2400      	movs	r4, #0
    7c7a:	e5e8      	b.n	784e <__aeabi_dsub+0x14a>
    7c7c:	2b00      	cmp	r3, #0
    7c7e:	d039      	beq.n	7cf4 <__aeabi_dsub+0x5f0>
    7c80:	000b      	movs	r3, r1
    7c82:	4313      	orrs	r3, r2
    7c84:	d100      	bne.n	7c88 <__aeabi_dsub+0x584>
    7c86:	e744      	b.n	7b12 <__aeabi_dsub+0x40e>
    7c88:	08c0      	lsrs	r0, r0, #3
    7c8a:	0767      	lsls	r7, r4, #29
    7c8c:	4307      	orrs	r7, r0
    7c8e:	2080      	movs	r0, #128	; 0x80
    7c90:	08e4      	lsrs	r4, r4, #3
    7c92:	0300      	lsls	r0, r0, #12
    7c94:	4204      	tst	r4, r0
    7c96:	d0e1      	beq.n	7c5c <__aeabi_dsub+0x558>
    7c98:	08cb      	lsrs	r3, r1, #3
    7c9a:	4203      	tst	r3, r0
    7c9c:	d1de      	bne.n	7c5c <__aeabi_dsub+0x558>
    7c9e:	08d7      	lsrs	r7, r2, #3
    7ca0:	0749      	lsls	r1, r1, #29
    7ca2:	430f      	orrs	r7, r1
    7ca4:	001c      	movs	r4, r3
    7ca6:	e7d9      	b.n	7c5c <__aeabi_dsub+0x558>
    7ca8:	2100      	movs	r1, #0
    7caa:	e771      	b.n	7b90 <__aeabi_dsub+0x48c>
    7cac:	2500      	movs	r5, #0
    7cae:	2700      	movs	r7, #0
    7cb0:	e5e9      	b.n	7886 <__aeabi_dsub+0x182>
    7cb2:	002e      	movs	r6, r5
    7cb4:	0027      	movs	r7, r4
    7cb6:	3e20      	subs	r6, #32
    7cb8:	40f7      	lsrs	r7, r6
    7cba:	2d20      	cmp	r5, #32
    7cbc:	d02f      	beq.n	7d1e <__aeabi_dsub+0x61a>
    7cbe:	2640      	movs	r6, #64	; 0x40
    7cc0:	1b75      	subs	r5, r6, r5
    7cc2:	40ac      	lsls	r4, r5
    7cc4:	4650      	mov	r0, sl
    7cc6:	4320      	orrs	r0, r4
    7cc8:	1e44      	subs	r4, r0, #1
    7cca:	41a0      	sbcs	r0, r4
    7ccc:	2400      	movs	r4, #0
    7cce:	4338      	orrs	r0, r7
    7cd0:	e6dc      	b.n	7a8c <__aeabi_dsub+0x388>
    7cd2:	2480      	movs	r4, #128	; 0x80
    7cd4:	2500      	movs	r5, #0
    7cd6:	0324      	lsls	r4, r4, #12
    7cd8:	4e13      	ldr	r6, [pc, #76]	; (7d28 <__aeabi_dsub+0x624>)
    7cda:	2700      	movs	r7, #0
    7cdc:	e5d3      	b.n	7886 <__aeabi_dsub+0x182>
    7cde:	4650      	mov	r0, sl
    7ce0:	4320      	orrs	r0, r4
    7ce2:	0007      	movs	r7, r0
    7ce4:	1e78      	subs	r0, r7, #1
    7ce6:	4187      	sbcs	r7, r0
    7ce8:	2400      	movs	r4, #0
    7cea:	18bf      	adds	r7, r7, r2
    7cec:	e760      	b.n	7bb0 <__aeabi_dsub+0x4ac>
    7cee:	000c      	movs	r4, r1
    7cf0:	0017      	movs	r7, r2
    7cf2:	e58d      	b.n	7810 <__aeabi_dsub+0x10c>
    7cf4:	000c      	movs	r4, r1
    7cf6:	0017      	movs	r7, r2
    7cf8:	4e0b      	ldr	r6, [pc, #44]	; (7d28 <__aeabi_dsub+0x624>)
    7cfa:	e589      	b.n	7810 <__aeabi_dsub+0x10c>
    7cfc:	001e      	movs	r6, r3
    7cfe:	0027      	movs	r7, r4
    7d00:	3e20      	subs	r6, #32
    7d02:	40f7      	lsrs	r7, r6
    7d04:	2b20      	cmp	r3, #32
    7d06:	d00c      	beq.n	7d22 <__aeabi_dsub+0x61e>
    7d08:	2640      	movs	r6, #64	; 0x40
    7d0a:	1af3      	subs	r3, r6, r3
    7d0c:	409c      	lsls	r4, r3
    7d0e:	4650      	mov	r0, sl
    7d10:	4320      	orrs	r0, r4
    7d12:	1e44      	subs	r4, r0, #1
    7d14:	41a0      	sbcs	r0, r4
    7d16:	4307      	orrs	r7, r0
    7d18:	2400      	movs	r4, #0
    7d1a:	18bf      	adds	r7, r7, r2
    7d1c:	e748      	b.n	7bb0 <__aeabi_dsub+0x4ac>
    7d1e:	2400      	movs	r4, #0
    7d20:	e7d0      	b.n	7cc4 <__aeabi_dsub+0x5c0>
    7d22:	2400      	movs	r4, #0
    7d24:	e7f3      	b.n	7d0e <__aeabi_dsub+0x60a>
    7d26:	46c0      	nop			; (mov r8, r8)
    7d28:	000007ff 	.word	0x000007ff
    7d2c:	ff7fffff 	.word	0xff7fffff

00007d30 <__aeabi_dcmpun>:
    7d30:	b570      	push	{r4, r5, r6, lr}
    7d32:	4e0e      	ldr	r6, [pc, #56]	; (7d6c <__aeabi_dcmpun+0x3c>)
    7d34:	030d      	lsls	r5, r1, #12
    7d36:	031c      	lsls	r4, r3, #12
    7d38:	0049      	lsls	r1, r1, #1
    7d3a:	005b      	lsls	r3, r3, #1
    7d3c:	0b2d      	lsrs	r5, r5, #12
    7d3e:	0d49      	lsrs	r1, r1, #21
    7d40:	0b24      	lsrs	r4, r4, #12
    7d42:	0d5b      	lsrs	r3, r3, #21
    7d44:	42b1      	cmp	r1, r6
    7d46:	d004      	beq.n	7d52 <__aeabi_dcmpun+0x22>
    7d48:	4908      	ldr	r1, [pc, #32]	; (7d6c <__aeabi_dcmpun+0x3c>)
    7d4a:	2000      	movs	r0, #0
    7d4c:	428b      	cmp	r3, r1
    7d4e:	d008      	beq.n	7d62 <__aeabi_dcmpun+0x32>
    7d50:	bd70      	pop	{r4, r5, r6, pc}
    7d52:	4305      	orrs	r5, r0
    7d54:	2001      	movs	r0, #1
    7d56:	2d00      	cmp	r5, #0
    7d58:	d1fa      	bne.n	7d50 <__aeabi_dcmpun+0x20>
    7d5a:	4904      	ldr	r1, [pc, #16]	; (7d6c <__aeabi_dcmpun+0x3c>)
    7d5c:	2000      	movs	r0, #0
    7d5e:	428b      	cmp	r3, r1
    7d60:	d1f6      	bne.n	7d50 <__aeabi_dcmpun+0x20>
    7d62:	4314      	orrs	r4, r2
    7d64:	0020      	movs	r0, r4
    7d66:	1e44      	subs	r4, r0, #1
    7d68:	41a0      	sbcs	r0, r4
    7d6a:	e7f1      	b.n	7d50 <__aeabi_dcmpun+0x20>
    7d6c:	000007ff 	.word	0x000007ff

00007d70 <__aeabi_i2d>:
    7d70:	b570      	push	{r4, r5, r6, lr}
    7d72:	2800      	cmp	r0, #0
    7d74:	d030      	beq.n	7dd8 <__aeabi_i2d+0x68>
    7d76:	17c3      	asrs	r3, r0, #31
    7d78:	18c4      	adds	r4, r0, r3
    7d7a:	405c      	eors	r4, r3
    7d7c:	0fc5      	lsrs	r5, r0, #31
    7d7e:	0020      	movs	r0, r4
    7d80:	f000 f94c 	bl	801c <__clzsi2>
    7d84:	4b17      	ldr	r3, [pc, #92]	; (7de4 <__aeabi_i2d+0x74>)
    7d86:	4a18      	ldr	r2, [pc, #96]	; (7de8 <__aeabi_i2d+0x78>)
    7d88:	1a1b      	subs	r3, r3, r0
    7d8a:	1ad2      	subs	r2, r2, r3
    7d8c:	2a1f      	cmp	r2, #31
    7d8e:	dd18      	ble.n	7dc2 <__aeabi_i2d+0x52>
    7d90:	4a16      	ldr	r2, [pc, #88]	; (7dec <__aeabi_i2d+0x7c>)
    7d92:	1ad2      	subs	r2, r2, r3
    7d94:	4094      	lsls	r4, r2
    7d96:	2200      	movs	r2, #0
    7d98:	0324      	lsls	r4, r4, #12
    7d9a:	055b      	lsls	r3, r3, #21
    7d9c:	0b24      	lsrs	r4, r4, #12
    7d9e:	0d5b      	lsrs	r3, r3, #21
    7da0:	2100      	movs	r1, #0
    7da2:	0010      	movs	r0, r2
    7da4:	0324      	lsls	r4, r4, #12
    7da6:	0d0a      	lsrs	r2, r1, #20
    7da8:	0b24      	lsrs	r4, r4, #12
    7daa:	0512      	lsls	r2, r2, #20
    7dac:	4322      	orrs	r2, r4
    7dae:	4c10      	ldr	r4, [pc, #64]	; (7df0 <__aeabi_i2d+0x80>)
    7db0:	051b      	lsls	r3, r3, #20
    7db2:	4022      	ands	r2, r4
    7db4:	4313      	orrs	r3, r2
    7db6:	005b      	lsls	r3, r3, #1
    7db8:	07ed      	lsls	r5, r5, #31
    7dba:	085b      	lsrs	r3, r3, #1
    7dbc:	432b      	orrs	r3, r5
    7dbe:	0019      	movs	r1, r3
    7dc0:	bd70      	pop	{r4, r5, r6, pc}
    7dc2:	0021      	movs	r1, r4
    7dc4:	4091      	lsls	r1, r2
    7dc6:	000a      	movs	r2, r1
    7dc8:	210b      	movs	r1, #11
    7dca:	1a08      	subs	r0, r1, r0
    7dcc:	40c4      	lsrs	r4, r0
    7dce:	055b      	lsls	r3, r3, #21
    7dd0:	0324      	lsls	r4, r4, #12
    7dd2:	0b24      	lsrs	r4, r4, #12
    7dd4:	0d5b      	lsrs	r3, r3, #21
    7dd6:	e7e3      	b.n	7da0 <__aeabi_i2d+0x30>
    7dd8:	2500      	movs	r5, #0
    7dda:	2300      	movs	r3, #0
    7ddc:	2400      	movs	r4, #0
    7dde:	2200      	movs	r2, #0
    7de0:	e7de      	b.n	7da0 <__aeabi_i2d+0x30>
    7de2:	46c0      	nop			; (mov r8, r8)
    7de4:	0000041e 	.word	0x0000041e
    7de8:	00000433 	.word	0x00000433
    7dec:	00000413 	.word	0x00000413
    7df0:	800fffff 	.word	0x800fffff

00007df4 <__aeabi_ui2d>:
    7df4:	b510      	push	{r4, lr}
    7df6:	1e04      	subs	r4, r0, #0
    7df8:	d028      	beq.n	7e4c <__aeabi_ui2d+0x58>
    7dfa:	f000 f90f 	bl	801c <__clzsi2>
    7dfe:	4b15      	ldr	r3, [pc, #84]	; (7e54 <__aeabi_ui2d+0x60>)
    7e00:	4a15      	ldr	r2, [pc, #84]	; (7e58 <__aeabi_ui2d+0x64>)
    7e02:	1a1b      	subs	r3, r3, r0
    7e04:	1ad2      	subs	r2, r2, r3
    7e06:	2a1f      	cmp	r2, #31
    7e08:	dd15      	ble.n	7e36 <__aeabi_ui2d+0x42>
    7e0a:	4a14      	ldr	r2, [pc, #80]	; (7e5c <__aeabi_ui2d+0x68>)
    7e0c:	1ad2      	subs	r2, r2, r3
    7e0e:	4094      	lsls	r4, r2
    7e10:	2200      	movs	r2, #0
    7e12:	0324      	lsls	r4, r4, #12
    7e14:	055b      	lsls	r3, r3, #21
    7e16:	0b24      	lsrs	r4, r4, #12
    7e18:	0d5b      	lsrs	r3, r3, #21
    7e1a:	2100      	movs	r1, #0
    7e1c:	0010      	movs	r0, r2
    7e1e:	0324      	lsls	r4, r4, #12
    7e20:	0d0a      	lsrs	r2, r1, #20
    7e22:	0b24      	lsrs	r4, r4, #12
    7e24:	0512      	lsls	r2, r2, #20
    7e26:	4322      	orrs	r2, r4
    7e28:	4c0d      	ldr	r4, [pc, #52]	; (7e60 <__aeabi_ui2d+0x6c>)
    7e2a:	051b      	lsls	r3, r3, #20
    7e2c:	4022      	ands	r2, r4
    7e2e:	4313      	orrs	r3, r2
    7e30:	005b      	lsls	r3, r3, #1
    7e32:	0859      	lsrs	r1, r3, #1
    7e34:	bd10      	pop	{r4, pc}
    7e36:	0021      	movs	r1, r4
    7e38:	4091      	lsls	r1, r2
    7e3a:	000a      	movs	r2, r1
    7e3c:	210b      	movs	r1, #11
    7e3e:	1a08      	subs	r0, r1, r0
    7e40:	40c4      	lsrs	r4, r0
    7e42:	055b      	lsls	r3, r3, #21
    7e44:	0324      	lsls	r4, r4, #12
    7e46:	0b24      	lsrs	r4, r4, #12
    7e48:	0d5b      	lsrs	r3, r3, #21
    7e4a:	e7e6      	b.n	7e1a <__aeabi_ui2d+0x26>
    7e4c:	2300      	movs	r3, #0
    7e4e:	2400      	movs	r4, #0
    7e50:	2200      	movs	r2, #0
    7e52:	e7e2      	b.n	7e1a <__aeabi_ui2d+0x26>
    7e54:	0000041e 	.word	0x0000041e
    7e58:	00000433 	.word	0x00000433
    7e5c:	00000413 	.word	0x00000413
    7e60:	800fffff 	.word	0x800fffff

00007e64 <__aeabi_f2d>:
    7e64:	0041      	lsls	r1, r0, #1
    7e66:	0e09      	lsrs	r1, r1, #24
    7e68:	1c4b      	adds	r3, r1, #1
    7e6a:	b570      	push	{r4, r5, r6, lr}
    7e6c:	b2db      	uxtb	r3, r3
    7e6e:	0246      	lsls	r6, r0, #9
    7e70:	0a75      	lsrs	r5, r6, #9
    7e72:	0fc4      	lsrs	r4, r0, #31
    7e74:	2b01      	cmp	r3, #1
    7e76:	dd14      	ble.n	7ea2 <__aeabi_f2d+0x3e>
    7e78:	23e0      	movs	r3, #224	; 0xe0
    7e7a:	009b      	lsls	r3, r3, #2
    7e7c:	076d      	lsls	r5, r5, #29
    7e7e:	0b36      	lsrs	r6, r6, #12
    7e80:	18cb      	adds	r3, r1, r3
    7e82:	2100      	movs	r1, #0
    7e84:	0d0a      	lsrs	r2, r1, #20
    7e86:	0028      	movs	r0, r5
    7e88:	0512      	lsls	r2, r2, #20
    7e8a:	4d1c      	ldr	r5, [pc, #112]	; (7efc <__aeabi_f2d+0x98>)
    7e8c:	4332      	orrs	r2, r6
    7e8e:	055b      	lsls	r3, r3, #21
    7e90:	402a      	ands	r2, r5
    7e92:	085b      	lsrs	r3, r3, #1
    7e94:	4313      	orrs	r3, r2
    7e96:	005b      	lsls	r3, r3, #1
    7e98:	07e4      	lsls	r4, r4, #31
    7e9a:	085b      	lsrs	r3, r3, #1
    7e9c:	4323      	orrs	r3, r4
    7e9e:	0019      	movs	r1, r3
    7ea0:	bd70      	pop	{r4, r5, r6, pc}
    7ea2:	2900      	cmp	r1, #0
    7ea4:	d114      	bne.n	7ed0 <__aeabi_f2d+0x6c>
    7ea6:	2d00      	cmp	r5, #0
    7ea8:	d01e      	beq.n	7ee8 <__aeabi_f2d+0x84>
    7eaa:	0028      	movs	r0, r5
    7eac:	f000 f8b6 	bl	801c <__clzsi2>
    7eb0:	280a      	cmp	r0, #10
    7eb2:	dc1c      	bgt.n	7eee <__aeabi_f2d+0x8a>
    7eb4:	230b      	movs	r3, #11
    7eb6:	002a      	movs	r2, r5
    7eb8:	1a1b      	subs	r3, r3, r0
    7eba:	40da      	lsrs	r2, r3
    7ebc:	0003      	movs	r3, r0
    7ebe:	3315      	adds	r3, #21
    7ec0:	409d      	lsls	r5, r3
    7ec2:	4b0f      	ldr	r3, [pc, #60]	; (7f00 <__aeabi_f2d+0x9c>)
    7ec4:	0312      	lsls	r2, r2, #12
    7ec6:	1a1b      	subs	r3, r3, r0
    7ec8:	055b      	lsls	r3, r3, #21
    7eca:	0b16      	lsrs	r6, r2, #12
    7ecc:	0d5b      	lsrs	r3, r3, #21
    7ece:	e7d8      	b.n	7e82 <__aeabi_f2d+0x1e>
    7ed0:	2d00      	cmp	r5, #0
    7ed2:	d006      	beq.n	7ee2 <__aeabi_f2d+0x7e>
    7ed4:	0b32      	lsrs	r2, r6, #12
    7ed6:	2680      	movs	r6, #128	; 0x80
    7ed8:	0336      	lsls	r6, r6, #12
    7eda:	076d      	lsls	r5, r5, #29
    7edc:	4316      	orrs	r6, r2
    7ede:	4b09      	ldr	r3, [pc, #36]	; (7f04 <__aeabi_f2d+0xa0>)
    7ee0:	e7cf      	b.n	7e82 <__aeabi_f2d+0x1e>
    7ee2:	4b08      	ldr	r3, [pc, #32]	; (7f04 <__aeabi_f2d+0xa0>)
    7ee4:	2600      	movs	r6, #0
    7ee6:	e7cc      	b.n	7e82 <__aeabi_f2d+0x1e>
    7ee8:	2300      	movs	r3, #0
    7eea:	2600      	movs	r6, #0
    7eec:	e7c9      	b.n	7e82 <__aeabi_f2d+0x1e>
    7eee:	0003      	movs	r3, r0
    7ef0:	002a      	movs	r2, r5
    7ef2:	3b0b      	subs	r3, #11
    7ef4:	409a      	lsls	r2, r3
    7ef6:	2500      	movs	r5, #0
    7ef8:	e7e3      	b.n	7ec2 <__aeabi_f2d+0x5e>
    7efa:	46c0      	nop			; (mov r8, r8)
    7efc:	800fffff 	.word	0x800fffff
    7f00:	00000389 	.word	0x00000389
    7f04:	000007ff 	.word	0x000007ff

00007f08 <__aeabi_d2f>:
    7f08:	b5f0      	push	{r4, r5, r6, r7, lr}
    7f0a:	004c      	lsls	r4, r1, #1
    7f0c:	0d64      	lsrs	r4, r4, #21
    7f0e:	030b      	lsls	r3, r1, #12
    7f10:	1c62      	adds	r2, r4, #1
    7f12:	0f45      	lsrs	r5, r0, #29
    7f14:	0a5b      	lsrs	r3, r3, #9
    7f16:	0552      	lsls	r2, r2, #21
    7f18:	432b      	orrs	r3, r5
    7f1a:	0fc9      	lsrs	r1, r1, #31
    7f1c:	00c5      	lsls	r5, r0, #3
    7f1e:	0d52      	lsrs	r2, r2, #21
    7f20:	2a01      	cmp	r2, #1
    7f22:	dd28      	ble.n	7f76 <__aeabi_d2f+0x6e>
    7f24:	4a3a      	ldr	r2, [pc, #232]	; (8010 <__aeabi_d2f+0x108>)
    7f26:	18a6      	adds	r6, r4, r2
    7f28:	2efe      	cmp	r6, #254	; 0xfe
    7f2a:	dc1b      	bgt.n	7f64 <__aeabi_d2f+0x5c>
    7f2c:	2e00      	cmp	r6, #0
    7f2e:	dd3e      	ble.n	7fae <__aeabi_d2f+0xa6>
    7f30:	0180      	lsls	r0, r0, #6
    7f32:	0002      	movs	r2, r0
    7f34:	1e50      	subs	r0, r2, #1
    7f36:	4182      	sbcs	r2, r0
    7f38:	0f6d      	lsrs	r5, r5, #29
    7f3a:	432a      	orrs	r2, r5
    7f3c:	00db      	lsls	r3, r3, #3
    7f3e:	4313      	orrs	r3, r2
    7f40:	075a      	lsls	r2, r3, #29
    7f42:	d004      	beq.n	7f4e <__aeabi_d2f+0x46>
    7f44:	220f      	movs	r2, #15
    7f46:	401a      	ands	r2, r3
    7f48:	2a04      	cmp	r2, #4
    7f4a:	d000      	beq.n	7f4e <__aeabi_d2f+0x46>
    7f4c:	3304      	adds	r3, #4
    7f4e:	2280      	movs	r2, #128	; 0x80
    7f50:	04d2      	lsls	r2, r2, #19
    7f52:	401a      	ands	r2, r3
    7f54:	d05a      	beq.n	800c <__aeabi_d2f+0x104>
    7f56:	3601      	adds	r6, #1
    7f58:	2eff      	cmp	r6, #255	; 0xff
    7f5a:	d003      	beq.n	7f64 <__aeabi_d2f+0x5c>
    7f5c:	019b      	lsls	r3, r3, #6
    7f5e:	0a5b      	lsrs	r3, r3, #9
    7f60:	b2f4      	uxtb	r4, r6
    7f62:	e001      	b.n	7f68 <__aeabi_d2f+0x60>
    7f64:	24ff      	movs	r4, #255	; 0xff
    7f66:	2300      	movs	r3, #0
    7f68:	0258      	lsls	r0, r3, #9
    7f6a:	05e4      	lsls	r4, r4, #23
    7f6c:	0a40      	lsrs	r0, r0, #9
    7f6e:	07c9      	lsls	r1, r1, #31
    7f70:	4320      	orrs	r0, r4
    7f72:	4308      	orrs	r0, r1
    7f74:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7f76:	2c00      	cmp	r4, #0
    7f78:	d007      	beq.n	7f8a <__aeabi_d2f+0x82>
    7f7a:	431d      	orrs	r5, r3
    7f7c:	d0f2      	beq.n	7f64 <__aeabi_d2f+0x5c>
    7f7e:	2080      	movs	r0, #128	; 0x80
    7f80:	00db      	lsls	r3, r3, #3
    7f82:	0480      	lsls	r0, r0, #18
    7f84:	4303      	orrs	r3, r0
    7f86:	26ff      	movs	r6, #255	; 0xff
    7f88:	e7da      	b.n	7f40 <__aeabi_d2f+0x38>
    7f8a:	432b      	orrs	r3, r5
    7f8c:	d003      	beq.n	7f96 <__aeabi_d2f+0x8e>
    7f8e:	2305      	movs	r3, #5
    7f90:	08db      	lsrs	r3, r3, #3
    7f92:	2cff      	cmp	r4, #255	; 0xff
    7f94:	d003      	beq.n	7f9e <__aeabi_d2f+0x96>
    7f96:	025b      	lsls	r3, r3, #9
    7f98:	0a5b      	lsrs	r3, r3, #9
    7f9a:	b2e4      	uxtb	r4, r4
    7f9c:	e7e4      	b.n	7f68 <__aeabi_d2f+0x60>
    7f9e:	2b00      	cmp	r3, #0
    7fa0:	d032      	beq.n	8008 <__aeabi_d2f+0x100>
    7fa2:	2080      	movs	r0, #128	; 0x80
    7fa4:	03c0      	lsls	r0, r0, #15
    7fa6:	4303      	orrs	r3, r0
    7fa8:	025b      	lsls	r3, r3, #9
    7faa:	0a5b      	lsrs	r3, r3, #9
    7fac:	e7dc      	b.n	7f68 <__aeabi_d2f+0x60>
    7fae:	0032      	movs	r2, r6
    7fb0:	3217      	adds	r2, #23
    7fb2:	db14      	blt.n	7fde <__aeabi_d2f+0xd6>
    7fb4:	2280      	movs	r2, #128	; 0x80
    7fb6:	271e      	movs	r7, #30
    7fb8:	0412      	lsls	r2, r2, #16
    7fba:	4313      	orrs	r3, r2
    7fbc:	1bbf      	subs	r7, r7, r6
    7fbe:	2f1f      	cmp	r7, #31
    7fc0:	dc0f      	bgt.n	7fe2 <__aeabi_d2f+0xda>
    7fc2:	4a14      	ldr	r2, [pc, #80]	; (8014 <__aeabi_d2f+0x10c>)
    7fc4:	4694      	mov	ip, r2
    7fc6:	4464      	add	r4, ip
    7fc8:	002a      	movs	r2, r5
    7fca:	40a5      	lsls	r5, r4
    7fcc:	002e      	movs	r6, r5
    7fce:	40a3      	lsls	r3, r4
    7fd0:	1e75      	subs	r5, r6, #1
    7fd2:	41ae      	sbcs	r6, r5
    7fd4:	40fa      	lsrs	r2, r7
    7fd6:	4333      	orrs	r3, r6
    7fd8:	4313      	orrs	r3, r2
    7fda:	2600      	movs	r6, #0
    7fdc:	e7b0      	b.n	7f40 <__aeabi_d2f+0x38>
    7fde:	2400      	movs	r4, #0
    7fe0:	e7d5      	b.n	7f8e <__aeabi_d2f+0x86>
    7fe2:	2202      	movs	r2, #2
    7fe4:	4252      	negs	r2, r2
    7fe6:	1b96      	subs	r6, r2, r6
    7fe8:	001a      	movs	r2, r3
    7fea:	40f2      	lsrs	r2, r6
    7fec:	2f20      	cmp	r7, #32
    7fee:	d009      	beq.n	8004 <__aeabi_d2f+0xfc>
    7ff0:	4809      	ldr	r0, [pc, #36]	; (8018 <__aeabi_d2f+0x110>)
    7ff2:	4684      	mov	ip, r0
    7ff4:	4464      	add	r4, ip
    7ff6:	40a3      	lsls	r3, r4
    7ff8:	432b      	orrs	r3, r5
    7ffa:	1e5d      	subs	r5, r3, #1
    7ffc:	41ab      	sbcs	r3, r5
    7ffe:	2600      	movs	r6, #0
    8000:	4313      	orrs	r3, r2
    8002:	e79d      	b.n	7f40 <__aeabi_d2f+0x38>
    8004:	2300      	movs	r3, #0
    8006:	e7f7      	b.n	7ff8 <__aeabi_d2f+0xf0>
    8008:	2300      	movs	r3, #0
    800a:	e7ad      	b.n	7f68 <__aeabi_d2f+0x60>
    800c:	0034      	movs	r4, r6
    800e:	e7bf      	b.n	7f90 <__aeabi_d2f+0x88>
    8010:	fffffc80 	.word	0xfffffc80
    8014:	fffffc82 	.word	0xfffffc82
    8018:	fffffca2 	.word	0xfffffca2

0000801c <__clzsi2>:
    801c:	211c      	movs	r1, #28
    801e:	2301      	movs	r3, #1
    8020:	041b      	lsls	r3, r3, #16
    8022:	4298      	cmp	r0, r3
    8024:	d301      	bcc.n	802a <__clzsi2+0xe>
    8026:	0c00      	lsrs	r0, r0, #16
    8028:	3910      	subs	r1, #16
    802a:	0a1b      	lsrs	r3, r3, #8
    802c:	4298      	cmp	r0, r3
    802e:	d301      	bcc.n	8034 <__clzsi2+0x18>
    8030:	0a00      	lsrs	r0, r0, #8
    8032:	3908      	subs	r1, #8
    8034:	091b      	lsrs	r3, r3, #4
    8036:	4298      	cmp	r0, r3
    8038:	d301      	bcc.n	803e <__clzsi2+0x22>
    803a:	0900      	lsrs	r0, r0, #4
    803c:	3904      	subs	r1, #4
    803e:	a202      	add	r2, pc, #8	; (adr r2, 8048 <__clzsi2+0x2c>)
    8040:	5c10      	ldrb	r0, [r2, r0]
    8042:	1840      	adds	r0, r0, r1
    8044:	4770      	bx	lr
    8046:	46c0      	nop			; (mov r8, r8)
    8048:	02020304 	.word	0x02020304
    804c:	01010101 	.word	0x01010101
	...

00008058 <__errno>:
    8058:	4b01      	ldr	r3, [pc, #4]	; (8060 <__errno+0x8>)
    805a:	6818      	ldr	r0, [r3, #0]
    805c:	4770      	bx	lr
    805e:	46c0      	nop			; (mov r8, r8)
    8060:	20000014 	.word	0x20000014

00008064 <__libc_init_array>:
    8064:	b570      	push	{r4, r5, r6, lr}
    8066:	2600      	movs	r6, #0
    8068:	4d0c      	ldr	r5, [pc, #48]	; (809c <__libc_init_array+0x38>)
    806a:	4c0d      	ldr	r4, [pc, #52]	; (80a0 <__libc_init_array+0x3c>)
    806c:	1b64      	subs	r4, r4, r5
    806e:	10a4      	asrs	r4, r4, #2
    8070:	42a6      	cmp	r6, r4
    8072:	d109      	bne.n	8088 <__libc_init_array+0x24>
    8074:	2600      	movs	r6, #0
    8076:	f000 fdb1 	bl	8bdc <_init>
    807a:	4d0a      	ldr	r5, [pc, #40]	; (80a4 <__libc_init_array+0x40>)
    807c:	4c0a      	ldr	r4, [pc, #40]	; (80a8 <__libc_init_array+0x44>)
    807e:	1b64      	subs	r4, r4, r5
    8080:	10a4      	asrs	r4, r4, #2
    8082:	42a6      	cmp	r6, r4
    8084:	d105      	bne.n	8092 <__libc_init_array+0x2e>
    8086:	bd70      	pop	{r4, r5, r6, pc}
    8088:	00b3      	lsls	r3, r6, #2
    808a:	58eb      	ldr	r3, [r5, r3]
    808c:	4798      	blx	r3
    808e:	3601      	adds	r6, #1
    8090:	e7ee      	b.n	8070 <__libc_init_array+0xc>
    8092:	00b3      	lsls	r3, r6, #2
    8094:	58eb      	ldr	r3, [r5, r3]
    8096:	4798      	blx	r3
    8098:	3601      	adds	r6, #1
    809a:	e7f2      	b.n	8082 <__libc_init_array+0x1e>
    809c:	00008be8 	.word	0x00008be8
    80a0:	00008be8 	.word	0x00008be8
    80a4:	00008be8 	.word	0x00008be8
    80a8:	00008bec 	.word	0x00008bec

000080ac <memcpy>:
    80ac:	2300      	movs	r3, #0
    80ae:	b510      	push	{r4, lr}
    80b0:	429a      	cmp	r2, r3
    80b2:	d100      	bne.n	80b6 <memcpy+0xa>
    80b4:	bd10      	pop	{r4, pc}
    80b6:	5ccc      	ldrb	r4, [r1, r3]
    80b8:	54c4      	strb	r4, [r0, r3]
    80ba:	3301      	adds	r3, #1
    80bc:	e7f8      	b.n	80b0 <memcpy+0x4>

000080be <memset>:
    80be:	0003      	movs	r3, r0
    80c0:	1882      	adds	r2, r0, r2
    80c2:	4293      	cmp	r3, r2
    80c4:	d100      	bne.n	80c8 <memset+0xa>
    80c6:	4770      	bx	lr
    80c8:	7019      	strb	r1, [r3, #0]
    80ca:	3301      	adds	r3, #1
    80cc:	e7f9      	b.n	80c2 <memset+0x4>
	...

000080d0 <siprintf>:
    80d0:	b40e      	push	{r1, r2, r3}
    80d2:	b510      	push	{r4, lr}
    80d4:	b09d      	sub	sp, #116	; 0x74
    80d6:	a902      	add	r1, sp, #8
    80d8:	9002      	str	r0, [sp, #8]
    80da:	6108      	str	r0, [r1, #16]
    80dc:	480b      	ldr	r0, [pc, #44]	; (810c <siprintf+0x3c>)
    80de:	2482      	movs	r4, #130	; 0x82
    80e0:	6088      	str	r0, [r1, #8]
    80e2:	6148      	str	r0, [r1, #20]
    80e4:	2001      	movs	r0, #1
    80e6:	4240      	negs	r0, r0
    80e8:	ab1f      	add	r3, sp, #124	; 0x7c
    80ea:	81c8      	strh	r0, [r1, #14]
    80ec:	4808      	ldr	r0, [pc, #32]	; (8110 <siprintf+0x40>)
    80ee:	cb04      	ldmia	r3!, {r2}
    80f0:	00a4      	lsls	r4, r4, #2
    80f2:	6800      	ldr	r0, [r0, #0]
    80f4:	9301      	str	r3, [sp, #4]
    80f6:	818c      	strh	r4, [r1, #12]
    80f8:	f000 f86e 	bl	81d8 <_svfiprintf_r>
    80fc:	2300      	movs	r3, #0
    80fe:	9a02      	ldr	r2, [sp, #8]
    8100:	7013      	strb	r3, [r2, #0]
    8102:	b01d      	add	sp, #116	; 0x74
    8104:	bc10      	pop	{r4}
    8106:	bc08      	pop	{r3}
    8108:	b003      	add	sp, #12
    810a:	4718      	bx	r3
    810c:	7fffffff 	.word	0x7fffffff
    8110:	20000014 	.word	0x20000014

00008114 <__ssputs_r>:
    8114:	b5f0      	push	{r4, r5, r6, r7, lr}
    8116:	688e      	ldr	r6, [r1, #8]
    8118:	b085      	sub	sp, #20
    811a:	0007      	movs	r7, r0
    811c:	000c      	movs	r4, r1
    811e:	9203      	str	r2, [sp, #12]
    8120:	9301      	str	r3, [sp, #4]
    8122:	429e      	cmp	r6, r3
    8124:	d839      	bhi.n	819a <__ssputs_r+0x86>
    8126:	2390      	movs	r3, #144	; 0x90
    8128:	898a      	ldrh	r2, [r1, #12]
    812a:	00db      	lsls	r3, r3, #3
    812c:	421a      	tst	r2, r3
    812e:	d034      	beq.n	819a <__ssputs_r+0x86>
    8130:	2503      	movs	r5, #3
    8132:	6909      	ldr	r1, [r1, #16]
    8134:	6823      	ldr	r3, [r4, #0]
    8136:	1a5b      	subs	r3, r3, r1
    8138:	9302      	str	r3, [sp, #8]
    813a:	6963      	ldr	r3, [r4, #20]
    813c:	9802      	ldr	r0, [sp, #8]
    813e:	435d      	muls	r5, r3
    8140:	0feb      	lsrs	r3, r5, #31
    8142:	195d      	adds	r5, r3, r5
    8144:	9b01      	ldr	r3, [sp, #4]
    8146:	106d      	asrs	r5, r5, #1
    8148:	3301      	adds	r3, #1
    814a:	181b      	adds	r3, r3, r0
    814c:	42ab      	cmp	r3, r5
    814e:	d900      	bls.n	8152 <__ssputs_r+0x3e>
    8150:	001d      	movs	r5, r3
    8152:	0553      	lsls	r3, r2, #21
    8154:	d532      	bpl.n	81bc <__ssputs_r+0xa8>
    8156:	0029      	movs	r1, r5
    8158:	0038      	movs	r0, r7
    815a:	f000 fb31 	bl	87c0 <_malloc_r>
    815e:	1e06      	subs	r6, r0, #0
    8160:	d109      	bne.n	8176 <__ssputs_r+0x62>
    8162:	230c      	movs	r3, #12
    8164:	603b      	str	r3, [r7, #0]
    8166:	2340      	movs	r3, #64	; 0x40
    8168:	2001      	movs	r0, #1
    816a:	89a2      	ldrh	r2, [r4, #12]
    816c:	4240      	negs	r0, r0
    816e:	4313      	orrs	r3, r2
    8170:	81a3      	strh	r3, [r4, #12]
    8172:	b005      	add	sp, #20
    8174:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8176:	9a02      	ldr	r2, [sp, #8]
    8178:	6921      	ldr	r1, [r4, #16]
    817a:	f7ff ff97 	bl	80ac <memcpy>
    817e:	89a3      	ldrh	r3, [r4, #12]
    8180:	4a14      	ldr	r2, [pc, #80]	; (81d4 <__ssputs_r+0xc0>)
    8182:	401a      	ands	r2, r3
    8184:	2380      	movs	r3, #128	; 0x80
    8186:	4313      	orrs	r3, r2
    8188:	81a3      	strh	r3, [r4, #12]
    818a:	9b02      	ldr	r3, [sp, #8]
    818c:	6126      	str	r6, [r4, #16]
    818e:	18f6      	adds	r6, r6, r3
    8190:	6026      	str	r6, [r4, #0]
    8192:	6165      	str	r5, [r4, #20]
    8194:	9e01      	ldr	r6, [sp, #4]
    8196:	1aed      	subs	r5, r5, r3
    8198:	60a5      	str	r5, [r4, #8]
    819a:	9b01      	ldr	r3, [sp, #4]
    819c:	42b3      	cmp	r3, r6
    819e:	d200      	bcs.n	81a2 <__ssputs_r+0x8e>
    81a0:	001e      	movs	r6, r3
    81a2:	0032      	movs	r2, r6
    81a4:	9903      	ldr	r1, [sp, #12]
    81a6:	6820      	ldr	r0, [r4, #0]
    81a8:	f000 faad 	bl	8706 <memmove>
    81ac:	68a3      	ldr	r3, [r4, #8]
    81ae:	2000      	movs	r0, #0
    81b0:	1b9b      	subs	r3, r3, r6
    81b2:	60a3      	str	r3, [r4, #8]
    81b4:	6823      	ldr	r3, [r4, #0]
    81b6:	199e      	adds	r6, r3, r6
    81b8:	6026      	str	r6, [r4, #0]
    81ba:	e7da      	b.n	8172 <__ssputs_r+0x5e>
    81bc:	002a      	movs	r2, r5
    81be:	0038      	movs	r0, r7
    81c0:	f000 fb5c 	bl	887c <_realloc_r>
    81c4:	1e06      	subs	r6, r0, #0
    81c6:	d1e0      	bne.n	818a <__ssputs_r+0x76>
    81c8:	6921      	ldr	r1, [r4, #16]
    81ca:	0038      	movs	r0, r7
    81cc:	f000 faae 	bl	872c <_free_r>
    81d0:	e7c7      	b.n	8162 <__ssputs_r+0x4e>
    81d2:	46c0      	nop			; (mov r8, r8)
    81d4:	fffffb7f 	.word	0xfffffb7f

000081d8 <_svfiprintf_r>:
    81d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    81da:	b09f      	sub	sp, #124	; 0x7c
    81dc:	9002      	str	r0, [sp, #8]
    81de:	9305      	str	r3, [sp, #20]
    81e0:	898b      	ldrh	r3, [r1, #12]
    81e2:	000f      	movs	r7, r1
    81e4:	0016      	movs	r6, r2
    81e6:	061b      	lsls	r3, r3, #24
    81e8:	d511      	bpl.n	820e <_svfiprintf_r+0x36>
    81ea:	690b      	ldr	r3, [r1, #16]
    81ec:	2b00      	cmp	r3, #0
    81ee:	d10e      	bne.n	820e <_svfiprintf_r+0x36>
    81f0:	2140      	movs	r1, #64	; 0x40
    81f2:	f000 fae5 	bl	87c0 <_malloc_r>
    81f6:	6038      	str	r0, [r7, #0]
    81f8:	6138      	str	r0, [r7, #16]
    81fa:	2800      	cmp	r0, #0
    81fc:	d105      	bne.n	820a <_svfiprintf_r+0x32>
    81fe:	230c      	movs	r3, #12
    8200:	9a02      	ldr	r2, [sp, #8]
    8202:	3801      	subs	r0, #1
    8204:	6013      	str	r3, [r2, #0]
    8206:	b01f      	add	sp, #124	; 0x7c
    8208:	bdf0      	pop	{r4, r5, r6, r7, pc}
    820a:	2340      	movs	r3, #64	; 0x40
    820c:	617b      	str	r3, [r7, #20]
    820e:	2300      	movs	r3, #0
    8210:	ad06      	add	r5, sp, #24
    8212:	616b      	str	r3, [r5, #20]
    8214:	3320      	adds	r3, #32
    8216:	766b      	strb	r3, [r5, #25]
    8218:	3310      	adds	r3, #16
    821a:	76ab      	strb	r3, [r5, #26]
    821c:	0034      	movs	r4, r6
    821e:	7823      	ldrb	r3, [r4, #0]
    8220:	2b00      	cmp	r3, #0
    8222:	d147      	bne.n	82b4 <_svfiprintf_r+0xdc>
    8224:	1ba3      	subs	r3, r4, r6
    8226:	9304      	str	r3, [sp, #16]
    8228:	d00d      	beq.n	8246 <_svfiprintf_r+0x6e>
    822a:	1ba3      	subs	r3, r4, r6
    822c:	0032      	movs	r2, r6
    822e:	0039      	movs	r1, r7
    8230:	9802      	ldr	r0, [sp, #8]
    8232:	f7ff ff6f 	bl	8114 <__ssputs_r>
    8236:	1c43      	adds	r3, r0, #1
    8238:	d100      	bne.n	823c <_svfiprintf_r+0x64>
    823a:	e0b5      	b.n	83a8 <_svfiprintf_r+0x1d0>
    823c:	696a      	ldr	r2, [r5, #20]
    823e:	9b04      	ldr	r3, [sp, #16]
    8240:	4694      	mov	ip, r2
    8242:	4463      	add	r3, ip
    8244:	616b      	str	r3, [r5, #20]
    8246:	7823      	ldrb	r3, [r4, #0]
    8248:	2b00      	cmp	r3, #0
    824a:	d100      	bne.n	824e <_svfiprintf_r+0x76>
    824c:	e0ac      	b.n	83a8 <_svfiprintf_r+0x1d0>
    824e:	2201      	movs	r2, #1
    8250:	2300      	movs	r3, #0
    8252:	4252      	negs	r2, r2
    8254:	606a      	str	r2, [r5, #4]
    8256:	a902      	add	r1, sp, #8
    8258:	3254      	adds	r2, #84	; 0x54
    825a:	1852      	adds	r2, r2, r1
    825c:	3401      	adds	r4, #1
    825e:	602b      	str	r3, [r5, #0]
    8260:	60eb      	str	r3, [r5, #12]
    8262:	60ab      	str	r3, [r5, #8]
    8264:	7013      	strb	r3, [r2, #0]
    8266:	65ab      	str	r3, [r5, #88]	; 0x58
    8268:	4e58      	ldr	r6, [pc, #352]	; (83cc <_svfiprintf_r+0x1f4>)
    826a:	2205      	movs	r2, #5
    826c:	7821      	ldrb	r1, [r4, #0]
    826e:	0030      	movs	r0, r6
    8270:	f000 fa3e 	bl	86f0 <memchr>
    8274:	1c62      	adds	r2, r4, #1
    8276:	2800      	cmp	r0, #0
    8278:	d120      	bne.n	82bc <_svfiprintf_r+0xe4>
    827a:	6829      	ldr	r1, [r5, #0]
    827c:	06cb      	lsls	r3, r1, #27
    827e:	d504      	bpl.n	828a <_svfiprintf_r+0xb2>
    8280:	2353      	movs	r3, #83	; 0x53
    8282:	ae02      	add	r6, sp, #8
    8284:	3020      	adds	r0, #32
    8286:	199b      	adds	r3, r3, r6
    8288:	7018      	strb	r0, [r3, #0]
    828a:	070b      	lsls	r3, r1, #28
    828c:	d504      	bpl.n	8298 <_svfiprintf_r+0xc0>
    828e:	2353      	movs	r3, #83	; 0x53
    8290:	202b      	movs	r0, #43	; 0x2b
    8292:	ae02      	add	r6, sp, #8
    8294:	199b      	adds	r3, r3, r6
    8296:	7018      	strb	r0, [r3, #0]
    8298:	7823      	ldrb	r3, [r4, #0]
    829a:	2b2a      	cmp	r3, #42	; 0x2a
    829c:	d016      	beq.n	82cc <_svfiprintf_r+0xf4>
    829e:	2000      	movs	r0, #0
    82a0:	210a      	movs	r1, #10
    82a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    82a4:	7822      	ldrb	r2, [r4, #0]
    82a6:	3a30      	subs	r2, #48	; 0x30
    82a8:	2a09      	cmp	r2, #9
    82aa:	d955      	bls.n	8358 <_svfiprintf_r+0x180>
    82ac:	2800      	cmp	r0, #0
    82ae:	d015      	beq.n	82dc <_svfiprintf_r+0x104>
    82b0:	9309      	str	r3, [sp, #36]	; 0x24
    82b2:	e013      	b.n	82dc <_svfiprintf_r+0x104>
    82b4:	2b25      	cmp	r3, #37	; 0x25
    82b6:	d0b5      	beq.n	8224 <_svfiprintf_r+0x4c>
    82b8:	3401      	adds	r4, #1
    82ba:	e7b0      	b.n	821e <_svfiprintf_r+0x46>
    82bc:	2301      	movs	r3, #1
    82be:	1b80      	subs	r0, r0, r6
    82c0:	4083      	lsls	r3, r0
    82c2:	6829      	ldr	r1, [r5, #0]
    82c4:	0014      	movs	r4, r2
    82c6:	430b      	orrs	r3, r1
    82c8:	602b      	str	r3, [r5, #0]
    82ca:	e7cd      	b.n	8268 <_svfiprintf_r+0x90>
    82cc:	9b05      	ldr	r3, [sp, #20]
    82ce:	1d18      	adds	r0, r3, #4
    82d0:	681b      	ldr	r3, [r3, #0]
    82d2:	9005      	str	r0, [sp, #20]
    82d4:	2b00      	cmp	r3, #0
    82d6:	db39      	blt.n	834c <_svfiprintf_r+0x174>
    82d8:	9309      	str	r3, [sp, #36]	; 0x24
    82da:	0014      	movs	r4, r2
    82dc:	7823      	ldrb	r3, [r4, #0]
    82de:	2b2e      	cmp	r3, #46	; 0x2e
    82e0:	d10b      	bne.n	82fa <_svfiprintf_r+0x122>
    82e2:	7863      	ldrb	r3, [r4, #1]
    82e4:	1c62      	adds	r2, r4, #1
    82e6:	2b2a      	cmp	r3, #42	; 0x2a
    82e8:	d13e      	bne.n	8368 <_svfiprintf_r+0x190>
    82ea:	9b05      	ldr	r3, [sp, #20]
    82ec:	3402      	adds	r4, #2
    82ee:	1d1a      	adds	r2, r3, #4
    82f0:	681b      	ldr	r3, [r3, #0]
    82f2:	9205      	str	r2, [sp, #20]
    82f4:	2b00      	cmp	r3, #0
    82f6:	db34      	blt.n	8362 <_svfiprintf_r+0x18a>
    82f8:	9307      	str	r3, [sp, #28]
    82fa:	4e35      	ldr	r6, [pc, #212]	; (83d0 <_svfiprintf_r+0x1f8>)
    82fc:	7821      	ldrb	r1, [r4, #0]
    82fe:	2203      	movs	r2, #3
    8300:	0030      	movs	r0, r6
    8302:	f000 f9f5 	bl	86f0 <memchr>
    8306:	2800      	cmp	r0, #0
    8308:	d006      	beq.n	8318 <_svfiprintf_r+0x140>
    830a:	2340      	movs	r3, #64	; 0x40
    830c:	1b80      	subs	r0, r0, r6
    830e:	4083      	lsls	r3, r0
    8310:	682a      	ldr	r2, [r5, #0]
    8312:	3401      	adds	r4, #1
    8314:	4313      	orrs	r3, r2
    8316:	602b      	str	r3, [r5, #0]
    8318:	7821      	ldrb	r1, [r4, #0]
    831a:	2206      	movs	r2, #6
    831c:	482d      	ldr	r0, [pc, #180]	; (83d4 <_svfiprintf_r+0x1fc>)
    831e:	1c66      	adds	r6, r4, #1
    8320:	7629      	strb	r1, [r5, #24]
    8322:	f000 f9e5 	bl	86f0 <memchr>
    8326:	2800      	cmp	r0, #0
    8328:	d046      	beq.n	83b8 <_svfiprintf_r+0x1e0>
    832a:	4b2b      	ldr	r3, [pc, #172]	; (83d8 <_svfiprintf_r+0x200>)
    832c:	2b00      	cmp	r3, #0
    832e:	d12f      	bne.n	8390 <_svfiprintf_r+0x1b8>
    8330:	6829      	ldr	r1, [r5, #0]
    8332:	9b05      	ldr	r3, [sp, #20]
    8334:	2207      	movs	r2, #7
    8336:	05c9      	lsls	r1, r1, #23
    8338:	d528      	bpl.n	838c <_svfiprintf_r+0x1b4>
    833a:	189b      	adds	r3, r3, r2
    833c:	4393      	bics	r3, r2
    833e:	3308      	adds	r3, #8
    8340:	9305      	str	r3, [sp, #20]
    8342:	696b      	ldr	r3, [r5, #20]
    8344:	9a03      	ldr	r2, [sp, #12]
    8346:	189b      	adds	r3, r3, r2
    8348:	616b      	str	r3, [r5, #20]
    834a:	e767      	b.n	821c <_svfiprintf_r+0x44>
    834c:	425b      	negs	r3, r3
    834e:	60eb      	str	r3, [r5, #12]
    8350:	2302      	movs	r3, #2
    8352:	430b      	orrs	r3, r1
    8354:	602b      	str	r3, [r5, #0]
    8356:	e7c0      	b.n	82da <_svfiprintf_r+0x102>
    8358:	434b      	muls	r3, r1
    835a:	3401      	adds	r4, #1
    835c:	189b      	adds	r3, r3, r2
    835e:	2001      	movs	r0, #1
    8360:	e7a0      	b.n	82a4 <_svfiprintf_r+0xcc>
    8362:	2301      	movs	r3, #1
    8364:	425b      	negs	r3, r3
    8366:	e7c7      	b.n	82f8 <_svfiprintf_r+0x120>
    8368:	2300      	movs	r3, #0
    836a:	0014      	movs	r4, r2
    836c:	200a      	movs	r0, #10
    836e:	001a      	movs	r2, r3
    8370:	606b      	str	r3, [r5, #4]
    8372:	7821      	ldrb	r1, [r4, #0]
    8374:	3930      	subs	r1, #48	; 0x30
    8376:	2909      	cmp	r1, #9
    8378:	d903      	bls.n	8382 <_svfiprintf_r+0x1aa>
    837a:	2b00      	cmp	r3, #0
    837c:	d0bd      	beq.n	82fa <_svfiprintf_r+0x122>
    837e:	9207      	str	r2, [sp, #28]
    8380:	e7bb      	b.n	82fa <_svfiprintf_r+0x122>
    8382:	4342      	muls	r2, r0
    8384:	3401      	adds	r4, #1
    8386:	1852      	adds	r2, r2, r1
    8388:	2301      	movs	r3, #1
    838a:	e7f2      	b.n	8372 <_svfiprintf_r+0x19a>
    838c:	3307      	adds	r3, #7
    838e:	e7d5      	b.n	833c <_svfiprintf_r+0x164>
    8390:	ab05      	add	r3, sp, #20
    8392:	9300      	str	r3, [sp, #0]
    8394:	003a      	movs	r2, r7
    8396:	4b11      	ldr	r3, [pc, #68]	; (83dc <_svfiprintf_r+0x204>)
    8398:	0029      	movs	r1, r5
    839a:	9802      	ldr	r0, [sp, #8]
    839c:	e000      	b.n	83a0 <_svfiprintf_r+0x1c8>
    839e:	bf00      	nop
    83a0:	9003      	str	r0, [sp, #12]
    83a2:	9b03      	ldr	r3, [sp, #12]
    83a4:	3301      	adds	r3, #1
    83a6:	d1cc      	bne.n	8342 <_svfiprintf_r+0x16a>
    83a8:	89bb      	ldrh	r3, [r7, #12]
    83aa:	980b      	ldr	r0, [sp, #44]	; 0x2c
    83ac:	065b      	lsls	r3, r3, #25
    83ae:	d400      	bmi.n	83b2 <_svfiprintf_r+0x1da>
    83b0:	e729      	b.n	8206 <_svfiprintf_r+0x2e>
    83b2:	2001      	movs	r0, #1
    83b4:	4240      	negs	r0, r0
    83b6:	e726      	b.n	8206 <_svfiprintf_r+0x2e>
    83b8:	ab05      	add	r3, sp, #20
    83ba:	9300      	str	r3, [sp, #0]
    83bc:	003a      	movs	r2, r7
    83be:	4b07      	ldr	r3, [pc, #28]	; (83dc <_svfiprintf_r+0x204>)
    83c0:	0029      	movs	r1, r5
    83c2:	9802      	ldr	r0, [sp, #8]
    83c4:	f000 f87a 	bl	84bc <_printf_i>
    83c8:	e7ea      	b.n	83a0 <_svfiprintf_r+0x1c8>
    83ca:	46c0      	nop			; (mov r8, r8)
    83cc:	00008ba8 	.word	0x00008ba8
    83d0:	00008bae 	.word	0x00008bae
    83d4:	00008bb2 	.word	0x00008bb2
    83d8:	00000000 	.word	0x00000000
    83dc:	00008115 	.word	0x00008115

000083e0 <_printf_common>:
    83e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    83e2:	0015      	movs	r5, r2
    83e4:	9301      	str	r3, [sp, #4]
    83e6:	688a      	ldr	r2, [r1, #8]
    83e8:	690b      	ldr	r3, [r1, #16]
    83ea:	9000      	str	r0, [sp, #0]
    83ec:	000c      	movs	r4, r1
    83ee:	4293      	cmp	r3, r2
    83f0:	da00      	bge.n	83f4 <_printf_common+0x14>
    83f2:	0013      	movs	r3, r2
    83f4:	0022      	movs	r2, r4
    83f6:	602b      	str	r3, [r5, #0]
    83f8:	3243      	adds	r2, #67	; 0x43
    83fa:	7812      	ldrb	r2, [r2, #0]
    83fc:	2a00      	cmp	r2, #0
    83fe:	d001      	beq.n	8404 <_printf_common+0x24>
    8400:	3301      	adds	r3, #1
    8402:	602b      	str	r3, [r5, #0]
    8404:	6823      	ldr	r3, [r4, #0]
    8406:	069b      	lsls	r3, r3, #26
    8408:	d502      	bpl.n	8410 <_printf_common+0x30>
    840a:	682b      	ldr	r3, [r5, #0]
    840c:	3302      	adds	r3, #2
    840e:	602b      	str	r3, [r5, #0]
    8410:	2706      	movs	r7, #6
    8412:	6823      	ldr	r3, [r4, #0]
    8414:	401f      	ands	r7, r3
    8416:	d027      	beq.n	8468 <_printf_common+0x88>
    8418:	0023      	movs	r3, r4
    841a:	3343      	adds	r3, #67	; 0x43
    841c:	781b      	ldrb	r3, [r3, #0]
    841e:	1e5a      	subs	r2, r3, #1
    8420:	4193      	sbcs	r3, r2
    8422:	6822      	ldr	r2, [r4, #0]
    8424:	0692      	lsls	r2, r2, #26
    8426:	d430      	bmi.n	848a <_printf_common+0xaa>
    8428:	0022      	movs	r2, r4
    842a:	9901      	ldr	r1, [sp, #4]
    842c:	3243      	adds	r2, #67	; 0x43
    842e:	9800      	ldr	r0, [sp, #0]
    8430:	9e08      	ldr	r6, [sp, #32]
    8432:	47b0      	blx	r6
    8434:	1c43      	adds	r3, r0, #1
    8436:	d025      	beq.n	8484 <_printf_common+0xa4>
    8438:	2306      	movs	r3, #6
    843a:	6820      	ldr	r0, [r4, #0]
    843c:	682a      	ldr	r2, [r5, #0]
    843e:	68e1      	ldr	r1, [r4, #12]
    8440:	4003      	ands	r3, r0
    8442:	2500      	movs	r5, #0
    8444:	2b04      	cmp	r3, #4
    8446:	d103      	bne.n	8450 <_printf_common+0x70>
    8448:	1a8d      	subs	r5, r1, r2
    844a:	43eb      	mvns	r3, r5
    844c:	17db      	asrs	r3, r3, #31
    844e:	401d      	ands	r5, r3
    8450:	68a3      	ldr	r3, [r4, #8]
    8452:	6922      	ldr	r2, [r4, #16]
    8454:	4293      	cmp	r3, r2
    8456:	dd01      	ble.n	845c <_printf_common+0x7c>
    8458:	1a9b      	subs	r3, r3, r2
    845a:	18ed      	adds	r5, r5, r3
    845c:	2700      	movs	r7, #0
    845e:	42bd      	cmp	r5, r7
    8460:	d120      	bne.n	84a4 <_printf_common+0xc4>
    8462:	2000      	movs	r0, #0
    8464:	e010      	b.n	8488 <_printf_common+0xa8>
    8466:	3701      	adds	r7, #1
    8468:	68e3      	ldr	r3, [r4, #12]
    846a:	682a      	ldr	r2, [r5, #0]
    846c:	1a9b      	subs	r3, r3, r2
    846e:	429f      	cmp	r7, r3
    8470:	dad2      	bge.n	8418 <_printf_common+0x38>
    8472:	0022      	movs	r2, r4
    8474:	2301      	movs	r3, #1
    8476:	3219      	adds	r2, #25
    8478:	9901      	ldr	r1, [sp, #4]
    847a:	9800      	ldr	r0, [sp, #0]
    847c:	9e08      	ldr	r6, [sp, #32]
    847e:	47b0      	blx	r6
    8480:	1c43      	adds	r3, r0, #1
    8482:	d1f0      	bne.n	8466 <_printf_common+0x86>
    8484:	2001      	movs	r0, #1
    8486:	4240      	negs	r0, r0
    8488:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    848a:	2030      	movs	r0, #48	; 0x30
    848c:	18e1      	adds	r1, r4, r3
    848e:	3143      	adds	r1, #67	; 0x43
    8490:	7008      	strb	r0, [r1, #0]
    8492:	0021      	movs	r1, r4
    8494:	1c5a      	adds	r2, r3, #1
    8496:	3145      	adds	r1, #69	; 0x45
    8498:	7809      	ldrb	r1, [r1, #0]
    849a:	18a2      	adds	r2, r4, r2
    849c:	3243      	adds	r2, #67	; 0x43
    849e:	3302      	adds	r3, #2
    84a0:	7011      	strb	r1, [r2, #0]
    84a2:	e7c1      	b.n	8428 <_printf_common+0x48>
    84a4:	0022      	movs	r2, r4
    84a6:	2301      	movs	r3, #1
    84a8:	321a      	adds	r2, #26
    84aa:	9901      	ldr	r1, [sp, #4]
    84ac:	9800      	ldr	r0, [sp, #0]
    84ae:	9e08      	ldr	r6, [sp, #32]
    84b0:	47b0      	blx	r6
    84b2:	1c43      	adds	r3, r0, #1
    84b4:	d0e6      	beq.n	8484 <_printf_common+0xa4>
    84b6:	3701      	adds	r7, #1
    84b8:	e7d1      	b.n	845e <_printf_common+0x7e>
	...

000084bc <_printf_i>:
    84bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    84be:	b08b      	sub	sp, #44	; 0x2c
    84c0:	9206      	str	r2, [sp, #24]
    84c2:	000a      	movs	r2, r1
    84c4:	3243      	adds	r2, #67	; 0x43
    84c6:	9307      	str	r3, [sp, #28]
    84c8:	9005      	str	r0, [sp, #20]
    84ca:	9204      	str	r2, [sp, #16]
    84cc:	7e0a      	ldrb	r2, [r1, #24]
    84ce:	000c      	movs	r4, r1
    84d0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    84d2:	2a6e      	cmp	r2, #110	; 0x6e
    84d4:	d100      	bne.n	84d8 <_printf_i+0x1c>
    84d6:	e08f      	b.n	85f8 <_printf_i+0x13c>
    84d8:	d817      	bhi.n	850a <_printf_i+0x4e>
    84da:	2a63      	cmp	r2, #99	; 0x63
    84dc:	d02c      	beq.n	8538 <_printf_i+0x7c>
    84de:	d808      	bhi.n	84f2 <_printf_i+0x36>
    84e0:	2a00      	cmp	r2, #0
    84e2:	d100      	bne.n	84e6 <_printf_i+0x2a>
    84e4:	e099      	b.n	861a <_printf_i+0x15e>
    84e6:	2a58      	cmp	r2, #88	; 0x58
    84e8:	d054      	beq.n	8594 <_printf_i+0xd8>
    84ea:	0026      	movs	r6, r4
    84ec:	3642      	adds	r6, #66	; 0x42
    84ee:	7032      	strb	r2, [r6, #0]
    84f0:	e029      	b.n	8546 <_printf_i+0x8a>
    84f2:	2a64      	cmp	r2, #100	; 0x64
    84f4:	d001      	beq.n	84fa <_printf_i+0x3e>
    84f6:	2a69      	cmp	r2, #105	; 0x69
    84f8:	d1f7      	bne.n	84ea <_printf_i+0x2e>
    84fa:	6821      	ldr	r1, [r4, #0]
    84fc:	681a      	ldr	r2, [r3, #0]
    84fe:	0608      	lsls	r0, r1, #24
    8500:	d523      	bpl.n	854a <_printf_i+0x8e>
    8502:	1d11      	adds	r1, r2, #4
    8504:	6019      	str	r1, [r3, #0]
    8506:	6815      	ldr	r5, [r2, #0]
    8508:	e025      	b.n	8556 <_printf_i+0x9a>
    850a:	2a73      	cmp	r2, #115	; 0x73
    850c:	d100      	bne.n	8510 <_printf_i+0x54>
    850e:	e088      	b.n	8622 <_printf_i+0x166>
    8510:	d808      	bhi.n	8524 <_printf_i+0x68>
    8512:	2a6f      	cmp	r2, #111	; 0x6f
    8514:	d029      	beq.n	856a <_printf_i+0xae>
    8516:	2a70      	cmp	r2, #112	; 0x70
    8518:	d1e7      	bne.n	84ea <_printf_i+0x2e>
    851a:	2220      	movs	r2, #32
    851c:	6809      	ldr	r1, [r1, #0]
    851e:	430a      	orrs	r2, r1
    8520:	6022      	str	r2, [r4, #0]
    8522:	e003      	b.n	852c <_printf_i+0x70>
    8524:	2a75      	cmp	r2, #117	; 0x75
    8526:	d020      	beq.n	856a <_printf_i+0xae>
    8528:	2a78      	cmp	r2, #120	; 0x78
    852a:	d1de      	bne.n	84ea <_printf_i+0x2e>
    852c:	0022      	movs	r2, r4
    852e:	2178      	movs	r1, #120	; 0x78
    8530:	3245      	adds	r2, #69	; 0x45
    8532:	7011      	strb	r1, [r2, #0]
    8534:	4a6c      	ldr	r2, [pc, #432]	; (86e8 <_printf_i+0x22c>)
    8536:	e030      	b.n	859a <_printf_i+0xde>
    8538:	000e      	movs	r6, r1
    853a:	681a      	ldr	r2, [r3, #0]
    853c:	3642      	adds	r6, #66	; 0x42
    853e:	1d11      	adds	r1, r2, #4
    8540:	6019      	str	r1, [r3, #0]
    8542:	6813      	ldr	r3, [r2, #0]
    8544:	7033      	strb	r3, [r6, #0]
    8546:	2301      	movs	r3, #1
    8548:	e079      	b.n	863e <_printf_i+0x182>
    854a:	0649      	lsls	r1, r1, #25
    854c:	d5d9      	bpl.n	8502 <_printf_i+0x46>
    854e:	1d11      	adds	r1, r2, #4
    8550:	6019      	str	r1, [r3, #0]
    8552:	2300      	movs	r3, #0
    8554:	5ed5      	ldrsh	r5, [r2, r3]
    8556:	2d00      	cmp	r5, #0
    8558:	da03      	bge.n	8562 <_printf_i+0xa6>
    855a:	232d      	movs	r3, #45	; 0x2d
    855c:	9a04      	ldr	r2, [sp, #16]
    855e:	426d      	negs	r5, r5
    8560:	7013      	strb	r3, [r2, #0]
    8562:	4b62      	ldr	r3, [pc, #392]	; (86ec <_printf_i+0x230>)
    8564:	270a      	movs	r7, #10
    8566:	9303      	str	r3, [sp, #12]
    8568:	e02f      	b.n	85ca <_printf_i+0x10e>
    856a:	6820      	ldr	r0, [r4, #0]
    856c:	6819      	ldr	r1, [r3, #0]
    856e:	0605      	lsls	r5, r0, #24
    8570:	d503      	bpl.n	857a <_printf_i+0xbe>
    8572:	1d08      	adds	r0, r1, #4
    8574:	6018      	str	r0, [r3, #0]
    8576:	680d      	ldr	r5, [r1, #0]
    8578:	e005      	b.n	8586 <_printf_i+0xca>
    857a:	0640      	lsls	r0, r0, #25
    857c:	d5f9      	bpl.n	8572 <_printf_i+0xb6>
    857e:	680d      	ldr	r5, [r1, #0]
    8580:	1d08      	adds	r0, r1, #4
    8582:	6018      	str	r0, [r3, #0]
    8584:	b2ad      	uxth	r5, r5
    8586:	4b59      	ldr	r3, [pc, #356]	; (86ec <_printf_i+0x230>)
    8588:	2708      	movs	r7, #8
    858a:	9303      	str	r3, [sp, #12]
    858c:	2a6f      	cmp	r2, #111	; 0x6f
    858e:	d018      	beq.n	85c2 <_printf_i+0x106>
    8590:	270a      	movs	r7, #10
    8592:	e016      	b.n	85c2 <_printf_i+0x106>
    8594:	3145      	adds	r1, #69	; 0x45
    8596:	700a      	strb	r2, [r1, #0]
    8598:	4a54      	ldr	r2, [pc, #336]	; (86ec <_printf_i+0x230>)
    859a:	9203      	str	r2, [sp, #12]
    859c:	681a      	ldr	r2, [r3, #0]
    859e:	6821      	ldr	r1, [r4, #0]
    85a0:	1d10      	adds	r0, r2, #4
    85a2:	6018      	str	r0, [r3, #0]
    85a4:	6815      	ldr	r5, [r2, #0]
    85a6:	0608      	lsls	r0, r1, #24
    85a8:	d522      	bpl.n	85f0 <_printf_i+0x134>
    85aa:	07cb      	lsls	r3, r1, #31
    85ac:	d502      	bpl.n	85b4 <_printf_i+0xf8>
    85ae:	2320      	movs	r3, #32
    85b0:	4319      	orrs	r1, r3
    85b2:	6021      	str	r1, [r4, #0]
    85b4:	2710      	movs	r7, #16
    85b6:	2d00      	cmp	r5, #0
    85b8:	d103      	bne.n	85c2 <_printf_i+0x106>
    85ba:	2320      	movs	r3, #32
    85bc:	6822      	ldr	r2, [r4, #0]
    85be:	439a      	bics	r2, r3
    85c0:	6022      	str	r2, [r4, #0]
    85c2:	0023      	movs	r3, r4
    85c4:	2200      	movs	r2, #0
    85c6:	3343      	adds	r3, #67	; 0x43
    85c8:	701a      	strb	r2, [r3, #0]
    85ca:	6863      	ldr	r3, [r4, #4]
    85cc:	60a3      	str	r3, [r4, #8]
    85ce:	2b00      	cmp	r3, #0
    85d0:	db5c      	blt.n	868c <_printf_i+0x1d0>
    85d2:	2204      	movs	r2, #4
    85d4:	6821      	ldr	r1, [r4, #0]
    85d6:	4391      	bics	r1, r2
    85d8:	6021      	str	r1, [r4, #0]
    85da:	2d00      	cmp	r5, #0
    85dc:	d158      	bne.n	8690 <_printf_i+0x1d4>
    85de:	9e04      	ldr	r6, [sp, #16]
    85e0:	2b00      	cmp	r3, #0
    85e2:	d064      	beq.n	86ae <_printf_i+0x1f2>
    85e4:	0026      	movs	r6, r4
    85e6:	9b03      	ldr	r3, [sp, #12]
    85e8:	3642      	adds	r6, #66	; 0x42
    85ea:	781b      	ldrb	r3, [r3, #0]
    85ec:	7033      	strb	r3, [r6, #0]
    85ee:	e05e      	b.n	86ae <_printf_i+0x1f2>
    85f0:	0648      	lsls	r0, r1, #25
    85f2:	d5da      	bpl.n	85aa <_printf_i+0xee>
    85f4:	b2ad      	uxth	r5, r5
    85f6:	e7d8      	b.n	85aa <_printf_i+0xee>
    85f8:	6809      	ldr	r1, [r1, #0]
    85fa:	681a      	ldr	r2, [r3, #0]
    85fc:	0608      	lsls	r0, r1, #24
    85fe:	d505      	bpl.n	860c <_printf_i+0x150>
    8600:	1d11      	adds	r1, r2, #4
    8602:	6019      	str	r1, [r3, #0]
    8604:	6813      	ldr	r3, [r2, #0]
    8606:	6962      	ldr	r2, [r4, #20]
    8608:	601a      	str	r2, [r3, #0]
    860a:	e006      	b.n	861a <_printf_i+0x15e>
    860c:	0649      	lsls	r1, r1, #25
    860e:	d5f7      	bpl.n	8600 <_printf_i+0x144>
    8610:	1d11      	adds	r1, r2, #4
    8612:	6019      	str	r1, [r3, #0]
    8614:	6813      	ldr	r3, [r2, #0]
    8616:	8aa2      	ldrh	r2, [r4, #20]
    8618:	801a      	strh	r2, [r3, #0]
    861a:	2300      	movs	r3, #0
    861c:	9e04      	ldr	r6, [sp, #16]
    861e:	6123      	str	r3, [r4, #16]
    8620:	e054      	b.n	86cc <_printf_i+0x210>
    8622:	681a      	ldr	r2, [r3, #0]
    8624:	1d11      	adds	r1, r2, #4
    8626:	6019      	str	r1, [r3, #0]
    8628:	6816      	ldr	r6, [r2, #0]
    862a:	2100      	movs	r1, #0
    862c:	6862      	ldr	r2, [r4, #4]
    862e:	0030      	movs	r0, r6
    8630:	f000 f85e 	bl	86f0 <memchr>
    8634:	2800      	cmp	r0, #0
    8636:	d001      	beq.n	863c <_printf_i+0x180>
    8638:	1b80      	subs	r0, r0, r6
    863a:	6060      	str	r0, [r4, #4]
    863c:	6863      	ldr	r3, [r4, #4]
    863e:	6123      	str	r3, [r4, #16]
    8640:	2300      	movs	r3, #0
    8642:	9a04      	ldr	r2, [sp, #16]
    8644:	7013      	strb	r3, [r2, #0]
    8646:	e041      	b.n	86cc <_printf_i+0x210>
    8648:	6923      	ldr	r3, [r4, #16]
    864a:	0032      	movs	r2, r6
    864c:	9906      	ldr	r1, [sp, #24]
    864e:	9805      	ldr	r0, [sp, #20]
    8650:	9d07      	ldr	r5, [sp, #28]
    8652:	47a8      	blx	r5
    8654:	1c43      	adds	r3, r0, #1
    8656:	d043      	beq.n	86e0 <_printf_i+0x224>
    8658:	6823      	ldr	r3, [r4, #0]
    865a:	2500      	movs	r5, #0
    865c:	079b      	lsls	r3, r3, #30
    865e:	d40f      	bmi.n	8680 <_printf_i+0x1c4>
    8660:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8662:	68e0      	ldr	r0, [r4, #12]
    8664:	4298      	cmp	r0, r3
    8666:	da3d      	bge.n	86e4 <_printf_i+0x228>
    8668:	0018      	movs	r0, r3
    866a:	e03b      	b.n	86e4 <_printf_i+0x228>
    866c:	0022      	movs	r2, r4
    866e:	2301      	movs	r3, #1
    8670:	3219      	adds	r2, #25
    8672:	9906      	ldr	r1, [sp, #24]
    8674:	9805      	ldr	r0, [sp, #20]
    8676:	9e07      	ldr	r6, [sp, #28]
    8678:	47b0      	blx	r6
    867a:	1c43      	adds	r3, r0, #1
    867c:	d030      	beq.n	86e0 <_printf_i+0x224>
    867e:	3501      	adds	r5, #1
    8680:	68e3      	ldr	r3, [r4, #12]
    8682:	9a09      	ldr	r2, [sp, #36]	; 0x24
    8684:	1a9b      	subs	r3, r3, r2
    8686:	429d      	cmp	r5, r3
    8688:	dbf0      	blt.n	866c <_printf_i+0x1b0>
    868a:	e7e9      	b.n	8660 <_printf_i+0x1a4>
    868c:	2d00      	cmp	r5, #0
    868e:	d0a9      	beq.n	85e4 <_printf_i+0x128>
    8690:	9e04      	ldr	r6, [sp, #16]
    8692:	0028      	movs	r0, r5
    8694:	0039      	movs	r1, r7
    8696:	f7fd fd23 	bl	60e0 <__aeabi_uidivmod>
    869a:	9b03      	ldr	r3, [sp, #12]
    869c:	3e01      	subs	r6, #1
    869e:	5c5b      	ldrb	r3, [r3, r1]
    86a0:	0028      	movs	r0, r5
    86a2:	7033      	strb	r3, [r6, #0]
    86a4:	0039      	movs	r1, r7
    86a6:	f7fd fc95 	bl	5fd4 <__udivsi3>
    86aa:	1e05      	subs	r5, r0, #0
    86ac:	d1f1      	bne.n	8692 <_printf_i+0x1d6>
    86ae:	2f08      	cmp	r7, #8
    86b0:	d109      	bne.n	86c6 <_printf_i+0x20a>
    86b2:	6823      	ldr	r3, [r4, #0]
    86b4:	07db      	lsls	r3, r3, #31
    86b6:	d506      	bpl.n	86c6 <_printf_i+0x20a>
    86b8:	6863      	ldr	r3, [r4, #4]
    86ba:	6922      	ldr	r2, [r4, #16]
    86bc:	4293      	cmp	r3, r2
    86be:	dc02      	bgt.n	86c6 <_printf_i+0x20a>
    86c0:	2330      	movs	r3, #48	; 0x30
    86c2:	3e01      	subs	r6, #1
    86c4:	7033      	strb	r3, [r6, #0]
    86c6:	9b04      	ldr	r3, [sp, #16]
    86c8:	1b9b      	subs	r3, r3, r6
    86ca:	6123      	str	r3, [r4, #16]
    86cc:	9b07      	ldr	r3, [sp, #28]
    86ce:	aa09      	add	r2, sp, #36	; 0x24
    86d0:	9300      	str	r3, [sp, #0]
    86d2:	0021      	movs	r1, r4
    86d4:	9b06      	ldr	r3, [sp, #24]
    86d6:	9805      	ldr	r0, [sp, #20]
    86d8:	f7ff fe82 	bl	83e0 <_printf_common>
    86dc:	1c43      	adds	r3, r0, #1
    86de:	d1b3      	bne.n	8648 <_printf_i+0x18c>
    86e0:	2001      	movs	r0, #1
    86e2:	4240      	negs	r0, r0
    86e4:	b00b      	add	sp, #44	; 0x2c
    86e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    86e8:	00008bca 	.word	0x00008bca
    86ec:	00008bb9 	.word	0x00008bb9

000086f0 <memchr>:
    86f0:	b2c9      	uxtb	r1, r1
    86f2:	1882      	adds	r2, r0, r2
    86f4:	4290      	cmp	r0, r2
    86f6:	d101      	bne.n	86fc <memchr+0xc>
    86f8:	2000      	movs	r0, #0
    86fa:	4770      	bx	lr
    86fc:	7803      	ldrb	r3, [r0, #0]
    86fe:	428b      	cmp	r3, r1
    8700:	d0fb      	beq.n	86fa <memchr+0xa>
    8702:	3001      	adds	r0, #1
    8704:	e7f6      	b.n	86f4 <memchr+0x4>

00008706 <memmove>:
    8706:	b510      	push	{r4, lr}
    8708:	4288      	cmp	r0, r1
    870a:	d902      	bls.n	8712 <memmove+0xc>
    870c:	188b      	adds	r3, r1, r2
    870e:	4298      	cmp	r0, r3
    8710:	d308      	bcc.n	8724 <memmove+0x1e>
    8712:	2300      	movs	r3, #0
    8714:	429a      	cmp	r2, r3
    8716:	d007      	beq.n	8728 <memmove+0x22>
    8718:	5ccc      	ldrb	r4, [r1, r3]
    871a:	54c4      	strb	r4, [r0, r3]
    871c:	3301      	adds	r3, #1
    871e:	e7f9      	b.n	8714 <memmove+0xe>
    8720:	5c8b      	ldrb	r3, [r1, r2]
    8722:	5483      	strb	r3, [r0, r2]
    8724:	3a01      	subs	r2, #1
    8726:	d2fb      	bcs.n	8720 <memmove+0x1a>
    8728:	bd10      	pop	{r4, pc}
	...

0000872c <_free_r>:
    872c:	b570      	push	{r4, r5, r6, lr}
    872e:	0005      	movs	r5, r0
    8730:	2900      	cmp	r1, #0
    8732:	d010      	beq.n	8756 <_free_r+0x2a>
    8734:	1f0c      	subs	r4, r1, #4
    8736:	6823      	ldr	r3, [r4, #0]
    8738:	2b00      	cmp	r3, #0
    873a:	da00      	bge.n	873e <_free_r+0x12>
    873c:	18e4      	adds	r4, r4, r3
    873e:	0028      	movs	r0, r5
    8740:	f000 f8d4 	bl	88ec <__malloc_lock>
    8744:	4a1d      	ldr	r2, [pc, #116]	; (87bc <_free_r+0x90>)
    8746:	6813      	ldr	r3, [r2, #0]
    8748:	2b00      	cmp	r3, #0
    874a:	d105      	bne.n	8758 <_free_r+0x2c>
    874c:	6063      	str	r3, [r4, #4]
    874e:	6014      	str	r4, [r2, #0]
    8750:	0028      	movs	r0, r5
    8752:	f000 f8cc 	bl	88ee <__malloc_unlock>
    8756:	bd70      	pop	{r4, r5, r6, pc}
    8758:	42a3      	cmp	r3, r4
    875a:	d909      	bls.n	8770 <_free_r+0x44>
    875c:	6821      	ldr	r1, [r4, #0]
    875e:	1860      	adds	r0, r4, r1
    8760:	4283      	cmp	r3, r0
    8762:	d1f3      	bne.n	874c <_free_r+0x20>
    8764:	6818      	ldr	r0, [r3, #0]
    8766:	685b      	ldr	r3, [r3, #4]
    8768:	1841      	adds	r1, r0, r1
    876a:	6021      	str	r1, [r4, #0]
    876c:	e7ee      	b.n	874c <_free_r+0x20>
    876e:	0013      	movs	r3, r2
    8770:	685a      	ldr	r2, [r3, #4]
    8772:	2a00      	cmp	r2, #0
    8774:	d001      	beq.n	877a <_free_r+0x4e>
    8776:	42a2      	cmp	r2, r4
    8778:	d9f9      	bls.n	876e <_free_r+0x42>
    877a:	6819      	ldr	r1, [r3, #0]
    877c:	1858      	adds	r0, r3, r1
    877e:	42a0      	cmp	r0, r4
    8780:	d10b      	bne.n	879a <_free_r+0x6e>
    8782:	6820      	ldr	r0, [r4, #0]
    8784:	1809      	adds	r1, r1, r0
    8786:	1858      	adds	r0, r3, r1
    8788:	6019      	str	r1, [r3, #0]
    878a:	4282      	cmp	r2, r0
    878c:	d1e0      	bne.n	8750 <_free_r+0x24>
    878e:	6810      	ldr	r0, [r2, #0]
    8790:	6852      	ldr	r2, [r2, #4]
    8792:	1841      	adds	r1, r0, r1
    8794:	6019      	str	r1, [r3, #0]
    8796:	605a      	str	r2, [r3, #4]
    8798:	e7da      	b.n	8750 <_free_r+0x24>
    879a:	42a0      	cmp	r0, r4
    879c:	d902      	bls.n	87a4 <_free_r+0x78>
    879e:	230c      	movs	r3, #12
    87a0:	602b      	str	r3, [r5, #0]
    87a2:	e7d5      	b.n	8750 <_free_r+0x24>
    87a4:	6821      	ldr	r1, [r4, #0]
    87a6:	1860      	adds	r0, r4, r1
    87a8:	4282      	cmp	r2, r0
    87aa:	d103      	bne.n	87b4 <_free_r+0x88>
    87ac:	6810      	ldr	r0, [r2, #0]
    87ae:	6852      	ldr	r2, [r2, #4]
    87b0:	1841      	adds	r1, r0, r1
    87b2:	6021      	str	r1, [r4, #0]
    87b4:	6062      	str	r2, [r4, #4]
    87b6:	605c      	str	r4, [r3, #4]
    87b8:	e7ca      	b.n	8750 <_free_r+0x24>
    87ba:	46c0      	nop			; (mov r8, r8)
    87bc:	200000bc 	.word	0x200000bc

000087c0 <_malloc_r>:
    87c0:	2303      	movs	r3, #3
    87c2:	b570      	push	{r4, r5, r6, lr}
    87c4:	1ccd      	adds	r5, r1, #3
    87c6:	439d      	bics	r5, r3
    87c8:	3508      	adds	r5, #8
    87ca:	0006      	movs	r6, r0
    87cc:	2d0c      	cmp	r5, #12
    87ce:	d21e      	bcs.n	880e <_malloc_r+0x4e>
    87d0:	250c      	movs	r5, #12
    87d2:	42a9      	cmp	r1, r5
    87d4:	d81d      	bhi.n	8812 <_malloc_r+0x52>
    87d6:	0030      	movs	r0, r6
    87d8:	f000 f888 	bl	88ec <__malloc_lock>
    87dc:	4a25      	ldr	r2, [pc, #148]	; (8874 <_malloc_r+0xb4>)
    87de:	6814      	ldr	r4, [r2, #0]
    87e0:	0021      	movs	r1, r4
    87e2:	2900      	cmp	r1, #0
    87e4:	d119      	bne.n	881a <_malloc_r+0x5a>
    87e6:	4c24      	ldr	r4, [pc, #144]	; (8878 <_malloc_r+0xb8>)
    87e8:	6823      	ldr	r3, [r4, #0]
    87ea:	2b00      	cmp	r3, #0
    87ec:	d103      	bne.n	87f6 <_malloc_r+0x36>
    87ee:	0030      	movs	r0, r6
    87f0:	f000 f86a 	bl	88c8 <_sbrk_r>
    87f4:	6020      	str	r0, [r4, #0]
    87f6:	0029      	movs	r1, r5
    87f8:	0030      	movs	r0, r6
    87fa:	f000 f865 	bl	88c8 <_sbrk_r>
    87fe:	1c43      	adds	r3, r0, #1
    8800:	d12c      	bne.n	885c <_malloc_r+0x9c>
    8802:	230c      	movs	r3, #12
    8804:	0030      	movs	r0, r6
    8806:	6033      	str	r3, [r6, #0]
    8808:	f000 f871 	bl	88ee <__malloc_unlock>
    880c:	e003      	b.n	8816 <_malloc_r+0x56>
    880e:	2d00      	cmp	r5, #0
    8810:	dadf      	bge.n	87d2 <_malloc_r+0x12>
    8812:	230c      	movs	r3, #12
    8814:	6033      	str	r3, [r6, #0]
    8816:	2000      	movs	r0, #0
    8818:	bd70      	pop	{r4, r5, r6, pc}
    881a:	680b      	ldr	r3, [r1, #0]
    881c:	1b5b      	subs	r3, r3, r5
    881e:	d41a      	bmi.n	8856 <_malloc_r+0x96>
    8820:	2b0b      	cmp	r3, #11
    8822:	d903      	bls.n	882c <_malloc_r+0x6c>
    8824:	600b      	str	r3, [r1, #0]
    8826:	18cc      	adds	r4, r1, r3
    8828:	6025      	str	r5, [r4, #0]
    882a:	e003      	b.n	8834 <_malloc_r+0x74>
    882c:	428c      	cmp	r4, r1
    882e:	d10e      	bne.n	884e <_malloc_r+0x8e>
    8830:	6863      	ldr	r3, [r4, #4]
    8832:	6013      	str	r3, [r2, #0]
    8834:	0030      	movs	r0, r6
    8836:	f000 f85a 	bl	88ee <__malloc_unlock>
    883a:	0020      	movs	r0, r4
    883c:	2207      	movs	r2, #7
    883e:	300b      	adds	r0, #11
    8840:	1d23      	adds	r3, r4, #4
    8842:	4390      	bics	r0, r2
    8844:	1ac3      	subs	r3, r0, r3
    8846:	d0e7      	beq.n	8818 <_malloc_r+0x58>
    8848:	425a      	negs	r2, r3
    884a:	50e2      	str	r2, [r4, r3]
    884c:	e7e4      	b.n	8818 <_malloc_r+0x58>
    884e:	684b      	ldr	r3, [r1, #4]
    8850:	6063      	str	r3, [r4, #4]
    8852:	000c      	movs	r4, r1
    8854:	e7ee      	b.n	8834 <_malloc_r+0x74>
    8856:	000c      	movs	r4, r1
    8858:	6849      	ldr	r1, [r1, #4]
    885a:	e7c2      	b.n	87e2 <_malloc_r+0x22>
    885c:	2303      	movs	r3, #3
    885e:	1cc4      	adds	r4, r0, #3
    8860:	439c      	bics	r4, r3
    8862:	42a0      	cmp	r0, r4
    8864:	d0e0      	beq.n	8828 <_malloc_r+0x68>
    8866:	1a21      	subs	r1, r4, r0
    8868:	0030      	movs	r0, r6
    886a:	f000 f82d 	bl	88c8 <_sbrk_r>
    886e:	1c43      	adds	r3, r0, #1
    8870:	d1da      	bne.n	8828 <_malloc_r+0x68>
    8872:	e7c6      	b.n	8802 <_malloc_r+0x42>
    8874:	200000bc 	.word	0x200000bc
    8878:	200000c0 	.word	0x200000c0

0000887c <_realloc_r>:
    887c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    887e:	0007      	movs	r7, r0
    8880:	000d      	movs	r5, r1
    8882:	0016      	movs	r6, r2
    8884:	2900      	cmp	r1, #0
    8886:	d105      	bne.n	8894 <_realloc_r+0x18>
    8888:	0011      	movs	r1, r2
    888a:	f7ff ff99 	bl	87c0 <_malloc_r>
    888e:	0004      	movs	r4, r0
    8890:	0020      	movs	r0, r4
    8892:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8894:	2a00      	cmp	r2, #0
    8896:	d103      	bne.n	88a0 <_realloc_r+0x24>
    8898:	f7ff ff48 	bl	872c <_free_r>
    889c:	0034      	movs	r4, r6
    889e:	e7f7      	b.n	8890 <_realloc_r+0x14>
    88a0:	f000 f826 	bl	88f0 <_malloc_usable_size_r>
    88a4:	002c      	movs	r4, r5
    88a6:	4286      	cmp	r6, r0
    88a8:	d9f2      	bls.n	8890 <_realloc_r+0x14>
    88aa:	0031      	movs	r1, r6
    88ac:	0038      	movs	r0, r7
    88ae:	f7ff ff87 	bl	87c0 <_malloc_r>
    88b2:	1e04      	subs	r4, r0, #0
    88b4:	d0ec      	beq.n	8890 <_realloc_r+0x14>
    88b6:	0029      	movs	r1, r5
    88b8:	0032      	movs	r2, r6
    88ba:	f7ff fbf7 	bl	80ac <memcpy>
    88be:	0029      	movs	r1, r5
    88c0:	0038      	movs	r0, r7
    88c2:	f7ff ff33 	bl	872c <_free_r>
    88c6:	e7e3      	b.n	8890 <_realloc_r+0x14>

000088c8 <_sbrk_r>:
    88c8:	2300      	movs	r3, #0
    88ca:	b570      	push	{r4, r5, r6, lr}
    88cc:	4c06      	ldr	r4, [pc, #24]	; (88e8 <_sbrk_r+0x20>)
    88ce:	0005      	movs	r5, r0
    88d0:	0008      	movs	r0, r1
    88d2:	6023      	str	r3, [r4, #0]
    88d4:	f7fb fe0a 	bl	44ec <_sbrk>
    88d8:	1c43      	adds	r3, r0, #1
    88da:	d103      	bne.n	88e4 <_sbrk_r+0x1c>
    88dc:	6823      	ldr	r3, [r4, #0]
    88de:	2b00      	cmp	r3, #0
    88e0:	d000      	beq.n	88e4 <_sbrk_r+0x1c>
    88e2:	602b      	str	r3, [r5, #0]
    88e4:	bd70      	pop	{r4, r5, r6, pc}
    88e6:	46c0      	nop			; (mov r8, r8)
    88e8:	200001e0 	.word	0x200001e0

000088ec <__malloc_lock>:
    88ec:	4770      	bx	lr

000088ee <__malloc_unlock>:
    88ee:	4770      	bx	lr

000088f0 <_malloc_usable_size_r>:
    88f0:	1f0b      	subs	r3, r1, #4
    88f2:	681b      	ldr	r3, [r3, #0]
    88f4:	1f18      	subs	r0, r3, #4
    88f6:	2b00      	cmp	r3, #0
    88f8:	da01      	bge.n	88fe <_malloc_usable_size_r+0xe>
    88fa:	580b      	ldr	r3, [r1, r0]
    88fc:	18c0      	adds	r0, r0, r3
    88fe:	4770      	bx	lr
    8900:	454b4157 	.word	0x454b4157
    8904:	0a0d5055 	.word	0x0a0d5055
    8908:	00000000 	.word	0x00000000
    890c:	6f6f6f62 	.word	0x6f6f6f62
    8910:	00006232 	.word	0x00006232
    8914:	42000800 	.word	0x42000800
    8918:	42000c00 	.word	0x42000c00
    891c:	42001000 	.word	0x42001000
    8920:	42001400 	.word	0x42001400
    8924:	42001800 	.word	0x42001800
    8928:	42001c00 	.word	0x42001c00
    892c:	5f46524e 	.word	0x5f46524e
    8930:	464e4f43 	.word	0x464e4f43
    8934:	525f4749 	.word	0x525f4749
    8938:	093a4745 	.word	0x093a4745
    893c:	32302509 	.word	0x32302509
    8940:	000a0d78 	.word	0x000a0d78
    8944:	5f46524e 	.word	0x5f46524e
    8948:	415f4e45 	.word	0x415f4e45
    894c:	45525f41 	.word	0x45525f41
    8950:	09093a47 	.word	0x09093a47
    8954:	78323025 	.word	0x78323025
    8958:	00000a0d 	.word	0x00000a0d
    895c:	5f46524e 	.word	0x5f46524e
    8960:	525f4e45 	.word	0x525f4e45
    8964:	44444158 	.word	0x44444158
    8968:	45525f52 	.word	0x45525f52
    896c:	25093a47 	.word	0x25093a47
    8970:	0d783230 	.word	0x0d783230
    8974:	0000000a 	.word	0x0000000a
    8978:	5f46524e 	.word	0x5f46524e
    897c:	55544553 	.word	0x55544553
    8980:	57415f50 	.word	0x57415f50
    8984:	4745525f 	.word	0x4745525f
    8988:	3025093a 	.word	0x3025093a
    898c:	0a0d7832 	.word	0x0a0d7832
    8990:	00000000 	.word	0x00000000
    8994:	5f46524e 	.word	0x5f46524e
    8998:	55544553 	.word	0x55544553
    899c:	45525f50 	.word	0x45525f50
    89a0:	525f5254 	.word	0x525f5254
    89a4:	093a4745 	.word	0x093a4745
    89a8:	78323025 	.word	0x78323025
    89ac:	00000a0d 	.word	0x00000a0d
    89b0:	5f46524e 	.word	0x5f46524e
    89b4:	435f4652 	.word	0x435f4652
    89b8:	45525f48 	.word	0x45525f48
    89bc:	09093a47 	.word	0x09093a47
    89c0:	78323025 	.word	0x78323025
    89c4:	00000a0d 	.word	0x00000a0d
    89c8:	5f46524e 	.word	0x5f46524e
    89cc:	535f4652 	.word	0x535f4652
    89d0:	50555445 	.word	0x50555445
    89d4:	4745525f 	.word	0x4745525f
    89d8:	3025093a 	.word	0x3025093a
    89dc:	0a0d7832 	.word	0x0a0d7832
    89e0:	00000000 	.word	0x00000000
    89e4:	5f46524e 	.word	0x5f46524e
    89e8:	54415453 	.word	0x54415453
    89ec:	525f5355 	.word	0x525f5355
    89f0:	093a4745 	.word	0x093a4745
    89f4:	32302509 	.word	0x32302509
    89f8:	000a0d78 	.word	0x000a0d78
    89fc:	5f46524e 	.word	0x5f46524e
    8a00:	54414546 	.word	0x54414546
    8a04:	5f455255 	.word	0x5f455255
    8a08:	3a474552 	.word	0x3a474552
    8a0c:	32302509 	.word	0x32302509
    8a10:	000a0d78 	.word	0x000a0d78
    8a14:	5f46524e 	.word	0x5f46524e
    8a18:	504e5944 	.word	0x504e5944
    8a1c:	45525f44 	.word	0x45525f44
    8a20:	09093a47 	.word	0x09093a47
    8a24:	78323025 	.word	0x78323025
    8a28:	00000a0d 	.word	0x00000a0d
    8a2c:	c2c2c2c2 	.word	0xc2c2c2c2
    8a30:	000000c2 	.word	0x000000c2
    8a34:	e7e7e7e7 	.word	0xe7e7e7e7
    8a38:	000000e7 	.word	0x000000e7
    8a3c:	6c6c6548 	.word	0x6c6c6548
    8a40:	6f57206f 	.word	0x6f57206f
    8a44:	21646c72 	.word	0x21646c72
    8a48:	69725020 	.word	0x69725020
    8a4c:	7365736e 	.word	0x7365736e
    8a50:	00006573 	.word	0x00006573
    8a54:	00003a6a 	.word	0x00003a6a
    8a58:	00003ae4 	.word	0x00003ae4
    8a5c:	00003ae4 	.word	0x00003ae4
    8a60:	00003a88 	.word	0x00003a88
    8a64:	00003a82 	.word	0x00003a82
    8a68:	00003a8e 	.word	0x00003a8e
    8a6c:	00003a70 	.word	0x00003a70
    8a70:	00003a94 	.word	0x00003a94
    8a74:	00003aca 	.word	0x00003aca
    8a78:	00003bc0 	.word	0x00003bc0
    8a7c:	00003c10 	.word	0x00003c10
    8a80:	00003c10 	.word	0x00003c10
    8a84:	00003c0c 	.word	0x00003c0c
    8a88:	00003bb2 	.word	0x00003bb2
    8a8c:	00003bd2 	.word	0x00003bd2
    8a90:	00003ba2 	.word	0x00003ba2
    8a94:	00003be4 	.word	0x00003be4
    8a98:	00003bf6 	.word	0x00003bf6
    8a9c:	6f420a0d 	.word	0x6f420a0d
    8aa0:	6e69746f 	.word	0x6e69746f
    8aa4:	726e2067 	.word	0x726e2067
    8aa8:	6c343266 	.word	0x6c343266
    8aac:	6e2d3130 	.word	0x6e2d3130
    8ab0:	2065646f 	.word	0x2065646f
    8ab4:	7061202d 	.word	0x7061202d
    8ab8:	000a0d70 	.word	0x000a0d70
    8abc:	76205753 	.word	0x76205753
    8ac0:	69737265 	.word	0x69737265
    8ac4:	203a6e6f 	.word	0x203a6e6f
    8ac8:	0a0d6425 	.word	0x0a0d6425
    8acc:	00000000 	.word	0x00000000
    8ad0:	2d2d2d2d 	.word	0x2d2d2d2d
    8ad4:	2d2d2d2d 	.word	0x2d2d2d2d
    8ad8:	2d2d2d2d 	.word	0x2d2d2d2d
    8adc:	2d2d2d2d 	.word	0x2d2d2d2d
    8ae0:	00000a0d 	.word	0x00000a0d
    8ae4:	25093a54 	.word	0x25093a54
    8ae8:	480a0d64 	.word	0x480a0d64
    8aec:	6425093a 	.word	0x6425093a
    8af0:	3a500a0d 	.word	0x3a500a0d
    8af4:	646c2509 	.word	0x646c2509
    8af8:	0a0d0a0d 	.word	0x0a0d0a0d
    8afc:	00000000 	.word	0x00000000
    8b00:	00676f6c 	.word	0x00676f6c
    8b04:	00000000 	.word	0x00000000
    8b08:	31676f6c 	.word	0x31676f6c
    8b0c:	00000030 	.word	0x00000030
    8b10:	00776f70 	.word	0x00776f70
    8b14:	00000000 	.word	0x00000000

00008b18 <TWO52>:
    8b18:	00000000 43300000 00000000 c3300000     ......0C......0.
    8b28:	00006b94 00006b76 00006b30 00006a4e     .k..vk..0k..Nj..
    8b38:	00006b30 00006b68 00006b30 00006a4e     0k..hk..0k..Nj..
    8b48:	00006b76 00006b76 00006b68 00006a4e     vk..vk..hk..Nj..
    8b58:	00006a46 00006a46 00006a46 00006dac     Fj..Fj..Fj...m..
    8b68:	000073f4 000072b4 000072b4 000072b0     .s...r...r...r..
    8b78:	000073cc 000073cc 000073be 000072b0     .s...s...s...r..
    8b88:	000073cc 000073be 000073cc 000072b0     .s...s...s...r..
    8b98:	000073d4 000073d4 000073d4 000075d8     .s...s...s...u..
    8ba8:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    8bb8:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    8bc8:	31300046 35343332 39383736 64636261     F.0123456789abcd
    8bd8:	00006665                                ef..

00008bdc <_init>:
    8bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8bde:	46c0      	nop			; (mov r8, r8)
    8be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    8be2:	bc08      	pop	{r3}
    8be4:	469e      	mov	lr, r3
    8be6:	4770      	bx	lr

00008be8 <__init_array_start>:
    8be8:	000000dd 	.word	0x000000dd

00008bec <_fini>:
    8bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8bee:	46c0      	nop			; (mov r8, r8)
    8bf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    8bf2:	bc08      	pop	{r3}
    8bf4:	469e      	mov	lr, r3
    8bf6:	4770      	bx	lr

00008bf8 <__fini_array_start>:
    8bf8:	000000b5 	.word	0x000000b5
