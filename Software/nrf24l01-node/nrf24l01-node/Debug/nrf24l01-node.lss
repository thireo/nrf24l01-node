
nrf24l01-node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005300  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000010  20000000  00005300  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000114  20000010  00005310  00020010  2**3
                  ALLOC
  3 .stack        00002004  20000124  00005424  00020010  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
  6 .debug_info   00023b4d  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002cfe  00000000  00000000  00043bde  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00001d10  00000000  00000000  000468dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000005c0  00000000  00000000  000485ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000004c0  00000000  00000000  00048bac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00019ea7  00000000  00000000  0004906c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000b9b6  00000000  00000000  00062f13  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008a9d5  00000000  00000000  0006e8c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001454  00000000  00000000  000f92a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	28 21 00 20 0d 32 00 00 05 33 00 00 05 33 00 00     (!. .2...3...3..
	...
      2c:	05 33 00 00 00 00 00 00 00 00 00 00 05 33 00 00     .3...........3..
      3c:	05 33 00 00 05 33 00 00 05 33 00 00 05 33 00 00     .3...3...3...3..
      4c:	05 33 00 00 91 25 00 00 05 33 00 00 05 33 00 00     .3...%...3...3..
      5c:	05 33 00 00 05 33 00 00 05 33 00 00 05 33 00 00     .3...3...3...3..
      6c:	05 33 00 00 05 33 00 00 05 33 00 00 05 33 00 00     .3...3...3...3..
      7c:	05 33 00 00 05 33 00 00 05 33 00 00 05 33 00 00     .3...3...3...3..
      8c:	05 33 00 00 05 33 00 00 05 33 00 00 05 33 00 00     .3...3...3...3..
      9c:	05 33 00 00 05 33 00 00 05 33 00 00 05 33 00 00     .3...3...3...3..
      ac:	05 33 00 00 00 00 00 00                             .3......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000010 	.word	0x20000010
      d4:	00000000 	.word	0x00000000
      d8:	00005300 	.word	0x00005300

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000014 	.word	0x20000014
     108:	00005300 	.word	0x00005300
     10c:	00005300 	.word	0x00005300
     110:	00000000 	.word	0x00000000

00000114 <delay_cycles>:
 *
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
     114:	b580      	push	{r7, lr}
     116:	b082      	sub	sp, #8
     118:	af00      	add	r7, sp, #0
     11a:	6078      	str	r0, [r7, #4]
	if (n > 0) {
     11c:	687b      	ldr	r3, [r7, #4]
     11e:	2b00      	cmp	r3, #0
     120:	d00c      	beq.n	13c <delay_cycles+0x28>
		SysTick->LOAD = n;
     122:	4b08      	ldr	r3, [pc, #32]	; (144 <delay_cycles+0x30>)
     124:	687a      	ldr	r2, [r7, #4]
     126:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
     128:	4b06      	ldr	r3, [pc, #24]	; (144 <delay_cycles+0x30>)
     12a:	2200      	movs	r2, #0
     12c:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     12e:	46c0      	nop			; (mov r8, r8)
     130:	4b04      	ldr	r3, [pc, #16]	; (144 <delay_cycles+0x30>)
     132:	681a      	ldr	r2, [r3, #0]
     134:	2380      	movs	r3, #128	; 0x80
     136:	025b      	lsls	r3, r3, #9
     138:	4013      	ands	r3, r2
     13a:	d0f9      	beq.n	130 <delay_cycles+0x1c>
		};
	}
}
     13c:	46c0      	nop			; (mov r8, r8)
     13e:	46bd      	mov	sp, r7
     140:	b002      	add	sp, #8
     142:	bd80      	pop	{r7, pc}
     144:	e000e010 	.word	0xe000e010

00000148 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     148:	b580      	push	{r7, lr}
     14a:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
     14c:	2000      	movs	r0, #0
     14e:	4b0f      	ldr	r3, [pc, #60]	; (18c <delay_init+0x44>)
     150:	4798      	blx	r3
     152:	0002      	movs	r2, r0
     154:	4b0e      	ldr	r3, [pc, #56]	; (190 <delay_init+0x48>)
     156:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
     158:	4b0d      	ldr	r3, [pc, #52]	; (190 <delay_init+0x48>)
     15a:	6818      	ldr	r0, [r3, #0]
     15c:	4b0d      	ldr	r3, [pc, #52]	; (194 <delay_init+0x4c>)
     15e:	22fa      	movs	r2, #250	; 0xfa
     160:	0091      	lsls	r1, r2, #2
     162:	4798      	blx	r3
     164:	0003      	movs	r3, r0
     166:	001a      	movs	r2, r3
     168:	4b09      	ldr	r3, [pc, #36]	; (190 <delay_init+0x48>)
     16a:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     16c:	4b08      	ldr	r3, [pc, #32]	; (190 <delay_init+0x48>)
     16e:	6818      	ldr	r0, [r3, #0]
     170:	4b08      	ldr	r3, [pc, #32]	; (194 <delay_init+0x4c>)
     172:	22fa      	movs	r2, #250	; 0xfa
     174:	0091      	lsls	r1, r2, #2
     176:	4798      	blx	r3
     178:	0003      	movs	r3, r0
     17a:	001a      	movs	r2, r3
     17c:	4b06      	ldr	r3, [pc, #24]	; (198 <delay_init+0x50>)
     17e:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     180:	4b06      	ldr	r3, [pc, #24]	; (19c <delay_init+0x54>)
     182:	2205      	movs	r2, #5
     184:	601a      	str	r2, [r3, #0]
}
     186:	46c0      	nop			; (mov r8, r8)
     188:	46bd      	mov	sp, r7
     18a:	bd80      	pop	{r7, pc}
     18c:	00002dc1 	.word	0x00002dc1
     190:	20000000 	.word	0x20000000
     194:	000034c9 	.word	0x000034c9
     198:	20000004 	.word	0x20000004
     19c:	e000e010 	.word	0xe000e010

000001a0 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     1a0:	b580      	push	{r7, lr}
     1a2:	b082      	sub	sp, #8
     1a4:	af00      	add	r7, sp, #0
     1a6:	6078      	str	r0, [r7, #4]
	while (n--) {
     1a8:	e004      	b.n	1b4 <delay_cycles_ms+0x14>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     1aa:	4b07      	ldr	r3, [pc, #28]	; (1c8 <delay_cycles_ms+0x28>)
     1ac:	681b      	ldr	r3, [r3, #0]
     1ae:	0018      	movs	r0, r3
     1b0:	4b06      	ldr	r3, [pc, #24]	; (1cc <delay_cycles_ms+0x2c>)
     1b2:	4798      	blx	r3
	while (n--) {
     1b4:	687b      	ldr	r3, [r7, #4]
     1b6:	1e5a      	subs	r2, r3, #1
     1b8:	607a      	str	r2, [r7, #4]
     1ba:	2b00      	cmp	r3, #0
     1bc:	d1f5      	bne.n	1aa <delay_cycles_ms+0xa>
	}
}
     1be:	46c0      	nop			; (mov r8, r8)
     1c0:	46bd      	mov	sp, r7
     1c2:	b002      	add	sp, #8
     1c4:	bd80      	pop	{r7, pc}
     1c6:	46c0      	nop			; (mov r8, r8)
     1c8:	20000000 	.word	0x20000000
     1cc:	00000115 	.word	0x00000115

000001d0 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     1d0:	b580      	push	{r7, lr}
     1d2:	b082      	sub	sp, #8
     1d4:	af00      	add	r7, sp, #0
     1d6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     1d8:	687b      	ldr	r3, [r7, #4]
     1da:	2200      	movs	r2, #0
     1dc:	701a      	strb	r2, [r3, #0]
}
     1de:	46c0      	nop			; (mov r8, r8)
     1e0:	46bd      	mov	sp, r7
     1e2:	b002      	add	sp, #8
     1e4:	bd80      	pop	{r7, pc}
	...

000001e8 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     1e8:	b580      	push	{r7, lr}
     1ea:	b082      	sub	sp, #8
     1ec:	af00      	add	r7, sp, #0
     1ee:	0002      	movs	r2, r0
     1f0:	6039      	str	r1, [r7, #0]
     1f2:	1dfb      	adds	r3, r7, #7
     1f4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     1f6:	1dfb      	adds	r3, r7, #7
     1f8:	781b      	ldrb	r3, [r3, #0]
     1fa:	2b01      	cmp	r3, #1
     1fc:	d00a      	beq.n	214 <system_apb_clock_set_mask+0x2c>
     1fe:	2b02      	cmp	r3, #2
     200:	d00f      	beq.n	222 <system_apb_clock_set_mask+0x3a>
     202:	2b00      	cmp	r3, #0
     204:	d114      	bne.n	230 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     206:	4b0e      	ldr	r3, [pc, #56]	; (240 <system_apb_clock_set_mask+0x58>)
     208:	4a0d      	ldr	r2, [pc, #52]	; (240 <system_apb_clock_set_mask+0x58>)
     20a:	6991      	ldr	r1, [r2, #24]
     20c:	683a      	ldr	r2, [r7, #0]
     20e:	430a      	orrs	r2, r1
     210:	619a      	str	r2, [r3, #24]
			break;
     212:	e00f      	b.n	234 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     214:	4b0a      	ldr	r3, [pc, #40]	; (240 <system_apb_clock_set_mask+0x58>)
     216:	4a0a      	ldr	r2, [pc, #40]	; (240 <system_apb_clock_set_mask+0x58>)
     218:	69d1      	ldr	r1, [r2, #28]
     21a:	683a      	ldr	r2, [r7, #0]
     21c:	430a      	orrs	r2, r1
     21e:	61da      	str	r2, [r3, #28]
			break;
     220:	e008      	b.n	234 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     222:	4b07      	ldr	r3, [pc, #28]	; (240 <system_apb_clock_set_mask+0x58>)
     224:	4a06      	ldr	r2, [pc, #24]	; (240 <system_apb_clock_set_mask+0x58>)
     226:	6a11      	ldr	r1, [r2, #32]
     228:	683a      	ldr	r2, [r7, #0]
     22a:	430a      	orrs	r2, r1
     22c:	621a      	str	r2, [r3, #32]
			break;
     22e:	e001      	b.n	234 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     230:	2317      	movs	r3, #23
     232:	e000      	b.n	236 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     234:	2300      	movs	r3, #0
}
     236:	0018      	movs	r0, r3
     238:	46bd      	mov	sp, r7
     23a:	b002      	add	sp, #8
     23c:	bd80      	pop	{r7, pc}
     23e:	46c0      	nop			; (mov r8, r8)
     240:	40000400 	.word	0x40000400

00000244 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
     244:	b580      	push	{r7, lr}
     246:	b082      	sub	sp, #8
     248:	af00      	add	r7, sp, #0
     24a:	0002      	movs	r2, r0
     24c:	1dfb      	adds	r3, r7, #7
     24e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     250:	4b06      	ldr	r3, [pc, #24]	; (26c <system_interrupt_enable+0x28>)
     252:	1dfa      	adds	r2, r7, #7
     254:	7812      	ldrb	r2, [r2, #0]
     256:	0011      	movs	r1, r2
     258:	221f      	movs	r2, #31
     25a:	400a      	ands	r2, r1
     25c:	2101      	movs	r1, #1
     25e:	4091      	lsls	r1, r2
     260:	000a      	movs	r2, r1
     262:	601a      	str	r2, [r3, #0]
}
     264:	46c0      	nop			; (mov r8, r8)
     266:	46bd      	mov	sp, r7
     268:	b002      	add	sp, #8
     26a:	bd80      	pop	{r7, pc}
     26c:	e000e100 	.word	0xe000e100

00000270 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
     270:	b580      	push	{r7, lr}
     272:	b082      	sub	sp, #8
     274:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     276:	4b0f      	ldr	r3, [pc, #60]	; (2b4 <extint_is_syncing+0x44>)
     278:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     27a:	2300      	movs	r3, #0
     27c:	607b      	str	r3, [r7, #4]
     27e:	e011      	b.n	2a4 <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     280:	687b      	ldr	r3, [r7, #4]
     282:	009b      	lsls	r3, r3, #2
     284:	2208      	movs	r2, #8
     286:	4694      	mov	ip, r2
     288:	44bc      	add	ip, r7
     28a:	4463      	add	r3, ip
     28c:	3b08      	subs	r3, #8
     28e:	681b      	ldr	r3, [r3, #0]
     290:	785b      	ldrb	r3, [r3, #1]
     292:	b2db      	uxtb	r3, r3
     294:	b25b      	sxtb	r3, r3
     296:	2b00      	cmp	r3, #0
     298:	da01      	bge.n	29e <extint_is_syncing+0x2e>
			return true;
     29a:	2301      	movs	r3, #1
     29c:	e006      	b.n	2ac <extint_is_syncing+0x3c>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     29e:	687b      	ldr	r3, [r7, #4]
     2a0:	3301      	adds	r3, #1
     2a2:	607b      	str	r3, [r7, #4]
     2a4:	687b      	ldr	r3, [r7, #4]
     2a6:	2b00      	cmp	r3, #0
     2a8:	d0ea      	beq.n	280 <extint_is_syncing+0x10>
		}
	}
	return false;
     2aa:	2300      	movs	r3, #0
}
     2ac:	0018      	movs	r0, r3
     2ae:	46bd      	mov	sp, r7
     2b0:	b002      	add	sp, #8
     2b2:	bd80      	pop	{r7, pc}
     2b4:	40001800 	.word	0x40001800

000002b8 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
     2b8:	b580      	push	{r7, lr}
     2ba:	b084      	sub	sp, #16
     2bc:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     2be:	4b2d      	ldr	r3, [pc, #180]	; (374 <_system_extint_init+0xbc>)
     2c0:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
     2c2:	2140      	movs	r1, #64	; 0x40
     2c4:	2000      	movs	r0, #0
     2c6:	4b2c      	ldr	r3, [pc, #176]	; (378 <_system_extint_init+0xc0>)
     2c8:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     2ca:	003b      	movs	r3, r7
     2cc:	0018      	movs	r0, r3
     2ce:	4b2b      	ldr	r3, [pc, #172]	; (37c <_system_extint_init+0xc4>)
     2d0:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
     2d2:	003b      	movs	r3, r7
     2d4:	2200      	movs	r2, #0
     2d6:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     2d8:	003b      	movs	r3, r7
     2da:	0019      	movs	r1, r3
     2dc:	2005      	movs	r0, #5
     2de:	4b28      	ldr	r3, [pc, #160]	; (380 <_system_extint_init+0xc8>)
     2e0:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
     2e2:	2005      	movs	r0, #5
     2e4:	4b27      	ldr	r3, [pc, #156]	; (384 <_system_extint_init+0xcc>)
     2e6:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     2e8:	2300      	movs	r3, #0
     2ea:	60fb      	str	r3, [r7, #12]
     2ec:	e018      	b.n	320 <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     2ee:	68fb      	ldr	r3, [r7, #12]
     2f0:	009b      	lsls	r3, r3, #2
     2f2:	2210      	movs	r2, #16
     2f4:	4694      	mov	ip, r2
     2f6:	44bc      	add	ip, r7
     2f8:	4463      	add	r3, ip
     2fa:	3b0c      	subs	r3, #12
     2fc:	681a      	ldr	r2, [r3, #0]
     2fe:	68fb      	ldr	r3, [r7, #12]
     300:	009b      	lsls	r3, r3, #2
     302:	2110      	movs	r1, #16
     304:	468c      	mov	ip, r1
     306:	44bc      	add	ip, r7
     308:	4463      	add	r3, ip
     30a:	3b0c      	subs	r3, #12
     30c:	681b      	ldr	r3, [r3, #0]
     30e:	781b      	ldrb	r3, [r3, #0]
     310:	b2db      	uxtb	r3, r3
     312:	2101      	movs	r1, #1
     314:	430b      	orrs	r3, r1
     316:	b2db      	uxtb	r3, r3
     318:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     31a:	68fb      	ldr	r3, [r7, #12]
     31c:	3301      	adds	r3, #1
     31e:	60fb      	str	r3, [r7, #12]
     320:	68fb      	ldr	r3, [r7, #12]
     322:	2b00      	cmp	r3, #0
     324:	d0e3      	beq.n	2ee <_system_extint_init+0x36>
	}

	while (extint_is_syncing()) {
     326:	46c0      	nop			; (mov r8, r8)
     328:	4b17      	ldr	r3, [pc, #92]	; (388 <_system_extint_init+0xd0>)
     32a:	4798      	blx	r3
     32c:	1e03      	subs	r3, r0, #0
     32e:	d1fb      	bne.n	328 <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     330:	230b      	movs	r3, #11
     332:	18fb      	adds	r3, r7, r3
     334:	2200      	movs	r2, #0
     336:	701a      	strb	r2, [r3, #0]
     338:	e00d      	b.n	356 <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
     33a:	230b      	movs	r3, #11
     33c:	18fb      	adds	r3, r7, r3
     33e:	781a      	ldrb	r2, [r3, #0]
     340:	4b12      	ldr	r3, [pc, #72]	; (38c <_system_extint_init+0xd4>)
     342:	0092      	lsls	r2, r2, #2
     344:	2100      	movs	r1, #0
     346:	50d1      	str	r1, [r2, r3]
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     348:	230b      	movs	r3, #11
     34a:	18fb      	adds	r3, r7, r3
     34c:	781a      	ldrb	r2, [r3, #0]
     34e:	230b      	movs	r3, #11
     350:	18fb      	adds	r3, r7, r3
     352:	3201      	adds	r2, #1
     354:	701a      	strb	r2, [r3, #0]
     356:	230b      	movs	r3, #11
     358:	18fb      	adds	r3, r7, r3
     35a:	781b      	ldrb	r3, [r3, #0]
     35c:	2b0f      	cmp	r3, #15
     35e:	d9ec      	bls.n	33a <_system_extint_init+0x82>
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
     360:	2004      	movs	r0, #4
     362:	4b0b      	ldr	r3, [pc, #44]	; (390 <_system_extint_init+0xd8>)
     364:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
     366:	4b0b      	ldr	r3, [pc, #44]	; (394 <_system_extint_init+0xdc>)
     368:	4798      	blx	r3
}
     36a:	46c0      	nop			; (mov r8, r8)
     36c:	46bd      	mov	sp, r7
     36e:	b004      	add	sp, #16
     370:	bd80      	pop	{r7, pc}
     372:	46c0      	nop			; (mov r8, r8)
     374:	40001800 	.word	0x40001800
     378:	000001e9 	.word	0x000001e9
     37c:	000001d1 	.word	0x000001d1
     380:	00002e99 	.word	0x00002e99
     384:	00002edd 	.word	0x00002edd
     388:	00000271 	.word	0x00000271
     38c:	20000054 	.word	0x20000054
     390:	00000245 	.word	0x00000245
     394:	00000399 	.word	0x00000399

00000398 <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
     398:	b580      	push	{r7, lr}
     39a:	b082      	sub	sp, #8
     39c:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     39e:	4b15      	ldr	r3, [pc, #84]	; (3f4 <_extint_enable+0x5c>)
     3a0:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     3a2:	2300      	movs	r3, #0
     3a4:	607b      	str	r3, [r7, #4]
     3a6:	e018      	b.n	3da <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     3a8:	687b      	ldr	r3, [r7, #4]
     3aa:	009b      	lsls	r3, r3, #2
     3ac:	2208      	movs	r2, #8
     3ae:	4694      	mov	ip, r2
     3b0:	44bc      	add	ip, r7
     3b2:	4463      	add	r3, ip
     3b4:	3b08      	subs	r3, #8
     3b6:	681a      	ldr	r2, [r3, #0]
     3b8:	687b      	ldr	r3, [r7, #4]
     3ba:	009b      	lsls	r3, r3, #2
     3bc:	2108      	movs	r1, #8
     3be:	468c      	mov	ip, r1
     3c0:	44bc      	add	ip, r7
     3c2:	4463      	add	r3, ip
     3c4:	3b08      	subs	r3, #8
     3c6:	681b      	ldr	r3, [r3, #0]
     3c8:	781b      	ldrb	r3, [r3, #0]
     3ca:	b2db      	uxtb	r3, r3
     3cc:	2102      	movs	r1, #2
     3ce:	430b      	orrs	r3, r1
     3d0:	b2db      	uxtb	r3, r3
     3d2:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     3d4:	687b      	ldr	r3, [r7, #4]
     3d6:	3301      	adds	r3, #1
     3d8:	607b      	str	r3, [r7, #4]
     3da:	687b      	ldr	r3, [r7, #4]
     3dc:	2b00      	cmp	r3, #0
     3de:	d0e3      	beq.n	3a8 <_extint_enable+0x10>
	}

	while (extint_is_syncing()) {
     3e0:	46c0      	nop			; (mov r8, r8)
     3e2:	4b05      	ldr	r3, [pc, #20]	; (3f8 <_extint_enable+0x60>)
     3e4:	4798      	blx	r3
     3e6:	1e03      	subs	r3, r0, #0
     3e8:	d1fb      	bne.n	3e2 <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
     3ea:	46c0      	nop			; (mov r8, r8)
     3ec:	46bd      	mov	sp, r7
     3ee:	b002      	add	sp, #8
     3f0:	bd80      	pop	{r7, pc}
     3f2:	46c0      	nop			; (mov r8, r8)
     3f4:	40001800 	.word	0x40001800
     3f8:	00000271 	.word	0x00000271

000003fc <system_gclk_chan_get_config_defaults>:
{
     3fc:	b580      	push	{r7, lr}
     3fe:	b082      	sub	sp, #8
     400:	af00      	add	r7, sp, #0
     402:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
     404:	687b      	ldr	r3, [r7, #4]
     406:	2200      	movs	r2, #0
     408:	701a      	strb	r2, [r3, #0]
}
     40a:	46c0      	nop			; (mov r8, r8)
     40c:	46bd      	mov	sp, r7
     40e:	b002      	add	sp, #8
     410:	bd80      	pop	{r7, pc}

00000412 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     412:	b580      	push	{r7, lr}
     414:	b086      	sub	sp, #24
     416:	af00      	add	r7, sp, #0
     418:	60f8      	str	r0, [r7, #12]
     41a:	60b9      	str	r1, [r7, #8]
     41c:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
     41e:	2316      	movs	r3, #22
     420:	18fb      	adds	r3, r7, r3
     422:	2200      	movs	r2, #0
     424:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
     426:	68bb      	ldr	r3, [r7, #8]
     428:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     42a:	68bb      	ldr	r3, [r7, #8]
     42c:	085a      	lsrs	r2, r3, #1
     42e:	68fb      	ldr	r3, [r7, #12]
     430:	429a      	cmp	r2, r3
     432:	d201      	bcs.n	438 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     434:	2340      	movs	r3, #64	; 0x40
     436:	e026      	b.n	486 <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
     438:	68bb      	ldr	r3, [r7, #8]
     43a:	085b      	lsrs	r3, r3, #1
     43c:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
     43e:	e00a      	b.n	456 <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
     440:	693a      	ldr	r2, [r7, #16]
     442:	68fb      	ldr	r3, [r7, #12]
     444:	1ad3      	subs	r3, r2, r3
     446:	613b      	str	r3, [r7, #16]
		baud_calculated++;
     448:	2316      	movs	r3, #22
     44a:	18fb      	adds	r3, r7, r3
     44c:	881a      	ldrh	r2, [r3, #0]
     44e:	2316      	movs	r3, #22
     450:	18fb      	adds	r3, r7, r3
     452:	3201      	adds	r2, #1
     454:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
     456:	693a      	ldr	r2, [r7, #16]
     458:	68fb      	ldr	r3, [r7, #12]
     45a:	429a      	cmp	r2, r3
     45c:	d2f0      	bcs.n	440 <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
     45e:	2316      	movs	r3, #22
     460:	18fb      	adds	r3, r7, r3
     462:	2216      	movs	r2, #22
     464:	18ba      	adds	r2, r7, r2
     466:	8812      	ldrh	r2, [r2, #0]
     468:	3a01      	subs	r2, #1
     46a:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
     46c:	2316      	movs	r3, #22
     46e:	18fb      	adds	r3, r7, r3
     470:	881b      	ldrh	r3, [r3, #0]
     472:	2bff      	cmp	r3, #255	; 0xff
     474:	d901      	bls.n	47a <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     476:	2340      	movs	r3, #64	; 0x40
     478:	e005      	b.n	486 <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
     47a:	687b      	ldr	r3, [r7, #4]
     47c:	2216      	movs	r2, #22
     47e:	18ba      	adds	r2, r7, r2
     480:	8812      	ldrh	r2, [r2, #0]
     482:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
     484:	2300      	movs	r3, #0
	}
}
     486:	0018      	movs	r0, r3
     488:	46bd      	mov	sp, r7
     48a:	b006      	add	sp, #24
     48c:	bd80      	pop	{r7, pc}
	...

00000490 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     490:	b580      	push	{r7, lr}
     492:	b084      	sub	sp, #16
     494:	af00      	add	r7, sp, #0
     496:	0002      	movs	r2, r0
     498:	1dfb      	adds	r3, r7, #7
     49a:	701a      	strb	r2, [r3, #0]
     49c:	1dbb      	adds	r3, r7, #6
     49e:	1c0a      	adds	r2, r1, #0
     4a0:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     4a2:	4b1a      	ldr	r3, [pc, #104]	; (50c <sercom_set_gclk_generator+0x7c>)
     4a4:	781b      	ldrb	r3, [r3, #0]
     4a6:	2201      	movs	r2, #1
     4a8:	4053      	eors	r3, r2
     4aa:	b2db      	uxtb	r3, r3
     4ac:	2b00      	cmp	r3, #0
     4ae:	d103      	bne.n	4b8 <sercom_set_gclk_generator+0x28>
     4b0:	1dbb      	adds	r3, r7, #6
     4b2:	781b      	ldrb	r3, [r3, #0]
     4b4:	2b00      	cmp	r3, #0
     4b6:	d01b      	beq.n	4f0 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     4b8:	230c      	movs	r3, #12
     4ba:	18fb      	adds	r3, r7, r3
     4bc:	0018      	movs	r0, r3
     4be:	4b14      	ldr	r3, [pc, #80]	; (510 <sercom_set_gclk_generator+0x80>)
     4c0:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
     4c2:	230c      	movs	r3, #12
     4c4:	18fb      	adds	r3, r7, r3
     4c6:	1dfa      	adds	r2, r7, #7
     4c8:	7812      	ldrb	r2, [r2, #0]
     4ca:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     4cc:	230c      	movs	r3, #12
     4ce:	18fb      	adds	r3, r7, r3
     4d0:	0019      	movs	r1, r3
     4d2:	2013      	movs	r0, #19
     4d4:	4b0f      	ldr	r3, [pc, #60]	; (514 <sercom_set_gclk_generator+0x84>)
     4d6:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     4d8:	2013      	movs	r0, #19
     4da:	4b0f      	ldr	r3, [pc, #60]	; (518 <sercom_set_gclk_generator+0x88>)
     4dc:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
     4de:	4b0b      	ldr	r3, [pc, #44]	; (50c <sercom_set_gclk_generator+0x7c>)
     4e0:	1dfa      	adds	r2, r7, #7
     4e2:	7812      	ldrb	r2, [r2, #0]
     4e4:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
     4e6:	4b09      	ldr	r3, [pc, #36]	; (50c <sercom_set_gclk_generator+0x7c>)
     4e8:	2201      	movs	r2, #1
     4ea:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
     4ec:	2300      	movs	r3, #0
     4ee:	e008      	b.n	502 <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
     4f0:	4b06      	ldr	r3, [pc, #24]	; (50c <sercom_set_gclk_generator+0x7c>)
     4f2:	785b      	ldrb	r3, [r3, #1]
     4f4:	1dfa      	adds	r2, r7, #7
     4f6:	7812      	ldrb	r2, [r2, #0]
     4f8:	429a      	cmp	r2, r3
     4fa:	d101      	bne.n	500 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
     4fc:	2300      	movs	r3, #0
     4fe:	e000      	b.n	502 <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     500:	231d      	movs	r3, #29
}
     502:	0018      	movs	r0, r3
     504:	46bd      	mov	sp, r7
     506:	b004      	add	sp, #16
     508:	bd80      	pop	{r7, pc}
     50a:	46c0      	nop			; (mov r8, r8)
     50c:	2000002c 	.word	0x2000002c
     510:	000003fd 	.word	0x000003fd
     514:	00002e99 	.word	0x00002e99
     518:	00002edd 	.word	0x00002edd

0000051c <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
     51c:	b580      	push	{r7, lr}
     51e:	b082      	sub	sp, #8
     520:	af00      	add	r7, sp, #0
     522:	6078      	str	r0, [r7, #4]
     524:	000a      	movs	r2, r1
     526:	1cfb      	adds	r3, r7, #3
     528:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
     52a:	687b      	ldr	r3, [r7, #4]
     52c:	4a4d      	ldr	r2, [pc, #308]	; (664 <_sercom_get_default_pad+0x148>)
     52e:	4293      	cmp	r3, r2
     530:	d03f      	beq.n	5b2 <_sercom_get_default_pad+0x96>
     532:	4a4c      	ldr	r2, [pc, #304]	; (664 <_sercom_get_default_pad+0x148>)
     534:	4293      	cmp	r3, r2
     536:	d806      	bhi.n	546 <_sercom_get_default_pad+0x2a>
     538:	4a4b      	ldr	r2, [pc, #300]	; (668 <_sercom_get_default_pad+0x14c>)
     53a:	4293      	cmp	r3, r2
     53c:	d00f      	beq.n	55e <_sercom_get_default_pad+0x42>
     53e:	4a4b      	ldr	r2, [pc, #300]	; (66c <_sercom_get_default_pad+0x150>)
     540:	4293      	cmp	r3, r2
     542:	d021      	beq.n	588 <_sercom_get_default_pad+0x6c>
     544:	e089      	b.n	65a <_sercom_get_default_pad+0x13e>
     546:	4a4a      	ldr	r2, [pc, #296]	; (670 <_sercom_get_default_pad+0x154>)
     548:	4293      	cmp	r3, r2
     54a:	d100      	bne.n	54e <_sercom_get_default_pad+0x32>
     54c:	e05b      	b.n	606 <_sercom_get_default_pad+0xea>
     54e:	4a49      	ldr	r2, [pc, #292]	; (674 <_sercom_get_default_pad+0x158>)
     550:	4293      	cmp	r3, r2
     552:	d100      	bne.n	556 <_sercom_get_default_pad+0x3a>
     554:	e06c      	b.n	630 <_sercom_get_default_pad+0x114>
     556:	4a48      	ldr	r2, [pc, #288]	; (678 <_sercom_get_default_pad+0x15c>)
     558:	4293      	cmp	r3, r2
     55a:	d03f      	beq.n	5dc <_sercom_get_default_pad+0xc0>
     55c:	e07d      	b.n	65a <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     55e:	1cfb      	adds	r3, r7, #3
     560:	781b      	ldrb	r3, [r3, #0]
     562:	2b01      	cmp	r3, #1
     564:	d00a      	beq.n	57c <_sercom_get_default_pad+0x60>
     566:	dc02      	bgt.n	56e <_sercom_get_default_pad+0x52>
     568:	2b00      	cmp	r3, #0
     56a:	d005      	beq.n	578 <_sercom_get_default_pad+0x5c>
     56c:	e075      	b.n	65a <_sercom_get_default_pad+0x13e>
     56e:	2b02      	cmp	r3, #2
     570:	d006      	beq.n	580 <_sercom_get_default_pad+0x64>
     572:	2b03      	cmp	r3, #3
     574:	d006      	beq.n	584 <_sercom_get_default_pad+0x68>
     576:	e070      	b.n	65a <_sercom_get_default_pad+0x13e>
     578:	4b40      	ldr	r3, [pc, #256]	; (67c <_sercom_get_default_pad+0x160>)
     57a:	e06f      	b.n	65c <_sercom_get_default_pad+0x140>
     57c:	4b40      	ldr	r3, [pc, #256]	; (680 <_sercom_get_default_pad+0x164>)
     57e:	e06d      	b.n	65c <_sercom_get_default_pad+0x140>
     580:	4b40      	ldr	r3, [pc, #256]	; (684 <_sercom_get_default_pad+0x168>)
     582:	e06b      	b.n	65c <_sercom_get_default_pad+0x140>
     584:	4b40      	ldr	r3, [pc, #256]	; (688 <_sercom_get_default_pad+0x16c>)
     586:	e069      	b.n	65c <_sercom_get_default_pad+0x140>
     588:	1cfb      	adds	r3, r7, #3
     58a:	781b      	ldrb	r3, [r3, #0]
     58c:	2b01      	cmp	r3, #1
     58e:	d00a      	beq.n	5a6 <_sercom_get_default_pad+0x8a>
     590:	dc02      	bgt.n	598 <_sercom_get_default_pad+0x7c>
     592:	2b00      	cmp	r3, #0
     594:	d005      	beq.n	5a2 <_sercom_get_default_pad+0x86>
     596:	e060      	b.n	65a <_sercom_get_default_pad+0x13e>
     598:	2b02      	cmp	r3, #2
     59a:	d006      	beq.n	5aa <_sercom_get_default_pad+0x8e>
     59c:	2b03      	cmp	r3, #3
     59e:	d006      	beq.n	5ae <_sercom_get_default_pad+0x92>
     5a0:	e05b      	b.n	65a <_sercom_get_default_pad+0x13e>
     5a2:	2303      	movs	r3, #3
     5a4:	e05a      	b.n	65c <_sercom_get_default_pad+0x140>
     5a6:	4b39      	ldr	r3, [pc, #228]	; (68c <_sercom_get_default_pad+0x170>)
     5a8:	e058      	b.n	65c <_sercom_get_default_pad+0x140>
     5aa:	4b39      	ldr	r3, [pc, #228]	; (690 <_sercom_get_default_pad+0x174>)
     5ac:	e056      	b.n	65c <_sercom_get_default_pad+0x140>
     5ae:	4b39      	ldr	r3, [pc, #228]	; (694 <_sercom_get_default_pad+0x178>)
     5b0:	e054      	b.n	65c <_sercom_get_default_pad+0x140>
     5b2:	1cfb      	adds	r3, r7, #3
     5b4:	781b      	ldrb	r3, [r3, #0]
     5b6:	2b01      	cmp	r3, #1
     5b8:	d00a      	beq.n	5d0 <_sercom_get_default_pad+0xb4>
     5ba:	dc02      	bgt.n	5c2 <_sercom_get_default_pad+0xa6>
     5bc:	2b00      	cmp	r3, #0
     5be:	d005      	beq.n	5cc <_sercom_get_default_pad+0xb0>
     5c0:	e04b      	b.n	65a <_sercom_get_default_pad+0x13e>
     5c2:	2b02      	cmp	r3, #2
     5c4:	d006      	beq.n	5d4 <_sercom_get_default_pad+0xb8>
     5c6:	2b03      	cmp	r3, #3
     5c8:	d006      	beq.n	5d8 <_sercom_get_default_pad+0xbc>
     5ca:	e046      	b.n	65a <_sercom_get_default_pad+0x13e>
     5cc:	4b32      	ldr	r3, [pc, #200]	; (698 <_sercom_get_default_pad+0x17c>)
     5ce:	e045      	b.n	65c <_sercom_get_default_pad+0x140>
     5d0:	4b32      	ldr	r3, [pc, #200]	; (69c <_sercom_get_default_pad+0x180>)
     5d2:	e043      	b.n	65c <_sercom_get_default_pad+0x140>
     5d4:	4b32      	ldr	r3, [pc, #200]	; (6a0 <_sercom_get_default_pad+0x184>)
     5d6:	e041      	b.n	65c <_sercom_get_default_pad+0x140>
     5d8:	4b32      	ldr	r3, [pc, #200]	; (6a4 <_sercom_get_default_pad+0x188>)
     5da:	e03f      	b.n	65c <_sercom_get_default_pad+0x140>
     5dc:	1cfb      	adds	r3, r7, #3
     5de:	781b      	ldrb	r3, [r3, #0]
     5e0:	2b01      	cmp	r3, #1
     5e2:	d00a      	beq.n	5fa <_sercom_get_default_pad+0xde>
     5e4:	dc02      	bgt.n	5ec <_sercom_get_default_pad+0xd0>
     5e6:	2b00      	cmp	r3, #0
     5e8:	d005      	beq.n	5f6 <_sercom_get_default_pad+0xda>
     5ea:	e036      	b.n	65a <_sercom_get_default_pad+0x13e>
     5ec:	2b02      	cmp	r3, #2
     5ee:	d006      	beq.n	5fe <_sercom_get_default_pad+0xe2>
     5f0:	2b03      	cmp	r3, #3
     5f2:	d006      	beq.n	602 <_sercom_get_default_pad+0xe6>
     5f4:	e031      	b.n	65a <_sercom_get_default_pad+0x13e>
     5f6:	4b2c      	ldr	r3, [pc, #176]	; (6a8 <_sercom_get_default_pad+0x18c>)
     5f8:	e030      	b.n	65c <_sercom_get_default_pad+0x140>
     5fa:	4b2c      	ldr	r3, [pc, #176]	; (6ac <_sercom_get_default_pad+0x190>)
     5fc:	e02e      	b.n	65c <_sercom_get_default_pad+0x140>
     5fe:	4b2c      	ldr	r3, [pc, #176]	; (6b0 <_sercom_get_default_pad+0x194>)
     600:	e02c      	b.n	65c <_sercom_get_default_pad+0x140>
     602:	4b2c      	ldr	r3, [pc, #176]	; (6b4 <_sercom_get_default_pad+0x198>)
     604:	e02a      	b.n	65c <_sercom_get_default_pad+0x140>
     606:	1cfb      	adds	r3, r7, #3
     608:	781b      	ldrb	r3, [r3, #0]
     60a:	2b01      	cmp	r3, #1
     60c:	d00a      	beq.n	624 <_sercom_get_default_pad+0x108>
     60e:	dc02      	bgt.n	616 <_sercom_get_default_pad+0xfa>
     610:	2b00      	cmp	r3, #0
     612:	d005      	beq.n	620 <_sercom_get_default_pad+0x104>
     614:	e021      	b.n	65a <_sercom_get_default_pad+0x13e>
     616:	2b02      	cmp	r3, #2
     618:	d006      	beq.n	628 <_sercom_get_default_pad+0x10c>
     61a:	2b03      	cmp	r3, #3
     61c:	d006      	beq.n	62c <_sercom_get_default_pad+0x110>
     61e:	e01c      	b.n	65a <_sercom_get_default_pad+0x13e>
     620:	4b25      	ldr	r3, [pc, #148]	; (6b8 <_sercom_get_default_pad+0x19c>)
     622:	e01b      	b.n	65c <_sercom_get_default_pad+0x140>
     624:	4b25      	ldr	r3, [pc, #148]	; (6bc <_sercom_get_default_pad+0x1a0>)
     626:	e019      	b.n	65c <_sercom_get_default_pad+0x140>
     628:	4b25      	ldr	r3, [pc, #148]	; (6c0 <_sercom_get_default_pad+0x1a4>)
     62a:	e017      	b.n	65c <_sercom_get_default_pad+0x140>
     62c:	4b25      	ldr	r3, [pc, #148]	; (6c4 <_sercom_get_default_pad+0x1a8>)
     62e:	e015      	b.n	65c <_sercom_get_default_pad+0x140>
     630:	1cfb      	adds	r3, r7, #3
     632:	781b      	ldrb	r3, [r3, #0]
     634:	2b01      	cmp	r3, #1
     636:	d00a      	beq.n	64e <_sercom_get_default_pad+0x132>
     638:	dc02      	bgt.n	640 <_sercom_get_default_pad+0x124>
     63a:	2b00      	cmp	r3, #0
     63c:	d005      	beq.n	64a <_sercom_get_default_pad+0x12e>
     63e:	e00c      	b.n	65a <_sercom_get_default_pad+0x13e>
     640:	2b02      	cmp	r3, #2
     642:	d006      	beq.n	652 <_sercom_get_default_pad+0x136>
     644:	2b03      	cmp	r3, #3
     646:	d006      	beq.n	656 <_sercom_get_default_pad+0x13a>
     648:	e007      	b.n	65a <_sercom_get_default_pad+0x13e>
     64a:	4b1f      	ldr	r3, [pc, #124]	; (6c8 <_sercom_get_default_pad+0x1ac>)
     64c:	e006      	b.n	65c <_sercom_get_default_pad+0x140>
     64e:	4b1f      	ldr	r3, [pc, #124]	; (6cc <_sercom_get_default_pad+0x1b0>)
     650:	e004      	b.n	65c <_sercom_get_default_pad+0x140>
     652:	4b1f      	ldr	r3, [pc, #124]	; (6d0 <_sercom_get_default_pad+0x1b4>)
     654:	e002      	b.n	65c <_sercom_get_default_pad+0x140>
     656:	4b1f      	ldr	r3, [pc, #124]	; (6d4 <_sercom_get_default_pad+0x1b8>)
     658:	e000      	b.n	65c <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
     65a:	2300      	movs	r3, #0
}
     65c:	0018      	movs	r0, r3
     65e:	46bd      	mov	sp, r7
     660:	b002      	add	sp, #8
     662:	bd80      	pop	{r7, pc}
     664:	42001000 	.word	0x42001000
     668:	42000800 	.word	0x42000800
     66c:	42000c00 	.word	0x42000c00
     670:	42001800 	.word	0x42001800
     674:	42001c00 	.word	0x42001c00
     678:	42001400 	.word	0x42001400
     67c:	00040003 	.word	0x00040003
     680:	00050003 	.word	0x00050003
     684:	00060003 	.word	0x00060003
     688:	00070003 	.word	0x00070003
     68c:	00010003 	.word	0x00010003
     690:	001e0003 	.word	0x001e0003
     694:	001f0003 	.word	0x001f0003
     698:	00080003 	.word	0x00080003
     69c:	00090003 	.word	0x00090003
     6a0:	000a0003 	.word	0x000a0003
     6a4:	000b0003 	.word	0x000b0003
     6a8:	00100003 	.word	0x00100003
     6ac:	00110003 	.word	0x00110003
     6b0:	00120003 	.word	0x00120003
     6b4:	00130003 	.word	0x00130003
     6b8:	000c0003 	.word	0x000c0003
     6bc:	000d0003 	.word	0x000d0003
     6c0:	000e0003 	.word	0x000e0003
     6c4:	000f0003 	.word	0x000f0003
     6c8:	00160003 	.word	0x00160003
     6cc:	00170003 	.word	0x00170003
     6d0:	00180003 	.word	0x00180003
     6d4:	00190003 	.word	0x00190003

000006d8 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     6d8:	b590      	push	{r4, r7, lr}
     6da:	b08b      	sub	sp, #44	; 0x2c
     6dc:	af00      	add	r7, sp, #0
     6de:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     6e0:	230c      	movs	r3, #12
     6e2:	18fb      	adds	r3, r7, r3
     6e4:	4a0f      	ldr	r2, [pc, #60]	; (724 <_sercom_get_sercom_inst_index+0x4c>)
     6e6:	ca13      	ldmia	r2!, {r0, r1, r4}
     6e8:	c313      	stmia	r3!, {r0, r1, r4}
     6ea:	ca13      	ldmia	r2!, {r0, r1, r4}
     6ec:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     6ee:	2300      	movs	r3, #0
     6f0:	627b      	str	r3, [r7, #36]	; 0x24
     6f2:	e00e      	b.n	712 <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     6f4:	230c      	movs	r3, #12
     6f6:	18fb      	adds	r3, r7, r3
     6f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     6fa:	0092      	lsls	r2, r2, #2
     6fc:	58d3      	ldr	r3, [r2, r3]
     6fe:	001a      	movs	r2, r3
     700:	687b      	ldr	r3, [r7, #4]
     702:	429a      	cmp	r2, r3
     704:	d102      	bne.n	70c <_sercom_get_sercom_inst_index+0x34>
			return i;
     706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     708:	b2db      	uxtb	r3, r3
     70a:	e006      	b.n	71a <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     70c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     70e:	3301      	adds	r3, #1
     710:	627b      	str	r3, [r7, #36]	; 0x24
     712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     714:	2b05      	cmp	r3, #5
     716:	d9ed      	bls.n	6f4 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     718:	2300      	movs	r3, #0
}
     71a:	0018      	movs	r0, r3
     71c:	46bd      	mov	sp, r7
     71e:	b00b      	add	sp, #44	; 0x2c
     720:	bd90      	pop	{r4, r7, pc}
     722:	46c0      	nop			; (mov r8, r8)
     724:	00005200 	.word	0x00005200

00000728 <bme280_spi_write>:

#include "bme280.h"

//enum status_code bme280_spi_send(uint8_t *data)
void bme280_spi_write(uint8_t *data,uint16_t length)
{
     728:	b580      	push	{r7, lr}
     72a:	b082      	sub	sp, #8
     72c:	af00      	add	r7, sp, #0
     72e:	6078      	str	r0, [r7, #4]
     730:	000a      	movs	r2, r1
     732:	1cbb      	adds	r3, r7, #2
     734:	801a      	strh	r2, [r3, #0]
	data[0] &= 0x7F;
     736:	687b      	ldr	r3, [r7, #4]
     738:	781b      	ldrb	r3, [r3, #0]
     73a:	227f      	movs	r2, #127	; 0x7f
     73c:	4013      	ands	r3, r2
     73e:	b2da      	uxtb	r2, r3
     740:	687b      	ldr	r3, [r7, #4]
     742:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&spi_master_instance,&bme280_slave_instance,true);
     744:	490b      	ldr	r1, [pc, #44]	; (774 <bme280_spi_write+0x4c>)
     746:	4b0c      	ldr	r3, [pc, #48]	; (778 <bme280_spi_write+0x50>)
     748:	2201      	movs	r2, #1
     74a:	0018      	movs	r0, r3
     74c:	4b0b      	ldr	r3, [pc, #44]	; (77c <bme280_spi_write+0x54>)
     74e:	4798      	blx	r3
	spi_write_buffer_wait(&spi_master_instance,data,length);
     750:	1cbb      	adds	r3, r7, #2
     752:	881a      	ldrh	r2, [r3, #0]
     754:	6879      	ldr	r1, [r7, #4]
     756:	4b08      	ldr	r3, [pc, #32]	; (778 <bme280_spi_write+0x50>)
     758:	0018      	movs	r0, r3
     75a:	4b09      	ldr	r3, [pc, #36]	; (780 <bme280_spi_write+0x58>)
     75c:	4798      	blx	r3
	spi_select_slave(&spi_master_instance,&bme280_slave_instance,false);
     75e:	4905      	ldr	r1, [pc, #20]	; (774 <bme280_spi_write+0x4c>)
     760:	4b05      	ldr	r3, [pc, #20]	; (778 <bme280_spi_write+0x50>)
     762:	2200      	movs	r2, #0
     764:	0018      	movs	r0, r3
     766:	4b05      	ldr	r3, [pc, #20]	; (77c <bme280_spi_write+0x54>)
     768:	4798      	blx	r3
}
     76a:	46c0      	nop			; (mov r8, r8)
     76c:	46bd      	mov	sp, r7
     76e:	b002      	add	sp, #8
     770:	bd80      	pop	{r7, pc}
     772:	46c0      	nop			; (mov r8, r8)
     774:	200000dc 	.word	0x200000dc
     778:	200000e0 	.word	0x200000e0
     77c:	000020c1 	.word	0x000020c1
     780:	000021b1 	.word	0x000021b1

00000784 <bme280_spi_read>:

void bme280_spi_read(uint8_t *data,uint16_t length,uint8_t reg)
{
     784:	b590      	push	{r4, r7, lr}
     786:	b085      	sub	sp, #20
     788:	af00      	add	r7, sp, #0
     78a:	6078      	str	r0, [r7, #4]
     78c:	0008      	movs	r0, r1
     78e:	0011      	movs	r1, r2
     790:	1cbb      	adds	r3, r7, #2
     792:	1c02      	adds	r2, r0, #0
     794:	801a      	strh	r2, [r3, #0]
     796:	1c7b      	adds	r3, r7, #1
     798:	1c0a      	adds	r2, r1, #0
     79a:	701a      	strb	r2, [r3, #0]
	uint16_t dummy = reg | 0x80;
     79c:	1c7b      	adds	r3, r7, #1
     79e:	781b      	ldrb	r3, [r3, #0]
     7a0:	2280      	movs	r2, #128	; 0x80
     7a2:	4252      	negs	r2, r2
     7a4:	4313      	orrs	r3, r2
     7a6:	b2db      	uxtb	r3, r3
     7a8:	b29a      	uxth	r2, r3
     7aa:	230e      	movs	r3, #14
     7ac:	18fb      	adds	r3, r7, r3
     7ae:	801a      	strh	r2, [r3, #0]
	spi_select_slave(&spi_master_instance,&bme280_slave_instance,true);
     7b0:	4910      	ldr	r1, [pc, #64]	; (7f4 <bme280_spi_read+0x70>)
     7b2:	4b11      	ldr	r3, [pc, #68]	; (7f8 <bme280_spi_read+0x74>)
     7b4:	2201      	movs	r2, #1
     7b6:	0018      	movs	r0, r3
     7b8:	4b10      	ldr	r3, [pc, #64]	; (7fc <bme280_spi_read+0x78>)
     7ba:	4798      	blx	r3
	spi_write_buffer_wait(&spi_master_instance,&dummy,1);
     7bc:	230e      	movs	r3, #14
     7be:	18f9      	adds	r1, r7, r3
     7c0:	4b0d      	ldr	r3, [pc, #52]	; (7f8 <bme280_spi_read+0x74>)
     7c2:	2201      	movs	r2, #1
     7c4:	0018      	movs	r0, r3
     7c6:	4b0e      	ldr	r3, [pc, #56]	; (800 <bme280_spi_read+0x7c>)
     7c8:	4798      	blx	r3
	spi_read_buffer_wait(&spi_master_instance,data,length,dummy);
     7ca:	230e      	movs	r3, #14
     7cc:	18fb      	adds	r3, r7, r3
     7ce:	881c      	ldrh	r4, [r3, #0]
     7d0:	1cbb      	adds	r3, r7, #2
     7d2:	881a      	ldrh	r2, [r3, #0]
     7d4:	6879      	ldr	r1, [r7, #4]
     7d6:	4808      	ldr	r0, [pc, #32]	; (7f8 <bme280_spi_read+0x74>)
     7d8:	0023      	movs	r3, r4
     7da:	4c0a      	ldr	r4, [pc, #40]	; (804 <bme280_spi_read+0x80>)
     7dc:	47a0      	blx	r4
	//spi_transceive_wait(&spi_master_instance,reg,data);
	spi_select_slave(&spi_master_instance,&bme280_slave_instance,false);
     7de:	4905      	ldr	r1, [pc, #20]	; (7f4 <bme280_spi_read+0x70>)
     7e0:	4b05      	ldr	r3, [pc, #20]	; (7f8 <bme280_spi_read+0x74>)
     7e2:	2200      	movs	r2, #0
     7e4:	0018      	movs	r0, r3
     7e6:	4b05      	ldr	r3, [pc, #20]	; (7fc <bme280_spi_read+0x78>)
     7e8:	4798      	blx	r3
}
     7ea:	46c0      	nop			; (mov r8, r8)
     7ec:	46bd      	mov	sp, r7
     7ee:	b005      	add	sp, #20
     7f0:	bd90      	pop	{r4, r7, pc}
     7f2:	46c0      	nop			; (mov r8, r8)
     7f4:	200000dc 	.word	0x200000dc
     7f8:	200000e0 	.word	0x200000e0
     7fc:	000020c1 	.word	0x000020c1
     800:	000021b1 	.word	0x000021b1
     804:	00001f15 	.word	0x00001f15

00000808 <bme280_read_temp>:

void bme280_read_temp(uint8_t *data)
{
     808:	b590      	push	{r4, r7, lr}
     80a:	b085      	sub	sp, #20
     80c:	af00      	add	r7, sp, #0
     80e:	6078      	str	r0, [r7, #4]
	uint16_t dummy = 0xFA | 0x80;
     810:	230e      	movs	r3, #14
     812:	18fb      	adds	r3, r7, r3
     814:	22fa      	movs	r2, #250	; 0xfa
     816:	801a      	strh	r2, [r3, #0]
	spi_select_slave(&spi_master_instance,&bme280_slave_instance,true);
     818:	490e      	ldr	r1, [pc, #56]	; (854 <bme280_read_temp+0x4c>)
     81a:	4b0f      	ldr	r3, [pc, #60]	; (858 <bme280_read_temp+0x50>)
     81c:	2201      	movs	r2, #1
     81e:	0018      	movs	r0, r3
     820:	4b0e      	ldr	r3, [pc, #56]	; (85c <bme280_read_temp+0x54>)
     822:	4798      	blx	r3
	spi_write_buffer_wait(&spi_master_instance,&dummy,1);
     824:	230e      	movs	r3, #14
     826:	18f9      	adds	r1, r7, r3
     828:	4b0b      	ldr	r3, [pc, #44]	; (858 <bme280_read_temp+0x50>)
     82a:	2201      	movs	r2, #1
     82c:	0018      	movs	r0, r3
     82e:	4b0c      	ldr	r3, [pc, #48]	; (860 <bme280_read_temp+0x58>)
     830:	4798      	blx	r3
	spi_read_buffer_wait(&spi_master_instance,data,3,0x00);
     832:	6879      	ldr	r1, [r7, #4]
     834:	4808      	ldr	r0, [pc, #32]	; (858 <bme280_read_temp+0x50>)
     836:	2300      	movs	r3, #0
     838:	2203      	movs	r2, #3
     83a:	4c0a      	ldr	r4, [pc, #40]	; (864 <bme280_read_temp+0x5c>)
     83c:	47a0      	blx	r4
	//spi_transceive_wait(&spi_master_instance,reg,data);
	spi_select_slave(&spi_master_instance,&bme280_slave_instance,false);
     83e:	4905      	ldr	r1, [pc, #20]	; (854 <bme280_read_temp+0x4c>)
     840:	4b05      	ldr	r3, [pc, #20]	; (858 <bme280_read_temp+0x50>)
     842:	2200      	movs	r2, #0
     844:	0018      	movs	r0, r3
     846:	4b05      	ldr	r3, [pc, #20]	; (85c <bme280_read_temp+0x54>)
     848:	4798      	blx	r3
}
     84a:	46c0      	nop			; (mov r8, r8)
     84c:	46bd      	mov	sp, r7
     84e:	b005      	add	sp, #20
     850:	bd90      	pop	{r4, r7, pc}
     852:	46c0      	nop			; (mov r8, r8)
     854:	200000dc 	.word	0x200000dc
     858:	200000e0 	.word	0x200000e0
     85c:	000020c1 	.word	0x000020c1
     860:	000021b1 	.word	0x000021b1
     864:	00001f15 	.word	0x00001f15

00000868 <bme280_read_pres>:

void bme280_read_pres(uint8_t *data)
{
     868:	b590      	push	{r4, r7, lr}
     86a:	b085      	sub	sp, #20
     86c:	af00      	add	r7, sp, #0
     86e:	6078      	str	r0, [r7, #4]
	uint16_t dummy = 0xF7 | 0x80;
     870:	230e      	movs	r3, #14
     872:	18fb      	adds	r3, r7, r3
     874:	22f7      	movs	r2, #247	; 0xf7
     876:	801a      	strh	r2, [r3, #0]
	spi_select_slave(&spi_master_instance,&bme280_slave_instance,true);
     878:	490e      	ldr	r1, [pc, #56]	; (8b4 <bme280_read_pres+0x4c>)
     87a:	4b0f      	ldr	r3, [pc, #60]	; (8b8 <bme280_read_pres+0x50>)
     87c:	2201      	movs	r2, #1
     87e:	0018      	movs	r0, r3
     880:	4b0e      	ldr	r3, [pc, #56]	; (8bc <bme280_read_pres+0x54>)
     882:	4798      	blx	r3
	spi_write_buffer_wait(&spi_master_instance,&dummy,1);
     884:	230e      	movs	r3, #14
     886:	18f9      	adds	r1, r7, r3
     888:	4b0b      	ldr	r3, [pc, #44]	; (8b8 <bme280_read_pres+0x50>)
     88a:	2201      	movs	r2, #1
     88c:	0018      	movs	r0, r3
     88e:	4b0c      	ldr	r3, [pc, #48]	; (8c0 <bme280_read_pres+0x58>)
     890:	4798      	blx	r3
	spi_read_buffer_wait(&spi_master_instance,data,3,0x00);
     892:	6879      	ldr	r1, [r7, #4]
     894:	4808      	ldr	r0, [pc, #32]	; (8b8 <bme280_read_pres+0x50>)
     896:	2300      	movs	r3, #0
     898:	2203      	movs	r2, #3
     89a:	4c0a      	ldr	r4, [pc, #40]	; (8c4 <bme280_read_pres+0x5c>)
     89c:	47a0      	blx	r4
	//spi_transceive_wait(&spi_master_instance,reg,data);
	spi_select_slave(&spi_master_instance,&bme280_slave_instance,false);
     89e:	4905      	ldr	r1, [pc, #20]	; (8b4 <bme280_read_pres+0x4c>)
     8a0:	4b05      	ldr	r3, [pc, #20]	; (8b8 <bme280_read_pres+0x50>)
     8a2:	2200      	movs	r2, #0
     8a4:	0018      	movs	r0, r3
     8a6:	4b05      	ldr	r3, [pc, #20]	; (8bc <bme280_read_pres+0x54>)
     8a8:	4798      	blx	r3
}
     8aa:	46c0      	nop			; (mov r8, r8)
     8ac:	46bd      	mov	sp, r7
     8ae:	b005      	add	sp, #20
     8b0:	bd90      	pop	{r4, r7, pc}
     8b2:	46c0      	nop			; (mov r8, r8)
     8b4:	200000dc 	.word	0x200000dc
     8b8:	200000e0 	.word	0x200000e0
     8bc:	000020c1 	.word	0x000020c1
     8c0:	000021b1 	.word	0x000021b1
     8c4:	00001f15 	.word	0x00001f15

000008c8 <bme280_read_hum>:

void bme280_read_hum(uint8_t *data)
{
     8c8:	b590      	push	{r4, r7, lr}
     8ca:	b085      	sub	sp, #20
     8cc:	af00      	add	r7, sp, #0
     8ce:	6078      	str	r0, [r7, #4]
	uint16_t dummy = 0xFD | 0x80;
     8d0:	230e      	movs	r3, #14
     8d2:	18fb      	adds	r3, r7, r3
     8d4:	22fd      	movs	r2, #253	; 0xfd
     8d6:	801a      	strh	r2, [r3, #0]
	spi_select_slave(&spi_master_instance,&bme280_slave_instance,true);
     8d8:	490e      	ldr	r1, [pc, #56]	; (914 <bme280_read_hum+0x4c>)
     8da:	4b0f      	ldr	r3, [pc, #60]	; (918 <bme280_read_hum+0x50>)
     8dc:	2201      	movs	r2, #1
     8de:	0018      	movs	r0, r3
     8e0:	4b0e      	ldr	r3, [pc, #56]	; (91c <bme280_read_hum+0x54>)
     8e2:	4798      	blx	r3
	spi_write_buffer_wait(&spi_master_instance,&dummy,1);
     8e4:	230e      	movs	r3, #14
     8e6:	18f9      	adds	r1, r7, r3
     8e8:	4b0b      	ldr	r3, [pc, #44]	; (918 <bme280_read_hum+0x50>)
     8ea:	2201      	movs	r2, #1
     8ec:	0018      	movs	r0, r3
     8ee:	4b0c      	ldr	r3, [pc, #48]	; (920 <bme280_read_hum+0x58>)
     8f0:	4798      	blx	r3
	spi_read_buffer_wait(&spi_master_instance,data,2,0x00);
     8f2:	6879      	ldr	r1, [r7, #4]
     8f4:	4808      	ldr	r0, [pc, #32]	; (918 <bme280_read_hum+0x50>)
     8f6:	2300      	movs	r3, #0
     8f8:	2202      	movs	r2, #2
     8fa:	4c0a      	ldr	r4, [pc, #40]	; (924 <bme280_read_hum+0x5c>)
     8fc:	47a0      	blx	r4
	//spi_transceive_wait(&spi_master_instance,reg,data);
	spi_select_slave(&spi_master_instance,&bme280_slave_instance,false);
     8fe:	4905      	ldr	r1, [pc, #20]	; (914 <bme280_read_hum+0x4c>)
     900:	4b05      	ldr	r3, [pc, #20]	; (918 <bme280_read_hum+0x50>)
     902:	2200      	movs	r2, #0
     904:	0018      	movs	r0, r3
     906:	4b05      	ldr	r3, [pc, #20]	; (91c <bme280_read_hum+0x54>)
     908:	4798      	blx	r3
}
     90a:	46c0      	nop			; (mov r8, r8)
     90c:	46bd      	mov	sp, r7
     90e:	b005      	add	sp, #20
     910:	bd90      	pop	{r4, r7, pc}
     912:	46c0      	nop			; (mov r8, r8)
     914:	200000dc 	.word	0x200000dc
     918:	200000e0 	.word	0x200000e0
     91c:	000020c1 	.word	0x000020c1
     920:	000021b1 	.word	0x000021b1
     924:	00001f15 	.word	0x00001f15

00000928 <bme280_get_cal_data>:

void bme280_get_cal_data(void)
{
     928:	b590      	push	{r4, r7, lr}
     92a:	b083      	sub	sp, #12
     92c:	af00      	add	r7, sp, #0
	//uint8_t cal_data[42];
	uint16_t reg = 0x88;
     92e:	1dbb      	adds	r3, r7, #6
     930:	2288      	movs	r2, #136	; 0x88
     932:	801a      	strh	r2, [r3, #0]
	spi_select_slave(&spi_master_instance,&bme280_slave_instance,true);
     934:	4915      	ldr	r1, [pc, #84]	; (98c <bme280_get_cal_data+0x64>)
     936:	4b16      	ldr	r3, [pc, #88]	; (990 <bme280_get_cal_data+0x68>)
     938:	2201      	movs	r2, #1
     93a:	0018      	movs	r0, r3
     93c:	4b15      	ldr	r3, [pc, #84]	; (994 <bme280_get_cal_data+0x6c>)
     93e:	4798      	blx	r3
	spi_write_buffer_wait(&spi_master_instance,&reg,1);
     940:	1db9      	adds	r1, r7, #6
     942:	4b13      	ldr	r3, [pc, #76]	; (990 <bme280_get_cal_data+0x68>)
     944:	2201      	movs	r2, #1
     946:	0018      	movs	r0, r3
     948:	4b13      	ldr	r3, [pc, #76]	; (998 <bme280_get_cal_data+0x70>)
     94a:	4798      	blx	r3
	spi_read_buffer_wait(&spi_master_instance,&cal_data,26,0x00);
     94c:	4913      	ldr	r1, [pc, #76]	; (99c <bme280_get_cal_data+0x74>)
     94e:	4810      	ldr	r0, [pc, #64]	; (990 <bme280_get_cal_data+0x68>)
     950:	2300      	movs	r3, #0
     952:	221a      	movs	r2, #26
     954:	4c12      	ldr	r4, [pc, #72]	; (9a0 <bme280_get_cal_data+0x78>)
     956:	47a0      	blx	r4
	reg = 0xE1;
     958:	1dbb      	adds	r3, r7, #6
     95a:	22e1      	movs	r2, #225	; 0xe1
     95c:	801a      	strh	r2, [r3, #0]
	spi_write_buffer_wait(&spi_master_instance,&reg,1);
     95e:	1db9      	adds	r1, r7, #6
     960:	4b0b      	ldr	r3, [pc, #44]	; (990 <bme280_get_cal_data+0x68>)
     962:	2201      	movs	r2, #1
     964:	0018      	movs	r0, r3
     966:	4b0c      	ldr	r3, [pc, #48]	; (998 <bme280_get_cal_data+0x70>)
     968:	4798      	blx	r3
	spi_read_buffer_wait(&spi_master_instance,&cal_data[26],7,0x00);
     96a:	490e      	ldr	r1, [pc, #56]	; (9a4 <bme280_get_cal_data+0x7c>)
     96c:	4808      	ldr	r0, [pc, #32]	; (990 <bme280_get_cal_data+0x68>)
     96e:	2300      	movs	r3, #0
     970:	2207      	movs	r2, #7
     972:	4c0b      	ldr	r4, [pc, #44]	; (9a0 <bme280_get_cal_data+0x78>)
     974:	47a0      	blx	r4
	spi_select_slave(&spi_master_instance,&bme280_slave_instance,false);
     976:	4905      	ldr	r1, [pc, #20]	; (98c <bme280_get_cal_data+0x64>)
     978:	4b05      	ldr	r3, [pc, #20]	; (990 <bme280_get_cal_data+0x68>)
     97a:	2200      	movs	r2, #0
     97c:	0018      	movs	r0, r3
     97e:	4b05      	ldr	r3, [pc, #20]	; (994 <bme280_get_cal_data+0x6c>)
     980:	4798      	blx	r3
}
     982:	46c0      	nop			; (mov r8, r8)
     984:	46bd      	mov	sp, r7
     986:	b003      	add	sp, #12
     988:	bd90      	pop	{r4, r7, pc}
     98a:	46c0      	nop			; (mov r8, r8)
     98c:	200000dc 	.word	0x200000dc
     990:	200000e0 	.word	0x200000e0
     994:	000020c1 	.word	0x000020c1
     998:	000021b1 	.word	0x000021b1
     99c:	20000098 	.word	0x20000098
     9a0:	00001f15 	.word	0x00001f15
     9a4:	200000b2 	.word	0x200000b2

000009a8 <bme280_calc_cal>:

void bme280_calc_cal(void)
{
     9a8:	b580      	push	{r7, lr}
     9aa:	af00      	add	r7, sp, #0
	T1 = (cal_data[1] << 8)+cal_data[0];
     9ac:	4b6c      	ldr	r3, [pc, #432]	; (b60 <bme280_calc_cal+0x1b8>)
     9ae:	785b      	ldrb	r3, [r3, #1]
     9b0:	b29b      	uxth	r3, r3
     9b2:	021b      	lsls	r3, r3, #8
     9b4:	b29a      	uxth	r2, r3
     9b6:	4b6a      	ldr	r3, [pc, #424]	; (b60 <bme280_calc_cal+0x1b8>)
     9b8:	781b      	ldrb	r3, [r3, #0]
     9ba:	b29b      	uxth	r3, r3
     9bc:	18d3      	adds	r3, r2, r3
     9be:	b29a      	uxth	r2, r3
     9c0:	4b68      	ldr	r3, [pc, #416]	; (b64 <bme280_calc_cal+0x1bc>)
     9c2:	801a      	strh	r2, [r3, #0]
	T2 = (cal_data[3] << 8)+cal_data[2];
     9c4:	4b66      	ldr	r3, [pc, #408]	; (b60 <bme280_calc_cal+0x1b8>)
     9c6:	78db      	ldrb	r3, [r3, #3]
     9c8:	b29b      	uxth	r3, r3
     9ca:	021b      	lsls	r3, r3, #8
     9cc:	b29a      	uxth	r2, r3
     9ce:	4b64      	ldr	r3, [pc, #400]	; (b60 <bme280_calc_cal+0x1b8>)
     9d0:	789b      	ldrb	r3, [r3, #2]
     9d2:	b29b      	uxth	r3, r3
     9d4:	18d3      	adds	r3, r2, r3
     9d6:	b29b      	uxth	r3, r3
     9d8:	b21a      	sxth	r2, r3
     9da:	4b63      	ldr	r3, [pc, #396]	; (b68 <bme280_calc_cal+0x1c0>)
     9dc:	801a      	strh	r2, [r3, #0]
	T3 = (cal_data[5] << 8)+cal_data[4];
     9de:	4b60      	ldr	r3, [pc, #384]	; (b60 <bme280_calc_cal+0x1b8>)
     9e0:	795b      	ldrb	r3, [r3, #5]
     9e2:	b29b      	uxth	r3, r3
     9e4:	021b      	lsls	r3, r3, #8
     9e6:	b29a      	uxth	r2, r3
     9e8:	4b5d      	ldr	r3, [pc, #372]	; (b60 <bme280_calc_cal+0x1b8>)
     9ea:	791b      	ldrb	r3, [r3, #4]
     9ec:	b29b      	uxth	r3, r3
     9ee:	18d3      	adds	r3, r2, r3
     9f0:	b29b      	uxth	r3, r3
     9f2:	b21a      	sxth	r2, r3
     9f4:	4b5d      	ldr	r3, [pc, #372]	; (b6c <bme280_calc_cal+0x1c4>)
     9f6:	801a      	strh	r2, [r3, #0]
	
	P1 = (cal_data[7] << 8)+cal_data[6];
     9f8:	4b59      	ldr	r3, [pc, #356]	; (b60 <bme280_calc_cal+0x1b8>)
     9fa:	79db      	ldrb	r3, [r3, #7]
     9fc:	b29b      	uxth	r3, r3
     9fe:	021b      	lsls	r3, r3, #8
     a00:	b29a      	uxth	r2, r3
     a02:	4b57      	ldr	r3, [pc, #348]	; (b60 <bme280_calc_cal+0x1b8>)
     a04:	799b      	ldrb	r3, [r3, #6]
     a06:	b29b      	uxth	r3, r3
     a08:	18d3      	adds	r3, r2, r3
     a0a:	b29a      	uxth	r2, r3
     a0c:	4b58      	ldr	r3, [pc, #352]	; (b70 <bme280_calc_cal+0x1c8>)
     a0e:	801a      	strh	r2, [r3, #0]
	P2 = (cal_data[9] << 8)+cal_data[8];
     a10:	4b53      	ldr	r3, [pc, #332]	; (b60 <bme280_calc_cal+0x1b8>)
     a12:	7a5b      	ldrb	r3, [r3, #9]
     a14:	b29b      	uxth	r3, r3
     a16:	021b      	lsls	r3, r3, #8
     a18:	b29a      	uxth	r2, r3
     a1a:	4b51      	ldr	r3, [pc, #324]	; (b60 <bme280_calc_cal+0x1b8>)
     a1c:	7a1b      	ldrb	r3, [r3, #8]
     a1e:	b29b      	uxth	r3, r3
     a20:	18d3      	adds	r3, r2, r3
     a22:	b29b      	uxth	r3, r3
     a24:	b21a      	sxth	r2, r3
     a26:	4b53      	ldr	r3, [pc, #332]	; (b74 <bme280_calc_cal+0x1cc>)
     a28:	801a      	strh	r2, [r3, #0]
	P3 = (cal_data[11] << 8)+cal_data[10];
     a2a:	4b4d      	ldr	r3, [pc, #308]	; (b60 <bme280_calc_cal+0x1b8>)
     a2c:	7adb      	ldrb	r3, [r3, #11]
     a2e:	b29b      	uxth	r3, r3
     a30:	021b      	lsls	r3, r3, #8
     a32:	b29a      	uxth	r2, r3
     a34:	4b4a      	ldr	r3, [pc, #296]	; (b60 <bme280_calc_cal+0x1b8>)
     a36:	7a9b      	ldrb	r3, [r3, #10]
     a38:	b29b      	uxth	r3, r3
     a3a:	18d3      	adds	r3, r2, r3
     a3c:	b29b      	uxth	r3, r3
     a3e:	b21a      	sxth	r2, r3
     a40:	4b4d      	ldr	r3, [pc, #308]	; (b78 <bme280_calc_cal+0x1d0>)
     a42:	801a      	strh	r2, [r3, #0]
	P4 = (cal_data[13] << 8)+cal_data[12];
     a44:	4b46      	ldr	r3, [pc, #280]	; (b60 <bme280_calc_cal+0x1b8>)
     a46:	7b5b      	ldrb	r3, [r3, #13]
     a48:	b29b      	uxth	r3, r3
     a4a:	021b      	lsls	r3, r3, #8
     a4c:	b29a      	uxth	r2, r3
     a4e:	4b44      	ldr	r3, [pc, #272]	; (b60 <bme280_calc_cal+0x1b8>)
     a50:	7b1b      	ldrb	r3, [r3, #12]
     a52:	b29b      	uxth	r3, r3
     a54:	18d3      	adds	r3, r2, r3
     a56:	b29b      	uxth	r3, r3
     a58:	b21a      	sxth	r2, r3
     a5a:	4b48      	ldr	r3, [pc, #288]	; (b7c <bme280_calc_cal+0x1d4>)
     a5c:	801a      	strh	r2, [r3, #0]
	P5 = (cal_data[15] << 8)+cal_data[14];
     a5e:	4b40      	ldr	r3, [pc, #256]	; (b60 <bme280_calc_cal+0x1b8>)
     a60:	7bdb      	ldrb	r3, [r3, #15]
     a62:	b29b      	uxth	r3, r3
     a64:	021b      	lsls	r3, r3, #8
     a66:	b29a      	uxth	r2, r3
     a68:	4b3d      	ldr	r3, [pc, #244]	; (b60 <bme280_calc_cal+0x1b8>)
     a6a:	7b9b      	ldrb	r3, [r3, #14]
     a6c:	b29b      	uxth	r3, r3
     a6e:	18d3      	adds	r3, r2, r3
     a70:	b29b      	uxth	r3, r3
     a72:	b21a      	sxth	r2, r3
     a74:	4b42      	ldr	r3, [pc, #264]	; (b80 <bme280_calc_cal+0x1d8>)
     a76:	801a      	strh	r2, [r3, #0]
	P6 = (cal_data[17] << 8)+cal_data[16];
     a78:	4b39      	ldr	r3, [pc, #228]	; (b60 <bme280_calc_cal+0x1b8>)
     a7a:	7c5b      	ldrb	r3, [r3, #17]
     a7c:	b29b      	uxth	r3, r3
     a7e:	021b      	lsls	r3, r3, #8
     a80:	b29a      	uxth	r2, r3
     a82:	4b37      	ldr	r3, [pc, #220]	; (b60 <bme280_calc_cal+0x1b8>)
     a84:	7c1b      	ldrb	r3, [r3, #16]
     a86:	b29b      	uxth	r3, r3
     a88:	18d3      	adds	r3, r2, r3
     a8a:	b29b      	uxth	r3, r3
     a8c:	b21a      	sxth	r2, r3
     a8e:	4b3d      	ldr	r3, [pc, #244]	; (b84 <bme280_calc_cal+0x1dc>)
     a90:	801a      	strh	r2, [r3, #0]
	P7 = (cal_data[19] << 8)+cal_data[18];
     a92:	4b33      	ldr	r3, [pc, #204]	; (b60 <bme280_calc_cal+0x1b8>)
     a94:	7cdb      	ldrb	r3, [r3, #19]
     a96:	b29b      	uxth	r3, r3
     a98:	021b      	lsls	r3, r3, #8
     a9a:	b29a      	uxth	r2, r3
     a9c:	4b30      	ldr	r3, [pc, #192]	; (b60 <bme280_calc_cal+0x1b8>)
     a9e:	7c9b      	ldrb	r3, [r3, #18]
     aa0:	b29b      	uxth	r3, r3
     aa2:	18d3      	adds	r3, r2, r3
     aa4:	b29b      	uxth	r3, r3
     aa6:	b21a      	sxth	r2, r3
     aa8:	4b37      	ldr	r3, [pc, #220]	; (b88 <bme280_calc_cal+0x1e0>)
     aaa:	801a      	strh	r2, [r3, #0]
	P8 = (cal_data[21] << 8)+cal_data[20];
     aac:	4b2c      	ldr	r3, [pc, #176]	; (b60 <bme280_calc_cal+0x1b8>)
     aae:	7d5b      	ldrb	r3, [r3, #21]
     ab0:	b29b      	uxth	r3, r3
     ab2:	021b      	lsls	r3, r3, #8
     ab4:	b29a      	uxth	r2, r3
     ab6:	4b2a      	ldr	r3, [pc, #168]	; (b60 <bme280_calc_cal+0x1b8>)
     ab8:	7d1b      	ldrb	r3, [r3, #20]
     aba:	b29b      	uxth	r3, r3
     abc:	18d3      	adds	r3, r2, r3
     abe:	b29b      	uxth	r3, r3
     ac0:	b21a      	sxth	r2, r3
     ac2:	4b32      	ldr	r3, [pc, #200]	; (b8c <bme280_calc_cal+0x1e4>)
     ac4:	801a      	strh	r2, [r3, #0]
	P9 = (cal_data[23] << 8)+cal_data[22];
     ac6:	4b26      	ldr	r3, [pc, #152]	; (b60 <bme280_calc_cal+0x1b8>)
     ac8:	7ddb      	ldrb	r3, [r3, #23]
     aca:	b29b      	uxth	r3, r3
     acc:	021b      	lsls	r3, r3, #8
     ace:	b29a      	uxth	r2, r3
     ad0:	4b23      	ldr	r3, [pc, #140]	; (b60 <bme280_calc_cal+0x1b8>)
     ad2:	7d9b      	ldrb	r3, [r3, #22]
     ad4:	b29b      	uxth	r3, r3
     ad6:	18d3      	adds	r3, r2, r3
     ad8:	b29b      	uxth	r3, r3
     ada:	b21a      	sxth	r2, r3
     adc:	4b2c      	ldr	r3, [pc, #176]	; (b90 <bme280_calc_cal+0x1e8>)
     ade:	801a      	strh	r2, [r3, #0]
	
	H1 = cal_data[24];
     ae0:	4b1f      	ldr	r3, [pc, #124]	; (b60 <bme280_calc_cal+0x1b8>)
     ae2:	7e1a      	ldrb	r2, [r3, #24]
     ae4:	4b2b      	ldr	r3, [pc, #172]	; (b94 <bme280_calc_cal+0x1ec>)
     ae6:	701a      	strb	r2, [r3, #0]
	H2 = (cal_data[26] << 8)+cal_data[25];
     ae8:	4b1d      	ldr	r3, [pc, #116]	; (b60 <bme280_calc_cal+0x1b8>)
     aea:	7e9b      	ldrb	r3, [r3, #26]
     aec:	b29b      	uxth	r3, r3
     aee:	021b      	lsls	r3, r3, #8
     af0:	b29a      	uxth	r2, r3
     af2:	4b1b      	ldr	r3, [pc, #108]	; (b60 <bme280_calc_cal+0x1b8>)
     af4:	7e5b      	ldrb	r3, [r3, #25]
     af6:	b29b      	uxth	r3, r3
     af8:	18d3      	adds	r3, r2, r3
     afa:	b29b      	uxth	r3, r3
     afc:	b21a      	sxth	r2, r3
     afe:	4b26      	ldr	r3, [pc, #152]	; (b98 <bme280_calc_cal+0x1f0>)
     b00:	801a      	strh	r2, [r3, #0]
	H3 = cal_data[27];
     b02:	4b17      	ldr	r3, [pc, #92]	; (b60 <bme280_calc_cal+0x1b8>)
     b04:	7eda      	ldrb	r2, [r3, #27]
     b06:	4b25      	ldr	r3, [pc, #148]	; (b9c <bme280_calc_cal+0x1f4>)
     b08:	701a      	strb	r2, [r3, #0]
	H4 = (cal_data[29] << 4)+(cal_data[28] & 0x0F);
     b0a:	4b15      	ldr	r3, [pc, #84]	; (b60 <bme280_calc_cal+0x1b8>)
     b0c:	7f5b      	ldrb	r3, [r3, #29]
     b0e:	b29b      	uxth	r3, r3
     b10:	011b      	lsls	r3, r3, #4
     b12:	b29a      	uxth	r2, r3
     b14:	4b12      	ldr	r3, [pc, #72]	; (b60 <bme280_calc_cal+0x1b8>)
     b16:	7f1b      	ldrb	r3, [r3, #28]
     b18:	b29b      	uxth	r3, r3
     b1a:	210f      	movs	r1, #15
     b1c:	400b      	ands	r3, r1
     b1e:	b29b      	uxth	r3, r3
     b20:	18d3      	adds	r3, r2, r3
     b22:	b29b      	uxth	r3, r3
     b24:	b21a      	sxth	r2, r3
     b26:	4b1e      	ldr	r3, [pc, #120]	; (ba0 <bme280_calc_cal+0x1f8>)
     b28:	801a      	strh	r2, [r3, #0]
	H5 = (cal_data[31] << 4)+((cal_data[30] >> 4) & 0x0F);
     b2a:	4b0d      	ldr	r3, [pc, #52]	; (b60 <bme280_calc_cal+0x1b8>)
     b2c:	7fdb      	ldrb	r3, [r3, #31]
     b2e:	b29b      	uxth	r3, r3
     b30:	011b      	lsls	r3, r3, #4
     b32:	b29a      	uxth	r2, r3
     b34:	4b0a      	ldr	r3, [pc, #40]	; (b60 <bme280_calc_cal+0x1b8>)
     b36:	7f9b      	ldrb	r3, [r3, #30]
     b38:	091b      	lsrs	r3, r3, #4
     b3a:	b2db      	uxtb	r3, r3
     b3c:	b29b      	uxth	r3, r3
     b3e:	210f      	movs	r1, #15
     b40:	400b      	ands	r3, r1
     b42:	b29b      	uxth	r3, r3
     b44:	18d3      	adds	r3, r2, r3
     b46:	b29b      	uxth	r3, r3
     b48:	b21a      	sxth	r2, r3
     b4a:	4b16      	ldr	r3, [pc, #88]	; (ba4 <bme280_calc_cal+0x1fc>)
     b4c:	801a      	strh	r2, [r3, #0]
	H6 = cal_data[32];
     b4e:	4b04      	ldr	r3, [pc, #16]	; (b60 <bme280_calc_cal+0x1b8>)
     b50:	2220      	movs	r2, #32
     b52:	5c9b      	ldrb	r3, [r3, r2]
     b54:	b25a      	sxtb	r2, r3
     b56:	4b14      	ldr	r3, [pc, #80]	; (ba8 <bme280_calc_cal+0x200>)
     b58:	701a      	strb	r2, [r3, #0]
}
     b5a:	46c0      	nop			; (mov r8, r8)
     b5c:	46bd      	mov	sp, r7
     b5e:	bd80      	pop	{r7, pc}
     b60:	20000098 	.word	0x20000098
     b64:	200000d6 	.word	0x200000d6
     b68:	20000094 	.word	0x20000094
     b6c:	200000cc 	.word	0x200000cc
     b70:	200000c2 	.word	0x200000c2
     b74:	200000c8 	.word	0x200000c8
     b78:	200000d8 	.word	0x200000d8
     b7c:	200000d0 	.word	0x200000d0
     b80:	200000ee 	.word	0x200000ee
     b84:	200000c6 	.word	0x200000c6
     b88:	200000ec 	.word	0x200000ec
     b8c:	200000c4 	.word	0x200000c4
     b90:	200000d2 	.word	0x200000d2
     b94:	200000f6 	.word	0x200000f6
     b98:	200000f4 	.word	0x200000f4
     b9c:	200000d4 	.word	0x200000d4
     ba0:	20000096 	.word	0x20000096
     ba4:	200000ce 	.word	0x200000ce
     ba8:	200000ca 	.word	0x200000ca

00000bac <bme280_calc_temp>:

double bme280_calc_temp(int32_t read_temp)
{
     bac:	b5f0      	push	{r4, r5, r6, r7, lr}
     bae:	b08b      	sub	sp, #44	; 0x2c
     bb0:	af00      	add	r7, sp, #0
     bb2:	60f8      	str	r0, [r7, #12]
	double var1, var2, T;
	var1 = (((double)read_temp)/16384.0 - ((double)T1)/1024.0) * ((double)T2);
     bb4:	4b59      	ldr	r3, [pc, #356]	; (d1c <bme280_calc_temp+0x170>)
     bb6:	68f8      	ldr	r0, [r7, #12]
     bb8:	4798      	blx	r3
     bba:	4c59      	ldr	r4, [pc, #356]	; (d20 <bme280_calc_temp+0x174>)
     bbc:	2200      	movs	r2, #0
     bbe:	4b59      	ldr	r3, [pc, #356]	; (d24 <bme280_calc_temp+0x178>)
     bc0:	47a0      	blx	r4
     bc2:	0003      	movs	r3, r0
     bc4:	000c      	movs	r4, r1
     bc6:	001d      	movs	r5, r3
     bc8:	0026      	movs	r6, r4
     bca:	4b57      	ldr	r3, [pc, #348]	; (d28 <bme280_calc_temp+0x17c>)
     bcc:	881a      	ldrh	r2, [r3, #0]
     bce:	4b57      	ldr	r3, [pc, #348]	; (d2c <bme280_calc_temp+0x180>)
     bd0:	0010      	movs	r0, r2
     bd2:	4798      	blx	r3
     bd4:	4c52      	ldr	r4, [pc, #328]	; (d20 <bme280_calc_temp+0x174>)
     bd6:	2200      	movs	r2, #0
     bd8:	4b55      	ldr	r3, [pc, #340]	; (d30 <bme280_calc_temp+0x184>)
     bda:	47a0      	blx	r4
     bdc:	0003      	movs	r3, r0
     bde:	000c      	movs	r4, r1
     be0:	001a      	movs	r2, r3
     be2:	0023      	movs	r3, r4
     be4:	4c53      	ldr	r4, [pc, #332]	; (d34 <bme280_calc_temp+0x188>)
     be6:	0028      	movs	r0, r5
     be8:	0031      	movs	r1, r6
     bea:	47a0      	blx	r4
     bec:	0003      	movs	r3, r0
     bee:	000c      	movs	r4, r1
     bf0:	001d      	movs	r5, r3
     bf2:	0026      	movs	r6, r4
     bf4:	4b50      	ldr	r3, [pc, #320]	; (d38 <bme280_calc_temp+0x18c>)
     bf6:	2200      	movs	r2, #0
     bf8:	5e9a      	ldrsh	r2, [r3, r2]
     bfa:	4b48      	ldr	r3, [pc, #288]	; (d1c <bme280_calc_temp+0x170>)
     bfc:	0010      	movs	r0, r2
     bfe:	4798      	blx	r3
     c00:	0002      	movs	r2, r0
     c02:	000b      	movs	r3, r1
     c04:	4c4d      	ldr	r4, [pc, #308]	; (d3c <bme280_calc_temp+0x190>)
     c06:	0028      	movs	r0, r5
     c08:	0031      	movs	r1, r6
     c0a:	47a0      	blx	r4
     c0c:	0003      	movs	r3, r0
     c0e:	000c      	movs	r4, r1
     c10:	623b      	str	r3, [r7, #32]
     c12:	627c      	str	r4, [r7, #36]	; 0x24
	var2 = ((((double)read_temp)/131072.0 - ((double)T1)/8192.0) * (((double)read_temp)/131072.0 - ((double) T1)/8192.0)) * ((double)T3);
     c14:	4b41      	ldr	r3, [pc, #260]	; (d1c <bme280_calc_temp+0x170>)
     c16:	68f8      	ldr	r0, [r7, #12]
     c18:	4798      	blx	r3
     c1a:	4c41      	ldr	r4, [pc, #260]	; (d20 <bme280_calc_temp+0x174>)
     c1c:	2200      	movs	r2, #0
     c1e:	2382      	movs	r3, #130	; 0x82
     c20:	05db      	lsls	r3, r3, #23
     c22:	47a0      	blx	r4
     c24:	0003      	movs	r3, r0
     c26:	000c      	movs	r4, r1
     c28:	001d      	movs	r5, r3
     c2a:	0026      	movs	r6, r4
     c2c:	4b3e      	ldr	r3, [pc, #248]	; (d28 <bme280_calc_temp+0x17c>)
     c2e:	881a      	ldrh	r2, [r3, #0]
     c30:	4b3e      	ldr	r3, [pc, #248]	; (d2c <bme280_calc_temp+0x180>)
     c32:	0010      	movs	r0, r2
     c34:	4798      	blx	r3
     c36:	4c3a      	ldr	r4, [pc, #232]	; (d20 <bme280_calc_temp+0x174>)
     c38:	2200      	movs	r2, #0
     c3a:	4b41      	ldr	r3, [pc, #260]	; (d40 <bme280_calc_temp+0x194>)
     c3c:	47a0      	blx	r4
     c3e:	0003      	movs	r3, r0
     c40:	000c      	movs	r4, r1
     c42:	001a      	movs	r2, r3
     c44:	0023      	movs	r3, r4
     c46:	4c3b      	ldr	r4, [pc, #236]	; (d34 <bme280_calc_temp+0x188>)
     c48:	0028      	movs	r0, r5
     c4a:	0031      	movs	r1, r6
     c4c:	47a0      	blx	r4
     c4e:	0003      	movs	r3, r0
     c50:	000c      	movs	r4, r1
     c52:	001d      	movs	r5, r3
     c54:	0026      	movs	r6, r4
     c56:	4b31      	ldr	r3, [pc, #196]	; (d1c <bme280_calc_temp+0x170>)
     c58:	68f8      	ldr	r0, [r7, #12]
     c5a:	4798      	blx	r3
     c5c:	4c30      	ldr	r4, [pc, #192]	; (d20 <bme280_calc_temp+0x174>)
     c5e:	2200      	movs	r2, #0
     c60:	2382      	movs	r3, #130	; 0x82
     c62:	05db      	lsls	r3, r3, #23
     c64:	47a0      	blx	r4
     c66:	0003      	movs	r3, r0
     c68:	000c      	movs	r4, r1
     c6a:	603b      	str	r3, [r7, #0]
     c6c:	607c      	str	r4, [r7, #4]
     c6e:	4b2e      	ldr	r3, [pc, #184]	; (d28 <bme280_calc_temp+0x17c>)
     c70:	881a      	ldrh	r2, [r3, #0]
     c72:	4b2e      	ldr	r3, [pc, #184]	; (d2c <bme280_calc_temp+0x180>)
     c74:	0010      	movs	r0, r2
     c76:	4798      	blx	r3
     c78:	4c29      	ldr	r4, [pc, #164]	; (d20 <bme280_calc_temp+0x174>)
     c7a:	2200      	movs	r2, #0
     c7c:	4b30      	ldr	r3, [pc, #192]	; (d40 <bme280_calc_temp+0x194>)
     c7e:	47a0      	blx	r4
     c80:	0003      	movs	r3, r0
     c82:	000c      	movs	r4, r1
     c84:	001a      	movs	r2, r3
     c86:	0023      	movs	r3, r4
     c88:	4c2a      	ldr	r4, [pc, #168]	; (d34 <bme280_calc_temp+0x188>)
     c8a:	6838      	ldr	r0, [r7, #0]
     c8c:	6879      	ldr	r1, [r7, #4]
     c8e:	47a0      	blx	r4
     c90:	0003      	movs	r3, r0
     c92:	000c      	movs	r4, r1
     c94:	001a      	movs	r2, r3
     c96:	0023      	movs	r3, r4
     c98:	4c28      	ldr	r4, [pc, #160]	; (d3c <bme280_calc_temp+0x190>)
     c9a:	0028      	movs	r0, r5
     c9c:	0031      	movs	r1, r6
     c9e:	47a0      	blx	r4
     ca0:	0003      	movs	r3, r0
     ca2:	000c      	movs	r4, r1
     ca4:	001d      	movs	r5, r3
     ca6:	0026      	movs	r6, r4
     ca8:	4b26      	ldr	r3, [pc, #152]	; (d44 <bme280_calc_temp+0x198>)
     caa:	2200      	movs	r2, #0
     cac:	5e9a      	ldrsh	r2, [r3, r2]
     cae:	4b1b      	ldr	r3, [pc, #108]	; (d1c <bme280_calc_temp+0x170>)
     cb0:	0010      	movs	r0, r2
     cb2:	4798      	blx	r3
     cb4:	0002      	movs	r2, r0
     cb6:	000b      	movs	r3, r1
     cb8:	4c20      	ldr	r4, [pc, #128]	; (d3c <bme280_calc_temp+0x190>)
     cba:	0028      	movs	r0, r5
     cbc:	0031      	movs	r1, r6
     cbe:	47a0      	blx	r4
     cc0:	0003      	movs	r3, r0
     cc2:	000c      	movs	r4, r1
     cc4:	61bb      	str	r3, [r7, #24]
     cc6:	61fc      	str	r4, [r7, #28]
	t_fine = (int32_t)(var1 + var2);
     cc8:	4c1f      	ldr	r4, [pc, #124]	; (d48 <bme280_calc_temp+0x19c>)
     cca:	69ba      	ldr	r2, [r7, #24]
     ccc:	69fb      	ldr	r3, [r7, #28]
     cce:	6a38      	ldr	r0, [r7, #32]
     cd0:	6a79      	ldr	r1, [r7, #36]	; 0x24
     cd2:	47a0      	blx	r4
     cd4:	0003      	movs	r3, r0
     cd6:	000c      	movs	r4, r1
     cd8:	0019      	movs	r1, r3
     cda:	0022      	movs	r2, r4
     cdc:	4b1b      	ldr	r3, [pc, #108]	; (d4c <bme280_calc_temp+0x1a0>)
     cde:	0008      	movs	r0, r1
     ce0:	0011      	movs	r1, r2
     ce2:	4798      	blx	r3
     ce4:	0002      	movs	r2, r0
     ce6:	4b1a      	ldr	r3, [pc, #104]	; (d50 <bme280_calc_temp+0x1a4>)
     ce8:	601a      	str	r2, [r3, #0]
	T = (var1 + var2) / 5120.0;
     cea:	4c17      	ldr	r4, [pc, #92]	; (d48 <bme280_calc_temp+0x19c>)
     cec:	69ba      	ldr	r2, [r7, #24]
     cee:	69fb      	ldr	r3, [r7, #28]
     cf0:	6a38      	ldr	r0, [r7, #32]
     cf2:	6a79      	ldr	r1, [r7, #36]	; 0x24
     cf4:	47a0      	blx	r4
     cf6:	0003      	movs	r3, r0
     cf8:	000c      	movs	r4, r1
     cfa:	0018      	movs	r0, r3
     cfc:	0021      	movs	r1, r4
     cfe:	4c08      	ldr	r4, [pc, #32]	; (d20 <bme280_calc_temp+0x174>)
     d00:	2200      	movs	r2, #0
     d02:	4b14      	ldr	r3, [pc, #80]	; (d54 <bme280_calc_temp+0x1a8>)
     d04:	47a0      	blx	r4
     d06:	0003      	movs	r3, r0
     d08:	000c      	movs	r4, r1
     d0a:	613b      	str	r3, [r7, #16]
     d0c:	617c      	str	r4, [r7, #20]
	return T;
     d0e:	693b      	ldr	r3, [r7, #16]
     d10:	697c      	ldr	r4, [r7, #20]
}
     d12:	0018      	movs	r0, r3
     d14:	0021      	movs	r1, r4
     d16:	46bd      	mov	sp, r7
     d18:	b00b      	add	sp, #44	; 0x2c
     d1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d1c:	00005079 	.word	0x00005079
     d20:	00003c7d 	.word	0x00003c7d
     d24:	40d00000 	.word	0x40d00000
     d28:	200000d6 	.word	0x200000d6
     d2c:	000050fd 	.word	0x000050fd
     d30:	40900000 	.word	0x40900000
     d34:	000049e5 	.word	0x000049e5
     d38:	20000094 	.word	0x20000094
     d3c:	000044e5 	.word	0x000044e5
     d40:	40c00000 	.word	0x40c00000
     d44:	200000cc 	.word	0x200000cc
     d48:	0000365d 	.word	0x0000365d
     d4c:	00005011 	.word	0x00005011
     d50:	200000f8 	.word	0x200000f8
     d54:	40b40000 	.word	0x40b40000

00000d58 <bme280_calc_pres>:

double bme280_calc_pres(int32_t read_pres)
{
     d58:	b5f0      	push	{r4, r5, r6, r7, lr}
     d5a:	b089      	sub	sp, #36	; 0x24
     d5c:	af00      	add	r7, sp, #0
     d5e:	6078      	str	r0, [r7, #4]
	double var1, var2, p;
	var1 = ((double)t_fine/2.0) - 64000.0;
     d60:	4bb8      	ldr	r3, [pc, #736]	; (1044 <bme280_calc_pres+0x2ec>)
     d62:	681a      	ldr	r2, [r3, #0]
     d64:	4bb8      	ldr	r3, [pc, #736]	; (1048 <bme280_calc_pres+0x2f0>)
     d66:	0010      	movs	r0, r2
     d68:	4798      	blx	r3
     d6a:	4cb8      	ldr	r4, [pc, #736]	; (104c <bme280_calc_pres+0x2f4>)
     d6c:	2200      	movs	r2, #0
     d6e:	2380      	movs	r3, #128	; 0x80
     d70:	05db      	lsls	r3, r3, #23
     d72:	47a0      	blx	r4
     d74:	0003      	movs	r3, r0
     d76:	000c      	movs	r4, r1
     d78:	0018      	movs	r0, r3
     d7a:	0021      	movs	r1, r4
     d7c:	4cb4      	ldr	r4, [pc, #720]	; (1050 <bme280_calc_pres+0x2f8>)
     d7e:	2200      	movs	r2, #0
     d80:	4bb4      	ldr	r3, [pc, #720]	; (1054 <bme280_calc_pres+0x2fc>)
     d82:	47a0      	blx	r4
     d84:	0003      	movs	r3, r0
     d86:	000c      	movs	r4, r1
     d88:	61bb      	str	r3, [r7, #24]
     d8a:	61fc      	str	r4, [r7, #28]
	var2 = var1 * var1 * ((double)P6) / 32768.0;
     d8c:	4cb2      	ldr	r4, [pc, #712]	; (1058 <bme280_calc_pres+0x300>)
     d8e:	69ba      	ldr	r2, [r7, #24]
     d90:	69fb      	ldr	r3, [r7, #28]
     d92:	69b8      	ldr	r0, [r7, #24]
     d94:	69f9      	ldr	r1, [r7, #28]
     d96:	47a0      	blx	r4
     d98:	0003      	movs	r3, r0
     d9a:	000c      	movs	r4, r1
     d9c:	001d      	movs	r5, r3
     d9e:	0026      	movs	r6, r4
     da0:	4bae      	ldr	r3, [pc, #696]	; (105c <bme280_calc_pres+0x304>)
     da2:	2200      	movs	r2, #0
     da4:	5e9a      	ldrsh	r2, [r3, r2]
     da6:	4ba8      	ldr	r3, [pc, #672]	; (1048 <bme280_calc_pres+0x2f0>)
     da8:	0010      	movs	r0, r2
     daa:	4798      	blx	r3
     dac:	0002      	movs	r2, r0
     dae:	000b      	movs	r3, r1
     db0:	4ca9      	ldr	r4, [pc, #676]	; (1058 <bme280_calc_pres+0x300>)
     db2:	0028      	movs	r0, r5
     db4:	0031      	movs	r1, r6
     db6:	47a0      	blx	r4
     db8:	0003      	movs	r3, r0
     dba:	000c      	movs	r4, r1
     dbc:	0018      	movs	r0, r3
     dbe:	0021      	movs	r1, r4
     dc0:	4ca2      	ldr	r4, [pc, #648]	; (104c <bme280_calc_pres+0x2f4>)
     dc2:	2200      	movs	r2, #0
     dc4:	4ba6      	ldr	r3, [pc, #664]	; (1060 <bme280_calc_pres+0x308>)
     dc6:	47a0      	blx	r4
     dc8:	0003      	movs	r3, r0
     dca:	000c      	movs	r4, r1
     dcc:	613b      	str	r3, [r7, #16]
     dce:	617c      	str	r4, [r7, #20]
	var2 = var2 + var1 * ((double)P5) * 2.0;
     dd0:	4ba4      	ldr	r3, [pc, #656]	; (1064 <bme280_calc_pres+0x30c>)
     dd2:	2200      	movs	r2, #0
     dd4:	5e9a      	ldrsh	r2, [r3, r2]
     dd6:	4b9c      	ldr	r3, [pc, #624]	; (1048 <bme280_calc_pres+0x2f0>)
     dd8:	0010      	movs	r0, r2
     dda:	4798      	blx	r3
     ddc:	4c9e      	ldr	r4, [pc, #632]	; (1058 <bme280_calc_pres+0x300>)
     dde:	69ba      	ldr	r2, [r7, #24]
     de0:	69fb      	ldr	r3, [r7, #28]
     de2:	47a0      	blx	r4
     de4:	0003      	movs	r3, r0
     de6:	000c      	movs	r4, r1
     de8:	0018      	movs	r0, r3
     dea:	0021      	movs	r1, r4
     dec:	4c9e      	ldr	r4, [pc, #632]	; (1068 <bme280_calc_pres+0x310>)
     dee:	0002      	movs	r2, r0
     df0:	000b      	movs	r3, r1
     df2:	47a0      	blx	r4
     df4:	0003      	movs	r3, r0
     df6:	000c      	movs	r4, r1
     df8:	001a      	movs	r2, r3
     dfa:	0023      	movs	r3, r4
     dfc:	4c9a      	ldr	r4, [pc, #616]	; (1068 <bme280_calc_pres+0x310>)
     dfe:	6938      	ldr	r0, [r7, #16]
     e00:	6979      	ldr	r1, [r7, #20]
     e02:	47a0      	blx	r4
     e04:	0003      	movs	r3, r0
     e06:	000c      	movs	r4, r1
     e08:	613b      	str	r3, [r7, #16]
     e0a:	617c      	str	r4, [r7, #20]
	var2 = (var2/4.0)+(((double)P4) * 65536.0);
     e0c:	4c8f      	ldr	r4, [pc, #572]	; (104c <bme280_calc_pres+0x2f4>)
     e0e:	2200      	movs	r2, #0
     e10:	4b96      	ldr	r3, [pc, #600]	; (106c <bme280_calc_pres+0x314>)
     e12:	6938      	ldr	r0, [r7, #16]
     e14:	6979      	ldr	r1, [r7, #20]
     e16:	47a0      	blx	r4
     e18:	0003      	movs	r3, r0
     e1a:	000c      	movs	r4, r1
     e1c:	001d      	movs	r5, r3
     e1e:	0026      	movs	r6, r4
     e20:	4b93      	ldr	r3, [pc, #588]	; (1070 <bme280_calc_pres+0x318>)
     e22:	2200      	movs	r2, #0
     e24:	5e9a      	ldrsh	r2, [r3, r2]
     e26:	4b88      	ldr	r3, [pc, #544]	; (1048 <bme280_calc_pres+0x2f0>)
     e28:	0010      	movs	r0, r2
     e2a:	4798      	blx	r3
     e2c:	4c8a      	ldr	r4, [pc, #552]	; (1058 <bme280_calc_pres+0x300>)
     e2e:	2200      	movs	r2, #0
     e30:	4b90      	ldr	r3, [pc, #576]	; (1074 <bme280_calc_pres+0x31c>)
     e32:	47a0      	blx	r4
     e34:	0003      	movs	r3, r0
     e36:	000c      	movs	r4, r1
     e38:	001a      	movs	r2, r3
     e3a:	0023      	movs	r3, r4
     e3c:	4c8a      	ldr	r4, [pc, #552]	; (1068 <bme280_calc_pres+0x310>)
     e3e:	0028      	movs	r0, r5
     e40:	0031      	movs	r1, r6
     e42:	47a0      	blx	r4
     e44:	0003      	movs	r3, r0
     e46:	000c      	movs	r4, r1
     e48:	613b      	str	r3, [r7, #16]
     e4a:	617c      	str	r4, [r7, #20]
	var1 = (((double)P3) * var1 * var1 / 524288.0 + ((double)P2) * var1) / 524288.0;
     e4c:	4b8a      	ldr	r3, [pc, #552]	; (1078 <bme280_calc_pres+0x320>)
     e4e:	2200      	movs	r2, #0
     e50:	5e9a      	ldrsh	r2, [r3, r2]
     e52:	4b7d      	ldr	r3, [pc, #500]	; (1048 <bme280_calc_pres+0x2f0>)
     e54:	0010      	movs	r0, r2
     e56:	4798      	blx	r3
     e58:	4c7f      	ldr	r4, [pc, #508]	; (1058 <bme280_calc_pres+0x300>)
     e5a:	69ba      	ldr	r2, [r7, #24]
     e5c:	69fb      	ldr	r3, [r7, #28]
     e5e:	47a0      	blx	r4
     e60:	0003      	movs	r3, r0
     e62:	000c      	movs	r4, r1
     e64:	0018      	movs	r0, r3
     e66:	0021      	movs	r1, r4
     e68:	4c7b      	ldr	r4, [pc, #492]	; (1058 <bme280_calc_pres+0x300>)
     e6a:	69ba      	ldr	r2, [r7, #24]
     e6c:	69fb      	ldr	r3, [r7, #28]
     e6e:	47a0      	blx	r4
     e70:	0003      	movs	r3, r0
     e72:	000c      	movs	r4, r1
     e74:	0018      	movs	r0, r3
     e76:	0021      	movs	r1, r4
     e78:	4c74      	ldr	r4, [pc, #464]	; (104c <bme280_calc_pres+0x2f4>)
     e7a:	2200      	movs	r2, #0
     e7c:	4b7f      	ldr	r3, [pc, #508]	; (107c <bme280_calc_pres+0x324>)
     e7e:	47a0      	blx	r4
     e80:	0003      	movs	r3, r0
     e82:	000c      	movs	r4, r1
     e84:	001d      	movs	r5, r3
     e86:	0026      	movs	r6, r4
     e88:	4b7d      	ldr	r3, [pc, #500]	; (1080 <bme280_calc_pres+0x328>)
     e8a:	2200      	movs	r2, #0
     e8c:	5e9a      	ldrsh	r2, [r3, r2]
     e8e:	4b6e      	ldr	r3, [pc, #440]	; (1048 <bme280_calc_pres+0x2f0>)
     e90:	0010      	movs	r0, r2
     e92:	4798      	blx	r3
     e94:	4c70      	ldr	r4, [pc, #448]	; (1058 <bme280_calc_pres+0x300>)
     e96:	69ba      	ldr	r2, [r7, #24]
     e98:	69fb      	ldr	r3, [r7, #28]
     e9a:	47a0      	blx	r4
     e9c:	0003      	movs	r3, r0
     e9e:	000c      	movs	r4, r1
     ea0:	001a      	movs	r2, r3
     ea2:	0023      	movs	r3, r4
     ea4:	4c70      	ldr	r4, [pc, #448]	; (1068 <bme280_calc_pres+0x310>)
     ea6:	0028      	movs	r0, r5
     ea8:	0031      	movs	r1, r6
     eaa:	47a0      	blx	r4
     eac:	0003      	movs	r3, r0
     eae:	000c      	movs	r4, r1
     eb0:	0018      	movs	r0, r3
     eb2:	0021      	movs	r1, r4
     eb4:	4c65      	ldr	r4, [pc, #404]	; (104c <bme280_calc_pres+0x2f4>)
     eb6:	2200      	movs	r2, #0
     eb8:	4b70      	ldr	r3, [pc, #448]	; (107c <bme280_calc_pres+0x324>)
     eba:	47a0      	blx	r4
     ebc:	0003      	movs	r3, r0
     ebe:	000c      	movs	r4, r1
     ec0:	61bb      	str	r3, [r7, #24]
     ec2:	61fc      	str	r4, [r7, #28]
	var1 = (1.0 + var1 / 32768.0)*((double)P1);
     ec4:	4c61      	ldr	r4, [pc, #388]	; (104c <bme280_calc_pres+0x2f4>)
     ec6:	2200      	movs	r2, #0
     ec8:	4b65      	ldr	r3, [pc, #404]	; (1060 <bme280_calc_pres+0x308>)
     eca:	69b8      	ldr	r0, [r7, #24]
     ecc:	69f9      	ldr	r1, [r7, #28]
     ece:	47a0      	blx	r4
     ed0:	0003      	movs	r3, r0
     ed2:	000c      	movs	r4, r1
     ed4:	0018      	movs	r0, r3
     ed6:	0021      	movs	r1, r4
     ed8:	4c63      	ldr	r4, [pc, #396]	; (1068 <bme280_calc_pres+0x310>)
     eda:	2200      	movs	r2, #0
     edc:	4b69      	ldr	r3, [pc, #420]	; (1084 <bme280_calc_pres+0x32c>)
     ede:	47a0      	blx	r4
     ee0:	0003      	movs	r3, r0
     ee2:	000c      	movs	r4, r1
     ee4:	001d      	movs	r5, r3
     ee6:	0026      	movs	r6, r4
     ee8:	4b67      	ldr	r3, [pc, #412]	; (1088 <bme280_calc_pres+0x330>)
     eea:	881a      	ldrh	r2, [r3, #0]
     eec:	4b67      	ldr	r3, [pc, #412]	; (108c <bme280_calc_pres+0x334>)
     eee:	0010      	movs	r0, r2
     ef0:	4798      	blx	r3
     ef2:	0002      	movs	r2, r0
     ef4:	000b      	movs	r3, r1
     ef6:	4c58      	ldr	r4, [pc, #352]	; (1058 <bme280_calc_pres+0x300>)
     ef8:	0028      	movs	r0, r5
     efa:	0031      	movs	r1, r6
     efc:	47a0      	blx	r4
     efe:	0003      	movs	r3, r0
     f00:	000c      	movs	r4, r1
     f02:	61bb      	str	r3, [r7, #24]
     f04:	61fc      	str	r4, [r7, #28]
	if (var1 == 0.0)
     f06:	4c62      	ldr	r4, [pc, #392]	; (1090 <bme280_calc_pres+0x338>)
     f08:	2200      	movs	r2, #0
     f0a:	2300      	movs	r3, #0
     f0c:	69b8      	ldr	r0, [r7, #24]
     f0e:	69f9      	ldr	r1, [r7, #28]
     f10:	47a0      	blx	r4
     f12:	1e03      	subs	r3, r0, #0
     f14:	d002      	beq.n	f1c <bme280_calc_pres+0x1c4>
	{
		return 0; // avoid exception caused by division by zero
     f16:	2300      	movs	r3, #0
     f18:	2400      	movs	r4, #0
     f1a:	e08e      	b.n	103a <bme280_calc_pres+0x2e2>
	}
	p = 1048576.0 - (double)read_pres;
     f1c:	4b4a      	ldr	r3, [pc, #296]	; (1048 <bme280_calc_pres+0x2f0>)
     f1e:	6878      	ldr	r0, [r7, #4]
     f20:	4798      	blx	r3
     f22:	0002      	movs	r2, r0
     f24:	000b      	movs	r3, r1
     f26:	4c4a      	ldr	r4, [pc, #296]	; (1050 <bme280_calc_pres+0x2f8>)
     f28:	2000      	movs	r0, #0
     f2a:	495a      	ldr	r1, [pc, #360]	; (1094 <bme280_calc_pres+0x33c>)
     f2c:	47a0      	blx	r4
     f2e:	0003      	movs	r3, r0
     f30:	000c      	movs	r4, r1
     f32:	60bb      	str	r3, [r7, #8]
     f34:	60fc      	str	r4, [r7, #12]
	p = (p - (var2 / 4096.0)) * 6250.0 / var1;
     f36:	4c45      	ldr	r4, [pc, #276]	; (104c <bme280_calc_pres+0x2f4>)
     f38:	2200      	movs	r2, #0
     f3a:	4b57      	ldr	r3, [pc, #348]	; (1098 <bme280_calc_pres+0x340>)
     f3c:	6938      	ldr	r0, [r7, #16]
     f3e:	6979      	ldr	r1, [r7, #20]
     f40:	47a0      	blx	r4
     f42:	0003      	movs	r3, r0
     f44:	000c      	movs	r4, r1
     f46:	001a      	movs	r2, r3
     f48:	0023      	movs	r3, r4
     f4a:	4c41      	ldr	r4, [pc, #260]	; (1050 <bme280_calc_pres+0x2f8>)
     f4c:	68b8      	ldr	r0, [r7, #8]
     f4e:	68f9      	ldr	r1, [r7, #12]
     f50:	47a0      	blx	r4
     f52:	0003      	movs	r3, r0
     f54:	000c      	movs	r4, r1
     f56:	0018      	movs	r0, r3
     f58:	0021      	movs	r1, r4
     f5a:	4c3f      	ldr	r4, [pc, #252]	; (1058 <bme280_calc_pres+0x300>)
     f5c:	2200      	movs	r2, #0
     f5e:	4b4f      	ldr	r3, [pc, #316]	; (109c <bme280_calc_pres+0x344>)
     f60:	47a0      	blx	r4
     f62:	0003      	movs	r3, r0
     f64:	000c      	movs	r4, r1
     f66:	0018      	movs	r0, r3
     f68:	0021      	movs	r1, r4
     f6a:	4c38      	ldr	r4, [pc, #224]	; (104c <bme280_calc_pres+0x2f4>)
     f6c:	69ba      	ldr	r2, [r7, #24]
     f6e:	69fb      	ldr	r3, [r7, #28]
     f70:	47a0      	blx	r4
     f72:	0003      	movs	r3, r0
     f74:	000c      	movs	r4, r1
     f76:	60bb      	str	r3, [r7, #8]
     f78:	60fc      	str	r4, [r7, #12]
	var1 = ((double)P9) * p * p / 2147483648.0;
     f7a:	4b49      	ldr	r3, [pc, #292]	; (10a0 <bme280_calc_pres+0x348>)
     f7c:	2200      	movs	r2, #0
     f7e:	5e9a      	ldrsh	r2, [r3, r2]
     f80:	4b31      	ldr	r3, [pc, #196]	; (1048 <bme280_calc_pres+0x2f0>)
     f82:	0010      	movs	r0, r2
     f84:	4798      	blx	r3
     f86:	4c34      	ldr	r4, [pc, #208]	; (1058 <bme280_calc_pres+0x300>)
     f88:	68ba      	ldr	r2, [r7, #8]
     f8a:	68fb      	ldr	r3, [r7, #12]
     f8c:	47a0      	blx	r4
     f8e:	0003      	movs	r3, r0
     f90:	000c      	movs	r4, r1
     f92:	0018      	movs	r0, r3
     f94:	0021      	movs	r1, r4
     f96:	4c30      	ldr	r4, [pc, #192]	; (1058 <bme280_calc_pres+0x300>)
     f98:	68ba      	ldr	r2, [r7, #8]
     f9a:	68fb      	ldr	r3, [r7, #12]
     f9c:	47a0      	blx	r4
     f9e:	0003      	movs	r3, r0
     fa0:	000c      	movs	r4, r1
     fa2:	0018      	movs	r0, r3
     fa4:	0021      	movs	r1, r4
     fa6:	4c29      	ldr	r4, [pc, #164]	; (104c <bme280_calc_pres+0x2f4>)
     fa8:	2200      	movs	r2, #0
     faa:	4b3e      	ldr	r3, [pc, #248]	; (10a4 <bme280_calc_pres+0x34c>)
     fac:	47a0      	blx	r4
     fae:	0003      	movs	r3, r0
     fb0:	000c      	movs	r4, r1
     fb2:	61bb      	str	r3, [r7, #24]
     fb4:	61fc      	str	r4, [r7, #28]
	var2 = p * ((double)P8) / 32768.0;
     fb6:	4b3c      	ldr	r3, [pc, #240]	; (10a8 <bme280_calc_pres+0x350>)
     fb8:	2200      	movs	r2, #0
     fba:	5e9a      	ldrsh	r2, [r3, r2]
     fbc:	4b22      	ldr	r3, [pc, #136]	; (1048 <bme280_calc_pres+0x2f0>)
     fbe:	0010      	movs	r0, r2
     fc0:	4798      	blx	r3
     fc2:	4c25      	ldr	r4, [pc, #148]	; (1058 <bme280_calc_pres+0x300>)
     fc4:	68ba      	ldr	r2, [r7, #8]
     fc6:	68fb      	ldr	r3, [r7, #12]
     fc8:	47a0      	blx	r4
     fca:	0003      	movs	r3, r0
     fcc:	000c      	movs	r4, r1
     fce:	0018      	movs	r0, r3
     fd0:	0021      	movs	r1, r4
     fd2:	4c1e      	ldr	r4, [pc, #120]	; (104c <bme280_calc_pres+0x2f4>)
     fd4:	2200      	movs	r2, #0
     fd6:	4b22      	ldr	r3, [pc, #136]	; (1060 <bme280_calc_pres+0x308>)
     fd8:	47a0      	blx	r4
     fda:	0003      	movs	r3, r0
     fdc:	000c      	movs	r4, r1
     fde:	613b      	str	r3, [r7, #16]
     fe0:	617c      	str	r4, [r7, #20]
	p = p + (var1 + var2 + ((double)P7)) / 16.0;
     fe2:	4c21      	ldr	r4, [pc, #132]	; (1068 <bme280_calc_pres+0x310>)
     fe4:	693a      	ldr	r2, [r7, #16]
     fe6:	697b      	ldr	r3, [r7, #20]
     fe8:	69b8      	ldr	r0, [r7, #24]
     fea:	69f9      	ldr	r1, [r7, #28]
     fec:	47a0      	blx	r4
     fee:	0003      	movs	r3, r0
     ff0:	000c      	movs	r4, r1
     ff2:	001d      	movs	r5, r3
     ff4:	0026      	movs	r6, r4
     ff6:	4b2d      	ldr	r3, [pc, #180]	; (10ac <bme280_calc_pres+0x354>)
     ff8:	2200      	movs	r2, #0
     ffa:	5e9a      	ldrsh	r2, [r3, r2]
     ffc:	4b12      	ldr	r3, [pc, #72]	; (1048 <bme280_calc_pres+0x2f0>)
     ffe:	0010      	movs	r0, r2
    1000:	4798      	blx	r3
    1002:	0002      	movs	r2, r0
    1004:	000b      	movs	r3, r1
    1006:	4c18      	ldr	r4, [pc, #96]	; (1068 <bme280_calc_pres+0x310>)
    1008:	0028      	movs	r0, r5
    100a:	0031      	movs	r1, r6
    100c:	47a0      	blx	r4
    100e:	0003      	movs	r3, r0
    1010:	000c      	movs	r4, r1
    1012:	0018      	movs	r0, r3
    1014:	0021      	movs	r1, r4
    1016:	4c0d      	ldr	r4, [pc, #52]	; (104c <bme280_calc_pres+0x2f4>)
    1018:	2200      	movs	r2, #0
    101a:	4b25      	ldr	r3, [pc, #148]	; (10b0 <bme280_calc_pres+0x358>)
    101c:	47a0      	blx	r4
    101e:	0003      	movs	r3, r0
    1020:	000c      	movs	r4, r1
    1022:	001a      	movs	r2, r3
    1024:	0023      	movs	r3, r4
    1026:	4c10      	ldr	r4, [pc, #64]	; (1068 <bme280_calc_pres+0x310>)
    1028:	68b8      	ldr	r0, [r7, #8]
    102a:	68f9      	ldr	r1, [r7, #12]
    102c:	47a0      	blx	r4
    102e:	0003      	movs	r3, r0
    1030:	000c      	movs	r4, r1
    1032:	60bb      	str	r3, [r7, #8]
    1034:	60fc      	str	r4, [r7, #12]
	return p;
    1036:	68bb      	ldr	r3, [r7, #8]
    1038:	68fc      	ldr	r4, [r7, #12]
}
    103a:	0018      	movs	r0, r3
    103c:	0021      	movs	r1, r4
    103e:	46bd      	mov	sp, r7
    1040:	b009      	add	sp, #36	; 0x24
    1042:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1044:	200000f8 	.word	0x200000f8
    1048:	00005079 	.word	0x00005079
    104c:	00003c7d 	.word	0x00003c7d
    1050:	000049e5 	.word	0x000049e5
    1054:	40ef4000 	.word	0x40ef4000
    1058:	000044e5 	.word	0x000044e5
    105c:	200000c6 	.word	0x200000c6
    1060:	40e00000 	.word	0x40e00000
    1064:	200000ee 	.word	0x200000ee
    1068:	0000365d 	.word	0x0000365d
    106c:	40100000 	.word	0x40100000
    1070:	200000d0 	.word	0x200000d0
    1074:	40f00000 	.word	0x40f00000
    1078:	200000d8 	.word	0x200000d8
    107c:	41200000 	.word	0x41200000
    1080:	200000c8 	.word	0x200000c8
    1084:	3ff00000 	.word	0x3ff00000
    1088:	200000c2 	.word	0x200000c2
    108c:	000050fd 	.word	0x000050fd
    1090:	00003601 	.word	0x00003601
    1094:	41300000 	.word	0x41300000
    1098:	40b00000 	.word	0x40b00000
    109c:	40b86a00 	.word	0x40b86a00
    10a0:	200000d2 	.word	0x200000d2
    10a4:	41e00000 	.word	0x41e00000
    10a8:	200000c4 	.word	0x200000c4
    10ac:	200000ec 	.word	0x200000ec
    10b0:	40300000 	.word	0x40300000

000010b4 <bme280_calc_hum>:

double bme280_calc_hum(int32_t read_hum)
{
    10b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    10b6:	b089      	sub	sp, #36	; 0x24
    10b8:	af00      	add	r7, sp, #0
    10ba:	6178      	str	r0, [r7, #20]
	double var_H;
	var_H = (((double)t_fine) - 76800.0);
    10bc:	4b75      	ldr	r3, [pc, #468]	; (1294 <bme280_calc_hum+0x1e0>)
    10be:	681a      	ldr	r2, [r3, #0]
    10c0:	4b75      	ldr	r3, [pc, #468]	; (1298 <bme280_calc_hum+0x1e4>)
    10c2:	0010      	movs	r0, r2
    10c4:	4798      	blx	r3
    10c6:	4c75      	ldr	r4, [pc, #468]	; (129c <bme280_calc_hum+0x1e8>)
    10c8:	2200      	movs	r2, #0
    10ca:	4b75      	ldr	r3, [pc, #468]	; (12a0 <bme280_calc_hum+0x1ec>)
    10cc:	47a0      	blx	r4
    10ce:	0003      	movs	r3, r0
    10d0:	000c      	movs	r4, r1
    10d2:	61bb      	str	r3, [r7, #24]
    10d4:	61fc      	str	r4, [r7, #28]
	var_H = (read_hum - (((double)H4) * 64.0 + ((double)H5) / 16384.0 * var_H)) * (((double)H2) / 65536.0 * (1.0 + ((double)H6) / 67108864.0 * var_H * (1.0 + ((double)H3) / 67108864.0 * var_H)));
    10d6:	4b70      	ldr	r3, [pc, #448]	; (1298 <bme280_calc_hum+0x1e4>)
    10d8:	6978      	ldr	r0, [r7, #20]
    10da:	4798      	blx	r3
    10dc:	0005      	movs	r5, r0
    10de:	000e      	movs	r6, r1
    10e0:	4b70      	ldr	r3, [pc, #448]	; (12a4 <bme280_calc_hum+0x1f0>)
    10e2:	2200      	movs	r2, #0
    10e4:	5e9a      	ldrsh	r2, [r3, r2]
    10e6:	4b6c      	ldr	r3, [pc, #432]	; (1298 <bme280_calc_hum+0x1e4>)
    10e8:	0010      	movs	r0, r2
    10ea:	4798      	blx	r3
    10ec:	4c6e      	ldr	r4, [pc, #440]	; (12a8 <bme280_calc_hum+0x1f4>)
    10ee:	2200      	movs	r2, #0
    10f0:	4b6e      	ldr	r3, [pc, #440]	; (12ac <bme280_calc_hum+0x1f8>)
    10f2:	47a0      	blx	r4
    10f4:	0003      	movs	r3, r0
    10f6:	000c      	movs	r4, r1
    10f8:	60bb      	str	r3, [r7, #8]
    10fa:	60fc      	str	r4, [r7, #12]
    10fc:	4b6c      	ldr	r3, [pc, #432]	; (12b0 <bme280_calc_hum+0x1fc>)
    10fe:	2100      	movs	r1, #0
    1100:	5e5a      	ldrsh	r2, [r3, r1]
    1102:	4b65      	ldr	r3, [pc, #404]	; (1298 <bme280_calc_hum+0x1e4>)
    1104:	0010      	movs	r0, r2
    1106:	4798      	blx	r3
    1108:	4c6a      	ldr	r4, [pc, #424]	; (12b4 <bme280_calc_hum+0x200>)
    110a:	2200      	movs	r2, #0
    110c:	4b6a      	ldr	r3, [pc, #424]	; (12b8 <bme280_calc_hum+0x204>)
    110e:	47a0      	blx	r4
    1110:	0003      	movs	r3, r0
    1112:	000c      	movs	r4, r1
    1114:	0018      	movs	r0, r3
    1116:	0021      	movs	r1, r4
    1118:	4c63      	ldr	r4, [pc, #396]	; (12a8 <bme280_calc_hum+0x1f4>)
    111a:	69ba      	ldr	r2, [r7, #24]
    111c:	69fb      	ldr	r3, [r7, #28]
    111e:	47a0      	blx	r4
    1120:	0003      	movs	r3, r0
    1122:	000c      	movs	r4, r1
    1124:	001a      	movs	r2, r3
    1126:	0023      	movs	r3, r4
    1128:	4c64      	ldr	r4, [pc, #400]	; (12bc <bme280_calc_hum+0x208>)
    112a:	68b8      	ldr	r0, [r7, #8]
    112c:	68f9      	ldr	r1, [r7, #12]
    112e:	47a0      	blx	r4
    1130:	0003      	movs	r3, r0
    1132:	000c      	movs	r4, r1
    1134:	001a      	movs	r2, r3
    1136:	0023      	movs	r3, r4
    1138:	4c58      	ldr	r4, [pc, #352]	; (129c <bme280_calc_hum+0x1e8>)
    113a:	0028      	movs	r0, r5
    113c:	0031      	movs	r1, r6
    113e:	47a0      	blx	r4
    1140:	0003      	movs	r3, r0
    1142:	000c      	movs	r4, r1
    1144:	001d      	movs	r5, r3
    1146:	0026      	movs	r6, r4
    1148:	4b5d      	ldr	r3, [pc, #372]	; (12c0 <bme280_calc_hum+0x20c>)
    114a:	2200      	movs	r2, #0
    114c:	5e9a      	ldrsh	r2, [r3, r2]
    114e:	4b52      	ldr	r3, [pc, #328]	; (1298 <bme280_calc_hum+0x1e4>)
    1150:	0010      	movs	r0, r2
    1152:	4798      	blx	r3
    1154:	4c57      	ldr	r4, [pc, #348]	; (12b4 <bme280_calc_hum+0x200>)
    1156:	2200      	movs	r2, #0
    1158:	4b5a      	ldr	r3, [pc, #360]	; (12c4 <bme280_calc_hum+0x210>)
    115a:	47a0      	blx	r4
    115c:	0003      	movs	r3, r0
    115e:	000c      	movs	r4, r1
    1160:	60bb      	str	r3, [r7, #8]
    1162:	60fc      	str	r4, [r7, #12]
    1164:	4b58      	ldr	r3, [pc, #352]	; (12c8 <bme280_calc_hum+0x214>)
    1166:	2200      	movs	r2, #0
    1168:	569a      	ldrsb	r2, [r3, r2]
    116a:	4b4b      	ldr	r3, [pc, #300]	; (1298 <bme280_calc_hum+0x1e4>)
    116c:	0010      	movs	r0, r2
    116e:	4798      	blx	r3
    1170:	4c50      	ldr	r4, [pc, #320]	; (12b4 <bme280_calc_hum+0x200>)
    1172:	2200      	movs	r2, #0
    1174:	4b55      	ldr	r3, [pc, #340]	; (12cc <bme280_calc_hum+0x218>)
    1176:	47a0      	blx	r4
    1178:	0003      	movs	r3, r0
    117a:	000c      	movs	r4, r1
    117c:	0018      	movs	r0, r3
    117e:	0021      	movs	r1, r4
    1180:	4c49      	ldr	r4, [pc, #292]	; (12a8 <bme280_calc_hum+0x1f4>)
    1182:	69ba      	ldr	r2, [r7, #24]
    1184:	69fb      	ldr	r3, [r7, #28]
    1186:	47a0      	blx	r4
    1188:	0003      	movs	r3, r0
    118a:	000c      	movs	r4, r1
    118c:	603b      	str	r3, [r7, #0]
    118e:	607c      	str	r4, [r7, #4]
    1190:	4b4f      	ldr	r3, [pc, #316]	; (12d0 <bme280_calc_hum+0x21c>)
    1192:	781a      	ldrb	r2, [r3, #0]
    1194:	4b4f      	ldr	r3, [pc, #316]	; (12d4 <bme280_calc_hum+0x220>)
    1196:	0010      	movs	r0, r2
    1198:	4798      	blx	r3
    119a:	4c46      	ldr	r4, [pc, #280]	; (12b4 <bme280_calc_hum+0x200>)
    119c:	2200      	movs	r2, #0
    119e:	4b4b      	ldr	r3, [pc, #300]	; (12cc <bme280_calc_hum+0x218>)
    11a0:	47a0      	blx	r4
    11a2:	0003      	movs	r3, r0
    11a4:	000c      	movs	r4, r1
    11a6:	0018      	movs	r0, r3
    11a8:	0021      	movs	r1, r4
    11aa:	4c3f      	ldr	r4, [pc, #252]	; (12a8 <bme280_calc_hum+0x1f4>)
    11ac:	69ba      	ldr	r2, [r7, #24]
    11ae:	69fb      	ldr	r3, [r7, #28]
    11b0:	47a0      	blx	r4
    11b2:	0003      	movs	r3, r0
    11b4:	000c      	movs	r4, r1
    11b6:	0018      	movs	r0, r3
    11b8:	0021      	movs	r1, r4
    11ba:	4c40      	ldr	r4, [pc, #256]	; (12bc <bme280_calc_hum+0x208>)
    11bc:	2200      	movs	r2, #0
    11be:	4b46      	ldr	r3, [pc, #280]	; (12d8 <bme280_calc_hum+0x224>)
    11c0:	47a0      	blx	r4
    11c2:	0003      	movs	r3, r0
    11c4:	000c      	movs	r4, r1
    11c6:	001a      	movs	r2, r3
    11c8:	0023      	movs	r3, r4
    11ca:	4c37      	ldr	r4, [pc, #220]	; (12a8 <bme280_calc_hum+0x1f4>)
    11cc:	6838      	ldr	r0, [r7, #0]
    11ce:	6879      	ldr	r1, [r7, #4]
    11d0:	47a0      	blx	r4
    11d2:	0003      	movs	r3, r0
    11d4:	000c      	movs	r4, r1
    11d6:	0018      	movs	r0, r3
    11d8:	0021      	movs	r1, r4
    11da:	4c38      	ldr	r4, [pc, #224]	; (12bc <bme280_calc_hum+0x208>)
    11dc:	2200      	movs	r2, #0
    11de:	4b3e      	ldr	r3, [pc, #248]	; (12d8 <bme280_calc_hum+0x224>)
    11e0:	47a0      	blx	r4
    11e2:	0003      	movs	r3, r0
    11e4:	000c      	movs	r4, r1
    11e6:	001a      	movs	r2, r3
    11e8:	0023      	movs	r3, r4
    11ea:	4c2f      	ldr	r4, [pc, #188]	; (12a8 <bme280_calc_hum+0x1f4>)
    11ec:	68b8      	ldr	r0, [r7, #8]
    11ee:	68f9      	ldr	r1, [r7, #12]
    11f0:	47a0      	blx	r4
    11f2:	0003      	movs	r3, r0
    11f4:	000c      	movs	r4, r1
    11f6:	001a      	movs	r2, r3
    11f8:	0023      	movs	r3, r4
    11fa:	4c2b      	ldr	r4, [pc, #172]	; (12a8 <bme280_calc_hum+0x1f4>)
    11fc:	0028      	movs	r0, r5
    11fe:	0031      	movs	r1, r6
    1200:	47a0      	blx	r4
    1202:	0003      	movs	r3, r0
    1204:	000c      	movs	r4, r1
    1206:	61bb      	str	r3, [r7, #24]
    1208:	61fc      	str	r4, [r7, #28]
	var_H = var_H * (1.0 - ((double)H1) * var_H / 524288.0);
    120a:	4b34      	ldr	r3, [pc, #208]	; (12dc <bme280_calc_hum+0x228>)
    120c:	781a      	ldrb	r2, [r3, #0]
    120e:	4b31      	ldr	r3, [pc, #196]	; (12d4 <bme280_calc_hum+0x220>)
    1210:	0010      	movs	r0, r2
    1212:	4798      	blx	r3
    1214:	4c24      	ldr	r4, [pc, #144]	; (12a8 <bme280_calc_hum+0x1f4>)
    1216:	69ba      	ldr	r2, [r7, #24]
    1218:	69fb      	ldr	r3, [r7, #28]
    121a:	47a0      	blx	r4
    121c:	0003      	movs	r3, r0
    121e:	000c      	movs	r4, r1
    1220:	0018      	movs	r0, r3
    1222:	0021      	movs	r1, r4
    1224:	4c23      	ldr	r4, [pc, #140]	; (12b4 <bme280_calc_hum+0x200>)
    1226:	2200      	movs	r2, #0
    1228:	4b2d      	ldr	r3, [pc, #180]	; (12e0 <bme280_calc_hum+0x22c>)
    122a:	47a0      	blx	r4
    122c:	0003      	movs	r3, r0
    122e:	000c      	movs	r4, r1
    1230:	001a      	movs	r2, r3
    1232:	0023      	movs	r3, r4
    1234:	4c19      	ldr	r4, [pc, #100]	; (129c <bme280_calc_hum+0x1e8>)
    1236:	2000      	movs	r0, #0
    1238:	4927      	ldr	r1, [pc, #156]	; (12d8 <bme280_calc_hum+0x224>)
    123a:	47a0      	blx	r4
    123c:	0003      	movs	r3, r0
    123e:	000c      	movs	r4, r1
    1240:	001a      	movs	r2, r3
    1242:	0023      	movs	r3, r4
    1244:	4c18      	ldr	r4, [pc, #96]	; (12a8 <bme280_calc_hum+0x1f4>)
    1246:	69b8      	ldr	r0, [r7, #24]
    1248:	69f9      	ldr	r1, [r7, #28]
    124a:	47a0      	blx	r4
    124c:	0003      	movs	r3, r0
    124e:	000c      	movs	r4, r1
    1250:	61bb      	str	r3, [r7, #24]
    1252:	61fc      	str	r4, [r7, #28]
	if (var_H > 100.0)
    1254:	4c23      	ldr	r4, [pc, #140]	; (12e4 <bme280_calc_hum+0x230>)
    1256:	2200      	movs	r2, #0
    1258:	4b23      	ldr	r3, [pc, #140]	; (12e8 <bme280_calc_hum+0x234>)
    125a:	69b8      	ldr	r0, [r7, #24]
    125c:	69f9      	ldr	r1, [r7, #28]
    125e:	47a0      	blx	r4
    1260:	1e03      	subs	r3, r0, #0
    1262:	d004      	beq.n	126e <bme280_calc_hum+0x1ba>
		var_H = 100.0;
    1264:	2300      	movs	r3, #0
    1266:	4c20      	ldr	r4, [pc, #128]	; (12e8 <bme280_calc_hum+0x234>)
    1268:	61bb      	str	r3, [r7, #24]
    126a:	61fc      	str	r4, [r7, #28]
    126c:	e00b      	b.n	1286 <bme280_calc_hum+0x1d2>
	else if (var_H < 0.0)
    126e:	4c1f      	ldr	r4, [pc, #124]	; (12ec <bme280_calc_hum+0x238>)
    1270:	2200      	movs	r2, #0
    1272:	2300      	movs	r3, #0
    1274:	69b8      	ldr	r0, [r7, #24]
    1276:	69f9      	ldr	r1, [r7, #28]
    1278:	47a0      	blx	r4
    127a:	1e03      	subs	r3, r0, #0
    127c:	d003      	beq.n	1286 <bme280_calc_hum+0x1d2>
		var_H = 0.0;
    127e:	2300      	movs	r3, #0
    1280:	2400      	movs	r4, #0
    1282:	61bb      	str	r3, [r7, #24]
    1284:	61fc      	str	r4, [r7, #28]
	return var_H;
    1286:	69bb      	ldr	r3, [r7, #24]
    1288:	69fc      	ldr	r4, [r7, #28]
    128a:	0018      	movs	r0, r3
    128c:	0021      	movs	r1, r4
    128e:	46bd      	mov	sp, r7
    1290:	b009      	add	sp, #36	; 0x24
    1292:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1294:	200000f8 	.word	0x200000f8
    1298:	00005079 	.word	0x00005079
    129c:	000049e5 	.word	0x000049e5
    12a0:	40f2c000 	.word	0x40f2c000
    12a4:	20000096 	.word	0x20000096
    12a8:	000044e5 	.word	0x000044e5
    12ac:	40500000 	.word	0x40500000
    12b0:	200000ce 	.word	0x200000ce
    12b4:	00003c7d 	.word	0x00003c7d
    12b8:	40d00000 	.word	0x40d00000
    12bc:	0000365d 	.word	0x0000365d
    12c0:	200000f4 	.word	0x200000f4
    12c4:	40f00000 	.word	0x40f00000
    12c8:	200000ca 	.word	0x200000ca
    12cc:	41900000 	.word	0x41900000
    12d0:	200000d4 	.word	0x200000d4
    12d4:	000050fd 	.word	0x000050fd
    12d8:	3ff00000 	.word	0x3ff00000
    12dc:	200000f6 	.word	0x200000f6
    12e0:	41200000 	.word	0x41200000
    12e4:	00003635 	.word	0x00003635
    12e8:	40590000 	.word	0x40590000
    12ec:	0000360d 	.word	0x0000360d

000012f0 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    12f0:	b580      	push	{r7, lr}
    12f2:	b084      	sub	sp, #16
    12f4:	af00      	add	r7, sp, #0
    12f6:	0002      	movs	r2, r0
    12f8:	1dfb      	adds	r3, r7, #7
    12fa:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    12fc:	230f      	movs	r3, #15
    12fe:	18fb      	adds	r3, r7, r3
    1300:	1dfa      	adds	r2, r7, #7
    1302:	7812      	ldrb	r2, [r2, #0]
    1304:	09d2      	lsrs	r2, r2, #7
    1306:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    1308:	230e      	movs	r3, #14
    130a:	18fb      	adds	r3, r7, r3
    130c:	1dfa      	adds	r2, r7, #7
    130e:	7812      	ldrb	r2, [r2, #0]
    1310:	0952      	lsrs	r2, r2, #5
    1312:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    1314:	4b0d      	ldr	r3, [pc, #52]	; (134c <system_pinmux_get_group_from_gpio_pin+0x5c>)
    1316:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    1318:	230f      	movs	r3, #15
    131a:	18fb      	adds	r3, r7, r3
    131c:	781b      	ldrb	r3, [r3, #0]
    131e:	2b00      	cmp	r3, #0
    1320:	d10f      	bne.n	1342 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    1322:	230f      	movs	r3, #15
    1324:	18fb      	adds	r3, r7, r3
    1326:	781b      	ldrb	r3, [r3, #0]
    1328:	009b      	lsls	r3, r3, #2
    132a:	2210      	movs	r2, #16
    132c:	4694      	mov	ip, r2
    132e:	44bc      	add	ip, r7
    1330:	4463      	add	r3, ip
    1332:	3b08      	subs	r3, #8
    1334:	681a      	ldr	r2, [r3, #0]
    1336:	230e      	movs	r3, #14
    1338:	18fb      	adds	r3, r7, r3
    133a:	781b      	ldrb	r3, [r3, #0]
    133c:	01db      	lsls	r3, r3, #7
    133e:	18d3      	adds	r3, r2, r3
    1340:	e000      	b.n	1344 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    1342:	2300      	movs	r3, #0
	}
}
    1344:	0018      	movs	r0, r3
    1346:	46bd      	mov	sp, r7
    1348:	b004      	add	sp, #16
    134a:	bd80      	pop	{r7, pc}
    134c:	41004400 	.word	0x41004400

00001350 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    1350:	b580      	push	{r7, lr}
    1352:	b082      	sub	sp, #8
    1354:	af00      	add	r7, sp, #0
    1356:	0002      	movs	r2, r0
    1358:	1dfb      	adds	r3, r7, #7
    135a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    135c:	1dfb      	adds	r3, r7, #7
    135e:	781b      	ldrb	r3, [r3, #0]
    1360:	0018      	movs	r0, r3
    1362:	4b03      	ldr	r3, [pc, #12]	; (1370 <port_get_group_from_gpio_pin+0x20>)
    1364:	4798      	blx	r3
    1366:	0003      	movs	r3, r0
}
    1368:	0018      	movs	r0, r3
    136a:	46bd      	mov	sp, r7
    136c:	b002      	add	sp, #8
    136e:	bd80      	pop	{r7, pc}
    1370:	000012f1 	.word	0x000012f1

00001374 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    1374:	b580      	push	{r7, lr}
    1376:	b082      	sub	sp, #8
    1378:	af00      	add	r7, sp, #0
    137a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    137c:	687b      	ldr	r3, [r7, #4]
    137e:	2200      	movs	r2, #0
    1380:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    1382:	687b      	ldr	r3, [r7, #4]
    1384:	2201      	movs	r2, #1
    1386:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    1388:	687b      	ldr	r3, [r7, #4]
    138a:	2200      	movs	r2, #0
    138c:	709a      	strb	r2, [r3, #2]
}
    138e:	46c0      	nop			; (mov r8, r8)
    1390:	46bd      	mov	sp, r7
    1392:	b002      	add	sp, #8
    1394:	bd80      	pop	{r7, pc}
	...

00001398 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    1398:	b580      	push	{r7, lr}
    139a:	b084      	sub	sp, #16
    139c:	af00      	add	r7, sp, #0
    139e:	0002      	movs	r2, r0
    13a0:	1dfb      	adds	r3, r7, #7
    13a2:	701a      	strb	r2, [r3, #0]
    13a4:	1dbb      	adds	r3, r7, #6
    13a6:	1c0a      	adds	r2, r1, #0
    13a8:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    13aa:	1dfb      	adds	r3, r7, #7
    13ac:	781b      	ldrb	r3, [r3, #0]
    13ae:	0018      	movs	r0, r3
    13b0:	4b0d      	ldr	r3, [pc, #52]	; (13e8 <port_pin_set_output_level+0x50>)
    13b2:	4798      	blx	r3
    13b4:	0003      	movs	r3, r0
    13b6:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    13b8:	1dfb      	adds	r3, r7, #7
    13ba:	781b      	ldrb	r3, [r3, #0]
    13bc:	221f      	movs	r2, #31
    13be:	4013      	ands	r3, r2
    13c0:	2201      	movs	r2, #1
    13c2:	409a      	lsls	r2, r3
    13c4:	0013      	movs	r3, r2
    13c6:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    13c8:	1dbb      	adds	r3, r7, #6
    13ca:	781b      	ldrb	r3, [r3, #0]
    13cc:	2b00      	cmp	r3, #0
    13ce:	d003      	beq.n	13d8 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    13d0:	68fb      	ldr	r3, [r7, #12]
    13d2:	68ba      	ldr	r2, [r7, #8]
    13d4:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    13d6:	e002      	b.n	13de <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    13d8:	68fb      	ldr	r3, [r7, #12]
    13da:	68ba      	ldr	r2, [r7, #8]
    13dc:	615a      	str	r2, [r3, #20]
}
    13de:	46c0      	nop			; (mov r8, r8)
    13e0:	46bd      	mov	sp, r7
    13e2:	b004      	add	sp, #16
    13e4:	bd80      	pop	{r7, pc}
    13e6:	46c0      	nop			; (mov r8, r8)
    13e8:	00001351 	.word	0x00001351

000013ec <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
    13ec:	b580      	push	{r7, lr}
    13ee:	b084      	sub	sp, #16
    13f0:	af00      	add	r7, sp, #0
    13f2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    13f4:	687b      	ldr	r3, [r7, #4]
    13f6:	681b      	ldr	r3, [r3, #0]
    13f8:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    13fa:	68fb      	ldr	r3, [r7, #12]
    13fc:	69db      	ldr	r3, [r3, #28]
    13fe:	1e5a      	subs	r2, r3, #1
    1400:	4193      	sbcs	r3, r2
    1402:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
    1404:	0018      	movs	r0, r3
    1406:	46bd      	mov	sp, r7
    1408:	b004      	add	sp, #16
    140a:	bd80      	pop	{r7, pc}

0000140c <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
    140c:	b580      	push	{r7, lr}
    140e:	b082      	sub	sp, #8
    1410:	af00      	add	r7, sp, #0
    1412:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    1414:	687b      	ldr	r3, [r7, #4]
    1416:	2201      	movs	r2, #1
    1418:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    141a:	687b      	ldr	r3, [r7, #4]
    141c:	2200      	movs	r2, #0
    141e:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    1420:	687b      	ldr	r3, [r7, #4]
    1422:	2200      	movs	r2, #0
    1424:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    1426:	687b      	ldr	r3, [r7, #4]
    1428:	22c0      	movs	r2, #192	; 0xc0
    142a:	0392      	lsls	r2, r2, #14
    142c:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    142e:	687b      	ldr	r3, [r7, #4]
    1430:	2200      	movs	r2, #0
    1432:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
    1434:	687b      	ldr	r3, [r7, #4]
    1436:	2200      	movs	r2, #0
    1438:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
    143a:	687b      	ldr	r3, [r7, #4]
    143c:	2201      	movs	r2, #1
    143e:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    1440:	687b      	ldr	r3, [r7, #4]
    1442:	2201      	movs	r2, #1
    1444:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    1446:	687b      	ldr	r3, [r7, #4]
    1448:	2200      	movs	r2, #0
    144a:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    144c:	687b      	ldr	r3, [r7, #4]
    144e:	2224      	movs	r2, #36	; 0x24
    1450:	2100      	movs	r1, #0
    1452:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    1454:	687b      	ldr	r3, [r7, #4]
    1456:	3318      	adds	r3, #24
    1458:	220c      	movs	r2, #12
    145a:	2100      	movs	r1, #0
    145c:	0018      	movs	r0, r3
    145e:	4b0a      	ldr	r3, [pc, #40]	; (1488 <spi_get_config_defaults+0x7c>)
    1460:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
    1462:	687b      	ldr	r3, [r7, #4]
    1464:	4a09      	ldr	r2, [pc, #36]	; (148c <spi_get_config_defaults+0x80>)
    1466:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
    1468:	687b      	ldr	r3, [r7, #4]
    146a:	2200      	movs	r2, #0
    146c:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
    146e:	687b      	ldr	r3, [r7, #4]
    1470:	2200      	movs	r2, #0
    1472:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
    1474:	687b      	ldr	r3, [r7, #4]
    1476:	2200      	movs	r2, #0
    1478:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
    147a:	687b      	ldr	r3, [r7, #4]
    147c:	2200      	movs	r2, #0
    147e:	635a      	str	r2, [r3, #52]	; 0x34

};
    1480:	46c0      	nop			; (mov r8, r8)
    1482:	46bd      	mov	sp, r7
    1484:	b002      	add	sp, #8
    1486:	bd80      	pop	{r7, pc}
    1488:	000051f1 	.word	0x000051f1
    148c:	000186a0 	.word	0x000186a0

00001490 <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
    1490:	b580      	push	{r7, lr}
    1492:	b082      	sub	sp, #8
    1494:	af00      	add	r7, sp, #0
    1496:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
    1498:	687b      	ldr	r3, [r7, #4]
    149a:	220a      	movs	r2, #10
    149c:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
    149e:	687b      	ldr	r3, [r7, #4]
    14a0:	2200      	movs	r2, #0
    14a2:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
    14a4:	687b      	ldr	r3, [r7, #4]
    14a6:	2200      	movs	r2, #0
    14a8:	709a      	strb	r2, [r3, #2]
}
    14aa:	46c0      	nop			; (mov r8, r8)
    14ac:	46bd      	mov	sp, r7
    14ae:	b002      	add	sp, #8
    14b0:	bd80      	pop	{r7, pc}
	...

000014b4 <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		const struct spi_slave_inst_config *const config)
{
    14b4:	b580      	push	{r7, lr}
    14b6:	b084      	sub	sp, #16
    14b8:	af00      	add	r7, sp, #0
    14ba:	6078      	str	r0, [r7, #4]
    14bc:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    14be:	683b      	ldr	r3, [r7, #0]
    14c0:	781a      	ldrb	r2, [r3, #0]
    14c2:	687b      	ldr	r3, [r7, #4]
    14c4:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
    14c6:	683b      	ldr	r3, [r7, #0]
    14c8:	785a      	ldrb	r2, [r3, #1]
    14ca:	687b      	ldr	r3, [r7, #4]
    14cc:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
    14ce:	683b      	ldr	r3, [r7, #0]
    14d0:	789a      	ldrb	r2, [r3, #2]
    14d2:	687b      	ldr	r3, [r7, #4]
    14d4:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    14d6:	230c      	movs	r3, #12
    14d8:	18fb      	adds	r3, r7, r3
    14da:	0018      	movs	r0, r3
    14dc:	4b0b      	ldr	r3, [pc, #44]	; (150c <spi_attach_slave+0x58>)
    14de:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    14e0:	230c      	movs	r3, #12
    14e2:	18fb      	adds	r3, r7, r3
    14e4:	2201      	movs	r2, #1
    14e6:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    14e8:	687b      	ldr	r3, [r7, #4]
    14ea:	781b      	ldrb	r3, [r3, #0]
    14ec:	220c      	movs	r2, #12
    14ee:	18ba      	adds	r2, r7, r2
    14f0:	0011      	movs	r1, r2
    14f2:	0018      	movs	r0, r3
    14f4:	4b06      	ldr	r3, [pc, #24]	; (1510 <spi_attach_slave+0x5c>)
    14f6:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    14f8:	687b      	ldr	r3, [r7, #4]
    14fa:	781b      	ldrb	r3, [r3, #0]
    14fc:	2101      	movs	r1, #1
    14fe:	0018      	movs	r0, r3
    1500:	4b04      	ldr	r3, [pc, #16]	; (1514 <spi_attach_slave+0x60>)
    1502:	4798      	blx	r3
}
    1504:	46c0      	nop			; (mov r8, r8)
    1506:	46bd      	mov	sp, r7
    1508:	b004      	add	sp, #16
    150a:	bd80      	pop	{r7, pc}
    150c:	00001375 	.word	0x00001375
    1510:	00002625 	.word	0x00002625
    1514:	00001399 	.word	0x00001399

00001518 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
    1518:	b580      	push	{r7, lr}
    151a:	b084      	sub	sp, #16
    151c:	af00      	add	r7, sp, #0
    151e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1520:	687b      	ldr	r3, [r7, #4]
    1522:	681b      	ldr	r3, [r3, #0]
    1524:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
    1526:	46c0      	nop			; (mov r8, r8)
    1528:	687b      	ldr	r3, [r7, #4]
    152a:	0018      	movs	r0, r3
    152c:	4b06      	ldr	r3, [pc, #24]	; (1548 <spi_enable+0x30>)
    152e:	4798      	blx	r3
    1530:	1e03      	subs	r3, r0, #0
    1532:	d1f9      	bne.n	1528 <spi_enable+0x10>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    1534:	68fb      	ldr	r3, [r7, #12]
    1536:	681b      	ldr	r3, [r3, #0]
    1538:	2202      	movs	r2, #2
    153a:	431a      	orrs	r2, r3
    153c:	68fb      	ldr	r3, [r7, #12]
    153e:	601a      	str	r2, [r3, #0]
}
    1540:	46c0      	nop			; (mov r8, r8)
    1542:	46bd      	mov	sp, r7
    1544:	b004      	add	sp, #16
    1546:	bd80      	pop	{r7, pc}
    1548:	000013ed 	.word	0x000013ed

0000154c <spi_master_init>:
 */ 

#include "spi_master.h"

void spi_master_init(void)
{
    154c:	b580      	push	{r7, lr}
    154e:	b090      	sub	sp, #64	; 0x40
    1550:	af00      	add	r7, sp, #0
	struct spi_config config_spi;
	struct spi_slave_inst_config bme280_slave_config;
	struct spi_slave_inst_config nrf24l01_slave_config;
	
	spi_slave_inst_get_config_defaults(&bme280_slave_config);
    1552:	1d3b      	adds	r3, r7, #4
    1554:	0018      	movs	r0, r3
    1556:	4b23      	ldr	r3, [pc, #140]	; (15e4 <spi_master_init+0x98>)
    1558:	4798      	blx	r3
	bme280_slave_config.ss_pin = BME280_CE;
    155a:	1d3b      	adds	r3, r7, #4
    155c:	220a      	movs	r2, #10
    155e:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&bme280_slave_instance, &bme280_slave_config);
    1560:	1d3a      	adds	r2, r7, #4
    1562:	4b21      	ldr	r3, [pc, #132]	; (15e8 <spi_master_init+0x9c>)
    1564:	0011      	movs	r1, r2
    1566:	0018      	movs	r0, r3
    1568:	4b20      	ldr	r3, [pc, #128]	; (15ec <spi_master_init+0xa0>)
    156a:	4798      	blx	r3
	
	spi_slave_inst_get_config_defaults(&nrf24l01_slave_config);
    156c:	003b      	movs	r3, r7
    156e:	0018      	movs	r0, r3
    1570:	4b1c      	ldr	r3, [pc, #112]	; (15e4 <spi_master_init+0x98>)
    1572:	4798      	blx	r3
	nrf24l01_slave_config.ss_pin = NRF24L01_CE;
    1574:	003b      	movs	r3, r7
    1576:	220c      	movs	r2, #12
    1578:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&nrf14l01_slave_instance, &nrf24l01_slave_config);
    157a:	003a      	movs	r2, r7
    157c:	4b1c      	ldr	r3, [pc, #112]	; (15f0 <spi_master_init+0xa4>)
    157e:	0011      	movs	r1, r2
    1580:	0018      	movs	r0, r3
    1582:	4b1a      	ldr	r3, [pc, #104]	; (15ec <spi_master_init+0xa0>)
    1584:	4798      	blx	r3
	
	
	/* Configure, initialize and enable SERCOM SPI module */
	spi_get_config_defaults(&config_spi);
    1586:	2308      	movs	r3, #8
    1588:	18fb      	adds	r3, r7, r3
    158a:	0018      	movs	r0, r3
    158c:	4b19      	ldr	r3, [pc, #100]	; (15f4 <spi_master_init+0xa8>)
    158e:	4798      	blx	r3
	config_spi.mux_setting = SPI_MUX_SETTING;
    1590:	2308      	movs	r3, #8
    1592:	18fb      	adds	r3, r7, r3
    1594:	22c0      	movs	r2, #192	; 0xc0
    1596:	0392      	lsls	r2, r2, #14
    1598:	60da      	str	r2, [r3, #12]
	/* Configure pad 0 for data in */
	config_spi.pinmux_pad0 = SPI_MOSI;
    159a:	2308      	movs	r3, #8
    159c:	18fb      	adds	r3, r7, r3
    159e:	4a16      	ldr	r2, [pc, #88]	; (15f8 <spi_master_init+0xac>)
    15a0:	629a      	str	r2, [r3, #40]	; 0x28
	/* Configure pad 1 as unused */
	config_spi.pinmux_pad1 = SPI_SCK;
    15a2:	2308      	movs	r3, #8
    15a4:	18fb      	adds	r3, r7, r3
    15a6:	4a15      	ldr	r2, [pc, #84]	; (15fc <spi_master_init+0xb0>)
    15a8:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Configure pad 2 for data out */
	config_spi.pinmux_pad2 = PINMUX_UNUSED;
    15aa:	2308      	movs	r3, #8
    15ac:	18fb      	adds	r3, r7, r3
    15ae:	2201      	movs	r2, #1
    15b0:	4252      	negs	r2, r2
    15b2:	631a      	str	r2, [r3, #48]	; 0x30
	/* Configure pad 3 for SCK */
	config_spi.pinmux_pad3 = SPI_MISO;
    15b4:	2308      	movs	r3, #8
    15b6:	18fb      	adds	r3, r7, r3
    15b8:	4a11      	ldr	r2, [pc, #68]	; (1600 <spi_master_init+0xb4>)
    15ba:	635a      	str	r2, [r3, #52]	; 0x34
	config_spi.receiver_enable = true;
    15bc:	2308      	movs	r3, #8
    15be:	18fb      	adds	r3, r7, r3
    15c0:	2201      	movs	r2, #1
    15c2:	749a      	strb	r2, [r3, #18]
	spi_init(&spi_master_instance, SPI_MODULE, &config_spi);
    15c4:	2308      	movs	r3, #8
    15c6:	18fa      	adds	r2, r7, r3
    15c8:	490e      	ldr	r1, [pc, #56]	; (1604 <spi_master_init+0xb8>)
    15ca:	4b0f      	ldr	r3, [pc, #60]	; (1608 <spi_master_init+0xbc>)
    15cc:	0018      	movs	r0, r3
    15ce:	4b0f      	ldr	r3, [pc, #60]	; (160c <spi_master_init+0xc0>)
    15d0:	4798      	blx	r3
	spi_enable(&spi_master_instance);
    15d2:	4b0d      	ldr	r3, [pc, #52]	; (1608 <spi_master_init+0xbc>)
    15d4:	0018      	movs	r0, r3
    15d6:	4b0e      	ldr	r3, [pc, #56]	; (1610 <spi_master_init+0xc4>)
    15d8:	4798      	blx	r3
}
    15da:	46c0      	nop			; (mov r8, r8)
    15dc:	46bd      	mov	sp, r7
    15de:	b010      	add	sp, #64	; 0x40
    15e0:	bd80      	pop	{r7, pc}
    15e2:	46c0      	nop			; (mov r8, r8)
    15e4:	00001491 	.word	0x00001491
    15e8:	200000dc 	.word	0x200000dc
    15ec:	000014b5 	.word	0x000014b5
    15f0:	200000f0 	.word	0x200000f0
    15f4:	0000140d 	.word	0x0000140d
    15f8:	00080002 	.word	0x00080002
    15fc:	00090002 	.word	0x00090002
    1600:	000b0002 	.word	0x000b0002
    1604:	42000800 	.word	0x42000800
    1608:	200000e0 	.word	0x200000e0
    160c:	00001e0d 	.word	0x00001e0d
    1610:	00001519 	.word	0x00001519

00001614 <system_pinmux_get_config_defaults>:
{
    1614:	b580      	push	{r7, lr}
    1616:	b082      	sub	sp, #8
    1618:	af00      	add	r7, sp, #0
    161a:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    161c:	687b      	ldr	r3, [r7, #4]
    161e:	2280      	movs	r2, #128	; 0x80
    1620:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1622:	687b      	ldr	r3, [r7, #4]
    1624:	2200      	movs	r2, #0
    1626:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1628:	687b      	ldr	r3, [r7, #4]
    162a:	2201      	movs	r2, #1
    162c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    162e:	687b      	ldr	r3, [r7, #4]
    1630:	2200      	movs	r2, #0
    1632:	70da      	strb	r2, [r3, #3]
}
    1634:	46c0      	nop			; (mov r8, r8)
    1636:	46bd      	mov	sp, r7
    1638:	b002      	add	sp, #8
    163a:	bd80      	pop	{r7, pc}

0000163c <system_pinmux_get_group_from_gpio_pin>:
{
    163c:	b580      	push	{r7, lr}
    163e:	b084      	sub	sp, #16
    1640:	af00      	add	r7, sp, #0
    1642:	0002      	movs	r2, r0
    1644:	1dfb      	adds	r3, r7, #7
    1646:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    1648:	230f      	movs	r3, #15
    164a:	18fb      	adds	r3, r7, r3
    164c:	1dfa      	adds	r2, r7, #7
    164e:	7812      	ldrb	r2, [r2, #0]
    1650:	09d2      	lsrs	r2, r2, #7
    1652:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    1654:	230e      	movs	r3, #14
    1656:	18fb      	adds	r3, r7, r3
    1658:	1dfa      	adds	r2, r7, #7
    165a:	7812      	ldrb	r2, [r2, #0]
    165c:	0952      	lsrs	r2, r2, #5
    165e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    1660:	4b0d      	ldr	r3, [pc, #52]	; (1698 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    1662:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    1664:	230f      	movs	r3, #15
    1666:	18fb      	adds	r3, r7, r3
    1668:	781b      	ldrb	r3, [r3, #0]
    166a:	2b00      	cmp	r3, #0
    166c:	d10f      	bne.n	168e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    166e:	230f      	movs	r3, #15
    1670:	18fb      	adds	r3, r7, r3
    1672:	781b      	ldrb	r3, [r3, #0]
    1674:	009b      	lsls	r3, r3, #2
    1676:	2210      	movs	r2, #16
    1678:	4694      	mov	ip, r2
    167a:	44bc      	add	ip, r7
    167c:	4463      	add	r3, ip
    167e:	3b08      	subs	r3, #8
    1680:	681a      	ldr	r2, [r3, #0]
    1682:	230e      	movs	r3, #14
    1684:	18fb      	adds	r3, r7, r3
    1686:	781b      	ldrb	r3, [r3, #0]
    1688:	01db      	lsls	r3, r3, #7
    168a:	18d3      	adds	r3, r2, r3
    168c:	e000      	b.n	1690 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    168e:	2300      	movs	r3, #0
}
    1690:	0018      	movs	r0, r3
    1692:	46bd      	mov	sp, r7
    1694:	b004      	add	sp, #16
    1696:	bd80      	pop	{r7, pc}
    1698:	41004400 	.word	0x41004400

0000169c <system_pinmux_pin_get_mux_position>:
 *
 * \return Currently selected peripheral index on the specified pin.
 */
static inline uint8_t system_pinmux_pin_get_mux_position(
		const uint8_t gpio_pin)
{
    169c:	b580      	push	{r7, lr}
    169e:	b086      	sub	sp, #24
    16a0:	af00      	add	r7, sp, #0
    16a2:	0002      	movs	r2, r0
    16a4:	1dfb      	adds	r3, r7, #7
    16a6:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    16a8:	1dfb      	adds	r3, r7, #7
    16aa:	781b      	ldrb	r3, [r3, #0]
    16ac:	0018      	movs	r0, r3
    16ae:	4b19      	ldr	r3, [pc, #100]	; (1714 <system_pinmux_pin_get_mux_position+0x78>)
    16b0:	4798      	blx	r3
    16b2:	0003      	movs	r3, r0
    16b4:	617b      	str	r3, [r7, #20]
	uint32_t pin_index = (gpio_pin % 32);
    16b6:	1dfb      	adds	r3, r7, #7
    16b8:	781b      	ldrb	r3, [r3, #0]
    16ba:	221f      	movs	r2, #31
    16bc:	4013      	ands	r3, r2
    16be:	613b      	str	r3, [r7, #16]

	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    16c0:	697a      	ldr	r2, [r7, #20]
    16c2:	2140      	movs	r1, #64	; 0x40
    16c4:	693b      	ldr	r3, [r7, #16]
    16c6:	18d3      	adds	r3, r2, r3
    16c8:	185b      	adds	r3, r3, r1
    16ca:	781b      	ldrb	r3, [r3, #0]
    16cc:	b2db      	uxtb	r3, r3
    16ce:	001a      	movs	r2, r3
    16d0:	2301      	movs	r3, #1
    16d2:	4013      	ands	r3, r2
    16d4:	d101      	bne.n	16da <system_pinmux_pin_get_mux_position+0x3e>
		return SYSTEM_PINMUX_GPIO;
    16d6:	2380      	movs	r3, #128	; 0x80
    16d8:	e018      	b.n	170c <system_pinmux_pin_get_mux_position+0x70>
	}

	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
    16da:	693b      	ldr	r3, [r7, #16]
    16dc:	085b      	lsrs	r3, r3, #1
    16de:	697a      	ldr	r2, [r7, #20]
    16e0:	2130      	movs	r1, #48	; 0x30
    16e2:	18d3      	adds	r3, r2, r3
    16e4:	185b      	adds	r3, r3, r1
    16e6:	781b      	ldrb	r3, [r3, #0]
    16e8:	b2db      	uxtb	r3, r3
    16ea:	60fb      	str	r3, [r7, #12]

	if (pin_index & 1) {
    16ec:	693b      	ldr	r3, [r7, #16]
    16ee:	2201      	movs	r2, #1
    16f0:	4013      	ands	r3, r2
    16f2:	d006      	beq.n	1702 <system_pinmux_pin_get_mux_position+0x66>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
    16f4:	68fb      	ldr	r3, [r7, #12]
    16f6:	091b      	lsrs	r3, r3, #4
    16f8:	b2db      	uxtb	r3, r3
    16fa:	220f      	movs	r2, #15
    16fc:	4013      	ands	r3, r2
    16fe:	b2db      	uxtb	r3, r3
    1700:	e004      	b.n	170c <system_pinmux_pin_get_mux_position+0x70>
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
    1702:	68fb      	ldr	r3, [r7, #12]
    1704:	b2db      	uxtb	r3, r3
    1706:	220f      	movs	r2, #15
    1708:	4013      	ands	r3, r2
    170a:	b2db      	uxtb	r3, r3
	}
}
    170c:	0018      	movs	r0, r3
    170e:	46bd      	mov	sp, r7
    1710:	b006      	add	sp, #24
    1712:	bd80      	pop	{r7, pc}
    1714:	0000163d 	.word	0x0000163d

00001718 <port_get_group_from_gpio_pin>:
{
    1718:	b580      	push	{r7, lr}
    171a:	b082      	sub	sp, #8
    171c:	af00      	add	r7, sp, #0
    171e:	0002      	movs	r2, r0
    1720:	1dfb      	adds	r3, r7, #7
    1722:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    1724:	1dfb      	adds	r3, r7, #7
    1726:	781b      	ldrb	r3, [r3, #0]
    1728:	0018      	movs	r0, r3
    172a:	4b03      	ldr	r3, [pc, #12]	; (1738 <port_get_group_from_gpio_pin+0x20>)
    172c:	4798      	blx	r3
    172e:	0003      	movs	r3, r0
}
    1730:	0018      	movs	r0, r3
    1732:	46bd      	mov	sp, r7
    1734:	b002      	add	sp, #8
    1736:	bd80      	pop	{r7, pc}
    1738:	0000163d 	.word	0x0000163d

0000173c <port_pin_set_output_level>:
{
    173c:	b580      	push	{r7, lr}
    173e:	b084      	sub	sp, #16
    1740:	af00      	add	r7, sp, #0
    1742:	0002      	movs	r2, r0
    1744:	1dfb      	adds	r3, r7, #7
    1746:	701a      	strb	r2, [r3, #0]
    1748:	1dbb      	adds	r3, r7, #6
    174a:	1c0a      	adds	r2, r1, #0
    174c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    174e:	1dfb      	adds	r3, r7, #7
    1750:	781b      	ldrb	r3, [r3, #0]
    1752:	0018      	movs	r0, r3
    1754:	4b0d      	ldr	r3, [pc, #52]	; (178c <port_pin_set_output_level+0x50>)
    1756:	4798      	blx	r3
    1758:	0003      	movs	r3, r0
    175a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    175c:	1dfb      	adds	r3, r7, #7
    175e:	781b      	ldrb	r3, [r3, #0]
    1760:	221f      	movs	r2, #31
    1762:	4013      	ands	r3, r2
    1764:	2201      	movs	r2, #1
    1766:	409a      	lsls	r2, r3
    1768:	0013      	movs	r3, r2
    176a:	60bb      	str	r3, [r7, #8]
	if (level) {
    176c:	1dbb      	adds	r3, r7, #6
    176e:	781b      	ldrb	r3, [r3, #0]
    1770:	2b00      	cmp	r3, #0
    1772:	d003      	beq.n	177c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    1774:	68fb      	ldr	r3, [r7, #12]
    1776:	68ba      	ldr	r2, [r7, #8]
    1778:	619a      	str	r2, [r3, #24]
}
    177a:	e002      	b.n	1782 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    177c:	68fb      	ldr	r3, [r7, #12]
    177e:	68ba      	ldr	r2, [r7, #8]
    1780:	615a      	str	r2, [r3, #20]
}
    1782:	46c0      	nop			; (mov r8, r8)
    1784:	46bd      	mov	sp, r7
    1786:	b004      	add	sp, #16
    1788:	bd80      	pop	{r7, pc}
    178a:	46c0      	nop			; (mov r8, r8)
    178c:	00001719 	.word	0x00001719

00001790 <system_gclk_chan_get_config_defaults>:
{
    1790:	b580      	push	{r7, lr}
    1792:	b082      	sub	sp, #8
    1794:	af00      	add	r7, sp, #0
    1796:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    1798:	687b      	ldr	r3, [r7, #4]
    179a:	2200      	movs	r2, #0
    179c:	701a      	strb	r2, [r3, #0]
}
    179e:	46c0      	nop			; (mov r8, r8)
    17a0:	46bd      	mov	sp, r7
    17a2:	b002      	add	sp, #8
    17a4:	bd80      	pop	{r7, pc}
	...

000017a8 <system_apb_clock_set_mask>:
{
    17a8:	b580      	push	{r7, lr}
    17aa:	b082      	sub	sp, #8
    17ac:	af00      	add	r7, sp, #0
    17ae:	0002      	movs	r2, r0
    17b0:	6039      	str	r1, [r7, #0]
    17b2:	1dfb      	adds	r3, r7, #7
    17b4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    17b6:	1dfb      	adds	r3, r7, #7
    17b8:	781b      	ldrb	r3, [r3, #0]
    17ba:	2b01      	cmp	r3, #1
    17bc:	d00a      	beq.n	17d4 <system_apb_clock_set_mask+0x2c>
    17be:	2b02      	cmp	r3, #2
    17c0:	d00f      	beq.n	17e2 <system_apb_clock_set_mask+0x3a>
    17c2:	2b00      	cmp	r3, #0
    17c4:	d114      	bne.n	17f0 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    17c6:	4b0e      	ldr	r3, [pc, #56]	; (1800 <system_apb_clock_set_mask+0x58>)
    17c8:	4a0d      	ldr	r2, [pc, #52]	; (1800 <system_apb_clock_set_mask+0x58>)
    17ca:	6991      	ldr	r1, [r2, #24]
    17cc:	683a      	ldr	r2, [r7, #0]
    17ce:	430a      	orrs	r2, r1
    17d0:	619a      	str	r2, [r3, #24]
			break;
    17d2:	e00f      	b.n	17f4 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    17d4:	4b0a      	ldr	r3, [pc, #40]	; (1800 <system_apb_clock_set_mask+0x58>)
    17d6:	4a0a      	ldr	r2, [pc, #40]	; (1800 <system_apb_clock_set_mask+0x58>)
    17d8:	69d1      	ldr	r1, [r2, #28]
    17da:	683a      	ldr	r2, [r7, #0]
    17dc:	430a      	orrs	r2, r1
    17de:	61da      	str	r2, [r3, #28]
			break;
    17e0:	e008      	b.n	17f4 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    17e2:	4b07      	ldr	r3, [pc, #28]	; (1800 <system_apb_clock_set_mask+0x58>)
    17e4:	4a06      	ldr	r2, [pc, #24]	; (1800 <system_apb_clock_set_mask+0x58>)
    17e6:	6a11      	ldr	r1, [r2, #32]
    17e8:	683a      	ldr	r2, [r7, #0]
    17ea:	430a      	orrs	r2, r1
    17ec:	621a      	str	r2, [r3, #32]
			break;
    17ee:	e001      	b.n	17f4 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    17f0:	2317      	movs	r3, #23
    17f2:	e000      	b.n	17f6 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    17f4:	2300      	movs	r3, #0
}
    17f6:	0018      	movs	r0, r3
    17f8:	46bd      	mov	sp, r7
    17fa:	b002      	add	sp, #8
    17fc:	bd80      	pop	{r7, pc}
    17fe:	46c0      	nop			; (mov r8, r8)
    1800:	40000400 	.word	0x40000400

00001804 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    1804:	b580      	push	{r7, lr}
    1806:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    1808:	4b05      	ldr	r3, [pc, #20]	; (1820 <system_is_debugger_present+0x1c>)
    180a:	789b      	ldrb	r3, [r3, #2]
    180c:	b2db      	uxtb	r3, r3
    180e:	001a      	movs	r2, r3
    1810:	2302      	movs	r3, #2
    1812:	4013      	ands	r3, r2
    1814:	1e5a      	subs	r2, r3, #1
    1816:	4193      	sbcs	r3, r2
    1818:	b2db      	uxtb	r3, r3
}
    181a:	0018      	movs	r0, r3
    181c:	46bd      	mov	sp, r7
    181e:	bd80      	pop	{r7, pc}
    1820:	41002000 	.word	0x41002000

00001824 <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
    1824:	b580      	push	{r7, lr}
    1826:	b084      	sub	sp, #16
    1828:	af00      	add	r7, sp, #0
    182a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    182c:	687b      	ldr	r3, [r7, #4]
    182e:	681b      	ldr	r3, [r3, #0]
    1830:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    1832:	68fb      	ldr	r3, [r7, #12]
    1834:	7e1b      	ldrb	r3, [r3, #24]
    1836:	b2db      	uxtb	r3, r3
    1838:	001a      	movs	r2, r3
    183a:	2302      	movs	r3, #2
    183c:	4013      	ands	r3, r2
    183e:	1e5a      	subs	r2, r3, #1
    1840:	4193      	sbcs	r3, r2
    1842:	b2db      	uxtb	r3, r3
}
    1844:	0018      	movs	r0, r3
    1846:	46bd      	mov	sp, r7
    1848:	b004      	add	sp, #16
    184a:	bd80      	pop	{r7, pc}

0000184c <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
    184c:	b580      	push	{r7, lr}
    184e:	b084      	sub	sp, #16
    1850:	af00      	add	r7, sp, #0
    1852:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1854:	687b      	ldr	r3, [r7, #4]
    1856:	681b      	ldr	r3, [r3, #0]
    1858:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    185a:	68fb      	ldr	r3, [r7, #12]
    185c:	7e1b      	ldrb	r3, [r3, #24]
    185e:	b2db      	uxtb	r3, r3
    1860:	001a      	movs	r2, r3
    1862:	2301      	movs	r3, #1
    1864:	4013      	ands	r3, r2
    1866:	1e5a      	subs	r2, r3, #1
    1868:	4193      	sbcs	r3, r2
    186a:	b2db      	uxtb	r3, r3
}
    186c:	0018      	movs	r0, r3
    186e:	46bd      	mov	sp, r7
    1870:	b004      	add	sp, #16
    1872:	bd80      	pop	{r7, pc}

00001874 <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
    1874:	b580      	push	{r7, lr}
    1876:	b084      	sub	sp, #16
    1878:	af00      	add	r7, sp, #0
    187a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    187c:	687b      	ldr	r3, [r7, #4]
    187e:	681b      	ldr	r3, [r3, #0]
    1880:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1882:	68fb      	ldr	r3, [r7, #12]
    1884:	7e1b      	ldrb	r3, [r3, #24]
    1886:	b2db      	uxtb	r3, r3
    1888:	001a      	movs	r2, r3
    188a:	2304      	movs	r3, #4
    188c:	4013      	ands	r3, r2
    188e:	1e5a      	subs	r2, r3, #1
    1890:	4193      	sbcs	r3, r2
    1892:	b2db      	uxtb	r3, r3
}
    1894:	0018      	movs	r0, r3
    1896:	46bd      	mov	sp, r7
    1898:	b004      	add	sp, #16
    189a:	bd80      	pop	{r7, pc}

0000189c <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
    189c:	b580      	push	{r7, lr}
    189e:	b084      	sub	sp, #16
    18a0:	af00      	add	r7, sp, #0
    18a2:	6078      	str	r0, [r7, #4]
    18a4:	000a      	movs	r2, r1
    18a6:	1cbb      	adds	r3, r7, #2
    18a8:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    18aa:	687b      	ldr	r3, [r7, #4]
    18ac:	681b      	ldr	r3, [r3, #0]
    18ae:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    18b0:	687b      	ldr	r3, [r7, #4]
    18b2:	0018      	movs	r0, r3
    18b4:	4b0a      	ldr	r3, [pc, #40]	; (18e0 <spi_write+0x44>)
    18b6:	4798      	blx	r3
    18b8:	0003      	movs	r3, r0
    18ba:	001a      	movs	r2, r3
    18bc:	2301      	movs	r3, #1
    18be:	4053      	eors	r3, r2
    18c0:	b2db      	uxtb	r3, r3
    18c2:	2b00      	cmp	r3, #0
    18c4:	d001      	beq.n	18ca <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
    18c6:	2305      	movs	r3, #5
    18c8:	e006      	b.n	18d8 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    18ca:	1cbb      	adds	r3, r7, #2
    18cc:	881b      	ldrh	r3, [r3, #0]
    18ce:	05db      	lsls	r3, r3, #23
    18d0:	0dda      	lsrs	r2, r3, #23
    18d2:	68fb      	ldr	r3, [r7, #12]
    18d4:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
    18d6:	2300      	movs	r3, #0
}
    18d8:	0018      	movs	r0, r3
    18da:	46bd      	mov	sp, r7
    18dc:	b004      	add	sp, #16
    18de:	bd80      	pop	{r7, pc}
    18e0:	0000184d 	.word	0x0000184d

000018e4 <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
    18e4:	b580      	push	{r7, lr}
    18e6:	b084      	sub	sp, #16
    18e8:	af00      	add	r7, sp, #0
    18ea:	6078      	str	r0, [r7, #4]
    18ec:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    18ee:	687b      	ldr	r3, [r7, #4]
    18f0:	681b      	ldr	r3, [r3, #0]
    18f2:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    18f4:	687b      	ldr	r3, [r7, #4]
    18f6:	0018      	movs	r0, r3
    18f8:	4b1b      	ldr	r3, [pc, #108]	; (1968 <spi_read+0x84>)
    18fa:	4798      	blx	r3
    18fc:	0003      	movs	r3, r0
    18fe:	001a      	movs	r2, r3
    1900:	2301      	movs	r3, #1
    1902:	4053      	eors	r3, r2
    1904:	b2db      	uxtb	r3, r3
    1906:	2b00      	cmp	r3, #0
    1908:	d001      	beq.n	190e <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
    190a:	2310      	movs	r3, #16
    190c:	e027      	b.n	195e <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
    190e:	230f      	movs	r3, #15
    1910:	18fb      	adds	r3, r7, r3
    1912:	2200      	movs	r2, #0
    1914:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1916:	68bb      	ldr	r3, [r7, #8]
    1918:	8b5b      	ldrh	r3, [r3, #26]
    191a:	b29b      	uxth	r3, r3
    191c:	001a      	movs	r2, r3
    191e:	2304      	movs	r3, #4
    1920:	4013      	ands	r3, r2
    1922:	d006      	beq.n	1932 <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
    1924:	230f      	movs	r3, #15
    1926:	18fb      	adds	r3, r7, r3
    1928:	221e      	movs	r2, #30
    192a:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    192c:	68bb      	ldr	r3, [r7, #8]
    192e:	2204      	movs	r2, #4
    1930:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1932:	687b      	ldr	r3, [r7, #4]
    1934:	799b      	ldrb	r3, [r3, #6]
    1936:	2b01      	cmp	r3, #1
    1938:	d108      	bne.n	194c <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    193a:	68bb      	ldr	r3, [r7, #8]
    193c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    193e:	b29b      	uxth	r3, r3
    1940:	05db      	lsls	r3, r3, #23
    1942:	0ddb      	lsrs	r3, r3, #23
    1944:	b29a      	uxth	r2, r3
    1946:	683b      	ldr	r3, [r7, #0]
    1948:	801a      	strh	r2, [r3, #0]
    194a:	e005      	b.n	1958 <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    194c:	68bb      	ldr	r3, [r7, #8]
    194e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1950:	b2db      	uxtb	r3, r3
    1952:	b29a      	uxth	r2, r3
    1954:	683b      	ldr	r3, [r7, #0]
    1956:	801a      	strh	r2, [r3, #0]
	}

	return retval;
    1958:	230f      	movs	r3, #15
    195a:	18fb      	adds	r3, r7, r3
    195c:	781b      	ldrb	r3, [r3, #0]
}
    195e:	0018      	movs	r0, r3
    1960:	46bd      	mov	sp, r7
    1962:	b004      	add	sp, #16
    1964:	bd80      	pop	{r7, pc}
    1966:	46c0      	nop			; (mov r8, r8)
    1968:	00001875 	.word	0x00001875

0000196c <_spi_clear_tx_complete_flag>:
 *
 * \param[in]  module  Pointer to the software instance struct
 */
static void _spi_clear_tx_complete_flag(
		struct spi_module *const module)
{
    196c:	b580      	push	{r7, lr}
    196e:	b084      	sub	sp, #16
    1970:	af00      	add	r7, sp, #0
    1972:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1974:	687b      	ldr	r3, [r7, #4]
    1976:	681b      	ldr	r3, [r3, #0]
    1978:	60fb      	str	r3, [r7, #12]

	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    197a:	68fb      	ldr	r3, [r7, #12]
    197c:	2202      	movs	r2, #2
    197e:	761a      	strb	r2, [r3, #24]
}
    1980:	46c0      	nop			; (mov r8, r8)
    1982:	46bd      	mov	sp, r7
    1984:	b004      	add	sp, #16
    1986:	bd80      	pop	{r7, pc}

00001988 <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
    1988:	b590      	push	{r4, r7, lr}
    198a:	b093      	sub	sp, #76	; 0x4c
    198c:	af00      	add	r7, sp, #0
    198e:	6078      	str	r0, [r7, #4]
    1990:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1992:	687b      	ldr	r3, [r7, #4]
    1994:	681b      	ldr	r3, [r3, #0]
    1996:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
    1998:	687b      	ldr	r3, [r7, #4]
    199a:	681b      	ldr	r3, [r3, #0]
    199c:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    199e:	231c      	movs	r3, #28
    19a0:	18fb      	adds	r3, r7, r3
    19a2:	0018      	movs	r0, r3
    19a4:	4b85      	ldr	r3, [pc, #532]	; (1bbc <_spi_set_config+0x234>)
    19a6:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    19a8:	231c      	movs	r3, #28
    19aa:	18fb      	adds	r3, r7, r3
    19ac:	2200      	movs	r2, #0
    19ae:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
    19b0:	683b      	ldr	r3, [r7, #0]
    19b2:	781b      	ldrb	r3, [r3, #0]
    19b4:	2b00      	cmp	r3, #0
    19b6:	d103      	bne.n	19c0 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    19b8:	231c      	movs	r3, #28
    19ba:	18fb      	adds	r3, r7, r3
    19bc:	2200      	movs	r2, #0
    19be:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    19c0:	683b      	ldr	r3, [r7, #0]
    19c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
    19c4:	230c      	movs	r3, #12
    19c6:	18fb      	adds	r3, r7, r3
    19c8:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    19ca:	683b      	ldr	r3, [r7, #0]
    19cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
    19ce:	230c      	movs	r3, #12
    19d0:	18fb      	adds	r3, r7, r3
    19d2:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
    19d4:	683b      	ldr	r3, [r7, #0]
    19d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
    19d8:	230c      	movs	r3, #12
    19da:	18fb      	adds	r3, r7, r3
    19dc:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
    19de:	683b      	ldr	r3, [r7, #0]
    19e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
    19e2:	230c      	movs	r3, #12
    19e4:	18fb      	adds	r3, r7, r3
    19e6:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    19e8:	2347      	movs	r3, #71	; 0x47
    19ea:	18fb      	adds	r3, r7, r3
    19ec:	2200      	movs	r2, #0
    19ee:	701a      	strb	r2, [r3, #0]
    19f0:	e02c      	b.n	1a4c <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    19f2:	2347      	movs	r3, #71	; 0x47
    19f4:	18fb      	adds	r3, r7, r3
    19f6:	781a      	ldrb	r2, [r3, #0]
    19f8:	230c      	movs	r3, #12
    19fa:	18fb      	adds	r3, r7, r3
    19fc:	0092      	lsls	r2, r2, #2
    19fe:	58d3      	ldr	r3, [r2, r3]
    1a00:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    1a02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1a04:	2b00      	cmp	r3, #0
    1a06:	d109      	bne.n	1a1c <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    1a08:	2347      	movs	r3, #71	; 0x47
    1a0a:	18fb      	adds	r3, r7, r3
    1a0c:	781a      	ldrb	r2, [r3, #0]
    1a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1a10:	0011      	movs	r1, r2
    1a12:	0018      	movs	r0, r3
    1a14:	4b6a      	ldr	r3, [pc, #424]	; (1bc0 <_spi_set_config+0x238>)
    1a16:	4798      	blx	r3
    1a18:	0003      	movs	r3, r0
    1a1a:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    1a1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1a1e:	3301      	adds	r3, #1
    1a20:	d00d      	beq.n	1a3e <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1a22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1a24:	b2da      	uxtb	r2, r3
    1a26:	231c      	movs	r3, #28
    1a28:	18fb      	adds	r3, r7, r3
    1a2a:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    1a2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1a2e:	0c1b      	lsrs	r3, r3, #16
    1a30:	b2db      	uxtb	r3, r3
    1a32:	221c      	movs	r2, #28
    1a34:	18ba      	adds	r2, r7, r2
    1a36:	0011      	movs	r1, r2
    1a38:	0018      	movs	r0, r3
    1a3a:	4b62      	ldr	r3, [pc, #392]	; (1bc4 <_spi_set_config+0x23c>)
    1a3c:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
    1a3e:	2347      	movs	r3, #71	; 0x47
    1a40:	18fb      	adds	r3, r7, r3
    1a42:	781a      	ldrb	r2, [r3, #0]
    1a44:	2347      	movs	r3, #71	; 0x47
    1a46:	18fb      	adds	r3, r7, r3
    1a48:	3201      	adds	r2, #1
    1a4a:	701a      	strb	r2, [r3, #0]
    1a4c:	2347      	movs	r3, #71	; 0x47
    1a4e:	18fb      	adds	r3, r7, r3
    1a50:	781b      	ldrb	r3, [r3, #0]
    1a52:	2b03      	cmp	r3, #3
    1a54:	d9cd      	bls.n	19f2 <_spi_set_config+0x6a>
		}
	}

	module->mode             = config->mode;
    1a56:	683b      	ldr	r3, [r7, #0]
    1a58:	781a      	ldrb	r2, [r3, #0]
    1a5a:	687b      	ldr	r3, [r7, #4]
    1a5c:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
    1a5e:	683b      	ldr	r3, [r7, #0]
    1a60:	7c1a      	ldrb	r2, [r3, #16]
    1a62:	687b      	ldr	r3, [r7, #4]
    1a64:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
    1a66:	683b      	ldr	r3, [r7, #0]
    1a68:	7c9a      	ldrb	r2, [r3, #18]
    1a6a:	687b      	ldr	r3, [r7, #4]
    1a6c:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
    1a6e:	683b      	ldr	r3, [r7, #0]
    1a70:	7d1a      	ldrb	r2, [r3, #20]
    1a72:	687b      	ldr	r3, [r7, #4]
    1a74:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
    1a76:	230a      	movs	r3, #10
    1a78:	18fb      	adds	r3, r7, r3
    1a7a:	2200      	movs	r2, #0
    1a7c:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
    1a7e:	2300      	movs	r3, #0
    1a80:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
    1a82:	2300      	movs	r3, #0
    1a84:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
    1a86:	683b      	ldr	r3, [r7, #0]
    1a88:	781b      	ldrb	r3, [r3, #0]
    1a8a:	2b01      	cmp	r3, #1
    1a8c:	d129      	bne.n	1ae2 <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1a8e:	687b      	ldr	r3, [r7, #4]
    1a90:	681b      	ldr	r3, [r3, #0]
    1a92:	0018      	movs	r0, r3
    1a94:	4b4c      	ldr	r3, [pc, #304]	; (1bc8 <_spi_set_config+0x240>)
    1a96:	4798      	blx	r3
    1a98:	0003      	movs	r3, r0
    1a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1a9e:	3314      	adds	r3, #20
    1aa0:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    1aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1aa4:	b2db      	uxtb	r3, r3
    1aa6:	0018      	movs	r0, r3
    1aa8:	4b48      	ldr	r3, [pc, #288]	; (1bcc <_spi_set_config+0x244>)
    1aaa:	4798      	blx	r3
    1aac:	0003      	movs	r3, r0
    1aae:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
    1ab0:	683b      	ldr	r3, [r7, #0]
    1ab2:	699b      	ldr	r3, [r3, #24]
    1ab4:	2223      	movs	r2, #35	; 0x23
    1ab6:	18bc      	adds	r4, r7, r2
    1ab8:	220a      	movs	r2, #10
    1aba:	18ba      	adds	r2, r7, r2
    1abc:	6a79      	ldr	r1, [r7, #36]	; 0x24
    1abe:	0018      	movs	r0, r3
    1ac0:	4b43      	ldr	r3, [pc, #268]	; (1bd0 <_spi_set_config+0x248>)
    1ac2:	4798      	blx	r3
    1ac4:	0003      	movs	r3, r0
    1ac6:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
    1ac8:	2323      	movs	r3, #35	; 0x23
    1aca:	18fb      	adds	r3, r7, r3
    1acc:	781b      	ldrb	r3, [r3, #0]
    1ace:	2b00      	cmp	r3, #0
    1ad0:	d001      	beq.n	1ad6 <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    1ad2:	2317      	movs	r3, #23
    1ad4:	e06d      	b.n	1bb2 <_spi_set_config+0x22a>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
    1ad6:	230a      	movs	r3, #10
    1ad8:	18fb      	adds	r3, r7, r3
    1ada:	881b      	ldrh	r3, [r3, #0]
    1adc:	b2da      	uxtb	r2, r3
    1ade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1ae0:	731a      	strb	r2, [r3, #12]
	}
# endif
# if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    1ae2:	683b      	ldr	r3, [r7, #0]
    1ae4:	781b      	ldrb	r3, [r3, #0]
    1ae6:	2b00      	cmp	r3, #0
    1ae8:	d11a      	bne.n	1b20 <_spi_set_config+0x198>
		/* Set frame format */
		ctrla = config->mode_specific.slave.frame_format;
    1aea:	683b      	ldr	r3, [r7, #0]
    1aec:	699b      	ldr	r3, [r3, #24]
    1aee:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;
    1af0:	683b      	ldr	r3, [r7, #0]
    1af2:	8b9b      	ldrh	r3, [r3, #28]
    1af4:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
    1af6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    1afa:	683a      	ldr	r2, [r7, #0]
    1afc:	7f92      	ldrb	r2, [r2, #30]
    1afe:	0011      	movs	r1, r2
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    1b00:	683a      	ldr	r2, [r7, #0]
    1b02:	7fd2      	ldrb	r2, [r2, #31]
    1b04:	0412      	lsls	r2, r2, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    1b06:	430a      	orrs	r2, r1
		spi_module->ADDR.reg |=
    1b08:	431a      	orrs	r2, r3
    1b0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1b0c:	625a      	str	r2, [r3, #36]	; 0x24

		if (config->mode_specific.slave.preload_enable) {
    1b0e:	683b      	ldr	r3, [r7, #0]
    1b10:	2220      	movs	r2, #32
    1b12:	5c9b      	ldrb	r3, [r3, r2]
    1b14:	2b00      	cmp	r3, #0
    1b16:	d003      	beq.n	1b20 <_spi_set_config+0x198>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    1b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1b1a:	2240      	movs	r2, #64	; 0x40
    1b1c:	4313      	orrs	r3, r2
    1b1e:	63bb      	str	r3, [r7, #56]	; 0x38
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
    1b20:	683b      	ldr	r3, [r7, #0]
    1b22:	685b      	ldr	r3, [r3, #4]
    1b24:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1b26:	4313      	orrs	r3, r2
    1b28:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    1b2a:	683b      	ldr	r3, [r7, #0]
    1b2c:	689b      	ldr	r3, [r3, #8]
    1b2e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1b30:	4313      	orrs	r3, r2
    1b32:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    1b34:	683b      	ldr	r3, [r7, #0]
    1b36:	68db      	ldr	r3, [r3, #12]
    1b38:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1b3a:	4313      	orrs	r3, r2
    1b3c:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
    1b3e:	683b      	ldr	r3, [r7, #0]
    1b40:	7c1b      	ldrb	r3, [r3, #16]
    1b42:	001a      	movs	r2, r3
    1b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1b46:	4313      	orrs	r3, r2
    1b48:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    1b4a:	683b      	ldr	r3, [r7, #0]
    1b4c:	7c5b      	ldrb	r3, [r3, #17]
    1b4e:	2b00      	cmp	r3, #0
    1b50:	d103      	bne.n	1b5a <_spi_set_config+0x1d2>
    1b52:	4b20      	ldr	r3, [pc, #128]	; (1bd4 <_spi_set_config+0x24c>)
    1b54:	4798      	blx	r3
    1b56:	1e03      	subs	r3, r0, #0
    1b58:	d003      	beq.n	1b62 <_spi_set_config+0x1da>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    1b5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1b5c:	2280      	movs	r2, #128	; 0x80
    1b5e:	4313      	orrs	r3, r2
    1b60:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
    1b62:	683b      	ldr	r3, [r7, #0]
    1b64:	7c9b      	ldrb	r3, [r3, #18]
    1b66:	2b00      	cmp	r3, #0
    1b68:	d004      	beq.n	1b74 <_spi_set_config+0x1ec>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    1b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1b6c:	2280      	movs	r2, #128	; 0x80
    1b6e:	0292      	lsls	r2, r2, #10
    1b70:	4313      	orrs	r3, r2
    1b72:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    1b74:	683b      	ldr	r3, [r7, #0]
    1b76:	7cdb      	ldrb	r3, [r3, #19]
    1b78:	2b00      	cmp	r3, #0
    1b7a:	d004      	beq.n	1b86 <_spi_set_config+0x1fe>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    1b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1b7e:	2280      	movs	r2, #128	; 0x80
    1b80:	0092      	lsls	r2, r2, #2
    1b82:	4313      	orrs	r3, r2
    1b84:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    1b86:	683b      	ldr	r3, [r7, #0]
    1b88:	7d1b      	ldrb	r3, [r3, #20]
    1b8a:	2b00      	cmp	r3, #0
    1b8c:	d004      	beq.n	1b98 <_spi_set_config+0x210>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    1b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1b90:	2280      	movs	r2, #128	; 0x80
    1b92:	0192      	lsls	r2, r2, #6
    1b94:	4313      	orrs	r3, r2
    1b96:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
    1b98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1b9a:	681a      	ldr	r2, [r3, #0]
    1b9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1b9e:	431a      	orrs	r2, r3
    1ba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1ba2:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
    1ba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1ba6:	685a      	ldr	r2, [r3, #4]
    1ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1baa:	431a      	orrs	r2, r3
    1bac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1bae:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
    1bb0:	2300      	movs	r3, #0
}
    1bb2:	0018      	movs	r0, r3
    1bb4:	46bd      	mov	sp, r7
    1bb6:	b013      	add	sp, #76	; 0x4c
    1bb8:	bd90      	pop	{r4, r7, pc}
    1bba:	46c0      	nop			; (mov r8, r8)
    1bbc:	00001615 	.word	0x00001615
    1bc0:	0000051d 	.word	0x0000051d
    1bc4:	00003185 	.word	0x00003185
    1bc8:	000006d9 	.word	0x000006d9
    1bcc:	00002fbd 	.word	0x00002fbd
    1bd0:	00000413 	.word	0x00000413
    1bd4:	00001805 	.word	0x00001805

00001bd8 <_spi_check_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_check_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
    1bd8:	b590      	push	{r4, r7, lr}
    1bda:	b091      	sub	sp, #68	; 0x44
    1bdc:	af00      	add	r7, sp, #0
    1bde:	6078      	str	r0, [r7, #4]
    1be0:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1be2:	687b      	ldr	r3, [r7, #4]
    1be4:	681b      	ldr	r3, [r3, #0]
    1be6:	62fb      	str	r3, [r7, #44]	; 0x2c
	Sercom *const hw = module->hw;
    1be8:	687b      	ldr	r3, [r7, #4]
    1bea:	681b      	ldr	r3, [r3, #0]
    1bec:	62bb      	str	r3, [r7, #40]	; 0x28

	uint32_t pad_pinmuxes[] = {
		config->pinmux_pad0, config->pinmux_pad1,
    1bee:	683b      	ldr	r3, [r7, #0]
    1bf0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
    1bf2:	230c      	movs	r3, #12
    1bf4:	18fb      	adds	r3, r7, r3
    1bf6:	601a      	str	r2, [r3, #0]
		config->pinmux_pad0, config->pinmux_pad1,
    1bf8:	683b      	ldr	r3, [r7, #0]
    1bfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
    1bfc:	230c      	movs	r3, #12
    1bfe:	18fb      	adds	r3, r7, r3
    1c00:	605a      	str	r2, [r3, #4]
		config->pinmux_pad2, config->pinmux_pad3
    1c02:	683b      	ldr	r3, [r7, #0]
    1c04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
    1c06:	230c      	movs	r3, #12
    1c08:	18fb      	adds	r3, r7, r3
    1c0a:	609a      	str	r2, [r3, #8]
		config->pinmux_pad2, config->pinmux_pad3
    1c0c:	683b      	ldr	r3, [r7, #0]
    1c0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
    1c10:	230c      	movs	r3, #12
    1c12:	18fb      	adds	r3, r7, r3
    1c14:	60da      	str	r2, [r3, #12]
	};

	/* Compare the current SERCOM pins against the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    1c16:	233f      	movs	r3, #63	; 0x3f
    1c18:	18fb      	adds	r3, r7, r3
    1c1a:	2200      	movs	r2, #0
    1c1c:	701a      	strb	r2, [r3, #0]
    1c1e:	e030      	b.n	1c82 <_spi_check_config+0xaa>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1c20:	233f      	movs	r3, #63	; 0x3f
    1c22:	18fb      	adds	r3, r7, r3
    1c24:	781a      	ldrb	r2, [r3, #0]
    1c26:	230c      	movs	r3, #12
    1c28:	18fb      	adds	r3, r7, r3
    1c2a:	0092      	lsls	r2, r2, #2
    1c2c:	58d3      	ldr	r3, [r2, r3]
    1c2e:	63bb      	str	r3, [r7, #56]	; 0x38

		if (current_pinmux == PINMUX_DEFAULT) {
    1c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1c32:	2b00      	cmp	r3, #0
    1c34:	d109      	bne.n	1c4a <_spi_check_config+0x72>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    1c36:	233f      	movs	r3, #63	; 0x3f
    1c38:	18fb      	adds	r3, r7, r3
    1c3a:	781a      	ldrb	r2, [r3, #0]
    1c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1c3e:	0011      	movs	r1, r2
    1c40:	0018      	movs	r0, r3
    1c42:	4b6e      	ldr	r3, [pc, #440]	; (1dfc <_spi_check_config+0x224>)
    1c44:	4798      	blx	r3
    1c46:	0003      	movs	r3, r0
    1c48:	63bb      	str	r3, [r7, #56]	; 0x38
		}

		if (current_pinmux == PINMUX_UNUSED) {
    1c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1c4c:	3301      	adds	r3, #1
    1c4e:	d010      	beq.n	1c72 <_spi_check_config+0x9a>
			continue;
		}

		if ((current_pinmux & 0xFFFF) !=
    1c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1c52:	041b      	lsls	r3, r3, #16
    1c54:	0c1c      	lsrs	r4, r3, #16
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
    1c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1c58:	0c1b      	lsrs	r3, r3, #16
    1c5a:	b2db      	uxtb	r3, r3
    1c5c:	0018      	movs	r0, r3
    1c5e:	4b68      	ldr	r3, [pc, #416]	; (1e00 <_spi_check_config+0x228>)
    1c60:	4798      	blx	r3
    1c62:	0003      	movs	r3, r0
		if ((current_pinmux & 0xFFFF) !=
    1c64:	429c      	cmp	r4, r3
    1c66:	d005      	beq.n	1c74 <_spi_check_config+0x9c>
			module->hw = NULL;
    1c68:	687b      	ldr	r3, [r7, #4]
    1c6a:	2200      	movs	r2, #0
    1c6c:	601a      	str	r2, [r3, #0]
			return STATUS_ERR_DENIED;
    1c6e:	231c      	movs	r3, #28
    1c70:	e0bf      	b.n	1df2 <_spi_check_config+0x21a>
			continue;
    1c72:	46c0      	nop			; (mov r8, r8)
	for (uint8_t pad = 0; pad < 4; pad++) {
    1c74:	233f      	movs	r3, #63	; 0x3f
    1c76:	18fb      	adds	r3, r7, r3
    1c78:	781a      	ldrb	r2, [r3, #0]
    1c7a:	233f      	movs	r3, #63	; 0x3f
    1c7c:	18fb      	adds	r3, r7, r3
    1c7e:	3201      	adds	r2, #1
    1c80:	701a      	strb	r2, [r3, #0]
    1c82:	233f      	movs	r3, #63	; 0x3f
    1c84:	18fb      	adds	r3, r7, r3
    1c86:	781b      	ldrb	r3, [r3, #0]
    1c88:	2b03      	cmp	r3, #3
    1c8a:	d9c9      	bls.n	1c20 <_spi_check_config+0x48>
	}

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to read BAUD register */
	uint16_t baud;
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
    1c8c:	2013      	movs	r0, #19
    1c8e:	4b5d      	ldr	r3, [pc, #372]	; (1e04 <_spi_check_config+0x22c>)
    1c90:	4798      	blx	r3
    1c92:	0003      	movs	r3, r0
    1c94:	627b      	str	r3, [r7, #36]	; 0x24
#  endif
	/* Value to read CTRLA, CTRLB and ADDR register */
	uint32_t ctrla = 0;
    1c96:	2300      	movs	r3, #0
    1c98:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t ctrlb = 0;
    1c9a:	2300      	movs	r3, #0
    1c9c:	633b      	str	r3, [r7, #48]	; 0x30
#  if CONF_SPI_SLAVE_ENABLE == true
	uint32_t addr = 0;
    1c9e:	2300      	movs	r3, #0
    1ca0:	623b      	str	r3, [r7, #32]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and compare it */
	if (config->mode == SPI_MODE_MASTER) {
    1ca2:	683b      	ldr	r3, [r7, #0]
    1ca4:	781b      	ldrb	r3, [r3, #0]
    1ca6:	2b01      	cmp	r3, #1
    1ca8:	d121      	bne.n	1cee <_spi_check_config+0x116>
		enum status_code error_code = _sercom_get_sync_baud_val(
    1caa:	683b      	ldr	r3, [r7, #0]
    1cac:	699b      	ldr	r3, [r3, #24]
    1cae:	221f      	movs	r2, #31
    1cb0:	18bc      	adds	r4, r7, r2
    1cb2:	220a      	movs	r2, #10
    1cb4:	18ba      	adds	r2, r7, r2
    1cb6:	6a79      	ldr	r1, [r7, #36]	; 0x24
    1cb8:	0018      	movs	r0, r3
    1cba:	4b53      	ldr	r3, [pc, #332]	; (1e08 <_spi_check_config+0x230>)
    1cbc:	4798      	blx	r3
    1cbe:	0003      	movs	r3, r0
    1cc0:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				external_clock, &baud);

		if (error_code != STATUS_OK) {
    1cc2:	231f      	movs	r3, #31
    1cc4:	18fb      	adds	r3, r7, r3
    1cc6:	781b      	ldrb	r3, [r3, #0]
    1cc8:	2b00      	cmp	r3, #0
    1cca:	d001      	beq.n	1cd0 <_spi_check_config+0xf8>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    1ccc:	2317      	movs	r3, #23
    1cce:	e090      	b.n	1df2 <_spi_check_config+0x21a>
		}

		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    1cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1cd2:	7b1b      	ldrb	r3, [r3, #12]
    1cd4:	b2da      	uxtb	r2, r3
    1cd6:	230a      	movs	r3, #10
    1cd8:	18fb      	adds	r3, r7, r3
    1cda:	881b      	ldrh	r3, [r3, #0]
    1cdc:	b2db      	uxtb	r3, r3
    1cde:	429a      	cmp	r2, r3
    1ce0:	d001      	beq.n	1ce6 <_spi_check_config+0x10e>
			return STATUS_ERR_DENIED;
    1ce2:	231c      	movs	r3, #28
    1ce4:	e085      	b.n	1df2 <_spi_check_config+0x21a>
		}

		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
    1ce6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1ce8:	220c      	movs	r2, #12
    1cea:	4313      	orrs	r3, r2
    1cec:	637b      	str	r3, [r7, #52]	; 0x34
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    1cee:	683b      	ldr	r3, [r7, #0]
    1cf0:	781b      	ldrb	r3, [r3, #0]
    1cf2:	2b00      	cmp	r3, #0
    1cf4:	d129      	bne.n	1d4a <_spi_check_config+0x172>

		/* Set frame format */
		ctrla |= config->mode_specific.slave.frame_format;
    1cf6:	683b      	ldr	r3, [r7, #0]
    1cf8:	699b      	ldr	r3, [r3, #24]
    1cfa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    1cfc:	4313      	orrs	r3, r2
    1cfe:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set address mode */
		ctrlb |= config->mode_specific.slave.address_mode;
    1d00:	683b      	ldr	r3, [r7, #0]
    1d02:	8b9b      	ldrh	r3, [r3, #28]
    1d04:	001a      	movs	r2, r3
    1d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1d08:	4313      	orrs	r3, r2
    1d0a:	633b      	str	r3, [r7, #48]	; 0x30

		/* Set address and address mask*/
		addr |= (config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    1d0c:	683b      	ldr	r3, [r7, #0]
    1d0e:	7f9b      	ldrb	r3, [r3, #30]
    1d10:	001a      	movs	r2, r3
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    1d12:	683b      	ldr	r3, [r7, #0]
    1d14:	7fdb      	ldrb	r3, [r3, #31]
    1d16:	041b      	lsls	r3, r3, #16
		addr |= (config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    1d18:	4313      	orrs	r3, r2
    1d1a:	001a      	movs	r2, r3
    1d1c:	6a3b      	ldr	r3, [r7, #32]
    1d1e:	4313      	orrs	r3, r2
    1d20:	623b      	str	r3, [r7, #32]
		if (spi_module->CTRLA.reg != addr) {
    1d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1d24:	681a      	ldr	r2, [r3, #0]
    1d26:	6a3b      	ldr	r3, [r7, #32]
    1d28:	429a      	cmp	r2, r3
    1d2a:	d001      	beq.n	1d30 <_spi_check_config+0x158>
			return STATUS_ERR_DENIED;
    1d2c:	231c      	movs	r3, #28
    1d2e:	e060      	b.n	1df2 <_spi_check_config+0x21a>
		}

		if (config->mode_specific.slave.preload_enable) {
    1d30:	683b      	ldr	r3, [r7, #0]
    1d32:	2220      	movs	r2, #32
    1d34:	5c9b      	ldrb	r3, [r3, r2]
    1d36:	2b00      	cmp	r3, #0
    1d38:	d003      	beq.n	1d42 <_spi_check_config+0x16a>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    1d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1d3c:	2240      	movs	r2, #64	; 0x40
    1d3e:	4313      	orrs	r3, r2
    1d40:	633b      	str	r3, [r7, #48]	; 0x30
		}
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x2);
    1d42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1d44:	2208      	movs	r2, #8
    1d46:	4313      	orrs	r3, r2
    1d48:	637b      	str	r3, [r7, #52]	; 0x34
	}
#  endif
	/* Set data order */
	ctrla |= config->data_order;
    1d4a:	683b      	ldr	r3, [r7, #0]
    1d4c:	685b      	ldr	r3, [r3, #4]
    1d4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    1d50:	4313      	orrs	r3, r2
    1d52:	637b      	str	r3, [r7, #52]	; 0x34

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    1d54:	683b      	ldr	r3, [r7, #0]
    1d56:	689b      	ldr	r3, [r3, #8]
    1d58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    1d5a:	4313      	orrs	r3, r2
    1d5c:	637b      	str	r3, [r7, #52]	; 0x34

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    1d5e:	683b      	ldr	r3, [r7, #0]
    1d60:	68db      	ldr	r3, [r3, #12]
    1d62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    1d64:	4313      	orrs	r3, r2
    1d66:	637b      	str	r3, [r7, #52]	; 0x34

	/* Set SPI character size */
	ctrlb |= config->character_size;
    1d68:	683b      	ldr	r3, [r7, #0]
    1d6a:	7c1b      	ldrb	r3, [r3, #16]
    1d6c:	001a      	movs	r2, r3
    1d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1d70:	4313      	orrs	r3, r2
    1d72:	633b      	str	r3, [r7, #48]	; 0x30

	if (config->run_in_standby) {
    1d74:	683b      	ldr	r3, [r7, #0]
    1d76:	7c5b      	ldrb	r3, [r3, #17]
    1d78:	2b00      	cmp	r3, #0
    1d7a:	d003      	beq.n	1d84 <_spi_check_config+0x1ac>
		/* Enable in sleep mode */
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    1d7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1d7e:	2280      	movs	r2, #128	; 0x80
    1d80:	4313      	orrs	r3, r2
    1d82:	637b      	str	r3, [r7, #52]	; 0x34
	}

	if (config->receiver_enable) {
    1d84:	683b      	ldr	r3, [r7, #0]
    1d86:	7c9b      	ldrb	r3, [r3, #18]
    1d88:	2b00      	cmp	r3, #0
    1d8a:	d004      	beq.n	1d96 <_spi_check_config+0x1be>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    1d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1d8e:	2280      	movs	r2, #128	; 0x80
    1d90:	0292      	lsls	r2, r2, #10
    1d92:	4313      	orrs	r3, r2
    1d94:	633b      	str	r3, [r7, #48]	; 0x30
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    1d96:	683b      	ldr	r3, [r7, #0]
    1d98:	7cdb      	ldrb	r3, [r3, #19]
    1d9a:	2b00      	cmp	r3, #0
    1d9c:	d004      	beq.n	1da8 <_spi_check_config+0x1d0>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    1d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1da0:	2280      	movs	r2, #128	; 0x80
    1da2:	0092      	lsls	r2, r2, #2
    1da4:	4313      	orrs	r3, r2
    1da6:	633b      	str	r3, [r7, #48]	; 0x30
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    1da8:	683b      	ldr	r3, [r7, #0]
    1daa:	7d1b      	ldrb	r3, [r3, #20]
    1dac:	2b00      	cmp	r3, #0
    1dae:	d004      	beq.n	1dba <_spi_check_config+0x1e2>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    1db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1db2:	2280      	movs	r2, #128	; 0x80
    1db4:	0192      	lsls	r2, r2, #6
    1db6:	4313      	orrs	r3, r2
    1db8:	633b      	str	r3, [r7, #48]	; 0x30
	}
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
    1dba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1dbc:	2202      	movs	r2, #2
    1dbe:	4313      	orrs	r3, r2
    1dc0:	637b      	str	r3, [r7, #52]	; 0x34

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
    1dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1dc4:	681a      	ldr	r2, [r3, #0]
    1dc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1dc8:	429a      	cmp	r2, r3
    1dca:	d10e      	bne.n	1dea <_spi_check_config+0x212>
			spi_module->CTRLB.reg == ctrlb) {
    1dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1dce:	685a      	ldr	r2, [r3, #4]
	if (spi_module->CTRLA.reg == ctrla &&
    1dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1dd2:	429a      	cmp	r2, r3
    1dd4:	d109      	bne.n	1dea <_spi_check_config+0x212>
		module->mode           = config->mode;
    1dd6:	683b      	ldr	r3, [r7, #0]
    1dd8:	781a      	ldrb	r2, [r3, #0]
    1dda:	687b      	ldr	r3, [r7, #4]
    1ddc:	715a      	strb	r2, [r3, #5]
		module->character_size = config->character_size;
    1dde:	683b      	ldr	r3, [r7, #0]
    1de0:	7c1a      	ldrb	r2, [r3, #16]
    1de2:	687b      	ldr	r3, [r7, #4]
    1de4:	719a      	strb	r2, [r3, #6]
		return STATUS_OK;
    1de6:	2300      	movs	r3, #0
    1de8:	e003      	b.n	1df2 <_spi_check_config+0x21a>
	}

	/* Not same config, wipe module pointer and return */
	module->hw = NULL;
    1dea:	687b      	ldr	r3, [r7, #4]
    1dec:	2200      	movs	r2, #0
    1dee:	601a      	str	r2, [r3, #0]

	return STATUS_ERR_DENIED;
    1df0:	231c      	movs	r3, #28
}
    1df2:	0018      	movs	r0, r3
    1df4:	46bd      	mov	sp, r7
    1df6:	b011      	add	sp, #68	; 0x44
    1df8:	bd90      	pop	{r4, r7, pc}
    1dfa:	46c0      	nop			; (mov r8, r8)
    1dfc:	0000051d 	.word	0x0000051d
    1e00:	0000169d 	.word	0x0000169d
    1e04:	00002fbd 	.word	0x00002fbd
    1e08:	00000413 	.word	0x00000413

00001e0c <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    1e0c:	b580      	push	{r7, lr}
    1e0e:	b08a      	sub	sp, #40	; 0x28
    1e10:	af00      	add	r7, sp, #0
    1e12:	60f8      	str	r0, [r7, #12]
    1e14:	60b9      	str	r1, [r7, #8]
    1e16:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    1e18:	68fb      	ldr	r3, [r7, #12]
    1e1a:	68ba      	ldr	r2, [r7, #8]
    1e1c:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
    1e1e:	68fb      	ldr	r3, [r7, #12]
    1e20:	681b      	ldr	r3, [r3, #0]
    1e22:	627b      	str	r3, [r7, #36]	; 0x24

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    1e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1e26:	681b      	ldr	r3, [r3, #0]
    1e28:	2202      	movs	r2, #2
    1e2a:	4013      	ands	r3, r2
    1e2c:	d007      	beq.n	1e3e <spi_init+0x32>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
    1e2e:	687a      	ldr	r2, [r7, #4]
    1e30:	68fb      	ldr	r3, [r7, #12]
    1e32:	0011      	movs	r1, r2
    1e34:	0018      	movs	r0, r3
    1e36:	4b2f      	ldr	r3, [pc, #188]	; (1ef4 <spi_init+0xe8>)
    1e38:	4798      	blx	r3
    1e3a:	0003      	movs	r3, r0
    1e3c:	e055      	b.n	1eea <spi_init+0xde>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    1e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1e40:	681b      	ldr	r3, [r3, #0]
    1e42:	2201      	movs	r2, #1
    1e44:	4013      	ands	r3, r2
    1e46:	d001      	beq.n	1e4c <spi_init+0x40>
		return STATUS_BUSY;
    1e48:	2305      	movs	r3, #5
    1e4a:	e04e      	b.n	1eea <spi_init+0xde>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1e4c:	68fb      	ldr	r3, [r7, #12]
    1e4e:	681b      	ldr	r3, [r3, #0]
    1e50:	0018      	movs	r0, r3
    1e52:	4b29      	ldr	r3, [pc, #164]	; (1ef8 <spi_init+0xec>)
    1e54:	4798      	blx	r3
    1e56:	0003      	movs	r3, r0
    1e58:	623b      	str	r3, [r7, #32]
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    1e5a:	6a3b      	ldr	r3, [r7, #32]
    1e5c:	3302      	adds	r3, #2
    1e5e:	61fb      	str	r3, [r7, #28]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1e60:	6a3b      	ldr	r3, [r7, #32]
    1e62:	3314      	adds	r3, #20
    1e64:	61bb      	str	r3, [r7, #24]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    1e66:	2201      	movs	r2, #1
    1e68:	69fb      	ldr	r3, [r7, #28]
    1e6a:	409a      	lsls	r2, r3
    1e6c:	0013      	movs	r3, r2
    1e6e:	0019      	movs	r1, r3
    1e70:	2002      	movs	r0, #2
    1e72:	4b22      	ldr	r3, [pc, #136]	; (1efc <spi_init+0xf0>)
    1e74:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    1e76:	2314      	movs	r3, #20
    1e78:	18fb      	adds	r3, r7, r3
    1e7a:	0018      	movs	r0, r3
    1e7c:	4b20      	ldr	r3, [pc, #128]	; (1f00 <spi_init+0xf4>)
    1e7e:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    1e80:	687b      	ldr	r3, [r7, #4]
    1e82:	2224      	movs	r2, #36	; 0x24
    1e84:	5c9a      	ldrb	r2, [r3, r2]
    1e86:	2314      	movs	r3, #20
    1e88:	18fb      	adds	r3, r7, r3
    1e8a:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1e8c:	69bb      	ldr	r3, [r7, #24]
    1e8e:	b2db      	uxtb	r3, r3
    1e90:	2214      	movs	r2, #20
    1e92:	18ba      	adds	r2, r7, r2
    1e94:	0011      	movs	r1, r2
    1e96:	0018      	movs	r0, r3
    1e98:	4b1a      	ldr	r3, [pc, #104]	; (1f04 <spi_init+0xf8>)
    1e9a:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1e9c:	69bb      	ldr	r3, [r7, #24]
    1e9e:	b2db      	uxtb	r3, r3
    1ea0:	0018      	movs	r0, r3
    1ea2:	4b19      	ldr	r3, [pc, #100]	; (1f08 <spi_init+0xfc>)
    1ea4:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    1ea6:	687b      	ldr	r3, [r7, #4]
    1ea8:	2224      	movs	r2, #36	; 0x24
    1eaa:	5c9b      	ldrb	r3, [r3, r2]
    1eac:	2100      	movs	r1, #0
    1eae:	0018      	movs	r0, r3
    1eb0:	4b16      	ldr	r3, [pc, #88]	; (1f0c <spi_init+0x100>)
    1eb2:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    1eb4:	687b      	ldr	r3, [r7, #4]
    1eb6:	781b      	ldrb	r3, [r3, #0]
    1eb8:	2b01      	cmp	r3, #1
    1eba:	d105      	bne.n	1ec8 <spi_init+0xbc>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    1ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1ebe:	681b      	ldr	r3, [r3, #0]
    1ec0:	220c      	movs	r2, #12
    1ec2:	431a      	orrs	r2, r3
    1ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1ec6:	601a      	str	r2, [r3, #0]
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    1ec8:	687b      	ldr	r3, [r7, #4]
    1eca:	781b      	ldrb	r3, [r3, #0]
    1ecc:	2b00      	cmp	r3, #0
    1ece:	d105      	bne.n	1edc <spi_init+0xd0>
		/* Set the SERCOM in SPI slave mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    1ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1ed2:	681b      	ldr	r3, [r3, #0]
    1ed4:	2208      	movs	r2, #8
    1ed6:	431a      	orrs	r2, r3
    1ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1eda:	601a      	str	r2, [r3, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
    1edc:	687a      	ldr	r2, [r7, #4]
    1ede:	68fb      	ldr	r3, [r7, #12]
    1ee0:	0011      	movs	r1, r2
    1ee2:	0018      	movs	r0, r3
    1ee4:	4b0a      	ldr	r3, [pc, #40]	; (1f10 <spi_init+0x104>)
    1ee6:	4798      	blx	r3
    1ee8:	0003      	movs	r3, r0
}
    1eea:	0018      	movs	r0, r3
    1eec:	46bd      	mov	sp, r7
    1eee:	b00a      	add	sp, #40	; 0x28
    1ef0:	bd80      	pop	{r7, pc}
    1ef2:	46c0      	nop			; (mov r8, r8)
    1ef4:	00001bd9 	.word	0x00001bd9
    1ef8:	000006d9 	.word	0x000006d9
    1efc:	000017a9 	.word	0x000017a9
    1f00:	00001791 	.word	0x00001791
    1f04:	00002e99 	.word	0x00002e99
    1f08:	00002edd 	.word	0x00002edd
    1f0c:	00000491 	.word	0x00000491
    1f10:	00001989 	.word	0x00001989

00001f14 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    1f14:	b590      	push	{r4, r7, lr}
    1f16:	b089      	sub	sp, #36	; 0x24
    1f18:	af00      	add	r7, sp, #0
    1f1a:	60f8      	str	r0, [r7, #12]
    1f1c:	60b9      	str	r1, [r7, #8]
    1f1e:	0019      	movs	r1, r3
    1f20:	1dbb      	adds	r3, r7, #6
    1f22:	801a      	strh	r2, [r3, #0]
    1f24:	1d3b      	adds	r3, r7, #4
    1f26:	1c0a      	adds	r2, r1, #0
    1f28:	801a      	strh	r2, [r3, #0]
		return STATUS_BUSY;
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
    1f2a:	1dbb      	adds	r3, r7, #6
    1f2c:	881b      	ldrh	r3, [r3, #0]
    1f2e:	2b00      	cmp	r3, #0
    1f30:	d101      	bne.n	1f36 <spi_read_buffer_wait+0x22>
		return STATUS_ERR_INVALID_ARG;
    1f32:	2317      	movs	r3, #23
    1f34:	e0b2      	b.n	209c <STACK_SIZE+0x9c>
	}

	if (!(module->receiver_enabled)) {
    1f36:	68fb      	ldr	r3, [r7, #12]
    1f38:	79db      	ldrb	r3, [r3, #7]
    1f3a:	2201      	movs	r2, #1
    1f3c:	4053      	eors	r3, r2
    1f3e:	b2db      	uxtb	r3, r3
    1f40:	2b00      	cmp	r3, #0
    1f42:	d001      	beq.n	1f48 <spi_read_buffer_wait+0x34>
		return STATUS_ERR_DENIED;
    1f44:	231c      	movs	r3, #28
    1f46:	e0a9      	b.n	209c <STACK_SIZE+0x9c>
	}
#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    1f48:	68fb      	ldr	r3, [r7, #12]
    1f4a:	795b      	ldrb	r3, [r3, #5]
    1f4c:	2b00      	cmp	r3, #0
    1f4e:	d109      	bne.n	1f64 <spi_read_buffer_wait+0x50>
    1f50:	68fb      	ldr	r3, [r7, #12]
    1f52:	0018      	movs	r0, r3
    1f54:	4b53      	ldr	r3, [pc, #332]	; (20a4 <STACK_SIZE+0xa4>)
    1f56:	4798      	blx	r3
    1f58:	1e03      	subs	r3, r0, #0
    1f5a:	d003      	beq.n	1f64 <spi_read_buffer_wait+0x50>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
    1f5c:	68fb      	ldr	r3, [r7, #12]
    1f5e:	0018      	movs	r0, r3
    1f60:	4b51      	ldr	r3, [pc, #324]	; (20a8 <STACK_SIZE+0xa8>)
    1f62:	4798      	blx	r3
	}
#  endif
	uint16_t rx_pos = 0;
    1f64:	231e      	movs	r3, #30
    1f66:	18fb      	adds	r3, r7, r3
    1f68:	2200      	movs	r2, #0
    1f6a:	801a      	strh	r2, [r3, #0]

	while (length--) {
    1f6c:	e08d      	b.n	208a <STACK_SIZE+0x8a>
#  if CONF_SPI_MASTER_ENABLE == true
		if (module->mode == SPI_MODE_MASTER) {
    1f6e:	68fb      	ldr	r3, [r7, #12]
    1f70:	795b      	ldrb	r3, [r3, #5]
    1f72:	2b01      	cmp	r3, #1
    1f74:	d112      	bne.n	1f9c <spi_read_buffer_wait+0x88>
			/* Wait until the module is ready to write a character */
			while (!spi_is_ready_to_write(module)) {
    1f76:	46c0      	nop			; (mov r8, r8)
    1f78:	68fb      	ldr	r3, [r7, #12]
    1f7a:	0018      	movs	r0, r3
    1f7c:	4b4b      	ldr	r3, [pc, #300]	; (20ac <STACK_SIZE+0xac>)
    1f7e:	4798      	blx	r3
    1f80:	0003      	movs	r3, r0
    1f82:	001a      	movs	r2, r3
    1f84:	2301      	movs	r3, #1
    1f86:	4053      	eors	r3, r2
    1f88:	b2db      	uxtb	r3, r3
    1f8a:	2b00      	cmp	r3, #0
    1f8c:	d1f4      	bne.n	1f78 <spi_read_buffer_wait+0x64>
			}

			/* Send dummy SPI character to read in master mode */
			spi_write(module, dummy);
    1f8e:	1d3b      	adds	r3, r7, #4
    1f90:	881a      	ldrh	r2, [r3, #0]
    1f92:	68fb      	ldr	r3, [r7, #12]
    1f94:	0011      	movs	r1, r2
    1f96:	0018      	movs	r0, r3
    1f98:	4b45      	ldr	r3, [pc, #276]	; (20b0 <STACK_SIZE+0xb0>)
    1f9a:	4798      	blx	r3
		}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
    1f9c:	68fb      	ldr	r3, [r7, #12]
    1f9e:	795b      	ldrb	r3, [r3, #5]
    1fa0:	2b00      	cmp	r3, #0
    1fa2:	d12a      	bne.n	1ffa <spi_read_buffer_wait+0xe6>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    1fa4:	2300      	movs	r3, #0
    1fa6:	61bb      	str	r3, [r7, #24]
    1fa8:	e008      	b.n	1fbc <spi_read_buffer_wait+0xa8>
				if (spi_is_ready_to_read(module)) {
    1faa:	68fb      	ldr	r3, [r7, #12]
    1fac:	0018      	movs	r0, r3
    1fae:	4b41      	ldr	r3, [pc, #260]	; (20b4 <STACK_SIZE+0xb4>)
    1fb0:	4798      	blx	r3
    1fb2:	1e03      	subs	r3, r0, #0
    1fb4:	d107      	bne.n	1fc6 <spi_read_buffer_wait+0xb2>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    1fb6:	69bb      	ldr	r3, [r7, #24]
    1fb8:	3301      	adds	r3, #1
    1fba:	61bb      	str	r3, [r7, #24]
    1fbc:	69bb      	ldr	r3, [r7, #24]
    1fbe:	4a3e      	ldr	r2, [pc, #248]	; (20b8 <STACK_SIZE+0xb8>)
    1fc0:	4293      	cmp	r3, r2
    1fc2:	d9f2      	bls.n	1faa <spi_read_buffer_wait+0x96>
    1fc4:	e000      	b.n	1fc8 <spi_read_buffer_wait+0xb4>
					break;
    1fc6:	46c0      	nop			; (mov r8, r8)
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
    1fc8:	68fb      	ldr	r3, [r7, #12]
    1fca:	0018      	movs	r0, r3
    1fcc:	4b35      	ldr	r3, [pc, #212]	; (20a4 <STACK_SIZE+0xa4>)
    1fce:	4798      	blx	r3
    1fd0:	1e03      	subs	r3, r0, #0
    1fd2:	d005      	beq.n	1fe0 <spi_read_buffer_wait+0xcc>
				_spi_clear_tx_complete_flag(module);
    1fd4:	68fb      	ldr	r3, [r7, #12]
    1fd6:	0018      	movs	r0, r3
    1fd8:	4b33      	ldr	r3, [pc, #204]	; (20a8 <STACK_SIZE+0xa8>)
    1fda:	4798      	blx	r3
				return STATUS_ABORTED;
    1fdc:	2304      	movs	r3, #4
    1fde:	e05d      	b.n	209c <STACK_SIZE+0x9c>
			}

			if (!spi_is_ready_to_read(module)) {
    1fe0:	68fb      	ldr	r3, [r7, #12]
    1fe2:	0018      	movs	r0, r3
    1fe4:	4b33      	ldr	r3, [pc, #204]	; (20b4 <STACK_SIZE+0xb4>)
    1fe6:	4798      	blx	r3
    1fe8:	0003      	movs	r3, r0
    1fea:	001a      	movs	r2, r3
    1fec:	2301      	movs	r3, #1
    1fee:	4053      	eors	r3, r2
    1ff0:	b2db      	uxtb	r3, r3
    1ff2:	2b00      	cmp	r3, #0
    1ff4:	d001      	beq.n	1ffa <spi_read_buffer_wait+0xe6>
				/* Not ready to read data within timeout period */
				return STATUS_ERR_TIMEOUT;
    1ff6:	2312      	movs	r3, #18
    1ff8:	e050      	b.n	209c <STACK_SIZE+0x9c>
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
    1ffa:	46c0      	nop			; (mov r8, r8)
    1ffc:	68fb      	ldr	r3, [r7, #12]
    1ffe:	0018      	movs	r0, r3
    2000:	4b2c      	ldr	r3, [pc, #176]	; (20b4 <STACK_SIZE+0xb4>)
    2002:	4798      	blx	r3
    2004:	0003      	movs	r3, r0
    2006:	001a      	movs	r2, r3
    2008:	2301      	movs	r3, #1
    200a:	4053      	eors	r3, r2
    200c:	b2db      	uxtb	r3, r3
    200e:	2b00      	cmp	r3, #0
    2010:	d1f4      	bne.n	1ffc <spi_read_buffer_wait+0xe8>
		}

		uint16_t received_data = 0;
    2012:	2314      	movs	r3, #20
    2014:	18fb      	adds	r3, r7, r3
    2016:	2200      	movs	r2, #0
    2018:	801a      	strh	r2, [r3, #0]
		enum status_code retval = spi_read(module, &received_data);
    201a:	2317      	movs	r3, #23
    201c:	18fc      	adds	r4, r7, r3
    201e:	2314      	movs	r3, #20
    2020:	18fa      	adds	r2, r7, r3
    2022:	68fb      	ldr	r3, [r7, #12]
    2024:	0011      	movs	r1, r2
    2026:	0018      	movs	r0, r3
    2028:	4b24      	ldr	r3, [pc, #144]	; (20bc <STACK_SIZE+0xbc>)
    202a:	4798      	blx	r3
    202c:	0003      	movs	r3, r0
    202e:	7023      	strb	r3, [r4, #0]

		if (retval != STATUS_OK) {
    2030:	2317      	movs	r3, #23
    2032:	18fb      	adds	r3, r7, r3
    2034:	781b      	ldrb	r3, [r3, #0]
    2036:	2b00      	cmp	r3, #0
    2038:	d003      	beq.n	2042 <STACK_SIZE+0x42>
			/* Overflow, abort */
			return retval;
    203a:	2317      	movs	r3, #23
    203c:	18fb      	adds	r3, r7, r3
    203e:	781b      	ldrb	r3, [r3, #0]
    2040:	e02c      	b.n	209c <STACK_SIZE+0x9c>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    2042:	231e      	movs	r3, #30
    2044:	18fb      	adds	r3, r7, r3
    2046:	881b      	ldrh	r3, [r3, #0]
    2048:	221e      	movs	r2, #30
    204a:	18ba      	adds	r2, r7, r2
    204c:	1c59      	adds	r1, r3, #1
    204e:	8011      	strh	r1, [r2, #0]
    2050:	001a      	movs	r2, r3
    2052:	68bb      	ldr	r3, [r7, #8]
    2054:	189b      	adds	r3, r3, r2
    2056:	2214      	movs	r2, #20
    2058:	18ba      	adds	r2, r7, r2
    205a:	8812      	ldrh	r2, [r2, #0]
    205c:	b2d2      	uxtb	r2, r2
    205e:	701a      	strb	r2, [r3, #0]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2060:	68fb      	ldr	r3, [r7, #12]
    2062:	799b      	ldrb	r3, [r3, #6]
    2064:	2b01      	cmp	r3, #1
    2066:	d110      	bne.n	208a <STACK_SIZE+0x8a>
			rx_data[rx_pos++] = (received_data >> 8);
    2068:	231e      	movs	r3, #30
    206a:	18fb      	adds	r3, r7, r3
    206c:	881b      	ldrh	r3, [r3, #0]
    206e:	221e      	movs	r2, #30
    2070:	18ba      	adds	r2, r7, r2
    2072:	1c59      	adds	r1, r3, #1
    2074:	8011      	strh	r1, [r2, #0]
    2076:	001a      	movs	r2, r3
    2078:	68bb      	ldr	r3, [r7, #8]
    207a:	189b      	adds	r3, r3, r2
    207c:	2214      	movs	r2, #20
    207e:	18ba      	adds	r2, r7, r2
    2080:	8812      	ldrh	r2, [r2, #0]
    2082:	0a12      	lsrs	r2, r2, #8
    2084:	b292      	uxth	r2, r2
    2086:	b2d2      	uxtb	r2, r2
    2088:	701a      	strb	r2, [r3, #0]
	while (length--) {
    208a:	1dbb      	adds	r3, r7, #6
    208c:	881b      	ldrh	r3, [r3, #0]
    208e:	1dba      	adds	r2, r7, #6
    2090:	1e59      	subs	r1, r3, #1
    2092:	8011      	strh	r1, [r2, #0]
    2094:	2b00      	cmp	r3, #0
    2096:	d000      	beq.n	209a <STACK_SIZE+0x9a>
    2098:	e769      	b.n	1f6e <spi_read_buffer_wait+0x5a>
		}
	}

	return STATUS_OK;
    209a:	2300      	movs	r3, #0
}
    209c:	0018      	movs	r0, r3
    209e:	46bd      	mov	sp, r7
    20a0:	b009      	add	sp, #36	; 0x24
    20a2:	bd90      	pop	{r4, r7, pc}
    20a4:	00001825 	.word	0x00001825
    20a8:	0000196d 	.word	0x0000196d
    20ac:	0000184d 	.word	0x0000184d
    20b0:	0000189d 	.word	0x0000189d
    20b4:	00001875 	.word	0x00001875
    20b8:	00002710 	.word	0x00002710
    20bc:	000018e5 	.word	0x000018e5

000020c0 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    20c0:	b580      	push	{r7, lr}
    20c2:	b086      	sub	sp, #24
    20c4:	af00      	add	r7, sp, #0
    20c6:	60f8      	str	r0, [r7, #12]
    20c8:	60b9      	str	r1, [r7, #8]
    20ca:	1dfb      	adds	r3, r7, #7
    20cc:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    20ce:	68fb      	ldr	r3, [r7, #12]
    20d0:	795b      	ldrb	r3, [r3, #5]
    20d2:	2b01      	cmp	r3, #1
    20d4:	d001      	beq.n	20da <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
    20d6:	2315      	movs	r3, #21
    20d8:	e05c      	b.n	2194 <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    20da:	68fb      	ldr	r3, [r7, #12]
    20dc:	7a1b      	ldrb	r3, [r3, #8]
    20de:	2201      	movs	r2, #1
    20e0:	4053      	eors	r3, r2
    20e2:	b2db      	uxtb	r3, r3
    20e4:	2b00      	cmp	r3, #0
    20e6:	d054      	beq.n	2192 <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
    20e8:	1dfb      	adds	r3, r7, #7
    20ea:	781b      	ldrb	r3, [r3, #0]
    20ec:	2b00      	cmp	r3, #0
    20ee:	d04a      	beq.n	2186 <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
    20f0:	68bb      	ldr	r3, [r7, #8]
    20f2:	785b      	ldrb	r3, [r3, #1]
    20f4:	2b00      	cmp	r3, #0
    20f6:	d03f      	beq.n	2178 <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
    20f8:	68fb      	ldr	r3, [r7, #12]
    20fa:	0018      	movs	r0, r3
    20fc:	4b27      	ldr	r3, [pc, #156]	; (219c <spi_select_slave+0xdc>)
    20fe:	4798      	blx	r3
    2100:	0003      	movs	r3, r0
    2102:	001a      	movs	r2, r3
    2104:	2301      	movs	r3, #1
    2106:	4053      	eors	r3, r2
    2108:	b2db      	uxtb	r3, r3
    210a:	2b00      	cmp	r3, #0
    210c:	d007      	beq.n	211e <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
    210e:	68bb      	ldr	r3, [r7, #8]
    2110:	781b      	ldrb	r3, [r3, #0]
    2112:	2101      	movs	r1, #1
    2114:	0018      	movs	r0, r3
    2116:	4b22      	ldr	r3, [pc, #136]	; (21a0 <spi_select_slave+0xe0>)
    2118:	4798      	blx	r3
					return STATUS_BUSY;
    211a:	2305      	movs	r3, #5
    211c:	e03a      	b.n	2194 <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    211e:	68bb      	ldr	r3, [r7, #8]
    2120:	781b      	ldrb	r3, [r3, #0]
    2122:	2100      	movs	r1, #0
    2124:	0018      	movs	r0, r3
    2126:	4b1e      	ldr	r3, [pc, #120]	; (21a0 <spi_select_slave+0xe0>)
    2128:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
    212a:	68bb      	ldr	r3, [r7, #8]
    212c:	789b      	ldrb	r3, [r3, #2]
    212e:	b29a      	uxth	r2, r3
    2130:	68fb      	ldr	r3, [r7, #12]
    2132:	0011      	movs	r1, r2
    2134:	0018      	movs	r0, r3
    2136:	4b1b      	ldr	r3, [pc, #108]	; (21a4 <spi_select_slave+0xe4>)
    2138:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
    213a:	68fb      	ldr	r3, [r7, #12]
    213c:	79db      	ldrb	r3, [r3, #7]
    213e:	2201      	movs	r2, #1
    2140:	4053      	eors	r3, r2
    2142:	b2db      	uxtb	r3, r3
    2144:	2b00      	cmp	r3, #0
    2146:	d024      	beq.n	2192 <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
    2148:	46c0      	nop			; (mov r8, r8)
    214a:	68fb      	ldr	r3, [r7, #12]
    214c:	0018      	movs	r0, r3
    214e:	4b16      	ldr	r3, [pc, #88]	; (21a8 <spi_select_slave+0xe8>)
    2150:	4798      	blx	r3
    2152:	0003      	movs	r3, r0
    2154:	001a      	movs	r2, r3
    2156:	2301      	movs	r3, #1
    2158:	4053      	eors	r3, r2
    215a:	b2db      	uxtb	r3, r3
    215c:	2b00      	cmp	r3, #0
    215e:	d1f4      	bne.n	214a <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
    2160:	2316      	movs	r3, #22
    2162:	18fb      	adds	r3, r7, r3
    2164:	2200      	movs	r2, #0
    2166:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
    2168:	2316      	movs	r3, #22
    216a:	18fa      	adds	r2, r7, r3
    216c:	68fb      	ldr	r3, [r7, #12]
    216e:	0011      	movs	r1, r2
    2170:	0018      	movs	r0, r3
    2172:	4b0e      	ldr	r3, [pc, #56]	; (21ac <spi_select_slave+0xec>)
    2174:	4798      	blx	r3
    2176:	e00c      	b.n	2192 <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    2178:	68bb      	ldr	r3, [r7, #8]
    217a:	781b      	ldrb	r3, [r3, #0]
    217c:	2100      	movs	r1, #0
    217e:	0018      	movs	r0, r3
    2180:	4b07      	ldr	r3, [pc, #28]	; (21a0 <spi_select_slave+0xe0>)
    2182:	4798      	blx	r3
    2184:	e005      	b.n	2192 <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
    2186:	68bb      	ldr	r3, [r7, #8]
    2188:	781b      	ldrb	r3, [r3, #0]
    218a:	2101      	movs	r1, #1
    218c:	0018      	movs	r0, r3
    218e:	4b04      	ldr	r3, [pc, #16]	; (21a0 <spi_select_slave+0xe0>)
    2190:	4798      	blx	r3
		}
	}
	return STATUS_OK;
    2192:	2300      	movs	r3, #0
}
    2194:	0018      	movs	r0, r3
    2196:	46bd      	mov	sp, r7
    2198:	b006      	add	sp, #24
    219a:	bd80      	pop	{r7, pc}
    219c:	0000184d 	.word	0x0000184d
    21a0:	0000173d 	.word	0x0000173d
    21a4:	0000189d 	.word	0x0000189d
    21a8:	00001875 	.word	0x00001875
    21ac:	000018e5 	.word	0x000018e5

000021b0 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    21b0:	b580      	push	{r7, lr}
    21b2:	b08a      	sub	sp, #40	; 0x28
    21b4:	af00      	add	r7, sp, #0
    21b6:	60f8      	str	r0, [r7, #12]
    21b8:	60b9      	str	r1, [r7, #8]
    21ba:	1dbb      	adds	r3, r7, #6
    21bc:	801a      	strh	r2, [r3, #0]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
	}
#  endif

	if (length == 0) {
    21be:	1dbb      	adds	r3, r7, #6
    21c0:	881b      	ldrh	r3, [r3, #0]
    21c2:	2b00      	cmp	r3, #0
    21c4:	d101      	bne.n	21ca <spi_write_buffer_wait+0x1a>
		return STATUS_ERR_INVALID_ARG;
    21c6:	2317      	movs	r3, #23
    21c8:	e16a      	b.n	24a0 <spi_write_buffer_wait+0x2f0>
	}

#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    21ca:	68fb      	ldr	r3, [r7, #12]
    21cc:	795b      	ldrb	r3, [r3, #5]
    21ce:	2b00      	cmp	r3, #0
    21d0:	d109      	bne.n	21e6 <spi_write_buffer_wait+0x36>
    21d2:	68fb      	ldr	r3, [r7, #12]
    21d4:	0018      	movs	r0, r3
    21d6:	4bb4      	ldr	r3, [pc, #720]	; (24a8 <spi_write_buffer_wait+0x2f8>)
    21d8:	4798      	blx	r3
    21da:	1e03      	subs	r3, r0, #0
    21dc:	d003      	beq.n	21e6 <spi_write_buffer_wait+0x36>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
    21de:	68fb      	ldr	r3, [r7, #12]
    21e0:	0018      	movs	r0, r3
    21e2:	4bb2      	ldr	r3, [pc, #712]	; (24ac <spi_write_buffer_wait+0x2fc>)
    21e4:	4798      	blx	r3
	}
#  endif

	uint16_t tx_pos = 0;
    21e6:	2326      	movs	r3, #38	; 0x26
    21e8:	18fb      	adds	r3, r7, r3
    21ea:	2200      	movs	r2, #0
    21ec:	801a      	strh	r2, [r3, #0]
	uint16_t flush_length = length;
    21ee:	2324      	movs	r3, #36	; 0x24
    21f0:	18fb      	adds	r3, r7, r3
    21f2:	1dba      	adds	r2, r7, #6
    21f4:	8812      	ldrh	r2, [r2, #0]
    21f6:	801a      	strh	r2, [r3, #0]

	/* Write block */
	while (length--) {
    21f8:	e0fe      	b.n	23f8 <spi_write_buffer_wait+0x248>
#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
    21fa:	68fb      	ldr	r3, [r7, #12]
    21fc:	795b      	ldrb	r3, [r3, #5]
    21fe:	2b00      	cmp	r3, #0
    2200:	d12a      	bne.n	2258 <spi_write_buffer_wait+0xa8>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    2202:	2300      	movs	r3, #0
    2204:	623b      	str	r3, [r7, #32]
    2206:	e008      	b.n	221a <spi_write_buffer_wait+0x6a>
				if (spi_is_ready_to_write(module)) {
    2208:	68fb      	ldr	r3, [r7, #12]
    220a:	0018      	movs	r0, r3
    220c:	4ba8      	ldr	r3, [pc, #672]	; (24b0 <spi_write_buffer_wait+0x300>)
    220e:	4798      	blx	r3
    2210:	1e03      	subs	r3, r0, #0
    2212:	d107      	bne.n	2224 <spi_write_buffer_wait+0x74>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    2214:	6a3b      	ldr	r3, [r7, #32]
    2216:	3301      	adds	r3, #1
    2218:	623b      	str	r3, [r7, #32]
    221a:	6a3b      	ldr	r3, [r7, #32]
    221c:	4aa5      	ldr	r2, [pc, #660]	; (24b4 <spi_write_buffer_wait+0x304>)
    221e:	4293      	cmp	r3, r2
    2220:	d9f2      	bls.n	2208 <spi_write_buffer_wait+0x58>
    2222:	e000      	b.n	2226 <spi_write_buffer_wait+0x76>
					break;
    2224:	46c0      	nop			; (mov r8, r8)
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
    2226:	68fb      	ldr	r3, [r7, #12]
    2228:	0018      	movs	r0, r3
    222a:	4b9f      	ldr	r3, [pc, #636]	; (24a8 <spi_write_buffer_wait+0x2f8>)
    222c:	4798      	blx	r3
    222e:	1e03      	subs	r3, r0, #0
    2230:	d005      	beq.n	223e <spi_write_buffer_wait+0x8e>
				_spi_clear_tx_complete_flag(module);
    2232:	68fb      	ldr	r3, [r7, #12]
    2234:	0018      	movs	r0, r3
    2236:	4b9d      	ldr	r3, [pc, #628]	; (24ac <spi_write_buffer_wait+0x2fc>)
    2238:	4798      	blx	r3
				return STATUS_ABORTED;
    223a:	2304      	movs	r3, #4
    223c:	e130      	b.n	24a0 <spi_write_buffer_wait+0x2f0>
			}

			if (!spi_is_ready_to_write(module)) {
    223e:	68fb      	ldr	r3, [r7, #12]
    2240:	0018      	movs	r0, r3
    2242:	4b9b      	ldr	r3, [pc, #620]	; (24b0 <spi_write_buffer_wait+0x300>)
    2244:	4798      	blx	r3
    2246:	0003      	movs	r3, r0
    2248:	001a      	movs	r2, r3
    224a:	2301      	movs	r3, #1
    224c:	4053      	eors	r3, r2
    224e:	b2db      	uxtb	r3, r3
    2250:	2b00      	cmp	r3, #0
    2252:	d001      	beq.n	2258 <spi_write_buffer_wait+0xa8>
				/* Not ready to write data within timeout period */
				return STATUS_ERR_TIMEOUT;
    2254:	2312      	movs	r3, #18
    2256:	e123      	b.n	24a0 <spi_write_buffer_wait+0x2f0>
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
    2258:	46c0      	nop			; (mov r8, r8)
    225a:	68fb      	ldr	r3, [r7, #12]
    225c:	0018      	movs	r0, r3
    225e:	4b94      	ldr	r3, [pc, #592]	; (24b0 <spi_write_buffer_wait+0x300>)
    2260:	4798      	blx	r3
    2262:	0003      	movs	r3, r0
    2264:	001a      	movs	r2, r3
    2266:	2301      	movs	r3, #1
    2268:	4053      	eors	r3, r2
    226a:	b2db      	uxtb	r3, r3
    226c:	2b00      	cmp	r3, #0
    226e:	d1f4      	bne.n	225a <spi_write_buffer_wait+0xaa>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
    2270:	2326      	movs	r3, #38	; 0x26
    2272:	18fb      	adds	r3, r7, r3
    2274:	881b      	ldrh	r3, [r3, #0]
    2276:	2226      	movs	r2, #38	; 0x26
    2278:	18ba      	adds	r2, r7, r2
    227a:	1c59      	adds	r1, r3, #1
    227c:	8011      	strh	r1, [r2, #0]
    227e:	001a      	movs	r2, r3
    2280:	68bb      	ldr	r3, [r7, #8]
    2282:	189b      	adds	r3, r3, r2
    2284:	781a      	ldrb	r2, [r3, #0]
    2286:	231e      	movs	r3, #30
    2288:	18fb      	adds	r3, r7, r3
    228a:	801a      	strh	r2, [r3, #0]

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    228c:	68fb      	ldr	r3, [r7, #12]
    228e:	799b      	ldrb	r3, [r3, #6]
    2290:	2b01      	cmp	r3, #1
    2292:	d115      	bne.n	22c0 <spi_write_buffer_wait+0x110>
			data_to_send |= (tx_data[tx_pos++] << 8);
    2294:	2326      	movs	r3, #38	; 0x26
    2296:	18fb      	adds	r3, r7, r3
    2298:	881b      	ldrh	r3, [r3, #0]
    229a:	2226      	movs	r2, #38	; 0x26
    229c:	18ba      	adds	r2, r7, r2
    229e:	1c59      	adds	r1, r3, #1
    22a0:	8011      	strh	r1, [r2, #0]
    22a2:	001a      	movs	r2, r3
    22a4:	68bb      	ldr	r3, [r7, #8]
    22a6:	189b      	adds	r3, r3, r2
    22a8:	781b      	ldrb	r3, [r3, #0]
    22aa:	021b      	lsls	r3, r3, #8
    22ac:	b21a      	sxth	r2, r3
    22ae:	231e      	movs	r3, #30
    22b0:	18fb      	adds	r3, r7, r3
    22b2:	2100      	movs	r1, #0
    22b4:	5e5b      	ldrsh	r3, [r3, r1]
    22b6:	4313      	orrs	r3, r2
    22b8:	b21a      	sxth	r2, r3
    22ba:	231e      	movs	r3, #30
    22bc:	18fb      	adds	r3, r7, r3
    22be:	801a      	strh	r2, [r3, #0]
		}

		/* Write the data to send */
		spi_write(module, data_to_send);
    22c0:	231e      	movs	r3, #30
    22c2:	18fb      	adds	r3, r7, r3
    22c4:	881a      	ldrh	r2, [r3, #0]
    22c6:	68fb      	ldr	r3, [r7, #12]
    22c8:	0011      	movs	r1, r2
    22ca:	0018      	movs	r0, r3
    22cc:	4b7a      	ldr	r3, [pc, #488]	; (24b8 <spi_write_buffer_wait+0x308>)
    22ce:	4798      	blx	r3

		if (module->receiver_enabled) {
    22d0:	68fb      	ldr	r3, [r7, #12]
    22d2:	79db      	ldrb	r3, [r3, #7]
    22d4:	2224      	movs	r2, #36	; 0x24
    22d6:	18ba      	adds	r2, r7, r2
    22d8:	2124      	movs	r1, #36	; 0x24
    22da:	1879      	adds	r1, r7, r1
    22dc:	8809      	ldrh	r1, [r1, #0]
    22de:	8011      	strh	r1, [r2, #0]
    22e0:	2b00      	cmp	r3, #0
    22e2:	d100      	bne.n	22e6 <spi_write_buffer_wait+0x136>
    22e4:	e088      	b.n	23f8 <spi_write_buffer_wait+0x248>
#  if CONF_SPI_SLAVE_ENABLE == true
			/* Start timeout period for slave */
			if (module->mode == SPI_MODE_SLAVE) {
    22e6:	68fb      	ldr	r3, [r7, #12]
    22e8:	795b      	ldrb	r3, [r3, #5]
    22ea:	2b00      	cmp	r3, #0
    22ec:	d000      	beq.n	22f0 <spi_write_buffer_wait+0x140>
    22ee:	e069      	b.n	23c4 <spi_write_buffer_wait+0x214>
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    22f0:	2300      	movs	r3, #0
    22f2:	61bb      	str	r3, [r7, #24]
    22f4:	e047      	b.n	2386 <spi_write_buffer_wait+0x1d6>
					if (length && spi_is_ready_to_write(module)) {
    22f6:	1dbb      	adds	r3, r7, #6
    22f8:	881b      	ldrh	r3, [r3, #0]
    22fa:	2b00      	cmp	r3, #0
    22fc:	d03a      	beq.n	2374 <spi_write_buffer_wait+0x1c4>
    22fe:	68fb      	ldr	r3, [r7, #12]
    2300:	0018      	movs	r0, r3
    2302:	4b6b      	ldr	r3, [pc, #428]	; (24b0 <spi_write_buffer_wait+0x300>)
    2304:	4798      	blx	r3
    2306:	1e03      	subs	r3, r0, #0
    2308:	d034      	beq.n	2374 <spi_write_buffer_wait+0x1c4>
						data_to_send = tx_data[tx_pos++];
    230a:	2326      	movs	r3, #38	; 0x26
    230c:	18fb      	adds	r3, r7, r3
    230e:	881b      	ldrh	r3, [r3, #0]
    2310:	2226      	movs	r2, #38	; 0x26
    2312:	18ba      	adds	r2, r7, r2
    2314:	1c59      	adds	r1, r3, #1
    2316:	8011      	strh	r1, [r2, #0]
    2318:	001a      	movs	r2, r3
    231a:	68bb      	ldr	r3, [r7, #8]
    231c:	189b      	adds	r3, r3, r2
    231e:	781a      	ldrb	r2, [r3, #0]
    2320:	231e      	movs	r3, #30
    2322:	18fb      	adds	r3, r7, r3
    2324:	801a      	strh	r2, [r3, #0]
						/* If 9-bit data, get next byte to send from the buffer */
						if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2326:	68fb      	ldr	r3, [r7, #12]
    2328:	799b      	ldrb	r3, [r3, #6]
    232a:	2b01      	cmp	r3, #1
    232c:	d115      	bne.n	235a <spi_write_buffer_wait+0x1aa>
							data_to_send |= (tx_data[tx_pos++] << 8);
    232e:	2326      	movs	r3, #38	; 0x26
    2330:	18fb      	adds	r3, r7, r3
    2332:	881b      	ldrh	r3, [r3, #0]
    2334:	2226      	movs	r2, #38	; 0x26
    2336:	18ba      	adds	r2, r7, r2
    2338:	1c59      	adds	r1, r3, #1
    233a:	8011      	strh	r1, [r2, #0]
    233c:	001a      	movs	r2, r3
    233e:	68bb      	ldr	r3, [r7, #8]
    2340:	189b      	adds	r3, r3, r2
    2342:	781b      	ldrb	r3, [r3, #0]
    2344:	021b      	lsls	r3, r3, #8
    2346:	b21a      	sxth	r2, r3
    2348:	231e      	movs	r3, #30
    234a:	18fb      	adds	r3, r7, r3
    234c:	2100      	movs	r1, #0
    234e:	5e5b      	ldrsh	r3, [r3, r1]
    2350:	4313      	orrs	r3, r2
    2352:	b21a      	sxth	r2, r3
    2354:	231e      	movs	r3, #30
    2356:	18fb      	adds	r3, r7, r3
    2358:	801a      	strh	r2, [r3, #0]
						}

						/* Write the data to send */
						spi_write(module, data_to_send);
    235a:	231e      	movs	r3, #30
    235c:	18fb      	adds	r3, r7, r3
    235e:	881a      	ldrh	r2, [r3, #0]
    2360:	68fb      	ldr	r3, [r7, #12]
    2362:	0011      	movs	r1, r2
    2364:	0018      	movs	r0, r3
    2366:	4b54      	ldr	r3, [pc, #336]	; (24b8 <spi_write_buffer_wait+0x308>)
    2368:	4798      	blx	r3
						length--;
    236a:	1dbb      	adds	r3, r7, #6
    236c:	881a      	ldrh	r2, [r3, #0]
    236e:	1dbb      	adds	r3, r7, #6
    2370:	3a01      	subs	r2, #1
    2372:	801a      	strh	r2, [r3, #0]
					}
					if (spi_is_ready_to_read(module)) {
    2374:	68fb      	ldr	r3, [r7, #12]
    2376:	0018      	movs	r0, r3
    2378:	4b50      	ldr	r3, [pc, #320]	; (24bc <spi_write_buffer_wait+0x30c>)
    237a:	4798      	blx	r3
    237c:	1e03      	subs	r3, r0, #0
    237e:	d107      	bne.n	2390 <spi_write_buffer_wait+0x1e0>
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    2380:	69bb      	ldr	r3, [r7, #24]
    2382:	3301      	adds	r3, #1
    2384:	61bb      	str	r3, [r7, #24]
    2386:	69bb      	ldr	r3, [r7, #24]
    2388:	4a4a      	ldr	r2, [pc, #296]	; (24b4 <spi_write_buffer_wait+0x304>)
    238a:	4293      	cmp	r3, r2
    238c:	d9b3      	bls.n	22f6 <spi_write_buffer_wait+0x146>
    238e:	e000      	b.n	2392 <spi_write_buffer_wait+0x1e2>
						break;
    2390:	46c0      	nop			; (mov r8, r8)
					}
				}

				/* Check if master has ended the transaction */
				if (spi_is_write_complete(module)) {
    2392:	68fb      	ldr	r3, [r7, #12]
    2394:	0018      	movs	r0, r3
    2396:	4b44      	ldr	r3, [pc, #272]	; (24a8 <spi_write_buffer_wait+0x2f8>)
    2398:	4798      	blx	r3
    239a:	1e03      	subs	r3, r0, #0
    239c:	d005      	beq.n	23aa <spi_write_buffer_wait+0x1fa>
					_spi_clear_tx_complete_flag(module);
    239e:	68fb      	ldr	r3, [r7, #12]
    23a0:	0018      	movs	r0, r3
    23a2:	4b42      	ldr	r3, [pc, #264]	; (24ac <spi_write_buffer_wait+0x2fc>)
    23a4:	4798      	blx	r3
					return STATUS_ABORTED;
    23a6:	2304      	movs	r3, #4
    23a8:	e07a      	b.n	24a0 <spi_write_buffer_wait+0x2f0>
				}

				if (!spi_is_ready_to_read(module)) {
    23aa:	68fb      	ldr	r3, [r7, #12]
    23ac:	0018      	movs	r0, r3
    23ae:	4b43      	ldr	r3, [pc, #268]	; (24bc <spi_write_buffer_wait+0x30c>)
    23b0:	4798      	blx	r3
    23b2:	0003      	movs	r3, r0
    23b4:	001a      	movs	r2, r3
    23b6:	2301      	movs	r3, #1
    23b8:	4053      	eors	r3, r2
    23ba:	b2db      	uxtb	r3, r3
    23bc:	2b00      	cmp	r3, #0
    23be:	d001      	beq.n	23c4 <spi_write_buffer_wait+0x214>
					/* Not ready to read data within timeout period */
					return STATUS_ERR_TIMEOUT;
    23c0:	2312      	movs	r3, #18
    23c2:	e06d      	b.n	24a0 <spi_write_buffer_wait+0x2f0>
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
    23c4:	46c0      	nop			; (mov r8, r8)
    23c6:	68fb      	ldr	r3, [r7, #12]
    23c8:	0018      	movs	r0, r3
    23ca:	4b3c      	ldr	r3, [pc, #240]	; (24bc <spi_write_buffer_wait+0x30c>)
    23cc:	4798      	blx	r3
    23ce:	0003      	movs	r3, r0
    23d0:	001a      	movs	r2, r3
    23d2:	2301      	movs	r3, #1
    23d4:	4053      	eors	r3, r2
    23d6:	b2db      	uxtb	r3, r3
    23d8:	2b00      	cmp	r3, #0
    23da:	d1f4      	bne.n	23c6 <spi_write_buffer_wait+0x216>
			}

			/* Flush read buffer */
			uint16_t flush;
			spi_read(module, &flush);
    23dc:	2312      	movs	r3, #18
    23de:	18fa      	adds	r2, r7, r3
    23e0:	68fb      	ldr	r3, [r7, #12]
    23e2:	0011      	movs	r1, r2
    23e4:	0018      	movs	r0, r3
    23e6:	4b36      	ldr	r3, [pc, #216]	; (24c0 <spi_write_buffer_wait+0x310>)
    23e8:	4798      	blx	r3
			flush_length--;
    23ea:	2324      	movs	r3, #36	; 0x24
    23ec:	18fb      	adds	r3, r7, r3
    23ee:	881a      	ldrh	r2, [r3, #0]
    23f0:	2324      	movs	r3, #36	; 0x24
    23f2:	18fb      	adds	r3, r7, r3
    23f4:	3a01      	subs	r2, #1
    23f6:	801a      	strh	r2, [r3, #0]
	while (length--) {
    23f8:	1dbb      	adds	r3, r7, #6
    23fa:	881b      	ldrh	r3, [r3, #0]
    23fc:	1dba      	adds	r2, r7, #6
    23fe:	1e59      	subs	r1, r3, #1
    2400:	8011      	strh	r1, [r2, #0]
    2402:	2b00      	cmp	r3, #0
    2404:	d000      	beq.n	2408 <spi_write_buffer_wait+0x258>
    2406:	e6f8      	b.n	21fa <spi_write_buffer_wait+0x4a>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
    2408:	68fb      	ldr	r3, [r7, #12]
    240a:	795b      	ldrb	r3, [r3, #5]
    240c:	2b01      	cmp	r3, #1
    240e:	d10b      	bne.n	2428 <spi_write_buffer_wait+0x278>
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
    2410:	46c0      	nop			; (mov r8, r8)
    2412:	68fb      	ldr	r3, [r7, #12]
    2414:	0018      	movs	r0, r3
    2416:	4b24      	ldr	r3, [pc, #144]	; (24a8 <spi_write_buffer_wait+0x2f8>)
    2418:	4798      	blx	r3
    241a:	0003      	movs	r3, r0
    241c:	001a      	movs	r2, r3
    241e:	2301      	movs	r3, #1
    2420:	4053      	eors	r3, r2
    2422:	b2db      	uxtb	r3, r3
    2424:	2b00      	cmp	r3, #0
    2426:	d1f4      	bne.n	2412 <spi_write_buffer_wait+0x262>
		}
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
    2428:	68fb      	ldr	r3, [r7, #12]
    242a:	795b      	ldrb	r3, [r3, #5]
    242c:	2b00      	cmp	r3, #0
    242e:	d136      	bne.n	249e <spi_write_buffer_wait+0x2ee>
		if (module->receiver_enabled) {
    2430:	68fb      	ldr	r3, [r7, #12]
    2432:	79db      	ldrb	r3, [r3, #7]
    2434:	2b00      	cmp	r3, #0
    2436:	d032      	beq.n	249e <spi_write_buffer_wait+0x2ee>
			while (flush_length) {
    2438:	e02c      	b.n	2494 <spi_write_buffer_wait+0x2e4>
				/* Start timeout period for slave */
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    243a:	2300      	movs	r3, #0
    243c:	617b      	str	r3, [r7, #20]
    243e:	e008      	b.n	2452 <spi_write_buffer_wait+0x2a2>
					if (spi_is_ready_to_read(module)) {
    2440:	68fb      	ldr	r3, [r7, #12]
    2442:	0018      	movs	r0, r3
    2444:	4b1d      	ldr	r3, [pc, #116]	; (24bc <spi_write_buffer_wait+0x30c>)
    2446:	4798      	blx	r3
    2448:	1e03      	subs	r3, r0, #0
    244a:	d107      	bne.n	245c <spi_write_buffer_wait+0x2ac>
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    244c:	697b      	ldr	r3, [r7, #20]
    244e:	3301      	adds	r3, #1
    2450:	617b      	str	r3, [r7, #20]
    2452:	697b      	ldr	r3, [r7, #20]
    2454:	4a17      	ldr	r2, [pc, #92]	; (24b4 <spi_write_buffer_wait+0x304>)
    2456:	4293      	cmp	r3, r2
    2458:	d9f2      	bls.n	2440 <spi_write_buffer_wait+0x290>
    245a:	e000      	b.n	245e <spi_write_buffer_wait+0x2ae>
						break;
    245c:	46c0      	nop			; (mov r8, r8)
					}
				}
				if (!spi_is_ready_to_read(module)) {
    245e:	68fb      	ldr	r3, [r7, #12]
    2460:	0018      	movs	r0, r3
    2462:	4b16      	ldr	r3, [pc, #88]	; (24bc <spi_write_buffer_wait+0x30c>)
    2464:	4798      	blx	r3
    2466:	0003      	movs	r3, r0
    2468:	001a      	movs	r2, r3
    246a:	2301      	movs	r3, #1
    246c:	4053      	eors	r3, r2
    246e:	b2db      	uxtb	r3, r3
    2470:	2b00      	cmp	r3, #0
    2472:	d001      	beq.n	2478 <spi_write_buffer_wait+0x2c8>
					/* Not ready to read data within timeout period */
					return STATUS_ERR_TIMEOUT;
    2474:	2312      	movs	r3, #18
    2476:	e013      	b.n	24a0 <spi_write_buffer_wait+0x2f0>
				}
				/* Flush read buffer */
				uint16_t flush;
				spi_read(module, &flush);
    2478:	2310      	movs	r3, #16
    247a:	18fa      	adds	r2, r7, r3
    247c:	68fb      	ldr	r3, [r7, #12]
    247e:	0011      	movs	r1, r2
    2480:	0018      	movs	r0, r3
    2482:	4b0f      	ldr	r3, [pc, #60]	; (24c0 <spi_write_buffer_wait+0x310>)
    2484:	4798      	blx	r3
				flush_length--;
    2486:	2324      	movs	r3, #36	; 0x24
    2488:	18fb      	adds	r3, r7, r3
    248a:	881a      	ldrh	r2, [r3, #0]
    248c:	2324      	movs	r3, #36	; 0x24
    248e:	18fb      	adds	r3, r7, r3
    2490:	3a01      	subs	r2, #1
    2492:	801a      	strh	r2, [r3, #0]
			while (flush_length) {
    2494:	2324      	movs	r3, #36	; 0x24
    2496:	18fb      	adds	r3, r7, r3
    2498:	881b      	ldrh	r3, [r3, #0]
    249a:	2b00      	cmp	r3, #0
    249c:	d1cd      	bne.n	243a <spi_write_buffer_wait+0x28a>
			}
		}
	}
#  endif
	return STATUS_OK;
    249e:	2300      	movs	r3, #0
}
    24a0:	0018      	movs	r0, r3
    24a2:	46bd      	mov	sp, r7
    24a4:	b00a      	add	sp, #40	; 0x28
    24a6:	bd80      	pop	{r7, pc}
    24a8:	00001825 	.word	0x00001825
    24ac:	0000196d 	.word	0x0000196d
    24b0:	0000184d 	.word	0x0000184d
    24b4:	00002710 	.word	0x00002710
    24b8:	0000189d 	.word	0x0000189d
    24bc:	00001875 	.word	0x00001875
    24c0:	000018e5 	.word	0x000018e5

000024c4 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
    24c4:	b580      	push	{r7, lr}
    24c6:	b084      	sub	sp, #16
    24c8:	af00      	add	r7, sp, #0
    24ca:	0002      	movs	r2, r0
    24cc:	1dfb      	adds	r3, r7, #7
    24ce:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    24d0:	230f      	movs	r3, #15
    24d2:	18fb      	adds	r3, r7, r3
    24d4:	1dfa      	adds	r2, r7, #7
    24d6:	7812      	ldrb	r2, [r2, #0]
    24d8:	0952      	lsrs	r2, r2, #5
    24da:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
    24dc:	230f      	movs	r3, #15
    24de:	18fb      	adds	r3, r7, r3
    24e0:	781b      	ldrb	r3, [r3, #0]
    24e2:	2b00      	cmp	r3, #0
    24e4:	d10c      	bne.n	2500 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    24e6:	4b09      	ldr	r3, [pc, #36]	; (250c <_extint_get_eic_from_channel+0x48>)
    24e8:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
    24ea:	230f      	movs	r3, #15
    24ec:	18fb      	adds	r3, r7, r3
    24ee:	781b      	ldrb	r3, [r3, #0]
    24f0:	009b      	lsls	r3, r3, #2
    24f2:	2210      	movs	r2, #16
    24f4:	4694      	mov	ip, r2
    24f6:	44bc      	add	ip, r7
    24f8:	4463      	add	r3, ip
    24fa:	3b08      	subs	r3, #8
    24fc:	681b      	ldr	r3, [r3, #0]
    24fe:	e000      	b.n	2502 <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
    2500:	2300      	movs	r3, #0
	}
}
    2502:	0018      	movs	r0, r3
    2504:	46bd      	mov	sp, r7
    2506:	b004      	add	sp, #16
    2508:	bd80      	pop	{r7, pc}
    250a:	46c0      	nop			; (mov r8, r8)
    250c:	40001800 	.word	0x40001800

00002510 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
    2510:	b580      	push	{r7, lr}
    2512:	b084      	sub	sp, #16
    2514:	af00      	add	r7, sp, #0
    2516:	0002      	movs	r2, r0
    2518:	1dfb      	adds	r3, r7, #7
    251a:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    251c:	1dfb      	adds	r3, r7, #7
    251e:	781b      	ldrb	r3, [r3, #0]
    2520:	0018      	movs	r0, r3
    2522:	4b0b      	ldr	r3, [pc, #44]	; (2550 <extint_chan_is_detected+0x40>)
    2524:	4798      	blx	r3
    2526:	0003      	movs	r3, r0
    2528:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    252a:	1dfb      	adds	r3, r7, #7
    252c:	781b      	ldrb	r3, [r3, #0]
    252e:	221f      	movs	r2, #31
    2530:	4013      	ands	r3, r2
    2532:	2201      	movs	r2, #1
    2534:	409a      	lsls	r2, r3
    2536:	0013      	movs	r3, r2
    2538:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
    253a:	68fb      	ldr	r3, [r7, #12]
    253c:	691b      	ldr	r3, [r3, #16]
    253e:	68ba      	ldr	r2, [r7, #8]
    2540:	4013      	ands	r3, r2
    2542:	1e5a      	subs	r2, r3, #1
    2544:	4193      	sbcs	r3, r2
    2546:	b2db      	uxtb	r3, r3
}
    2548:	0018      	movs	r0, r3
    254a:	46bd      	mov	sp, r7
    254c:	b004      	add	sp, #16
    254e:	bd80      	pop	{r7, pc}
    2550:	000024c5 	.word	0x000024c5

00002554 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
    2554:	b580      	push	{r7, lr}
    2556:	b084      	sub	sp, #16
    2558:	af00      	add	r7, sp, #0
    255a:	0002      	movs	r2, r0
    255c:	1dfb      	adds	r3, r7, #7
    255e:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    2560:	1dfb      	adds	r3, r7, #7
    2562:	781b      	ldrb	r3, [r3, #0]
    2564:	0018      	movs	r0, r3
    2566:	4b09      	ldr	r3, [pc, #36]	; (258c <extint_chan_clear_detected+0x38>)
    2568:	4798      	blx	r3
    256a:	0003      	movs	r3, r0
    256c:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    256e:	1dfb      	adds	r3, r7, #7
    2570:	781b      	ldrb	r3, [r3, #0]
    2572:	221f      	movs	r2, #31
    2574:	4013      	ands	r3, r2
    2576:	2201      	movs	r2, #1
    2578:	409a      	lsls	r2, r3
    257a:	0013      	movs	r3, r2
    257c:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
    257e:	68fb      	ldr	r3, [r7, #12]
    2580:	68ba      	ldr	r2, [r7, #8]
    2582:	611a      	str	r2, [r3, #16]
}
    2584:	46c0      	nop			; (mov r8, r8)
    2586:	46bd      	mov	sp, r7
    2588:	b004      	add	sp, #16
    258a:	bd80      	pop	{r7, pc}
    258c:	000024c5 	.word	0x000024c5

00002590 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    2590:	b580      	push	{r7, lr}
    2592:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    2594:	4b15      	ldr	r3, [pc, #84]	; (25ec <EIC_Handler+0x5c>)
    2596:	2200      	movs	r2, #0
    2598:	701a      	strb	r2, [r3, #0]
    259a:	e020      	b.n	25de <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
    259c:	4b13      	ldr	r3, [pc, #76]	; (25ec <EIC_Handler+0x5c>)
    259e:	781b      	ldrb	r3, [r3, #0]
    25a0:	0018      	movs	r0, r3
    25a2:	4b13      	ldr	r3, [pc, #76]	; (25f0 <EIC_Handler+0x60>)
    25a4:	4798      	blx	r3
    25a6:	1e03      	subs	r3, r0, #0
    25a8:	d013      	beq.n	25d2 <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
    25aa:	4b10      	ldr	r3, [pc, #64]	; (25ec <EIC_Handler+0x5c>)
    25ac:	781b      	ldrb	r3, [r3, #0]
    25ae:	0018      	movs	r0, r3
    25b0:	4b10      	ldr	r3, [pc, #64]	; (25f4 <EIC_Handler+0x64>)
    25b2:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    25b4:	4b0d      	ldr	r3, [pc, #52]	; (25ec <EIC_Handler+0x5c>)
    25b6:	781b      	ldrb	r3, [r3, #0]
    25b8:	001a      	movs	r2, r3
    25ba:	4b0f      	ldr	r3, [pc, #60]	; (25f8 <EIC_Handler+0x68>)
    25bc:	0092      	lsls	r2, r2, #2
    25be:	58d3      	ldr	r3, [r2, r3]
    25c0:	2b00      	cmp	r3, #0
    25c2:	d006      	beq.n	25d2 <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    25c4:	4b09      	ldr	r3, [pc, #36]	; (25ec <EIC_Handler+0x5c>)
    25c6:	781b      	ldrb	r3, [r3, #0]
    25c8:	001a      	movs	r2, r3
    25ca:	4b0b      	ldr	r3, [pc, #44]	; (25f8 <EIC_Handler+0x68>)
    25cc:	0092      	lsls	r2, r2, #2
    25ce:	58d3      	ldr	r3, [r2, r3]
    25d0:	4798      	blx	r3
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    25d2:	4b06      	ldr	r3, [pc, #24]	; (25ec <EIC_Handler+0x5c>)
    25d4:	781b      	ldrb	r3, [r3, #0]
    25d6:	3301      	adds	r3, #1
    25d8:	b2da      	uxtb	r2, r3
    25da:	4b04      	ldr	r3, [pc, #16]	; (25ec <EIC_Handler+0x5c>)
    25dc:	701a      	strb	r2, [r3, #0]
    25de:	4b03      	ldr	r3, [pc, #12]	; (25ec <EIC_Handler+0x5c>)
    25e0:	781b      	ldrb	r3, [r3, #0]
    25e2:	2b0f      	cmp	r3, #15
    25e4:	d9da      	bls.n	259c <EIC_Handler+0xc>
			}
		}
	}
}
    25e6:	46c0      	nop			; (mov r8, r8)
    25e8:	46bd      	mov	sp, r7
    25ea:	bd80      	pop	{r7, pc}
    25ec:	200000fc 	.word	0x200000fc
    25f0:	00002511 	.word	0x00002511
    25f4:	00002555 	.word	0x00002555
    25f8:	20000054 	.word	0x20000054

000025fc <system_pinmux_get_config_defaults>:
{
    25fc:	b580      	push	{r7, lr}
    25fe:	b082      	sub	sp, #8
    2600:	af00      	add	r7, sp, #0
    2602:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    2604:	687b      	ldr	r3, [r7, #4]
    2606:	2280      	movs	r2, #128	; 0x80
    2608:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    260a:	687b      	ldr	r3, [r7, #4]
    260c:	2200      	movs	r2, #0
    260e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    2610:	687b      	ldr	r3, [r7, #4]
    2612:	2201      	movs	r2, #1
    2614:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    2616:	687b      	ldr	r3, [r7, #4]
    2618:	2200      	movs	r2, #0
    261a:	70da      	strb	r2, [r3, #3]
}
    261c:	46c0      	nop			; (mov r8, r8)
    261e:	46bd      	mov	sp, r7
    2620:	b002      	add	sp, #8
    2622:	bd80      	pop	{r7, pc}

00002624 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    2624:	b580      	push	{r7, lr}
    2626:	b084      	sub	sp, #16
    2628:	af00      	add	r7, sp, #0
    262a:	0002      	movs	r2, r0
    262c:	6039      	str	r1, [r7, #0]
    262e:	1dfb      	adds	r3, r7, #7
    2630:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    2632:	230c      	movs	r3, #12
    2634:	18fb      	adds	r3, r7, r3
    2636:	0018      	movs	r0, r3
    2638:	4b10      	ldr	r3, [pc, #64]	; (267c <port_pin_set_config+0x58>)
    263a:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
    263c:	230c      	movs	r3, #12
    263e:	18fb      	adds	r3, r7, r3
    2640:	2280      	movs	r2, #128	; 0x80
    2642:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    2644:	683b      	ldr	r3, [r7, #0]
    2646:	781a      	ldrb	r2, [r3, #0]
    2648:	230c      	movs	r3, #12
    264a:	18fb      	adds	r3, r7, r3
    264c:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    264e:	683b      	ldr	r3, [r7, #0]
    2650:	785a      	ldrb	r2, [r3, #1]
    2652:	230c      	movs	r3, #12
    2654:	18fb      	adds	r3, r7, r3
    2656:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    2658:	683b      	ldr	r3, [r7, #0]
    265a:	789a      	ldrb	r2, [r3, #2]
    265c:	230c      	movs	r3, #12
    265e:	18fb      	adds	r3, r7, r3
    2660:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    2662:	230c      	movs	r3, #12
    2664:	18fa      	adds	r2, r7, r3
    2666:	1dfb      	adds	r3, r7, #7
    2668:	781b      	ldrb	r3, [r3, #0]
    266a:	0011      	movs	r1, r2
    266c:	0018      	movs	r0, r3
    266e:	4b04      	ldr	r3, [pc, #16]	; (2680 <port_pin_set_config+0x5c>)
    2670:	4798      	blx	r3
}
    2672:	46c0      	nop			; (mov r8, r8)
    2674:	46bd      	mov	sp, r7
    2676:	b004      	add	sp, #16
    2678:	bd80      	pop	{r7, pc}
    267a:	46c0      	nop			; (mov r8, r8)
    267c:	000025fd 	.word	0x000025fd
    2680:	00003185 	.word	0x00003185

00002684 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    2684:	b580      	push	{r7, lr}
    2686:	af00      	add	r7, sp, #0
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    2688:	46c0      	nop			; (mov r8, r8)
    268a:	46bd      	mov	sp, r7
    268c:	bd80      	pop	{r7, pc}
	...

00002690 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    2690:	b580      	push	{r7, lr}
    2692:	b082      	sub	sp, #8
    2694:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    2696:	4b10      	ldr	r3, [pc, #64]	; (26d8 <cpu_irq_enter_critical+0x48>)
    2698:	681b      	ldr	r3, [r3, #0]
    269a:	2b00      	cmp	r3, #0
    269c:	d112      	bne.n	26c4 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    269e:	f3ef 8310 	mrs	r3, PRIMASK
    26a2:	607b      	str	r3, [r7, #4]
  return(result);
    26a4:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    26a6:	2b00      	cmp	r3, #0
    26a8:	d109      	bne.n	26be <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
    26aa:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    26ac:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    26b0:	4b0a      	ldr	r3, [pc, #40]	; (26dc <cpu_irq_enter_critical+0x4c>)
    26b2:	2200      	movs	r2, #0
    26b4:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    26b6:	4b0a      	ldr	r3, [pc, #40]	; (26e0 <cpu_irq_enter_critical+0x50>)
    26b8:	2201      	movs	r2, #1
    26ba:	701a      	strb	r2, [r3, #0]
    26bc:	e002      	b.n	26c4 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    26be:	4b08      	ldr	r3, [pc, #32]	; (26e0 <cpu_irq_enter_critical+0x50>)
    26c0:	2200      	movs	r2, #0
    26c2:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    26c4:	4b04      	ldr	r3, [pc, #16]	; (26d8 <cpu_irq_enter_critical+0x48>)
    26c6:	681b      	ldr	r3, [r3, #0]
    26c8:	1c5a      	adds	r2, r3, #1
    26ca:	4b03      	ldr	r3, [pc, #12]	; (26d8 <cpu_irq_enter_critical+0x48>)
    26cc:	601a      	str	r2, [r3, #0]
}
    26ce:	46c0      	nop			; (mov r8, r8)
    26d0:	46bd      	mov	sp, r7
    26d2:	b002      	add	sp, #8
    26d4:	bd80      	pop	{r7, pc}
    26d6:	46c0      	nop			; (mov r8, r8)
    26d8:	20000030 	.word	0x20000030
    26dc:	20000008 	.word	0x20000008
    26e0:	20000034 	.word	0x20000034

000026e4 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    26e4:	b580      	push	{r7, lr}
    26e6:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    26e8:	4b0b      	ldr	r3, [pc, #44]	; (2718 <cpu_irq_leave_critical+0x34>)
    26ea:	681b      	ldr	r3, [r3, #0]
    26ec:	1e5a      	subs	r2, r3, #1
    26ee:	4b0a      	ldr	r3, [pc, #40]	; (2718 <cpu_irq_leave_critical+0x34>)
    26f0:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    26f2:	4b09      	ldr	r3, [pc, #36]	; (2718 <cpu_irq_leave_critical+0x34>)
    26f4:	681b      	ldr	r3, [r3, #0]
    26f6:	2b00      	cmp	r3, #0
    26f8:	d10a      	bne.n	2710 <cpu_irq_leave_critical+0x2c>
    26fa:	4b08      	ldr	r3, [pc, #32]	; (271c <cpu_irq_leave_critical+0x38>)
    26fc:	781b      	ldrb	r3, [r3, #0]
    26fe:	b2db      	uxtb	r3, r3
    2700:	2b00      	cmp	r3, #0
    2702:	d005      	beq.n	2710 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    2704:	4b06      	ldr	r3, [pc, #24]	; (2720 <cpu_irq_leave_critical+0x3c>)
    2706:	2201      	movs	r2, #1
    2708:	701a      	strb	r2, [r3, #0]
    270a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    270e:	b662      	cpsie	i
	}
}
    2710:	46c0      	nop			; (mov r8, r8)
    2712:	46bd      	mov	sp, r7
    2714:	bd80      	pop	{r7, pc}
    2716:	46c0      	nop			; (mov r8, r8)
    2718:	20000030 	.word	0x20000030
    271c:	20000034 	.word	0x20000034
    2720:	20000008 	.word	0x20000008

00002724 <system_gclk_gen_get_config_defaults>:
{
    2724:	b580      	push	{r7, lr}
    2726:	b082      	sub	sp, #8
    2728:	af00      	add	r7, sp, #0
    272a:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
    272c:	687b      	ldr	r3, [r7, #4]
    272e:	2201      	movs	r2, #1
    2730:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    2732:	687b      	ldr	r3, [r7, #4]
    2734:	2200      	movs	r2, #0
    2736:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    2738:	687b      	ldr	r3, [r7, #4]
    273a:	2206      	movs	r2, #6
    273c:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
    273e:	687b      	ldr	r3, [r7, #4]
    2740:	2200      	movs	r2, #0
    2742:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    2744:	687b      	ldr	r3, [r7, #4]
    2746:	2200      	movs	r2, #0
    2748:	725a      	strb	r2, [r3, #9]
}
    274a:	46c0      	nop			; (mov r8, r8)
    274c:	46bd      	mov	sp, r7
    274e:	b002      	add	sp, #8
    2750:	bd80      	pop	{r7, pc}

00002752 <system_clock_source_osc8m_get_config_defaults>:
{
    2752:	b580      	push	{r7, lr}
    2754:	b082      	sub	sp, #8
    2756:	af00      	add	r7, sp, #0
    2758:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    275a:	687b      	ldr	r3, [r7, #4]
    275c:	2203      	movs	r2, #3
    275e:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    2760:	687b      	ldr	r3, [r7, #4]
    2762:	2200      	movs	r2, #0
    2764:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    2766:	687b      	ldr	r3, [r7, #4]
    2768:	2201      	movs	r2, #1
    276a:	709a      	strb	r2, [r3, #2]
}
    276c:	46c0      	nop			; (mov r8, r8)
    276e:	46bd      	mov	sp, r7
    2770:	b002      	add	sp, #8
    2772:	bd80      	pop	{r7, pc}

00002774 <system_cpu_clock_set_divider>:
{
    2774:	b580      	push	{r7, lr}
    2776:	b082      	sub	sp, #8
    2778:	af00      	add	r7, sp, #0
    277a:	0002      	movs	r2, r0
    277c:	1dfb      	adds	r3, r7, #7
    277e:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
    2780:	4a03      	ldr	r2, [pc, #12]	; (2790 <system_cpu_clock_set_divider+0x1c>)
    2782:	1dfb      	adds	r3, r7, #7
    2784:	781b      	ldrb	r3, [r3, #0]
    2786:	7213      	strb	r3, [r2, #8]
}
    2788:	46c0      	nop			; (mov r8, r8)
    278a:	46bd      	mov	sp, r7
    278c:	b002      	add	sp, #8
    278e:	bd80      	pop	{r7, pc}
    2790:	40000400 	.word	0x40000400

00002794 <system_apb_clock_set_divider>:
{
    2794:	b580      	push	{r7, lr}
    2796:	b082      	sub	sp, #8
    2798:	af00      	add	r7, sp, #0
    279a:	0002      	movs	r2, r0
    279c:	1dfb      	adds	r3, r7, #7
    279e:	701a      	strb	r2, [r3, #0]
    27a0:	1dbb      	adds	r3, r7, #6
    27a2:	1c0a      	adds	r2, r1, #0
    27a4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    27a6:	1dfb      	adds	r3, r7, #7
    27a8:	781b      	ldrb	r3, [r3, #0]
    27aa:	2b01      	cmp	r3, #1
    27ac:	d008      	beq.n	27c0 <system_apb_clock_set_divider+0x2c>
    27ae:	2b02      	cmp	r3, #2
    27b0:	d00b      	beq.n	27ca <system_apb_clock_set_divider+0x36>
    27b2:	2b00      	cmp	r3, #0
    27b4:	d10e      	bne.n	27d4 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
    27b6:	4a0b      	ldr	r2, [pc, #44]	; (27e4 <system_apb_clock_set_divider+0x50>)
    27b8:	1dbb      	adds	r3, r7, #6
    27ba:	781b      	ldrb	r3, [r3, #0]
    27bc:	7253      	strb	r3, [r2, #9]
			break;
    27be:	e00b      	b.n	27d8 <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
    27c0:	4a08      	ldr	r2, [pc, #32]	; (27e4 <system_apb_clock_set_divider+0x50>)
    27c2:	1dbb      	adds	r3, r7, #6
    27c4:	781b      	ldrb	r3, [r3, #0]
    27c6:	7293      	strb	r3, [r2, #10]
			break;
    27c8:	e006      	b.n	27d8 <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
    27ca:	4a06      	ldr	r2, [pc, #24]	; (27e4 <system_apb_clock_set_divider+0x50>)
    27cc:	1dbb      	adds	r3, r7, #6
    27ce:	781b      	ldrb	r3, [r3, #0]
    27d0:	72d3      	strb	r3, [r2, #11]
			break;
    27d2:	e001      	b.n	27d8 <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
    27d4:	2317      	movs	r3, #23
    27d6:	e000      	b.n	27da <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
    27d8:	2300      	movs	r3, #0
}
    27da:	0018      	movs	r0, r3
    27dc:	46bd      	mov	sp, r7
    27de:	b002      	add	sp, #8
    27e0:	bd80      	pop	{r7, pc}
    27e2:	46c0      	nop			; (mov r8, r8)
    27e4:	40000400 	.word	0x40000400

000027e8 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    27e8:	b580      	push	{r7, lr}
    27ea:	b082      	sub	sp, #8
    27ec:	af00      	add	r7, sp, #0
    27ee:	0002      	movs	r2, r0
    27f0:	1dfb      	adds	r3, r7, #7
    27f2:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    27f4:	4a08      	ldr	r2, [pc, #32]	; (2818 <system_flash_set_waitstates+0x30>)
    27f6:	1dfb      	adds	r3, r7, #7
    27f8:	781b      	ldrb	r3, [r3, #0]
    27fa:	210f      	movs	r1, #15
    27fc:	400b      	ands	r3, r1
    27fe:	b2d9      	uxtb	r1, r3
    2800:	6853      	ldr	r3, [r2, #4]
    2802:	200f      	movs	r0, #15
    2804:	4001      	ands	r1, r0
    2806:	0049      	lsls	r1, r1, #1
    2808:	201e      	movs	r0, #30
    280a:	4383      	bics	r3, r0
    280c:	430b      	orrs	r3, r1
    280e:	6053      	str	r3, [r2, #4]
}
    2810:	46c0      	nop			; (mov r8, r8)
    2812:	46bd      	mov	sp, r7
    2814:	b002      	add	sp, #8
    2816:	bd80      	pop	{r7, pc}
    2818:	41004000 	.word	0x41004000

0000281c <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    281c:	b580      	push	{r7, lr}
    281e:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2820:	46c0      	nop			; (mov r8, r8)
    2822:	4b04      	ldr	r3, [pc, #16]	; (2834 <_system_dfll_wait_for_sync+0x18>)
    2824:	68db      	ldr	r3, [r3, #12]
    2826:	2210      	movs	r2, #16
    2828:	4013      	ands	r3, r2
    282a:	d0fa      	beq.n	2822 <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    282c:	46c0      	nop			; (mov r8, r8)
    282e:	46bd      	mov	sp, r7
    2830:	bd80      	pop	{r7, pc}
    2832:	46c0      	nop			; (mov r8, r8)
    2834:	40000800 	.word	0x40000800

00002838 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    2838:	b580      	push	{r7, lr}
    283a:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    283c:	4b0c      	ldr	r3, [pc, #48]	; (2870 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    283e:	2202      	movs	r2, #2
    2840:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    2842:	4b0c      	ldr	r3, [pc, #48]	; (2874 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    2844:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    2846:	4a0a      	ldr	r2, [pc, #40]	; (2870 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    2848:	4b0b      	ldr	r3, [pc, #44]	; (2878 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    284a:	689b      	ldr	r3, [r3, #8]
    284c:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    284e:	4a08      	ldr	r2, [pc, #32]	; (2870 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    2850:	4b09      	ldr	r3, [pc, #36]	; (2878 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    2852:	685b      	ldr	r3, [r3, #4]
    2854:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    2856:	4b06      	ldr	r3, [pc, #24]	; (2870 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    2858:	2200      	movs	r2, #0
    285a:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    285c:	4b05      	ldr	r3, [pc, #20]	; (2874 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    285e:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    2860:	4a03      	ldr	r2, [pc, #12]	; (2870 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    2862:	4b05      	ldr	r3, [pc, #20]	; (2878 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    2864:	681b      	ldr	r3, [r3, #0]
    2866:	b29b      	uxth	r3, r3
    2868:	8493      	strh	r3, [r2, #36]	; 0x24
}
    286a:	46c0      	nop			; (mov r8, r8)
    286c:	46bd      	mov	sp, r7
    286e:	bd80      	pop	{r7, pc}
    2870:	40000800 	.word	0x40000800
    2874:	0000281d 	.word	0x0000281d
    2878:	20000038 	.word	0x20000038

0000287c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    287c:	b580      	push	{r7, lr}
    287e:	b082      	sub	sp, #8
    2880:	af00      	add	r7, sp, #0
    2882:	0002      	movs	r2, r0
    2884:	1dfb      	adds	r3, r7, #7
    2886:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    2888:	1dfb      	adds	r3, r7, #7
    288a:	781b      	ldrb	r3, [r3, #0]
    288c:	2b08      	cmp	r3, #8
    288e:	d841      	bhi.n	2914 <system_clock_source_get_hz+0x98>
    2890:	009a      	lsls	r2, r3, #2
    2892:	4b23      	ldr	r3, [pc, #140]	; (2920 <system_clock_source_get_hz+0xa4>)
    2894:	18d3      	adds	r3, r2, r3
    2896:	681b      	ldr	r3, [r3, #0]
    2898:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    289a:	4b22      	ldr	r3, [pc, #136]	; (2924 <system_clock_source_get_hz+0xa8>)
    289c:	691b      	ldr	r3, [r3, #16]
    289e:	e03a      	b.n	2916 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    28a0:	4b21      	ldr	r3, [pc, #132]	; (2928 <system_clock_source_get_hz+0xac>)
    28a2:	6a1b      	ldr	r3, [r3, #32]
    28a4:	059b      	lsls	r3, r3, #22
    28a6:	0f9b      	lsrs	r3, r3, #30
    28a8:	b2db      	uxtb	r3, r3
    28aa:	001a      	movs	r2, r3
    28ac:	4b1f      	ldr	r3, [pc, #124]	; (292c <system_clock_source_get_hz+0xb0>)
    28ae:	40d3      	lsrs	r3, r2
    28b0:	e031      	b.n	2916 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    28b2:	2380      	movs	r3, #128	; 0x80
    28b4:	021b      	lsls	r3, r3, #8
    28b6:	e02e      	b.n	2916 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    28b8:	2380      	movs	r3, #128	; 0x80
    28ba:	021b      	lsls	r3, r3, #8
    28bc:	e02b      	b.n	2916 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    28be:	4b19      	ldr	r3, [pc, #100]	; (2924 <system_clock_source_get_hz+0xa8>)
    28c0:	695b      	ldr	r3, [r3, #20]
    28c2:	e028      	b.n	2916 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    28c4:	4b17      	ldr	r3, [pc, #92]	; (2924 <system_clock_source_get_hz+0xa8>)
    28c6:	681b      	ldr	r3, [r3, #0]
    28c8:	2202      	movs	r2, #2
    28ca:	4013      	ands	r3, r2
    28cc:	d101      	bne.n	28d2 <system_clock_source_get_hz+0x56>
			return 0;
    28ce:	2300      	movs	r3, #0
    28d0:	e021      	b.n	2916 <system_clock_source_get_hz+0x9a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    28d2:	4b17      	ldr	r3, [pc, #92]	; (2930 <system_clock_source_get_hz+0xb4>)
    28d4:	4798      	blx	r3

		/* Check if operating in closed loop (USB) mode */
		switch(_system_clock_inst.dfll.control &
    28d6:	4b13      	ldr	r3, [pc, #76]	; (2924 <system_clock_source_get_hz+0xa8>)
    28d8:	681b      	ldr	r3, [r3, #0]
    28da:	2224      	movs	r2, #36	; 0x24
    28dc:	4013      	ands	r3, r2
    28de:	2b04      	cmp	r3, #4
    28e0:	d109      	bne.n	28f6 <system_clock_source_get_hz+0x7a>
				(SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_USBCRM)) {
		case SYSCTRL_DFLLCTRL_MODE:
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    28e2:	2000      	movs	r0, #0
    28e4:	4b13      	ldr	r3, [pc, #76]	; (2934 <system_clock_source_get_hz+0xb8>)
    28e6:	4798      	blx	r3
    28e8:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    28ea:	4b0e      	ldr	r3, [pc, #56]	; (2924 <system_clock_source_get_hz+0xa8>)
    28ec:	689b      	ldr	r3, [r3, #8]
    28ee:	041b      	lsls	r3, r3, #16
    28f0:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    28f2:	4353      	muls	r3, r2
    28f4:	e00f      	b.n	2916 <system_clock_source_get_hz+0x9a>
		default:
			return 48000000UL;
    28f6:	4b10      	ldr	r3, [pc, #64]	; (2938 <system_clock_source_get_hz+0xbc>)
    28f8:	e00d      	b.n	2916 <system_clock_source_get_hz+0x9a>
		}

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    28fa:	4a0b      	ldr	r2, [pc, #44]	; (2928 <system_clock_source_get_hz+0xac>)
    28fc:	2350      	movs	r3, #80	; 0x50
    28fe:	5cd3      	ldrb	r3, [r2, r3]
    2900:	b2db      	uxtb	r3, r3
    2902:	001a      	movs	r2, r3
    2904:	2304      	movs	r3, #4
    2906:	4013      	ands	r3, r2
    2908:	d101      	bne.n	290e <system_clock_source_get_hz+0x92>
			return 0;
    290a:	2300      	movs	r3, #0
    290c:	e003      	b.n	2916 <system_clock_source_get_hz+0x9a>
		}

		return _system_clock_inst.dpll.frequency;
    290e:	4b05      	ldr	r3, [pc, #20]	; (2924 <system_clock_source_get_hz+0xa8>)
    2910:	68db      	ldr	r3, [r3, #12]
    2912:	e000      	b.n	2916 <system_clock_source_get_hz+0x9a>
#endif

	default:
		return 0;
    2914:	2300      	movs	r3, #0
	}
}
    2916:	0018      	movs	r0, r3
    2918:	46bd      	mov	sp, r7
    291a:	b002      	add	sp, #8
    291c:	bd80      	pop	{r7, pc}
    291e:	46c0      	nop			; (mov r8, r8)
    2920:	00005218 	.word	0x00005218
    2924:	20000038 	.word	0x20000038
    2928:	40000800 	.word	0x40000800
    292c:	007a1200 	.word	0x007a1200
    2930:	0000281d 	.word	0x0000281d
    2934:	00002fbd 	.word	0x00002fbd
    2938:	02dc6c00 	.word	0x02dc6c00

0000293c <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    293c:	b580      	push	{r7, lr}
    293e:	b084      	sub	sp, #16
    2940:	af00      	add	r7, sp, #0
    2942:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    2944:	4b1a      	ldr	r3, [pc, #104]	; (29b0 <system_clock_source_osc8m_set_config+0x74>)
    2946:	6a1b      	ldr	r3, [r3, #32]
    2948:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    294a:	687b      	ldr	r3, [r7, #4]
    294c:	781b      	ldrb	r3, [r3, #0]
    294e:	1c1a      	adds	r2, r3, #0
    2950:	2303      	movs	r3, #3
    2952:	4013      	ands	r3, r2
    2954:	b2da      	uxtb	r2, r3
    2956:	230d      	movs	r3, #13
    2958:	18fb      	adds	r3, r7, r3
    295a:	2103      	movs	r1, #3
    295c:	400a      	ands	r2, r1
    295e:	0010      	movs	r0, r2
    2960:	781a      	ldrb	r2, [r3, #0]
    2962:	2103      	movs	r1, #3
    2964:	438a      	bics	r2, r1
    2966:	1c11      	adds	r1, r2, #0
    2968:	1c02      	adds	r2, r0, #0
    296a:	430a      	orrs	r2, r1
    296c:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    296e:	687b      	ldr	r3, [r7, #4]
    2970:	789a      	ldrb	r2, [r3, #2]
    2972:	230c      	movs	r3, #12
    2974:	18fb      	adds	r3, r7, r3
    2976:	01d0      	lsls	r0, r2, #7
    2978:	781a      	ldrb	r2, [r3, #0]
    297a:	217f      	movs	r1, #127	; 0x7f
    297c:	400a      	ands	r2, r1
    297e:	1c11      	adds	r1, r2, #0
    2980:	1c02      	adds	r2, r0, #0
    2982:	430a      	orrs	r2, r1
    2984:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    2986:	687b      	ldr	r3, [r7, #4]
    2988:	785a      	ldrb	r2, [r3, #1]
    298a:	230c      	movs	r3, #12
    298c:	18fb      	adds	r3, r7, r3
    298e:	2101      	movs	r1, #1
    2990:	400a      	ands	r2, r1
    2992:	0190      	lsls	r0, r2, #6
    2994:	781a      	ldrb	r2, [r3, #0]
    2996:	2140      	movs	r1, #64	; 0x40
    2998:	438a      	bics	r2, r1
    299a:	1c11      	adds	r1, r2, #0
    299c:	1c02      	adds	r2, r0, #0
    299e:	430a      	orrs	r2, r1
    29a0:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    29a2:	4b03      	ldr	r3, [pc, #12]	; (29b0 <system_clock_source_osc8m_set_config+0x74>)
    29a4:	68fa      	ldr	r2, [r7, #12]
    29a6:	621a      	str	r2, [r3, #32]
}
    29a8:	46c0      	nop			; (mov r8, r8)
    29aa:	46bd      	mov	sp, r7
    29ac:	b004      	add	sp, #16
    29ae:	bd80      	pop	{r7, pc}
    29b0:	40000800 	.word	0x40000800

000029b4 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    29b4:	b580      	push	{r7, lr}
    29b6:	b082      	sub	sp, #8
    29b8:	af00      	add	r7, sp, #0
    29ba:	0002      	movs	r2, r0
    29bc:	1dfb      	adds	r3, r7, #7
    29be:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    29c0:	1dfb      	adds	r3, r7, #7
    29c2:	781b      	ldrb	r3, [r3, #0]
    29c4:	2b08      	cmp	r3, #8
    29c6:	d83b      	bhi.n	2a40 <system_clock_source_enable+0x8c>
    29c8:	009a      	lsls	r2, r3, #2
    29ca:	4b21      	ldr	r3, [pc, #132]	; (2a50 <system_clock_source_enable+0x9c>)
    29cc:	18d3      	adds	r3, r2, r3
    29ce:	681b      	ldr	r3, [r3, #0]
    29d0:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    29d2:	4b20      	ldr	r3, [pc, #128]	; (2a54 <system_clock_source_enable+0xa0>)
    29d4:	4a1f      	ldr	r2, [pc, #124]	; (2a54 <system_clock_source_enable+0xa0>)
    29d6:	6a12      	ldr	r2, [r2, #32]
    29d8:	2102      	movs	r1, #2
    29da:	430a      	orrs	r2, r1
    29dc:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    29de:	2300      	movs	r3, #0
    29e0:	e031      	b.n	2a46 <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    29e2:	4b1c      	ldr	r3, [pc, #112]	; (2a54 <system_clock_source_enable+0xa0>)
    29e4:	4a1b      	ldr	r2, [pc, #108]	; (2a54 <system_clock_source_enable+0xa0>)
    29e6:	6992      	ldr	r2, [r2, #24]
    29e8:	2102      	movs	r1, #2
    29ea:	430a      	orrs	r2, r1
    29ec:	619a      	str	r2, [r3, #24]
		break;
    29ee:	e029      	b.n	2a44 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    29f0:	4a18      	ldr	r2, [pc, #96]	; (2a54 <system_clock_source_enable+0xa0>)
    29f2:	4b18      	ldr	r3, [pc, #96]	; (2a54 <system_clock_source_enable+0xa0>)
    29f4:	8a1b      	ldrh	r3, [r3, #16]
    29f6:	b29b      	uxth	r3, r3
    29f8:	2102      	movs	r1, #2
    29fa:	430b      	orrs	r3, r1
    29fc:	b29b      	uxth	r3, r3
    29fe:	8213      	strh	r3, [r2, #16]
		break;
    2a00:	e020      	b.n	2a44 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    2a02:	4a14      	ldr	r2, [pc, #80]	; (2a54 <system_clock_source_enable+0xa0>)
    2a04:	4b13      	ldr	r3, [pc, #76]	; (2a54 <system_clock_source_enable+0xa0>)
    2a06:	8a9b      	ldrh	r3, [r3, #20]
    2a08:	b29b      	uxth	r3, r3
    2a0a:	2102      	movs	r1, #2
    2a0c:	430b      	orrs	r3, r1
    2a0e:	b29b      	uxth	r3, r3
    2a10:	8293      	strh	r3, [r2, #20]
		break;
    2a12:	e017      	b.n	2a44 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    2a14:	4b10      	ldr	r3, [pc, #64]	; (2a58 <system_clock_source_enable+0xa4>)
    2a16:	681b      	ldr	r3, [r3, #0]
    2a18:	2202      	movs	r2, #2
    2a1a:	431a      	orrs	r2, r3
    2a1c:	4b0e      	ldr	r3, [pc, #56]	; (2a58 <system_clock_source_enable+0xa4>)
    2a1e:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    2a20:	4b0e      	ldr	r3, [pc, #56]	; (2a5c <system_clock_source_enable+0xa8>)
    2a22:	4798      	blx	r3
		break;
    2a24:	e00e      	b.n	2a44 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    2a26:	4a0b      	ldr	r2, [pc, #44]	; (2a54 <system_clock_source_enable+0xa0>)
    2a28:	490a      	ldr	r1, [pc, #40]	; (2a54 <system_clock_source_enable+0xa0>)
    2a2a:	2344      	movs	r3, #68	; 0x44
    2a2c:	5ccb      	ldrb	r3, [r1, r3]
    2a2e:	b2db      	uxtb	r3, r3
    2a30:	2102      	movs	r1, #2
    2a32:	430b      	orrs	r3, r1
    2a34:	b2d9      	uxtb	r1, r3
    2a36:	2344      	movs	r3, #68	; 0x44
    2a38:	54d1      	strb	r1, [r2, r3]
		break;
    2a3a:	e003      	b.n	2a44 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    2a3c:	2300      	movs	r3, #0
    2a3e:	e002      	b.n	2a46 <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    2a40:	2317      	movs	r3, #23
    2a42:	e000      	b.n	2a46 <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    2a44:	2300      	movs	r3, #0
}
    2a46:	0018      	movs	r0, r3
    2a48:	46bd      	mov	sp, r7
    2a4a:	b002      	add	sp, #8
    2a4c:	bd80      	pop	{r7, pc}
    2a4e:	46c0      	nop			; (mov r8, r8)
    2a50:	0000523c 	.word	0x0000523c
    2a54:	40000800 	.word	0x40000800
    2a58:	20000038 	.word	0x20000038
    2a5c:	00002839 	.word	0x00002839

00002a60 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    2a60:	b580      	push	{r7, lr}
    2a62:	b082      	sub	sp, #8
    2a64:	af00      	add	r7, sp, #0
	uint32_t gclk_id;
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    2a66:	003b      	movs	r3, r7
    2a68:	2201      	movs	r2, #1
    2a6a:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2a6c:	2300      	movs	r3, #0
    2a6e:	607b      	str	r3, [r7, #4]
    2a70:	e009      	b.n	2a86 <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    2a72:	687b      	ldr	r3, [r7, #4]
    2a74:	b2db      	uxtb	r3, r3
    2a76:	003a      	movs	r2, r7
    2a78:	0011      	movs	r1, r2
    2a7a:	0018      	movs	r0, r3
    2a7c:	4b05      	ldr	r3, [pc, #20]	; (2a94 <_switch_peripheral_gclk+0x34>)
    2a7e:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2a80:	687b      	ldr	r3, [r7, #4]
    2a82:	3301      	adds	r3, #1
    2a84:	607b      	str	r3, [r7, #4]
    2a86:	687b      	ldr	r3, [r7, #4]
    2a88:	2b24      	cmp	r3, #36	; 0x24
    2a8a:	d9f2      	bls.n	2a72 <_switch_peripheral_gclk+0x12>
	}
}
    2a8c:	46c0      	nop			; (mov r8, r8)
    2a8e:	46bd      	mov	sp, r7
    2a90:	b002      	add	sp, #8
    2a92:	bd80      	pop	{r7, pc}
    2a94:	00002e99 	.word	0x00002e99

00002a98 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    2a98:	b580      	push	{r7, lr}
    2a9a:	b0a0      	sub	sp, #128	; 0x80
    2a9c:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    2a9e:	4b27      	ldr	r3, [pc, #156]	; (2b3c <system_clock_init+0xa4>)
    2aa0:	22c2      	movs	r2, #194	; 0xc2
    2aa2:	00d2      	lsls	r2, r2, #3
    2aa4:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    2aa6:	2000      	movs	r0, #0
    2aa8:	4b25      	ldr	r3, [pc, #148]	; (2b40 <system_clock_init+0xa8>)
    2aaa:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    2aac:	4b25      	ldr	r3, [pc, #148]	; (2b44 <system_clock_init+0xac>)
    2aae:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    2ab0:	237c      	movs	r3, #124	; 0x7c
    2ab2:	18fb      	adds	r3, r7, r3
    2ab4:	0018      	movs	r0, r3
    2ab6:	4b24      	ldr	r3, [pc, #144]	; (2b48 <system_clock_init+0xb0>)
    2ab8:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    2aba:	237c      	movs	r3, #124	; 0x7c
    2abc:	18fb      	adds	r3, r7, r3
    2abe:	2200      	movs	r2, #0
    2ac0:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    2ac2:	237c      	movs	r3, #124	; 0x7c
    2ac4:	18fb      	adds	r3, r7, r3
    2ac6:	2201      	movs	r2, #1
    2ac8:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    2aca:	237c      	movs	r3, #124	; 0x7c
    2acc:	18fb      	adds	r3, r7, r3
    2ace:	2200      	movs	r2, #0
    2ad0:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    2ad2:	237c      	movs	r3, #124	; 0x7c
    2ad4:	18fb      	adds	r3, r7, r3
    2ad6:	0018      	movs	r0, r3
    2ad8:	4b1c      	ldr	r3, [pc, #112]	; (2b4c <system_clock_init+0xb4>)
    2ada:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    2adc:	2006      	movs	r0, #6
    2ade:	4b1c      	ldr	r3, [pc, #112]	; (2b50 <system_clock_init+0xb8>)
    2ae0:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    2ae2:	4b1c      	ldr	r3, [pc, #112]	; (2b54 <system_clock_init+0xbc>)
    2ae4:	4798      	blx	r3

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    2ae6:	2000      	movs	r0, #0
    2ae8:	4b1b      	ldr	r3, [pc, #108]	; (2b58 <system_clock_init+0xc0>)
    2aea:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    2aec:	2100      	movs	r1, #0
    2aee:	2000      	movs	r0, #0
    2af0:	4b1a      	ldr	r3, [pc, #104]	; (2b5c <system_clock_init+0xc4>)
    2af2:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    2af4:	2100      	movs	r1, #0
    2af6:	2001      	movs	r0, #1
    2af8:	4b18      	ldr	r3, [pc, #96]	; (2b5c <system_clock_init+0xc4>)
    2afa:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    2afc:	2100      	movs	r1, #0
    2afe:	2002      	movs	r0, #2
    2b00:	4b16      	ldr	r3, [pc, #88]	; (2b5c <system_clock_init+0xc4>)
    2b02:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    2b04:	1d3b      	adds	r3, r7, #4
    2b06:	0018      	movs	r0, r3
    2b08:	4b15      	ldr	r3, [pc, #84]	; (2b60 <system_clock_init+0xc8>)
    2b0a:	4798      	blx	r3
    2b0c:	1d3b      	adds	r3, r7, #4
    2b0e:	2206      	movs	r2, #6
    2b10:	701a      	strb	r2, [r3, #0]
    2b12:	1d3b      	adds	r3, r7, #4
    2b14:	2201      	movs	r2, #1
    2b16:	605a      	str	r2, [r3, #4]
    2b18:	1d3b      	adds	r3, r7, #4
    2b1a:	2200      	movs	r2, #0
    2b1c:	721a      	strb	r2, [r3, #8]
    2b1e:	1d3b      	adds	r3, r7, #4
    2b20:	2200      	movs	r2, #0
    2b22:	725a      	strb	r2, [r3, #9]
    2b24:	1d3b      	adds	r3, r7, #4
    2b26:	0019      	movs	r1, r3
    2b28:	2000      	movs	r0, #0
    2b2a:	4b0e      	ldr	r3, [pc, #56]	; (2b64 <system_clock_init+0xcc>)
    2b2c:	4798      	blx	r3
    2b2e:	2000      	movs	r0, #0
    2b30:	4b0d      	ldr	r3, [pc, #52]	; (2b68 <system_clock_init+0xd0>)
    2b32:	4798      	blx	r3
#endif
}
    2b34:	46c0      	nop			; (mov r8, r8)
    2b36:	46bd      	mov	sp, r7
    2b38:	b020      	add	sp, #128	; 0x80
    2b3a:	bd80      	pop	{r7, pc}
    2b3c:	40000800 	.word	0x40000800
    2b40:	000027e9 	.word	0x000027e9
    2b44:	00002a61 	.word	0x00002a61
    2b48:	00002753 	.word	0x00002753
    2b4c:	0000293d 	.word	0x0000293d
    2b50:	000029b5 	.word	0x000029b5
    2b54:	00002c11 	.word	0x00002c11
    2b58:	00002775 	.word	0x00002775
    2b5c:	00002795 	.word	0x00002795
    2b60:	00002725 	.word	0x00002725
    2b64:	00002c41 	.word	0x00002c41
    2b68:	00002d65 	.word	0x00002d65

00002b6c <system_apb_clock_set_mask>:
{
    2b6c:	b580      	push	{r7, lr}
    2b6e:	b082      	sub	sp, #8
    2b70:	af00      	add	r7, sp, #0
    2b72:	0002      	movs	r2, r0
    2b74:	6039      	str	r1, [r7, #0]
    2b76:	1dfb      	adds	r3, r7, #7
    2b78:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    2b7a:	1dfb      	adds	r3, r7, #7
    2b7c:	781b      	ldrb	r3, [r3, #0]
    2b7e:	2b01      	cmp	r3, #1
    2b80:	d00a      	beq.n	2b98 <system_apb_clock_set_mask+0x2c>
    2b82:	2b02      	cmp	r3, #2
    2b84:	d00f      	beq.n	2ba6 <system_apb_clock_set_mask+0x3a>
    2b86:	2b00      	cmp	r3, #0
    2b88:	d114      	bne.n	2bb4 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    2b8a:	4b0e      	ldr	r3, [pc, #56]	; (2bc4 <system_apb_clock_set_mask+0x58>)
    2b8c:	4a0d      	ldr	r2, [pc, #52]	; (2bc4 <system_apb_clock_set_mask+0x58>)
    2b8e:	6991      	ldr	r1, [r2, #24]
    2b90:	683a      	ldr	r2, [r7, #0]
    2b92:	430a      	orrs	r2, r1
    2b94:	619a      	str	r2, [r3, #24]
			break;
    2b96:	e00f      	b.n	2bb8 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    2b98:	4b0a      	ldr	r3, [pc, #40]	; (2bc4 <system_apb_clock_set_mask+0x58>)
    2b9a:	4a0a      	ldr	r2, [pc, #40]	; (2bc4 <system_apb_clock_set_mask+0x58>)
    2b9c:	69d1      	ldr	r1, [r2, #28]
    2b9e:	683a      	ldr	r2, [r7, #0]
    2ba0:	430a      	orrs	r2, r1
    2ba2:	61da      	str	r2, [r3, #28]
			break;
    2ba4:	e008      	b.n	2bb8 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    2ba6:	4b07      	ldr	r3, [pc, #28]	; (2bc4 <system_apb_clock_set_mask+0x58>)
    2ba8:	4a06      	ldr	r2, [pc, #24]	; (2bc4 <system_apb_clock_set_mask+0x58>)
    2baa:	6a11      	ldr	r1, [r2, #32]
    2bac:	683a      	ldr	r2, [r7, #0]
    2bae:	430a      	orrs	r2, r1
    2bb0:	621a      	str	r2, [r3, #32]
			break;
    2bb2:	e001      	b.n	2bb8 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    2bb4:	2317      	movs	r3, #23
    2bb6:	e000      	b.n	2bba <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    2bb8:	2300      	movs	r3, #0
}
    2bba:	0018      	movs	r0, r3
    2bbc:	46bd      	mov	sp, r7
    2bbe:	b002      	add	sp, #8
    2bc0:	bd80      	pop	{r7, pc}
    2bc2:	46c0      	nop			; (mov r8, r8)
    2bc4:	40000400 	.word	0x40000400

00002bc8 <system_interrupt_enter_critical_section>:
{
    2bc8:	b580      	push	{r7, lr}
    2bca:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    2bcc:	4b02      	ldr	r3, [pc, #8]	; (2bd8 <system_interrupt_enter_critical_section+0x10>)
    2bce:	4798      	blx	r3
}
    2bd0:	46c0      	nop			; (mov r8, r8)
    2bd2:	46bd      	mov	sp, r7
    2bd4:	bd80      	pop	{r7, pc}
    2bd6:	46c0      	nop			; (mov r8, r8)
    2bd8:	00002691 	.word	0x00002691

00002bdc <system_interrupt_leave_critical_section>:
{
    2bdc:	b580      	push	{r7, lr}
    2bde:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    2be0:	4b02      	ldr	r3, [pc, #8]	; (2bec <system_interrupt_leave_critical_section+0x10>)
    2be2:	4798      	blx	r3
}
    2be4:	46c0      	nop			; (mov r8, r8)
    2be6:	46bd      	mov	sp, r7
    2be8:	bd80      	pop	{r7, pc}
    2bea:	46c0      	nop			; (mov r8, r8)
    2bec:	000026e5 	.word	0x000026e5

00002bf0 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    2bf0:	b580      	push	{r7, lr}
    2bf2:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2bf4:	4b05      	ldr	r3, [pc, #20]	; (2c0c <system_gclk_is_syncing+0x1c>)
    2bf6:	785b      	ldrb	r3, [r3, #1]
    2bf8:	b2db      	uxtb	r3, r3
    2bfa:	b25b      	sxtb	r3, r3
    2bfc:	2b00      	cmp	r3, #0
    2bfe:	da01      	bge.n	2c04 <system_gclk_is_syncing+0x14>
		return true;
    2c00:	2301      	movs	r3, #1
    2c02:	e000      	b.n	2c06 <system_gclk_is_syncing+0x16>
	}

	return false;
    2c04:	2300      	movs	r3, #0
}
    2c06:	0018      	movs	r0, r3
    2c08:	46bd      	mov	sp, r7
    2c0a:	bd80      	pop	{r7, pc}
    2c0c:	40000c00 	.word	0x40000c00

00002c10 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    2c10:	b580      	push	{r7, lr}
    2c12:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    2c14:	2108      	movs	r1, #8
    2c16:	2000      	movs	r0, #0
    2c18:	4b07      	ldr	r3, [pc, #28]	; (2c38 <system_gclk_init+0x28>)
    2c1a:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    2c1c:	4b07      	ldr	r3, [pc, #28]	; (2c3c <system_gclk_init+0x2c>)
    2c1e:	2201      	movs	r2, #1
    2c20:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    2c22:	46c0      	nop			; (mov r8, r8)
    2c24:	4b05      	ldr	r3, [pc, #20]	; (2c3c <system_gclk_init+0x2c>)
    2c26:	781b      	ldrb	r3, [r3, #0]
    2c28:	b2db      	uxtb	r3, r3
    2c2a:	001a      	movs	r2, r3
    2c2c:	2301      	movs	r3, #1
    2c2e:	4013      	ands	r3, r2
    2c30:	d1f8      	bne.n	2c24 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    2c32:	46c0      	nop			; (mov r8, r8)
    2c34:	46bd      	mov	sp, r7
    2c36:	bd80      	pop	{r7, pc}
    2c38:	00002b6d 	.word	0x00002b6d
    2c3c:	40000c00 	.word	0x40000c00

00002c40 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    2c40:	b580      	push	{r7, lr}
    2c42:	b086      	sub	sp, #24
    2c44:	af00      	add	r7, sp, #0
    2c46:	0002      	movs	r2, r0
    2c48:	6039      	str	r1, [r7, #0]
    2c4a:	1dfb      	adds	r3, r7, #7
    2c4c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    2c4e:	1dfb      	adds	r3, r7, #7
    2c50:	781b      	ldrb	r3, [r3, #0]
    2c52:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    2c54:	1dfb      	adds	r3, r7, #7
    2c56:	781b      	ldrb	r3, [r3, #0]
    2c58:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    2c5a:	683b      	ldr	r3, [r7, #0]
    2c5c:	781b      	ldrb	r3, [r3, #0]
    2c5e:	021b      	lsls	r3, r3, #8
    2c60:	001a      	movs	r2, r3
    2c62:	697b      	ldr	r3, [r7, #20]
    2c64:	4313      	orrs	r3, r2
    2c66:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    2c68:	683b      	ldr	r3, [r7, #0]
    2c6a:	785b      	ldrb	r3, [r3, #1]
    2c6c:	2b00      	cmp	r3, #0
    2c6e:	d004      	beq.n	2c7a <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    2c70:	697b      	ldr	r3, [r7, #20]
    2c72:	2280      	movs	r2, #128	; 0x80
    2c74:	02d2      	lsls	r2, r2, #11
    2c76:	4313      	orrs	r3, r2
    2c78:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    2c7a:	683b      	ldr	r3, [r7, #0]
    2c7c:	7a5b      	ldrb	r3, [r3, #9]
    2c7e:	2b00      	cmp	r3, #0
    2c80:	d004      	beq.n	2c8c <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    2c82:	697b      	ldr	r3, [r7, #20]
    2c84:	2280      	movs	r2, #128	; 0x80
    2c86:	0312      	lsls	r2, r2, #12
    2c88:	4313      	orrs	r3, r2
    2c8a:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    2c8c:	683b      	ldr	r3, [r7, #0]
    2c8e:	685b      	ldr	r3, [r3, #4]
    2c90:	2b01      	cmp	r3, #1
    2c92:	d92c      	bls.n	2cee <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    2c94:	683b      	ldr	r3, [r7, #0]
    2c96:	685a      	ldr	r2, [r3, #4]
    2c98:	683b      	ldr	r3, [r7, #0]
    2c9a:	685b      	ldr	r3, [r3, #4]
    2c9c:	3b01      	subs	r3, #1
    2c9e:	4013      	ands	r3, r2
    2ca0:	d11a      	bne.n	2cd8 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    2ca2:	2300      	movs	r3, #0
    2ca4:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    2ca6:	2302      	movs	r3, #2
    2ca8:	60bb      	str	r3, [r7, #8]
    2caa:	e005      	b.n	2cb8 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    2cac:	68fb      	ldr	r3, [r7, #12]
    2cae:	3301      	adds	r3, #1
    2cb0:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
    2cb2:	68bb      	ldr	r3, [r7, #8]
    2cb4:	005b      	lsls	r3, r3, #1
    2cb6:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
    2cb8:	683b      	ldr	r3, [r7, #0]
    2cba:	685a      	ldr	r2, [r3, #4]
    2cbc:	68bb      	ldr	r3, [r7, #8]
    2cbe:	429a      	cmp	r2, r3
    2cc0:	d8f4      	bhi.n	2cac <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    2cc2:	68fb      	ldr	r3, [r7, #12]
    2cc4:	021b      	lsls	r3, r3, #8
    2cc6:	693a      	ldr	r2, [r7, #16]
    2cc8:	4313      	orrs	r3, r2
    2cca:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    2ccc:	697b      	ldr	r3, [r7, #20]
    2cce:	2280      	movs	r2, #128	; 0x80
    2cd0:	0352      	lsls	r2, r2, #13
    2cd2:	4313      	orrs	r3, r2
    2cd4:	617b      	str	r3, [r7, #20]
    2cd6:	e00a      	b.n	2cee <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    2cd8:	683b      	ldr	r3, [r7, #0]
    2cda:	685b      	ldr	r3, [r3, #4]
    2cdc:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
    2cde:	693a      	ldr	r2, [r7, #16]
    2ce0:	4313      	orrs	r3, r2
    2ce2:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    2ce4:	697b      	ldr	r3, [r7, #20]
    2ce6:	2280      	movs	r2, #128	; 0x80
    2ce8:	0292      	lsls	r2, r2, #10
    2cea:	4313      	orrs	r3, r2
    2cec:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    2cee:	683b      	ldr	r3, [r7, #0]
    2cf0:	7a1b      	ldrb	r3, [r3, #8]
    2cf2:	2b00      	cmp	r3, #0
    2cf4:	d004      	beq.n	2d00 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    2cf6:	697b      	ldr	r3, [r7, #20]
    2cf8:	2280      	movs	r2, #128	; 0x80
    2cfa:	0392      	lsls	r2, r2, #14
    2cfc:	4313      	orrs	r3, r2
    2cfe:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    2d00:	46c0      	nop			; (mov r8, r8)
    2d02:	4b13      	ldr	r3, [pc, #76]	; (2d50 <system_gclk_gen_set_config+0x110>)
    2d04:	4798      	blx	r3
    2d06:	1e03      	subs	r3, r0, #0
    2d08:	d1fb      	bne.n	2d02 <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    2d0a:	4b12      	ldr	r3, [pc, #72]	; (2d54 <system_gclk_gen_set_config+0x114>)
    2d0c:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    2d0e:	4a12      	ldr	r2, [pc, #72]	; (2d58 <system_gclk_gen_set_config+0x118>)
    2d10:	1dfb      	adds	r3, r7, #7
    2d12:	781b      	ldrb	r3, [r3, #0]
    2d14:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    2d16:	46c0      	nop			; (mov r8, r8)
    2d18:	4b0d      	ldr	r3, [pc, #52]	; (2d50 <system_gclk_gen_set_config+0x110>)
    2d1a:	4798      	blx	r3
    2d1c:	1e03      	subs	r3, r0, #0
    2d1e:	d1fb      	bne.n	2d18 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    2d20:	4b0e      	ldr	r3, [pc, #56]	; (2d5c <system_gclk_gen_set_config+0x11c>)
    2d22:	693a      	ldr	r2, [r7, #16]
    2d24:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    2d26:	46c0      	nop			; (mov r8, r8)
    2d28:	4b09      	ldr	r3, [pc, #36]	; (2d50 <system_gclk_gen_set_config+0x110>)
    2d2a:	4798      	blx	r3
    2d2c:	1e03      	subs	r3, r0, #0
    2d2e:	d1fb      	bne.n	2d28 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    2d30:	4b0a      	ldr	r3, [pc, #40]	; (2d5c <system_gclk_gen_set_config+0x11c>)
    2d32:	4a0a      	ldr	r2, [pc, #40]	; (2d5c <system_gclk_gen_set_config+0x11c>)
    2d34:	6851      	ldr	r1, [r2, #4]
    2d36:	2280      	movs	r2, #128	; 0x80
    2d38:	0252      	lsls	r2, r2, #9
    2d3a:	4011      	ands	r1, r2
    2d3c:	697a      	ldr	r2, [r7, #20]
    2d3e:	430a      	orrs	r2, r1
    2d40:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    2d42:	4b07      	ldr	r3, [pc, #28]	; (2d60 <system_gclk_gen_set_config+0x120>)
    2d44:	4798      	blx	r3
}
    2d46:	46c0      	nop			; (mov r8, r8)
    2d48:	46bd      	mov	sp, r7
    2d4a:	b006      	add	sp, #24
    2d4c:	bd80      	pop	{r7, pc}
    2d4e:	46c0      	nop			; (mov r8, r8)
    2d50:	00002bf1 	.word	0x00002bf1
    2d54:	00002bc9 	.word	0x00002bc9
    2d58:	40000c08 	.word	0x40000c08
    2d5c:	40000c00 	.word	0x40000c00
    2d60:	00002bdd 	.word	0x00002bdd

00002d64 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    2d64:	b580      	push	{r7, lr}
    2d66:	b082      	sub	sp, #8
    2d68:	af00      	add	r7, sp, #0
    2d6a:	0002      	movs	r2, r0
    2d6c:	1dfb      	adds	r3, r7, #7
    2d6e:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    2d70:	46c0      	nop			; (mov r8, r8)
    2d72:	4b0e      	ldr	r3, [pc, #56]	; (2dac <system_gclk_gen_enable+0x48>)
    2d74:	4798      	blx	r3
    2d76:	1e03      	subs	r3, r0, #0
    2d78:	d1fb      	bne.n	2d72 <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    2d7a:	4b0d      	ldr	r3, [pc, #52]	; (2db0 <system_gclk_gen_enable+0x4c>)
    2d7c:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2d7e:	4a0d      	ldr	r2, [pc, #52]	; (2db4 <system_gclk_gen_enable+0x50>)
    2d80:	1dfb      	adds	r3, r7, #7
    2d82:	781b      	ldrb	r3, [r3, #0]
    2d84:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    2d86:	46c0      	nop			; (mov r8, r8)
    2d88:	4b08      	ldr	r3, [pc, #32]	; (2dac <system_gclk_gen_enable+0x48>)
    2d8a:	4798      	blx	r3
    2d8c:	1e03      	subs	r3, r0, #0
    2d8e:	d1fb      	bne.n	2d88 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    2d90:	4b09      	ldr	r3, [pc, #36]	; (2db8 <system_gclk_gen_enable+0x54>)
    2d92:	4a09      	ldr	r2, [pc, #36]	; (2db8 <system_gclk_gen_enable+0x54>)
    2d94:	6852      	ldr	r2, [r2, #4]
    2d96:	2180      	movs	r1, #128	; 0x80
    2d98:	0249      	lsls	r1, r1, #9
    2d9a:	430a      	orrs	r2, r1
    2d9c:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    2d9e:	4b07      	ldr	r3, [pc, #28]	; (2dbc <system_gclk_gen_enable+0x58>)
    2da0:	4798      	blx	r3
}
    2da2:	46c0      	nop			; (mov r8, r8)
    2da4:	46bd      	mov	sp, r7
    2da6:	b002      	add	sp, #8
    2da8:	bd80      	pop	{r7, pc}
    2daa:	46c0      	nop			; (mov r8, r8)
    2dac:	00002bf1 	.word	0x00002bf1
    2db0:	00002bc9 	.word	0x00002bc9
    2db4:	40000c04 	.word	0x40000c04
    2db8:	40000c00 	.word	0x40000c00
    2dbc:	00002bdd 	.word	0x00002bdd

00002dc0 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    2dc0:	b580      	push	{r7, lr}
    2dc2:	b086      	sub	sp, #24
    2dc4:	af00      	add	r7, sp, #0
    2dc6:	0002      	movs	r2, r0
    2dc8:	1dfb      	adds	r3, r7, #7
    2dca:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    2dcc:	46c0      	nop			; (mov r8, r8)
    2dce:	4b2a      	ldr	r3, [pc, #168]	; (2e78 <system_gclk_gen_get_hz+0xb8>)
    2dd0:	4798      	blx	r3
    2dd2:	1e03      	subs	r3, r0, #0
    2dd4:	d1fb      	bne.n	2dce <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    2dd6:	4b29      	ldr	r3, [pc, #164]	; (2e7c <system_gclk_gen_get_hz+0xbc>)
    2dd8:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2dda:	4a29      	ldr	r2, [pc, #164]	; (2e80 <system_gclk_gen_get_hz+0xc0>)
    2ddc:	1dfb      	adds	r3, r7, #7
    2dde:	781b      	ldrb	r3, [r3, #0]
    2de0:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    2de2:	46c0      	nop			; (mov r8, r8)
    2de4:	4b24      	ldr	r3, [pc, #144]	; (2e78 <system_gclk_gen_get_hz+0xb8>)
    2de6:	4798      	blx	r3
    2de8:	1e03      	subs	r3, r0, #0
    2dea:	d1fb      	bne.n	2de4 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    2dec:	4b25      	ldr	r3, [pc, #148]	; (2e84 <system_gclk_gen_get_hz+0xc4>)
    2dee:	685b      	ldr	r3, [r3, #4]
    2df0:	04db      	lsls	r3, r3, #19
    2df2:	0edb      	lsrs	r3, r3, #27
    2df4:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
    2df6:	0018      	movs	r0, r3
    2df8:	4b23      	ldr	r3, [pc, #140]	; (2e88 <system_gclk_gen_get_hz+0xc8>)
    2dfa:	4798      	blx	r3
    2dfc:	0003      	movs	r3, r0
    2dfe:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2e00:	4a1f      	ldr	r2, [pc, #124]	; (2e80 <system_gclk_gen_get_hz+0xc0>)
    2e02:	1dfb      	adds	r3, r7, #7
    2e04:	781b      	ldrb	r3, [r3, #0]
    2e06:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    2e08:	4b1e      	ldr	r3, [pc, #120]	; (2e84 <system_gclk_gen_get_hz+0xc4>)
    2e0a:	685b      	ldr	r3, [r3, #4]
    2e0c:	02db      	lsls	r3, r3, #11
    2e0e:	0fdb      	lsrs	r3, r3, #31
    2e10:	b2da      	uxtb	r2, r3
    2e12:	2313      	movs	r3, #19
    2e14:	18fb      	adds	r3, r7, r3
    2e16:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    2e18:	4a1c      	ldr	r2, [pc, #112]	; (2e8c <system_gclk_gen_get_hz+0xcc>)
    2e1a:	1dfb      	adds	r3, r7, #7
    2e1c:	781b      	ldrb	r3, [r3, #0]
    2e1e:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    2e20:	46c0      	nop			; (mov r8, r8)
    2e22:	4b15      	ldr	r3, [pc, #84]	; (2e78 <system_gclk_gen_get_hz+0xb8>)
    2e24:	4798      	blx	r3
    2e26:	1e03      	subs	r3, r0, #0
    2e28:	d1fb      	bne.n	2e22 <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    2e2a:	4b16      	ldr	r3, [pc, #88]	; (2e84 <system_gclk_gen_get_hz+0xc4>)
    2e2c:	689b      	ldr	r3, [r3, #8]
    2e2e:	021b      	lsls	r3, r3, #8
    2e30:	0c1b      	lsrs	r3, r3, #16
    2e32:	b29b      	uxth	r3, r3
    2e34:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    2e36:	4b16      	ldr	r3, [pc, #88]	; (2e90 <system_gclk_gen_get_hz+0xd0>)
    2e38:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    2e3a:	2313      	movs	r3, #19
    2e3c:	18fb      	adds	r3, r7, r3
    2e3e:	781b      	ldrb	r3, [r3, #0]
    2e40:	2b00      	cmp	r3, #0
    2e42:	d109      	bne.n	2e58 <system_gclk_gen_get_hz+0x98>
    2e44:	68fb      	ldr	r3, [r7, #12]
    2e46:	2b01      	cmp	r3, #1
    2e48:	d906      	bls.n	2e58 <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
    2e4a:	4b12      	ldr	r3, [pc, #72]	; (2e94 <system_gclk_gen_get_hz+0xd4>)
    2e4c:	68f9      	ldr	r1, [r7, #12]
    2e4e:	6978      	ldr	r0, [r7, #20]
    2e50:	4798      	blx	r3
    2e52:	0003      	movs	r3, r0
    2e54:	617b      	str	r3, [r7, #20]
    2e56:	e00a      	b.n	2e6e <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
    2e58:	2313      	movs	r3, #19
    2e5a:	18fb      	adds	r3, r7, r3
    2e5c:	781b      	ldrb	r3, [r3, #0]
    2e5e:	2b00      	cmp	r3, #0
    2e60:	d005      	beq.n	2e6e <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
    2e62:	68fb      	ldr	r3, [r7, #12]
    2e64:	3301      	adds	r3, #1
    2e66:	697a      	ldr	r2, [r7, #20]
    2e68:	40da      	lsrs	r2, r3
    2e6a:	0013      	movs	r3, r2
    2e6c:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    2e6e:	697b      	ldr	r3, [r7, #20]
}
    2e70:	0018      	movs	r0, r3
    2e72:	46bd      	mov	sp, r7
    2e74:	b006      	add	sp, #24
    2e76:	bd80      	pop	{r7, pc}
    2e78:	00002bf1 	.word	0x00002bf1
    2e7c:	00002bc9 	.word	0x00002bc9
    2e80:	40000c04 	.word	0x40000c04
    2e84:	40000c00 	.word	0x40000c00
    2e88:	0000287d 	.word	0x0000287d
    2e8c:	40000c08 	.word	0x40000c08
    2e90:	00002bdd 	.word	0x00002bdd
    2e94:	000034c9 	.word	0x000034c9

00002e98 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    2e98:	b580      	push	{r7, lr}
    2e9a:	b084      	sub	sp, #16
    2e9c:	af00      	add	r7, sp, #0
    2e9e:	0002      	movs	r2, r0
    2ea0:	6039      	str	r1, [r7, #0]
    2ea2:	1dfb      	adds	r3, r7, #7
    2ea4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    2ea6:	1dfb      	adds	r3, r7, #7
    2ea8:	781b      	ldrb	r3, [r3, #0]
    2eaa:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    2eac:	683b      	ldr	r3, [r7, #0]
    2eae:	781b      	ldrb	r3, [r3, #0]
    2eb0:	021b      	lsls	r3, r3, #8
    2eb2:	001a      	movs	r2, r3
    2eb4:	68fb      	ldr	r3, [r7, #12]
    2eb6:	4313      	orrs	r3, r2
    2eb8:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    2eba:	1dfb      	adds	r3, r7, #7
    2ebc:	781b      	ldrb	r3, [r3, #0]
    2ebe:	0018      	movs	r0, r3
    2ec0:	4b04      	ldr	r3, [pc, #16]	; (2ed4 <system_gclk_chan_set_config+0x3c>)
    2ec2:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    2ec4:	4b04      	ldr	r3, [pc, #16]	; (2ed8 <system_gclk_chan_set_config+0x40>)
    2ec6:	68fa      	ldr	r2, [r7, #12]
    2ec8:	b292      	uxth	r2, r2
    2eca:	805a      	strh	r2, [r3, #2]
}
    2ecc:	46c0      	nop			; (mov r8, r8)
    2ece:	46bd      	mov	sp, r7
    2ed0:	b004      	add	sp, #16
    2ed2:	bd80      	pop	{r7, pc}
    2ed4:	00002f25 	.word	0x00002f25
    2ed8:	40000c00 	.word	0x40000c00

00002edc <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    2edc:	b580      	push	{r7, lr}
    2ede:	b082      	sub	sp, #8
    2ee0:	af00      	add	r7, sp, #0
    2ee2:	0002      	movs	r2, r0
    2ee4:	1dfb      	adds	r3, r7, #7
    2ee6:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    2ee8:	4b0a      	ldr	r3, [pc, #40]	; (2f14 <system_gclk_chan_enable+0x38>)
    2eea:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2eec:	4a0a      	ldr	r2, [pc, #40]	; (2f18 <system_gclk_chan_enable+0x3c>)
    2eee:	1dfb      	adds	r3, r7, #7
    2ef0:	781b      	ldrb	r3, [r3, #0]
    2ef2:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    2ef4:	4909      	ldr	r1, [pc, #36]	; (2f1c <system_gclk_chan_enable+0x40>)
    2ef6:	4b09      	ldr	r3, [pc, #36]	; (2f1c <system_gclk_chan_enable+0x40>)
    2ef8:	885b      	ldrh	r3, [r3, #2]
    2efa:	b29b      	uxth	r3, r3
    2efc:	2280      	movs	r2, #128	; 0x80
    2efe:	01d2      	lsls	r2, r2, #7
    2f00:	4313      	orrs	r3, r2
    2f02:	b29b      	uxth	r3, r3
    2f04:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    2f06:	4b06      	ldr	r3, [pc, #24]	; (2f20 <system_gclk_chan_enable+0x44>)
    2f08:	4798      	blx	r3
}
    2f0a:	46c0      	nop			; (mov r8, r8)
    2f0c:	46bd      	mov	sp, r7
    2f0e:	b002      	add	sp, #8
    2f10:	bd80      	pop	{r7, pc}
    2f12:	46c0      	nop			; (mov r8, r8)
    2f14:	00002bc9 	.word	0x00002bc9
    2f18:	40000c02 	.word	0x40000c02
    2f1c:	40000c00 	.word	0x40000c00
    2f20:	00002bdd 	.word	0x00002bdd

00002f24 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    2f24:	b580      	push	{r7, lr}
    2f26:	b084      	sub	sp, #16
    2f28:	af00      	add	r7, sp, #0
    2f2a:	0002      	movs	r2, r0
    2f2c:	1dfb      	adds	r3, r7, #7
    2f2e:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    2f30:	4b1c      	ldr	r3, [pc, #112]	; (2fa4 <system_gclk_chan_disable+0x80>)
    2f32:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2f34:	4a1c      	ldr	r2, [pc, #112]	; (2fa8 <system_gclk_chan_disable+0x84>)
    2f36:	1dfb      	adds	r3, r7, #7
    2f38:	781b      	ldrb	r3, [r3, #0]
    2f3a:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    2f3c:	4b1b      	ldr	r3, [pc, #108]	; (2fac <system_gclk_chan_disable+0x88>)
    2f3e:	885b      	ldrh	r3, [r3, #2]
    2f40:	051b      	lsls	r3, r3, #20
    2f42:	0f1b      	lsrs	r3, r3, #28
    2f44:	b2db      	uxtb	r3, r3
    2f46:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    2f48:	4a18      	ldr	r2, [pc, #96]	; (2fac <system_gclk_chan_disable+0x88>)
    2f4a:	8853      	ldrh	r3, [r2, #2]
    2f4c:	4918      	ldr	r1, [pc, #96]	; (2fb0 <system_gclk_chan_disable+0x8c>)
    2f4e:	400b      	ands	r3, r1
    2f50:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    2f52:	4a16      	ldr	r2, [pc, #88]	; (2fac <system_gclk_chan_disable+0x88>)
    2f54:	4b15      	ldr	r3, [pc, #84]	; (2fac <system_gclk_chan_disable+0x88>)
    2f56:	885b      	ldrh	r3, [r3, #2]
    2f58:	b29b      	uxth	r3, r3
    2f5a:	4916      	ldr	r1, [pc, #88]	; (2fb4 <system_gclk_chan_disable+0x90>)
    2f5c:	400b      	ands	r3, r1
    2f5e:	b29b      	uxth	r3, r3
    2f60:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    2f62:	46c0      	nop			; (mov r8, r8)
    2f64:	4b11      	ldr	r3, [pc, #68]	; (2fac <system_gclk_chan_disable+0x88>)
    2f66:	885b      	ldrh	r3, [r3, #2]
    2f68:	b29b      	uxth	r3, r3
    2f6a:	001a      	movs	r2, r3
    2f6c:	2380      	movs	r3, #128	; 0x80
    2f6e:	01db      	lsls	r3, r3, #7
    2f70:	4013      	ands	r3, r2
    2f72:	d1f7      	bne.n	2f64 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    2f74:	4a0d      	ldr	r2, [pc, #52]	; (2fac <system_gclk_chan_disable+0x88>)
    2f76:	68fb      	ldr	r3, [r7, #12]
    2f78:	b2db      	uxtb	r3, r3
    2f7a:	1c19      	adds	r1, r3, #0
    2f7c:	230f      	movs	r3, #15
    2f7e:	400b      	ands	r3, r1
    2f80:	b2d9      	uxtb	r1, r3
    2f82:	8853      	ldrh	r3, [r2, #2]
    2f84:	1c08      	adds	r0, r1, #0
    2f86:	210f      	movs	r1, #15
    2f88:	4001      	ands	r1, r0
    2f8a:	0208      	lsls	r0, r1, #8
    2f8c:	4908      	ldr	r1, [pc, #32]	; (2fb0 <system_gclk_chan_disable+0x8c>)
    2f8e:	400b      	ands	r3, r1
    2f90:	1c19      	adds	r1, r3, #0
    2f92:	1c03      	adds	r3, r0, #0
    2f94:	430b      	orrs	r3, r1
    2f96:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    2f98:	4b07      	ldr	r3, [pc, #28]	; (2fb8 <system_gclk_chan_disable+0x94>)
    2f9a:	4798      	blx	r3
}
    2f9c:	46c0      	nop			; (mov r8, r8)
    2f9e:	46bd      	mov	sp, r7
    2fa0:	b004      	add	sp, #16
    2fa2:	bd80      	pop	{r7, pc}
    2fa4:	00002bc9 	.word	0x00002bc9
    2fa8:	40000c02 	.word	0x40000c02
    2fac:	40000c00 	.word	0x40000c00
    2fb0:	fffff0ff 	.word	0xfffff0ff
    2fb4:	ffffbfff 	.word	0xffffbfff
    2fb8:	00002bdd 	.word	0x00002bdd

00002fbc <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    2fbc:	b580      	push	{r7, lr}
    2fbe:	b084      	sub	sp, #16
    2fc0:	af00      	add	r7, sp, #0
    2fc2:	0002      	movs	r2, r0
    2fc4:	1dfb      	adds	r3, r7, #7
    2fc6:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    2fc8:	4b0d      	ldr	r3, [pc, #52]	; (3000 <system_gclk_chan_get_hz+0x44>)
    2fca:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2fcc:	4a0d      	ldr	r2, [pc, #52]	; (3004 <system_gclk_chan_get_hz+0x48>)
    2fce:	1dfb      	adds	r3, r7, #7
    2fd0:	781b      	ldrb	r3, [r3, #0]
    2fd2:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    2fd4:	4b0c      	ldr	r3, [pc, #48]	; (3008 <system_gclk_chan_get_hz+0x4c>)
    2fd6:	885b      	ldrh	r3, [r3, #2]
    2fd8:	051b      	lsls	r3, r3, #20
    2fda:	0f1b      	lsrs	r3, r3, #28
    2fdc:	b2da      	uxtb	r2, r3
    2fde:	230f      	movs	r3, #15
    2fe0:	18fb      	adds	r3, r7, r3
    2fe2:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    2fe4:	4b09      	ldr	r3, [pc, #36]	; (300c <system_gclk_chan_get_hz+0x50>)
    2fe6:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    2fe8:	230f      	movs	r3, #15
    2fea:	18fb      	adds	r3, r7, r3
    2fec:	781b      	ldrb	r3, [r3, #0]
    2fee:	0018      	movs	r0, r3
    2ff0:	4b07      	ldr	r3, [pc, #28]	; (3010 <system_gclk_chan_get_hz+0x54>)
    2ff2:	4798      	blx	r3
    2ff4:	0003      	movs	r3, r0
}
    2ff6:	0018      	movs	r0, r3
    2ff8:	46bd      	mov	sp, r7
    2ffa:	b004      	add	sp, #16
    2ffc:	bd80      	pop	{r7, pc}
    2ffe:	46c0      	nop			; (mov r8, r8)
    3000:	00002bc9 	.word	0x00002bc9
    3004:	40000c02 	.word	0x40000c02
    3008:	40000c00 	.word	0x40000c00
    300c:	00002bdd 	.word	0x00002bdd
    3010:	00002dc1 	.word	0x00002dc1

00003014 <system_pinmux_get_group_from_gpio_pin>:
{
    3014:	b580      	push	{r7, lr}
    3016:	b084      	sub	sp, #16
    3018:	af00      	add	r7, sp, #0
    301a:	0002      	movs	r2, r0
    301c:	1dfb      	adds	r3, r7, #7
    301e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    3020:	230f      	movs	r3, #15
    3022:	18fb      	adds	r3, r7, r3
    3024:	1dfa      	adds	r2, r7, #7
    3026:	7812      	ldrb	r2, [r2, #0]
    3028:	09d2      	lsrs	r2, r2, #7
    302a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    302c:	230e      	movs	r3, #14
    302e:	18fb      	adds	r3, r7, r3
    3030:	1dfa      	adds	r2, r7, #7
    3032:	7812      	ldrb	r2, [r2, #0]
    3034:	0952      	lsrs	r2, r2, #5
    3036:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    3038:	4b0d      	ldr	r3, [pc, #52]	; (3070 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    303a:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    303c:	230f      	movs	r3, #15
    303e:	18fb      	adds	r3, r7, r3
    3040:	781b      	ldrb	r3, [r3, #0]
    3042:	2b00      	cmp	r3, #0
    3044:	d10f      	bne.n	3066 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    3046:	230f      	movs	r3, #15
    3048:	18fb      	adds	r3, r7, r3
    304a:	781b      	ldrb	r3, [r3, #0]
    304c:	009b      	lsls	r3, r3, #2
    304e:	2210      	movs	r2, #16
    3050:	4694      	mov	ip, r2
    3052:	44bc      	add	ip, r7
    3054:	4463      	add	r3, ip
    3056:	3b08      	subs	r3, #8
    3058:	681a      	ldr	r2, [r3, #0]
    305a:	230e      	movs	r3, #14
    305c:	18fb      	adds	r3, r7, r3
    305e:	781b      	ldrb	r3, [r3, #0]
    3060:	01db      	lsls	r3, r3, #7
    3062:	18d3      	adds	r3, r2, r3
    3064:	e000      	b.n	3068 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    3066:	2300      	movs	r3, #0
}
    3068:	0018      	movs	r0, r3
    306a:	46bd      	mov	sp, r7
    306c:	b004      	add	sp, #16
    306e:	bd80      	pop	{r7, pc}
    3070:	41004400 	.word	0x41004400

00003074 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    3074:	b580      	push	{r7, lr}
    3076:	b088      	sub	sp, #32
    3078:	af00      	add	r7, sp, #0
    307a:	60f8      	str	r0, [r7, #12]
    307c:	60b9      	str	r1, [r7, #8]
    307e:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    3080:	2300      	movs	r3, #0
    3082:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    3084:	687b      	ldr	r3, [r7, #4]
    3086:	78db      	ldrb	r3, [r3, #3]
    3088:	2201      	movs	r2, #1
    308a:	4053      	eors	r3, r2
    308c:	b2db      	uxtb	r3, r3
    308e:	2b00      	cmp	r3, #0
    3090:	d035      	beq.n	30fe <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    3092:	687b      	ldr	r3, [r7, #4]
    3094:	781b      	ldrb	r3, [r3, #0]
    3096:	2b80      	cmp	r3, #128	; 0x80
    3098:	d00b      	beq.n	30b2 <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    309a:	69fb      	ldr	r3, [r7, #28]
    309c:	2280      	movs	r2, #128	; 0x80
    309e:	0252      	lsls	r2, r2, #9
    30a0:	4313      	orrs	r3, r2
    30a2:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    30a4:	687b      	ldr	r3, [r7, #4]
    30a6:	781b      	ldrb	r3, [r3, #0]
    30a8:	061b      	lsls	r3, r3, #24
    30aa:	001a      	movs	r2, r3
    30ac:	69fb      	ldr	r3, [r7, #28]
    30ae:	4313      	orrs	r3, r2
    30b0:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    30b2:	687b      	ldr	r3, [r7, #4]
    30b4:	785b      	ldrb	r3, [r3, #1]
    30b6:	2b00      	cmp	r3, #0
    30b8:	d003      	beq.n	30c2 <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    30ba:	687b      	ldr	r3, [r7, #4]
    30bc:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    30be:	2b02      	cmp	r3, #2
    30c0:	d110      	bne.n	30e4 <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    30c2:	69fb      	ldr	r3, [r7, #28]
    30c4:	2280      	movs	r2, #128	; 0x80
    30c6:	0292      	lsls	r2, r2, #10
    30c8:	4313      	orrs	r3, r2
    30ca:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    30cc:	687b      	ldr	r3, [r7, #4]
    30ce:	789b      	ldrb	r3, [r3, #2]
    30d0:	2b00      	cmp	r3, #0
    30d2:	d004      	beq.n	30de <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    30d4:	69fb      	ldr	r3, [r7, #28]
    30d6:	2280      	movs	r2, #128	; 0x80
    30d8:	02d2      	lsls	r2, r2, #11
    30da:	4313      	orrs	r3, r2
    30dc:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    30de:	68fb      	ldr	r3, [r7, #12]
    30e0:	68ba      	ldr	r2, [r7, #8]
    30e2:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    30e4:	687b      	ldr	r3, [r7, #4]
    30e6:	785b      	ldrb	r3, [r3, #1]
    30e8:	2b01      	cmp	r3, #1
    30ea:	d003      	beq.n	30f4 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    30ec:	687b      	ldr	r3, [r7, #4]
    30ee:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    30f0:	2b02      	cmp	r3, #2
    30f2:	d107      	bne.n	3104 <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    30f4:	69fb      	ldr	r3, [r7, #28]
    30f6:	4a22      	ldr	r2, [pc, #136]	; (3180 <_system_pinmux_config+0x10c>)
    30f8:	4013      	ands	r3, r2
    30fa:	61fb      	str	r3, [r7, #28]
    30fc:	e002      	b.n	3104 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    30fe:	68fb      	ldr	r3, [r7, #12]
    3100:	68ba      	ldr	r2, [r7, #8]
    3102:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    3104:	68bb      	ldr	r3, [r7, #8]
    3106:	041b      	lsls	r3, r3, #16
    3108:	0c1b      	lsrs	r3, r3, #16
    310a:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    310c:	68bb      	ldr	r3, [r7, #8]
    310e:	0c1b      	lsrs	r3, r3, #16
    3110:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3112:	69ba      	ldr	r2, [r7, #24]
    3114:	69fb      	ldr	r3, [r7, #28]
    3116:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    3118:	22a0      	movs	r2, #160	; 0xa0
    311a:	05d2      	lsls	r2, r2, #23
    311c:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    311e:	68fb      	ldr	r3, [r7, #12]
    3120:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3122:	697a      	ldr	r2, [r7, #20]
    3124:	69fb      	ldr	r3, [r7, #28]
    3126:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    3128:	22d0      	movs	r2, #208	; 0xd0
    312a:	0612      	lsls	r2, r2, #24
    312c:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    312e:	68fb      	ldr	r3, [r7, #12]
    3130:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    3132:	687b      	ldr	r3, [r7, #4]
    3134:	78db      	ldrb	r3, [r3, #3]
    3136:	2201      	movs	r2, #1
    3138:	4053      	eors	r3, r2
    313a:	b2db      	uxtb	r3, r3
    313c:	2b00      	cmp	r3, #0
    313e:	d01a      	beq.n	3176 <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    3140:	69fa      	ldr	r2, [r7, #28]
    3142:	2380      	movs	r3, #128	; 0x80
    3144:	02db      	lsls	r3, r3, #11
    3146:	4013      	ands	r3, r2
    3148:	d00a      	beq.n	3160 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    314a:	687b      	ldr	r3, [r7, #4]
    314c:	789b      	ldrb	r3, [r3, #2]
    314e:	2b01      	cmp	r3, #1
    3150:	d103      	bne.n	315a <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    3152:	68fb      	ldr	r3, [r7, #12]
    3154:	68ba      	ldr	r2, [r7, #8]
    3156:	619a      	str	r2, [r3, #24]
    3158:	e002      	b.n	3160 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    315a:	68fb      	ldr	r3, [r7, #12]
    315c:	68ba      	ldr	r2, [r7, #8]
    315e:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    3160:	687b      	ldr	r3, [r7, #4]
    3162:	785b      	ldrb	r3, [r3, #1]
    3164:	2b01      	cmp	r3, #1
    3166:	d003      	beq.n	3170 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    3168:	687b      	ldr	r3, [r7, #4]
    316a:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    316c:	2b02      	cmp	r3, #2
    316e:	d102      	bne.n	3176 <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    3170:	68fb      	ldr	r3, [r7, #12]
    3172:	68ba      	ldr	r2, [r7, #8]
    3174:	609a      	str	r2, [r3, #8]
		}
	}
}
    3176:	46c0      	nop			; (mov r8, r8)
    3178:	46bd      	mov	sp, r7
    317a:	b008      	add	sp, #32
    317c:	bd80      	pop	{r7, pc}
    317e:	46c0      	nop			; (mov r8, r8)
    3180:	fffbffff 	.word	0xfffbffff

00003184 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    3184:	b580      	push	{r7, lr}
    3186:	b084      	sub	sp, #16
    3188:	af00      	add	r7, sp, #0
    318a:	0002      	movs	r2, r0
    318c:	6039      	str	r1, [r7, #0]
    318e:	1dfb      	adds	r3, r7, #7
    3190:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    3192:	1dfb      	adds	r3, r7, #7
    3194:	781b      	ldrb	r3, [r3, #0]
    3196:	0018      	movs	r0, r3
    3198:	4b0a      	ldr	r3, [pc, #40]	; (31c4 <system_pinmux_pin_set_config+0x40>)
    319a:	4798      	blx	r3
    319c:	0003      	movs	r3, r0
    319e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    31a0:	1dfb      	adds	r3, r7, #7
    31a2:	781b      	ldrb	r3, [r3, #0]
    31a4:	221f      	movs	r2, #31
    31a6:	4013      	ands	r3, r2
    31a8:	2201      	movs	r2, #1
    31aa:	409a      	lsls	r2, r3
    31ac:	0013      	movs	r3, r2
    31ae:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    31b0:	683a      	ldr	r2, [r7, #0]
    31b2:	68b9      	ldr	r1, [r7, #8]
    31b4:	68fb      	ldr	r3, [r7, #12]
    31b6:	0018      	movs	r0, r3
    31b8:	4b03      	ldr	r3, [pc, #12]	; (31c8 <system_pinmux_pin_set_config+0x44>)
    31ba:	4798      	blx	r3
}
    31bc:	46c0      	nop			; (mov r8, r8)
    31be:	46bd      	mov	sp, r7
    31c0:	b004      	add	sp, #16
    31c2:	bd80      	pop	{r7, pc}
    31c4:	00003015 	.word	0x00003015
    31c8:	00003075 	.word	0x00003075

000031cc <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    31cc:	b580      	push	{r7, lr}
    31ce:	af00      	add	r7, sp, #0
	return;
    31d0:	46c0      	nop			; (mov r8, r8)
}
    31d2:	46bd      	mov	sp, r7
    31d4:	bd80      	pop	{r7, pc}
	...

000031d8 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    31d8:	b580      	push	{r7, lr}
    31da:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    31dc:	4b06      	ldr	r3, [pc, #24]	; (31f8 <system_init+0x20>)
    31de:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    31e0:	4b06      	ldr	r3, [pc, #24]	; (31fc <system_init+0x24>)
    31e2:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    31e4:	4b06      	ldr	r3, [pc, #24]	; (3200 <system_init+0x28>)
    31e6:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    31e8:	4b06      	ldr	r3, [pc, #24]	; (3204 <system_init+0x2c>)
    31ea:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    31ec:	4b06      	ldr	r3, [pc, #24]	; (3208 <system_init+0x30>)
    31ee:	4798      	blx	r3
}
    31f0:	46c0      	nop			; (mov r8, r8)
    31f2:	46bd      	mov	sp, r7
    31f4:	bd80      	pop	{r7, pc}
    31f6:	46c0      	nop			; (mov r8, r8)
    31f8:	00002a99 	.word	0x00002a99
    31fc:	00002685 	.word	0x00002685
    3200:	000031cd 	.word	0x000031cd
    3204:	000002b9 	.word	0x000002b9
    3208:	000031cd 	.word	0x000031cd

0000320c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    320c:	b580      	push	{r7, lr}
    320e:	b082      	sub	sp, #8
    3210:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    3212:	4b2f      	ldr	r3, [pc, #188]	; (32d0 <Reset_Handler+0xc4>)
    3214:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    3216:	4b2f      	ldr	r3, [pc, #188]	; (32d4 <Reset_Handler+0xc8>)
    3218:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    321a:	687a      	ldr	r2, [r7, #4]
    321c:	683b      	ldr	r3, [r7, #0]
    321e:	429a      	cmp	r2, r3
    3220:	d00c      	beq.n	323c <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    3222:	e007      	b.n	3234 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    3224:	683b      	ldr	r3, [r7, #0]
    3226:	1d1a      	adds	r2, r3, #4
    3228:	603a      	str	r2, [r7, #0]
    322a:	687a      	ldr	r2, [r7, #4]
    322c:	1d11      	adds	r1, r2, #4
    322e:	6079      	str	r1, [r7, #4]
    3230:	6812      	ldr	r2, [r2, #0]
    3232:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
    3234:	683a      	ldr	r2, [r7, #0]
    3236:	4b28      	ldr	r3, [pc, #160]	; (32d8 <Reset_Handler+0xcc>)
    3238:	429a      	cmp	r2, r3
    323a:	d3f3      	bcc.n	3224 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    323c:	4b27      	ldr	r3, [pc, #156]	; (32dc <Reset_Handler+0xd0>)
    323e:	603b      	str	r3, [r7, #0]
    3240:	e004      	b.n	324c <Reset_Handler+0x40>
                *pDest++ = 0;
    3242:	683b      	ldr	r3, [r7, #0]
    3244:	1d1a      	adds	r2, r3, #4
    3246:	603a      	str	r2, [r7, #0]
    3248:	2200      	movs	r2, #0
    324a:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
    324c:	683a      	ldr	r2, [r7, #0]
    324e:	4b24      	ldr	r3, [pc, #144]	; (32e0 <Reset_Handler+0xd4>)
    3250:	429a      	cmp	r2, r3
    3252:	d3f6      	bcc.n	3242 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    3254:	4b23      	ldr	r3, [pc, #140]	; (32e4 <Reset_Handler+0xd8>)
    3256:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    3258:	4b23      	ldr	r3, [pc, #140]	; (32e8 <Reset_Handler+0xdc>)
    325a:	687a      	ldr	r2, [r7, #4]
    325c:	21ff      	movs	r1, #255	; 0xff
    325e:	438a      	bics	r2, r1
    3260:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    3262:	4a22      	ldr	r2, [pc, #136]	; (32ec <Reset_Handler+0xe0>)
    3264:	2390      	movs	r3, #144	; 0x90
    3266:	005b      	lsls	r3, r3, #1
    3268:	2102      	movs	r1, #2
    326a:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    326c:	4a20      	ldr	r2, [pc, #128]	; (32f0 <Reset_Handler+0xe4>)
    326e:	78d3      	ldrb	r3, [r2, #3]
    3270:	2103      	movs	r1, #3
    3272:	438b      	bics	r3, r1
    3274:	1c19      	adds	r1, r3, #0
    3276:	2302      	movs	r3, #2
    3278:	430b      	orrs	r3, r1
    327a:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    327c:	4a1c      	ldr	r2, [pc, #112]	; (32f0 <Reset_Handler+0xe4>)
    327e:	78d3      	ldrb	r3, [r2, #3]
    3280:	210c      	movs	r1, #12
    3282:	438b      	bics	r3, r1
    3284:	1c19      	adds	r1, r3, #0
    3286:	2308      	movs	r3, #8
    3288:	430b      	orrs	r3, r1
    328a:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    328c:	4a19      	ldr	r2, [pc, #100]	; (32f4 <Reset_Handler+0xe8>)
    328e:	7b93      	ldrb	r3, [r2, #14]
    3290:	2130      	movs	r1, #48	; 0x30
    3292:	438b      	bics	r3, r1
    3294:	1c19      	adds	r1, r3, #0
    3296:	2320      	movs	r3, #32
    3298:	430b      	orrs	r3, r1
    329a:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    329c:	4a15      	ldr	r2, [pc, #84]	; (32f4 <Reset_Handler+0xe8>)
    329e:	7b93      	ldrb	r3, [r2, #14]
    32a0:	210c      	movs	r1, #12
    32a2:	438b      	bics	r3, r1
    32a4:	1c19      	adds	r1, r3, #0
    32a6:	2308      	movs	r3, #8
    32a8:	430b      	orrs	r3, r1
    32aa:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    32ac:	4a11      	ldr	r2, [pc, #68]	; (32f4 <Reset_Handler+0xe8>)
    32ae:	7b93      	ldrb	r3, [r2, #14]
    32b0:	2103      	movs	r1, #3
    32b2:	438b      	bics	r3, r1
    32b4:	1c19      	adds	r1, r3, #0
    32b6:	2302      	movs	r3, #2
    32b8:	430b      	orrs	r3, r1
    32ba:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    32bc:	4a0e      	ldr	r2, [pc, #56]	; (32f8 <Reset_Handler+0xec>)
    32be:	6853      	ldr	r3, [r2, #4]
    32c0:	2180      	movs	r1, #128	; 0x80
    32c2:	430b      	orrs	r3, r1
    32c4:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    32c6:	4b0d      	ldr	r3, [pc, #52]	; (32fc <Reset_Handler+0xf0>)
    32c8:	4798      	blx	r3

        /* Branch to main function */
        main();
    32ca:	4b0d      	ldr	r3, [pc, #52]	; (3300 <Reset_Handler+0xf4>)
    32cc:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    32ce:	e7fe      	b.n	32ce <Reset_Handler+0xc2>
    32d0:	00005300 	.word	0x00005300
    32d4:	20000000 	.word	0x20000000
    32d8:	20000010 	.word	0x20000010
    32dc:	20000010 	.word	0x20000010
    32e0:	20000124 	.word	0x20000124
    32e4:	00000000 	.word	0x00000000
    32e8:	e000ed00 	.word	0xe000ed00
    32ec:	41007000 	.word	0x41007000
    32f0:	41005000 	.word	0x41005000
    32f4:	41004800 	.word	0x41004800
    32f8:	41004000 	.word	0x41004000
    32fc:	000051a9 	.word	0x000051a9
    3300:	0000331d 	.word	0x0000331d

00003304 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
uint32_t phantomISR = 9999;

void Dummy_Handler(void)
{
    3304:	b580      	push	{r7, lr}
    3306:	b082      	sub	sp, #8
    3308:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    330a:	f3ef 8305 	mrs	r3, IPSR
    330e:	607b      	str	r3, [r7, #4]
  return(result);
    3310:	687a      	ldr	r2, [r7, #4]
        while (1) {
			phantomISR = __get_IPSR();
    3312:	4b01      	ldr	r3, [pc, #4]	; (3318 <Dummy_Handler+0x14>)
    3314:	601a      	str	r2, [r3, #0]
    3316:	e7f8      	b.n	330a <Dummy_Handler+0x6>
    3318:	2000000c 	.word	0x2000000c

0000331c <main>:
double pres_calced;
double hum_calced;


int main (void)
{
    331c:	b590      	push	{r4, r7, lr}
    331e:	b087      	sub	sp, #28
    3320:	af00      	add	r7, sp, #0
	system_init();
    3322:	4b52      	ldr	r3, [pc, #328]	; (346c <main+0x150>)
    3324:	4798      	blx	r3
	delay_init();
    3326:	4b52      	ldr	r3, [pc, #328]	; (3470 <main+0x154>)
    3328:	4798      	blx	r3
	spi_master_init();
    332a:	4b52      	ldr	r3, [pc, #328]	; (3474 <main+0x158>)
    332c:	4798      	blx	r3
	
	uint8_t read_data[8];
	for (int i=0;i<7;i++)
    332e:	2300      	movs	r3, #0
    3330:	617b      	str	r3, [r7, #20]
    3332:	e008      	b.n	3346 <main+0x2a>
	{
		read_data[i] = 0x00;
    3334:	230c      	movs	r3, #12
    3336:	18fa      	adds	r2, r7, r3
    3338:	697b      	ldr	r3, [r7, #20]
    333a:	18d3      	adds	r3, r2, r3
    333c:	2200      	movs	r2, #0
    333e:	701a      	strb	r2, [r3, #0]
	for (int i=0;i<7;i++)
    3340:	697b      	ldr	r3, [r7, #20]
    3342:	3301      	adds	r3, #1
    3344:	617b      	str	r3, [r7, #20]
    3346:	697b      	ldr	r3, [r7, #20]
    3348:	2b06      	cmp	r3, #6
    334a:	ddf3      	ble.n	3334 <main+0x18>
	}
	
	//bme280_spi_write(0xB6,1);
	
	
	delay_ms(10);
    334c:	200a      	movs	r0, #10
    334e:	4b4a      	ldr	r3, [pc, #296]	; (3478 <main+0x15c>)
    3350:	4798      	blx	r3
	bme280_get_cal_data();
    3352:	4b4a      	ldr	r3, [pc, #296]	; (347c <main+0x160>)
    3354:	4798      	blx	r3
	bme280_calc_cal();
    3356:	4b4a      	ldr	r3, [pc, #296]	; (3480 <main+0x164>)
    3358:	4798      	blx	r3
	
	
	bme280_spi_read(&device_id,1,0xD0);
    335a:	4b4a      	ldr	r3, [pc, #296]	; (3484 <main+0x168>)
    335c:	22d0      	movs	r2, #208	; 0xd0
    335e:	2101      	movs	r1, #1
    3360:	0018      	movs	r0, r3
    3362:	4b49      	ldr	r3, [pc, #292]	; (3488 <main+0x16c>)
    3364:	4798      	blx	r3
	uint8_t data[2];

	
	uint8_t temp =  0;
    3366:	1dfb      	adds	r3, r7, #7
    3368:	2200      	movs	r2, #0
    336a:	701a      	strb	r2, [r3, #0]
	bme280_spi_read(&temp,1,0xF2);
    336c:	1dfb      	adds	r3, r7, #7
    336e:	22f2      	movs	r2, #242	; 0xf2
    3370:	2101      	movs	r1, #1
    3372:	0018      	movs	r0, r3
    3374:	4b44      	ldr	r3, [pc, #272]	; (3488 <main+0x16c>)
    3376:	4798      	blx	r3
	
	data[0] = 0xF2;
    3378:	2308      	movs	r3, #8
    337a:	18fb      	adds	r3, r7, r3
    337c:	22f2      	movs	r2, #242	; 0xf2
    337e:	701a      	strb	r2, [r3, #0]
	data[1] = 0x01;//temp & 0x7D;//
    3380:	2308      	movs	r3, #8
    3382:	18fb      	adds	r3, r7, r3
    3384:	2201      	movs	r2, #1
    3386:	705a      	strb	r2, [r3, #1]
	bme280_spi_write(&data,2);
    3388:	2308      	movs	r3, #8
    338a:	18fb      	adds	r3, r7, r3
    338c:	2102      	movs	r1, #2
    338e:	0018      	movs	r0, r3
    3390:	4b3e      	ldr	r3, [pc, #248]	; (348c <main+0x170>)
    3392:	4798      	blx	r3
	data[0] = 0xF4;
    3394:	2308      	movs	r3, #8
    3396:	18fb      	adds	r3, r7, r3
    3398:	22f4      	movs	r2, #244	; 0xf4
    339a:	701a      	strb	r2, [r3, #0]
	//data[1] = 0x25;
	data[1] = 0x26;//0b00100101;
    339c:	2308      	movs	r3, #8
    339e:	18fb      	adds	r3, r7, r3
    33a0:	2226      	movs	r2, #38	; 0x26
    33a2:	705a      	strb	r2, [r3, #1]
	bme280_spi_write(&data,2);
    33a4:	2308      	movs	r3, #8
    33a6:	18fb      	adds	r3, r7, r3
    33a8:	2102      	movs	r1, #2
    33aa:	0018      	movs	r0, r3
    33ac:	4b37      	ldr	r3, [pc, #220]	; (348c <main+0x170>)
    33ae:	4798      	blx	r3
	
	data[0] = 0xF5;
    33b0:	2308      	movs	r3, #8
    33b2:	18fb      	adds	r3, r7, r3
    33b4:	22f5      	movs	r2, #245	; 0xf5
    33b6:	701a      	strb	r2, [r3, #0]
	data[1] = 0xC0;
    33b8:	2308      	movs	r3, #8
    33ba:	18fb      	adds	r3, r7, r3
    33bc:	22c0      	movs	r2, #192	; 0xc0
    33be:	705a      	strb	r2, [r3, #1]
	bme280_spi_write(&data,2);
    33c0:	2308      	movs	r3, #8
    33c2:	18fb      	adds	r3, r7, r3
    33c4:	2102      	movs	r1, #2
    33c6:	0018      	movs	r0, r3
    33c8:	4b30      	ldr	r3, [pc, #192]	; (348c <main+0x170>)
    33ca:	4798      	blx	r3

	//bme280_spi_read(&read_data[7],1,0xF3);
	//bme280_spi_read(&read_data[6],1,0xF4);
	delay_ms(10);
    33cc:	200a      	movs	r0, #10
    33ce:	4b2a      	ldr	r3, [pc, #168]	; (3478 <main+0x15c>)
    33d0:	4798      	blx	r3
	bme280_spi_read(&read_data[5],1,0xF9);*/
	
	
	while (1)
	{
		delay_ms(500);
    33d2:	23fa      	movs	r3, #250	; 0xfa
    33d4:	005b      	lsls	r3, r3, #1
    33d6:	0018      	movs	r0, r3
    33d8:	4b27      	ldr	r3, [pc, #156]	; (3478 <main+0x15c>)
    33da:	4798      	blx	r3
		
		bme280_read_temp(&temps);
    33dc:	4b2c      	ldr	r3, [pc, #176]	; (3490 <main+0x174>)
    33de:	0018      	movs	r0, r3
    33e0:	4b2c      	ldr	r3, [pc, #176]	; (3494 <main+0x178>)
    33e2:	4798      	blx	r3
		bme280_read_pres(&pres);
    33e4:	4b2c      	ldr	r3, [pc, #176]	; (3498 <main+0x17c>)
    33e6:	0018      	movs	r0, r3
    33e8:	4b2c      	ldr	r3, [pc, #176]	; (349c <main+0x180>)
    33ea:	4798      	blx	r3
		bme280_read_hum(&hum);
    33ec:	4b2c      	ldr	r3, [pc, #176]	; (34a0 <main+0x184>)
    33ee:	0018      	movs	r0, r3
    33f0:	4b2c      	ldr	r3, [pc, #176]	; (34a4 <main+0x188>)
    33f2:	4798      	blx	r3
		temp_calced = bme280_calc_temp((int32_t)(temps[0]<<12)+(temps[1] << 4)+(temps[2] >> 4));
    33f4:	4b26      	ldr	r3, [pc, #152]	; (3490 <main+0x174>)
    33f6:	781b      	ldrb	r3, [r3, #0]
    33f8:	031a      	lsls	r2, r3, #12
    33fa:	4b25      	ldr	r3, [pc, #148]	; (3490 <main+0x174>)
    33fc:	785b      	ldrb	r3, [r3, #1]
    33fe:	011b      	lsls	r3, r3, #4
    3400:	18d3      	adds	r3, r2, r3
    3402:	4a23      	ldr	r2, [pc, #140]	; (3490 <main+0x174>)
    3404:	7892      	ldrb	r2, [r2, #2]
    3406:	0912      	lsrs	r2, r2, #4
    3408:	b2d2      	uxtb	r2, r2
    340a:	189b      	adds	r3, r3, r2
    340c:	0018      	movs	r0, r3
    340e:	4b26      	ldr	r3, [pc, #152]	; (34a8 <main+0x18c>)
    3410:	4798      	blx	r3
    3412:	0003      	movs	r3, r0
    3414:	000c      	movs	r4, r1
    3416:	4a25      	ldr	r2, [pc, #148]	; (34ac <main+0x190>)
    3418:	6013      	str	r3, [r2, #0]
    341a:	6054      	str	r4, [r2, #4]
		pres_calced = bme280_calc_pres((int32_t)(pres[0]<<12)+(pres[1] << 4)+(pres[2] >> 4))/100;
    341c:	4b1e      	ldr	r3, [pc, #120]	; (3498 <main+0x17c>)
    341e:	781b      	ldrb	r3, [r3, #0]
    3420:	031a      	lsls	r2, r3, #12
    3422:	4b1d      	ldr	r3, [pc, #116]	; (3498 <main+0x17c>)
    3424:	785b      	ldrb	r3, [r3, #1]
    3426:	011b      	lsls	r3, r3, #4
    3428:	18d3      	adds	r3, r2, r3
    342a:	4a1b      	ldr	r2, [pc, #108]	; (3498 <main+0x17c>)
    342c:	7892      	ldrb	r2, [r2, #2]
    342e:	0912      	lsrs	r2, r2, #4
    3430:	b2d2      	uxtb	r2, r2
    3432:	189b      	adds	r3, r3, r2
    3434:	0018      	movs	r0, r3
    3436:	4b1e      	ldr	r3, [pc, #120]	; (34b0 <main+0x194>)
    3438:	4798      	blx	r3
    343a:	4c1e      	ldr	r4, [pc, #120]	; (34b4 <main+0x198>)
    343c:	2200      	movs	r2, #0
    343e:	4b1e      	ldr	r3, [pc, #120]	; (34b8 <main+0x19c>)
    3440:	47a0      	blx	r4
    3442:	0003      	movs	r3, r0
    3444:	000c      	movs	r4, r1
    3446:	4a1d      	ldr	r2, [pc, #116]	; (34bc <main+0x1a0>)
    3448:	6013      	str	r3, [r2, #0]
    344a:	6054      	str	r4, [r2, #4]
		hum_calced = bme280_calc_hum((int32_t)(hum[0]<<8)+hum[1]);
    344c:	4b14      	ldr	r3, [pc, #80]	; (34a0 <main+0x184>)
    344e:	781b      	ldrb	r3, [r3, #0]
    3450:	021b      	lsls	r3, r3, #8
    3452:	4a13      	ldr	r2, [pc, #76]	; (34a0 <main+0x184>)
    3454:	7852      	ldrb	r2, [r2, #1]
    3456:	189b      	adds	r3, r3, r2
    3458:	0018      	movs	r0, r3
    345a:	4b19      	ldr	r3, [pc, #100]	; (34c0 <main+0x1a4>)
    345c:	4798      	blx	r3
    345e:	0003      	movs	r3, r0
    3460:	000c      	movs	r4, r1
    3462:	4a18      	ldr	r2, [pc, #96]	; (34c4 <main+0x1a8>)
    3464:	6013      	str	r3, [r2, #0]
    3466:	6054      	str	r4, [r2, #4]
		delay_ms(500);
    3468:	e7b3      	b.n	33d2 <main+0xb6>
    346a:	46c0      	nop			; (mov r8, r8)
    346c:	000031d9 	.word	0x000031d9
    3470:	00000149 	.word	0x00000149
    3474:	0000154d 	.word	0x0000154d
    3478:	000001a1 	.word	0x000001a1
    347c:	00000929 	.word	0x00000929
    3480:	000009a9 	.word	0x000009a9
    3484:	20000050 	.word	0x20000050
    3488:	00000785 	.word	0x00000785
    348c:	00000729 	.word	0x00000729
    3490:	20000120 	.word	0x20000120
    3494:	00000809 	.word	0x00000809
    3498:	20000104 	.word	0x20000104
    349c:	00000869 	.word	0x00000869
    34a0:	20000100 	.word	0x20000100
    34a4:	000008c9 	.word	0x000008c9
    34a8:	00000bad 	.word	0x00000bad
    34ac:	20000118 	.word	0x20000118
    34b0:	00000d59 	.word	0x00000d59
    34b4:	00003c7d 	.word	0x00003c7d
    34b8:	40590000 	.word	0x40590000
    34bc:	20000110 	.word	0x20000110
    34c0:	000010b5 	.word	0x000010b5
    34c4:	20000108 	.word	0x20000108

000034c8 <__udivsi3>:
    34c8:	2200      	movs	r2, #0
    34ca:	0843      	lsrs	r3, r0, #1
    34cc:	428b      	cmp	r3, r1
    34ce:	d374      	bcc.n	35ba <__udivsi3+0xf2>
    34d0:	0903      	lsrs	r3, r0, #4
    34d2:	428b      	cmp	r3, r1
    34d4:	d35f      	bcc.n	3596 <__udivsi3+0xce>
    34d6:	0a03      	lsrs	r3, r0, #8
    34d8:	428b      	cmp	r3, r1
    34da:	d344      	bcc.n	3566 <__udivsi3+0x9e>
    34dc:	0b03      	lsrs	r3, r0, #12
    34de:	428b      	cmp	r3, r1
    34e0:	d328      	bcc.n	3534 <__udivsi3+0x6c>
    34e2:	0c03      	lsrs	r3, r0, #16
    34e4:	428b      	cmp	r3, r1
    34e6:	d30d      	bcc.n	3504 <__udivsi3+0x3c>
    34e8:	22ff      	movs	r2, #255	; 0xff
    34ea:	0209      	lsls	r1, r1, #8
    34ec:	ba12      	rev	r2, r2
    34ee:	0c03      	lsrs	r3, r0, #16
    34f0:	428b      	cmp	r3, r1
    34f2:	d302      	bcc.n	34fa <__udivsi3+0x32>
    34f4:	1212      	asrs	r2, r2, #8
    34f6:	0209      	lsls	r1, r1, #8
    34f8:	d065      	beq.n	35c6 <__udivsi3+0xfe>
    34fa:	0b03      	lsrs	r3, r0, #12
    34fc:	428b      	cmp	r3, r1
    34fe:	d319      	bcc.n	3534 <__udivsi3+0x6c>
    3500:	e000      	b.n	3504 <__udivsi3+0x3c>
    3502:	0a09      	lsrs	r1, r1, #8
    3504:	0bc3      	lsrs	r3, r0, #15
    3506:	428b      	cmp	r3, r1
    3508:	d301      	bcc.n	350e <__udivsi3+0x46>
    350a:	03cb      	lsls	r3, r1, #15
    350c:	1ac0      	subs	r0, r0, r3
    350e:	4152      	adcs	r2, r2
    3510:	0b83      	lsrs	r3, r0, #14
    3512:	428b      	cmp	r3, r1
    3514:	d301      	bcc.n	351a <__udivsi3+0x52>
    3516:	038b      	lsls	r3, r1, #14
    3518:	1ac0      	subs	r0, r0, r3
    351a:	4152      	adcs	r2, r2
    351c:	0b43      	lsrs	r3, r0, #13
    351e:	428b      	cmp	r3, r1
    3520:	d301      	bcc.n	3526 <__udivsi3+0x5e>
    3522:	034b      	lsls	r3, r1, #13
    3524:	1ac0      	subs	r0, r0, r3
    3526:	4152      	adcs	r2, r2
    3528:	0b03      	lsrs	r3, r0, #12
    352a:	428b      	cmp	r3, r1
    352c:	d301      	bcc.n	3532 <__udivsi3+0x6a>
    352e:	030b      	lsls	r3, r1, #12
    3530:	1ac0      	subs	r0, r0, r3
    3532:	4152      	adcs	r2, r2
    3534:	0ac3      	lsrs	r3, r0, #11
    3536:	428b      	cmp	r3, r1
    3538:	d301      	bcc.n	353e <__udivsi3+0x76>
    353a:	02cb      	lsls	r3, r1, #11
    353c:	1ac0      	subs	r0, r0, r3
    353e:	4152      	adcs	r2, r2
    3540:	0a83      	lsrs	r3, r0, #10
    3542:	428b      	cmp	r3, r1
    3544:	d301      	bcc.n	354a <__udivsi3+0x82>
    3546:	028b      	lsls	r3, r1, #10
    3548:	1ac0      	subs	r0, r0, r3
    354a:	4152      	adcs	r2, r2
    354c:	0a43      	lsrs	r3, r0, #9
    354e:	428b      	cmp	r3, r1
    3550:	d301      	bcc.n	3556 <__udivsi3+0x8e>
    3552:	024b      	lsls	r3, r1, #9
    3554:	1ac0      	subs	r0, r0, r3
    3556:	4152      	adcs	r2, r2
    3558:	0a03      	lsrs	r3, r0, #8
    355a:	428b      	cmp	r3, r1
    355c:	d301      	bcc.n	3562 <__udivsi3+0x9a>
    355e:	020b      	lsls	r3, r1, #8
    3560:	1ac0      	subs	r0, r0, r3
    3562:	4152      	adcs	r2, r2
    3564:	d2cd      	bcs.n	3502 <__udivsi3+0x3a>
    3566:	09c3      	lsrs	r3, r0, #7
    3568:	428b      	cmp	r3, r1
    356a:	d301      	bcc.n	3570 <__udivsi3+0xa8>
    356c:	01cb      	lsls	r3, r1, #7
    356e:	1ac0      	subs	r0, r0, r3
    3570:	4152      	adcs	r2, r2
    3572:	0983      	lsrs	r3, r0, #6
    3574:	428b      	cmp	r3, r1
    3576:	d301      	bcc.n	357c <__udivsi3+0xb4>
    3578:	018b      	lsls	r3, r1, #6
    357a:	1ac0      	subs	r0, r0, r3
    357c:	4152      	adcs	r2, r2
    357e:	0943      	lsrs	r3, r0, #5
    3580:	428b      	cmp	r3, r1
    3582:	d301      	bcc.n	3588 <__udivsi3+0xc0>
    3584:	014b      	lsls	r3, r1, #5
    3586:	1ac0      	subs	r0, r0, r3
    3588:	4152      	adcs	r2, r2
    358a:	0903      	lsrs	r3, r0, #4
    358c:	428b      	cmp	r3, r1
    358e:	d301      	bcc.n	3594 <__udivsi3+0xcc>
    3590:	010b      	lsls	r3, r1, #4
    3592:	1ac0      	subs	r0, r0, r3
    3594:	4152      	adcs	r2, r2
    3596:	08c3      	lsrs	r3, r0, #3
    3598:	428b      	cmp	r3, r1
    359a:	d301      	bcc.n	35a0 <__udivsi3+0xd8>
    359c:	00cb      	lsls	r3, r1, #3
    359e:	1ac0      	subs	r0, r0, r3
    35a0:	4152      	adcs	r2, r2
    35a2:	0883      	lsrs	r3, r0, #2
    35a4:	428b      	cmp	r3, r1
    35a6:	d301      	bcc.n	35ac <__udivsi3+0xe4>
    35a8:	008b      	lsls	r3, r1, #2
    35aa:	1ac0      	subs	r0, r0, r3
    35ac:	4152      	adcs	r2, r2
    35ae:	0843      	lsrs	r3, r0, #1
    35b0:	428b      	cmp	r3, r1
    35b2:	d301      	bcc.n	35b8 <__udivsi3+0xf0>
    35b4:	004b      	lsls	r3, r1, #1
    35b6:	1ac0      	subs	r0, r0, r3
    35b8:	4152      	adcs	r2, r2
    35ba:	1a41      	subs	r1, r0, r1
    35bc:	d200      	bcs.n	35c0 <__udivsi3+0xf8>
    35be:	4601      	mov	r1, r0
    35c0:	4152      	adcs	r2, r2
    35c2:	4610      	mov	r0, r2
    35c4:	4770      	bx	lr
    35c6:	e7ff      	b.n	35c8 <__udivsi3+0x100>
    35c8:	b501      	push	{r0, lr}
    35ca:	2000      	movs	r0, #0
    35cc:	f000 f806 	bl	35dc <__aeabi_idiv0>
    35d0:	bd02      	pop	{r1, pc}
    35d2:	46c0      	nop			; (mov r8, r8)

000035d4 <__aeabi_uidivmod>:
    35d4:	2900      	cmp	r1, #0
    35d6:	d0f7      	beq.n	35c8 <__udivsi3+0x100>
    35d8:	e776      	b.n	34c8 <__udivsi3>
    35da:	4770      	bx	lr

000035dc <__aeabi_idiv0>:
    35dc:	4770      	bx	lr
    35de:	46c0      	nop			; (mov r8, r8)

000035e0 <__aeabi_cdrcmple>:
    35e0:	4684      	mov	ip, r0
    35e2:	1c10      	adds	r0, r2, #0
    35e4:	4662      	mov	r2, ip
    35e6:	468c      	mov	ip, r1
    35e8:	1c19      	adds	r1, r3, #0
    35ea:	4663      	mov	r3, ip
    35ec:	e000      	b.n	35f0 <__aeabi_cdcmpeq>
    35ee:	46c0      	nop			; (mov r8, r8)

000035f0 <__aeabi_cdcmpeq>:
    35f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    35f2:	f000 ff15 	bl	4420 <__ledf2>
    35f6:	2800      	cmp	r0, #0
    35f8:	d401      	bmi.n	35fe <__aeabi_cdcmpeq+0xe>
    35fa:	2100      	movs	r1, #0
    35fc:	42c8      	cmn	r0, r1
    35fe:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00003600 <__aeabi_dcmpeq>:
    3600:	b510      	push	{r4, lr}
    3602:	f000 fe6f 	bl	42e4 <__eqdf2>
    3606:	4240      	negs	r0, r0
    3608:	3001      	adds	r0, #1
    360a:	bd10      	pop	{r4, pc}

0000360c <__aeabi_dcmplt>:
    360c:	b510      	push	{r4, lr}
    360e:	f000 ff07 	bl	4420 <__ledf2>
    3612:	2800      	cmp	r0, #0
    3614:	db01      	blt.n	361a <__aeabi_dcmplt+0xe>
    3616:	2000      	movs	r0, #0
    3618:	bd10      	pop	{r4, pc}
    361a:	2001      	movs	r0, #1
    361c:	bd10      	pop	{r4, pc}
    361e:	46c0      	nop			; (mov r8, r8)

00003620 <__aeabi_dcmple>:
    3620:	b510      	push	{r4, lr}
    3622:	f000 fefd 	bl	4420 <__ledf2>
    3626:	2800      	cmp	r0, #0
    3628:	dd01      	ble.n	362e <__aeabi_dcmple+0xe>
    362a:	2000      	movs	r0, #0
    362c:	bd10      	pop	{r4, pc}
    362e:	2001      	movs	r0, #1
    3630:	bd10      	pop	{r4, pc}
    3632:	46c0      	nop			; (mov r8, r8)

00003634 <__aeabi_dcmpgt>:
    3634:	b510      	push	{r4, lr}
    3636:	f000 fe8f 	bl	4358 <__gedf2>
    363a:	2800      	cmp	r0, #0
    363c:	dc01      	bgt.n	3642 <__aeabi_dcmpgt+0xe>
    363e:	2000      	movs	r0, #0
    3640:	bd10      	pop	{r4, pc}
    3642:	2001      	movs	r0, #1
    3644:	bd10      	pop	{r4, pc}
    3646:	46c0      	nop			; (mov r8, r8)

00003648 <__aeabi_dcmpge>:
    3648:	b510      	push	{r4, lr}
    364a:	f000 fe85 	bl	4358 <__gedf2>
    364e:	2800      	cmp	r0, #0
    3650:	da01      	bge.n	3656 <__aeabi_dcmpge+0xe>
    3652:	2000      	movs	r0, #0
    3654:	bd10      	pop	{r4, pc}
    3656:	2001      	movs	r0, #1
    3658:	bd10      	pop	{r4, pc}
    365a:	46c0      	nop			; (mov r8, r8)

0000365c <__aeabi_dadd>:
    365c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    365e:	4645      	mov	r5, r8
    3660:	46de      	mov	lr, fp
    3662:	4657      	mov	r7, sl
    3664:	464e      	mov	r6, r9
    3666:	030c      	lsls	r4, r1, #12
    3668:	b5e0      	push	{r5, r6, r7, lr}
    366a:	004e      	lsls	r6, r1, #1
    366c:	0fc9      	lsrs	r1, r1, #31
    366e:	4688      	mov	r8, r1
    3670:	000d      	movs	r5, r1
    3672:	0a61      	lsrs	r1, r4, #9
    3674:	0f44      	lsrs	r4, r0, #29
    3676:	430c      	orrs	r4, r1
    3678:	00c7      	lsls	r7, r0, #3
    367a:	0319      	lsls	r1, r3, #12
    367c:	0058      	lsls	r0, r3, #1
    367e:	0fdb      	lsrs	r3, r3, #31
    3680:	469b      	mov	fp, r3
    3682:	0a4b      	lsrs	r3, r1, #9
    3684:	0f51      	lsrs	r1, r2, #29
    3686:	430b      	orrs	r3, r1
    3688:	0d76      	lsrs	r6, r6, #21
    368a:	0d40      	lsrs	r0, r0, #21
    368c:	0019      	movs	r1, r3
    368e:	00d2      	lsls	r2, r2, #3
    3690:	45d8      	cmp	r8, fp
    3692:	d100      	bne.n	3696 <__aeabi_dadd+0x3a>
    3694:	e0ae      	b.n	37f4 <__aeabi_dadd+0x198>
    3696:	1a35      	subs	r5, r6, r0
    3698:	2d00      	cmp	r5, #0
    369a:	dc00      	bgt.n	369e <__aeabi_dadd+0x42>
    369c:	e0f6      	b.n	388c <__aeabi_dadd+0x230>
    369e:	2800      	cmp	r0, #0
    36a0:	d10f      	bne.n	36c2 <__aeabi_dadd+0x66>
    36a2:	4313      	orrs	r3, r2
    36a4:	d100      	bne.n	36a8 <__aeabi_dadd+0x4c>
    36a6:	e0db      	b.n	3860 <__aeabi_dadd+0x204>
    36a8:	1e6b      	subs	r3, r5, #1
    36aa:	2b00      	cmp	r3, #0
    36ac:	d000      	beq.n	36b0 <__aeabi_dadd+0x54>
    36ae:	e137      	b.n	3920 <__aeabi_dadd+0x2c4>
    36b0:	1aba      	subs	r2, r7, r2
    36b2:	4297      	cmp	r7, r2
    36b4:	41bf      	sbcs	r7, r7
    36b6:	1a64      	subs	r4, r4, r1
    36b8:	427f      	negs	r7, r7
    36ba:	1be4      	subs	r4, r4, r7
    36bc:	2601      	movs	r6, #1
    36be:	0017      	movs	r7, r2
    36c0:	e024      	b.n	370c <__aeabi_dadd+0xb0>
    36c2:	4bc6      	ldr	r3, [pc, #792]	; (39dc <__aeabi_dadd+0x380>)
    36c4:	429e      	cmp	r6, r3
    36c6:	d04d      	beq.n	3764 <__aeabi_dadd+0x108>
    36c8:	2380      	movs	r3, #128	; 0x80
    36ca:	041b      	lsls	r3, r3, #16
    36cc:	4319      	orrs	r1, r3
    36ce:	2d38      	cmp	r5, #56	; 0x38
    36d0:	dd00      	ble.n	36d4 <__aeabi_dadd+0x78>
    36d2:	e107      	b.n	38e4 <__aeabi_dadd+0x288>
    36d4:	2d1f      	cmp	r5, #31
    36d6:	dd00      	ble.n	36da <__aeabi_dadd+0x7e>
    36d8:	e138      	b.n	394c <__aeabi_dadd+0x2f0>
    36da:	2020      	movs	r0, #32
    36dc:	1b43      	subs	r3, r0, r5
    36de:	469a      	mov	sl, r3
    36e0:	000b      	movs	r3, r1
    36e2:	4650      	mov	r0, sl
    36e4:	4083      	lsls	r3, r0
    36e6:	4699      	mov	r9, r3
    36e8:	0013      	movs	r3, r2
    36ea:	4648      	mov	r0, r9
    36ec:	40eb      	lsrs	r3, r5
    36ee:	4318      	orrs	r0, r3
    36f0:	0003      	movs	r3, r0
    36f2:	4650      	mov	r0, sl
    36f4:	4082      	lsls	r2, r0
    36f6:	1e50      	subs	r0, r2, #1
    36f8:	4182      	sbcs	r2, r0
    36fa:	40e9      	lsrs	r1, r5
    36fc:	431a      	orrs	r2, r3
    36fe:	1aba      	subs	r2, r7, r2
    3700:	1a61      	subs	r1, r4, r1
    3702:	4297      	cmp	r7, r2
    3704:	41a4      	sbcs	r4, r4
    3706:	0017      	movs	r7, r2
    3708:	4264      	negs	r4, r4
    370a:	1b0c      	subs	r4, r1, r4
    370c:	0223      	lsls	r3, r4, #8
    370e:	d562      	bpl.n	37d6 <__aeabi_dadd+0x17a>
    3710:	0264      	lsls	r4, r4, #9
    3712:	0a65      	lsrs	r5, r4, #9
    3714:	2d00      	cmp	r5, #0
    3716:	d100      	bne.n	371a <__aeabi_dadd+0xbe>
    3718:	e0df      	b.n	38da <__aeabi_dadd+0x27e>
    371a:	0028      	movs	r0, r5
    371c:	f001 fd26 	bl	516c <__clzsi2>
    3720:	0003      	movs	r3, r0
    3722:	3b08      	subs	r3, #8
    3724:	2b1f      	cmp	r3, #31
    3726:	dd00      	ble.n	372a <__aeabi_dadd+0xce>
    3728:	e0d2      	b.n	38d0 <__aeabi_dadd+0x274>
    372a:	2220      	movs	r2, #32
    372c:	003c      	movs	r4, r7
    372e:	1ad2      	subs	r2, r2, r3
    3730:	409d      	lsls	r5, r3
    3732:	40d4      	lsrs	r4, r2
    3734:	409f      	lsls	r7, r3
    3736:	4325      	orrs	r5, r4
    3738:	429e      	cmp	r6, r3
    373a:	dd00      	ble.n	373e <__aeabi_dadd+0xe2>
    373c:	e0c4      	b.n	38c8 <__aeabi_dadd+0x26c>
    373e:	1b9e      	subs	r6, r3, r6
    3740:	1c73      	adds	r3, r6, #1
    3742:	2b1f      	cmp	r3, #31
    3744:	dd00      	ble.n	3748 <__aeabi_dadd+0xec>
    3746:	e0f1      	b.n	392c <__aeabi_dadd+0x2d0>
    3748:	2220      	movs	r2, #32
    374a:	0038      	movs	r0, r7
    374c:	0029      	movs	r1, r5
    374e:	1ad2      	subs	r2, r2, r3
    3750:	40d8      	lsrs	r0, r3
    3752:	4091      	lsls	r1, r2
    3754:	4097      	lsls	r7, r2
    3756:	002c      	movs	r4, r5
    3758:	4301      	orrs	r1, r0
    375a:	1e78      	subs	r0, r7, #1
    375c:	4187      	sbcs	r7, r0
    375e:	40dc      	lsrs	r4, r3
    3760:	2600      	movs	r6, #0
    3762:	430f      	orrs	r7, r1
    3764:	077b      	lsls	r3, r7, #29
    3766:	d009      	beq.n	377c <__aeabi_dadd+0x120>
    3768:	230f      	movs	r3, #15
    376a:	403b      	ands	r3, r7
    376c:	2b04      	cmp	r3, #4
    376e:	d005      	beq.n	377c <__aeabi_dadd+0x120>
    3770:	1d3b      	adds	r3, r7, #4
    3772:	42bb      	cmp	r3, r7
    3774:	41bf      	sbcs	r7, r7
    3776:	427f      	negs	r7, r7
    3778:	19e4      	adds	r4, r4, r7
    377a:	001f      	movs	r7, r3
    377c:	0223      	lsls	r3, r4, #8
    377e:	d52c      	bpl.n	37da <__aeabi_dadd+0x17e>
    3780:	4b96      	ldr	r3, [pc, #600]	; (39dc <__aeabi_dadd+0x380>)
    3782:	3601      	adds	r6, #1
    3784:	429e      	cmp	r6, r3
    3786:	d100      	bne.n	378a <__aeabi_dadd+0x12e>
    3788:	e09a      	b.n	38c0 <__aeabi_dadd+0x264>
    378a:	4645      	mov	r5, r8
    378c:	4b94      	ldr	r3, [pc, #592]	; (39e0 <__aeabi_dadd+0x384>)
    378e:	08ff      	lsrs	r7, r7, #3
    3790:	401c      	ands	r4, r3
    3792:	0760      	lsls	r0, r4, #29
    3794:	0576      	lsls	r6, r6, #21
    3796:	0264      	lsls	r4, r4, #9
    3798:	4307      	orrs	r7, r0
    379a:	0b24      	lsrs	r4, r4, #12
    379c:	0d76      	lsrs	r6, r6, #21
    379e:	2100      	movs	r1, #0
    37a0:	0324      	lsls	r4, r4, #12
    37a2:	0b23      	lsrs	r3, r4, #12
    37a4:	0d0c      	lsrs	r4, r1, #20
    37a6:	4a8f      	ldr	r2, [pc, #572]	; (39e4 <__aeabi_dadd+0x388>)
    37a8:	0524      	lsls	r4, r4, #20
    37aa:	431c      	orrs	r4, r3
    37ac:	4014      	ands	r4, r2
    37ae:	0533      	lsls	r3, r6, #20
    37b0:	4323      	orrs	r3, r4
    37b2:	005b      	lsls	r3, r3, #1
    37b4:	07ed      	lsls	r5, r5, #31
    37b6:	085b      	lsrs	r3, r3, #1
    37b8:	432b      	orrs	r3, r5
    37ba:	0038      	movs	r0, r7
    37bc:	0019      	movs	r1, r3
    37be:	bc3c      	pop	{r2, r3, r4, r5}
    37c0:	4690      	mov	r8, r2
    37c2:	4699      	mov	r9, r3
    37c4:	46a2      	mov	sl, r4
    37c6:	46ab      	mov	fp, r5
    37c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    37ca:	4664      	mov	r4, ip
    37cc:	4304      	orrs	r4, r0
    37ce:	d100      	bne.n	37d2 <__aeabi_dadd+0x176>
    37d0:	e211      	b.n	3bf6 <__aeabi_dadd+0x59a>
    37d2:	0004      	movs	r4, r0
    37d4:	4667      	mov	r7, ip
    37d6:	077b      	lsls	r3, r7, #29
    37d8:	d1c6      	bne.n	3768 <__aeabi_dadd+0x10c>
    37da:	4645      	mov	r5, r8
    37dc:	0760      	lsls	r0, r4, #29
    37de:	08ff      	lsrs	r7, r7, #3
    37e0:	4307      	orrs	r7, r0
    37e2:	08e4      	lsrs	r4, r4, #3
    37e4:	4b7d      	ldr	r3, [pc, #500]	; (39dc <__aeabi_dadd+0x380>)
    37e6:	429e      	cmp	r6, r3
    37e8:	d030      	beq.n	384c <__aeabi_dadd+0x1f0>
    37ea:	0324      	lsls	r4, r4, #12
    37ec:	0576      	lsls	r6, r6, #21
    37ee:	0b24      	lsrs	r4, r4, #12
    37f0:	0d76      	lsrs	r6, r6, #21
    37f2:	e7d4      	b.n	379e <__aeabi_dadd+0x142>
    37f4:	1a33      	subs	r3, r6, r0
    37f6:	469a      	mov	sl, r3
    37f8:	2b00      	cmp	r3, #0
    37fa:	dd78      	ble.n	38ee <__aeabi_dadd+0x292>
    37fc:	2800      	cmp	r0, #0
    37fe:	d031      	beq.n	3864 <__aeabi_dadd+0x208>
    3800:	4876      	ldr	r0, [pc, #472]	; (39dc <__aeabi_dadd+0x380>)
    3802:	4286      	cmp	r6, r0
    3804:	d0ae      	beq.n	3764 <__aeabi_dadd+0x108>
    3806:	2080      	movs	r0, #128	; 0x80
    3808:	0400      	lsls	r0, r0, #16
    380a:	4301      	orrs	r1, r0
    380c:	4653      	mov	r3, sl
    380e:	2b38      	cmp	r3, #56	; 0x38
    3810:	dc00      	bgt.n	3814 <__aeabi_dadd+0x1b8>
    3812:	e0e9      	b.n	39e8 <__aeabi_dadd+0x38c>
    3814:	430a      	orrs	r2, r1
    3816:	1e51      	subs	r1, r2, #1
    3818:	418a      	sbcs	r2, r1
    381a:	2100      	movs	r1, #0
    381c:	19d2      	adds	r2, r2, r7
    381e:	42ba      	cmp	r2, r7
    3820:	41bf      	sbcs	r7, r7
    3822:	1909      	adds	r1, r1, r4
    3824:	427c      	negs	r4, r7
    3826:	0017      	movs	r7, r2
    3828:	190c      	adds	r4, r1, r4
    382a:	0223      	lsls	r3, r4, #8
    382c:	d5d3      	bpl.n	37d6 <__aeabi_dadd+0x17a>
    382e:	4b6b      	ldr	r3, [pc, #428]	; (39dc <__aeabi_dadd+0x380>)
    3830:	3601      	adds	r6, #1
    3832:	429e      	cmp	r6, r3
    3834:	d100      	bne.n	3838 <__aeabi_dadd+0x1dc>
    3836:	e13a      	b.n	3aae <__aeabi_dadd+0x452>
    3838:	2001      	movs	r0, #1
    383a:	4b69      	ldr	r3, [pc, #420]	; (39e0 <__aeabi_dadd+0x384>)
    383c:	401c      	ands	r4, r3
    383e:	087b      	lsrs	r3, r7, #1
    3840:	4007      	ands	r7, r0
    3842:	431f      	orrs	r7, r3
    3844:	07e0      	lsls	r0, r4, #31
    3846:	4307      	orrs	r7, r0
    3848:	0864      	lsrs	r4, r4, #1
    384a:	e78b      	b.n	3764 <__aeabi_dadd+0x108>
    384c:	0023      	movs	r3, r4
    384e:	433b      	orrs	r3, r7
    3850:	d100      	bne.n	3854 <__aeabi_dadd+0x1f8>
    3852:	e1cb      	b.n	3bec <__aeabi_dadd+0x590>
    3854:	2280      	movs	r2, #128	; 0x80
    3856:	0312      	lsls	r2, r2, #12
    3858:	4314      	orrs	r4, r2
    385a:	0324      	lsls	r4, r4, #12
    385c:	0b24      	lsrs	r4, r4, #12
    385e:	e79e      	b.n	379e <__aeabi_dadd+0x142>
    3860:	002e      	movs	r6, r5
    3862:	e77f      	b.n	3764 <__aeabi_dadd+0x108>
    3864:	0008      	movs	r0, r1
    3866:	4310      	orrs	r0, r2
    3868:	d100      	bne.n	386c <__aeabi_dadd+0x210>
    386a:	e0b4      	b.n	39d6 <__aeabi_dadd+0x37a>
    386c:	1e58      	subs	r0, r3, #1
    386e:	2800      	cmp	r0, #0
    3870:	d000      	beq.n	3874 <__aeabi_dadd+0x218>
    3872:	e0de      	b.n	3a32 <__aeabi_dadd+0x3d6>
    3874:	18ba      	adds	r2, r7, r2
    3876:	42ba      	cmp	r2, r7
    3878:	419b      	sbcs	r3, r3
    387a:	1864      	adds	r4, r4, r1
    387c:	425b      	negs	r3, r3
    387e:	18e4      	adds	r4, r4, r3
    3880:	0017      	movs	r7, r2
    3882:	2601      	movs	r6, #1
    3884:	0223      	lsls	r3, r4, #8
    3886:	d5a6      	bpl.n	37d6 <__aeabi_dadd+0x17a>
    3888:	2602      	movs	r6, #2
    388a:	e7d5      	b.n	3838 <__aeabi_dadd+0x1dc>
    388c:	2d00      	cmp	r5, #0
    388e:	d16e      	bne.n	396e <__aeabi_dadd+0x312>
    3890:	1c70      	adds	r0, r6, #1
    3892:	0540      	lsls	r0, r0, #21
    3894:	0d40      	lsrs	r0, r0, #21
    3896:	2801      	cmp	r0, #1
    3898:	dc00      	bgt.n	389c <__aeabi_dadd+0x240>
    389a:	e0f9      	b.n	3a90 <__aeabi_dadd+0x434>
    389c:	1ab8      	subs	r0, r7, r2
    389e:	4684      	mov	ip, r0
    38a0:	4287      	cmp	r7, r0
    38a2:	4180      	sbcs	r0, r0
    38a4:	1ae5      	subs	r5, r4, r3
    38a6:	4240      	negs	r0, r0
    38a8:	1a2d      	subs	r5, r5, r0
    38aa:	0228      	lsls	r0, r5, #8
    38ac:	d400      	bmi.n	38b0 <__aeabi_dadd+0x254>
    38ae:	e089      	b.n	39c4 <__aeabi_dadd+0x368>
    38b0:	1bd7      	subs	r7, r2, r7
    38b2:	42ba      	cmp	r2, r7
    38b4:	4192      	sbcs	r2, r2
    38b6:	1b1c      	subs	r4, r3, r4
    38b8:	4252      	negs	r2, r2
    38ba:	1aa5      	subs	r5, r4, r2
    38bc:	46d8      	mov	r8, fp
    38be:	e729      	b.n	3714 <__aeabi_dadd+0xb8>
    38c0:	4645      	mov	r5, r8
    38c2:	2400      	movs	r4, #0
    38c4:	2700      	movs	r7, #0
    38c6:	e76a      	b.n	379e <__aeabi_dadd+0x142>
    38c8:	4c45      	ldr	r4, [pc, #276]	; (39e0 <__aeabi_dadd+0x384>)
    38ca:	1af6      	subs	r6, r6, r3
    38cc:	402c      	ands	r4, r5
    38ce:	e749      	b.n	3764 <__aeabi_dadd+0x108>
    38d0:	003d      	movs	r5, r7
    38d2:	3828      	subs	r0, #40	; 0x28
    38d4:	4085      	lsls	r5, r0
    38d6:	2700      	movs	r7, #0
    38d8:	e72e      	b.n	3738 <__aeabi_dadd+0xdc>
    38da:	0038      	movs	r0, r7
    38dc:	f001 fc46 	bl	516c <__clzsi2>
    38e0:	3020      	adds	r0, #32
    38e2:	e71d      	b.n	3720 <__aeabi_dadd+0xc4>
    38e4:	430a      	orrs	r2, r1
    38e6:	1e51      	subs	r1, r2, #1
    38e8:	418a      	sbcs	r2, r1
    38ea:	2100      	movs	r1, #0
    38ec:	e707      	b.n	36fe <__aeabi_dadd+0xa2>
    38ee:	2b00      	cmp	r3, #0
    38f0:	d000      	beq.n	38f4 <__aeabi_dadd+0x298>
    38f2:	e0f3      	b.n	3adc <__aeabi_dadd+0x480>
    38f4:	1c70      	adds	r0, r6, #1
    38f6:	0543      	lsls	r3, r0, #21
    38f8:	0d5b      	lsrs	r3, r3, #21
    38fa:	2b01      	cmp	r3, #1
    38fc:	dc00      	bgt.n	3900 <__aeabi_dadd+0x2a4>
    38fe:	e0ad      	b.n	3a5c <__aeabi_dadd+0x400>
    3900:	4b36      	ldr	r3, [pc, #216]	; (39dc <__aeabi_dadd+0x380>)
    3902:	4298      	cmp	r0, r3
    3904:	d100      	bne.n	3908 <__aeabi_dadd+0x2ac>
    3906:	e0d1      	b.n	3aac <__aeabi_dadd+0x450>
    3908:	18ba      	adds	r2, r7, r2
    390a:	42ba      	cmp	r2, r7
    390c:	41bf      	sbcs	r7, r7
    390e:	1864      	adds	r4, r4, r1
    3910:	427f      	negs	r7, r7
    3912:	19e4      	adds	r4, r4, r7
    3914:	07e7      	lsls	r7, r4, #31
    3916:	0852      	lsrs	r2, r2, #1
    3918:	4317      	orrs	r7, r2
    391a:	0864      	lsrs	r4, r4, #1
    391c:	0006      	movs	r6, r0
    391e:	e721      	b.n	3764 <__aeabi_dadd+0x108>
    3920:	482e      	ldr	r0, [pc, #184]	; (39dc <__aeabi_dadd+0x380>)
    3922:	4285      	cmp	r5, r0
    3924:	d100      	bne.n	3928 <__aeabi_dadd+0x2cc>
    3926:	e093      	b.n	3a50 <__aeabi_dadd+0x3f4>
    3928:	001d      	movs	r5, r3
    392a:	e6d0      	b.n	36ce <__aeabi_dadd+0x72>
    392c:	0029      	movs	r1, r5
    392e:	3e1f      	subs	r6, #31
    3930:	40f1      	lsrs	r1, r6
    3932:	2b20      	cmp	r3, #32
    3934:	d100      	bne.n	3938 <__aeabi_dadd+0x2dc>
    3936:	e08d      	b.n	3a54 <__aeabi_dadd+0x3f8>
    3938:	2240      	movs	r2, #64	; 0x40
    393a:	1ad3      	subs	r3, r2, r3
    393c:	409d      	lsls	r5, r3
    393e:	432f      	orrs	r7, r5
    3940:	1e7d      	subs	r5, r7, #1
    3942:	41af      	sbcs	r7, r5
    3944:	2400      	movs	r4, #0
    3946:	430f      	orrs	r7, r1
    3948:	2600      	movs	r6, #0
    394a:	e744      	b.n	37d6 <__aeabi_dadd+0x17a>
    394c:	002b      	movs	r3, r5
    394e:	0008      	movs	r0, r1
    3950:	3b20      	subs	r3, #32
    3952:	40d8      	lsrs	r0, r3
    3954:	0003      	movs	r3, r0
    3956:	2d20      	cmp	r5, #32
    3958:	d100      	bne.n	395c <__aeabi_dadd+0x300>
    395a:	e07d      	b.n	3a58 <__aeabi_dadd+0x3fc>
    395c:	2040      	movs	r0, #64	; 0x40
    395e:	1b45      	subs	r5, r0, r5
    3960:	40a9      	lsls	r1, r5
    3962:	430a      	orrs	r2, r1
    3964:	1e51      	subs	r1, r2, #1
    3966:	418a      	sbcs	r2, r1
    3968:	2100      	movs	r1, #0
    396a:	431a      	orrs	r2, r3
    396c:	e6c7      	b.n	36fe <__aeabi_dadd+0xa2>
    396e:	2e00      	cmp	r6, #0
    3970:	d050      	beq.n	3a14 <__aeabi_dadd+0x3b8>
    3972:	4e1a      	ldr	r6, [pc, #104]	; (39dc <__aeabi_dadd+0x380>)
    3974:	42b0      	cmp	r0, r6
    3976:	d057      	beq.n	3a28 <__aeabi_dadd+0x3cc>
    3978:	2680      	movs	r6, #128	; 0x80
    397a:	426b      	negs	r3, r5
    397c:	4699      	mov	r9, r3
    397e:	0436      	lsls	r6, r6, #16
    3980:	4334      	orrs	r4, r6
    3982:	464b      	mov	r3, r9
    3984:	2b38      	cmp	r3, #56	; 0x38
    3986:	dd00      	ble.n	398a <__aeabi_dadd+0x32e>
    3988:	e0d6      	b.n	3b38 <__aeabi_dadd+0x4dc>
    398a:	2b1f      	cmp	r3, #31
    398c:	dd00      	ble.n	3990 <__aeabi_dadd+0x334>
    398e:	e135      	b.n	3bfc <__aeabi_dadd+0x5a0>
    3990:	2620      	movs	r6, #32
    3992:	1af5      	subs	r5, r6, r3
    3994:	0026      	movs	r6, r4
    3996:	40ae      	lsls	r6, r5
    3998:	46b2      	mov	sl, r6
    399a:	003e      	movs	r6, r7
    399c:	40de      	lsrs	r6, r3
    399e:	46ac      	mov	ip, r5
    39a0:	0035      	movs	r5, r6
    39a2:	4656      	mov	r6, sl
    39a4:	432e      	orrs	r6, r5
    39a6:	4665      	mov	r5, ip
    39a8:	40af      	lsls	r7, r5
    39aa:	1e7d      	subs	r5, r7, #1
    39ac:	41af      	sbcs	r7, r5
    39ae:	40dc      	lsrs	r4, r3
    39b0:	4337      	orrs	r7, r6
    39b2:	1bd7      	subs	r7, r2, r7
    39b4:	42ba      	cmp	r2, r7
    39b6:	4192      	sbcs	r2, r2
    39b8:	1b0c      	subs	r4, r1, r4
    39ba:	4252      	negs	r2, r2
    39bc:	1aa4      	subs	r4, r4, r2
    39be:	0006      	movs	r6, r0
    39c0:	46d8      	mov	r8, fp
    39c2:	e6a3      	b.n	370c <__aeabi_dadd+0xb0>
    39c4:	4664      	mov	r4, ip
    39c6:	4667      	mov	r7, ip
    39c8:	432c      	orrs	r4, r5
    39ca:	d000      	beq.n	39ce <__aeabi_dadd+0x372>
    39cc:	e6a2      	b.n	3714 <__aeabi_dadd+0xb8>
    39ce:	2500      	movs	r5, #0
    39d0:	2600      	movs	r6, #0
    39d2:	2700      	movs	r7, #0
    39d4:	e706      	b.n	37e4 <__aeabi_dadd+0x188>
    39d6:	001e      	movs	r6, r3
    39d8:	e6c4      	b.n	3764 <__aeabi_dadd+0x108>
    39da:	46c0      	nop			; (mov r8, r8)
    39dc:	000007ff 	.word	0x000007ff
    39e0:	ff7fffff 	.word	0xff7fffff
    39e4:	800fffff 	.word	0x800fffff
    39e8:	2b1f      	cmp	r3, #31
    39ea:	dc63      	bgt.n	3ab4 <__aeabi_dadd+0x458>
    39ec:	2020      	movs	r0, #32
    39ee:	1ac3      	subs	r3, r0, r3
    39f0:	0008      	movs	r0, r1
    39f2:	4098      	lsls	r0, r3
    39f4:	469c      	mov	ip, r3
    39f6:	4683      	mov	fp, r0
    39f8:	4653      	mov	r3, sl
    39fa:	0010      	movs	r0, r2
    39fc:	40d8      	lsrs	r0, r3
    39fe:	0003      	movs	r3, r0
    3a00:	4658      	mov	r0, fp
    3a02:	4318      	orrs	r0, r3
    3a04:	4663      	mov	r3, ip
    3a06:	409a      	lsls	r2, r3
    3a08:	1e53      	subs	r3, r2, #1
    3a0a:	419a      	sbcs	r2, r3
    3a0c:	4653      	mov	r3, sl
    3a0e:	4302      	orrs	r2, r0
    3a10:	40d9      	lsrs	r1, r3
    3a12:	e703      	b.n	381c <__aeabi_dadd+0x1c0>
    3a14:	0026      	movs	r6, r4
    3a16:	433e      	orrs	r6, r7
    3a18:	d006      	beq.n	3a28 <__aeabi_dadd+0x3cc>
    3a1a:	43eb      	mvns	r3, r5
    3a1c:	4699      	mov	r9, r3
    3a1e:	2b00      	cmp	r3, #0
    3a20:	d0c7      	beq.n	39b2 <__aeabi_dadd+0x356>
    3a22:	4e94      	ldr	r6, [pc, #592]	; (3c74 <__aeabi_dadd+0x618>)
    3a24:	42b0      	cmp	r0, r6
    3a26:	d1ac      	bne.n	3982 <__aeabi_dadd+0x326>
    3a28:	000c      	movs	r4, r1
    3a2a:	0017      	movs	r7, r2
    3a2c:	0006      	movs	r6, r0
    3a2e:	46d8      	mov	r8, fp
    3a30:	e698      	b.n	3764 <__aeabi_dadd+0x108>
    3a32:	4b90      	ldr	r3, [pc, #576]	; (3c74 <__aeabi_dadd+0x618>)
    3a34:	459a      	cmp	sl, r3
    3a36:	d00b      	beq.n	3a50 <__aeabi_dadd+0x3f4>
    3a38:	4682      	mov	sl, r0
    3a3a:	e6e7      	b.n	380c <__aeabi_dadd+0x1b0>
    3a3c:	2800      	cmp	r0, #0
    3a3e:	d000      	beq.n	3a42 <__aeabi_dadd+0x3e6>
    3a40:	e09e      	b.n	3b80 <__aeabi_dadd+0x524>
    3a42:	0018      	movs	r0, r3
    3a44:	4310      	orrs	r0, r2
    3a46:	d100      	bne.n	3a4a <__aeabi_dadd+0x3ee>
    3a48:	e0e9      	b.n	3c1e <__aeabi_dadd+0x5c2>
    3a4a:	001c      	movs	r4, r3
    3a4c:	0017      	movs	r7, r2
    3a4e:	46d8      	mov	r8, fp
    3a50:	4e88      	ldr	r6, [pc, #544]	; (3c74 <__aeabi_dadd+0x618>)
    3a52:	e687      	b.n	3764 <__aeabi_dadd+0x108>
    3a54:	2500      	movs	r5, #0
    3a56:	e772      	b.n	393e <__aeabi_dadd+0x2e2>
    3a58:	2100      	movs	r1, #0
    3a5a:	e782      	b.n	3962 <__aeabi_dadd+0x306>
    3a5c:	0023      	movs	r3, r4
    3a5e:	433b      	orrs	r3, r7
    3a60:	2e00      	cmp	r6, #0
    3a62:	d000      	beq.n	3a66 <__aeabi_dadd+0x40a>
    3a64:	e0ab      	b.n	3bbe <__aeabi_dadd+0x562>
    3a66:	2b00      	cmp	r3, #0
    3a68:	d100      	bne.n	3a6c <__aeabi_dadd+0x410>
    3a6a:	e0e7      	b.n	3c3c <__aeabi_dadd+0x5e0>
    3a6c:	000b      	movs	r3, r1
    3a6e:	4313      	orrs	r3, r2
    3a70:	d100      	bne.n	3a74 <__aeabi_dadd+0x418>
    3a72:	e677      	b.n	3764 <__aeabi_dadd+0x108>
    3a74:	18ba      	adds	r2, r7, r2
    3a76:	42ba      	cmp	r2, r7
    3a78:	41bf      	sbcs	r7, r7
    3a7a:	1864      	adds	r4, r4, r1
    3a7c:	427f      	negs	r7, r7
    3a7e:	19e4      	adds	r4, r4, r7
    3a80:	0223      	lsls	r3, r4, #8
    3a82:	d400      	bmi.n	3a86 <__aeabi_dadd+0x42a>
    3a84:	e0f2      	b.n	3c6c <__aeabi_dadd+0x610>
    3a86:	4b7c      	ldr	r3, [pc, #496]	; (3c78 <__aeabi_dadd+0x61c>)
    3a88:	0017      	movs	r7, r2
    3a8a:	401c      	ands	r4, r3
    3a8c:	0006      	movs	r6, r0
    3a8e:	e669      	b.n	3764 <__aeabi_dadd+0x108>
    3a90:	0020      	movs	r0, r4
    3a92:	4338      	orrs	r0, r7
    3a94:	2e00      	cmp	r6, #0
    3a96:	d1d1      	bne.n	3a3c <__aeabi_dadd+0x3e0>
    3a98:	2800      	cmp	r0, #0
    3a9a:	d15b      	bne.n	3b54 <__aeabi_dadd+0x4f8>
    3a9c:	001c      	movs	r4, r3
    3a9e:	4314      	orrs	r4, r2
    3aa0:	d100      	bne.n	3aa4 <__aeabi_dadd+0x448>
    3aa2:	e0a8      	b.n	3bf6 <__aeabi_dadd+0x59a>
    3aa4:	001c      	movs	r4, r3
    3aa6:	0017      	movs	r7, r2
    3aa8:	46d8      	mov	r8, fp
    3aaa:	e65b      	b.n	3764 <__aeabi_dadd+0x108>
    3aac:	0006      	movs	r6, r0
    3aae:	2400      	movs	r4, #0
    3ab0:	2700      	movs	r7, #0
    3ab2:	e697      	b.n	37e4 <__aeabi_dadd+0x188>
    3ab4:	4650      	mov	r0, sl
    3ab6:	000b      	movs	r3, r1
    3ab8:	3820      	subs	r0, #32
    3aba:	40c3      	lsrs	r3, r0
    3abc:	4699      	mov	r9, r3
    3abe:	4653      	mov	r3, sl
    3ac0:	2b20      	cmp	r3, #32
    3ac2:	d100      	bne.n	3ac6 <__aeabi_dadd+0x46a>
    3ac4:	e095      	b.n	3bf2 <__aeabi_dadd+0x596>
    3ac6:	2340      	movs	r3, #64	; 0x40
    3ac8:	4650      	mov	r0, sl
    3aca:	1a1b      	subs	r3, r3, r0
    3acc:	4099      	lsls	r1, r3
    3ace:	430a      	orrs	r2, r1
    3ad0:	1e51      	subs	r1, r2, #1
    3ad2:	418a      	sbcs	r2, r1
    3ad4:	464b      	mov	r3, r9
    3ad6:	2100      	movs	r1, #0
    3ad8:	431a      	orrs	r2, r3
    3ada:	e69f      	b.n	381c <__aeabi_dadd+0x1c0>
    3adc:	2e00      	cmp	r6, #0
    3ade:	d130      	bne.n	3b42 <__aeabi_dadd+0x4e6>
    3ae0:	0026      	movs	r6, r4
    3ae2:	433e      	orrs	r6, r7
    3ae4:	d067      	beq.n	3bb6 <__aeabi_dadd+0x55a>
    3ae6:	43db      	mvns	r3, r3
    3ae8:	469a      	mov	sl, r3
    3aea:	2b00      	cmp	r3, #0
    3aec:	d01c      	beq.n	3b28 <__aeabi_dadd+0x4cc>
    3aee:	4e61      	ldr	r6, [pc, #388]	; (3c74 <__aeabi_dadd+0x618>)
    3af0:	42b0      	cmp	r0, r6
    3af2:	d060      	beq.n	3bb6 <__aeabi_dadd+0x55a>
    3af4:	4653      	mov	r3, sl
    3af6:	2b38      	cmp	r3, #56	; 0x38
    3af8:	dd00      	ble.n	3afc <__aeabi_dadd+0x4a0>
    3afa:	e096      	b.n	3c2a <__aeabi_dadd+0x5ce>
    3afc:	2b1f      	cmp	r3, #31
    3afe:	dd00      	ble.n	3b02 <__aeabi_dadd+0x4a6>
    3b00:	e09f      	b.n	3c42 <__aeabi_dadd+0x5e6>
    3b02:	2620      	movs	r6, #32
    3b04:	1af3      	subs	r3, r6, r3
    3b06:	0026      	movs	r6, r4
    3b08:	409e      	lsls	r6, r3
    3b0a:	469c      	mov	ip, r3
    3b0c:	46b3      	mov	fp, r6
    3b0e:	4653      	mov	r3, sl
    3b10:	003e      	movs	r6, r7
    3b12:	40de      	lsrs	r6, r3
    3b14:	0033      	movs	r3, r6
    3b16:	465e      	mov	r6, fp
    3b18:	431e      	orrs	r6, r3
    3b1a:	4663      	mov	r3, ip
    3b1c:	409f      	lsls	r7, r3
    3b1e:	1e7b      	subs	r3, r7, #1
    3b20:	419f      	sbcs	r7, r3
    3b22:	4653      	mov	r3, sl
    3b24:	40dc      	lsrs	r4, r3
    3b26:	4337      	orrs	r7, r6
    3b28:	18bf      	adds	r7, r7, r2
    3b2a:	4297      	cmp	r7, r2
    3b2c:	4192      	sbcs	r2, r2
    3b2e:	1864      	adds	r4, r4, r1
    3b30:	4252      	negs	r2, r2
    3b32:	18a4      	adds	r4, r4, r2
    3b34:	0006      	movs	r6, r0
    3b36:	e678      	b.n	382a <__aeabi_dadd+0x1ce>
    3b38:	4327      	orrs	r7, r4
    3b3a:	1e7c      	subs	r4, r7, #1
    3b3c:	41a7      	sbcs	r7, r4
    3b3e:	2400      	movs	r4, #0
    3b40:	e737      	b.n	39b2 <__aeabi_dadd+0x356>
    3b42:	4e4c      	ldr	r6, [pc, #304]	; (3c74 <__aeabi_dadd+0x618>)
    3b44:	42b0      	cmp	r0, r6
    3b46:	d036      	beq.n	3bb6 <__aeabi_dadd+0x55a>
    3b48:	2680      	movs	r6, #128	; 0x80
    3b4a:	425b      	negs	r3, r3
    3b4c:	0436      	lsls	r6, r6, #16
    3b4e:	469a      	mov	sl, r3
    3b50:	4334      	orrs	r4, r6
    3b52:	e7cf      	b.n	3af4 <__aeabi_dadd+0x498>
    3b54:	0018      	movs	r0, r3
    3b56:	4310      	orrs	r0, r2
    3b58:	d100      	bne.n	3b5c <__aeabi_dadd+0x500>
    3b5a:	e603      	b.n	3764 <__aeabi_dadd+0x108>
    3b5c:	1ab8      	subs	r0, r7, r2
    3b5e:	4684      	mov	ip, r0
    3b60:	4567      	cmp	r7, ip
    3b62:	41ad      	sbcs	r5, r5
    3b64:	1ae0      	subs	r0, r4, r3
    3b66:	426d      	negs	r5, r5
    3b68:	1b40      	subs	r0, r0, r5
    3b6a:	0205      	lsls	r5, r0, #8
    3b6c:	d400      	bmi.n	3b70 <__aeabi_dadd+0x514>
    3b6e:	e62c      	b.n	37ca <__aeabi_dadd+0x16e>
    3b70:	1bd7      	subs	r7, r2, r7
    3b72:	42ba      	cmp	r2, r7
    3b74:	4192      	sbcs	r2, r2
    3b76:	1b1c      	subs	r4, r3, r4
    3b78:	4252      	negs	r2, r2
    3b7a:	1aa4      	subs	r4, r4, r2
    3b7c:	46d8      	mov	r8, fp
    3b7e:	e5f1      	b.n	3764 <__aeabi_dadd+0x108>
    3b80:	0018      	movs	r0, r3
    3b82:	4310      	orrs	r0, r2
    3b84:	d100      	bne.n	3b88 <__aeabi_dadd+0x52c>
    3b86:	e763      	b.n	3a50 <__aeabi_dadd+0x3f4>
    3b88:	08f8      	lsrs	r0, r7, #3
    3b8a:	0767      	lsls	r7, r4, #29
    3b8c:	4307      	orrs	r7, r0
    3b8e:	2080      	movs	r0, #128	; 0x80
    3b90:	08e4      	lsrs	r4, r4, #3
    3b92:	0300      	lsls	r0, r0, #12
    3b94:	4204      	tst	r4, r0
    3b96:	d008      	beq.n	3baa <__aeabi_dadd+0x54e>
    3b98:	08dd      	lsrs	r5, r3, #3
    3b9a:	4205      	tst	r5, r0
    3b9c:	d105      	bne.n	3baa <__aeabi_dadd+0x54e>
    3b9e:	08d2      	lsrs	r2, r2, #3
    3ba0:	0759      	lsls	r1, r3, #29
    3ba2:	4311      	orrs	r1, r2
    3ba4:	000f      	movs	r7, r1
    3ba6:	002c      	movs	r4, r5
    3ba8:	46d8      	mov	r8, fp
    3baa:	0f7b      	lsrs	r3, r7, #29
    3bac:	00e4      	lsls	r4, r4, #3
    3bae:	431c      	orrs	r4, r3
    3bb0:	00ff      	lsls	r7, r7, #3
    3bb2:	4e30      	ldr	r6, [pc, #192]	; (3c74 <__aeabi_dadd+0x618>)
    3bb4:	e5d6      	b.n	3764 <__aeabi_dadd+0x108>
    3bb6:	000c      	movs	r4, r1
    3bb8:	0017      	movs	r7, r2
    3bba:	0006      	movs	r6, r0
    3bbc:	e5d2      	b.n	3764 <__aeabi_dadd+0x108>
    3bbe:	2b00      	cmp	r3, #0
    3bc0:	d038      	beq.n	3c34 <__aeabi_dadd+0x5d8>
    3bc2:	000b      	movs	r3, r1
    3bc4:	4313      	orrs	r3, r2
    3bc6:	d100      	bne.n	3bca <__aeabi_dadd+0x56e>
    3bc8:	e742      	b.n	3a50 <__aeabi_dadd+0x3f4>
    3bca:	08f8      	lsrs	r0, r7, #3
    3bcc:	0767      	lsls	r7, r4, #29
    3bce:	4307      	orrs	r7, r0
    3bd0:	2080      	movs	r0, #128	; 0x80
    3bd2:	08e4      	lsrs	r4, r4, #3
    3bd4:	0300      	lsls	r0, r0, #12
    3bd6:	4204      	tst	r4, r0
    3bd8:	d0e7      	beq.n	3baa <__aeabi_dadd+0x54e>
    3bda:	08cb      	lsrs	r3, r1, #3
    3bdc:	4203      	tst	r3, r0
    3bde:	d1e4      	bne.n	3baa <__aeabi_dadd+0x54e>
    3be0:	08d2      	lsrs	r2, r2, #3
    3be2:	0749      	lsls	r1, r1, #29
    3be4:	4311      	orrs	r1, r2
    3be6:	000f      	movs	r7, r1
    3be8:	001c      	movs	r4, r3
    3bea:	e7de      	b.n	3baa <__aeabi_dadd+0x54e>
    3bec:	2700      	movs	r7, #0
    3bee:	2400      	movs	r4, #0
    3bf0:	e5d5      	b.n	379e <__aeabi_dadd+0x142>
    3bf2:	2100      	movs	r1, #0
    3bf4:	e76b      	b.n	3ace <__aeabi_dadd+0x472>
    3bf6:	2500      	movs	r5, #0
    3bf8:	2700      	movs	r7, #0
    3bfa:	e5f3      	b.n	37e4 <__aeabi_dadd+0x188>
    3bfc:	464e      	mov	r6, r9
    3bfe:	0025      	movs	r5, r4
    3c00:	3e20      	subs	r6, #32
    3c02:	40f5      	lsrs	r5, r6
    3c04:	464b      	mov	r3, r9
    3c06:	002e      	movs	r6, r5
    3c08:	2b20      	cmp	r3, #32
    3c0a:	d02d      	beq.n	3c68 <__aeabi_dadd+0x60c>
    3c0c:	2540      	movs	r5, #64	; 0x40
    3c0e:	1aed      	subs	r5, r5, r3
    3c10:	40ac      	lsls	r4, r5
    3c12:	4327      	orrs	r7, r4
    3c14:	1e7c      	subs	r4, r7, #1
    3c16:	41a7      	sbcs	r7, r4
    3c18:	2400      	movs	r4, #0
    3c1a:	4337      	orrs	r7, r6
    3c1c:	e6c9      	b.n	39b2 <__aeabi_dadd+0x356>
    3c1e:	2480      	movs	r4, #128	; 0x80
    3c20:	2500      	movs	r5, #0
    3c22:	0324      	lsls	r4, r4, #12
    3c24:	4e13      	ldr	r6, [pc, #76]	; (3c74 <__aeabi_dadd+0x618>)
    3c26:	2700      	movs	r7, #0
    3c28:	e5dc      	b.n	37e4 <__aeabi_dadd+0x188>
    3c2a:	4327      	orrs	r7, r4
    3c2c:	1e7c      	subs	r4, r7, #1
    3c2e:	41a7      	sbcs	r7, r4
    3c30:	2400      	movs	r4, #0
    3c32:	e779      	b.n	3b28 <__aeabi_dadd+0x4cc>
    3c34:	000c      	movs	r4, r1
    3c36:	0017      	movs	r7, r2
    3c38:	4e0e      	ldr	r6, [pc, #56]	; (3c74 <__aeabi_dadd+0x618>)
    3c3a:	e593      	b.n	3764 <__aeabi_dadd+0x108>
    3c3c:	000c      	movs	r4, r1
    3c3e:	0017      	movs	r7, r2
    3c40:	e590      	b.n	3764 <__aeabi_dadd+0x108>
    3c42:	4656      	mov	r6, sl
    3c44:	0023      	movs	r3, r4
    3c46:	3e20      	subs	r6, #32
    3c48:	40f3      	lsrs	r3, r6
    3c4a:	4699      	mov	r9, r3
    3c4c:	4653      	mov	r3, sl
    3c4e:	2b20      	cmp	r3, #32
    3c50:	d00e      	beq.n	3c70 <__aeabi_dadd+0x614>
    3c52:	2340      	movs	r3, #64	; 0x40
    3c54:	4656      	mov	r6, sl
    3c56:	1b9b      	subs	r3, r3, r6
    3c58:	409c      	lsls	r4, r3
    3c5a:	4327      	orrs	r7, r4
    3c5c:	1e7c      	subs	r4, r7, #1
    3c5e:	41a7      	sbcs	r7, r4
    3c60:	464b      	mov	r3, r9
    3c62:	2400      	movs	r4, #0
    3c64:	431f      	orrs	r7, r3
    3c66:	e75f      	b.n	3b28 <__aeabi_dadd+0x4cc>
    3c68:	2400      	movs	r4, #0
    3c6a:	e7d2      	b.n	3c12 <__aeabi_dadd+0x5b6>
    3c6c:	0017      	movs	r7, r2
    3c6e:	e5b2      	b.n	37d6 <__aeabi_dadd+0x17a>
    3c70:	2400      	movs	r4, #0
    3c72:	e7f2      	b.n	3c5a <__aeabi_dadd+0x5fe>
    3c74:	000007ff 	.word	0x000007ff
    3c78:	ff7fffff 	.word	0xff7fffff

00003c7c <__aeabi_ddiv>:
    3c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3c7e:	4657      	mov	r7, sl
    3c80:	4645      	mov	r5, r8
    3c82:	46de      	mov	lr, fp
    3c84:	464e      	mov	r6, r9
    3c86:	b5e0      	push	{r5, r6, r7, lr}
    3c88:	004c      	lsls	r4, r1, #1
    3c8a:	030e      	lsls	r6, r1, #12
    3c8c:	b087      	sub	sp, #28
    3c8e:	4683      	mov	fp, r0
    3c90:	4692      	mov	sl, r2
    3c92:	001d      	movs	r5, r3
    3c94:	4680      	mov	r8, r0
    3c96:	0b36      	lsrs	r6, r6, #12
    3c98:	0d64      	lsrs	r4, r4, #21
    3c9a:	0fcf      	lsrs	r7, r1, #31
    3c9c:	2c00      	cmp	r4, #0
    3c9e:	d04f      	beq.n	3d40 <__aeabi_ddiv+0xc4>
    3ca0:	4b6f      	ldr	r3, [pc, #444]	; (3e60 <__aeabi_ddiv+0x1e4>)
    3ca2:	429c      	cmp	r4, r3
    3ca4:	d035      	beq.n	3d12 <__aeabi_ddiv+0x96>
    3ca6:	2380      	movs	r3, #128	; 0x80
    3ca8:	0f42      	lsrs	r2, r0, #29
    3caa:	041b      	lsls	r3, r3, #16
    3cac:	00f6      	lsls	r6, r6, #3
    3cae:	4313      	orrs	r3, r2
    3cb0:	4333      	orrs	r3, r6
    3cb2:	4699      	mov	r9, r3
    3cb4:	00c3      	lsls	r3, r0, #3
    3cb6:	4698      	mov	r8, r3
    3cb8:	4b6a      	ldr	r3, [pc, #424]	; (3e64 <__aeabi_ddiv+0x1e8>)
    3cba:	2600      	movs	r6, #0
    3cbc:	469c      	mov	ip, r3
    3cbe:	2300      	movs	r3, #0
    3cc0:	4464      	add	r4, ip
    3cc2:	9303      	str	r3, [sp, #12]
    3cc4:	032b      	lsls	r3, r5, #12
    3cc6:	0b1b      	lsrs	r3, r3, #12
    3cc8:	469b      	mov	fp, r3
    3cca:	006b      	lsls	r3, r5, #1
    3ccc:	0fed      	lsrs	r5, r5, #31
    3cce:	4650      	mov	r0, sl
    3cd0:	0d5b      	lsrs	r3, r3, #21
    3cd2:	9501      	str	r5, [sp, #4]
    3cd4:	d05e      	beq.n	3d94 <__aeabi_ddiv+0x118>
    3cd6:	4a62      	ldr	r2, [pc, #392]	; (3e60 <__aeabi_ddiv+0x1e4>)
    3cd8:	4293      	cmp	r3, r2
    3cda:	d053      	beq.n	3d84 <__aeabi_ddiv+0x108>
    3cdc:	465a      	mov	r2, fp
    3cde:	00d1      	lsls	r1, r2, #3
    3ce0:	2280      	movs	r2, #128	; 0x80
    3ce2:	0f40      	lsrs	r0, r0, #29
    3ce4:	0412      	lsls	r2, r2, #16
    3ce6:	4302      	orrs	r2, r0
    3ce8:	430a      	orrs	r2, r1
    3cea:	4693      	mov	fp, r2
    3cec:	4652      	mov	r2, sl
    3cee:	00d1      	lsls	r1, r2, #3
    3cf0:	4a5c      	ldr	r2, [pc, #368]	; (3e64 <__aeabi_ddiv+0x1e8>)
    3cf2:	4694      	mov	ip, r2
    3cf4:	2200      	movs	r2, #0
    3cf6:	4463      	add	r3, ip
    3cf8:	0038      	movs	r0, r7
    3cfa:	4068      	eors	r0, r5
    3cfc:	4684      	mov	ip, r0
    3cfe:	9002      	str	r0, [sp, #8]
    3d00:	1ae4      	subs	r4, r4, r3
    3d02:	4316      	orrs	r6, r2
    3d04:	2e0f      	cmp	r6, #15
    3d06:	d900      	bls.n	3d0a <__aeabi_ddiv+0x8e>
    3d08:	e0b4      	b.n	3e74 <__aeabi_ddiv+0x1f8>
    3d0a:	4b57      	ldr	r3, [pc, #348]	; (3e68 <__aeabi_ddiv+0x1ec>)
    3d0c:	00b6      	lsls	r6, r6, #2
    3d0e:	599b      	ldr	r3, [r3, r6]
    3d10:	469f      	mov	pc, r3
    3d12:	0003      	movs	r3, r0
    3d14:	4333      	orrs	r3, r6
    3d16:	4699      	mov	r9, r3
    3d18:	d16c      	bne.n	3df4 <__aeabi_ddiv+0x178>
    3d1a:	2300      	movs	r3, #0
    3d1c:	4698      	mov	r8, r3
    3d1e:	3302      	adds	r3, #2
    3d20:	2608      	movs	r6, #8
    3d22:	9303      	str	r3, [sp, #12]
    3d24:	e7ce      	b.n	3cc4 <__aeabi_ddiv+0x48>
    3d26:	46cb      	mov	fp, r9
    3d28:	4641      	mov	r1, r8
    3d2a:	9a03      	ldr	r2, [sp, #12]
    3d2c:	9701      	str	r7, [sp, #4]
    3d2e:	2a02      	cmp	r2, #2
    3d30:	d165      	bne.n	3dfe <__aeabi_ddiv+0x182>
    3d32:	9b01      	ldr	r3, [sp, #4]
    3d34:	4c4a      	ldr	r4, [pc, #296]	; (3e60 <__aeabi_ddiv+0x1e4>)
    3d36:	469c      	mov	ip, r3
    3d38:	2300      	movs	r3, #0
    3d3a:	2200      	movs	r2, #0
    3d3c:	4698      	mov	r8, r3
    3d3e:	e06b      	b.n	3e18 <__aeabi_ddiv+0x19c>
    3d40:	0003      	movs	r3, r0
    3d42:	4333      	orrs	r3, r6
    3d44:	4699      	mov	r9, r3
    3d46:	d04e      	beq.n	3de6 <__aeabi_ddiv+0x16a>
    3d48:	2e00      	cmp	r6, #0
    3d4a:	d100      	bne.n	3d4e <__aeabi_ddiv+0xd2>
    3d4c:	e1bc      	b.n	40c8 <__aeabi_ddiv+0x44c>
    3d4e:	0030      	movs	r0, r6
    3d50:	f001 fa0c 	bl	516c <__clzsi2>
    3d54:	0003      	movs	r3, r0
    3d56:	3b0b      	subs	r3, #11
    3d58:	2b1c      	cmp	r3, #28
    3d5a:	dd00      	ble.n	3d5e <__aeabi_ddiv+0xe2>
    3d5c:	e1ac      	b.n	40b8 <__aeabi_ddiv+0x43c>
    3d5e:	221d      	movs	r2, #29
    3d60:	1ad3      	subs	r3, r2, r3
    3d62:	465a      	mov	r2, fp
    3d64:	0001      	movs	r1, r0
    3d66:	40da      	lsrs	r2, r3
    3d68:	3908      	subs	r1, #8
    3d6a:	408e      	lsls	r6, r1
    3d6c:	0013      	movs	r3, r2
    3d6e:	4333      	orrs	r3, r6
    3d70:	4699      	mov	r9, r3
    3d72:	465b      	mov	r3, fp
    3d74:	408b      	lsls	r3, r1
    3d76:	4698      	mov	r8, r3
    3d78:	2300      	movs	r3, #0
    3d7a:	4c3c      	ldr	r4, [pc, #240]	; (3e6c <__aeabi_ddiv+0x1f0>)
    3d7c:	2600      	movs	r6, #0
    3d7e:	1a24      	subs	r4, r4, r0
    3d80:	9303      	str	r3, [sp, #12]
    3d82:	e79f      	b.n	3cc4 <__aeabi_ddiv+0x48>
    3d84:	4651      	mov	r1, sl
    3d86:	465a      	mov	r2, fp
    3d88:	4311      	orrs	r1, r2
    3d8a:	d129      	bne.n	3de0 <__aeabi_ddiv+0x164>
    3d8c:	2200      	movs	r2, #0
    3d8e:	4693      	mov	fp, r2
    3d90:	3202      	adds	r2, #2
    3d92:	e7b1      	b.n	3cf8 <__aeabi_ddiv+0x7c>
    3d94:	4659      	mov	r1, fp
    3d96:	4301      	orrs	r1, r0
    3d98:	d01e      	beq.n	3dd8 <__aeabi_ddiv+0x15c>
    3d9a:	465b      	mov	r3, fp
    3d9c:	2b00      	cmp	r3, #0
    3d9e:	d100      	bne.n	3da2 <__aeabi_ddiv+0x126>
    3da0:	e19e      	b.n	40e0 <__aeabi_ddiv+0x464>
    3da2:	4658      	mov	r0, fp
    3da4:	f001 f9e2 	bl	516c <__clzsi2>
    3da8:	0003      	movs	r3, r0
    3daa:	3b0b      	subs	r3, #11
    3dac:	2b1c      	cmp	r3, #28
    3dae:	dd00      	ble.n	3db2 <__aeabi_ddiv+0x136>
    3db0:	e18f      	b.n	40d2 <__aeabi_ddiv+0x456>
    3db2:	0002      	movs	r2, r0
    3db4:	4659      	mov	r1, fp
    3db6:	3a08      	subs	r2, #8
    3db8:	4091      	lsls	r1, r2
    3dba:	468b      	mov	fp, r1
    3dbc:	211d      	movs	r1, #29
    3dbe:	1acb      	subs	r3, r1, r3
    3dc0:	4651      	mov	r1, sl
    3dc2:	40d9      	lsrs	r1, r3
    3dc4:	000b      	movs	r3, r1
    3dc6:	4659      	mov	r1, fp
    3dc8:	430b      	orrs	r3, r1
    3dca:	4651      	mov	r1, sl
    3dcc:	469b      	mov	fp, r3
    3dce:	4091      	lsls	r1, r2
    3dd0:	4b26      	ldr	r3, [pc, #152]	; (3e6c <__aeabi_ddiv+0x1f0>)
    3dd2:	2200      	movs	r2, #0
    3dd4:	1a1b      	subs	r3, r3, r0
    3dd6:	e78f      	b.n	3cf8 <__aeabi_ddiv+0x7c>
    3dd8:	2300      	movs	r3, #0
    3dda:	2201      	movs	r2, #1
    3ddc:	469b      	mov	fp, r3
    3dde:	e78b      	b.n	3cf8 <__aeabi_ddiv+0x7c>
    3de0:	4651      	mov	r1, sl
    3de2:	2203      	movs	r2, #3
    3de4:	e788      	b.n	3cf8 <__aeabi_ddiv+0x7c>
    3de6:	2300      	movs	r3, #0
    3de8:	4698      	mov	r8, r3
    3dea:	3301      	adds	r3, #1
    3dec:	2604      	movs	r6, #4
    3dee:	2400      	movs	r4, #0
    3df0:	9303      	str	r3, [sp, #12]
    3df2:	e767      	b.n	3cc4 <__aeabi_ddiv+0x48>
    3df4:	2303      	movs	r3, #3
    3df6:	46b1      	mov	r9, r6
    3df8:	9303      	str	r3, [sp, #12]
    3dfa:	260c      	movs	r6, #12
    3dfc:	e762      	b.n	3cc4 <__aeabi_ddiv+0x48>
    3dfe:	2a03      	cmp	r2, #3
    3e00:	d100      	bne.n	3e04 <__aeabi_ddiv+0x188>
    3e02:	e25c      	b.n	42be <__aeabi_ddiv+0x642>
    3e04:	9b01      	ldr	r3, [sp, #4]
    3e06:	2a01      	cmp	r2, #1
    3e08:	d000      	beq.n	3e0c <__aeabi_ddiv+0x190>
    3e0a:	e1e4      	b.n	41d6 <__aeabi_ddiv+0x55a>
    3e0c:	4013      	ands	r3, r2
    3e0e:	469c      	mov	ip, r3
    3e10:	2300      	movs	r3, #0
    3e12:	2400      	movs	r4, #0
    3e14:	2200      	movs	r2, #0
    3e16:	4698      	mov	r8, r3
    3e18:	2100      	movs	r1, #0
    3e1a:	0312      	lsls	r2, r2, #12
    3e1c:	0b13      	lsrs	r3, r2, #12
    3e1e:	0d0a      	lsrs	r2, r1, #20
    3e20:	0512      	lsls	r2, r2, #20
    3e22:	431a      	orrs	r2, r3
    3e24:	0523      	lsls	r3, r4, #20
    3e26:	4c12      	ldr	r4, [pc, #72]	; (3e70 <__aeabi_ddiv+0x1f4>)
    3e28:	4640      	mov	r0, r8
    3e2a:	4022      	ands	r2, r4
    3e2c:	4313      	orrs	r3, r2
    3e2e:	4662      	mov	r2, ip
    3e30:	005b      	lsls	r3, r3, #1
    3e32:	07d2      	lsls	r2, r2, #31
    3e34:	085b      	lsrs	r3, r3, #1
    3e36:	4313      	orrs	r3, r2
    3e38:	0019      	movs	r1, r3
    3e3a:	b007      	add	sp, #28
    3e3c:	bc3c      	pop	{r2, r3, r4, r5}
    3e3e:	4690      	mov	r8, r2
    3e40:	4699      	mov	r9, r3
    3e42:	46a2      	mov	sl, r4
    3e44:	46ab      	mov	fp, r5
    3e46:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3e48:	2300      	movs	r3, #0
    3e4a:	2280      	movs	r2, #128	; 0x80
    3e4c:	469c      	mov	ip, r3
    3e4e:	0312      	lsls	r2, r2, #12
    3e50:	4698      	mov	r8, r3
    3e52:	4c03      	ldr	r4, [pc, #12]	; (3e60 <__aeabi_ddiv+0x1e4>)
    3e54:	e7e0      	b.n	3e18 <__aeabi_ddiv+0x19c>
    3e56:	2300      	movs	r3, #0
    3e58:	4c01      	ldr	r4, [pc, #4]	; (3e60 <__aeabi_ddiv+0x1e4>)
    3e5a:	2200      	movs	r2, #0
    3e5c:	4698      	mov	r8, r3
    3e5e:	e7db      	b.n	3e18 <__aeabi_ddiv+0x19c>
    3e60:	000007ff 	.word	0x000007ff
    3e64:	fffffc01 	.word	0xfffffc01
    3e68:	00005260 	.word	0x00005260
    3e6c:	fffffc0d 	.word	0xfffffc0d
    3e70:	800fffff 	.word	0x800fffff
    3e74:	45d9      	cmp	r9, fp
    3e76:	d900      	bls.n	3e7a <__aeabi_ddiv+0x1fe>
    3e78:	e139      	b.n	40ee <__aeabi_ddiv+0x472>
    3e7a:	d100      	bne.n	3e7e <__aeabi_ddiv+0x202>
    3e7c:	e134      	b.n	40e8 <__aeabi_ddiv+0x46c>
    3e7e:	2300      	movs	r3, #0
    3e80:	4646      	mov	r6, r8
    3e82:	464d      	mov	r5, r9
    3e84:	469a      	mov	sl, r3
    3e86:	3c01      	subs	r4, #1
    3e88:	465b      	mov	r3, fp
    3e8a:	0e0a      	lsrs	r2, r1, #24
    3e8c:	021b      	lsls	r3, r3, #8
    3e8e:	431a      	orrs	r2, r3
    3e90:	020b      	lsls	r3, r1, #8
    3e92:	0c17      	lsrs	r7, r2, #16
    3e94:	9303      	str	r3, [sp, #12]
    3e96:	0413      	lsls	r3, r2, #16
    3e98:	0c1b      	lsrs	r3, r3, #16
    3e9a:	0039      	movs	r1, r7
    3e9c:	0028      	movs	r0, r5
    3e9e:	4690      	mov	r8, r2
    3ea0:	9301      	str	r3, [sp, #4]
    3ea2:	f7ff fb11 	bl	34c8 <__udivsi3>
    3ea6:	0002      	movs	r2, r0
    3ea8:	9b01      	ldr	r3, [sp, #4]
    3eaa:	4683      	mov	fp, r0
    3eac:	435a      	muls	r2, r3
    3eae:	0028      	movs	r0, r5
    3eb0:	0039      	movs	r1, r7
    3eb2:	4691      	mov	r9, r2
    3eb4:	f7ff fb8e 	bl	35d4 <__aeabi_uidivmod>
    3eb8:	0c35      	lsrs	r5, r6, #16
    3eba:	0409      	lsls	r1, r1, #16
    3ebc:	430d      	orrs	r5, r1
    3ebe:	45a9      	cmp	r9, r5
    3ec0:	d90d      	bls.n	3ede <__aeabi_ddiv+0x262>
    3ec2:	465b      	mov	r3, fp
    3ec4:	4445      	add	r5, r8
    3ec6:	3b01      	subs	r3, #1
    3ec8:	45a8      	cmp	r8, r5
    3eca:	d900      	bls.n	3ece <__aeabi_ddiv+0x252>
    3ecc:	e13a      	b.n	4144 <__aeabi_ddiv+0x4c8>
    3ece:	45a9      	cmp	r9, r5
    3ed0:	d800      	bhi.n	3ed4 <__aeabi_ddiv+0x258>
    3ed2:	e137      	b.n	4144 <__aeabi_ddiv+0x4c8>
    3ed4:	2302      	movs	r3, #2
    3ed6:	425b      	negs	r3, r3
    3ed8:	469c      	mov	ip, r3
    3eda:	4445      	add	r5, r8
    3edc:	44e3      	add	fp, ip
    3ede:	464b      	mov	r3, r9
    3ee0:	1aeb      	subs	r3, r5, r3
    3ee2:	0039      	movs	r1, r7
    3ee4:	0018      	movs	r0, r3
    3ee6:	9304      	str	r3, [sp, #16]
    3ee8:	f7ff faee 	bl	34c8 <__udivsi3>
    3eec:	9b01      	ldr	r3, [sp, #4]
    3eee:	0005      	movs	r5, r0
    3ef0:	4343      	muls	r3, r0
    3ef2:	0039      	movs	r1, r7
    3ef4:	9804      	ldr	r0, [sp, #16]
    3ef6:	4699      	mov	r9, r3
    3ef8:	f7ff fb6c 	bl	35d4 <__aeabi_uidivmod>
    3efc:	0433      	lsls	r3, r6, #16
    3efe:	0409      	lsls	r1, r1, #16
    3f00:	0c1b      	lsrs	r3, r3, #16
    3f02:	430b      	orrs	r3, r1
    3f04:	4599      	cmp	r9, r3
    3f06:	d909      	bls.n	3f1c <__aeabi_ddiv+0x2a0>
    3f08:	4443      	add	r3, r8
    3f0a:	1e6a      	subs	r2, r5, #1
    3f0c:	4598      	cmp	r8, r3
    3f0e:	d900      	bls.n	3f12 <__aeabi_ddiv+0x296>
    3f10:	e11a      	b.n	4148 <__aeabi_ddiv+0x4cc>
    3f12:	4599      	cmp	r9, r3
    3f14:	d800      	bhi.n	3f18 <__aeabi_ddiv+0x29c>
    3f16:	e117      	b.n	4148 <__aeabi_ddiv+0x4cc>
    3f18:	3d02      	subs	r5, #2
    3f1a:	4443      	add	r3, r8
    3f1c:	464a      	mov	r2, r9
    3f1e:	1a9b      	subs	r3, r3, r2
    3f20:	465a      	mov	r2, fp
    3f22:	0412      	lsls	r2, r2, #16
    3f24:	432a      	orrs	r2, r5
    3f26:	9903      	ldr	r1, [sp, #12]
    3f28:	4693      	mov	fp, r2
    3f2a:	0c10      	lsrs	r0, r2, #16
    3f2c:	0c0a      	lsrs	r2, r1, #16
    3f2e:	4691      	mov	r9, r2
    3f30:	0409      	lsls	r1, r1, #16
    3f32:	465a      	mov	r2, fp
    3f34:	0c09      	lsrs	r1, r1, #16
    3f36:	464e      	mov	r6, r9
    3f38:	000d      	movs	r5, r1
    3f3a:	0412      	lsls	r2, r2, #16
    3f3c:	0c12      	lsrs	r2, r2, #16
    3f3e:	4345      	muls	r5, r0
    3f40:	9105      	str	r1, [sp, #20]
    3f42:	4351      	muls	r1, r2
    3f44:	4372      	muls	r2, r6
    3f46:	4370      	muls	r0, r6
    3f48:	1952      	adds	r2, r2, r5
    3f4a:	0c0e      	lsrs	r6, r1, #16
    3f4c:	18b2      	adds	r2, r6, r2
    3f4e:	4295      	cmp	r5, r2
    3f50:	d903      	bls.n	3f5a <__aeabi_ddiv+0x2de>
    3f52:	2580      	movs	r5, #128	; 0x80
    3f54:	026d      	lsls	r5, r5, #9
    3f56:	46ac      	mov	ip, r5
    3f58:	4460      	add	r0, ip
    3f5a:	0c15      	lsrs	r5, r2, #16
    3f5c:	0409      	lsls	r1, r1, #16
    3f5e:	0412      	lsls	r2, r2, #16
    3f60:	0c09      	lsrs	r1, r1, #16
    3f62:	1828      	adds	r0, r5, r0
    3f64:	1852      	adds	r2, r2, r1
    3f66:	4283      	cmp	r3, r0
    3f68:	d200      	bcs.n	3f6c <__aeabi_ddiv+0x2f0>
    3f6a:	e0ce      	b.n	410a <__aeabi_ddiv+0x48e>
    3f6c:	d100      	bne.n	3f70 <__aeabi_ddiv+0x2f4>
    3f6e:	e0c8      	b.n	4102 <__aeabi_ddiv+0x486>
    3f70:	1a1d      	subs	r5, r3, r0
    3f72:	4653      	mov	r3, sl
    3f74:	1a9e      	subs	r6, r3, r2
    3f76:	45b2      	cmp	sl, r6
    3f78:	4192      	sbcs	r2, r2
    3f7a:	4252      	negs	r2, r2
    3f7c:	1aab      	subs	r3, r5, r2
    3f7e:	469a      	mov	sl, r3
    3f80:	4598      	cmp	r8, r3
    3f82:	d100      	bne.n	3f86 <__aeabi_ddiv+0x30a>
    3f84:	e117      	b.n	41b6 <__aeabi_ddiv+0x53a>
    3f86:	0039      	movs	r1, r7
    3f88:	0018      	movs	r0, r3
    3f8a:	f7ff fa9d 	bl	34c8 <__udivsi3>
    3f8e:	9b01      	ldr	r3, [sp, #4]
    3f90:	0005      	movs	r5, r0
    3f92:	4343      	muls	r3, r0
    3f94:	0039      	movs	r1, r7
    3f96:	4650      	mov	r0, sl
    3f98:	9304      	str	r3, [sp, #16]
    3f9a:	f7ff fb1b 	bl	35d4 <__aeabi_uidivmod>
    3f9e:	9804      	ldr	r0, [sp, #16]
    3fa0:	040b      	lsls	r3, r1, #16
    3fa2:	0c31      	lsrs	r1, r6, #16
    3fa4:	4319      	orrs	r1, r3
    3fa6:	4288      	cmp	r0, r1
    3fa8:	d909      	bls.n	3fbe <__aeabi_ddiv+0x342>
    3faa:	4441      	add	r1, r8
    3fac:	1e6b      	subs	r3, r5, #1
    3fae:	4588      	cmp	r8, r1
    3fb0:	d900      	bls.n	3fb4 <__aeabi_ddiv+0x338>
    3fb2:	e107      	b.n	41c4 <__aeabi_ddiv+0x548>
    3fb4:	4288      	cmp	r0, r1
    3fb6:	d800      	bhi.n	3fba <__aeabi_ddiv+0x33e>
    3fb8:	e104      	b.n	41c4 <__aeabi_ddiv+0x548>
    3fba:	3d02      	subs	r5, #2
    3fbc:	4441      	add	r1, r8
    3fbe:	9b04      	ldr	r3, [sp, #16]
    3fc0:	1acb      	subs	r3, r1, r3
    3fc2:	0018      	movs	r0, r3
    3fc4:	0039      	movs	r1, r7
    3fc6:	9304      	str	r3, [sp, #16]
    3fc8:	f7ff fa7e 	bl	34c8 <__udivsi3>
    3fcc:	9b01      	ldr	r3, [sp, #4]
    3fce:	4682      	mov	sl, r0
    3fd0:	4343      	muls	r3, r0
    3fd2:	0039      	movs	r1, r7
    3fd4:	9804      	ldr	r0, [sp, #16]
    3fd6:	9301      	str	r3, [sp, #4]
    3fd8:	f7ff fafc 	bl	35d4 <__aeabi_uidivmod>
    3fdc:	9801      	ldr	r0, [sp, #4]
    3fde:	040b      	lsls	r3, r1, #16
    3fe0:	0431      	lsls	r1, r6, #16
    3fe2:	0c09      	lsrs	r1, r1, #16
    3fe4:	4319      	orrs	r1, r3
    3fe6:	4288      	cmp	r0, r1
    3fe8:	d90d      	bls.n	4006 <__aeabi_ddiv+0x38a>
    3fea:	4653      	mov	r3, sl
    3fec:	4441      	add	r1, r8
    3fee:	3b01      	subs	r3, #1
    3ff0:	4588      	cmp	r8, r1
    3ff2:	d900      	bls.n	3ff6 <__aeabi_ddiv+0x37a>
    3ff4:	e0e8      	b.n	41c8 <__aeabi_ddiv+0x54c>
    3ff6:	4288      	cmp	r0, r1
    3ff8:	d800      	bhi.n	3ffc <__aeabi_ddiv+0x380>
    3ffa:	e0e5      	b.n	41c8 <__aeabi_ddiv+0x54c>
    3ffc:	2302      	movs	r3, #2
    3ffe:	425b      	negs	r3, r3
    4000:	469c      	mov	ip, r3
    4002:	4441      	add	r1, r8
    4004:	44e2      	add	sl, ip
    4006:	9b01      	ldr	r3, [sp, #4]
    4008:	042d      	lsls	r5, r5, #16
    400a:	1ace      	subs	r6, r1, r3
    400c:	4651      	mov	r1, sl
    400e:	4329      	orrs	r1, r5
    4010:	9d05      	ldr	r5, [sp, #20]
    4012:	464f      	mov	r7, r9
    4014:	002a      	movs	r2, r5
    4016:	040b      	lsls	r3, r1, #16
    4018:	0c08      	lsrs	r0, r1, #16
    401a:	0c1b      	lsrs	r3, r3, #16
    401c:	435a      	muls	r2, r3
    401e:	4345      	muls	r5, r0
    4020:	437b      	muls	r3, r7
    4022:	4378      	muls	r0, r7
    4024:	195b      	adds	r3, r3, r5
    4026:	0c17      	lsrs	r7, r2, #16
    4028:	18fb      	adds	r3, r7, r3
    402a:	429d      	cmp	r5, r3
    402c:	d903      	bls.n	4036 <__aeabi_ddiv+0x3ba>
    402e:	2580      	movs	r5, #128	; 0x80
    4030:	026d      	lsls	r5, r5, #9
    4032:	46ac      	mov	ip, r5
    4034:	4460      	add	r0, ip
    4036:	0c1d      	lsrs	r5, r3, #16
    4038:	0412      	lsls	r2, r2, #16
    403a:	041b      	lsls	r3, r3, #16
    403c:	0c12      	lsrs	r2, r2, #16
    403e:	1828      	adds	r0, r5, r0
    4040:	189b      	adds	r3, r3, r2
    4042:	4286      	cmp	r6, r0
    4044:	d200      	bcs.n	4048 <__aeabi_ddiv+0x3cc>
    4046:	e093      	b.n	4170 <__aeabi_ddiv+0x4f4>
    4048:	d100      	bne.n	404c <__aeabi_ddiv+0x3d0>
    404a:	e08e      	b.n	416a <__aeabi_ddiv+0x4ee>
    404c:	2301      	movs	r3, #1
    404e:	4319      	orrs	r1, r3
    4050:	4ba0      	ldr	r3, [pc, #640]	; (42d4 <__aeabi_ddiv+0x658>)
    4052:	18e3      	adds	r3, r4, r3
    4054:	2b00      	cmp	r3, #0
    4056:	dc00      	bgt.n	405a <__aeabi_ddiv+0x3de>
    4058:	e099      	b.n	418e <__aeabi_ddiv+0x512>
    405a:	074a      	lsls	r2, r1, #29
    405c:	d000      	beq.n	4060 <__aeabi_ddiv+0x3e4>
    405e:	e09e      	b.n	419e <__aeabi_ddiv+0x522>
    4060:	465a      	mov	r2, fp
    4062:	01d2      	lsls	r2, r2, #7
    4064:	d506      	bpl.n	4074 <__aeabi_ddiv+0x3f8>
    4066:	465a      	mov	r2, fp
    4068:	4b9b      	ldr	r3, [pc, #620]	; (42d8 <__aeabi_ddiv+0x65c>)
    406a:	401a      	ands	r2, r3
    406c:	2380      	movs	r3, #128	; 0x80
    406e:	4693      	mov	fp, r2
    4070:	00db      	lsls	r3, r3, #3
    4072:	18e3      	adds	r3, r4, r3
    4074:	4a99      	ldr	r2, [pc, #612]	; (42dc <__aeabi_ddiv+0x660>)
    4076:	4293      	cmp	r3, r2
    4078:	dd68      	ble.n	414c <__aeabi_ddiv+0x4d0>
    407a:	2301      	movs	r3, #1
    407c:	9a02      	ldr	r2, [sp, #8]
    407e:	4c98      	ldr	r4, [pc, #608]	; (42e0 <__aeabi_ddiv+0x664>)
    4080:	401a      	ands	r2, r3
    4082:	2300      	movs	r3, #0
    4084:	4694      	mov	ip, r2
    4086:	4698      	mov	r8, r3
    4088:	2200      	movs	r2, #0
    408a:	e6c5      	b.n	3e18 <__aeabi_ddiv+0x19c>
    408c:	2280      	movs	r2, #128	; 0x80
    408e:	464b      	mov	r3, r9
    4090:	0312      	lsls	r2, r2, #12
    4092:	4213      	tst	r3, r2
    4094:	d00a      	beq.n	40ac <__aeabi_ddiv+0x430>
    4096:	465b      	mov	r3, fp
    4098:	4213      	tst	r3, r2
    409a:	d106      	bne.n	40aa <__aeabi_ddiv+0x42e>
    409c:	431a      	orrs	r2, r3
    409e:	0312      	lsls	r2, r2, #12
    40a0:	0b12      	lsrs	r2, r2, #12
    40a2:	46ac      	mov	ip, r5
    40a4:	4688      	mov	r8, r1
    40a6:	4c8e      	ldr	r4, [pc, #568]	; (42e0 <__aeabi_ddiv+0x664>)
    40a8:	e6b6      	b.n	3e18 <__aeabi_ddiv+0x19c>
    40aa:	464b      	mov	r3, r9
    40ac:	431a      	orrs	r2, r3
    40ae:	0312      	lsls	r2, r2, #12
    40b0:	0b12      	lsrs	r2, r2, #12
    40b2:	46bc      	mov	ip, r7
    40b4:	4c8a      	ldr	r4, [pc, #552]	; (42e0 <__aeabi_ddiv+0x664>)
    40b6:	e6af      	b.n	3e18 <__aeabi_ddiv+0x19c>
    40b8:	0003      	movs	r3, r0
    40ba:	465a      	mov	r2, fp
    40bc:	3b28      	subs	r3, #40	; 0x28
    40be:	409a      	lsls	r2, r3
    40c0:	2300      	movs	r3, #0
    40c2:	4691      	mov	r9, r2
    40c4:	4698      	mov	r8, r3
    40c6:	e657      	b.n	3d78 <__aeabi_ddiv+0xfc>
    40c8:	4658      	mov	r0, fp
    40ca:	f001 f84f 	bl	516c <__clzsi2>
    40ce:	3020      	adds	r0, #32
    40d0:	e640      	b.n	3d54 <__aeabi_ddiv+0xd8>
    40d2:	0003      	movs	r3, r0
    40d4:	4652      	mov	r2, sl
    40d6:	3b28      	subs	r3, #40	; 0x28
    40d8:	409a      	lsls	r2, r3
    40da:	2100      	movs	r1, #0
    40dc:	4693      	mov	fp, r2
    40de:	e677      	b.n	3dd0 <__aeabi_ddiv+0x154>
    40e0:	f001 f844 	bl	516c <__clzsi2>
    40e4:	3020      	adds	r0, #32
    40e6:	e65f      	b.n	3da8 <__aeabi_ddiv+0x12c>
    40e8:	4588      	cmp	r8, r1
    40ea:	d200      	bcs.n	40ee <__aeabi_ddiv+0x472>
    40ec:	e6c7      	b.n	3e7e <__aeabi_ddiv+0x202>
    40ee:	464b      	mov	r3, r9
    40f0:	07de      	lsls	r6, r3, #31
    40f2:	085d      	lsrs	r5, r3, #1
    40f4:	4643      	mov	r3, r8
    40f6:	085b      	lsrs	r3, r3, #1
    40f8:	431e      	orrs	r6, r3
    40fa:	4643      	mov	r3, r8
    40fc:	07db      	lsls	r3, r3, #31
    40fe:	469a      	mov	sl, r3
    4100:	e6c2      	b.n	3e88 <__aeabi_ddiv+0x20c>
    4102:	2500      	movs	r5, #0
    4104:	4592      	cmp	sl, r2
    4106:	d300      	bcc.n	410a <__aeabi_ddiv+0x48e>
    4108:	e733      	b.n	3f72 <__aeabi_ddiv+0x2f6>
    410a:	9e03      	ldr	r6, [sp, #12]
    410c:	4659      	mov	r1, fp
    410e:	46b4      	mov	ip, r6
    4110:	44e2      	add	sl, ip
    4112:	45b2      	cmp	sl, r6
    4114:	41ad      	sbcs	r5, r5
    4116:	426d      	negs	r5, r5
    4118:	4445      	add	r5, r8
    411a:	18eb      	adds	r3, r5, r3
    411c:	3901      	subs	r1, #1
    411e:	4598      	cmp	r8, r3
    4120:	d207      	bcs.n	4132 <__aeabi_ddiv+0x4b6>
    4122:	4298      	cmp	r0, r3
    4124:	d900      	bls.n	4128 <__aeabi_ddiv+0x4ac>
    4126:	e07f      	b.n	4228 <__aeabi_ddiv+0x5ac>
    4128:	d100      	bne.n	412c <__aeabi_ddiv+0x4b0>
    412a:	e0bc      	b.n	42a6 <__aeabi_ddiv+0x62a>
    412c:	1a1d      	subs	r5, r3, r0
    412e:	468b      	mov	fp, r1
    4130:	e71f      	b.n	3f72 <__aeabi_ddiv+0x2f6>
    4132:	4598      	cmp	r8, r3
    4134:	d1fa      	bne.n	412c <__aeabi_ddiv+0x4b0>
    4136:	9d03      	ldr	r5, [sp, #12]
    4138:	4555      	cmp	r5, sl
    413a:	d9f2      	bls.n	4122 <__aeabi_ddiv+0x4a6>
    413c:	4643      	mov	r3, r8
    413e:	468b      	mov	fp, r1
    4140:	1a1d      	subs	r5, r3, r0
    4142:	e716      	b.n	3f72 <__aeabi_ddiv+0x2f6>
    4144:	469b      	mov	fp, r3
    4146:	e6ca      	b.n	3ede <__aeabi_ddiv+0x262>
    4148:	0015      	movs	r5, r2
    414a:	e6e7      	b.n	3f1c <__aeabi_ddiv+0x2a0>
    414c:	465a      	mov	r2, fp
    414e:	08c9      	lsrs	r1, r1, #3
    4150:	0752      	lsls	r2, r2, #29
    4152:	430a      	orrs	r2, r1
    4154:	055b      	lsls	r3, r3, #21
    4156:	4690      	mov	r8, r2
    4158:	0d5c      	lsrs	r4, r3, #21
    415a:	465a      	mov	r2, fp
    415c:	2301      	movs	r3, #1
    415e:	9902      	ldr	r1, [sp, #8]
    4160:	0252      	lsls	r2, r2, #9
    4162:	4019      	ands	r1, r3
    4164:	0b12      	lsrs	r2, r2, #12
    4166:	468c      	mov	ip, r1
    4168:	e656      	b.n	3e18 <__aeabi_ddiv+0x19c>
    416a:	2b00      	cmp	r3, #0
    416c:	d100      	bne.n	4170 <__aeabi_ddiv+0x4f4>
    416e:	e76f      	b.n	4050 <__aeabi_ddiv+0x3d4>
    4170:	4446      	add	r6, r8
    4172:	1e4a      	subs	r2, r1, #1
    4174:	45b0      	cmp	r8, r6
    4176:	d929      	bls.n	41cc <__aeabi_ddiv+0x550>
    4178:	0011      	movs	r1, r2
    417a:	4286      	cmp	r6, r0
    417c:	d000      	beq.n	4180 <__aeabi_ddiv+0x504>
    417e:	e765      	b.n	404c <__aeabi_ddiv+0x3d0>
    4180:	9a03      	ldr	r2, [sp, #12]
    4182:	4293      	cmp	r3, r2
    4184:	d000      	beq.n	4188 <__aeabi_ddiv+0x50c>
    4186:	e761      	b.n	404c <__aeabi_ddiv+0x3d0>
    4188:	e762      	b.n	4050 <__aeabi_ddiv+0x3d4>
    418a:	2101      	movs	r1, #1
    418c:	4249      	negs	r1, r1
    418e:	2001      	movs	r0, #1
    4190:	1ac2      	subs	r2, r0, r3
    4192:	2a38      	cmp	r2, #56	; 0x38
    4194:	dd21      	ble.n	41da <__aeabi_ddiv+0x55e>
    4196:	9b02      	ldr	r3, [sp, #8]
    4198:	4003      	ands	r3, r0
    419a:	469c      	mov	ip, r3
    419c:	e638      	b.n	3e10 <__aeabi_ddiv+0x194>
    419e:	220f      	movs	r2, #15
    41a0:	400a      	ands	r2, r1
    41a2:	2a04      	cmp	r2, #4
    41a4:	d100      	bne.n	41a8 <__aeabi_ddiv+0x52c>
    41a6:	e75b      	b.n	4060 <__aeabi_ddiv+0x3e4>
    41a8:	000a      	movs	r2, r1
    41aa:	1d11      	adds	r1, r2, #4
    41ac:	4291      	cmp	r1, r2
    41ae:	4192      	sbcs	r2, r2
    41b0:	4252      	negs	r2, r2
    41b2:	4493      	add	fp, r2
    41b4:	e754      	b.n	4060 <__aeabi_ddiv+0x3e4>
    41b6:	4b47      	ldr	r3, [pc, #284]	; (42d4 <__aeabi_ddiv+0x658>)
    41b8:	18e3      	adds	r3, r4, r3
    41ba:	2b00      	cmp	r3, #0
    41bc:	dde5      	ble.n	418a <__aeabi_ddiv+0x50e>
    41be:	2201      	movs	r2, #1
    41c0:	4252      	negs	r2, r2
    41c2:	e7f2      	b.n	41aa <__aeabi_ddiv+0x52e>
    41c4:	001d      	movs	r5, r3
    41c6:	e6fa      	b.n	3fbe <__aeabi_ddiv+0x342>
    41c8:	469a      	mov	sl, r3
    41ca:	e71c      	b.n	4006 <__aeabi_ddiv+0x38a>
    41cc:	42b0      	cmp	r0, r6
    41ce:	d839      	bhi.n	4244 <__aeabi_ddiv+0x5c8>
    41d0:	d06e      	beq.n	42b0 <__aeabi_ddiv+0x634>
    41d2:	0011      	movs	r1, r2
    41d4:	e73a      	b.n	404c <__aeabi_ddiv+0x3d0>
    41d6:	9302      	str	r3, [sp, #8]
    41d8:	e73a      	b.n	4050 <__aeabi_ddiv+0x3d4>
    41da:	2a1f      	cmp	r2, #31
    41dc:	dc3c      	bgt.n	4258 <__aeabi_ddiv+0x5dc>
    41de:	2320      	movs	r3, #32
    41e0:	1a9b      	subs	r3, r3, r2
    41e2:	000c      	movs	r4, r1
    41e4:	4658      	mov	r0, fp
    41e6:	4099      	lsls	r1, r3
    41e8:	4098      	lsls	r0, r3
    41ea:	1e4b      	subs	r3, r1, #1
    41ec:	4199      	sbcs	r1, r3
    41ee:	465b      	mov	r3, fp
    41f0:	40d4      	lsrs	r4, r2
    41f2:	40d3      	lsrs	r3, r2
    41f4:	4320      	orrs	r0, r4
    41f6:	4308      	orrs	r0, r1
    41f8:	001a      	movs	r2, r3
    41fa:	0743      	lsls	r3, r0, #29
    41fc:	d009      	beq.n	4212 <__aeabi_ddiv+0x596>
    41fe:	230f      	movs	r3, #15
    4200:	4003      	ands	r3, r0
    4202:	2b04      	cmp	r3, #4
    4204:	d005      	beq.n	4212 <__aeabi_ddiv+0x596>
    4206:	0001      	movs	r1, r0
    4208:	1d08      	adds	r0, r1, #4
    420a:	4288      	cmp	r0, r1
    420c:	419b      	sbcs	r3, r3
    420e:	425b      	negs	r3, r3
    4210:	18d2      	adds	r2, r2, r3
    4212:	0213      	lsls	r3, r2, #8
    4214:	d53a      	bpl.n	428c <__aeabi_ddiv+0x610>
    4216:	2301      	movs	r3, #1
    4218:	9a02      	ldr	r2, [sp, #8]
    421a:	2401      	movs	r4, #1
    421c:	401a      	ands	r2, r3
    421e:	2300      	movs	r3, #0
    4220:	4694      	mov	ip, r2
    4222:	4698      	mov	r8, r3
    4224:	2200      	movs	r2, #0
    4226:	e5f7      	b.n	3e18 <__aeabi_ddiv+0x19c>
    4228:	2102      	movs	r1, #2
    422a:	4249      	negs	r1, r1
    422c:	468c      	mov	ip, r1
    422e:	9d03      	ldr	r5, [sp, #12]
    4230:	44e3      	add	fp, ip
    4232:	46ac      	mov	ip, r5
    4234:	44e2      	add	sl, ip
    4236:	45aa      	cmp	sl, r5
    4238:	41ad      	sbcs	r5, r5
    423a:	426d      	negs	r5, r5
    423c:	4445      	add	r5, r8
    423e:	18ed      	adds	r5, r5, r3
    4240:	1a2d      	subs	r5, r5, r0
    4242:	e696      	b.n	3f72 <__aeabi_ddiv+0x2f6>
    4244:	1e8a      	subs	r2, r1, #2
    4246:	9903      	ldr	r1, [sp, #12]
    4248:	004d      	lsls	r5, r1, #1
    424a:	428d      	cmp	r5, r1
    424c:	4189      	sbcs	r1, r1
    424e:	4249      	negs	r1, r1
    4250:	4441      	add	r1, r8
    4252:	1876      	adds	r6, r6, r1
    4254:	9503      	str	r5, [sp, #12]
    4256:	e78f      	b.n	4178 <__aeabi_ddiv+0x4fc>
    4258:	201f      	movs	r0, #31
    425a:	4240      	negs	r0, r0
    425c:	1ac3      	subs	r3, r0, r3
    425e:	4658      	mov	r0, fp
    4260:	40d8      	lsrs	r0, r3
    4262:	0003      	movs	r3, r0
    4264:	2a20      	cmp	r2, #32
    4266:	d028      	beq.n	42ba <__aeabi_ddiv+0x63e>
    4268:	2040      	movs	r0, #64	; 0x40
    426a:	465d      	mov	r5, fp
    426c:	1a82      	subs	r2, r0, r2
    426e:	4095      	lsls	r5, r2
    4270:	4329      	orrs	r1, r5
    4272:	1e4a      	subs	r2, r1, #1
    4274:	4191      	sbcs	r1, r2
    4276:	4319      	orrs	r1, r3
    4278:	2307      	movs	r3, #7
    427a:	2200      	movs	r2, #0
    427c:	400b      	ands	r3, r1
    427e:	d009      	beq.n	4294 <__aeabi_ddiv+0x618>
    4280:	230f      	movs	r3, #15
    4282:	2200      	movs	r2, #0
    4284:	400b      	ands	r3, r1
    4286:	0008      	movs	r0, r1
    4288:	2b04      	cmp	r3, #4
    428a:	d1bd      	bne.n	4208 <__aeabi_ddiv+0x58c>
    428c:	0001      	movs	r1, r0
    428e:	0753      	lsls	r3, r2, #29
    4290:	0252      	lsls	r2, r2, #9
    4292:	0b12      	lsrs	r2, r2, #12
    4294:	08c9      	lsrs	r1, r1, #3
    4296:	4319      	orrs	r1, r3
    4298:	2301      	movs	r3, #1
    429a:	4688      	mov	r8, r1
    429c:	9902      	ldr	r1, [sp, #8]
    429e:	2400      	movs	r4, #0
    42a0:	4019      	ands	r1, r3
    42a2:	468c      	mov	ip, r1
    42a4:	e5b8      	b.n	3e18 <__aeabi_ddiv+0x19c>
    42a6:	4552      	cmp	r2, sl
    42a8:	d8be      	bhi.n	4228 <__aeabi_ddiv+0x5ac>
    42aa:	468b      	mov	fp, r1
    42ac:	2500      	movs	r5, #0
    42ae:	e660      	b.n	3f72 <__aeabi_ddiv+0x2f6>
    42b0:	9d03      	ldr	r5, [sp, #12]
    42b2:	429d      	cmp	r5, r3
    42b4:	d3c6      	bcc.n	4244 <__aeabi_ddiv+0x5c8>
    42b6:	0011      	movs	r1, r2
    42b8:	e762      	b.n	4180 <__aeabi_ddiv+0x504>
    42ba:	2500      	movs	r5, #0
    42bc:	e7d8      	b.n	4270 <__aeabi_ddiv+0x5f4>
    42be:	2280      	movs	r2, #128	; 0x80
    42c0:	465b      	mov	r3, fp
    42c2:	0312      	lsls	r2, r2, #12
    42c4:	431a      	orrs	r2, r3
    42c6:	9b01      	ldr	r3, [sp, #4]
    42c8:	0312      	lsls	r2, r2, #12
    42ca:	0b12      	lsrs	r2, r2, #12
    42cc:	469c      	mov	ip, r3
    42ce:	4688      	mov	r8, r1
    42d0:	4c03      	ldr	r4, [pc, #12]	; (42e0 <__aeabi_ddiv+0x664>)
    42d2:	e5a1      	b.n	3e18 <__aeabi_ddiv+0x19c>
    42d4:	000003ff 	.word	0x000003ff
    42d8:	feffffff 	.word	0xfeffffff
    42dc:	000007fe 	.word	0x000007fe
    42e0:	000007ff 	.word	0x000007ff

000042e4 <__eqdf2>:
    42e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    42e6:	464f      	mov	r7, r9
    42e8:	4646      	mov	r6, r8
    42ea:	46d6      	mov	lr, sl
    42ec:	005c      	lsls	r4, r3, #1
    42ee:	b5c0      	push	{r6, r7, lr}
    42f0:	031f      	lsls	r7, r3, #12
    42f2:	0fdb      	lsrs	r3, r3, #31
    42f4:	469a      	mov	sl, r3
    42f6:	4b17      	ldr	r3, [pc, #92]	; (4354 <__eqdf2+0x70>)
    42f8:	030e      	lsls	r6, r1, #12
    42fa:	004d      	lsls	r5, r1, #1
    42fc:	4684      	mov	ip, r0
    42fe:	4680      	mov	r8, r0
    4300:	0b36      	lsrs	r6, r6, #12
    4302:	0d6d      	lsrs	r5, r5, #21
    4304:	0fc9      	lsrs	r1, r1, #31
    4306:	4691      	mov	r9, r2
    4308:	0b3f      	lsrs	r7, r7, #12
    430a:	0d64      	lsrs	r4, r4, #21
    430c:	2001      	movs	r0, #1
    430e:	429d      	cmp	r5, r3
    4310:	d008      	beq.n	4324 <__eqdf2+0x40>
    4312:	429c      	cmp	r4, r3
    4314:	d001      	beq.n	431a <__eqdf2+0x36>
    4316:	42a5      	cmp	r5, r4
    4318:	d00b      	beq.n	4332 <__eqdf2+0x4e>
    431a:	bc1c      	pop	{r2, r3, r4}
    431c:	4690      	mov	r8, r2
    431e:	4699      	mov	r9, r3
    4320:	46a2      	mov	sl, r4
    4322:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4324:	4663      	mov	r3, ip
    4326:	4333      	orrs	r3, r6
    4328:	d1f7      	bne.n	431a <__eqdf2+0x36>
    432a:	42ac      	cmp	r4, r5
    432c:	d1f5      	bne.n	431a <__eqdf2+0x36>
    432e:	433a      	orrs	r2, r7
    4330:	d1f3      	bne.n	431a <__eqdf2+0x36>
    4332:	2001      	movs	r0, #1
    4334:	42be      	cmp	r6, r7
    4336:	d1f0      	bne.n	431a <__eqdf2+0x36>
    4338:	45c8      	cmp	r8, r9
    433a:	d1ee      	bne.n	431a <__eqdf2+0x36>
    433c:	4551      	cmp	r1, sl
    433e:	d007      	beq.n	4350 <__eqdf2+0x6c>
    4340:	2d00      	cmp	r5, #0
    4342:	d1ea      	bne.n	431a <__eqdf2+0x36>
    4344:	4663      	mov	r3, ip
    4346:	431e      	orrs	r6, r3
    4348:	0030      	movs	r0, r6
    434a:	1e46      	subs	r6, r0, #1
    434c:	41b0      	sbcs	r0, r6
    434e:	e7e4      	b.n	431a <__eqdf2+0x36>
    4350:	2000      	movs	r0, #0
    4352:	e7e2      	b.n	431a <__eqdf2+0x36>
    4354:	000007ff 	.word	0x000007ff

00004358 <__gedf2>:
    4358:	b5f0      	push	{r4, r5, r6, r7, lr}
    435a:	4645      	mov	r5, r8
    435c:	46de      	mov	lr, fp
    435e:	4657      	mov	r7, sl
    4360:	464e      	mov	r6, r9
    4362:	b5e0      	push	{r5, r6, r7, lr}
    4364:	031f      	lsls	r7, r3, #12
    4366:	0b3d      	lsrs	r5, r7, #12
    4368:	4f2c      	ldr	r7, [pc, #176]	; (441c <__gedf2+0xc4>)
    436a:	030e      	lsls	r6, r1, #12
    436c:	004c      	lsls	r4, r1, #1
    436e:	46ab      	mov	fp, r5
    4370:	005d      	lsls	r5, r3, #1
    4372:	4684      	mov	ip, r0
    4374:	0b36      	lsrs	r6, r6, #12
    4376:	0d64      	lsrs	r4, r4, #21
    4378:	0fc9      	lsrs	r1, r1, #31
    437a:	4690      	mov	r8, r2
    437c:	0d6d      	lsrs	r5, r5, #21
    437e:	0fdb      	lsrs	r3, r3, #31
    4380:	42bc      	cmp	r4, r7
    4382:	d02a      	beq.n	43da <__gedf2+0x82>
    4384:	4f25      	ldr	r7, [pc, #148]	; (441c <__gedf2+0xc4>)
    4386:	42bd      	cmp	r5, r7
    4388:	d02d      	beq.n	43e6 <__gedf2+0x8e>
    438a:	2c00      	cmp	r4, #0
    438c:	d10f      	bne.n	43ae <__gedf2+0x56>
    438e:	4330      	orrs	r0, r6
    4390:	0007      	movs	r7, r0
    4392:	4681      	mov	r9, r0
    4394:	4278      	negs	r0, r7
    4396:	4178      	adcs	r0, r7
    4398:	b2c0      	uxtb	r0, r0
    439a:	2d00      	cmp	r5, #0
    439c:	d117      	bne.n	43ce <__gedf2+0x76>
    439e:	465f      	mov	r7, fp
    43a0:	433a      	orrs	r2, r7
    43a2:	d114      	bne.n	43ce <__gedf2+0x76>
    43a4:	464b      	mov	r3, r9
    43a6:	2000      	movs	r0, #0
    43a8:	2b00      	cmp	r3, #0
    43aa:	d00a      	beq.n	43c2 <__gedf2+0x6a>
    43ac:	e006      	b.n	43bc <__gedf2+0x64>
    43ae:	2d00      	cmp	r5, #0
    43b0:	d102      	bne.n	43b8 <__gedf2+0x60>
    43b2:	4658      	mov	r0, fp
    43b4:	4302      	orrs	r2, r0
    43b6:	d001      	beq.n	43bc <__gedf2+0x64>
    43b8:	4299      	cmp	r1, r3
    43ba:	d018      	beq.n	43ee <__gedf2+0x96>
    43bc:	4248      	negs	r0, r1
    43be:	2101      	movs	r1, #1
    43c0:	4308      	orrs	r0, r1
    43c2:	bc3c      	pop	{r2, r3, r4, r5}
    43c4:	4690      	mov	r8, r2
    43c6:	4699      	mov	r9, r3
    43c8:	46a2      	mov	sl, r4
    43ca:	46ab      	mov	fp, r5
    43cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    43ce:	2800      	cmp	r0, #0
    43d0:	d0f2      	beq.n	43b8 <__gedf2+0x60>
    43d2:	2001      	movs	r0, #1
    43d4:	3b01      	subs	r3, #1
    43d6:	4318      	orrs	r0, r3
    43d8:	e7f3      	b.n	43c2 <__gedf2+0x6a>
    43da:	0037      	movs	r7, r6
    43dc:	4307      	orrs	r7, r0
    43de:	d0d1      	beq.n	4384 <__gedf2+0x2c>
    43e0:	2002      	movs	r0, #2
    43e2:	4240      	negs	r0, r0
    43e4:	e7ed      	b.n	43c2 <__gedf2+0x6a>
    43e6:	465f      	mov	r7, fp
    43e8:	4317      	orrs	r7, r2
    43ea:	d0ce      	beq.n	438a <__gedf2+0x32>
    43ec:	e7f8      	b.n	43e0 <__gedf2+0x88>
    43ee:	42ac      	cmp	r4, r5
    43f0:	dce4      	bgt.n	43bc <__gedf2+0x64>
    43f2:	da03      	bge.n	43fc <__gedf2+0xa4>
    43f4:	1e48      	subs	r0, r1, #1
    43f6:	2101      	movs	r1, #1
    43f8:	4308      	orrs	r0, r1
    43fa:	e7e2      	b.n	43c2 <__gedf2+0x6a>
    43fc:	455e      	cmp	r6, fp
    43fe:	d8dd      	bhi.n	43bc <__gedf2+0x64>
    4400:	d006      	beq.n	4410 <__gedf2+0xb8>
    4402:	2000      	movs	r0, #0
    4404:	455e      	cmp	r6, fp
    4406:	d2dc      	bcs.n	43c2 <__gedf2+0x6a>
    4408:	2301      	movs	r3, #1
    440a:	1e48      	subs	r0, r1, #1
    440c:	4318      	orrs	r0, r3
    440e:	e7d8      	b.n	43c2 <__gedf2+0x6a>
    4410:	45c4      	cmp	ip, r8
    4412:	d8d3      	bhi.n	43bc <__gedf2+0x64>
    4414:	2000      	movs	r0, #0
    4416:	45c4      	cmp	ip, r8
    4418:	d3f6      	bcc.n	4408 <__gedf2+0xb0>
    441a:	e7d2      	b.n	43c2 <__gedf2+0x6a>
    441c:	000007ff 	.word	0x000007ff

00004420 <__ledf2>:
    4420:	b5f0      	push	{r4, r5, r6, r7, lr}
    4422:	464e      	mov	r6, r9
    4424:	4645      	mov	r5, r8
    4426:	46de      	mov	lr, fp
    4428:	4657      	mov	r7, sl
    442a:	005c      	lsls	r4, r3, #1
    442c:	b5e0      	push	{r5, r6, r7, lr}
    442e:	031f      	lsls	r7, r3, #12
    4430:	0fdb      	lsrs	r3, r3, #31
    4432:	4699      	mov	r9, r3
    4434:	4b2a      	ldr	r3, [pc, #168]	; (44e0 <__ledf2+0xc0>)
    4436:	030e      	lsls	r6, r1, #12
    4438:	004d      	lsls	r5, r1, #1
    443a:	0fc9      	lsrs	r1, r1, #31
    443c:	4684      	mov	ip, r0
    443e:	0b36      	lsrs	r6, r6, #12
    4440:	0d6d      	lsrs	r5, r5, #21
    4442:	468b      	mov	fp, r1
    4444:	4690      	mov	r8, r2
    4446:	0b3f      	lsrs	r7, r7, #12
    4448:	0d64      	lsrs	r4, r4, #21
    444a:	429d      	cmp	r5, r3
    444c:	d020      	beq.n	4490 <__ledf2+0x70>
    444e:	4b24      	ldr	r3, [pc, #144]	; (44e0 <__ledf2+0xc0>)
    4450:	429c      	cmp	r4, r3
    4452:	d022      	beq.n	449a <__ledf2+0x7a>
    4454:	2d00      	cmp	r5, #0
    4456:	d112      	bne.n	447e <__ledf2+0x5e>
    4458:	4330      	orrs	r0, r6
    445a:	4243      	negs	r3, r0
    445c:	4143      	adcs	r3, r0
    445e:	b2db      	uxtb	r3, r3
    4460:	2c00      	cmp	r4, #0
    4462:	d01f      	beq.n	44a4 <__ledf2+0x84>
    4464:	2b00      	cmp	r3, #0
    4466:	d00c      	beq.n	4482 <__ledf2+0x62>
    4468:	464b      	mov	r3, r9
    446a:	2001      	movs	r0, #1
    446c:	3b01      	subs	r3, #1
    446e:	4303      	orrs	r3, r0
    4470:	0018      	movs	r0, r3
    4472:	bc3c      	pop	{r2, r3, r4, r5}
    4474:	4690      	mov	r8, r2
    4476:	4699      	mov	r9, r3
    4478:	46a2      	mov	sl, r4
    447a:	46ab      	mov	fp, r5
    447c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    447e:	2c00      	cmp	r4, #0
    4480:	d016      	beq.n	44b0 <__ledf2+0x90>
    4482:	45cb      	cmp	fp, r9
    4484:	d017      	beq.n	44b6 <__ledf2+0x96>
    4486:	465b      	mov	r3, fp
    4488:	4259      	negs	r1, r3
    448a:	2301      	movs	r3, #1
    448c:	430b      	orrs	r3, r1
    448e:	e7ef      	b.n	4470 <__ledf2+0x50>
    4490:	0031      	movs	r1, r6
    4492:	2302      	movs	r3, #2
    4494:	4301      	orrs	r1, r0
    4496:	d1eb      	bne.n	4470 <__ledf2+0x50>
    4498:	e7d9      	b.n	444e <__ledf2+0x2e>
    449a:	0039      	movs	r1, r7
    449c:	2302      	movs	r3, #2
    449e:	4311      	orrs	r1, r2
    44a0:	d1e6      	bne.n	4470 <__ledf2+0x50>
    44a2:	e7d7      	b.n	4454 <__ledf2+0x34>
    44a4:	433a      	orrs	r2, r7
    44a6:	d1dd      	bne.n	4464 <__ledf2+0x44>
    44a8:	2300      	movs	r3, #0
    44aa:	2800      	cmp	r0, #0
    44ac:	d0e0      	beq.n	4470 <__ledf2+0x50>
    44ae:	e7ea      	b.n	4486 <__ledf2+0x66>
    44b0:	433a      	orrs	r2, r7
    44b2:	d1e6      	bne.n	4482 <__ledf2+0x62>
    44b4:	e7e7      	b.n	4486 <__ledf2+0x66>
    44b6:	42a5      	cmp	r5, r4
    44b8:	dce5      	bgt.n	4486 <__ledf2+0x66>
    44ba:	db05      	blt.n	44c8 <__ledf2+0xa8>
    44bc:	42be      	cmp	r6, r7
    44be:	d8e2      	bhi.n	4486 <__ledf2+0x66>
    44c0:	d007      	beq.n	44d2 <__ledf2+0xb2>
    44c2:	2300      	movs	r3, #0
    44c4:	42be      	cmp	r6, r7
    44c6:	d2d3      	bcs.n	4470 <__ledf2+0x50>
    44c8:	4659      	mov	r1, fp
    44ca:	2301      	movs	r3, #1
    44cc:	3901      	subs	r1, #1
    44ce:	430b      	orrs	r3, r1
    44d0:	e7ce      	b.n	4470 <__ledf2+0x50>
    44d2:	45c4      	cmp	ip, r8
    44d4:	d8d7      	bhi.n	4486 <__ledf2+0x66>
    44d6:	2300      	movs	r3, #0
    44d8:	45c4      	cmp	ip, r8
    44da:	d3f5      	bcc.n	44c8 <__ledf2+0xa8>
    44dc:	e7c8      	b.n	4470 <__ledf2+0x50>
    44de:	46c0      	nop			; (mov r8, r8)
    44e0:	000007ff 	.word	0x000007ff

000044e4 <__aeabi_dmul>:
    44e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    44e6:	4657      	mov	r7, sl
    44e8:	4645      	mov	r5, r8
    44ea:	46de      	mov	lr, fp
    44ec:	464e      	mov	r6, r9
    44ee:	b5e0      	push	{r5, r6, r7, lr}
    44f0:	030c      	lsls	r4, r1, #12
    44f2:	4698      	mov	r8, r3
    44f4:	004e      	lsls	r6, r1, #1
    44f6:	0b23      	lsrs	r3, r4, #12
    44f8:	b087      	sub	sp, #28
    44fa:	0007      	movs	r7, r0
    44fc:	4692      	mov	sl, r2
    44fe:	469b      	mov	fp, r3
    4500:	0d76      	lsrs	r6, r6, #21
    4502:	0fcd      	lsrs	r5, r1, #31
    4504:	2e00      	cmp	r6, #0
    4506:	d06b      	beq.n	45e0 <__aeabi_dmul+0xfc>
    4508:	4b6d      	ldr	r3, [pc, #436]	; (46c0 <__aeabi_dmul+0x1dc>)
    450a:	429e      	cmp	r6, r3
    450c:	d035      	beq.n	457a <__aeabi_dmul+0x96>
    450e:	2480      	movs	r4, #128	; 0x80
    4510:	465b      	mov	r3, fp
    4512:	0f42      	lsrs	r2, r0, #29
    4514:	0424      	lsls	r4, r4, #16
    4516:	00db      	lsls	r3, r3, #3
    4518:	4314      	orrs	r4, r2
    451a:	431c      	orrs	r4, r3
    451c:	00c3      	lsls	r3, r0, #3
    451e:	4699      	mov	r9, r3
    4520:	4b68      	ldr	r3, [pc, #416]	; (46c4 <__aeabi_dmul+0x1e0>)
    4522:	46a3      	mov	fp, r4
    4524:	469c      	mov	ip, r3
    4526:	2300      	movs	r3, #0
    4528:	2700      	movs	r7, #0
    452a:	4466      	add	r6, ip
    452c:	9302      	str	r3, [sp, #8]
    452e:	4643      	mov	r3, r8
    4530:	031c      	lsls	r4, r3, #12
    4532:	005a      	lsls	r2, r3, #1
    4534:	0fdb      	lsrs	r3, r3, #31
    4536:	4650      	mov	r0, sl
    4538:	0b24      	lsrs	r4, r4, #12
    453a:	0d52      	lsrs	r2, r2, #21
    453c:	4698      	mov	r8, r3
    453e:	d100      	bne.n	4542 <__aeabi_dmul+0x5e>
    4540:	e076      	b.n	4630 <__aeabi_dmul+0x14c>
    4542:	4b5f      	ldr	r3, [pc, #380]	; (46c0 <__aeabi_dmul+0x1dc>)
    4544:	429a      	cmp	r2, r3
    4546:	d06d      	beq.n	4624 <__aeabi_dmul+0x140>
    4548:	2380      	movs	r3, #128	; 0x80
    454a:	0f41      	lsrs	r1, r0, #29
    454c:	041b      	lsls	r3, r3, #16
    454e:	430b      	orrs	r3, r1
    4550:	495c      	ldr	r1, [pc, #368]	; (46c4 <__aeabi_dmul+0x1e0>)
    4552:	00e4      	lsls	r4, r4, #3
    4554:	468c      	mov	ip, r1
    4556:	431c      	orrs	r4, r3
    4558:	00c3      	lsls	r3, r0, #3
    455a:	2000      	movs	r0, #0
    455c:	4462      	add	r2, ip
    455e:	4641      	mov	r1, r8
    4560:	18b6      	adds	r6, r6, r2
    4562:	4069      	eors	r1, r5
    4564:	1c72      	adds	r2, r6, #1
    4566:	9101      	str	r1, [sp, #4]
    4568:	4694      	mov	ip, r2
    456a:	4307      	orrs	r7, r0
    456c:	2f0f      	cmp	r7, #15
    456e:	d900      	bls.n	4572 <__aeabi_dmul+0x8e>
    4570:	e0b0      	b.n	46d4 <__aeabi_dmul+0x1f0>
    4572:	4a55      	ldr	r2, [pc, #340]	; (46c8 <__aeabi_dmul+0x1e4>)
    4574:	00bf      	lsls	r7, r7, #2
    4576:	59d2      	ldr	r2, [r2, r7]
    4578:	4697      	mov	pc, r2
    457a:	465b      	mov	r3, fp
    457c:	4303      	orrs	r3, r0
    457e:	4699      	mov	r9, r3
    4580:	d000      	beq.n	4584 <__aeabi_dmul+0xa0>
    4582:	e087      	b.n	4694 <__aeabi_dmul+0x1b0>
    4584:	2300      	movs	r3, #0
    4586:	469b      	mov	fp, r3
    4588:	3302      	adds	r3, #2
    458a:	2708      	movs	r7, #8
    458c:	9302      	str	r3, [sp, #8]
    458e:	e7ce      	b.n	452e <__aeabi_dmul+0x4a>
    4590:	4642      	mov	r2, r8
    4592:	9201      	str	r2, [sp, #4]
    4594:	2802      	cmp	r0, #2
    4596:	d067      	beq.n	4668 <__aeabi_dmul+0x184>
    4598:	2803      	cmp	r0, #3
    459a:	d100      	bne.n	459e <__aeabi_dmul+0xba>
    459c:	e20e      	b.n	49bc <__aeabi_dmul+0x4d8>
    459e:	2801      	cmp	r0, #1
    45a0:	d000      	beq.n	45a4 <__aeabi_dmul+0xc0>
    45a2:	e162      	b.n	486a <__aeabi_dmul+0x386>
    45a4:	2300      	movs	r3, #0
    45a6:	2400      	movs	r4, #0
    45a8:	2200      	movs	r2, #0
    45aa:	4699      	mov	r9, r3
    45ac:	9901      	ldr	r1, [sp, #4]
    45ae:	4001      	ands	r1, r0
    45b0:	b2cd      	uxtb	r5, r1
    45b2:	2100      	movs	r1, #0
    45b4:	0312      	lsls	r2, r2, #12
    45b6:	0d0b      	lsrs	r3, r1, #20
    45b8:	0b12      	lsrs	r2, r2, #12
    45ba:	051b      	lsls	r3, r3, #20
    45bc:	4313      	orrs	r3, r2
    45be:	4a43      	ldr	r2, [pc, #268]	; (46cc <__aeabi_dmul+0x1e8>)
    45c0:	0524      	lsls	r4, r4, #20
    45c2:	4013      	ands	r3, r2
    45c4:	431c      	orrs	r4, r3
    45c6:	0064      	lsls	r4, r4, #1
    45c8:	07ed      	lsls	r5, r5, #31
    45ca:	0864      	lsrs	r4, r4, #1
    45cc:	432c      	orrs	r4, r5
    45ce:	4648      	mov	r0, r9
    45d0:	0021      	movs	r1, r4
    45d2:	b007      	add	sp, #28
    45d4:	bc3c      	pop	{r2, r3, r4, r5}
    45d6:	4690      	mov	r8, r2
    45d8:	4699      	mov	r9, r3
    45da:	46a2      	mov	sl, r4
    45dc:	46ab      	mov	fp, r5
    45de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    45e0:	4303      	orrs	r3, r0
    45e2:	4699      	mov	r9, r3
    45e4:	d04f      	beq.n	4686 <__aeabi_dmul+0x1a2>
    45e6:	465b      	mov	r3, fp
    45e8:	2b00      	cmp	r3, #0
    45ea:	d100      	bne.n	45ee <__aeabi_dmul+0x10a>
    45ec:	e189      	b.n	4902 <__aeabi_dmul+0x41e>
    45ee:	4658      	mov	r0, fp
    45f0:	f000 fdbc 	bl	516c <__clzsi2>
    45f4:	0003      	movs	r3, r0
    45f6:	3b0b      	subs	r3, #11
    45f8:	2b1c      	cmp	r3, #28
    45fa:	dd00      	ble.n	45fe <__aeabi_dmul+0x11a>
    45fc:	e17a      	b.n	48f4 <__aeabi_dmul+0x410>
    45fe:	221d      	movs	r2, #29
    4600:	1ad3      	subs	r3, r2, r3
    4602:	003a      	movs	r2, r7
    4604:	0001      	movs	r1, r0
    4606:	465c      	mov	r4, fp
    4608:	40da      	lsrs	r2, r3
    460a:	3908      	subs	r1, #8
    460c:	408c      	lsls	r4, r1
    460e:	0013      	movs	r3, r2
    4610:	408f      	lsls	r7, r1
    4612:	4323      	orrs	r3, r4
    4614:	469b      	mov	fp, r3
    4616:	46b9      	mov	r9, r7
    4618:	2300      	movs	r3, #0
    461a:	4e2d      	ldr	r6, [pc, #180]	; (46d0 <__aeabi_dmul+0x1ec>)
    461c:	2700      	movs	r7, #0
    461e:	1a36      	subs	r6, r6, r0
    4620:	9302      	str	r3, [sp, #8]
    4622:	e784      	b.n	452e <__aeabi_dmul+0x4a>
    4624:	4653      	mov	r3, sl
    4626:	4323      	orrs	r3, r4
    4628:	d12a      	bne.n	4680 <__aeabi_dmul+0x19c>
    462a:	2400      	movs	r4, #0
    462c:	2002      	movs	r0, #2
    462e:	e796      	b.n	455e <__aeabi_dmul+0x7a>
    4630:	4653      	mov	r3, sl
    4632:	4323      	orrs	r3, r4
    4634:	d020      	beq.n	4678 <__aeabi_dmul+0x194>
    4636:	2c00      	cmp	r4, #0
    4638:	d100      	bne.n	463c <__aeabi_dmul+0x158>
    463a:	e157      	b.n	48ec <__aeabi_dmul+0x408>
    463c:	0020      	movs	r0, r4
    463e:	f000 fd95 	bl	516c <__clzsi2>
    4642:	0003      	movs	r3, r0
    4644:	3b0b      	subs	r3, #11
    4646:	2b1c      	cmp	r3, #28
    4648:	dd00      	ble.n	464c <__aeabi_dmul+0x168>
    464a:	e149      	b.n	48e0 <__aeabi_dmul+0x3fc>
    464c:	211d      	movs	r1, #29
    464e:	1acb      	subs	r3, r1, r3
    4650:	4651      	mov	r1, sl
    4652:	0002      	movs	r2, r0
    4654:	40d9      	lsrs	r1, r3
    4656:	4653      	mov	r3, sl
    4658:	3a08      	subs	r2, #8
    465a:	4094      	lsls	r4, r2
    465c:	4093      	lsls	r3, r2
    465e:	430c      	orrs	r4, r1
    4660:	4a1b      	ldr	r2, [pc, #108]	; (46d0 <__aeabi_dmul+0x1ec>)
    4662:	1a12      	subs	r2, r2, r0
    4664:	2000      	movs	r0, #0
    4666:	e77a      	b.n	455e <__aeabi_dmul+0x7a>
    4668:	2501      	movs	r5, #1
    466a:	9b01      	ldr	r3, [sp, #4]
    466c:	4c14      	ldr	r4, [pc, #80]	; (46c0 <__aeabi_dmul+0x1dc>)
    466e:	401d      	ands	r5, r3
    4670:	2300      	movs	r3, #0
    4672:	2200      	movs	r2, #0
    4674:	4699      	mov	r9, r3
    4676:	e79c      	b.n	45b2 <__aeabi_dmul+0xce>
    4678:	2400      	movs	r4, #0
    467a:	2200      	movs	r2, #0
    467c:	2001      	movs	r0, #1
    467e:	e76e      	b.n	455e <__aeabi_dmul+0x7a>
    4680:	4653      	mov	r3, sl
    4682:	2003      	movs	r0, #3
    4684:	e76b      	b.n	455e <__aeabi_dmul+0x7a>
    4686:	2300      	movs	r3, #0
    4688:	469b      	mov	fp, r3
    468a:	3301      	adds	r3, #1
    468c:	2704      	movs	r7, #4
    468e:	2600      	movs	r6, #0
    4690:	9302      	str	r3, [sp, #8]
    4692:	e74c      	b.n	452e <__aeabi_dmul+0x4a>
    4694:	2303      	movs	r3, #3
    4696:	4681      	mov	r9, r0
    4698:	270c      	movs	r7, #12
    469a:	9302      	str	r3, [sp, #8]
    469c:	e747      	b.n	452e <__aeabi_dmul+0x4a>
    469e:	2280      	movs	r2, #128	; 0x80
    46a0:	2300      	movs	r3, #0
    46a2:	2500      	movs	r5, #0
    46a4:	0312      	lsls	r2, r2, #12
    46a6:	4699      	mov	r9, r3
    46a8:	4c05      	ldr	r4, [pc, #20]	; (46c0 <__aeabi_dmul+0x1dc>)
    46aa:	e782      	b.n	45b2 <__aeabi_dmul+0xce>
    46ac:	465c      	mov	r4, fp
    46ae:	464b      	mov	r3, r9
    46b0:	9802      	ldr	r0, [sp, #8]
    46b2:	e76f      	b.n	4594 <__aeabi_dmul+0xb0>
    46b4:	465c      	mov	r4, fp
    46b6:	464b      	mov	r3, r9
    46b8:	9501      	str	r5, [sp, #4]
    46ba:	9802      	ldr	r0, [sp, #8]
    46bc:	e76a      	b.n	4594 <__aeabi_dmul+0xb0>
    46be:	46c0      	nop			; (mov r8, r8)
    46c0:	000007ff 	.word	0x000007ff
    46c4:	fffffc01 	.word	0xfffffc01
    46c8:	000052a0 	.word	0x000052a0
    46cc:	800fffff 	.word	0x800fffff
    46d0:	fffffc0d 	.word	0xfffffc0d
    46d4:	464a      	mov	r2, r9
    46d6:	4649      	mov	r1, r9
    46d8:	0c17      	lsrs	r7, r2, #16
    46da:	0c1a      	lsrs	r2, r3, #16
    46dc:	041b      	lsls	r3, r3, #16
    46de:	0c1b      	lsrs	r3, r3, #16
    46e0:	0408      	lsls	r0, r1, #16
    46e2:	0019      	movs	r1, r3
    46e4:	0c00      	lsrs	r0, r0, #16
    46e6:	4341      	muls	r1, r0
    46e8:	0015      	movs	r5, r2
    46ea:	4688      	mov	r8, r1
    46ec:	0019      	movs	r1, r3
    46ee:	437d      	muls	r5, r7
    46f0:	4379      	muls	r1, r7
    46f2:	9503      	str	r5, [sp, #12]
    46f4:	4689      	mov	r9, r1
    46f6:	0029      	movs	r1, r5
    46f8:	0015      	movs	r5, r2
    46fa:	4345      	muls	r5, r0
    46fc:	444d      	add	r5, r9
    46fe:	9502      	str	r5, [sp, #8]
    4700:	4645      	mov	r5, r8
    4702:	0c2d      	lsrs	r5, r5, #16
    4704:	46aa      	mov	sl, r5
    4706:	9d02      	ldr	r5, [sp, #8]
    4708:	4455      	add	r5, sl
    470a:	45a9      	cmp	r9, r5
    470c:	d906      	bls.n	471c <__aeabi_dmul+0x238>
    470e:	468a      	mov	sl, r1
    4710:	2180      	movs	r1, #128	; 0x80
    4712:	0249      	lsls	r1, r1, #9
    4714:	4689      	mov	r9, r1
    4716:	44ca      	add	sl, r9
    4718:	4651      	mov	r1, sl
    471a:	9103      	str	r1, [sp, #12]
    471c:	0c29      	lsrs	r1, r5, #16
    471e:	9104      	str	r1, [sp, #16]
    4720:	4641      	mov	r1, r8
    4722:	0409      	lsls	r1, r1, #16
    4724:	042d      	lsls	r5, r5, #16
    4726:	0c09      	lsrs	r1, r1, #16
    4728:	4688      	mov	r8, r1
    472a:	0029      	movs	r1, r5
    472c:	0c25      	lsrs	r5, r4, #16
    472e:	0424      	lsls	r4, r4, #16
    4730:	4441      	add	r1, r8
    4732:	0c24      	lsrs	r4, r4, #16
    4734:	9105      	str	r1, [sp, #20]
    4736:	0021      	movs	r1, r4
    4738:	4341      	muls	r1, r0
    473a:	4688      	mov	r8, r1
    473c:	0021      	movs	r1, r4
    473e:	4379      	muls	r1, r7
    4740:	468a      	mov	sl, r1
    4742:	4368      	muls	r0, r5
    4744:	4641      	mov	r1, r8
    4746:	4450      	add	r0, sl
    4748:	4681      	mov	r9, r0
    474a:	0c08      	lsrs	r0, r1, #16
    474c:	4448      	add	r0, r9
    474e:	436f      	muls	r7, r5
    4750:	4582      	cmp	sl, r0
    4752:	d903      	bls.n	475c <__aeabi_dmul+0x278>
    4754:	2180      	movs	r1, #128	; 0x80
    4756:	0249      	lsls	r1, r1, #9
    4758:	4689      	mov	r9, r1
    475a:	444f      	add	r7, r9
    475c:	0c01      	lsrs	r1, r0, #16
    475e:	4689      	mov	r9, r1
    4760:	0039      	movs	r1, r7
    4762:	4449      	add	r1, r9
    4764:	9102      	str	r1, [sp, #8]
    4766:	4641      	mov	r1, r8
    4768:	040f      	lsls	r7, r1, #16
    476a:	9904      	ldr	r1, [sp, #16]
    476c:	0c3f      	lsrs	r7, r7, #16
    476e:	4688      	mov	r8, r1
    4770:	0400      	lsls	r0, r0, #16
    4772:	19c0      	adds	r0, r0, r7
    4774:	4480      	add	r8, r0
    4776:	4641      	mov	r1, r8
    4778:	9104      	str	r1, [sp, #16]
    477a:	4659      	mov	r1, fp
    477c:	0c0f      	lsrs	r7, r1, #16
    477e:	0409      	lsls	r1, r1, #16
    4780:	0c09      	lsrs	r1, r1, #16
    4782:	4688      	mov	r8, r1
    4784:	4359      	muls	r1, r3
    4786:	468a      	mov	sl, r1
    4788:	0039      	movs	r1, r7
    478a:	4351      	muls	r1, r2
    478c:	4689      	mov	r9, r1
    478e:	4641      	mov	r1, r8
    4790:	434a      	muls	r2, r1
    4792:	4651      	mov	r1, sl
    4794:	0c09      	lsrs	r1, r1, #16
    4796:	468b      	mov	fp, r1
    4798:	437b      	muls	r3, r7
    479a:	18d2      	adds	r2, r2, r3
    479c:	445a      	add	r2, fp
    479e:	4293      	cmp	r3, r2
    47a0:	d903      	bls.n	47aa <__aeabi_dmul+0x2c6>
    47a2:	2380      	movs	r3, #128	; 0x80
    47a4:	025b      	lsls	r3, r3, #9
    47a6:	469b      	mov	fp, r3
    47a8:	44d9      	add	r9, fp
    47aa:	4651      	mov	r1, sl
    47ac:	0409      	lsls	r1, r1, #16
    47ae:	0c09      	lsrs	r1, r1, #16
    47b0:	468a      	mov	sl, r1
    47b2:	4641      	mov	r1, r8
    47b4:	4361      	muls	r1, r4
    47b6:	437c      	muls	r4, r7
    47b8:	0c13      	lsrs	r3, r2, #16
    47ba:	0412      	lsls	r2, r2, #16
    47bc:	444b      	add	r3, r9
    47be:	4452      	add	r2, sl
    47c0:	46a1      	mov	r9, r4
    47c2:	468a      	mov	sl, r1
    47c4:	003c      	movs	r4, r7
    47c6:	4641      	mov	r1, r8
    47c8:	436c      	muls	r4, r5
    47ca:	434d      	muls	r5, r1
    47cc:	4651      	mov	r1, sl
    47ce:	444d      	add	r5, r9
    47d0:	0c0f      	lsrs	r7, r1, #16
    47d2:	197d      	adds	r5, r7, r5
    47d4:	45a9      	cmp	r9, r5
    47d6:	d903      	bls.n	47e0 <__aeabi_dmul+0x2fc>
    47d8:	2180      	movs	r1, #128	; 0x80
    47da:	0249      	lsls	r1, r1, #9
    47dc:	4688      	mov	r8, r1
    47de:	4444      	add	r4, r8
    47e0:	9f04      	ldr	r7, [sp, #16]
    47e2:	9903      	ldr	r1, [sp, #12]
    47e4:	46b8      	mov	r8, r7
    47e6:	4441      	add	r1, r8
    47e8:	468b      	mov	fp, r1
    47ea:	4583      	cmp	fp, r0
    47ec:	4180      	sbcs	r0, r0
    47ee:	4241      	negs	r1, r0
    47f0:	4688      	mov	r8, r1
    47f2:	4651      	mov	r1, sl
    47f4:	0408      	lsls	r0, r1, #16
    47f6:	042f      	lsls	r7, r5, #16
    47f8:	0c00      	lsrs	r0, r0, #16
    47fa:	183f      	adds	r7, r7, r0
    47fc:	4658      	mov	r0, fp
    47fe:	9902      	ldr	r1, [sp, #8]
    4800:	1810      	adds	r0, r2, r0
    4802:	4689      	mov	r9, r1
    4804:	4290      	cmp	r0, r2
    4806:	4192      	sbcs	r2, r2
    4808:	444f      	add	r7, r9
    480a:	46ba      	mov	sl, r7
    480c:	4252      	negs	r2, r2
    480e:	4699      	mov	r9, r3
    4810:	4693      	mov	fp, r2
    4812:	44c2      	add	sl, r8
    4814:	44d1      	add	r9, sl
    4816:	44cb      	add	fp, r9
    4818:	428f      	cmp	r7, r1
    481a:	41bf      	sbcs	r7, r7
    481c:	45c2      	cmp	sl, r8
    481e:	4189      	sbcs	r1, r1
    4820:	4599      	cmp	r9, r3
    4822:	419b      	sbcs	r3, r3
    4824:	4593      	cmp	fp, r2
    4826:	4192      	sbcs	r2, r2
    4828:	427f      	negs	r7, r7
    482a:	4249      	negs	r1, r1
    482c:	0c2d      	lsrs	r5, r5, #16
    482e:	4252      	negs	r2, r2
    4830:	430f      	orrs	r7, r1
    4832:	425b      	negs	r3, r3
    4834:	4313      	orrs	r3, r2
    4836:	197f      	adds	r7, r7, r5
    4838:	18ff      	adds	r7, r7, r3
    483a:	465b      	mov	r3, fp
    483c:	193c      	adds	r4, r7, r4
    483e:	0ddb      	lsrs	r3, r3, #23
    4840:	9a05      	ldr	r2, [sp, #20]
    4842:	0264      	lsls	r4, r4, #9
    4844:	431c      	orrs	r4, r3
    4846:	0243      	lsls	r3, r0, #9
    4848:	4313      	orrs	r3, r2
    484a:	1e5d      	subs	r5, r3, #1
    484c:	41ab      	sbcs	r3, r5
    484e:	465a      	mov	r2, fp
    4850:	0dc0      	lsrs	r0, r0, #23
    4852:	4303      	orrs	r3, r0
    4854:	0252      	lsls	r2, r2, #9
    4856:	4313      	orrs	r3, r2
    4858:	01e2      	lsls	r2, r4, #7
    485a:	d556      	bpl.n	490a <__aeabi_dmul+0x426>
    485c:	2001      	movs	r0, #1
    485e:	085a      	lsrs	r2, r3, #1
    4860:	4003      	ands	r3, r0
    4862:	4313      	orrs	r3, r2
    4864:	07e2      	lsls	r2, r4, #31
    4866:	4313      	orrs	r3, r2
    4868:	0864      	lsrs	r4, r4, #1
    486a:	485a      	ldr	r0, [pc, #360]	; (49d4 <__aeabi_dmul+0x4f0>)
    486c:	4460      	add	r0, ip
    486e:	2800      	cmp	r0, #0
    4870:	dd4d      	ble.n	490e <__aeabi_dmul+0x42a>
    4872:	075a      	lsls	r2, r3, #29
    4874:	d009      	beq.n	488a <__aeabi_dmul+0x3a6>
    4876:	220f      	movs	r2, #15
    4878:	401a      	ands	r2, r3
    487a:	2a04      	cmp	r2, #4
    487c:	d005      	beq.n	488a <__aeabi_dmul+0x3a6>
    487e:	1d1a      	adds	r2, r3, #4
    4880:	429a      	cmp	r2, r3
    4882:	419b      	sbcs	r3, r3
    4884:	425b      	negs	r3, r3
    4886:	18e4      	adds	r4, r4, r3
    4888:	0013      	movs	r3, r2
    488a:	01e2      	lsls	r2, r4, #7
    488c:	d504      	bpl.n	4898 <__aeabi_dmul+0x3b4>
    488e:	2080      	movs	r0, #128	; 0x80
    4890:	4a51      	ldr	r2, [pc, #324]	; (49d8 <__aeabi_dmul+0x4f4>)
    4892:	00c0      	lsls	r0, r0, #3
    4894:	4014      	ands	r4, r2
    4896:	4460      	add	r0, ip
    4898:	4a50      	ldr	r2, [pc, #320]	; (49dc <__aeabi_dmul+0x4f8>)
    489a:	4290      	cmp	r0, r2
    489c:	dd00      	ble.n	48a0 <__aeabi_dmul+0x3bc>
    489e:	e6e3      	b.n	4668 <__aeabi_dmul+0x184>
    48a0:	2501      	movs	r5, #1
    48a2:	08db      	lsrs	r3, r3, #3
    48a4:	0762      	lsls	r2, r4, #29
    48a6:	431a      	orrs	r2, r3
    48a8:	0264      	lsls	r4, r4, #9
    48aa:	9b01      	ldr	r3, [sp, #4]
    48ac:	4691      	mov	r9, r2
    48ae:	0b22      	lsrs	r2, r4, #12
    48b0:	0544      	lsls	r4, r0, #21
    48b2:	0d64      	lsrs	r4, r4, #21
    48b4:	401d      	ands	r5, r3
    48b6:	e67c      	b.n	45b2 <__aeabi_dmul+0xce>
    48b8:	2280      	movs	r2, #128	; 0x80
    48ba:	4659      	mov	r1, fp
    48bc:	0312      	lsls	r2, r2, #12
    48be:	4211      	tst	r1, r2
    48c0:	d008      	beq.n	48d4 <__aeabi_dmul+0x3f0>
    48c2:	4214      	tst	r4, r2
    48c4:	d106      	bne.n	48d4 <__aeabi_dmul+0x3f0>
    48c6:	4322      	orrs	r2, r4
    48c8:	0312      	lsls	r2, r2, #12
    48ca:	0b12      	lsrs	r2, r2, #12
    48cc:	4645      	mov	r5, r8
    48ce:	4699      	mov	r9, r3
    48d0:	4c43      	ldr	r4, [pc, #268]	; (49e0 <__aeabi_dmul+0x4fc>)
    48d2:	e66e      	b.n	45b2 <__aeabi_dmul+0xce>
    48d4:	465b      	mov	r3, fp
    48d6:	431a      	orrs	r2, r3
    48d8:	0312      	lsls	r2, r2, #12
    48da:	0b12      	lsrs	r2, r2, #12
    48dc:	4c40      	ldr	r4, [pc, #256]	; (49e0 <__aeabi_dmul+0x4fc>)
    48de:	e668      	b.n	45b2 <__aeabi_dmul+0xce>
    48e0:	0003      	movs	r3, r0
    48e2:	4654      	mov	r4, sl
    48e4:	3b28      	subs	r3, #40	; 0x28
    48e6:	409c      	lsls	r4, r3
    48e8:	2300      	movs	r3, #0
    48ea:	e6b9      	b.n	4660 <__aeabi_dmul+0x17c>
    48ec:	f000 fc3e 	bl	516c <__clzsi2>
    48f0:	3020      	adds	r0, #32
    48f2:	e6a6      	b.n	4642 <__aeabi_dmul+0x15e>
    48f4:	0003      	movs	r3, r0
    48f6:	3b28      	subs	r3, #40	; 0x28
    48f8:	409f      	lsls	r7, r3
    48fa:	2300      	movs	r3, #0
    48fc:	46bb      	mov	fp, r7
    48fe:	4699      	mov	r9, r3
    4900:	e68a      	b.n	4618 <__aeabi_dmul+0x134>
    4902:	f000 fc33 	bl	516c <__clzsi2>
    4906:	3020      	adds	r0, #32
    4908:	e674      	b.n	45f4 <__aeabi_dmul+0x110>
    490a:	46b4      	mov	ip, r6
    490c:	e7ad      	b.n	486a <__aeabi_dmul+0x386>
    490e:	2501      	movs	r5, #1
    4910:	1a2a      	subs	r2, r5, r0
    4912:	2a38      	cmp	r2, #56	; 0x38
    4914:	dd06      	ble.n	4924 <__aeabi_dmul+0x440>
    4916:	9b01      	ldr	r3, [sp, #4]
    4918:	2400      	movs	r4, #0
    491a:	401d      	ands	r5, r3
    491c:	2300      	movs	r3, #0
    491e:	2200      	movs	r2, #0
    4920:	4699      	mov	r9, r3
    4922:	e646      	b.n	45b2 <__aeabi_dmul+0xce>
    4924:	2a1f      	cmp	r2, #31
    4926:	dc21      	bgt.n	496c <__aeabi_dmul+0x488>
    4928:	2520      	movs	r5, #32
    492a:	0020      	movs	r0, r4
    492c:	1aad      	subs	r5, r5, r2
    492e:	001e      	movs	r6, r3
    4930:	40ab      	lsls	r3, r5
    4932:	40a8      	lsls	r0, r5
    4934:	40d6      	lsrs	r6, r2
    4936:	1e5d      	subs	r5, r3, #1
    4938:	41ab      	sbcs	r3, r5
    493a:	4330      	orrs	r0, r6
    493c:	4318      	orrs	r0, r3
    493e:	40d4      	lsrs	r4, r2
    4940:	0743      	lsls	r3, r0, #29
    4942:	d009      	beq.n	4958 <__aeabi_dmul+0x474>
    4944:	230f      	movs	r3, #15
    4946:	4003      	ands	r3, r0
    4948:	2b04      	cmp	r3, #4
    494a:	d005      	beq.n	4958 <__aeabi_dmul+0x474>
    494c:	0003      	movs	r3, r0
    494e:	1d18      	adds	r0, r3, #4
    4950:	4298      	cmp	r0, r3
    4952:	419b      	sbcs	r3, r3
    4954:	425b      	negs	r3, r3
    4956:	18e4      	adds	r4, r4, r3
    4958:	0223      	lsls	r3, r4, #8
    495a:	d521      	bpl.n	49a0 <__aeabi_dmul+0x4bc>
    495c:	2501      	movs	r5, #1
    495e:	9b01      	ldr	r3, [sp, #4]
    4960:	2401      	movs	r4, #1
    4962:	401d      	ands	r5, r3
    4964:	2300      	movs	r3, #0
    4966:	2200      	movs	r2, #0
    4968:	4699      	mov	r9, r3
    496a:	e622      	b.n	45b2 <__aeabi_dmul+0xce>
    496c:	251f      	movs	r5, #31
    496e:	0021      	movs	r1, r4
    4970:	426d      	negs	r5, r5
    4972:	1a28      	subs	r0, r5, r0
    4974:	40c1      	lsrs	r1, r0
    4976:	0008      	movs	r0, r1
    4978:	2a20      	cmp	r2, #32
    497a:	d01d      	beq.n	49b8 <__aeabi_dmul+0x4d4>
    497c:	355f      	adds	r5, #95	; 0x5f
    497e:	1aaa      	subs	r2, r5, r2
    4980:	4094      	lsls	r4, r2
    4982:	4323      	orrs	r3, r4
    4984:	1e5c      	subs	r4, r3, #1
    4986:	41a3      	sbcs	r3, r4
    4988:	2507      	movs	r5, #7
    498a:	4303      	orrs	r3, r0
    498c:	401d      	ands	r5, r3
    498e:	2200      	movs	r2, #0
    4990:	2d00      	cmp	r5, #0
    4992:	d009      	beq.n	49a8 <__aeabi_dmul+0x4c4>
    4994:	220f      	movs	r2, #15
    4996:	2400      	movs	r4, #0
    4998:	401a      	ands	r2, r3
    499a:	0018      	movs	r0, r3
    499c:	2a04      	cmp	r2, #4
    499e:	d1d6      	bne.n	494e <__aeabi_dmul+0x46a>
    49a0:	0003      	movs	r3, r0
    49a2:	0765      	lsls	r5, r4, #29
    49a4:	0264      	lsls	r4, r4, #9
    49a6:	0b22      	lsrs	r2, r4, #12
    49a8:	08db      	lsrs	r3, r3, #3
    49aa:	432b      	orrs	r3, r5
    49ac:	2501      	movs	r5, #1
    49ae:	4699      	mov	r9, r3
    49b0:	9b01      	ldr	r3, [sp, #4]
    49b2:	2400      	movs	r4, #0
    49b4:	401d      	ands	r5, r3
    49b6:	e5fc      	b.n	45b2 <__aeabi_dmul+0xce>
    49b8:	2400      	movs	r4, #0
    49ba:	e7e2      	b.n	4982 <__aeabi_dmul+0x49e>
    49bc:	2280      	movs	r2, #128	; 0x80
    49be:	2501      	movs	r5, #1
    49c0:	0312      	lsls	r2, r2, #12
    49c2:	4322      	orrs	r2, r4
    49c4:	9901      	ldr	r1, [sp, #4]
    49c6:	0312      	lsls	r2, r2, #12
    49c8:	0b12      	lsrs	r2, r2, #12
    49ca:	400d      	ands	r5, r1
    49cc:	4699      	mov	r9, r3
    49ce:	4c04      	ldr	r4, [pc, #16]	; (49e0 <__aeabi_dmul+0x4fc>)
    49d0:	e5ef      	b.n	45b2 <__aeabi_dmul+0xce>
    49d2:	46c0      	nop			; (mov r8, r8)
    49d4:	000003ff 	.word	0x000003ff
    49d8:	feffffff 	.word	0xfeffffff
    49dc:	000007fe 	.word	0x000007fe
    49e0:	000007ff 	.word	0x000007ff

000049e4 <__aeabi_dsub>:
    49e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    49e6:	4646      	mov	r6, r8
    49e8:	46d6      	mov	lr, sl
    49ea:	464f      	mov	r7, r9
    49ec:	030c      	lsls	r4, r1, #12
    49ee:	b5c0      	push	{r6, r7, lr}
    49f0:	0fcd      	lsrs	r5, r1, #31
    49f2:	004e      	lsls	r6, r1, #1
    49f4:	0a61      	lsrs	r1, r4, #9
    49f6:	0f44      	lsrs	r4, r0, #29
    49f8:	430c      	orrs	r4, r1
    49fa:	00c1      	lsls	r1, r0, #3
    49fc:	0058      	lsls	r0, r3, #1
    49fe:	0d40      	lsrs	r0, r0, #21
    4a00:	4684      	mov	ip, r0
    4a02:	468a      	mov	sl, r1
    4a04:	000f      	movs	r7, r1
    4a06:	0319      	lsls	r1, r3, #12
    4a08:	0f50      	lsrs	r0, r2, #29
    4a0a:	0a49      	lsrs	r1, r1, #9
    4a0c:	4301      	orrs	r1, r0
    4a0e:	48c6      	ldr	r0, [pc, #792]	; (4d28 <__aeabi_dsub+0x344>)
    4a10:	0d76      	lsrs	r6, r6, #21
    4a12:	46a8      	mov	r8, r5
    4a14:	0fdb      	lsrs	r3, r3, #31
    4a16:	00d2      	lsls	r2, r2, #3
    4a18:	4584      	cmp	ip, r0
    4a1a:	d100      	bne.n	4a1e <__aeabi_dsub+0x3a>
    4a1c:	e0d8      	b.n	4bd0 <__aeabi_dsub+0x1ec>
    4a1e:	2001      	movs	r0, #1
    4a20:	4043      	eors	r3, r0
    4a22:	42ab      	cmp	r3, r5
    4a24:	d100      	bne.n	4a28 <__aeabi_dsub+0x44>
    4a26:	e0a6      	b.n	4b76 <__aeabi_dsub+0x192>
    4a28:	4660      	mov	r0, ip
    4a2a:	1a35      	subs	r5, r6, r0
    4a2c:	2d00      	cmp	r5, #0
    4a2e:	dc00      	bgt.n	4a32 <__aeabi_dsub+0x4e>
    4a30:	e105      	b.n	4c3e <__aeabi_dsub+0x25a>
    4a32:	2800      	cmp	r0, #0
    4a34:	d110      	bne.n	4a58 <__aeabi_dsub+0x74>
    4a36:	000b      	movs	r3, r1
    4a38:	4313      	orrs	r3, r2
    4a3a:	d100      	bne.n	4a3e <__aeabi_dsub+0x5a>
    4a3c:	e0d7      	b.n	4bee <__aeabi_dsub+0x20a>
    4a3e:	1e6b      	subs	r3, r5, #1
    4a40:	2b00      	cmp	r3, #0
    4a42:	d000      	beq.n	4a46 <__aeabi_dsub+0x62>
    4a44:	e14b      	b.n	4cde <__aeabi_dsub+0x2fa>
    4a46:	4653      	mov	r3, sl
    4a48:	1a9f      	subs	r7, r3, r2
    4a4a:	45ba      	cmp	sl, r7
    4a4c:	4180      	sbcs	r0, r0
    4a4e:	1a64      	subs	r4, r4, r1
    4a50:	4240      	negs	r0, r0
    4a52:	1a24      	subs	r4, r4, r0
    4a54:	2601      	movs	r6, #1
    4a56:	e01e      	b.n	4a96 <__aeabi_dsub+0xb2>
    4a58:	4bb3      	ldr	r3, [pc, #716]	; (4d28 <__aeabi_dsub+0x344>)
    4a5a:	429e      	cmp	r6, r3
    4a5c:	d048      	beq.n	4af0 <__aeabi_dsub+0x10c>
    4a5e:	2380      	movs	r3, #128	; 0x80
    4a60:	041b      	lsls	r3, r3, #16
    4a62:	4319      	orrs	r1, r3
    4a64:	2d38      	cmp	r5, #56	; 0x38
    4a66:	dd00      	ble.n	4a6a <__aeabi_dsub+0x86>
    4a68:	e119      	b.n	4c9e <__aeabi_dsub+0x2ba>
    4a6a:	2d1f      	cmp	r5, #31
    4a6c:	dd00      	ble.n	4a70 <__aeabi_dsub+0x8c>
    4a6e:	e14c      	b.n	4d0a <__aeabi_dsub+0x326>
    4a70:	2320      	movs	r3, #32
    4a72:	000f      	movs	r7, r1
    4a74:	1b5b      	subs	r3, r3, r5
    4a76:	0010      	movs	r0, r2
    4a78:	409a      	lsls	r2, r3
    4a7a:	409f      	lsls	r7, r3
    4a7c:	40e8      	lsrs	r0, r5
    4a7e:	1e53      	subs	r3, r2, #1
    4a80:	419a      	sbcs	r2, r3
    4a82:	40e9      	lsrs	r1, r5
    4a84:	4307      	orrs	r7, r0
    4a86:	4317      	orrs	r7, r2
    4a88:	4653      	mov	r3, sl
    4a8a:	1bdf      	subs	r7, r3, r7
    4a8c:	1a61      	subs	r1, r4, r1
    4a8e:	45ba      	cmp	sl, r7
    4a90:	41a4      	sbcs	r4, r4
    4a92:	4264      	negs	r4, r4
    4a94:	1b0c      	subs	r4, r1, r4
    4a96:	0223      	lsls	r3, r4, #8
    4a98:	d400      	bmi.n	4a9c <__aeabi_dsub+0xb8>
    4a9a:	e0c5      	b.n	4c28 <__aeabi_dsub+0x244>
    4a9c:	0264      	lsls	r4, r4, #9
    4a9e:	0a65      	lsrs	r5, r4, #9
    4aa0:	2d00      	cmp	r5, #0
    4aa2:	d100      	bne.n	4aa6 <__aeabi_dsub+0xc2>
    4aa4:	e0f6      	b.n	4c94 <__aeabi_dsub+0x2b0>
    4aa6:	0028      	movs	r0, r5
    4aa8:	f000 fb60 	bl	516c <__clzsi2>
    4aac:	0003      	movs	r3, r0
    4aae:	3b08      	subs	r3, #8
    4ab0:	2b1f      	cmp	r3, #31
    4ab2:	dd00      	ble.n	4ab6 <__aeabi_dsub+0xd2>
    4ab4:	e0e9      	b.n	4c8a <__aeabi_dsub+0x2a6>
    4ab6:	2220      	movs	r2, #32
    4ab8:	003c      	movs	r4, r7
    4aba:	1ad2      	subs	r2, r2, r3
    4abc:	409d      	lsls	r5, r3
    4abe:	40d4      	lsrs	r4, r2
    4ac0:	409f      	lsls	r7, r3
    4ac2:	4325      	orrs	r5, r4
    4ac4:	429e      	cmp	r6, r3
    4ac6:	dd00      	ble.n	4aca <__aeabi_dsub+0xe6>
    4ac8:	e0db      	b.n	4c82 <__aeabi_dsub+0x29e>
    4aca:	1b9e      	subs	r6, r3, r6
    4acc:	1c73      	adds	r3, r6, #1
    4ace:	2b1f      	cmp	r3, #31
    4ad0:	dd00      	ble.n	4ad4 <__aeabi_dsub+0xf0>
    4ad2:	e10a      	b.n	4cea <__aeabi_dsub+0x306>
    4ad4:	2220      	movs	r2, #32
    4ad6:	0038      	movs	r0, r7
    4ad8:	1ad2      	subs	r2, r2, r3
    4ada:	0029      	movs	r1, r5
    4adc:	4097      	lsls	r7, r2
    4ade:	002c      	movs	r4, r5
    4ae0:	4091      	lsls	r1, r2
    4ae2:	40d8      	lsrs	r0, r3
    4ae4:	1e7a      	subs	r2, r7, #1
    4ae6:	4197      	sbcs	r7, r2
    4ae8:	40dc      	lsrs	r4, r3
    4aea:	2600      	movs	r6, #0
    4aec:	4301      	orrs	r1, r0
    4aee:	430f      	orrs	r7, r1
    4af0:	077b      	lsls	r3, r7, #29
    4af2:	d009      	beq.n	4b08 <__aeabi_dsub+0x124>
    4af4:	230f      	movs	r3, #15
    4af6:	403b      	ands	r3, r7
    4af8:	2b04      	cmp	r3, #4
    4afa:	d005      	beq.n	4b08 <__aeabi_dsub+0x124>
    4afc:	1d3b      	adds	r3, r7, #4
    4afe:	42bb      	cmp	r3, r7
    4b00:	41bf      	sbcs	r7, r7
    4b02:	427f      	negs	r7, r7
    4b04:	19e4      	adds	r4, r4, r7
    4b06:	001f      	movs	r7, r3
    4b08:	0223      	lsls	r3, r4, #8
    4b0a:	d525      	bpl.n	4b58 <__aeabi_dsub+0x174>
    4b0c:	4b86      	ldr	r3, [pc, #536]	; (4d28 <__aeabi_dsub+0x344>)
    4b0e:	3601      	adds	r6, #1
    4b10:	429e      	cmp	r6, r3
    4b12:	d100      	bne.n	4b16 <__aeabi_dsub+0x132>
    4b14:	e0af      	b.n	4c76 <__aeabi_dsub+0x292>
    4b16:	4b85      	ldr	r3, [pc, #532]	; (4d2c <__aeabi_dsub+0x348>)
    4b18:	2501      	movs	r5, #1
    4b1a:	401c      	ands	r4, r3
    4b1c:	4643      	mov	r3, r8
    4b1e:	0762      	lsls	r2, r4, #29
    4b20:	08ff      	lsrs	r7, r7, #3
    4b22:	0264      	lsls	r4, r4, #9
    4b24:	0576      	lsls	r6, r6, #21
    4b26:	4317      	orrs	r7, r2
    4b28:	0b24      	lsrs	r4, r4, #12
    4b2a:	0d76      	lsrs	r6, r6, #21
    4b2c:	401d      	ands	r5, r3
    4b2e:	2100      	movs	r1, #0
    4b30:	0324      	lsls	r4, r4, #12
    4b32:	0b23      	lsrs	r3, r4, #12
    4b34:	0d0c      	lsrs	r4, r1, #20
    4b36:	4a7e      	ldr	r2, [pc, #504]	; (4d30 <__aeabi_dsub+0x34c>)
    4b38:	0524      	lsls	r4, r4, #20
    4b3a:	431c      	orrs	r4, r3
    4b3c:	4014      	ands	r4, r2
    4b3e:	0533      	lsls	r3, r6, #20
    4b40:	4323      	orrs	r3, r4
    4b42:	005b      	lsls	r3, r3, #1
    4b44:	07ed      	lsls	r5, r5, #31
    4b46:	085b      	lsrs	r3, r3, #1
    4b48:	432b      	orrs	r3, r5
    4b4a:	0038      	movs	r0, r7
    4b4c:	0019      	movs	r1, r3
    4b4e:	bc1c      	pop	{r2, r3, r4}
    4b50:	4690      	mov	r8, r2
    4b52:	4699      	mov	r9, r3
    4b54:	46a2      	mov	sl, r4
    4b56:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4b58:	2501      	movs	r5, #1
    4b5a:	4643      	mov	r3, r8
    4b5c:	0762      	lsls	r2, r4, #29
    4b5e:	08ff      	lsrs	r7, r7, #3
    4b60:	4317      	orrs	r7, r2
    4b62:	08e4      	lsrs	r4, r4, #3
    4b64:	401d      	ands	r5, r3
    4b66:	4b70      	ldr	r3, [pc, #448]	; (4d28 <__aeabi_dsub+0x344>)
    4b68:	429e      	cmp	r6, r3
    4b6a:	d036      	beq.n	4bda <__aeabi_dsub+0x1f6>
    4b6c:	0324      	lsls	r4, r4, #12
    4b6e:	0576      	lsls	r6, r6, #21
    4b70:	0b24      	lsrs	r4, r4, #12
    4b72:	0d76      	lsrs	r6, r6, #21
    4b74:	e7db      	b.n	4b2e <__aeabi_dsub+0x14a>
    4b76:	4663      	mov	r3, ip
    4b78:	1af3      	subs	r3, r6, r3
    4b7a:	2b00      	cmp	r3, #0
    4b7c:	dc00      	bgt.n	4b80 <__aeabi_dsub+0x19c>
    4b7e:	e094      	b.n	4caa <__aeabi_dsub+0x2c6>
    4b80:	4660      	mov	r0, ip
    4b82:	2800      	cmp	r0, #0
    4b84:	d035      	beq.n	4bf2 <__aeabi_dsub+0x20e>
    4b86:	4868      	ldr	r0, [pc, #416]	; (4d28 <__aeabi_dsub+0x344>)
    4b88:	4286      	cmp	r6, r0
    4b8a:	d0b1      	beq.n	4af0 <__aeabi_dsub+0x10c>
    4b8c:	2780      	movs	r7, #128	; 0x80
    4b8e:	043f      	lsls	r7, r7, #16
    4b90:	4339      	orrs	r1, r7
    4b92:	2b38      	cmp	r3, #56	; 0x38
    4b94:	dc00      	bgt.n	4b98 <__aeabi_dsub+0x1b4>
    4b96:	e0fd      	b.n	4d94 <__aeabi_dsub+0x3b0>
    4b98:	430a      	orrs	r2, r1
    4b9a:	0017      	movs	r7, r2
    4b9c:	2100      	movs	r1, #0
    4b9e:	1e7a      	subs	r2, r7, #1
    4ba0:	4197      	sbcs	r7, r2
    4ba2:	4457      	add	r7, sl
    4ba4:	4557      	cmp	r7, sl
    4ba6:	4180      	sbcs	r0, r0
    4ba8:	1909      	adds	r1, r1, r4
    4baa:	4244      	negs	r4, r0
    4bac:	190c      	adds	r4, r1, r4
    4bae:	0223      	lsls	r3, r4, #8
    4bb0:	d53a      	bpl.n	4c28 <__aeabi_dsub+0x244>
    4bb2:	4b5d      	ldr	r3, [pc, #372]	; (4d28 <__aeabi_dsub+0x344>)
    4bb4:	3601      	adds	r6, #1
    4bb6:	429e      	cmp	r6, r3
    4bb8:	d100      	bne.n	4bbc <__aeabi_dsub+0x1d8>
    4bba:	e14b      	b.n	4e54 <__aeabi_dsub+0x470>
    4bbc:	2201      	movs	r2, #1
    4bbe:	4b5b      	ldr	r3, [pc, #364]	; (4d2c <__aeabi_dsub+0x348>)
    4bc0:	401c      	ands	r4, r3
    4bc2:	087b      	lsrs	r3, r7, #1
    4bc4:	4017      	ands	r7, r2
    4bc6:	431f      	orrs	r7, r3
    4bc8:	07e2      	lsls	r2, r4, #31
    4bca:	4317      	orrs	r7, r2
    4bcc:	0864      	lsrs	r4, r4, #1
    4bce:	e78f      	b.n	4af0 <__aeabi_dsub+0x10c>
    4bd0:	0008      	movs	r0, r1
    4bd2:	4310      	orrs	r0, r2
    4bd4:	d000      	beq.n	4bd8 <__aeabi_dsub+0x1f4>
    4bd6:	e724      	b.n	4a22 <__aeabi_dsub+0x3e>
    4bd8:	e721      	b.n	4a1e <__aeabi_dsub+0x3a>
    4bda:	0023      	movs	r3, r4
    4bdc:	433b      	orrs	r3, r7
    4bde:	d100      	bne.n	4be2 <__aeabi_dsub+0x1fe>
    4be0:	e1b9      	b.n	4f56 <__aeabi_dsub+0x572>
    4be2:	2280      	movs	r2, #128	; 0x80
    4be4:	0312      	lsls	r2, r2, #12
    4be6:	4314      	orrs	r4, r2
    4be8:	0324      	lsls	r4, r4, #12
    4bea:	0b24      	lsrs	r4, r4, #12
    4bec:	e79f      	b.n	4b2e <__aeabi_dsub+0x14a>
    4bee:	002e      	movs	r6, r5
    4bf0:	e77e      	b.n	4af0 <__aeabi_dsub+0x10c>
    4bf2:	0008      	movs	r0, r1
    4bf4:	4310      	orrs	r0, r2
    4bf6:	d100      	bne.n	4bfa <__aeabi_dsub+0x216>
    4bf8:	e0ca      	b.n	4d90 <__aeabi_dsub+0x3ac>
    4bfa:	1e58      	subs	r0, r3, #1
    4bfc:	4684      	mov	ip, r0
    4bfe:	2800      	cmp	r0, #0
    4c00:	d000      	beq.n	4c04 <__aeabi_dsub+0x220>
    4c02:	e0e7      	b.n	4dd4 <__aeabi_dsub+0x3f0>
    4c04:	4452      	add	r2, sl
    4c06:	4552      	cmp	r2, sl
    4c08:	4180      	sbcs	r0, r0
    4c0a:	1864      	adds	r4, r4, r1
    4c0c:	4240      	negs	r0, r0
    4c0e:	1824      	adds	r4, r4, r0
    4c10:	0017      	movs	r7, r2
    4c12:	2601      	movs	r6, #1
    4c14:	0223      	lsls	r3, r4, #8
    4c16:	d507      	bpl.n	4c28 <__aeabi_dsub+0x244>
    4c18:	2602      	movs	r6, #2
    4c1a:	e7cf      	b.n	4bbc <__aeabi_dsub+0x1d8>
    4c1c:	4664      	mov	r4, ip
    4c1e:	432c      	orrs	r4, r5
    4c20:	d100      	bne.n	4c24 <__aeabi_dsub+0x240>
    4c22:	e1b3      	b.n	4f8c <__aeabi_dsub+0x5a8>
    4c24:	002c      	movs	r4, r5
    4c26:	4667      	mov	r7, ip
    4c28:	077b      	lsls	r3, r7, #29
    4c2a:	d000      	beq.n	4c2e <__aeabi_dsub+0x24a>
    4c2c:	e762      	b.n	4af4 <__aeabi_dsub+0x110>
    4c2e:	0763      	lsls	r3, r4, #29
    4c30:	08ff      	lsrs	r7, r7, #3
    4c32:	431f      	orrs	r7, r3
    4c34:	2501      	movs	r5, #1
    4c36:	4643      	mov	r3, r8
    4c38:	08e4      	lsrs	r4, r4, #3
    4c3a:	401d      	ands	r5, r3
    4c3c:	e793      	b.n	4b66 <__aeabi_dsub+0x182>
    4c3e:	2d00      	cmp	r5, #0
    4c40:	d178      	bne.n	4d34 <__aeabi_dsub+0x350>
    4c42:	1c75      	adds	r5, r6, #1
    4c44:	056d      	lsls	r5, r5, #21
    4c46:	0d6d      	lsrs	r5, r5, #21
    4c48:	2d01      	cmp	r5, #1
    4c4a:	dc00      	bgt.n	4c4e <__aeabi_dsub+0x26a>
    4c4c:	e0f2      	b.n	4e34 <__aeabi_dsub+0x450>
    4c4e:	4650      	mov	r0, sl
    4c50:	1a80      	subs	r0, r0, r2
    4c52:	4582      	cmp	sl, r0
    4c54:	41bf      	sbcs	r7, r7
    4c56:	1a65      	subs	r5, r4, r1
    4c58:	427f      	negs	r7, r7
    4c5a:	1bed      	subs	r5, r5, r7
    4c5c:	4684      	mov	ip, r0
    4c5e:	0228      	lsls	r0, r5, #8
    4c60:	d400      	bmi.n	4c64 <__aeabi_dsub+0x280>
    4c62:	e08c      	b.n	4d7e <__aeabi_dsub+0x39a>
    4c64:	4650      	mov	r0, sl
    4c66:	1a17      	subs	r7, r2, r0
    4c68:	42ba      	cmp	r2, r7
    4c6a:	4192      	sbcs	r2, r2
    4c6c:	1b0c      	subs	r4, r1, r4
    4c6e:	4255      	negs	r5, r2
    4c70:	1b65      	subs	r5, r4, r5
    4c72:	4698      	mov	r8, r3
    4c74:	e714      	b.n	4aa0 <__aeabi_dsub+0xbc>
    4c76:	2501      	movs	r5, #1
    4c78:	4643      	mov	r3, r8
    4c7a:	2400      	movs	r4, #0
    4c7c:	401d      	ands	r5, r3
    4c7e:	2700      	movs	r7, #0
    4c80:	e755      	b.n	4b2e <__aeabi_dsub+0x14a>
    4c82:	4c2a      	ldr	r4, [pc, #168]	; (4d2c <__aeabi_dsub+0x348>)
    4c84:	1af6      	subs	r6, r6, r3
    4c86:	402c      	ands	r4, r5
    4c88:	e732      	b.n	4af0 <__aeabi_dsub+0x10c>
    4c8a:	003d      	movs	r5, r7
    4c8c:	3828      	subs	r0, #40	; 0x28
    4c8e:	4085      	lsls	r5, r0
    4c90:	2700      	movs	r7, #0
    4c92:	e717      	b.n	4ac4 <__aeabi_dsub+0xe0>
    4c94:	0038      	movs	r0, r7
    4c96:	f000 fa69 	bl	516c <__clzsi2>
    4c9a:	3020      	adds	r0, #32
    4c9c:	e706      	b.n	4aac <__aeabi_dsub+0xc8>
    4c9e:	430a      	orrs	r2, r1
    4ca0:	0017      	movs	r7, r2
    4ca2:	2100      	movs	r1, #0
    4ca4:	1e7a      	subs	r2, r7, #1
    4ca6:	4197      	sbcs	r7, r2
    4ca8:	e6ee      	b.n	4a88 <__aeabi_dsub+0xa4>
    4caa:	2b00      	cmp	r3, #0
    4cac:	d000      	beq.n	4cb0 <__aeabi_dsub+0x2cc>
    4cae:	e0e5      	b.n	4e7c <__aeabi_dsub+0x498>
    4cb0:	1c73      	adds	r3, r6, #1
    4cb2:	469c      	mov	ip, r3
    4cb4:	055b      	lsls	r3, r3, #21
    4cb6:	0d5b      	lsrs	r3, r3, #21
    4cb8:	2b01      	cmp	r3, #1
    4cba:	dc00      	bgt.n	4cbe <__aeabi_dsub+0x2da>
    4cbc:	e09f      	b.n	4dfe <__aeabi_dsub+0x41a>
    4cbe:	4b1a      	ldr	r3, [pc, #104]	; (4d28 <__aeabi_dsub+0x344>)
    4cc0:	459c      	cmp	ip, r3
    4cc2:	d100      	bne.n	4cc6 <__aeabi_dsub+0x2e2>
    4cc4:	e0c5      	b.n	4e52 <__aeabi_dsub+0x46e>
    4cc6:	4452      	add	r2, sl
    4cc8:	4552      	cmp	r2, sl
    4cca:	4180      	sbcs	r0, r0
    4ccc:	1864      	adds	r4, r4, r1
    4cce:	4240      	negs	r0, r0
    4cd0:	1824      	adds	r4, r4, r0
    4cd2:	07e7      	lsls	r7, r4, #31
    4cd4:	0852      	lsrs	r2, r2, #1
    4cd6:	4317      	orrs	r7, r2
    4cd8:	0864      	lsrs	r4, r4, #1
    4cda:	4666      	mov	r6, ip
    4cdc:	e708      	b.n	4af0 <__aeabi_dsub+0x10c>
    4cde:	4812      	ldr	r0, [pc, #72]	; (4d28 <__aeabi_dsub+0x344>)
    4ce0:	4285      	cmp	r5, r0
    4ce2:	d100      	bne.n	4ce6 <__aeabi_dsub+0x302>
    4ce4:	e085      	b.n	4df2 <__aeabi_dsub+0x40e>
    4ce6:	001d      	movs	r5, r3
    4ce8:	e6bc      	b.n	4a64 <__aeabi_dsub+0x80>
    4cea:	0029      	movs	r1, r5
    4cec:	3e1f      	subs	r6, #31
    4cee:	40f1      	lsrs	r1, r6
    4cf0:	2b20      	cmp	r3, #32
    4cf2:	d100      	bne.n	4cf6 <__aeabi_dsub+0x312>
    4cf4:	e07f      	b.n	4df6 <__aeabi_dsub+0x412>
    4cf6:	2240      	movs	r2, #64	; 0x40
    4cf8:	1ad3      	subs	r3, r2, r3
    4cfa:	409d      	lsls	r5, r3
    4cfc:	432f      	orrs	r7, r5
    4cfe:	1e7d      	subs	r5, r7, #1
    4d00:	41af      	sbcs	r7, r5
    4d02:	2400      	movs	r4, #0
    4d04:	430f      	orrs	r7, r1
    4d06:	2600      	movs	r6, #0
    4d08:	e78e      	b.n	4c28 <__aeabi_dsub+0x244>
    4d0a:	002b      	movs	r3, r5
    4d0c:	000f      	movs	r7, r1
    4d0e:	3b20      	subs	r3, #32
    4d10:	40df      	lsrs	r7, r3
    4d12:	2d20      	cmp	r5, #32
    4d14:	d071      	beq.n	4dfa <__aeabi_dsub+0x416>
    4d16:	2340      	movs	r3, #64	; 0x40
    4d18:	1b5d      	subs	r5, r3, r5
    4d1a:	40a9      	lsls	r1, r5
    4d1c:	430a      	orrs	r2, r1
    4d1e:	1e51      	subs	r1, r2, #1
    4d20:	418a      	sbcs	r2, r1
    4d22:	2100      	movs	r1, #0
    4d24:	4317      	orrs	r7, r2
    4d26:	e6af      	b.n	4a88 <__aeabi_dsub+0xa4>
    4d28:	000007ff 	.word	0x000007ff
    4d2c:	ff7fffff 	.word	0xff7fffff
    4d30:	800fffff 	.word	0x800fffff
    4d34:	2e00      	cmp	r6, #0
    4d36:	d03e      	beq.n	4db6 <__aeabi_dsub+0x3d2>
    4d38:	4eb3      	ldr	r6, [pc, #716]	; (5008 <__aeabi_dsub+0x624>)
    4d3a:	45b4      	cmp	ip, r6
    4d3c:	d045      	beq.n	4dca <__aeabi_dsub+0x3e6>
    4d3e:	2680      	movs	r6, #128	; 0x80
    4d40:	0436      	lsls	r6, r6, #16
    4d42:	426d      	negs	r5, r5
    4d44:	4334      	orrs	r4, r6
    4d46:	2d38      	cmp	r5, #56	; 0x38
    4d48:	dd00      	ble.n	4d4c <__aeabi_dsub+0x368>
    4d4a:	e0a8      	b.n	4e9e <__aeabi_dsub+0x4ba>
    4d4c:	2d1f      	cmp	r5, #31
    4d4e:	dd00      	ble.n	4d52 <__aeabi_dsub+0x36e>
    4d50:	e11f      	b.n	4f92 <__aeabi_dsub+0x5ae>
    4d52:	2620      	movs	r6, #32
    4d54:	0027      	movs	r7, r4
    4d56:	4650      	mov	r0, sl
    4d58:	1b76      	subs	r6, r6, r5
    4d5a:	40b7      	lsls	r7, r6
    4d5c:	40e8      	lsrs	r0, r5
    4d5e:	4307      	orrs	r7, r0
    4d60:	4650      	mov	r0, sl
    4d62:	40b0      	lsls	r0, r6
    4d64:	1e46      	subs	r6, r0, #1
    4d66:	41b0      	sbcs	r0, r6
    4d68:	40ec      	lsrs	r4, r5
    4d6a:	4338      	orrs	r0, r7
    4d6c:	1a17      	subs	r7, r2, r0
    4d6e:	42ba      	cmp	r2, r7
    4d70:	4192      	sbcs	r2, r2
    4d72:	1b0c      	subs	r4, r1, r4
    4d74:	4252      	negs	r2, r2
    4d76:	1aa4      	subs	r4, r4, r2
    4d78:	4666      	mov	r6, ip
    4d7a:	4698      	mov	r8, r3
    4d7c:	e68b      	b.n	4a96 <__aeabi_dsub+0xb2>
    4d7e:	4664      	mov	r4, ip
    4d80:	4667      	mov	r7, ip
    4d82:	432c      	orrs	r4, r5
    4d84:	d000      	beq.n	4d88 <__aeabi_dsub+0x3a4>
    4d86:	e68b      	b.n	4aa0 <__aeabi_dsub+0xbc>
    4d88:	2500      	movs	r5, #0
    4d8a:	2600      	movs	r6, #0
    4d8c:	2700      	movs	r7, #0
    4d8e:	e6ea      	b.n	4b66 <__aeabi_dsub+0x182>
    4d90:	001e      	movs	r6, r3
    4d92:	e6ad      	b.n	4af0 <__aeabi_dsub+0x10c>
    4d94:	2b1f      	cmp	r3, #31
    4d96:	dc60      	bgt.n	4e5a <__aeabi_dsub+0x476>
    4d98:	2720      	movs	r7, #32
    4d9a:	1af8      	subs	r0, r7, r3
    4d9c:	000f      	movs	r7, r1
    4d9e:	4684      	mov	ip, r0
    4da0:	4087      	lsls	r7, r0
    4da2:	0010      	movs	r0, r2
    4da4:	40d8      	lsrs	r0, r3
    4da6:	4307      	orrs	r7, r0
    4da8:	4660      	mov	r0, ip
    4daa:	4082      	lsls	r2, r0
    4dac:	1e50      	subs	r0, r2, #1
    4dae:	4182      	sbcs	r2, r0
    4db0:	40d9      	lsrs	r1, r3
    4db2:	4317      	orrs	r7, r2
    4db4:	e6f5      	b.n	4ba2 <__aeabi_dsub+0x1be>
    4db6:	0026      	movs	r6, r4
    4db8:	4650      	mov	r0, sl
    4dba:	4306      	orrs	r6, r0
    4dbc:	d005      	beq.n	4dca <__aeabi_dsub+0x3e6>
    4dbe:	43ed      	mvns	r5, r5
    4dc0:	2d00      	cmp	r5, #0
    4dc2:	d0d3      	beq.n	4d6c <__aeabi_dsub+0x388>
    4dc4:	4e90      	ldr	r6, [pc, #576]	; (5008 <__aeabi_dsub+0x624>)
    4dc6:	45b4      	cmp	ip, r6
    4dc8:	d1bd      	bne.n	4d46 <__aeabi_dsub+0x362>
    4dca:	000c      	movs	r4, r1
    4dcc:	0017      	movs	r7, r2
    4dce:	4666      	mov	r6, ip
    4dd0:	4698      	mov	r8, r3
    4dd2:	e68d      	b.n	4af0 <__aeabi_dsub+0x10c>
    4dd4:	488c      	ldr	r0, [pc, #560]	; (5008 <__aeabi_dsub+0x624>)
    4dd6:	4283      	cmp	r3, r0
    4dd8:	d00b      	beq.n	4df2 <__aeabi_dsub+0x40e>
    4dda:	4663      	mov	r3, ip
    4ddc:	e6d9      	b.n	4b92 <__aeabi_dsub+0x1ae>
    4dde:	2d00      	cmp	r5, #0
    4de0:	d000      	beq.n	4de4 <__aeabi_dsub+0x400>
    4de2:	e096      	b.n	4f12 <__aeabi_dsub+0x52e>
    4de4:	0008      	movs	r0, r1
    4de6:	4310      	orrs	r0, r2
    4de8:	d100      	bne.n	4dec <__aeabi_dsub+0x408>
    4dea:	e0e2      	b.n	4fb2 <__aeabi_dsub+0x5ce>
    4dec:	000c      	movs	r4, r1
    4dee:	0017      	movs	r7, r2
    4df0:	4698      	mov	r8, r3
    4df2:	4e85      	ldr	r6, [pc, #532]	; (5008 <__aeabi_dsub+0x624>)
    4df4:	e67c      	b.n	4af0 <__aeabi_dsub+0x10c>
    4df6:	2500      	movs	r5, #0
    4df8:	e780      	b.n	4cfc <__aeabi_dsub+0x318>
    4dfa:	2100      	movs	r1, #0
    4dfc:	e78e      	b.n	4d1c <__aeabi_dsub+0x338>
    4dfe:	0023      	movs	r3, r4
    4e00:	4650      	mov	r0, sl
    4e02:	4303      	orrs	r3, r0
    4e04:	2e00      	cmp	r6, #0
    4e06:	d000      	beq.n	4e0a <__aeabi_dsub+0x426>
    4e08:	e0a8      	b.n	4f5c <__aeabi_dsub+0x578>
    4e0a:	2b00      	cmp	r3, #0
    4e0c:	d100      	bne.n	4e10 <__aeabi_dsub+0x42c>
    4e0e:	e0de      	b.n	4fce <__aeabi_dsub+0x5ea>
    4e10:	000b      	movs	r3, r1
    4e12:	4313      	orrs	r3, r2
    4e14:	d100      	bne.n	4e18 <__aeabi_dsub+0x434>
    4e16:	e66b      	b.n	4af0 <__aeabi_dsub+0x10c>
    4e18:	4452      	add	r2, sl
    4e1a:	4552      	cmp	r2, sl
    4e1c:	4180      	sbcs	r0, r0
    4e1e:	1864      	adds	r4, r4, r1
    4e20:	4240      	negs	r0, r0
    4e22:	1824      	adds	r4, r4, r0
    4e24:	0017      	movs	r7, r2
    4e26:	0223      	lsls	r3, r4, #8
    4e28:	d400      	bmi.n	4e2c <__aeabi_dsub+0x448>
    4e2a:	e6fd      	b.n	4c28 <__aeabi_dsub+0x244>
    4e2c:	4b77      	ldr	r3, [pc, #476]	; (500c <__aeabi_dsub+0x628>)
    4e2e:	4666      	mov	r6, ip
    4e30:	401c      	ands	r4, r3
    4e32:	e65d      	b.n	4af0 <__aeabi_dsub+0x10c>
    4e34:	0025      	movs	r5, r4
    4e36:	4650      	mov	r0, sl
    4e38:	4305      	orrs	r5, r0
    4e3a:	2e00      	cmp	r6, #0
    4e3c:	d1cf      	bne.n	4dde <__aeabi_dsub+0x3fa>
    4e3e:	2d00      	cmp	r5, #0
    4e40:	d14f      	bne.n	4ee2 <__aeabi_dsub+0x4fe>
    4e42:	000c      	movs	r4, r1
    4e44:	4314      	orrs	r4, r2
    4e46:	d100      	bne.n	4e4a <__aeabi_dsub+0x466>
    4e48:	e0a0      	b.n	4f8c <__aeabi_dsub+0x5a8>
    4e4a:	000c      	movs	r4, r1
    4e4c:	0017      	movs	r7, r2
    4e4e:	4698      	mov	r8, r3
    4e50:	e64e      	b.n	4af0 <__aeabi_dsub+0x10c>
    4e52:	4666      	mov	r6, ip
    4e54:	2400      	movs	r4, #0
    4e56:	2700      	movs	r7, #0
    4e58:	e685      	b.n	4b66 <__aeabi_dsub+0x182>
    4e5a:	001f      	movs	r7, r3
    4e5c:	0008      	movs	r0, r1
    4e5e:	3f20      	subs	r7, #32
    4e60:	40f8      	lsrs	r0, r7
    4e62:	0007      	movs	r7, r0
    4e64:	2b20      	cmp	r3, #32
    4e66:	d100      	bne.n	4e6a <__aeabi_dsub+0x486>
    4e68:	e08e      	b.n	4f88 <__aeabi_dsub+0x5a4>
    4e6a:	2040      	movs	r0, #64	; 0x40
    4e6c:	1ac3      	subs	r3, r0, r3
    4e6e:	4099      	lsls	r1, r3
    4e70:	430a      	orrs	r2, r1
    4e72:	1e51      	subs	r1, r2, #1
    4e74:	418a      	sbcs	r2, r1
    4e76:	2100      	movs	r1, #0
    4e78:	4317      	orrs	r7, r2
    4e7a:	e692      	b.n	4ba2 <__aeabi_dsub+0x1be>
    4e7c:	2e00      	cmp	r6, #0
    4e7e:	d114      	bne.n	4eaa <__aeabi_dsub+0x4c6>
    4e80:	0026      	movs	r6, r4
    4e82:	4650      	mov	r0, sl
    4e84:	4306      	orrs	r6, r0
    4e86:	d062      	beq.n	4f4e <__aeabi_dsub+0x56a>
    4e88:	43db      	mvns	r3, r3
    4e8a:	2b00      	cmp	r3, #0
    4e8c:	d15c      	bne.n	4f48 <__aeabi_dsub+0x564>
    4e8e:	1887      	adds	r7, r0, r2
    4e90:	4297      	cmp	r7, r2
    4e92:	4192      	sbcs	r2, r2
    4e94:	1864      	adds	r4, r4, r1
    4e96:	4252      	negs	r2, r2
    4e98:	18a4      	adds	r4, r4, r2
    4e9a:	4666      	mov	r6, ip
    4e9c:	e687      	b.n	4bae <__aeabi_dsub+0x1ca>
    4e9e:	4650      	mov	r0, sl
    4ea0:	4320      	orrs	r0, r4
    4ea2:	1e44      	subs	r4, r0, #1
    4ea4:	41a0      	sbcs	r0, r4
    4ea6:	2400      	movs	r4, #0
    4ea8:	e760      	b.n	4d6c <__aeabi_dsub+0x388>
    4eaa:	4e57      	ldr	r6, [pc, #348]	; (5008 <__aeabi_dsub+0x624>)
    4eac:	45b4      	cmp	ip, r6
    4eae:	d04e      	beq.n	4f4e <__aeabi_dsub+0x56a>
    4eb0:	2680      	movs	r6, #128	; 0x80
    4eb2:	0436      	lsls	r6, r6, #16
    4eb4:	425b      	negs	r3, r3
    4eb6:	4334      	orrs	r4, r6
    4eb8:	2b38      	cmp	r3, #56	; 0x38
    4eba:	dd00      	ble.n	4ebe <__aeabi_dsub+0x4da>
    4ebc:	e07f      	b.n	4fbe <__aeabi_dsub+0x5da>
    4ebe:	2b1f      	cmp	r3, #31
    4ec0:	dd00      	ble.n	4ec4 <__aeabi_dsub+0x4e0>
    4ec2:	e08b      	b.n	4fdc <__aeabi_dsub+0x5f8>
    4ec4:	2620      	movs	r6, #32
    4ec6:	0027      	movs	r7, r4
    4ec8:	4650      	mov	r0, sl
    4eca:	1af6      	subs	r6, r6, r3
    4ecc:	40b7      	lsls	r7, r6
    4ece:	40d8      	lsrs	r0, r3
    4ed0:	4307      	orrs	r7, r0
    4ed2:	4650      	mov	r0, sl
    4ed4:	40b0      	lsls	r0, r6
    4ed6:	1e46      	subs	r6, r0, #1
    4ed8:	41b0      	sbcs	r0, r6
    4eda:	4307      	orrs	r7, r0
    4edc:	40dc      	lsrs	r4, r3
    4ede:	18bf      	adds	r7, r7, r2
    4ee0:	e7d6      	b.n	4e90 <__aeabi_dsub+0x4ac>
    4ee2:	000d      	movs	r5, r1
    4ee4:	4315      	orrs	r5, r2
    4ee6:	d100      	bne.n	4eea <__aeabi_dsub+0x506>
    4ee8:	e602      	b.n	4af0 <__aeabi_dsub+0x10c>
    4eea:	4650      	mov	r0, sl
    4eec:	1a80      	subs	r0, r0, r2
    4eee:	4582      	cmp	sl, r0
    4ef0:	41bf      	sbcs	r7, r7
    4ef2:	1a65      	subs	r5, r4, r1
    4ef4:	427f      	negs	r7, r7
    4ef6:	1bed      	subs	r5, r5, r7
    4ef8:	4684      	mov	ip, r0
    4efa:	0228      	lsls	r0, r5, #8
    4efc:	d400      	bmi.n	4f00 <__aeabi_dsub+0x51c>
    4efe:	e68d      	b.n	4c1c <__aeabi_dsub+0x238>
    4f00:	4650      	mov	r0, sl
    4f02:	1a17      	subs	r7, r2, r0
    4f04:	42ba      	cmp	r2, r7
    4f06:	4192      	sbcs	r2, r2
    4f08:	1b0c      	subs	r4, r1, r4
    4f0a:	4252      	negs	r2, r2
    4f0c:	1aa4      	subs	r4, r4, r2
    4f0e:	4698      	mov	r8, r3
    4f10:	e5ee      	b.n	4af0 <__aeabi_dsub+0x10c>
    4f12:	000d      	movs	r5, r1
    4f14:	4315      	orrs	r5, r2
    4f16:	d100      	bne.n	4f1a <__aeabi_dsub+0x536>
    4f18:	e76b      	b.n	4df2 <__aeabi_dsub+0x40e>
    4f1a:	4650      	mov	r0, sl
    4f1c:	0767      	lsls	r7, r4, #29
    4f1e:	08c0      	lsrs	r0, r0, #3
    4f20:	4307      	orrs	r7, r0
    4f22:	2080      	movs	r0, #128	; 0x80
    4f24:	08e4      	lsrs	r4, r4, #3
    4f26:	0300      	lsls	r0, r0, #12
    4f28:	4204      	tst	r4, r0
    4f2a:	d007      	beq.n	4f3c <__aeabi_dsub+0x558>
    4f2c:	08cd      	lsrs	r5, r1, #3
    4f2e:	4205      	tst	r5, r0
    4f30:	d104      	bne.n	4f3c <__aeabi_dsub+0x558>
    4f32:	002c      	movs	r4, r5
    4f34:	4698      	mov	r8, r3
    4f36:	08d7      	lsrs	r7, r2, #3
    4f38:	0749      	lsls	r1, r1, #29
    4f3a:	430f      	orrs	r7, r1
    4f3c:	0f7b      	lsrs	r3, r7, #29
    4f3e:	00e4      	lsls	r4, r4, #3
    4f40:	431c      	orrs	r4, r3
    4f42:	00ff      	lsls	r7, r7, #3
    4f44:	4e30      	ldr	r6, [pc, #192]	; (5008 <__aeabi_dsub+0x624>)
    4f46:	e5d3      	b.n	4af0 <__aeabi_dsub+0x10c>
    4f48:	4e2f      	ldr	r6, [pc, #188]	; (5008 <__aeabi_dsub+0x624>)
    4f4a:	45b4      	cmp	ip, r6
    4f4c:	d1b4      	bne.n	4eb8 <__aeabi_dsub+0x4d4>
    4f4e:	000c      	movs	r4, r1
    4f50:	0017      	movs	r7, r2
    4f52:	4666      	mov	r6, ip
    4f54:	e5cc      	b.n	4af0 <__aeabi_dsub+0x10c>
    4f56:	2700      	movs	r7, #0
    4f58:	2400      	movs	r4, #0
    4f5a:	e5e8      	b.n	4b2e <__aeabi_dsub+0x14a>
    4f5c:	2b00      	cmp	r3, #0
    4f5e:	d039      	beq.n	4fd4 <__aeabi_dsub+0x5f0>
    4f60:	000b      	movs	r3, r1
    4f62:	4313      	orrs	r3, r2
    4f64:	d100      	bne.n	4f68 <__aeabi_dsub+0x584>
    4f66:	e744      	b.n	4df2 <__aeabi_dsub+0x40e>
    4f68:	08c0      	lsrs	r0, r0, #3
    4f6a:	0767      	lsls	r7, r4, #29
    4f6c:	4307      	orrs	r7, r0
    4f6e:	2080      	movs	r0, #128	; 0x80
    4f70:	08e4      	lsrs	r4, r4, #3
    4f72:	0300      	lsls	r0, r0, #12
    4f74:	4204      	tst	r4, r0
    4f76:	d0e1      	beq.n	4f3c <__aeabi_dsub+0x558>
    4f78:	08cb      	lsrs	r3, r1, #3
    4f7a:	4203      	tst	r3, r0
    4f7c:	d1de      	bne.n	4f3c <__aeabi_dsub+0x558>
    4f7e:	08d7      	lsrs	r7, r2, #3
    4f80:	0749      	lsls	r1, r1, #29
    4f82:	430f      	orrs	r7, r1
    4f84:	001c      	movs	r4, r3
    4f86:	e7d9      	b.n	4f3c <__aeabi_dsub+0x558>
    4f88:	2100      	movs	r1, #0
    4f8a:	e771      	b.n	4e70 <__aeabi_dsub+0x48c>
    4f8c:	2500      	movs	r5, #0
    4f8e:	2700      	movs	r7, #0
    4f90:	e5e9      	b.n	4b66 <__aeabi_dsub+0x182>
    4f92:	002e      	movs	r6, r5
    4f94:	0027      	movs	r7, r4
    4f96:	3e20      	subs	r6, #32
    4f98:	40f7      	lsrs	r7, r6
    4f9a:	2d20      	cmp	r5, #32
    4f9c:	d02f      	beq.n	4ffe <__aeabi_dsub+0x61a>
    4f9e:	2640      	movs	r6, #64	; 0x40
    4fa0:	1b75      	subs	r5, r6, r5
    4fa2:	40ac      	lsls	r4, r5
    4fa4:	4650      	mov	r0, sl
    4fa6:	4320      	orrs	r0, r4
    4fa8:	1e44      	subs	r4, r0, #1
    4faa:	41a0      	sbcs	r0, r4
    4fac:	2400      	movs	r4, #0
    4fae:	4338      	orrs	r0, r7
    4fb0:	e6dc      	b.n	4d6c <__aeabi_dsub+0x388>
    4fb2:	2480      	movs	r4, #128	; 0x80
    4fb4:	2500      	movs	r5, #0
    4fb6:	0324      	lsls	r4, r4, #12
    4fb8:	4e13      	ldr	r6, [pc, #76]	; (5008 <__aeabi_dsub+0x624>)
    4fba:	2700      	movs	r7, #0
    4fbc:	e5d3      	b.n	4b66 <__aeabi_dsub+0x182>
    4fbe:	4650      	mov	r0, sl
    4fc0:	4320      	orrs	r0, r4
    4fc2:	0007      	movs	r7, r0
    4fc4:	1e78      	subs	r0, r7, #1
    4fc6:	4187      	sbcs	r7, r0
    4fc8:	2400      	movs	r4, #0
    4fca:	18bf      	adds	r7, r7, r2
    4fcc:	e760      	b.n	4e90 <__aeabi_dsub+0x4ac>
    4fce:	000c      	movs	r4, r1
    4fd0:	0017      	movs	r7, r2
    4fd2:	e58d      	b.n	4af0 <__aeabi_dsub+0x10c>
    4fd4:	000c      	movs	r4, r1
    4fd6:	0017      	movs	r7, r2
    4fd8:	4e0b      	ldr	r6, [pc, #44]	; (5008 <__aeabi_dsub+0x624>)
    4fda:	e589      	b.n	4af0 <__aeabi_dsub+0x10c>
    4fdc:	001e      	movs	r6, r3
    4fde:	0027      	movs	r7, r4
    4fe0:	3e20      	subs	r6, #32
    4fe2:	40f7      	lsrs	r7, r6
    4fe4:	2b20      	cmp	r3, #32
    4fe6:	d00c      	beq.n	5002 <__aeabi_dsub+0x61e>
    4fe8:	2640      	movs	r6, #64	; 0x40
    4fea:	1af3      	subs	r3, r6, r3
    4fec:	409c      	lsls	r4, r3
    4fee:	4650      	mov	r0, sl
    4ff0:	4320      	orrs	r0, r4
    4ff2:	1e44      	subs	r4, r0, #1
    4ff4:	41a0      	sbcs	r0, r4
    4ff6:	4307      	orrs	r7, r0
    4ff8:	2400      	movs	r4, #0
    4ffa:	18bf      	adds	r7, r7, r2
    4ffc:	e748      	b.n	4e90 <__aeabi_dsub+0x4ac>
    4ffe:	2400      	movs	r4, #0
    5000:	e7d0      	b.n	4fa4 <__aeabi_dsub+0x5c0>
    5002:	2400      	movs	r4, #0
    5004:	e7f3      	b.n	4fee <__aeabi_dsub+0x60a>
    5006:	46c0      	nop			; (mov r8, r8)
    5008:	000007ff 	.word	0x000007ff
    500c:	ff7fffff 	.word	0xff7fffff

00005010 <__aeabi_d2iz>:
    5010:	b530      	push	{r4, r5, lr}
    5012:	4d13      	ldr	r5, [pc, #76]	; (5060 <__aeabi_d2iz+0x50>)
    5014:	030a      	lsls	r2, r1, #12
    5016:	004b      	lsls	r3, r1, #1
    5018:	0b12      	lsrs	r2, r2, #12
    501a:	0d5b      	lsrs	r3, r3, #21
    501c:	0fc9      	lsrs	r1, r1, #31
    501e:	2400      	movs	r4, #0
    5020:	42ab      	cmp	r3, r5
    5022:	dd10      	ble.n	5046 <__aeabi_d2iz+0x36>
    5024:	4c0f      	ldr	r4, [pc, #60]	; (5064 <__aeabi_d2iz+0x54>)
    5026:	42a3      	cmp	r3, r4
    5028:	dc0f      	bgt.n	504a <__aeabi_d2iz+0x3a>
    502a:	2480      	movs	r4, #128	; 0x80
    502c:	4d0e      	ldr	r5, [pc, #56]	; (5068 <__aeabi_d2iz+0x58>)
    502e:	0364      	lsls	r4, r4, #13
    5030:	4322      	orrs	r2, r4
    5032:	1aed      	subs	r5, r5, r3
    5034:	2d1f      	cmp	r5, #31
    5036:	dd0b      	ble.n	5050 <__aeabi_d2iz+0x40>
    5038:	480c      	ldr	r0, [pc, #48]	; (506c <__aeabi_d2iz+0x5c>)
    503a:	1ac3      	subs	r3, r0, r3
    503c:	40da      	lsrs	r2, r3
    503e:	4254      	negs	r4, r2
    5040:	2900      	cmp	r1, #0
    5042:	d100      	bne.n	5046 <__aeabi_d2iz+0x36>
    5044:	0014      	movs	r4, r2
    5046:	0020      	movs	r0, r4
    5048:	bd30      	pop	{r4, r5, pc}
    504a:	4b09      	ldr	r3, [pc, #36]	; (5070 <__aeabi_d2iz+0x60>)
    504c:	18cc      	adds	r4, r1, r3
    504e:	e7fa      	b.n	5046 <__aeabi_d2iz+0x36>
    5050:	4c08      	ldr	r4, [pc, #32]	; (5074 <__aeabi_d2iz+0x64>)
    5052:	40e8      	lsrs	r0, r5
    5054:	46a4      	mov	ip, r4
    5056:	4463      	add	r3, ip
    5058:	409a      	lsls	r2, r3
    505a:	4302      	orrs	r2, r0
    505c:	e7ef      	b.n	503e <__aeabi_d2iz+0x2e>
    505e:	46c0      	nop			; (mov r8, r8)
    5060:	000003fe 	.word	0x000003fe
    5064:	0000041d 	.word	0x0000041d
    5068:	00000433 	.word	0x00000433
    506c:	00000413 	.word	0x00000413
    5070:	7fffffff 	.word	0x7fffffff
    5074:	fffffbed 	.word	0xfffffbed

00005078 <__aeabi_i2d>:
    5078:	b570      	push	{r4, r5, r6, lr}
    507a:	2800      	cmp	r0, #0
    507c:	d030      	beq.n	50e0 <__aeabi_i2d+0x68>
    507e:	17c3      	asrs	r3, r0, #31
    5080:	18c4      	adds	r4, r0, r3
    5082:	405c      	eors	r4, r3
    5084:	0fc5      	lsrs	r5, r0, #31
    5086:	0020      	movs	r0, r4
    5088:	f000 f870 	bl	516c <__clzsi2>
    508c:	4b17      	ldr	r3, [pc, #92]	; (50ec <__aeabi_i2d+0x74>)
    508e:	4a18      	ldr	r2, [pc, #96]	; (50f0 <__aeabi_i2d+0x78>)
    5090:	1a1b      	subs	r3, r3, r0
    5092:	1ad2      	subs	r2, r2, r3
    5094:	2a1f      	cmp	r2, #31
    5096:	dd18      	ble.n	50ca <__aeabi_i2d+0x52>
    5098:	4a16      	ldr	r2, [pc, #88]	; (50f4 <__aeabi_i2d+0x7c>)
    509a:	1ad2      	subs	r2, r2, r3
    509c:	4094      	lsls	r4, r2
    509e:	2200      	movs	r2, #0
    50a0:	0324      	lsls	r4, r4, #12
    50a2:	055b      	lsls	r3, r3, #21
    50a4:	0b24      	lsrs	r4, r4, #12
    50a6:	0d5b      	lsrs	r3, r3, #21
    50a8:	2100      	movs	r1, #0
    50aa:	0010      	movs	r0, r2
    50ac:	0324      	lsls	r4, r4, #12
    50ae:	0d0a      	lsrs	r2, r1, #20
    50b0:	0b24      	lsrs	r4, r4, #12
    50b2:	0512      	lsls	r2, r2, #20
    50b4:	4322      	orrs	r2, r4
    50b6:	4c10      	ldr	r4, [pc, #64]	; (50f8 <__aeabi_i2d+0x80>)
    50b8:	051b      	lsls	r3, r3, #20
    50ba:	4022      	ands	r2, r4
    50bc:	4313      	orrs	r3, r2
    50be:	005b      	lsls	r3, r3, #1
    50c0:	07ed      	lsls	r5, r5, #31
    50c2:	085b      	lsrs	r3, r3, #1
    50c4:	432b      	orrs	r3, r5
    50c6:	0019      	movs	r1, r3
    50c8:	bd70      	pop	{r4, r5, r6, pc}
    50ca:	0021      	movs	r1, r4
    50cc:	4091      	lsls	r1, r2
    50ce:	000a      	movs	r2, r1
    50d0:	210b      	movs	r1, #11
    50d2:	1a08      	subs	r0, r1, r0
    50d4:	40c4      	lsrs	r4, r0
    50d6:	055b      	lsls	r3, r3, #21
    50d8:	0324      	lsls	r4, r4, #12
    50da:	0b24      	lsrs	r4, r4, #12
    50dc:	0d5b      	lsrs	r3, r3, #21
    50de:	e7e3      	b.n	50a8 <__aeabi_i2d+0x30>
    50e0:	2500      	movs	r5, #0
    50e2:	2300      	movs	r3, #0
    50e4:	2400      	movs	r4, #0
    50e6:	2200      	movs	r2, #0
    50e8:	e7de      	b.n	50a8 <__aeabi_i2d+0x30>
    50ea:	46c0      	nop			; (mov r8, r8)
    50ec:	0000041e 	.word	0x0000041e
    50f0:	00000433 	.word	0x00000433
    50f4:	00000413 	.word	0x00000413
    50f8:	800fffff 	.word	0x800fffff

000050fc <__aeabi_ui2d>:
    50fc:	b510      	push	{r4, lr}
    50fe:	1e04      	subs	r4, r0, #0
    5100:	d028      	beq.n	5154 <__aeabi_ui2d+0x58>
    5102:	f000 f833 	bl	516c <__clzsi2>
    5106:	4b15      	ldr	r3, [pc, #84]	; (515c <__aeabi_ui2d+0x60>)
    5108:	4a15      	ldr	r2, [pc, #84]	; (5160 <__aeabi_ui2d+0x64>)
    510a:	1a1b      	subs	r3, r3, r0
    510c:	1ad2      	subs	r2, r2, r3
    510e:	2a1f      	cmp	r2, #31
    5110:	dd15      	ble.n	513e <__aeabi_ui2d+0x42>
    5112:	4a14      	ldr	r2, [pc, #80]	; (5164 <__aeabi_ui2d+0x68>)
    5114:	1ad2      	subs	r2, r2, r3
    5116:	4094      	lsls	r4, r2
    5118:	2200      	movs	r2, #0
    511a:	0324      	lsls	r4, r4, #12
    511c:	055b      	lsls	r3, r3, #21
    511e:	0b24      	lsrs	r4, r4, #12
    5120:	0d5b      	lsrs	r3, r3, #21
    5122:	2100      	movs	r1, #0
    5124:	0010      	movs	r0, r2
    5126:	0324      	lsls	r4, r4, #12
    5128:	0d0a      	lsrs	r2, r1, #20
    512a:	0b24      	lsrs	r4, r4, #12
    512c:	0512      	lsls	r2, r2, #20
    512e:	4322      	orrs	r2, r4
    5130:	4c0d      	ldr	r4, [pc, #52]	; (5168 <__aeabi_ui2d+0x6c>)
    5132:	051b      	lsls	r3, r3, #20
    5134:	4022      	ands	r2, r4
    5136:	4313      	orrs	r3, r2
    5138:	005b      	lsls	r3, r3, #1
    513a:	0859      	lsrs	r1, r3, #1
    513c:	bd10      	pop	{r4, pc}
    513e:	0021      	movs	r1, r4
    5140:	4091      	lsls	r1, r2
    5142:	000a      	movs	r2, r1
    5144:	210b      	movs	r1, #11
    5146:	1a08      	subs	r0, r1, r0
    5148:	40c4      	lsrs	r4, r0
    514a:	055b      	lsls	r3, r3, #21
    514c:	0324      	lsls	r4, r4, #12
    514e:	0b24      	lsrs	r4, r4, #12
    5150:	0d5b      	lsrs	r3, r3, #21
    5152:	e7e6      	b.n	5122 <__aeabi_ui2d+0x26>
    5154:	2300      	movs	r3, #0
    5156:	2400      	movs	r4, #0
    5158:	2200      	movs	r2, #0
    515a:	e7e2      	b.n	5122 <__aeabi_ui2d+0x26>
    515c:	0000041e 	.word	0x0000041e
    5160:	00000433 	.word	0x00000433
    5164:	00000413 	.word	0x00000413
    5168:	800fffff 	.word	0x800fffff

0000516c <__clzsi2>:
    516c:	211c      	movs	r1, #28
    516e:	2301      	movs	r3, #1
    5170:	041b      	lsls	r3, r3, #16
    5172:	4298      	cmp	r0, r3
    5174:	d301      	bcc.n	517a <__clzsi2+0xe>
    5176:	0c00      	lsrs	r0, r0, #16
    5178:	3910      	subs	r1, #16
    517a:	0a1b      	lsrs	r3, r3, #8
    517c:	4298      	cmp	r0, r3
    517e:	d301      	bcc.n	5184 <__clzsi2+0x18>
    5180:	0a00      	lsrs	r0, r0, #8
    5182:	3908      	subs	r1, #8
    5184:	091b      	lsrs	r3, r3, #4
    5186:	4298      	cmp	r0, r3
    5188:	d301      	bcc.n	518e <__clzsi2+0x22>
    518a:	0900      	lsrs	r0, r0, #4
    518c:	3904      	subs	r1, #4
    518e:	a202      	add	r2, pc, #8	; (adr r2, 5198 <__clzsi2+0x2c>)
    5190:	5c10      	ldrb	r0, [r2, r0]
    5192:	1840      	adds	r0, r0, r1
    5194:	4770      	bx	lr
    5196:	46c0      	nop			; (mov r8, r8)
    5198:	02020304 	.word	0x02020304
    519c:	01010101 	.word	0x01010101
	...

000051a8 <__libc_init_array>:
    51a8:	b570      	push	{r4, r5, r6, lr}
    51aa:	2600      	movs	r6, #0
    51ac:	4d0c      	ldr	r5, [pc, #48]	; (51e0 <__libc_init_array+0x38>)
    51ae:	4c0d      	ldr	r4, [pc, #52]	; (51e4 <__libc_init_array+0x3c>)
    51b0:	1b64      	subs	r4, r4, r5
    51b2:	10a4      	asrs	r4, r4, #2
    51b4:	42a6      	cmp	r6, r4
    51b6:	d109      	bne.n	51cc <__libc_init_array+0x24>
    51b8:	2600      	movs	r6, #0
    51ba:	f000 f891 	bl	52e0 <_init>
    51be:	4d0a      	ldr	r5, [pc, #40]	; (51e8 <__libc_init_array+0x40>)
    51c0:	4c0a      	ldr	r4, [pc, #40]	; (51ec <__libc_init_array+0x44>)
    51c2:	1b64      	subs	r4, r4, r5
    51c4:	10a4      	asrs	r4, r4, #2
    51c6:	42a6      	cmp	r6, r4
    51c8:	d105      	bne.n	51d6 <__libc_init_array+0x2e>
    51ca:	bd70      	pop	{r4, r5, r6, pc}
    51cc:	00b3      	lsls	r3, r6, #2
    51ce:	58eb      	ldr	r3, [r5, r3]
    51d0:	4798      	blx	r3
    51d2:	3601      	adds	r6, #1
    51d4:	e7ee      	b.n	51b4 <__libc_init_array+0xc>
    51d6:	00b3      	lsls	r3, r6, #2
    51d8:	58eb      	ldr	r3, [r5, r3]
    51da:	4798      	blx	r3
    51dc:	3601      	adds	r6, #1
    51de:	e7f2      	b.n	51c6 <__libc_init_array+0x1e>
    51e0:	000052ec 	.word	0x000052ec
    51e4:	000052ec 	.word	0x000052ec
    51e8:	000052ec 	.word	0x000052ec
    51ec:	000052f0 	.word	0x000052f0

000051f0 <memset>:
    51f0:	0003      	movs	r3, r0
    51f2:	1882      	adds	r2, r0, r2
    51f4:	4293      	cmp	r3, r2
    51f6:	d100      	bne.n	51fa <memset+0xa>
    51f8:	4770      	bx	lr
    51fa:	7019      	strb	r1, [r3, #0]
    51fc:	3301      	adds	r3, #1
    51fe:	e7f9      	b.n	51f4 <memset+0x4>
    5200:	42000800 	.word	0x42000800
    5204:	42000c00 	.word	0x42000c00
    5208:	42001000 	.word	0x42001000
    520c:	42001400 	.word	0x42001400
    5210:	42001800 	.word	0x42001800
    5214:	42001c00 	.word	0x42001c00
    5218:	0000289a 	.word	0x0000289a
    521c:	00002914 	.word	0x00002914
    5220:	00002914 	.word	0x00002914
    5224:	000028b8 	.word	0x000028b8
    5228:	000028b2 	.word	0x000028b2
    522c:	000028be 	.word	0x000028be
    5230:	000028a0 	.word	0x000028a0
    5234:	000028c4 	.word	0x000028c4
    5238:	000028fa 	.word	0x000028fa
    523c:	000029f0 	.word	0x000029f0
    5240:	00002a40 	.word	0x00002a40
    5244:	00002a40 	.word	0x00002a40
    5248:	00002a3c 	.word	0x00002a3c
    524c:	000029e2 	.word	0x000029e2
    5250:	00002a02 	.word	0x00002a02
    5254:	000029d2 	.word	0x000029d2
    5258:	00002a14 	.word	0x00002a14
    525c:	00002a26 	.word	0x00002a26
    5260:	00003e74 	.word	0x00003e74
    5264:	00003e56 	.word	0x00003e56
    5268:	00003e10 	.word	0x00003e10
    526c:	00003d2e 	.word	0x00003d2e
    5270:	00003e10 	.word	0x00003e10
    5274:	00003e48 	.word	0x00003e48
    5278:	00003e10 	.word	0x00003e10
    527c:	00003d2e 	.word	0x00003d2e
    5280:	00003e56 	.word	0x00003e56
    5284:	00003e56 	.word	0x00003e56
    5288:	00003e48 	.word	0x00003e48
    528c:	00003d2e 	.word	0x00003d2e
    5290:	00003d26 	.word	0x00003d26
    5294:	00003d26 	.word	0x00003d26
    5298:	00003d26 	.word	0x00003d26
    529c:	0000408c 	.word	0x0000408c
    52a0:	000046d4 	.word	0x000046d4
    52a4:	00004594 	.word	0x00004594
    52a8:	00004594 	.word	0x00004594
    52ac:	00004590 	.word	0x00004590
    52b0:	000046ac 	.word	0x000046ac
    52b4:	000046ac 	.word	0x000046ac
    52b8:	0000469e 	.word	0x0000469e
    52bc:	00004590 	.word	0x00004590
    52c0:	000046ac 	.word	0x000046ac
    52c4:	0000469e 	.word	0x0000469e
    52c8:	000046ac 	.word	0x000046ac
    52cc:	00004590 	.word	0x00004590
    52d0:	000046b4 	.word	0x000046b4
    52d4:	000046b4 	.word	0x000046b4
    52d8:	000046b4 	.word	0x000046b4
    52dc:	000048b8 	.word	0x000048b8

000052e0 <_init>:
    52e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    52e2:	46c0      	nop			; (mov r8, r8)
    52e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    52e6:	bc08      	pop	{r3}
    52e8:	469e      	mov	lr, r3
    52ea:	4770      	bx	lr

000052ec <__init_array_start>:
    52ec:	000000dd 	.word	0x000000dd

000052f0 <_fini>:
    52f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    52f2:	46c0      	nop			; (mov r8, r8)
    52f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    52f6:	bc08      	pop	{r3}
    52f8:	469e      	mov	lr, r3
    52fa:	4770      	bx	lr

000052fc <__fini_array_start>:
    52fc:	000000b5 	.word	0x000000b5
