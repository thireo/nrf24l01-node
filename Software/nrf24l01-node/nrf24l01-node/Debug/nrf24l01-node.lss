
nrf24l01-node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007508  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000084  20000000  00007508  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000110  20000084  0000758c  00020084  2**2
                  ALLOC
  3 .stack        00002004  20000194  0000769c  00020084  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
  6 .debug_info   000277cb  00000000  00000000  00020105  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000030df  00000000  00000000  000478d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000022ca  00000000  00000000  0004a9af  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000006b0  00000000  00000000  0004cc79  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000005a0  00000000  00000000  0004d329  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001ade6  00000000  00000000  0004d8c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000ca35  00000000  00000000  000686af  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008c308  00000000  00000000  000750e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001af4  00000000  00000000  001013ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	98 21 00 20 89 38 00 00 81 39 00 00 81 39 00 00     .!. .8...9...9..
	...
      2c:	81 39 00 00 00 00 00 00 00 00 00 00 81 39 00 00     .9...........9..
      3c:	81 39 00 00 81 39 00 00 81 39 00 00 81 39 00 00     .9...9...9...9..
      4c:	81 39 00 00 0d 2c 00 00 81 39 00 00 81 39 00 00     .9...,...9...9..
      5c:	81 39 00 00 81 39 00 00 81 39 00 00 81 39 00 00     .9...9...9...9..
      6c:	81 39 00 00 81 39 00 00 81 39 00 00 81 39 00 00     .9...9...9...9..
      7c:	81 39 00 00 81 39 00 00 81 39 00 00 81 39 00 00     .9...9...9...9..
      8c:	81 39 00 00 81 39 00 00 81 39 00 00 81 39 00 00     .9...9...9...9..
      9c:	81 39 00 00 81 39 00 00 81 39 00 00 81 39 00 00     .9...9...9...9..
      ac:	81 39 00 00 00 00 00 00                             .9......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000084 	.word	0x20000084
      d4:	00000000 	.word	0x00000000
      d8:	00007508 	.word	0x00007508

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000088 	.word	0x20000088
     108:	00007508 	.word	0x00007508
     10c:	00007508 	.word	0x00007508
     110:	00000000 	.word	0x00000000

00000114 <delay_cycles>:
 *
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
     114:	b580      	push	{r7, lr}
     116:	b082      	sub	sp, #8
     118:	af00      	add	r7, sp, #0
     11a:	6078      	str	r0, [r7, #4]
	if (n > 0) {
     11c:	687b      	ldr	r3, [r7, #4]
     11e:	2b00      	cmp	r3, #0
     120:	d00c      	beq.n	13c <delay_cycles+0x28>
		SysTick->LOAD = n;
     122:	4b08      	ldr	r3, [pc, #32]	; (144 <delay_cycles+0x30>)
     124:	687a      	ldr	r2, [r7, #4]
     126:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
     128:	4b06      	ldr	r3, [pc, #24]	; (144 <delay_cycles+0x30>)
     12a:	2200      	movs	r2, #0
     12c:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     12e:	46c0      	nop			; (mov r8, r8)
     130:	4b04      	ldr	r3, [pc, #16]	; (144 <delay_cycles+0x30>)
     132:	681a      	ldr	r2, [r3, #0]
     134:	2380      	movs	r3, #128	; 0x80
     136:	025b      	lsls	r3, r3, #9
     138:	4013      	ands	r3, r2
     13a:	d0f9      	beq.n	130 <delay_cycles+0x1c>
		};
	}
}
     13c:	46c0      	nop			; (mov r8, r8)
     13e:	46bd      	mov	sp, r7
     140:	b002      	add	sp, #8
     142:	bd80      	pop	{r7, pc}
     144:	e000e010 	.word	0xe000e010

00000148 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     148:	b580      	push	{r7, lr}
     14a:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
     14c:	2000      	movs	r0, #0
     14e:	4b0f      	ldr	r3, [pc, #60]	; (18c <delay_init+0x44>)
     150:	4798      	blx	r3
     152:	0002      	movs	r2, r0
     154:	4b0e      	ldr	r3, [pc, #56]	; (190 <delay_init+0x48>)
     156:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
     158:	4b0d      	ldr	r3, [pc, #52]	; (190 <delay_init+0x48>)
     15a:	6818      	ldr	r0, [r3, #0]
     15c:	4b0d      	ldr	r3, [pc, #52]	; (194 <delay_init+0x4c>)
     15e:	22fa      	movs	r2, #250	; 0xfa
     160:	0091      	lsls	r1, r2, #2
     162:	4798      	blx	r3
     164:	0003      	movs	r3, r0
     166:	001a      	movs	r2, r3
     168:	4b09      	ldr	r3, [pc, #36]	; (190 <delay_init+0x48>)
     16a:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     16c:	4b08      	ldr	r3, [pc, #32]	; (190 <delay_init+0x48>)
     16e:	6818      	ldr	r0, [r3, #0]
     170:	4b08      	ldr	r3, [pc, #32]	; (194 <delay_init+0x4c>)
     172:	22fa      	movs	r2, #250	; 0xfa
     174:	0091      	lsls	r1, r2, #2
     176:	4798      	blx	r3
     178:	0003      	movs	r3, r0
     17a:	001a      	movs	r2, r3
     17c:	4b06      	ldr	r3, [pc, #24]	; (198 <delay_init+0x50>)
     17e:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     180:	4b06      	ldr	r3, [pc, #24]	; (19c <delay_init+0x54>)
     182:	2205      	movs	r2, #5
     184:	601a      	str	r2, [r3, #0]
}
     186:	46c0      	nop			; (mov r8, r8)
     188:	46bd      	mov	sp, r7
     18a:	bd80      	pop	{r7, pc}
     18c:	0000343d 	.word	0x0000343d
     190:	20000000 	.word	0x20000000
     194:	0000533d 	.word	0x0000533d
     198:	20000004 	.word	0x20000004
     19c:	e000e010 	.word	0xe000e010

000001a0 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     1a0:	b580      	push	{r7, lr}
     1a2:	b082      	sub	sp, #8
     1a4:	af00      	add	r7, sp, #0
     1a6:	6078      	str	r0, [r7, #4]
	while (n--) {
     1a8:	e004      	b.n	1b4 <delay_cycles_ms+0x14>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     1aa:	4b07      	ldr	r3, [pc, #28]	; (1c8 <delay_cycles_ms+0x28>)
     1ac:	681b      	ldr	r3, [r3, #0]
     1ae:	0018      	movs	r0, r3
     1b0:	4b06      	ldr	r3, [pc, #24]	; (1cc <delay_cycles_ms+0x2c>)
     1b2:	4798      	blx	r3
	while (n--) {
     1b4:	687b      	ldr	r3, [r7, #4]
     1b6:	1e5a      	subs	r2, r3, #1
     1b8:	607a      	str	r2, [r7, #4]
     1ba:	2b00      	cmp	r3, #0
     1bc:	d1f5      	bne.n	1aa <delay_cycles_ms+0xa>
	}
}
     1be:	46c0      	nop			; (mov r8, r8)
     1c0:	46bd      	mov	sp, r7
     1c2:	b002      	add	sp, #8
     1c4:	bd80      	pop	{r7, pc}
     1c6:	46c0      	nop			; (mov r8, r8)
     1c8:	20000000 	.word	0x20000000
     1cc:	00000115 	.word	0x00000115

000001d0 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     1d0:	b580      	push	{r7, lr}
     1d2:	b082      	sub	sp, #8
     1d4:	af00      	add	r7, sp, #0
     1d6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     1d8:	687b      	ldr	r3, [r7, #4]
     1da:	2200      	movs	r2, #0
     1dc:	701a      	strb	r2, [r3, #0]
}
     1de:	46c0      	nop			; (mov r8, r8)
     1e0:	46bd      	mov	sp, r7
     1e2:	b002      	add	sp, #8
     1e4:	bd80      	pop	{r7, pc}
	...

000001e8 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     1e8:	b580      	push	{r7, lr}
     1ea:	b082      	sub	sp, #8
     1ec:	af00      	add	r7, sp, #0
     1ee:	0002      	movs	r2, r0
     1f0:	6039      	str	r1, [r7, #0]
     1f2:	1dfb      	adds	r3, r7, #7
     1f4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     1f6:	1dfb      	adds	r3, r7, #7
     1f8:	781b      	ldrb	r3, [r3, #0]
     1fa:	2b01      	cmp	r3, #1
     1fc:	d00a      	beq.n	214 <system_apb_clock_set_mask+0x2c>
     1fe:	2b02      	cmp	r3, #2
     200:	d00f      	beq.n	222 <system_apb_clock_set_mask+0x3a>
     202:	2b00      	cmp	r3, #0
     204:	d114      	bne.n	230 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     206:	4b0e      	ldr	r3, [pc, #56]	; (240 <system_apb_clock_set_mask+0x58>)
     208:	4a0d      	ldr	r2, [pc, #52]	; (240 <system_apb_clock_set_mask+0x58>)
     20a:	6991      	ldr	r1, [r2, #24]
     20c:	683a      	ldr	r2, [r7, #0]
     20e:	430a      	orrs	r2, r1
     210:	619a      	str	r2, [r3, #24]
			break;
     212:	e00f      	b.n	234 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     214:	4b0a      	ldr	r3, [pc, #40]	; (240 <system_apb_clock_set_mask+0x58>)
     216:	4a0a      	ldr	r2, [pc, #40]	; (240 <system_apb_clock_set_mask+0x58>)
     218:	69d1      	ldr	r1, [r2, #28]
     21a:	683a      	ldr	r2, [r7, #0]
     21c:	430a      	orrs	r2, r1
     21e:	61da      	str	r2, [r3, #28]
			break;
     220:	e008      	b.n	234 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     222:	4b07      	ldr	r3, [pc, #28]	; (240 <system_apb_clock_set_mask+0x58>)
     224:	4a06      	ldr	r2, [pc, #24]	; (240 <system_apb_clock_set_mask+0x58>)
     226:	6a11      	ldr	r1, [r2, #32]
     228:	683a      	ldr	r2, [r7, #0]
     22a:	430a      	orrs	r2, r1
     22c:	621a      	str	r2, [r3, #32]
			break;
     22e:	e001      	b.n	234 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     230:	2317      	movs	r3, #23
     232:	e000      	b.n	236 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     234:	2300      	movs	r3, #0
}
     236:	0018      	movs	r0, r3
     238:	46bd      	mov	sp, r7
     23a:	b002      	add	sp, #8
     23c:	bd80      	pop	{r7, pc}
     23e:	46c0      	nop			; (mov r8, r8)
     240:	40000400 	.word	0x40000400

00000244 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
     244:	b580      	push	{r7, lr}
     246:	b082      	sub	sp, #8
     248:	af00      	add	r7, sp, #0
     24a:	0002      	movs	r2, r0
     24c:	1dfb      	adds	r3, r7, #7
     24e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     250:	4b06      	ldr	r3, [pc, #24]	; (26c <system_interrupt_enable+0x28>)
     252:	1dfa      	adds	r2, r7, #7
     254:	7812      	ldrb	r2, [r2, #0]
     256:	0011      	movs	r1, r2
     258:	221f      	movs	r2, #31
     25a:	400a      	ands	r2, r1
     25c:	2101      	movs	r1, #1
     25e:	4091      	lsls	r1, r2
     260:	000a      	movs	r2, r1
     262:	601a      	str	r2, [r3, #0]
}
     264:	46c0      	nop			; (mov r8, r8)
     266:	46bd      	mov	sp, r7
     268:	b002      	add	sp, #8
     26a:	bd80      	pop	{r7, pc}
     26c:	e000e100 	.word	0xe000e100

00000270 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
     270:	b580      	push	{r7, lr}
     272:	b082      	sub	sp, #8
     274:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     276:	4b0f      	ldr	r3, [pc, #60]	; (2b4 <extint_is_syncing+0x44>)
     278:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     27a:	2300      	movs	r3, #0
     27c:	607b      	str	r3, [r7, #4]
     27e:	e011      	b.n	2a4 <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     280:	687b      	ldr	r3, [r7, #4]
     282:	009b      	lsls	r3, r3, #2
     284:	2208      	movs	r2, #8
     286:	4694      	mov	ip, r2
     288:	44bc      	add	ip, r7
     28a:	4463      	add	r3, ip
     28c:	3b08      	subs	r3, #8
     28e:	681b      	ldr	r3, [r3, #0]
     290:	785b      	ldrb	r3, [r3, #1]
     292:	b2db      	uxtb	r3, r3
     294:	b25b      	sxtb	r3, r3
     296:	2b00      	cmp	r3, #0
     298:	da01      	bge.n	29e <extint_is_syncing+0x2e>
			return true;
     29a:	2301      	movs	r3, #1
     29c:	e006      	b.n	2ac <extint_is_syncing+0x3c>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     29e:	687b      	ldr	r3, [r7, #4]
     2a0:	3301      	adds	r3, #1
     2a2:	607b      	str	r3, [r7, #4]
     2a4:	687b      	ldr	r3, [r7, #4]
     2a6:	2b00      	cmp	r3, #0
     2a8:	d0ea      	beq.n	280 <extint_is_syncing+0x10>
		}
	}
	return false;
     2aa:	2300      	movs	r3, #0
}
     2ac:	0018      	movs	r0, r3
     2ae:	46bd      	mov	sp, r7
     2b0:	b002      	add	sp, #8
     2b2:	bd80      	pop	{r7, pc}
     2b4:	40001800 	.word	0x40001800

000002b8 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
     2b8:	b580      	push	{r7, lr}
     2ba:	b084      	sub	sp, #16
     2bc:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     2be:	4b2d      	ldr	r3, [pc, #180]	; (374 <_system_extint_init+0xbc>)
     2c0:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
     2c2:	2140      	movs	r1, #64	; 0x40
     2c4:	2000      	movs	r0, #0
     2c6:	4b2c      	ldr	r3, [pc, #176]	; (378 <_system_extint_init+0xc0>)
     2c8:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     2ca:	003b      	movs	r3, r7
     2cc:	0018      	movs	r0, r3
     2ce:	4b2b      	ldr	r3, [pc, #172]	; (37c <_system_extint_init+0xc4>)
     2d0:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
     2d2:	003b      	movs	r3, r7
     2d4:	2200      	movs	r2, #0
     2d6:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     2d8:	003b      	movs	r3, r7
     2da:	0019      	movs	r1, r3
     2dc:	2005      	movs	r0, #5
     2de:	4b28      	ldr	r3, [pc, #160]	; (380 <_system_extint_init+0xc8>)
     2e0:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
     2e2:	2005      	movs	r0, #5
     2e4:	4b27      	ldr	r3, [pc, #156]	; (384 <_system_extint_init+0xcc>)
     2e6:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     2e8:	2300      	movs	r3, #0
     2ea:	60fb      	str	r3, [r7, #12]
     2ec:	e018      	b.n	320 <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     2ee:	68fb      	ldr	r3, [r7, #12]
     2f0:	009b      	lsls	r3, r3, #2
     2f2:	2210      	movs	r2, #16
     2f4:	4694      	mov	ip, r2
     2f6:	44bc      	add	ip, r7
     2f8:	4463      	add	r3, ip
     2fa:	3b0c      	subs	r3, #12
     2fc:	681a      	ldr	r2, [r3, #0]
     2fe:	68fb      	ldr	r3, [r7, #12]
     300:	009b      	lsls	r3, r3, #2
     302:	2110      	movs	r1, #16
     304:	468c      	mov	ip, r1
     306:	44bc      	add	ip, r7
     308:	4463      	add	r3, ip
     30a:	3b0c      	subs	r3, #12
     30c:	681b      	ldr	r3, [r3, #0]
     30e:	781b      	ldrb	r3, [r3, #0]
     310:	b2db      	uxtb	r3, r3
     312:	2101      	movs	r1, #1
     314:	430b      	orrs	r3, r1
     316:	b2db      	uxtb	r3, r3
     318:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     31a:	68fb      	ldr	r3, [r7, #12]
     31c:	3301      	adds	r3, #1
     31e:	60fb      	str	r3, [r7, #12]
     320:	68fb      	ldr	r3, [r7, #12]
     322:	2b00      	cmp	r3, #0
     324:	d0e3      	beq.n	2ee <_system_extint_init+0x36>
	}

	while (extint_is_syncing()) {
     326:	46c0      	nop			; (mov r8, r8)
     328:	4b17      	ldr	r3, [pc, #92]	; (388 <_system_extint_init+0xd0>)
     32a:	4798      	blx	r3
     32c:	1e03      	subs	r3, r0, #0
     32e:	d1fb      	bne.n	328 <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     330:	230b      	movs	r3, #11
     332:	18fb      	adds	r3, r7, r3
     334:	2200      	movs	r2, #0
     336:	701a      	strb	r2, [r3, #0]
     338:	e00d      	b.n	356 <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
     33a:	230b      	movs	r3, #11
     33c:	18fb      	adds	r3, r7, r3
     33e:	781a      	ldrb	r2, [r3, #0]
     340:	4b12      	ldr	r3, [pc, #72]	; (38c <_system_extint_init+0xd4>)
     342:	0092      	lsls	r2, r2, #2
     344:	2100      	movs	r1, #0
     346:	50d1      	str	r1, [r2, r3]
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     348:	230b      	movs	r3, #11
     34a:	18fb      	adds	r3, r7, r3
     34c:	781a      	ldrb	r2, [r3, #0]
     34e:	230b      	movs	r3, #11
     350:	18fb      	adds	r3, r7, r3
     352:	3201      	adds	r2, #1
     354:	701a      	strb	r2, [r3, #0]
     356:	230b      	movs	r3, #11
     358:	18fb      	adds	r3, r7, r3
     35a:	781b      	ldrb	r3, [r3, #0]
     35c:	2b0f      	cmp	r3, #15
     35e:	d9ec      	bls.n	33a <_system_extint_init+0x82>
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
     360:	2004      	movs	r0, #4
     362:	4b0b      	ldr	r3, [pc, #44]	; (390 <_system_extint_init+0xd8>)
     364:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
     366:	4b0b      	ldr	r3, [pc, #44]	; (394 <_system_extint_init+0xdc>)
     368:	4798      	blx	r3
}
     36a:	46c0      	nop			; (mov r8, r8)
     36c:	46bd      	mov	sp, r7
     36e:	b004      	add	sp, #16
     370:	bd80      	pop	{r7, pc}
     372:	46c0      	nop			; (mov r8, r8)
     374:	40001800 	.word	0x40001800
     378:	000001e9 	.word	0x000001e9
     37c:	000001d1 	.word	0x000001d1
     380:	00003515 	.word	0x00003515
     384:	00003559 	.word	0x00003559
     388:	00000271 	.word	0x00000271
     38c:	200000c4 	.word	0x200000c4
     390:	00000245 	.word	0x00000245
     394:	00000399 	.word	0x00000399

00000398 <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
     398:	b580      	push	{r7, lr}
     39a:	b082      	sub	sp, #8
     39c:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     39e:	4b15      	ldr	r3, [pc, #84]	; (3f4 <_extint_enable+0x5c>)
     3a0:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     3a2:	2300      	movs	r3, #0
     3a4:	607b      	str	r3, [r7, #4]
     3a6:	e018      	b.n	3da <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     3a8:	687b      	ldr	r3, [r7, #4]
     3aa:	009b      	lsls	r3, r3, #2
     3ac:	2208      	movs	r2, #8
     3ae:	4694      	mov	ip, r2
     3b0:	44bc      	add	ip, r7
     3b2:	4463      	add	r3, ip
     3b4:	3b08      	subs	r3, #8
     3b6:	681a      	ldr	r2, [r3, #0]
     3b8:	687b      	ldr	r3, [r7, #4]
     3ba:	009b      	lsls	r3, r3, #2
     3bc:	2108      	movs	r1, #8
     3be:	468c      	mov	ip, r1
     3c0:	44bc      	add	ip, r7
     3c2:	4463      	add	r3, ip
     3c4:	3b08      	subs	r3, #8
     3c6:	681b      	ldr	r3, [r3, #0]
     3c8:	781b      	ldrb	r3, [r3, #0]
     3ca:	b2db      	uxtb	r3, r3
     3cc:	2102      	movs	r1, #2
     3ce:	430b      	orrs	r3, r1
     3d0:	b2db      	uxtb	r3, r3
     3d2:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     3d4:	687b      	ldr	r3, [r7, #4]
     3d6:	3301      	adds	r3, #1
     3d8:	607b      	str	r3, [r7, #4]
     3da:	687b      	ldr	r3, [r7, #4]
     3dc:	2b00      	cmp	r3, #0
     3de:	d0e3      	beq.n	3a8 <_extint_enable+0x10>
	}

	while (extint_is_syncing()) {
     3e0:	46c0      	nop			; (mov r8, r8)
     3e2:	4b05      	ldr	r3, [pc, #20]	; (3f8 <_extint_enable+0x60>)
     3e4:	4798      	blx	r3
     3e6:	1e03      	subs	r3, r0, #0
     3e8:	d1fb      	bne.n	3e2 <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
     3ea:	46c0      	nop			; (mov r8, r8)
     3ec:	46bd      	mov	sp, r7
     3ee:	b002      	add	sp, #8
     3f0:	bd80      	pop	{r7, pc}
     3f2:	46c0      	nop			; (mov r8, r8)
     3f4:	40001800 	.word	0x40001800
     3f8:	00000271 	.word	0x00000271

000003fc <system_gclk_chan_get_config_defaults>:
{
     3fc:	b580      	push	{r7, lr}
     3fe:	b082      	sub	sp, #8
     400:	af00      	add	r7, sp, #0
     402:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
     404:	687b      	ldr	r3, [r7, #4]
     406:	2200      	movs	r2, #0
     408:	701a      	strb	r2, [r3, #0]
}
     40a:	46c0      	nop			; (mov r8, r8)
     40c:	46bd      	mov	sp, r7
     40e:	b002      	add	sp, #8
     410:	bd80      	pop	{r7, pc}

00000412 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     412:	b580      	push	{r7, lr}
     414:	b086      	sub	sp, #24
     416:	af00      	add	r7, sp, #0
     418:	60f8      	str	r0, [r7, #12]
     41a:	60b9      	str	r1, [r7, #8]
     41c:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
     41e:	2316      	movs	r3, #22
     420:	18fb      	adds	r3, r7, r3
     422:	2200      	movs	r2, #0
     424:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
     426:	68bb      	ldr	r3, [r7, #8]
     428:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     42a:	68bb      	ldr	r3, [r7, #8]
     42c:	085a      	lsrs	r2, r3, #1
     42e:	68fb      	ldr	r3, [r7, #12]
     430:	429a      	cmp	r2, r3
     432:	d201      	bcs.n	438 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     434:	2340      	movs	r3, #64	; 0x40
     436:	e026      	b.n	486 <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
     438:	68bb      	ldr	r3, [r7, #8]
     43a:	085b      	lsrs	r3, r3, #1
     43c:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
     43e:	e00a      	b.n	456 <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
     440:	693a      	ldr	r2, [r7, #16]
     442:	68fb      	ldr	r3, [r7, #12]
     444:	1ad3      	subs	r3, r2, r3
     446:	613b      	str	r3, [r7, #16]
		baud_calculated++;
     448:	2316      	movs	r3, #22
     44a:	18fb      	adds	r3, r7, r3
     44c:	881a      	ldrh	r2, [r3, #0]
     44e:	2316      	movs	r3, #22
     450:	18fb      	adds	r3, r7, r3
     452:	3201      	adds	r2, #1
     454:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
     456:	693a      	ldr	r2, [r7, #16]
     458:	68fb      	ldr	r3, [r7, #12]
     45a:	429a      	cmp	r2, r3
     45c:	d2f0      	bcs.n	440 <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
     45e:	2316      	movs	r3, #22
     460:	18fb      	adds	r3, r7, r3
     462:	2216      	movs	r2, #22
     464:	18ba      	adds	r2, r7, r2
     466:	8812      	ldrh	r2, [r2, #0]
     468:	3a01      	subs	r2, #1
     46a:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
     46c:	2316      	movs	r3, #22
     46e:	18fb      	adds	r3, r7, r3
     470:	881b      	ldrh	r3, [r3, #0]
     472:	2bff      	cmp	r3, #255	; 0xff
     474:	d901      	bls.n	47a <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     476:	2340      	movs	r3, #64	; 0x40
     478:	e005      	b.n	486 <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
     47a:	687b      	ldr	r3, [r7, #4]
     47c:	2216      	movs	r2, #22
     47e:	18ba      	adds	r2, r7, r2
     480:	8812      	ldrh	r2, [r2, #0]
     482:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
     484:	2300      	movs	r3, #0
	}
}
     486:	0018      	movs	r0, r3
     488:	46bd      	mov	sp, r7
     48a:	b006      	add	sp, #24
     48c:	bd80      	pop	{r7, pc}
	...

00000490 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     490:	b580      	push	{r7, lr}
     492:	b084      	sub	sp, #16
     494:	af00      	add	r7, sp, #0
     496:	0002      	movs	r2, r0
     498:	1dfb      	adds	r3, r7, #7
     49a:	701a      	strb	r2, [r3, #0]
     49c:	1dbb      	adds	r3, r7, #6
     49e:	1c0a      	adds	r2, r1, #0
     4a0:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     4a2:	4b1a      	ldr	r3, [pc, #104]	; (50c <sercom_set_gclk_generator+0x7c>)
     4a4:	781b      	ldrb	r3, [r3, #0]
     4a6:	2201      	movs	r2, #1
     4a8:	4053      	eors	r3, r2
     4aa:	b2db      	uxtb	r3, r3
     4ac:	2b00      	cmp	r3, #0
     4ae:	d103      	bne.n	4b8 <sercom_set_gclk_generator+0x28>
     4b0:	1dbb      	adds	r3, r7, #6
     4b2:	781b      	ldrb	r3, [r3, #0]
     4b4:	2b00      	cmp	r3, #0
     4b6:	d01b      	beq.n	4f0 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     4b8:	230c      	movs	r3, #12
     4ba:	18fb      	adds	r3, r7, r3
     4bc:	0018      	movs	r0, r3
     4be:	4b14      	ldr	r3, [pc, #80]	; (510 <sercom_set_gclk_generator+0x80>)
     4c0:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
     4c2:	230c      	movs	r3, #12
     4c4:	18fb      	adds	r3, r7, r3
     4c6:	1dfa      	adds	r2, r7, #7
     4c8:	7812      	ldrb	r2, [r2, #0]
     4ca:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     4cc:	230c      	movs	r3, #12
     4ce:	18fb      	adds	r3, r7, r3
     4d0:	0019      	movs	r1, r3
     4d2:	2013      	movs	r0, #19
     4d4:	4b0f      	ldr	r3, [pc, #60]	; (514 <sercom_set_gclk_generator+0x84>)
     4d6:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     4d8:	2013      	movs	r0, #19
     4da:	4b0f      	ldr	r3, [pc, #60]	; (518 <sercom_set_gclk_generator+0x88>)
     4dc:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
     4de:	4b0b      	ldr	r3, [pc, #44]	; (50c <sercom_set_gclk_generator+0x7c>)
     4e0:	1dfa      	adds	r2, r7, #7
     4e2:	7812      	ldrb	r2, [r2, #0]
     4e4:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
     4e6:	4b09      	ldr	r3, [pc, #36]	; (50c <sercom_set_gclk_generator+0x7c>)
     4e8:	2201      	movs	r2, #1
     4ea:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
     4ec:	2300      	movs	r3, #0
     4ee:	e008      	b.n	502 <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
     4f0:	4b06      	ldr	r3, [pc, #24]	; (50c <sercom_set_gclk_generator+0x7c>)
     4f2:	785b      	ldrb	r3, [r3, #1]
     4f4:	1dfa      	adds	r2, r7, #7
     4f6:	7812      	ldrb	r2, [r2, #0]
     4f8:	429a      	cmp	r2, r3
     4fa:	d101      	bne.n	500 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
     4fc:	2300      	movs	r3, #0
     4fe:	e000      	b.n	502 <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     500:	231d      	movs	r3, #29
}
     502:	0018      	movs	r0, r3
     504:	46bd      	mov	sp, r7
     506:	b004      	add	sp, #16
     508:	bd80      	pop	{r7, pc}
     50a:	46c0      	nop			; (mov r8, r8)
     50c:	200000a0 	.word	0x200000a0
     510:	000003fd 	.word	0x000003fd
     514:	00003515 	.word	0x00003515
     518:	00003559 	.word	0x00003559

0000051c <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
     51c:	b580      	push	{r7, lr}
     51e:	b082      	sub	sp, #8
     520:	af00      	add	r7, sp, #0
     522:	6078      	str	r0, [r7, #4]
     524:	000a      	movs	r2, r1
     526:	1cfb      	adds	r3, r7, #3
     528:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
     52a:	687b      	ldr	r3, [r7, #4]
     52c:	4a4d      	ldr	r2, [pc, #308]	; (664 <_sercom_get_default_pad+0x148>)
     52e:	4293      	cmp	r3, r2
     530:	d03f      	beq.n	5b2 <_sercom_get_default_pad+0x96>
     532:	4a4c      	ldr	r2, [pc, #304]	; (664 <_sercom_get_default_pad+0x148>)
     534:	4293      	cmp	r3, r2
     536:	d806      	bhi.n	546 <_sercom_get_default_pad+0x2a>
     538:	4a4b      	ldr	r2, [pc, #300]	; (668 <_sercom_get_default_pad+0x14c>)
     53a:	4293      	cmp	r3, r2
     53c:	d00f      	beq.n	55e <_sercom_get_default_pad+0x42>
     53e:	4a4b      	ldr	r2, [pc, #300]	; (66c <_sercom_get_default_pad+0x150>)
     540:	4293      	cmp	r3, r2
     542:	d021      	beq.n	588 <_sercom_get_default_pad+0x6c>
     544:	e089      	b.n	65a <_sercom_get_default_pad+0x13e>
     546:	4a4a      	ldr	r2, [pc, #296]	; (670 <_sercom_get_default_pad+0x154>)
     548:	4293      	cmp	r3, r2
     54a:	d100      	bne.n	54e <_sercom_get_default_pad+0x32>
     54c:	e05b      	b.n	606 <_sercom_get_default_pad+0xea>
     54e:	4a49      	ldr	r2, [pc, #292]	; (674 <_sercom_get_default_pad+0x158>)
     550:	4293      	cmp	r3, r2
     552:	d100      	bne.n	556 <_sercom_get_default_pad+0x3a>
     554:	e06c      	b.n	630 <_sercom_get_default_pad+0x114>
     556:	4a48      	ldr	r2, [pc, #288]	; (678 <_sercom_get_default_pad+0x15c>)
     558:	4293      	cmp	r3, r2
     55a:	d03f      	beq.n	5dc <_sercom_get_default_pad+0xc0>
     55c:	e07d      	b.n	65a <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     55e:	1cfb      	adds	r3, r7, #3
     560:	781b      	ldrb	r3, [r3, #0]
     562:	2b01      	cmp	r3, #1
     564:	d00a      	beq.n	57c <_sercom_get_default_pad+0x60>
     566:	dc02      	bgt.n	56e <_sercom_get_default_pad+0x52>
     568:	2b00      	cmp	r3, #0
     56a:	d005      	beq.n	578 <_sercom_get_default_pad+0x5c>
     56c:	e075      	b.n	65a <_sercom_get_default_pad+0x13e>
     56e:	2b02      	cmp	r3, #2
     570:	d006      	beq.n	580 <_sercom_get_default_pad+0x64>
     572:	2b03      	cmp	r3, #3
     574:	d006      	beq.n	584 <_sercom_get_default_pad+0x68>
     576:	e070      	b.n	65a <_sercom_get_default_pad+0x13e>
     578:	4b40      	ldr	r3, [pc, #256]	; (67c <_sercom_get_default_pad+0x160>)
     57a:	e06f      	b.n	65c <_sercom_get_default_pad+0x140>
     57c:	4b40      	ldr	r3, [pc, #256]	; (680 <_sercom_get_default_pad+0x164>)
     57e:	e06d      	b.n	65c <_sercom_get_default_pad+0x140>
     580:	4b40      	ldr	r3, [pc, #256]	; (684 <_sercom_get_default_pad+0x168>)
     582:	e06b      	b.n	65c <_sercom_get_default_pad+0x140>
     584:	4b40      	ldr	r3, [pc, #256]	; (688 <_sercom_get_default_pad+0x16c>)
     586:	e069      	b.n	65c <_sercom_get_default_pad+0x140>
     588:	1cfb      	adds	r3, r7, #3
     58a:	781b      	ldrb	r3, [r3, #0]
     58c:	2b01      	cmp	r3, #1
     58e:	d00a      	beq.n	5a6 <_sercom_get_default_pad+0x8a>
     590:	dc02      	bgt.n	598 <_sercom_get_default_pad+0x7c>
     592:	2b00      	cmp	r3, #0
     594:	d005      	beq.n	5a2 <_sercom_get_default_pad+0x86>
     596:	e060      	b.n	65a <_sercom_get_default_pad+0x13e>
     598:	2b02      	cmp	r3, #2
     59a:	d006      	beq.n	5aa <_sercom_get_default_pad+0x8e>
     59c:	2b03      	cmp	r3, #3
     59e:	d006      	beq.n	5ae <_sercom_get_default_pad+0x92>
     5a0:	e05b      	b.n	65a <_sercom_get_default_pad+0x13e>
     5a2:	2303      	movs	r3, #3
     5a4:	e05a      	b.n	65c <_sercom_get_default_pad+0x140>
     5a6:	4b39      	ldr	r3, [pc, #228]	; (68c <_sercom_get_default_pad+0x170>)
     5a8:	e058      	b.n	65c <_sercom_get_default_pad+0x140>
     5aa:	4b39      	ldr	r3, [pc, #228]	; (690 <_sercom_get_default_pad+0x174>)
     5ac:	e056      	b.n	65c <_sercom_get_default_pad+0x140>
     5ae:	4b39      	ldr	r3, [pc, #228]	; (694 <_sercom_get_default_pad+0x178>)
     5b0:	e054      	b.n	65c <_sercom_get_default_pad+0x140>
     5b2:	1cfb      	adds	r3, r7, #3
     5b4:	781b      	ldrb	r3, [r3, #0]
     5b6:	2b01      	cmp	r3, #1
     5b8:	d00a      	beq.n	5d0 <_sercom_get_default_pad+0xb4>
     5ba:	dc02      	bgt.n	5c2 <_sercom_get_default_pad+0xa6>
     5bc:	2b00      	cmp	r3, #0
     5be:	d005      	beq.n	5cc <_sercom_get_default_pad+0xb0>
     5c0:	e04b      	b.n	65a <_sercom_get_default_pad+0x13e>
     5c2:	2b02      	cmp	r3, #2
     5c4:	d006      	beq.n	5d4 <_sercom_get_default_pad+0xb8>
     5c6:	2b03      	cmp	r3, #3
     5c8:	d006      	beq.n	5d8 <_sercom_get_default_pad+0xbc>
     5ca:	e046      	b.n	65a <_sercom_get_default_pad+0x13e>
     5cc:	4b32      	ldr	r3, [pc, #200]	; (698 <_sercom_get_default_pad+0x17c>)
     5ce:	e045      	b.n	65c <_sercom_get_default_pad+0x140>
     5d0:	4b32      	ldr	r3, [pc, #200]	; (69c <_sercom_get_default_pad+0x180>)
     5d2:	e043      	b.n	65c <_sercom_get_default_pad+0x140>
     5d4:	4b32      	ldr	r3, [pc, #200]	; (6a0 <_sercom_get_default_pad+0x184>)
     5d6:	e041      	b.n	65c <_sercom_get_default_pad+0x140>
     5d8:	4b32      	ldr	r3, [pc, #200]	; (6a4 <_sercom_get_default_pad+0x188>)
     5da:	e03f      	b.n	65c <_sercom_get_default_pad+0x140>
     5dc:	1cfb      	adds	r3, r7, #3
     5de:	781b      	ldrb	r3, [r3, #0]
     5e0:	2b01      	cmp	r3, #1
     5e2:	d00a      	beq.n	5fa <_sercom_get_default_pad+0xde>
     5e4:	dc02      	bgt.n	5ec <_sercom_get_default_pad+0xd0>
     5e6:	2b00      	cmp	r3, #0
     5e8:	d005      	beq.n	5f6 <_sercom_get_default_pad+0xda>
     5ea:	e036      	b.n	65a <_sercom_get_default_pad+0x13e>
     5ec:	2b02      	cmp	r3, #2
     5ee:	d006      	beq.n	5fe <_sercom_get_default_pad+0xe2>
     5f0:	2b03      	cmp	r3, #3
     5f2:	d006      	beq.n	602 <_sercom_get_default_pad+0xe6>
     5f4:	e031      	b.n	65a <_sercom_get_default_pad+0x13e>
     5f6:	4b2c      	ldr	r3, [pc, #176]	; (6a8 <_sercom_get_default_pad+0x18c>)
     5f8:	e030      	b.n	65c <_sercom_get_default_pad+0x140>
     5fa:	4b2c      	ldr	r3, [pc, #176]	; (6ac <_sercom_get_default_pad+0x190>)
     5fc:	e02e      	b.n	65c <_sercom_get_default_pad+0x140>
     5fe:	4b2c      	ldr	r3, [pc, #176]	; (6b0 <_sercom_get_default_pad+0x194>)
     600:	e02c      	b.n	65c <_sercom_get_default_pad+0x140>
     602:	4b2c      	ldr	r3, [pc, #176]	; (6b4 <_sercom_get_default_pad+0x198>)
     604:	e02a      	b.n	65c <_sercom_get_default_pad+0x140>
     606:	1cfb      	adds	r3, r7, #3
     608:	781b      	ldrb	r3, [r3, #0]
     60a:	2b01      	cmp	r3, #1
     60c:	d00a      	beq.n	624 <_sercom_get_default_pad+0x108>
     60e:	dc02      	bgt.n	616 <_sercom_get_default_pad+0xfa>
     610:	2b00      	cmp	r3, #0
     612:	d005      	beq.n	620 <_sercom_get_default_pad+0x104>
     614:	e021      	b.n	65a <_sercom_get_default_pad+0x13e>
     616:	2b02      	cmp	r3, #2
     618:	d006      	beq.n	628 <_sercom_get_default_pad+0x10c>
     61a:	2b03      	cmp	r3, #3
     61c:	d006      	beq.n	62c <_sercom_get_default_pad+0x110>
     61e:	e01c      	b.n	65a <_sercom_get_default_pad+0x13e>
     620:	4b25      	ldr	r3, [pc, #148]	; (6b8 <_sercom_get_default_pad+0x19c>)
     622:	e01b      	b.n	65c <_sercom_get_default_pad+0x140>
     624:	4b25      	ldr	r3, [pc, #148]	; (6bc <_sercom_get_default_pad+0x1a0>)
     626:	e019      	b.n	65c <_sercom_get_default_pad+0x140>
     628:	4b25      	ldr	r3, [pc, #148]	; (6c0 <_sercom_get_default_pad+0x1a4>)
     62a:	e017      	b.n	65c <_sercom_get_default_pad+0x140>
     62c:	4b25      	ldr	r3, [pc, #148]	; (6c4 <_sercom_get_default_pad+0x1a8>)
     62e:	e015      	b.n	65c <_sercom_get_default_pad+0x140>
     630:	1cfb      	adds	r3, r7, #3
     632:	781b      	ldrb	r3, [r3, #0]
     634:	2b01      	cmp	r3, #1
     636:	d00a      	beq.n	64e <_sercom_get_default_pad+0x132>
     638:	dc02      	bgt.n	640 <_sercom_get_default_pad+0x124>
     63a:	2b00      	cmp	r3, #0
     63c:	d005      	beq.n	64a <_sercom_get_default_pad+0x12e>
     63e:	e00c      	b.n	65a <_sercom_get_default_pad+0x13e>
     640:	2b02      	cmp	r3, #2
     642:	d006      	beq.n	652 <_sercom_get_default_pad+0x136>
     644:	2b03      	cmp	r3, #3
     646:	d006      	beq.n	656 <_sercom_get_default_pad+0x13a>
     648:	e007      	b.n	65a <_sercom_get_default_pad+0x13e>
     64a:	4b1f      	ldr	r3, [pc, #124]	; (6c8 <_sercom_get_default_pad+0x1ac>)
     64c:	e006      	b.n	65c <_sercom_get_default_pad+0x140>
     64e:	4b1f      	ldr	r3, [pc, #124]	; (6cc <_sercom_get_default_pad+0x1b0>)
     650:	e004      	b.n	65c <_sercom_get_default_pad+0x140>
     652:	4b1f      	ldr	r3, [pc, #124]	; (6d0 <_sercom_get_default_pad+0x1b4>)
     654:	e002      	b.n	65c <_sercom_get_default_pad+0x140>
     656:	4b1f      	ldr	r3, [pc, #124]	; (6d4 <_sercom_get_default_pad+0x1b8>)
     658:	e000      	b.n	65c <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
     65a:	2300      	movs	r3, #0
}
     65c:	0018      	movs	r0, r3
     65e:	46bd      	mov	sp, r7
     660:	b002      	add	sp, #8
     662:	bd80      	pop	{r7, pc}
     664:	42001000 	.word	0x42001000
     668:	42000800 	.word	0x42000800
     66c:	42000c00 	.word	0x42000c00
     670:	42001800 	.word	0x42001800
     674:	42001c00 	.word	0x42001c00
     678:	42001400 	.word	0x42001400
     67c:	00040003 	.word	0x00040003
     680:	00050003 	.word	0x00050003
     684:	00060003 	.word	0x00060003
     688:	00070003 	.word	0x00070003
     68c:	00010003 	.word	0x00010003
     690:	001e0003 	.word	0x001e0003
     694:	001f0003 	.word	0x001f0003
     698:	00080003 	.word	0x00080003
     69c:	00090003 	.word	0x00090003
     6a0:	000a0003 	.word	0x000a0003
     6a4:	000b0003 	.word	0x000b0003
     6a8:	00100003 	.word	0x00100003
     6ac:	00110003 	.word	0x00110003
     6b0:	00120003 	.word	0x00120003
     6b4:	00130003 	.word	0x00130003
     6b8:	000c0003 	.word	0x000c0003
     6bc:	000d0003 	.word	0x000d0003
     6c0:	000e0003 	.word	0x000e0003
     6c4:	000f0003 	.word	0x000f0003
     6c8:	00160003 	.word	0x00160003
     6cc:	00170003 	.word	0x00170003
     6d0:	00180003 	.word	0x00180003
     6d4:	00190003 	.word	0x00190003

000006d8 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     6d8:	b590      	push	{r4, r7, lr}
     6da:	b08b      	sub	sp, #44	; 0x2c
     6dc:	af00      	add	r7, sp, #0
     6de:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     6e0:	230c      	movs	r3, #12
     6e2:	18fb      	adds	r3, r7, r3
     6e4:	4a0f      	ldr	r2, [pc, #60]	; (724 <_sercom_get_sercom_inst_index+0x4c>)
     6e6:	ca13      	ldmia	r2!, {r0, r1, r4}
     6e8:	c313      	stmia	r3!, {r0, r1, r4}
     6ea:	ca13      	ldmia	r2!, {r0, r1, r4}
     6ec:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     6ee:	2300      	movs	r3, #0
     6f0:	627b      	str	r3, [r7, #36]	; 0x24
     6f2:	e00e      	b.n	712 <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     6f4:	230c      	movs	r3, #12
     6f6:	18fb      	adds	r3, r7, r3
     6f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     6fa:	0092      	lsls	r2, r2, #2
     6fc:	58d3      	ldr	r3, [r2, r3]
     6fe:	001a      	movs	r2, r3
     700:	687b      	ldr	r3, [r7, #4]
     702:	429a      	cmp	r2, r3
     704:	d102      	bne.n	70c <_sercom_get_sercom_inst_index+0x34>
			return i;
     706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     708:	b2db      	uxtb	r3, r3
     70a:	e006      	b.n	71a <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     70c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     70e:	3301      	adds	r3, #1
     710:	627b      	str	r3, [r7, #36]	; 0x24
     712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     714:	2b05      	cmp	r3, #5
     716:	d9ed      	bls.n	6f4 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     718:	2300      	movs	r3, #0
}
     71a:	0018      	movs	r0, r3
     71c:	46bd      	mov	sp, r7
     71e:	b00b      	add	sp, #44	; 0x2c
     720:	bd90      	pop	{r4, r7, pc}
     722:	46c0      	nop			; (mov r8, r8)
     724:	000073e4 	.word	0x000073e4

00000728 <bme280_spi_write>:



//enum status_code bme280_spi_send(uint8_t *data)
void bme280_spi_write(uint8_t *data,uint16_t length)
{
     728:	b580      	push	{r7, lr}
     72a:	b082      	sub	sp, #8
     72c:	af00      	add	r7, sp, #0
     72e:	6078      	str	r0, [r7, #4]
     730:	000a      	movs	r2, r1
     732:	1cbb      	adds	r3, r7, #2
     734:	801a      	strh	r2, [r3, #0]
	data[0] &= 0x7F;
     736:	687b      	ldr	r3, [r7, #4]
     738:	781b      	ldrb	r3, [r3, #0]
     73a:	227f      	movs	r2, #127	; 0x7f
     73c:	4013      	ands	r3, r2
     73e:	b2da      	uxtb	r2, r3
     740:	687b      	ldr	r3, [r7, #4]
     742:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&spi_master_instance,&bme280_slave_instance,true);
     744:	490b      	ldr	r1, [pc, #44]	; (774 <bme280_spi_write+0x4c>)
     746:	4b0c      	ldr	r3, [pc, #48]	; (778 <bme280_spi_write+0x50>)
     748:	2201      	movs	r2, #1
     74a:	0018      	movs	r0, r3
     74c:	4b0b      	ldr	r3, [pc, #44]	; (77c <bme280_spi_write+0x54>)
     74e:	4798      	blx	r3
	spi_write_buffer_wait(&spi_master_instance,data,length);
     750:	1cbb      	adds	r3, r7, #2
     752:	881a      	ldrh	r2, [r3, #0]
     754:	6879      	ldr	r1, [r7, #4]
     756:	4b08      	ldr	r3, [pc, #32]	; (778 <bme280_spi_write+0x50>)
     758:	0018      	movs	r0, r3
     75a:	4b09      	ldr	r3, [pc, #36]	; (780 <bme280_spi_write+0x58>)
     75c:	4798      	blx	r3
	spi_select_slave(&spi_master_instance,&bme280_slave_instance,false);
     75e:	4905      	ldr	r1, [pc, #20]	; (774 <bme280_spi_write+0x4c>)
     760:	4b05      	ldr	r3, [pc, #20]	; (778 <bme280_spi_write+0x50>)
     762:	2200      	movs	r2, #0
     764:	0018      	movs	r0, r3
     766:	4b05      	ldr	r3, [pc, #20]	; (77c <bme280_spi_write+0x54>)
     768:	4798      	blx	r3
}
     76a:	46c0      	nop			; (mov r8, r8)
     76c:	46bd      	mov	sp, r7
     76e:	b002      	add	sp, #8
     770:	bd80      	pop	{r7, pc}
     772:	46c0      	nop			; (mov r8, r8)
     774:	20000154 	.word	0x20000154
     778:	20000158 	.word	0x20000158
     77c:	0000273d 	.word	0x0000273d
     780:	0000282d 	.word	0x0000282d

00000784 <bme280_spi_read>:

void bme280_spi_read(uint8_t *data,uint16_t length,uint8_t reg)
{
     784:	b590      	push	{r4, r7, lr}
     786:	b085      	sub	sp, #20
     788:	af00      	add	r7, sp, #0
     78a:	6078      	str	r0, [r7, #4]
     78c:	0008      	movs	r0, r1
     78e:	0011      	movs	r1, r2
     790:	1cbb      	adds	r3, r7, #2
     792:	1c02      	adds	r2, r0, #0
     794:	801a      	strh	r2, [r3, #0]
     796:	1c7b      	adds	r3, r7, #1
     798:	1c0a      	adds	r2, r1, #0
     79a:	701a      	strb	r2, [r3, #0]
	uint16_t dummy = reg | 0x80;
     79c:	1c7b      	adds	r3, r7, #1
     79e:	781b      	ldrb	r3, [r3, #0]
     7a0:	2280      	movs	r2, #128	; 0x80
     7a2:	4252      	negs	r2, r2
     7a4:	4313      	orrs	r3, r2
     7a6:	b2db      	uxtb	r3, r3
     7a8:	b29a      	uxth	r2, r3
     7aa:	230e      	movs	r3, #14
     7ac:	18fb      	adds	r3, r7, r3
     7ae:	801a      	strh	r2, [r3, #0]
	spi_select_slave(&spi_master_instance,&bme280_slave_instance,true);
     7b0:	4910      	ldr	r1, [pc, #64]	; (7f4 <bme280_spi_read+0x70>)
     7b2:	4b11      	ldr	r3, [pc, #68]	; (7f8 <bme280_spi_read+0x74>)
     7b4:	2201      	movs	r2, #1
     7b6:	0018      	movs	r0, r3
     7b8:	4b10      	ldr	r3, [pc, #64]	; (7fc <bme280_spi_read+0x78>)
     7ba:	4798      	blx	r3
	spi_write_buffer_wait(&spi_master_instance,&dummy,1);
     7bc:	230e      	movs	r3, #14
     7be:	18f9      	adds	r1, r7, r3
     7c0:	4b0d      	ldr	r3, [pc, #52]	; (7f8 <bme280_spi_read+0x74>)
     7c2:	2201      	movs	r2, #1
     7c4:	0018      	movs	r0, r3
     7c6:	4b0e      	ldr	r3, [pc, #56]	; (800 <bme280_spi_read+0x7c>)
     7c8:	4798      	blx	r3
	spi_read_buffer_wait(&spi_master_instance,data,length,dummy);
     7ca:	230e      	movs	r3, #14
     7cc:	18fb      	adds	r3, r7, r3
     7ce:	881c      	ldrh	r4, [r3, #0]
     7d0:	1cbb      	adds	r3, r7, #2
     7d2:	881a      	ldrh	r2, [r3, #0]
     7d4:	6879      	ldr	r1, [r7, #4]
     7d6:	4808      	ldr	r0, [pc, #32]	; (7f8 <bme280_spi_read+0x74>)
     7d8:	0023      	movs	r3, r4
     7da:	4c0a      	ldr	r4, [pc, #40]	; (804 <bme280_spi_read+0x80>)
     7dc:	47a0      	blx	r4
	//spi_transceive_wait(&spi_master_instance,reg,data);
	spi_select_slave(&spi_master_instance,&bme280_slave_instance,false);
     7de:	4905      	ldr	r1, [pc, #20]	; (7f4 <bme280_spi_read+0x70>)
     7e0:	4b05      	ldr	r3, [pc, #20]	; (7f8 <bme280_spi_read+0x74>)
     7e2:	2200      	movs	r2, #0
     7e4:	0018      	movs	r0, r3
     7e6:	4b05      	ldr	r3, [pc, #20]	; (7fc <bme280_spi_read+0x78>)
     7e8:	4798      	blx	r3
}
     7ea:	46c0      	nop			; (mov r8, r8)
     7ec:	46bd      	mov	sp, r7
     7ee:	b005      	add	sp, #20
     7f0:	bd90      	pop	{r4, r7, pc}
     7f2:	46c0      	nop			; (mov r8, r8)
     7f4:	20000154 	.word	0x20000154
     7f8:	20000158 	.word	0x20000158
     7fc:	0000273d 	.word	0x0000273d
     800:	0000282d 	.word	0x0000282d
     804:	00002591 	.word	0x00002591

00000808 <bme280_read_temp>:

void bme280_read_temp(uint8_t *data)
{
     808:	b590      	push	{r4, r7, lr}
     80a:	b085      	sub	sp, #20
     80c:	af00      	add	r7, sp, #0
     80e:	6078      	str	r0, [r7, #4]
	uint16_t dummy = 0xFA | 0x80;
     810:	230e      	movs	r3, #14
     812:	18fb      	adds	r3, r7, r3
     814:	22fa      	movs	r2, #250	; 0xfa
     816:	801a      	strh	r2, [r3, #0]
	spi_select_slave(&spi_master_instance,&bme280_slave_instance,true);
     818:	490e      	ldr	r1, [pc, #56]	; (854 <bme280_read_temp+0x4c>)
     81a:	4b0f      	ldr	r3, [pc, #60]	; (858 <bme280_read_temp+0x50>)
     81c:	2201      	movs	r2, #1
     81e:	0018      	movs	r0, r3
     820:	4b0e      	ldr	r3, [pc, #56]	; (85c <bme280_read_temp+0x54>)
     822:	4798      	blx	r3
	spi_write_buffer_wait(&spi_master_instance,&dummy,1);
     824:	230e      	movs	r3, #14
     826:	18f9      	adds	r1, r7, r3
     828:	4b0b      	ldr	r3, [pc, #44]	; (858 <bme280_read_temp+0x50>)
     82a:	2201      	movs	r2, #1
     82c:	0018      	movs	r0, r3
     82e:	4b0c      	ldr	r3, [pc, #48]	; (860 <bme280_read_temp+0x58>)
     830:	4798      	blx	r3
	spi_read_buffer_wait(&spi_master_instance,data,3,0x00);
     832:	6879      	ldr	r1, [r7, #4]
     834:	4808      	ldr	r0, [pc, #32]	; (858 <bme280_read_temp+0x50>)
     836:	2300      	movs	r3, #0
     838:	2203      	movs	r2, #3
     83a:	4c0a      	ldr	r4, [pc, #40]	; (864 <bme280_read_temp+0x5c>)
     83c:	47a0      	blx	r4
	//spi_transceive_wait(&spi_master_instance,reg,data);
	spi_select_slave(&spi_master_instance,&bme280_slave_instance,false);
     83e:	4905      	ldr	r1, [pc, #20]	; (854 <bme280_read_temp+0x4c>)
     840:	4b05      	ldr	r3, [pc, #20]	; (858 <bme280_read_temp+0x50>)
     842:	2200      	movs	r2, #0
     844:	0018      	movs	r0, r3
     846:	4b05      	ldr	r3, [pc, #20]	; (85c <bme280_read_temp+0x54>)
     848:	4798      	blx	r3
}
     84a:	46c0      	nop			; (mov r8, r8)
     84c:	46bd      	mov	sp, r7
     84e:	b005      	add	sp, #20
     850:	bd90      	pop	{r4, r7, pc}
     852:	46c0      	nop			; (mov r8, r8)
     854:	20000154 	.word	0x20000154
     858:	20000158 	.word	0x20000158
     85c:	0000273d 	.word	0x0000273d
     860:	0000282d 	.word	0x0000282d
     864:	00002591 	.word	0x00002591

00000868 <bme280_read_pres>:

void bme280_read_pres(uint8_t *data)
{
     868:	b590      	push	{r4, r7, lr}
     86a:	b085      	sub	sp, #20
     86c:	af00      	add	r7, sp, #0
     86e:	6078      	str	r0, [r7, #4]
	uint16_t dummy = 0xF7 | 0x80;
     870:	230e      	movs	r3, #14
     872:	18fb      	adds	r3, r7, r3
     874:	22f7      	movs	r2, #247	; 0xf7
     876:	801a      	strh	r2, [r3, #0]
	spi_select_slave(&spi_master_instance,&bme280_slave_instance,true);
     878:	490e      	ldr	r1, [pc, #56]	; (8b4 <bme280_read_pres+0x4c>)
     87a:	4b0f      	ldr	r3, [pc, #60]	; (8b8 <bme280_read_pres+0x50>)
     87c:	2201      	movs	r2, #1
     87e:	0018      	movs	r0, r3
     880:	4b0e      	ldr	r3, [pc, #56]	; (8bc <bme280_read_pres+0x54>)
     882:	4798      	blx	r3
	spi_write_buffer_wait(&spi_master_instance,&dummy,1);
     884:	230e      	movs	r3, #14
     886:	18f9      	adds	r1, r7, r3
     888:	4b0b      	ldr	r3, [pc, #44]	; (8b8 <bme280_read_pres+0x50>)
     88a:	2201      	movs	r2, #1
     88c:	0018      	movs	r0, r3
     88e:	4b0c      	ldr	r3, [pc, #48]	; (8c0 <bme280_read_pres+0x58>)
     890:	4798      	blx	r3
	spi_read_buffer_wait(&spi_master_instance,data,3,0x00);
     892:	6879      	ldr	r1, [r7, #4]
     894:	4808      	ldr	r0, [pc, #32]	; (8b8 <bme280_read_pres+0x50>)
     896:	2300      	movs	r3, #0
     898:	2203      	movs	r2, #3
     89a:	4c0a      	ldr	r4, [pc, #40]	; (8c4 <bme280_read_pres+0x5c>)
     89c:	47a0      	blx	r4
	//spi_transceive_wait(&spi_master_instance,reg,data);
	spi_select_slave(&spi_master_instance,&bme280_slave_instance,false);
     89e:	4905      	ldr	r1, [pc, #20]	; (8b4 <bme280_read_pres+0x4c>)
     8a0:	4b05      	ldr	r3, [pc, #20]	; (8b8 <bme280_read_pres+0x50>)
     8a2:	2200      	movs	r2, #0
     8a4:	0018      	movs	r0, r3
     8a6:	4b05      	ldr	r3, [pc, #20]	; (8bc <bme280_read_pres+0x54>)
     8a8:	4798      	blx	r3
}
     8aa:	46c0      	nop			; (mov r8, r8)
     8ac:	46bd      	mov	sp, r7
     8ae:	b005      	add	sp, #20
     8b0:	bd90      	pop	{r4, r7, pc}
     8b2:	46c0      	nop			; (mov r8, r8)
     8b4:	20000154 	.word	0x20000154
     8b8:	20000158 	.word	0x20000158
     8bc:	0000273d 	.word	0x0000273d
     8c0:	0000282d 	.word	0x0000282d
     8c4:	00002591 	.word	0x00002591

000008c8 <bme280_read_hum>:

void bme280_read_hum(uint8_t *data)
{
     8c8:	b590      	push	{r4, r7, lr}
     8ca:	b085      	sub	sp, #20
     8cc:	af00      	add	r7, sp, #0
     8ce:	6078      	str	r0, [r7, #4]
	uint16_t dummy = 0xFD | 0x80;
     8d0:	230e      	movs	r3, #14
     8d2:	18fb      	adds	r3, r7, r3
     8d4:	22fd      	movs	r2, #253	; 0xfd
     8d6:	801a      	strh	r2, [r3, #0]
	spi_select_slave(&spi_master_instance,&bme280_slave_instance,true);
     8d8:	490e      	ldr	r1, [pc, #56]	; (914 <bme280_read_hum+0x4c>)
     8da:	4b0f      	ldr	r3, [pc, #60]	; (918 <bme280_read_hum+0x50>)
     8dc:	2201      	movs	r2, #1
     8de:	0018      	movs	r0, r3
     8e0:	4b0e      	ldr	r3, [pc, #56]	; (91c <bme280_read_hum+0x54>)
     8e2:	4798      	blx	r3
	spi_write_buffer_wait(&spi_master_instance,&dummy,1);
     8e4:	230e      	movs	r3, #14
     8e6:	18f9      	adds	r1, r7, r3
     8e8:	4b0b      	ldr	r3, [pc, #44]	; (918 <bme280_read_hum+0x50>)
     8ea:	2201      	movs	r2, #1
     8ec:	0018      	movs	r0, r3
     8ee:	4b0c      	ldr	r3, [pc, #48]	; (920 <bme280_read_hum+0x58>)
     8f0:	4798      	blx	r3
	spi_read_buffer_wait(&spi_master_instance,data,2,0x00);
     8f2:	6879      	ldr	r1, [r7, #4]
     8f4:	4808      	ldr	r0, [pc, #32]	; (918 <bme280_read_hum+0x50>)
     8f6:	2300      	movs	r3, #0
     8f8:	2202      	movs	r2, #2
     8fa:	4c0a      	ldr	r4, [pc, #40]	; (924 <bme280_read_hum+0x5c>)
     8fc:	47a0      	blx	r4
	//spi_transceive_wait(&spi_master_instance,reg,data);
	spi_select_slave(&spi_master_instance,&bme280_slave_instance,false);
     8fe:	4905      	ldr	r1, [pc, #20]	; (914 <bme280_read_hum+0x4c>)
     900:	4b05      	ldr	r3, [pc, #20]	; (918 <bme280_read_hum+0x50>)
     902:	2200      	movs	r2, #0
     904:	0018      	movs	r0, r3
     906:	4b05      	ldr	r3, [pc, #20]	; (91c <bme280_read_hum+0x54>)
     908:	4798      	blx	r3
}
     90a:	46c0      	nop			; (mov r8, r8)
     90c:	46bd      	mov	sp, r7
     90e:	b005      	add	sp, #20
     910:	bd90      	pop	{r4, r7, pc}
     912:	46c0      	nop			; (mov r8, r8)
     914:	20000154 	.word	0x20000154
     918:	20000158 	.word	0x20000158
     91c:	0000273d 	.word	0x0000273d
     920:	0000282d 	.word	0x0000282d
     924:	00002591 	.word	0x00002591

00000928 <bme280_get_cal_data>:

void bme280_get_cal_data(void)
{
     928:	b590      	push	{r4, r7, lr}
     92a:	b083      	sub	sp, #12
     92c:	af00      	add	r7, sp, #0
	//uint8_t cal_data[42];
	uint16_t reg = 0x88;
     92e:	1dbb      	adds	r3, r7, #6
     930:	2288      	movs	r2, #136	; 0x88
     932:	801a      	strh	r2, [r3, #0]
	spi_select_slave(&spi_master_instance,&bme280_slave_instance,true);
     934:	4915      	ldr	r1, [pc, #84]	; (98c <bme280_get_cal_data+0x64>)
     936:	4b16      	ldr	r3, [pc, #88]	; (990 <bme280_get_cal_data+0x68>)
     938:	2201      	movs	r2, #1
     93a:	0018      	movs	r0, r3
     93c:	4b15      	ldr	r3, [pc, #84]	; (994 <bme280_get_cal_data+0x6c>)
     93e:	4798      	blx	r3
	spi_write_buffer_wait(&spi_master_instance,&reg,1);
     940:	1db9      	adds	r1, r7, #6
     942:	4b13      	ldr	r3, [pc, #76]	; (990 <bme280_get_cal_data+0x68>)
     944:	2201      	movs	r2, #1
     946:	0018      	movs	r0, r3
     948:	4b13      	ldr	r3, [pc, #76]	; (998 <bme280_get_cal_data+0x70>)
     94a:	4798      	blx	r3
	spi_read_buffer_wait(&spi_master_instance,&cal_data,26,0x00);
     94c:	4913      	ldr	r1, [pc, #76]	; (99c <bme280_get_cal_data+0x74>)
     94e:	4810      	ldr	r0, [pc, #64]	; (990 <bme280_get_cal_data+0x68>)
     950:	2300      	movs	r3, #0
     952:	221a      	movs	r2, #26
     954:	4c12      	ldr	r4, [pc, #72]	; (9a0 <bme280_get_cal_data+0x78>)
     956:	47a0      	blx	r4
	reg = 0xE1;
     958:	1dbb      	adds	r3, r7, #6
     95a:	22e1      	movs	r2, #225	; 0xe1
     95c:	801a      	strh	r2, [r3, #0]
	spi_write_buffer_wait(&spi_master_instance,&reg,1);
     95e:	1db9      	adds	r1, r7, #6
     960:	4b0b      	ldr	r3, [pc, #44]	; (990 <bme280_get_cal_data+0x68>)
     962:	2201      	movs	r2, #1
     964:	0018      	movs	r0, r3
     966:	4b0c      	ldr	r3, [pc, #48]	; (998 <bme280_get_cal_data+0x70>)
     968:	4798      	blx	r3
	spi_read_buffer_wait(&spi_master_instance,&cal_data[26],7,0x00);
     96a:	490e      	ldr	r1, [pc, #56]	; (9a4 <bme280_get_cal_data+0x7c>)
     96c:	4808      	ldr	r0, [pc, #32]	; (990 <bme280_get_cal_data+0x68>)
     96e:	2300      	movs	r3, #0
     970:	2207      	movs	r2, #7
     972:	4c0b      	ldr	r4, [pc, #44]	; (9a0 <bme280_get_cal_data+0x78>)
     974:	47a0      	blx	r4
	spi_select_slave(&spi_master_instance,&bme280_slave_instance,false);
     976:	4905      	ldr	r1, [pc, #20]	; (98c <bme280_get_cal_data+0x64>)
     978:	4b05      	ldr	r3, [pc, #20]	; (990 <bme280_get_cal_data+0x68>)
     97a:	2200      	movs	r2, #0
     97c:	0018      	movs	r0, r3
     97e:	4b05      	ldr	r3, [pc, #20]	; (994 <bme280_get_cal_data+0x6c>)
     980:	4798      	blx	r3
}
     982:	46c0      	nop			; (mov r8, r8)
     984:	46bd      	mov	sp, r7
     986:	b003      	add	sp, #12
     988:	bd90      	pop	{r4, r7, pc}
     98a:	46c0      	nop			; (mov r8, r8)
     98c:	20000154 	.word	0x20000154
     990:	20000158 	.word	0x20000158
     994:	0000273d 	.word	0x0000273d
     998:	0000282d 	.word	0x0000282d
     99c:	20000108 	.word	0x20000108
     9a0:	00002591 	.word	0x00002591
     9a4:	20000122 	.word	0x20000122

000009a8 <bme280_calc_cal>:

void bme280_calc_cal(void)
{
     9a8:	b580      	push	{r7, lr}
     9aa:	af00      	add	r7, sp, #0
	T1 = (cal_data[1] << 8)+cal_data[0];
     9ac:	4b6c      	ldr	r3, [pc, #432]	; (b60 <bme280_calc_cal+0x1b8>)
     9ae:	785b      	ldrb	r3, [r3, #1]
     9b0:	b29b      	uxth	r3, r3
     9b2:	021b      	lsls	r3, r3, #8
     9b4:	b29a      	uxth	r2, r3
     9b6:	4b6a      	ldr	r3, [pc, #424]	; (b60 <bme280_calc_cal+0x1b8>)
     9b8:	781b      	ldrb	r3, [r3, #0]
     9ba:	b29b      	uxth	r3, r3
     9bc:	18d3      	adds	r3, r2, r3
     9be:	b29a      	uxth	r2, r3
     9c0:	4b68      	ldr	r3, [pc, #416]	; (b64 <bme280_calc_cal+0x1bc>)
     9c2:	801a      	strh	r2, [r3, #0]
	T2 = (cal_data[3] << 8)+cal_data[2];
     9c4:	4b66      	ldr	r3, [pc, #408]	; (b60 <bme280_calc_cal+0x1b8>)
     9c6:	78db      	ldrb	r3, [r3, #3]
     9c8:	b29b      	uxth	r3, r3
     9ca:	021b      	lsls	r3, r3, #8
     9cc:	b29a      	uxth	r2, r3
     9ce:	4b64      	ldr	r3, [pc, #400]	; (b60 <bme280_calc_cal+0x1b8>)
     9d0:	789b      	ldrb	r3, [r3, #2]
     9d2:	b29b      	uxth	r3, r3
     9d4:	18d3      	adds	r3, r2, r3
     9d6:	b29b      	uxth	r3, r3
     9d8:	b21a      	sxth	r2, r3
     9da:	4b63      	ldr	r3, [pc, #396]	; (b68 <bme280_calc_cal+0x1c0>)
     9dc:	801a      	strh	r2, [r3, #0]
	T3 = (cal_data[5] << 8)+cal_data[4];
     9de:	4b60      	ldr	r3, [pc, #384]	; (b60 <bme280_calc_cal+0x1b8>)
     9e0:	795b      	ldrb	r3, [r3, #5]
     9e2:	b29b      	uxth	r3, r3
     9e4:	021b      	lsls	r3, r3, #8
     9e6:	b29a      	uxth	r2, r3
     9e8:	4b5d      	ldr	r3, [pc, #372]	; (b60 <bme280_calc_cal+0x1b8>)
     9ea:	791b      	ldrb	r3, [r3, #4]
     9ec:	b29b      	uxth	r3, r3
     9ee:	18d3      	adds	r3, r2, r3
     9f0:	b29b      	uxth	r3, r3
     9f2:	b21a      	sxth	r2, r3
     9f4:	4b5d      	ldr	r3, [pc, #372]	; (b6c <bme280_calc_cal+0x1c4>)
     9f6:	801a      	strh	r2, [r3, #0]
	
	P1 = (cal_data[7] << 8)+cal_data[6];
     9f8:	4b59      	ldr	r3, [pc, #356]	; (b60 <bme280_calc_cal+0x1b8>)
     9fa:	79db      	ldrb	r3, [r3, #7]
     9fc:	b29b      	uxth	r3, r3
     9fe:	021b      	lsls	r3, r3, #8
     a00:	b29a      	uxth	r2, r3
     a02:	4b57      	ldr	r3, [pc, #348]	; (b60 <bme280_calc_cal+0x1b8>)
     a04:	799b      	ldrb	r3, [r3, #6]
     a06:	b29b      	uxth	r3, r3
     a08:	18d3      	adds	r3, r2, r3
     a0a:	b29a      	uxth	r2, r3
     a0c:	4b58      	ldr	r3, [pc, #352]	; (b70 <bme280_calc_cal+0x1c8>)
     a0e:	801a      	strh	r2, [r3, #0]
	P2 = (cal_data[9] << 8)+cal_data[8];
     a10:	4b53      	ldr	r3, [pc, #332]	; (b60 <bme280_calc_cal+0x1b8>)
     a12:	7a5b      	ldrb	r3, [r3, #9]
     a14:	b29b      	uxth	r3, r3
     a16:	021b      	lsls	r3, r3, #8
     a18:	b29a      	uxth	r2, r3
     a1a:	4b51      	ldr	r3, [pc, #324]	; (b60 <bme280_calc_cal+0x1b8>)
     a1c:	7a1b      	ldrb	r3, [r3, #8]
     a1e:	b29b      	uxth	r3, r3
     a20:	18d3      	adds	r3, r2, r3
     a22:	b29b      	uxth	r3, r3
     a24:	b21a      	sxth	r2, r3
     a26:	4b53      	ldr	r3, [pc, #332]	; (b74 <bme280_calc_cal+0x1cc>)
     a28:	801a      	strh	r2, [r3, #0]
	P3 = (cal_data[11] << 8)+cal_data[10];
     a2a:	4b4d      	ldr	r3, [pc, #308]	; (b60 <bme280_calc_cal+0x1b8>)
     a2c:	7adb      	ldrb	r3, [r3, #11]
     a2e:	b29b      	uxth	r3, r3
     a30:	021b      	lsls	r3, r3, #8
     a32:	b29a      	uxth	r2, r3
     a34:	4b4a      	ldr	r3, [pc, #296]	; (b60 <bme280_calc_cal+0x1b8>)
     a36:	7a9b      	ldrb	r3, [r3, #10]
     a38:	b29b      	uxth	r3, r3
     a3a:	18d3      	adds	r3, r2, r3
     a3c:	b29b      	uxth	r3, r3
     a3e:	b21a      	sxth	r2, r3
     a40:	4b4d      	ldr	r3, [pc, #308]	; (b78 <bme280_calc_cal+0x1d0>)
     a42:	801a      	strh	r2, [r3, #0]
	P4 = (cal_data[13] << 8)+cal_data[12];
     a44:	4b46      	ldr	r3, [pc, #280]	; (b60 <bme280_calc_cal+0x1b8>)
     a46:	7b5b      	ldrb	r3, [r3, #13]
     a48:	b29b      	uxth	r3, r3
     a4a:	021b      	lsls	r3, r3, #8
     a4c:	b29a      	uxth	r2, r3
     a4e:	4b44      	ldr	r3, [pc, #272]	; (b60 <bme280_calc_cal+0x1b8>)
     a50:	7b1b      	ldrb	r3, [r3, #12]
     a52:	b29b      	uxth	r3, r3
     a54:	18d3      	adds	r3, r2, r3
     a56:	b29b      	uxth	r3, r3
     a58:	b21a      	sxth	r2, r3
     a5a:	4b48      	ldr	r3, [pc, #288]	; (b7c <bme280_calc_cal+0x1d4>)
     a5c:	801a      	strh	r2, [r3, #0]
	P5 = (cal_data[15] << 8)+cal_data[14];
     a5e:	4b40      	ldr	r3, [pc, #256]	; (b60 <bme280_calc_cal+0x1b8>)
     a60:	7bdb      	ldrb	r3, [r3, #15]
     a62:	b29b      	uxth	r3, r3
     a64:	021b      	lsls	r3, r3, #8
     a66:	b29a      	uxth	r2, r3
     a68:	4b3d      	ldr	r3, [pc, #244]	; (b60 <bme280_calc_cal+0x1b8>)
     a6a:	7b9b      	ldrb	r3, [r3, #14]
     a6c:	b29b      	uxth	r3, r3
     a6e:	18d3      	adds	r3, r2, r3
     a70:	b29b      	uxth	r3, r3
     a72:	b21a      	sxth	r2, r3
     a74:	4b42      	ldr	r3, [pc, #264]	; (b80 <bme280_calc_cal+0x1d8>)
     a76:	801a      	strh	r2, [r3, #0]
	P6 = (cal_data[17] << 8)+cal_data[16];
     a78:	4b39      	ldr	r3, [pc, #228]	; (b60 <bme280_calc_cal+0x1b8>)
     a7a:	7c5b      	ldrb	r3, [r3, #17]
     a7c:	b29b      	uxth	r3, r3
     a7e:	021b      	lsls	r3, r3, #8
     a80:	b29a      	uxth	r2, r3
     a82:	4b37      	ldr	r3, [pc, #220]	; (b60 <bme280_calc_cal+0x1b8>)
     a84:	7c1b      	ldrb	r3, [r3, #16]
     a86:	b29b      	uxth	r3, r3
     a88:	18d3      	adds	r3, r2, r3
     a8a:	b29b      	uxth	r3, r3
     a8c:	b21a      	sxth	r2, r3
     a8e:	4b3d      	ldr	r3, [pc, #244]	; (b84 <bme280_calc_cal+0x1dc>)
     a90:	801a      	strh	r2, [r3, #0]
	P7 = (cal_data[19] << 8)+cal_data[18];
     a92:	4b33      	ldr	r3, [pc, #204]	; (b60 <bme280_calc_cal+0x1b8>)
     a94:	7cdb      	ldrb	r3, [r3, #19]
     a96:	b29b      	uxth	r3, r3
     a98:	021b      	lsls	r3, r3, #8
     a9a:	b29a      	uxth	r2, r3
     a9c:	4b30      	ldr	r3, [pc, #192]	; (b60 <bme280_calc_cal+0x1b8>)
     a9e:	7c9b      	ldrb	r3, [r3, #18]
     aa0:	b29b      	uxth	r3, r3
     aa2:	18d3      	adds	r3, r2, r3
     aa4:	b29b      	uxth	r3, r3
     aa6:	b21a      	sxth	r2, r3
     aa8:	4b37      	ldr	r3, [pc, #220]	; (b88 <bme280_calc_cal+0x1e0>)
     aaa:	801a      	strh	r2, [r3, #0]
	P8 = (cal_data[21] << 8)+cal_data[20];
     aac:	4b2c      	ldr	r3, [pc, #176]	; (b60 <bme280_calc_cal+0x1b8>)
     aae:	7d5b      	ldrb	r3, [r3, #21]
     ab0:	b29b      	uxth	r3, r3
     ab2:	021b      	lsls	r3, r3, #8
     ab4:	b29a      	uxth	r2, r3
     ab6:	4b2a      	ldr	r3, [pc, #168]	; (b60 <bme280_calc_cal+0x1b8>)
     ab8:	7d1b      	ldrb	r3, [r3, #20]
     aba:	b29b      	uxth	r3, r3
     abc:	18d3      	adds	r3, r2, r3
     abe:	b29b      	uxth	r3, r3
     ac0:	b21a      	sxth	r2, r3
     ac2:	4b32      	ldr	r3, [pc, #200]	; (b8c <bme280_calc_cal+0x1e4>)
     ac4:	801a      	strh	r2, [r3, #0]
	P9 = (cal_data[23] << 8)+cal_data[22];
     ac6:	4b26      	ldr	r3, [pc, #152]	; (b60 <bme280_calc_cal+0x1b8>)
     ac8:	7ddb      	ldrb	r3, [r3, #23]
     aca:	b29b      	uxth	r3, r3
     acc:	021b      	lsls	r3, r3, #8
     ace:	b29a      	uxth	r2, r3
     ad0:	4b23      	ldr	r3, [pc, #140]	; (b60 <bme280_calc_cal+0x1b8>)
     ad2:	7d9b      	ldrb	r3, [r3, #22]
     ad4:	b29b      	uxth	r3, r3
     ad6:	18d3      	adds	r3, r2, r3
     ad8:	b29b      	uxth	r3, r3
     ada:	b21a      	sxth	r2, r3
     adc:	4b2c      	ldr	r3, [pc, #176]	; (b90 <bme280_calc_cal+0x1e8>)
     ade:	801a      	strh	r2, [r3, #0]
	
	H1 = cal_data[24];
     ae0:	4b1f      	ldr	r3, [pc, #124]	; (b60 <bme280_calc_cal+0x1b8>)
     ae2:	7e1a      	ldrb	r2, [r3, #24]
     ae4:	4b2b      	ldr	r3, [pc, #172]	; (b94 <bme280_calc_cal+0x1ec>)
     ae6:	701a      	strb	r2, [r3, #0]
	H2 = (cal_data[26] << 8)+cal_data[25];
     ae8:	4b1d      	ldr	r3, [pc, #116]	; (b60 <bme280_calc_cal+0x1b8>)
     aea:	7e9b      	ldrb	r3, [r3, #26]
     aec:	b29b      	uxth	r3, r3
     aee:	021b      	lsls	r3, r3, #8
     af0:	b29a      	uxth	r2, r3
     af2:	4b1b      	ldr	r3, [pc, #108]	; (b60 <bme280_calc_cal+0x1b8>)
     af4:	7e5b      	ldrb	r3, [r3, #25]
     af6:	b29b      	uxth	r3, r3
     af8:	18d3      	adds	r3, r2, r3
     afa:	b29b      	uxth	r3, r3
     afc:	b21a      	sxth	r2, r3
     afe:	4b26      	ldr	r3, [pc, #152]	; (b98 <bme280_calc_cal+0x1f0>)
     b00:	801a      	strh	r2, [r3, #0]
	H3 = cal_data[27];
     b02:	4b17      	ldr	r3, [pc, #92]	; (b60 <bme280_calc_cal+0x1b8>)
     b04:	7eda      	ldrb	r2, [r3, #27]
     b06:	4b25      	ldr	r3, [pc, #148]	; (b9c <bme280_calc_cal+0x1f4>)
     b08:	701a      	strb	r2, [r3, #0]
	H4 = (cal_data[29] << 4)+(cal_data[28] & 0x0F);
     b0a:	4b15      	ldr	r3, [pc, #84]	; (b60 <bme280_calc_cal+0x1b8>)
     b0c:	7f5b      	ldrb	r3, [r3, #29]
     b0e:	b29b      	uxth	r3, r3
     b10:	011b      	lsls	r3, r3, #4
     b12:	b29a      	uxth	r2, r3
     b14:	4b12      	ldr	r3, [pc, #72]	; (b60 <bme280_calc_cal+0x1b8>)
     b16:	7f1b      	ldrb	r3, [r3, #28]
     b18:	b29b      	uxth	r3, r3
     b1a:	210f      	movs	r1, #15
     b1c:	400b      	ands	r3, r1
     b1e:	b29b      	uxth	r3, r3
     b20:	18d3      	adds	r3, r2, r3
     b22:	b29b      	uxth	r3, r3
     b24:	b21a      	sxth	r2, r3
     b26:	4b1e      	ldr	r3, [pc, #120]	; (ba0 <bme280_calc_cal+0x1f8>)
     b28:	801a      	strh	r2, [r3, #0]
	H5 = (cal_data[31] << 4)+((cal_data[30] >> 4) & 0x0F);
     b2a:	4b0d      	ldr	r3, [pc, #52]	; (b60 <bme280_calc_cal+0x1b8>)
     b2c:	7fdb      	ldrb	r3, [r3, #31]
     b2e:	b29b      	uxth	r3, r3
     b30:	011b      	lsls	r3, r3, #4
     b32:	b29a      	uxth	r2, r3
     b34:	4b0a      	ldr	r3, [pc, #40]	; (b60 <bme280_calc_cal+0x1b8>)
     b36:	7f9b      	ldrb	r3, [r3, #30]
     b38:	091b      	lsrs	r3, r3, #4
     b3a:	b2db      	uxtb	r3, r3
     b3c:	b29b      	uxth	r3, r3
     b3e:	210f      	movs	r1, #15
     b40:	400b      	ands	r3, r1
     b42:	b29b      	uxth	r3, r3
     b44:	18d3      	adds	r3, r2, r3
     b46:	b29b      	uxth	r3, r3
     b48:	b21a      	sxth	r2, r3
     b4a:	4b16      	ldr	r3, [pc, #88]	; (ba4 <bme280_calc_cal+0x1fc>)
     b4c:	801a      	strh	r2, [r3, #0]
	H6 = cal_data[32];
     b4e:	4b04      	ldr	r3, [pc, #16]	; (b60 <bme280_calc_cal+0x1b8>)
     b50:	2220      	movs	r2, #32
     b52:	5c9b      	ldrb	r3, [r3, r2]
     b54:	b25a      	sxtb	r2, r3
     b56:	4b14      	ldr	r3, [pc, #80]	; (ba8 <bme280_calc_cal+0x200>)
     b58:	701a      	strb	r2, [r3, #0]
}
     b5a:	46c0      	nop			; (mov r8, r8)
     b5c:	46bd      	mov	sp, r7
     b5e:	bd80      	pop	{r7, pc}
     b60:	20000108 	.word	0x20000108
     b64:	20000150 	.word	0x20000150
     b68:	20000104 	.word	0x20000104
     b6c:	20000142 	.word	0x20000142
     b70:	20000132 	.word	0x20000132
     b74:	2000013e 	.word	0x2000013e
     b78:	20000152 	.word	0x20000152
     b7c:	20000146 	.word	0x20000146
     b80:	20000166 	.word	0x20000166
     b84:	2000013a 	.word	0x2000013a
     b88:	20000164 	.word	0x20000164
     b8c:	20000138 	.word	0x20000138
     b90:	20000148 	.word	0x20000148
     b94:	2000016a 	.word	0x2000016a
     b98:	20000168 	.word	0x20000168
     b9c:	2000014a 	.word	0x2000014a
     ba0:	20000106 	.word	0x20000106
     ba4:	20000144 	.word	0x20000144
     ba8:	20000140 	.word	0x20000140

00000bac <bme280_calc_temp>:

int32_t bme280_calc_temp(int32_t read_temp)
{
     bac:	b580      	push	{r7, lr}
     bae:	b086      	sub	sp, #24
     bb0:	af00      	add	r7, sp, #0
     bb2:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 = ((((read_temp>>3) - ((int32_t)T1<<1))) * ((int32_t)T2)) >> 11;
     bb4:	687b      	ldr	r3, [r7, #4]
     bb6:	10da      	asrs	r2, r3, #3
     bb8:	4b16      	ldr	r3, [pc, #88]	; (c14 <bme280_calc_temp+0x68>)
     bba:	881b      	ldrh	r3, [r3, #0]
     bbc:	005b      	lsls	r3, r3, #1
     bbe:	1ad3      	subs	r3, r2, r3
     bc0:	4a15      	ldr	r2, [pc, #84]	; (c18 <bme280_calc_temp+0x6c>)
     bc2:	2100      	movs	r1, #0
     bc4:	5e52      	ldrsh	r2, [r2, r1]
     bc6:	4353      	muls	r3, r2
     bc8:	12db      	asrs	r3, r3, #11
     bca:	617b      	str	r3, [r7, #20]
	var2 = (((((read_temp>>4) - ((int32_t)T1)) * ((read_temp>>4) - ((int32_t)T1))) >> 12) *	((int32_t)T3)) >> 14;
     bcc:	687b      	ldr	r3, [r7, #4]
     bce:	111b      	asrs	r3, r3, #4
     bd0:	4a10      	ldr	r2, [pc, #64]	; (c14 <bme280_calc_temp+0x68>)
     bd2:	8812      	ldrh	r2, [r2, #0]
     bd4:	1a9b      	subs	r3, r3, r2
     bd6:	687a      	ldr	r2, [r7, #4]
     bd8:	1112      	asrs	r2, r2, #4
     bda:	490e      	ldr	r1, [pc, #56]	; (c14 <bme280_calc_temp+0x68>)
     bdc:	8809      	ldrh	r1, [r1, #0]
     bde:	1a52      	subs	r2, r2, r1
     be0:	4353      	muls	r3, r2
     be2:	131b      	asrs	r3, r3, #12
     be4:	4a0d      	ldr	r2, [pc, #52]	; (c1c <bme280_calc_temp+0x70>)
     be6:	2100      	movs	r1, #0
     be8:	5e52      	ldrsh	r2, [r2, r1]
     bea:	4353      	muls	r3, r2
     bec:	139b      	asrs	r3, r3, #14
     bee:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
     bf0:	697a      	ldr	r2, [r7, #20]
     bf2:	693b      	ldr	r3, [r7, #16]
     bf4:	18d2      	adds	r2, r2, r3
     bf6:	4b0a      	ldr	r3, [pc, #40]	; (c20 <bme280_calc_temp+0x74>)
     bf8:	601a      	str	r2, [r3, #0]
	T = (t_fine * 5 + 128) >> 8;
     bfa:	4b09      	ldr	r3, [pc, #36]	; (c20 <bme280_calc_temp+0x74>)
     bfc:	681a      	ldr	r2, [r3, #0]
     bfe:	0013      	movs	r3, r2
     c00:	009b      	lsls	r3, r3, #2
     c02:	189b      	adds	r3, r3, r2
     c04:	3380      	adds	r3, #128	; 0x80
     c06:	121b      	asrs	r3, r3, #8
     c08:	60fb      	str	r3, [r7, #12]
	return T;
     c0a:	68fb      	ldr	r3, [r7, #12]
}
     c0c:	0018      	movs	r0, r3
     c0e:	46bd      	mov	sp, r7
     c10:	b006      	add	sp, #24
     c12:	bd80      	pop	{r7, pc}
     c14:	20000150 	.word	0x20000150
     c18:	20000104 	.word	0x20000104
     c1c:	20000142 	.word	0x20000142
     c20:	2000016c 	.word	0x2000016c

00000c24 <bme280_calc_pres>:

int32_t bme280_calc_pres(int32_t read_pres)
{
     c24:	b580      	push	{r7, lr}
     c26:	b086      	sub	sp, #24
     c28:	af00      	add	r7, sp, #0
     c2a:	6078      	str	r0, [r7, #4]
	int32_t var1, var2;
	uint32_t p;
	var1 = (((int32_t)t_fine)>>1) - (int32_t)64000;
     c2c:	4b46      	ldr	r3, [pc, #280]	; (d48 <bme280_calc_pres+0x124>)
     c2e:	681b      	ldr	r3, [r3, #0]
     c30:	105b      	asrs	r3, r3, #1
     c32:	4a46      	ldr	r2, [pc, #280]	; (d4c <bme280_calc_pres+0x128>)
     c34:	4694      	mov	ip, r2
     c36:	4463      	add	r3, ip
     c38:	613b      	str	r3, [r7, #16]
	var2 = (((var1>>2) * (var1>>2)) >> 11 ) * ((int32_t)P6);
     c3a:	693b      	ldr	r3, [r7, #16]
     c3c:	109b      	asrs	r3, r3, #2
     c3e:	693a      	ldr	r2, [r7, #16]
     c40:	1092      	asrs	r2, r2, #2
     c42:	4353      	muls	r3, r2
     c44:	12db      	asrs	r3, r3, #11
     c46:	4a42      	ldr	r2, [pc, #264]	; (d50 <bme280_calc_pres+0x12c>)
     c48:	2100      	movs	r1, #0
     c4a:	5e52      	ldrsh	r2, [r2, r1]
     c4c:	4353      	muls	r3, r2
     c4e:	60fb      	str	r3, [r7, #12]
	var2 = var2 + ((var1*((int32_t)P5))<<1);
     c50:	4b40      	ldr	r3, [pc, #256]	; (d54 <bme280_calc_pres+0x130>)
     c52:	2200      	movs	r2, #0
     c54:	5e9b      	ldrsh	r3, [r3, r2]
     c56:	001a      	movs	r2, r3
     c58:	693b      	ldr	r3, [r7, #16]
     c5a:	4353      	muls	r3, r2
     c5c:	005b      	lsls	r3, r3, #1
     c5e:	68fa      	ldr	r2, [r7, #12]
     c60:	18d3      	adds	r3, r2, r3
     c62:	60fb      	str	r3, [r7, #12]
	var2 = (var2>>2)+(((int32_t)P4)<<16);
     c64:	68fb      	ldr	r3, [r7, #12]
     c66:	109a      	asrs	r2, r3, #2
     c68:	4b3b      	ldr	r3, [pc, #236]	; (d58 <bme280_calc_pres+0x134>)
     c6a:	2100      	movs	r1, #0
     c6c:	5e5b      	ldrsh	r3, [r3, r1]
     c6e:	041b      	lsls	r3, r3, #16
     c70:	18d3      	adds	r3, r2, r3
     c72:	60fb      	str	r3, [r7, #12]
	var1 = (((P3 * (((var1>>2) * (var1>>2)) >> 13 )) >> 3) + ((((int32_t)P2) * var1)>>1))>>18;
     c74:	4b39      	ldr	r3, [pc, #228]	; (d5c <bme280_calc_pres+0x138>)
     c76:	2200      	movs	r2, #0
     c78:	5e9b      	ldrsh	r3, [r3, r2]
     c7a:	0019      	movs	r1, r3
     c7c:	693b      	ldr	r3, [r7, #16]
     c7e:	109b      	asrs	r3, r3, #2
     c80:	693a      	ldr	r2, [r7, #16]
     c82:	1092      	asrs	r2, r2, #2
     c84:	4353      	muls	r3, r2
     c86:	135b      	asrs	r3, r3, #13
     c88:	434b      	muls	r3, r1
     c8a:	10da      	asrs	r2, r3, #3
     c8c:	4b34      	ldr	r3, [pc, #208]	; (d60 <bme280_calc_pres+0x13c>)
     c8e:	2100      	movs	r1, #0
     c90:	5e5b      	ldrsh	r3, [r3, r1]
     c92:	0019      	movs	r1, r3
     c94:	693b      	ldr	r3, [r7, #16]
     c96:	434b      	muls	r3, r1
     c98:	105b      	asrs	r3, r3, #1
     c9a:	18d3      	adds	r3, r2, r3
     c9c:	149b      	asrs	r3, r3, #18
     c9e:	613b      	str	r3, [r7, #16]
	var1 =((((32768+var1))*((int32_t)P1))>>15);
     ca0:	693b      	ldr	r3, [r7, #16]
     ca2:	2280      	movs	r2, #128	; 0x80
     ca4:	0212      	lsls	r2, r2, #8
     ca6:	4694      	mov	ip, r2
     ca8:	4463      	add	r3, ip
     caa:	4a2e      	ldr	r2, [pc, #184]	; (d64 <bme280_calc_pres+0x140>)
     cac:	8812      	ldrh	r2, [r2, #0]
     cae:	4353      	muls	r3, r2
     cb0:	13db      	asrs	r3, r3, #15
     cb2:	613b      	str	r3, [r7, #16]
	if (var1 == 0)
     cb4:	693b      	ldr	r3, [r7, #16]
     cb6:	2b00      	cmp	r3, #0
     cb8:	d101      	bne.n	cbe <bme280_calc_pres+0x9a>
	{
		return 0; // avoid exception caused by division by zero
     cba:	2300      	movs	r3, #0
     cbc:	e040      	b.n	d40 <bme280_calc_pres+0x11c>
	}
	p = (((uint32_t)(((int32_t)1048576)-read_pres)-(var2>>12)))*3125;
     cbe:	687b      	ldr	r3, [r7, #4]
     cc0:	425b      	negs	r3, r3
     cc2:	68fa      	ldr	r2, [r7, #12]
     cc4:	1312      	asrs	r2, r2, #12
     cc6:	1a9b      	subs	r3, r3, r2
     cc8:	4a27      	ldr	r2, [pc, #156]	; (d68 <bme280_calc_pres+0x144>)
     cca:	4353      	muls	r3, r2
     ccc:	4a27      	ldr	r2, [pc, #156]	; (d6c <bme280_calc_pres+0x148>)
     cce:	4694      	mov	ip, r2
     cd0:	4463      	add	r3, ip
     cd2:	617b      	str	r3, [r7, #20]
	if (p < 0x80000000)
     cd4:	697b      	ldr	r3, [r7, #20]
     cd6:	2b00      	cmp	r3, #0
     cd8:	db08      	blt.n	cec <bme280_calc_pres+0xc8>
	{
		p = (p << 1) / ((uint32_t)var1);
     cda:	697b      	ldr	r3, [r7, #20]
     cdc:	005a      	lsls	r2, r3, #1
     cde:	6939      	ldr	r1, [r7, #16]
     ce0:	4b23      	ldr	r3, [pc, #140]	; (d70 <bme280_calc_pres+0x14c>)
     ce2:	0010      	movs	r0, r2
     ce4:	4798      	blx	r3
     ce6:	0003      	movs	r3, r0
     ce8:	617b      	str	r3, [r7, #20]
     cea:	e007      	b.n	cfc <bme280_calc_pres+0xd8>
	}
	else
	{
		p = (p / (uint32_t)var1) * 2;
     cec:	693a      	ldr	r2, [r7, #16]
     cee:	4b20      	ldr	r3, [pc, #128]	; (d70 <bme280_calc_pres+0x14c>)
     cf0:	0011      	movs	r1, r2
     cf2:	6978      	ldr	r0, [r7, #20]
     cf4:	4798      	blx	r3
     cf6:	0003      	movs	r3, r0
     cf8:	005b      	lsls	r3, r3, #1
     cfa:	617b      	str	r3, [r7, #20]
	}
	var1 = (((int32_t)P9) * ((int32_t)(((p>>3) * (p>>3))>>13)))>>12;
     cfc:	4b1d      	ldr	r3, [pc, #116]	; (d74 <bme280_calc_pres+0x150>)
     cfe:	2200      	movs	r2, #0
     d00:	5e9b      	ldrsh	r3, [r3, r2]
     d02:	0019      	movs	r1, r3
     d04:	697b      	ldr	r3, [r7, #20]
     d06:	08db      	lsrs	r3, r3, #3
     d08:	697a      	ldr	r2, [r7, #20]
     d0a:	08d2      	lsrs	r2, r2, #3
     d0c:	4353      	muls	r3, r2
     d0e:	0b5b      	lsrs	r3, r3, #13
     d10:	434b      	muls	r3, r1
     d12:	131b      	asrs	r3, r3, #12
     d14:	613b      	str	r3, [r7, #16]
	var2 = (((int32_t)(p>>2)) * ((int32_t)P8))>>13;
     d16:	697b      	ldr	r3, [r7, #20]
     d18:	089b      	lsrs	r3, r3, #2
     d1a:	001a      	movs	r2, r3
     d1c:	4b16      	ldr	r3, [pc, #88]	; (d78 <bme280_calc_pres+0x154>)
     d1e:	2100      	movs	r1, #0
     d20:	5e5b      	ldrsh	r3, [r3, r1]
     d22:	4353      	muls	r3, r2
     d24:	135b      	asrs	r3, r3, #13
     d26:	60fb      	str	r3, [r7, #12]
	p = (uint32_t)((int32_t)p + ((var1 + var2 + P7) >> 4));
     d28:	693a      	ldr	r2, [r7, #16]
     d2a:	68fb      	ldr	r3, [r7, #12]
     d2c:	18d3      	adds	r3, r2, r3
     d2e:	4a13      	ldr	r2, [pc, #76]	; (d7c <bme280_calc_pres+0x158>)
     d30:	2100      	movs	r1, #0
     d32:	5e52      	ldrsh	r2, [r2, r1]
     d34:	189b      	adds	r3, r3, r2
     d36:	111a      	asrs	r2, r3, #4
     d38:	697b      	ldr	r3, [r7, #20]
     d3a:	18d3      	adds	r3, r2, r3
     d3c:	617b      	str	r3, [r7, #20]
	return p;
     d3e:	697b      	ldr	r3, [r7, #20]
}
     d40:	0018      	movs	r0, r3
     d42:	46bd      	mov	sp, r7
     d44:	b006      	add	sp, #24
     d46:	bd80      	pop	{r7, pc}
     d48:	2000016c 	.word	0x2000016c
     d4c:	ffff0600 	.word	0xffff0600
     d50:	2000013a 	.word	0x2000013a
     d54:	20000166 	.word	0x20000166
     d58:	20000146 	.word	0x20000146
     d5c:	20000152 	.word	0x20000152
     d60:	2000013e 	.word	0x2000013e
     d64:	20000132 	.word	0x20000132
     d68:	00000c35 	.word	0x00000c35
     d6c:	c3500000 	.word	0xc3500000
     d70:	0000533d 	.word	0x0000533d
     d74:	20000148 	.word	0x20000148
     d78:	20000138 	.word	0x20000138
     d7c:	20000164 	.word	0x20000164

00000d80 <bme280_calc_hum>:

double bme280_calc_hum(int32_t read_hum)
{
     d80:	b5f0      	push	{r4, r5, r6, r7, lr}
     d82:	b089      	sub	sp, #36	; 0x24
     d84:	af00      	add	r7, sp, #0
     d86:	6178      	str	r0, [r7, #20]
	double var_H;
	var_H = (((double)t_fine) - 76800.0);
     d88:	4b75      	ldr	r3, [pc, #468]	; (f60 <bme280_calc_hum+0x1e0>)
     d8a:	681a      	ldr	r2, [r3, #0]
     d8c:	4b75      	ldr	r3, [pc, #468]	; (f64 <bme280_calc_hum+0x1e4>)
     d8e:	0010      	movs	r0, r2
     d90:	4798      	blx	r3
     d92:	4c75      	ldr	r4, [pc, #468]	; (f68 <bme280_calc_hum+0x1e8>)
     d94:	2200      	movs	r2, #0
     d96:	4b75      	ldr	r3, [pc, #468]	; (f6c <bme280_calc_hum+0x1ec>)
     d98:	47a0      	blx	r4
     d9a:	0003      	movs	r3, r0
     d9c:	000c      	movs	r4, r1
     d9e:	61bb      	str	r3, [r7, #24]
     da0:	61fc      	str	r4, [r7, #28]
	var_H = (read_hum - (((double)H4) * 64.0 + ((double)H5) / 16384.0 * var_H)) * (((double)H2) / 65536.0 * (1.0 + ((double)H6) / 67108864.0 * var_H * (1.0 + ((double)H3) / 67108864.0 * var_H)));
     da2:	4b70      	ldr	r3, [pc, #448]	; (f64 <bme280_calc_hum+0x1e4>)
     da4:	6978      	ldr	r0, [r7, #20]
     da6:	4798      	blx	r3
     da8:	0005      	movs	r5, r0
     daa:	000e      	movs	r6, r1
     dac:	4b70      	ldr	r3, [pc, #448]	; (f70 <bme280_calc_hum+0x1f0>)
     dae:	2200      	movs	r2, #0
     db0:	5e9a      	ldrsh	r2, [r3, r2]
     db2:	4b6c      	ldr	r3, [pc, #432]	; (f64 <bme280_calc_hum+0x1e4>)
     db4:	0010      	movs	r0, r2
     db6:	4798      	blx	r3
     db8:	4c6e      	ldr	r4, [pc, #440]	; (f74 <bme280_calc_hum+0x1f4>)
     dba:	2200      	movs	r2, #0
     dbc:	4b6e      	ldr	r3, [pc, #440]	; (f78 <bme280_calc_hum+0x1f8>)
     dbe:	47a0      	blx	r4
     dc0:	0003      	movs	r3, r0
     dc2:	000c      	movs	r4, r1
     dc4:	60bb      	str	r3, [r7, #8]
     dc6:	60fc      	str	r4, [r7, #12]
     dc8:	4b6c      	ldr	r3, [pc, #432]	; (f7c <bme280_calc_hum+0x1fc>)
     dca:	2100      	movs	r1, #0
     dcc:	5e5a      	ldrsh	r2, [r3, r1]
     dce:	4b65      	ldr	r3, [pc, #404]	; (f64 <bme280_calc_hum+0x1e4>)
     dd0:	0010      	movs	r0, r2
     dd2:	4798      	blx	r3
     dd4:	4c6a      	ldr	r4, [pc, #424]	; (f80 <bme280_calc_hum+0x200>)
     dd6:	2200      	movs	r2, #0
     dd8:	4b6a      	ldr	r3, [pc, #424]	; (f84 <bme280_calc_hum+0x204>)
     dda:	47a0      	blx	r4
     ddc:	0003      	movs	r3, r0
     dde:	000c      	movs	r4, r1
     de0:	0018      	movs	r0, r3
     de2:	0021      	movs	r1, r4
     de4:	4c63      	ldr	r4, [pc, #396]	; (f74 <bme280_calc_hum+0x1f4>)
     de6:	69ba      	ldr	r2, [r7, #24]
     de8:	69fb      	ldr	r3, [r7, #28]
     dea:	47a0      	blx	r4
     dec:	0003      	movs	r3, r0
     dee:	000c      	movs	r4, r1
     df0:	001a      	movs	r2, r3
     df2:	0023      	movs	r3, r4
     df4:	4c64      	ldr	r4, [pc, #400]	; (f88 <bme280_calc_hum+0x208>)
     df6:	68b8      	ldr	r0, [r7, #8]
     df8:	68f9      	ldr	r1, [r7, #12]
     dfa:	47a0      	blx	r4
     dfc:	0003      	movs	r3, r0
     dfe:	000c      	movs	r4, r1
     e00:	001a      	movs	r2, r3
     e02:	0023      	movs	r3, r4
     e04:	4c58      	ldr	r4, [pc, #352]	; (f68 <bme280_calc_hum+0x1e8>)
     e06:	0028      	movs	r0, r5
     e08:	0031      	movs	r1, r6
     e0a:	47a0      	blx	r4
     e0c:	0003      	movs	r3, r0
     e0e:	000c      	movs	r4, r1
     e10:	001d      	movs	r5, r3
     e12:	0026      	movs	r6, r4
     e14:	4b5d      	ldr	r3, [pc, #372]	; (f8c <bme280_calc_hum+0x20c>)
     e16:	2200      	movs	r2, #0
     e18:	5e9a      	ldrsh	r2, [r3, r2]
     e1a:	4b52      	ldr	r3, [pc, #328]	; (f64 <bme280_calc_hum+0x1e4>)
     e1c:	0010      	movs	r0, r2
     e1e:	4798      	blx	r3
     e20:	4c57      	ldr	r4, [pc, #348]	; (f80 <bme280_calc_hum+0x200>)
     e22:	2200      	movs	r2, #0
     e24:	4b5a      	ldr	r3, [pc, #360]	; (f90 <bme280_calc_hum+0x210>)
     e26:	47a0      	blx	r4
     e28:	0003      	movs	r3, r0
     e2a:	000c      	movs	r4, r1
     e2c:	60bb      	str	r3, [r7, #8]
     e2e:	60fc      	str	r4, [r7, #12]
     e30:	4b58      	ldr	r3, [pc, #352]	; (f94 <bme280_calc_hum+0x214>)
     e32:	2200      	movs	r2, #0
     e34:	569a      	ldrsb	r2, [r3, r2]
     e36:	4b4b      	ldr	r3, [pc, #300]	; (f64 <bme280_calc_hum+0x1e4>)
     e38:	0010      	movs	r0, r2
     e3a:	4798      	blx	r3
     e3c:	4c50      	ldr	r4, [pc, #320]	; (f80 <bme280_calc_hum+0x200>)
     e3e:	2200      	movs	r2, #0
     e40:	4b55      	ldr	r3, [pc, #340]	; (f98 <bme280_calc_hum+0x218>)
     e42:	47a0      	blx	r4
     e44:	0003      	movs	r3, r0
     e46:	000c      	movs	r4, r1
     e48:	0018      	movs	r0, r3
     e4a:	0021      	movs	r1, r4
     e4c:	4c49      	ldr	r4, [pc, #292]	; (f74 <bme280_calc_hum+0x1f4>)
     e4e:	69ba      	ldr	r2, [r7, #24]
     e50:	69fb      	ldr	r3, [r7, #28]
     e52:	47a0      	blx	r4
     e54:	0003      	movs	r3, r0
     e56:	000c      	movs	r4, r1
     e58:	603b      	str	r3, [r7, #0]
     e5a:	607c      	str	r4, [r7, #4]
     e5c:	4b4f      	ldr	r3, [pc, #316]	; (f9c <bme280_calc_hum+0x21c>)
     e5e:	781a      	ldrb	r2, [r3, #0]
     e60:	4b4f      	ldr	r3, [pc, #316]	; (fa0 <bme280_calc_hum+0x220>)
     e62:	0010      	movs	r0, r2
     e64:	4798      	blx	r3
     e66:	4c46      	ldr	r4, [pc, #280]	; (f80 <bme280_calc_hum+0x200>)
     e68:	2200      	movs	r2, #0
     e6a:	4b4b      	ldr	r3, [pc, #300]	; (f98 <bme280_calc_hum+0x218>)
     e6c:	47a0      	blx	r4
     e6e:	0003      	movs	r3, r0
     e70:	000c      	movs	r4, r1
     e72:	0018      	movs	r0, r3
     e74:	0021      	movs	r1, r4
     e76:	4c3f      	ldr	r4, [pc, #252]	; (f74 <bme280_calc_hum+0x1f4>)
     e78:	69ba      	ldr	r2, [r7, #24]
     e7a:	69fb      	ldr	r3, [r7, #28]
     e7c:	47a0      	blx	r4
     e7e:	0003      	movs	r3, r0
     e80:	000c      	movs	r4, r1
     e82:	0018      	movs	r0, r3
     e84:	0021      	movs	r1, r4
     e86:	4c40      	ldr	r4, [pc, #256]	; (f88 <bme280_calc_hum+0x208>)
     e88:	2200      	movs	r2, #0
     e8a:	4b46      	ldr	r3, [pc, #280]	; (fa4 <bme280_calc_hum+0x224>)
     e8c:	47a0      	blx	r4
     e8e:	0003      	movs	r3, r0
     e90:	000c      	movs	r4, r1
     e92:	001a      	movs	r2, r3
     e94:	0023      	movs	r3, r4
     e96:	4c37      	ldr	r4, [pc, #220]	; (f74 <bme280_calc_hum+0x1f4>)
     e98:	6838      	ldr	r0, [r7, #0]
     e9a:	6879      	ldr	r1, [r7, #4]
     e9c:	47a0      	blx	r4
     e9e:	0003      	movs	r3, r0
     ea0:	000c      	movs	r4, r1
     ea2:	0018      	movs	r0, r3
     ea4:	0021      	movs	r1, r4
     ea6:	4c38      	ldr	r4, [pc, #224]	; (f88 <bme280_calc_hum+0x208>)
     ea8:	2200      	movs	r2, #0
     eaa:	4b3e      	ldr	r3, [pc, #248]	; (fa4 <bme280_calc_hum+0x224>)
     eac:	47a0      	blx	r4
     eae:	0003      	movs	r3, r0
     eb0:	000c      	movs	r4, r1
     eb2:	001a      	movs	r2, r3
     eb4:	0023      	movs	r3, r4
     eb6:	4c2f      	ldr	r4, [pc, #188]	; (f74 <bme280_calc_hum+0x1f4>)
     eb8:	68b8      	ldr	r0, [r7, #8]
     eba:	68f9      	ldr	r1, [r7, #12]
     ebc:	47a0      	blx	r4
     ebe:	0003      	movs	r3, r0
     ec0:	000c      	movs	r4, r1
     ec2:	001a      	movs	r2, r3
     ec4:	0023      	movs	r3, r4
     ec6:	4c2b      	ldr	r4, [pc, #172]	; (f74 <bme280_calc_hum+0x1f4>)
     ec8:	0028      	movs	r0, r5
     eca:	0031      	movs	r1, r6
     ecc:	47a0      	blx	r4
     ece:	0003      	movs	r3, r0
     ed0:	000c      	movs	r4, r1
     ed2:	61bb      	str	r3, [r7, #24]
     ed4:	61fc      	str	r4, [r7, #28]
	var_H = var_H * (1.0 - ((double)H1) * var_H / 524288.0);
     ed6:	4b34      	ldr	r3, [pc, #208]	; (fa8 <bme280_calc_hum+0x228>)
     ed8:	781a      	ldrb	r2, [r3, #0]
     eda:	4b31      	ldr	r3, [pc, #196]	; (fa0 <bme280_calc_hum+0x220>)
     edc:	0010      	movs	r0, r2
     ede:	4798      	blx	r3
     ee0:	4c24      	ldr	r4, [pc, #144]	; (f74 <bme280_calc_hum+0x1f4>)
     ee2:	69ba      	ldr	r2, [r7, #24]
     ee4:	69fb      	ldr	r3, [r7, #28]
     ee6:	47a0      	blx	r4
     ee8:	0003      	movs	r3, r0
     eea:	000c      	movs	r4, r1
     eec:	0018      	movs	r0, r3
     eee:	0021      	movs	r1, r4
     ef0:	4c23      	ldr	r4, [pc, #140]	; (f80 <bme280_calc_hum+0x200>)
     ef2:	2200      	movs	r2, #0
     ef4:	4b2d      	ldr	r3, [pc, #180]	; (fac <bme280_calc_hum+0x22c>)
     ef6:	47a0      	blx	r4
     ef8:	0003      	movs	r3, r0
     efa:	000c      	movs	r4, r1
     efc:	001a      	movs	r2, r3
     efe:	0023      	movs	r3, r4
     f00:	4c19      	ldr	r4, [pc, #100]	; (f68 <bme280_calc_hum+0x1e8>)
     f02:	2000      	movs	r0, #0
     f04:	4927      	ldr	r1, [pc, #156]	; (fa4 <bme280_calc_hum+0x224>)
     f06:	47a0      	blx	r4
     f08:	0003      	movs	r3, r0
     f0a:	000c      	movs	r4, r1
     f0c:	001a      	movs	r2, r3
     f0e:	0023      	movs	r3, r4
     f10:	4c18      	ldr	r4, [pc, #96]	; (f74 <bme280_calc_hum+0x1f4>)
     f12:	69b8      	ldr	r0, [r7, #24]
     f14:	69f9      	ldr	r1, [r7, #28]
     f16:	47a0      	blx	r4
     f18:	0003      	movs	r3, r0
     f1a:	000c      	movs	r4, r1
     f1c:	61bb      	str	r3, [r7, #24]
     f1e:	61fc      	str	r4, [r7, #28]
	if (var_H > 100.0)
     f20:	4c23      	ldr	r4, [pc, #140]	; (fb0 <bme280_calc_hum+0x230>)
     f22:	2200      	movs	r2, #0
     f24:	4b23      	ldr	r3, [pc, #140]	; (fb4 <bme280_calc_hum+0x234>)
     f26:	69b8      	ldr	r0, [r7, #24]
     f28:	69f9      	ldr	r1, [r7, #28]
     f2a:	47a0      	blx	r4
     f2c:	1e03      	subs	r3, r0, #0
     f2e:	d004      	beq.n	f3a <bme280_calc_hum+0x1ba>
		var_H = 100.0;
     f30:	2300      	movs	r3, #0
     f32:	4c20      	ldr	r4, [pc, #128]	; (fb4 <bme280_calc_hum+0x234>)
     f34:	61bb      	str	r3, [r7, #24]
     f36:	61fc      	str	r4, [r7, #28]
     f38:	e00b      	b.n	f52 <bme280_calc_hum+0x1d2>
	else if (var_H < 0.0)
     f3a:	4c1f      	ldr	r4, [pc, #124]	; (fb8 <bme280_calc_hum+0x238>)
     f3c:	2200      	movs	r2, #0
     f3e:	2300      	movs	r3, #0
     f40:	69b8      	ldr	r0, [r7, #24]
     f42:	69f9      	ldr	r1, [r7, #28]
     f44:	47a0      	blx	r4
     f46:	1e03      	subs	r3, r0, #0
     f48:	d003      	beq.n	f52 <bme280_calc_hum+0x1d2>
		var_H = 0.0;
     f4a:	2300      	movs	r3, #0
     f4c:	2400      	movs	r4, #0
     f4e:	61bb      	str	r3, [r7, #24]
     f50:	61fc      	str	r4, [r7, #28]
	return var_H;
     f52:	69bb      	ldr	r3, [r7, #24]
     f54:	69fc      	ldr	r4, [r7, #28]
}
     f56:	0018      	movs	r0, r3
     f58:	0021      	movs	r1, r4
     f5a:	46bd      	mov	sp, r7
     f5c:	b009      	add	sp, #36	; 0x24
     f5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     f60:	2000016c 	.word	0x2000016c
     f64:	00007099 	.word	0x00007099
     f68:	00006a2d 	.word	0x00006a2d
     f6c:	40f2c000 	.word	0x40f2c000
     f70:	20000106 	.word	0x20000106
     f74:	0000652d 	.word	0x0000652d
     f78:	40500000 	.word	0x40500000
     f7c:	20000144 	.word	0x20000144
     f80:	00005cc5 	.word	0x00005cc5
     f84:	40d00000 	.word	0x40d00000
     f88:	000056a5 	.word	0x000056a5
     f8c:	20000168 	.word	0x20000168
     f90:	40f00000 	.word	0x40f00000
     f94:	20000140 	.word	0x20000140
     f98:	41900000 	.word	0x41900000
     f9c:	2000014a 	.word	0x2000014a
     fa0:	0000711d 	.word	0x0000711d
     fa4:	3ff00000 	.word	0x3ff00000
     fa8:	2000016a 	.word	0x2000016a
     fac:	41200000 	.word	0x41200000
     fb0:	0000567d 	.word	0x0000567d
     fb4:	40590000 	.word	0x40590000
     fb8:	00005655 	.word	0x00005655

00000fbc <bme280_calc_dew>:

double bme280_calc_dew(int32_t temp, double hum)
{
     fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
     fbe:	b08f      	sub	sp, #60	; 0x3c
     fc0:	af00      	add	r7, sp, #0
     fc2:	60f8      	str	r0, [r7, #12]
     fc4:	603a      	str	r2, [r7, #0]
     fc6:	607b      	str	r3, [r7, #4]
	double celsius = (double)temp/100;
     fc8:	4b7b      	ldr	r3, [pc, #492]	; (11b8 <bme280_calc_dew+0x1fc>)
     fca:	68f8      	ldr	r0, [r7, #12]
     fcc:	4798      	blx	r3
     fce:	4c7b      	ldr	r4, [pc, #492]	; (11bc <bme280_calc_dew+0x200>)
     fd0:	2200      	movs	r2, #0
     fd2:	4b7b      	ldr	r3, [pc, #492]	; (11c0 <bme280_calc_dew+0x204>)
     fd4:	47a0      	blx	r4
     fd6:	0003      	movs	r3, r0
     fd8:	000c      	movs	r4, r1
     fda:	633b      	str	r3, [r7, #48]	; 0x30
     fdc:	637c      	str	r4, [r7, #52]	; 0x34
	double RATIO = 373.15 / (273.15 + celsius);
     fde:	4c79      	ldr	r4, [pc, #484]	; (11c4 <bme280_calc_dew+0x208>)
     fe0:	4a79      	ldr	r2, [pc, #484]	; (11c8 <bme280_calc_dew+0x20c>)
     fe2:	4b7a      	ldr	r3, [pc, #488]	; (11cc <bme280_calc_dew+0x210>)
     fe4:	6b38      	ldr	r0, [r7, #48]	; 0x30
     fe6:	6b79      	ldr	r1, [r7, #52]	; 0x34
     fe8:	47a0      	blx	r4
     fea:	0003      	movs	r3, r0
     fec:	000c      	movs	r4, r1
     fee:	001a      	movs	r2, r3
     ff0:	0023      	movs	r3, r4
     ff2:	4c72      	ldr	r4, [pc, #456]	; (11bc <bme280_calc_dew+0x200>)
     ff4:	4874      	ldr	r0, [pc, #464]	; (11c8 <bme280_calc_dew+0x20c>)
     ff6:	4976      	ldr	r1, [pc, #472]	; (11d0 <bme280_calc_dew+0x214>)
     ff8:	47a0      	blx	r4
     ffa:	0003      	movs	r3, r0
     ffc:	000c      	movs	r4, r1
     ffe:	62bb      	str	r3, [r7, #40]	; 0x28
    1000:	62fc      	str	r4, [r7, #44]	; 0x2c
	double RHS = -7.90298 * (RATIO - 1);
    1002:	4c74      	ldr	r4, [pc, #464]	; (11d4 <bme280_calc_dew+0x218>)
    1004:	2200      	movs	r2, #0
    1006:	4b74      	ldr	r3, [pc, #464]	; (11d8 <bme280_calc_dew+0x21c>)
    1008:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    100a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    100c:	47a0      	blx	r4
    100e:	0003      	movs	r3, r0
    1010:	000c      	movs	r4, r1
    1012:	0018      	movs	r0, r3
    1014:	0021      	movs	r1, r4
    1016:	4c71      	ldr	r4, [pc, #452]	; (11dc <bme280_calc_dew+0x220>)
    1018:	4a71      	ldr	r2, [pc, #452]	; (11e0 <bme280_calc_dew+0x224>)
    101a:	4b72      	ldr	r3, [pc, #456]	; (11e4 <bme280_calc_dew+0x228>)
    101c:	47a0      	blx	r4
    101e:	0003      	movs	r3, r0
    1020:	000c      	movs	r4, r1
    1022:	623b      	str	r3, [r7, #32]
    1024:	627c      	str	r4, [r7, #36]	; 0x24
	RHS += 5.02808 * log10(RATIO);
    1026:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1028:	6afc      	ldr	r4, [r7, #44]	; 0x2c
    102a:	0018      	movs	r0, r3
    102c:	0021      	movs	r1, r4
    102e:	4b6e      	ldr	r3, [pc, #440]	; (11e8 <bme280_calc_dew+0x22c>)
    1030:	4798      	blx	r3
    1032:	4c6a      	ldr	r4, [pc, #424]	; (11dc <bme280_calc_dew+0x220>)
    1034:	4a6d      	ldr	r2, [pc, #436]	; (11ec <bme280_calc_dew+0x230>)
    1036:	4b6e      	ldr	r3, [pc, #440]	; (11f0 <bme280_calc_dew+0x234>)
    1038:	47a0      	blx	r4
    103a:	0003      	movs	r3, r0
    103c:	000c      	movs	r4, r1
    103e:	001a      	movs	r2, r3
    1040:	0023      	movs	r3, r4
    1042:	4c60      	ldr	r4, [pc, #384]	; (11c4 <bme280_calc_dew+0x208>)
    1044:	6a38      	ldr	r0, [r7, #32]
    1046:	6a79      	ldr	r1, [r7, #36]	; 0x24
    1048:	47a0      	blx	r4
    104a:	0003      	movs	r3, r0
    104c:	000c      	movs	r4, r1
    104e:	623b      	str	r3, [r7, #32]
    1050:	627c      	str	r4, [r7, #36]	; 0x24
	RHS += -1.3816e-7 * (pow(10, (11.344 * (1 - 1/RATIO ))) - 1) ;
    1052:	4c5a      	ldr	r4, [pc, #360]	; (11bc <bme280_calc_dew+0x200>)
    1054:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1058:	2000      	movs	r0, #0
    105a:	495f      	ldr	r1, [pc, #380]	; (11d8 <bme280_calc_dew+0x21c>)
    105c:	47a0      	blx	r4
    105e:	0003      	movs	r3, r0
    1060:	000c      	movs	r4, r1
    1062:	001a      	movs	r2, r3
    1064:	0023      	movs	r3, r4
    1066:	4c5b      	ldr	r4, [pc, #364]	; (11d4 <bme280_calc_dew+0x218>)
    1068:	2000      	movs	r0, #0
    106a:	495b      	ldr	r1, [pc, #364]	; (11d8 <bme280_calc_dew+0x21c>)
    106c:	47a0      	blx	r4
    106e:	0003      	movs	r3, r0
    1070:	000c      	movs	r4, r1
    1072:	0018      	movs	r0, r3
    1074:	0021      	movs	r1, r4
    1076:	4c59      	ldr	r4, [pc, #356]	; (11dc <bme280_calc_dew+0x220>)
    1078:	4a5e      	ldr	r2, [pc, #376]	; (11f4 <bme280_calc_dew+0x238>)
    107a:	4b5f      	ldr	r3, [pc, #380]	; (11f8 <bme280_calc_dew+0x23c>)
    107c:	47a0      	blx	r4
    107e:	0003      	movs	r3, r0
    1080:	000c      	movs	r4, r1
    1082:	2000      	movs	r0, #0
    1084:	495d      	ldr	r1, [pc, #372]	; (11fc <bme280_calc_dew+0x240>)
    1086:	001a      	movs	r2, r3
    1088:	0023      	movs	r3, r4
    108a:	4c5d      	ldr	r4, [pc, #372]	; (1200 <bme280_calc_dew+0x244>)
    108c:	47a0      	blx	r4
    108e:	4c51      	ldr	r4, [pc, #324]	; (11d4 <bme280_calc_dew+0x218>)
    1090:	2200      	movs	r2, #0
    1092:	4b51      	ldr	r3, [pc, #324]	; (11d8 <bme280_calc_dew+0x21c>)
    1094:	47a0      	blx	r4
    1096:	0003      	movs	r3, r0
    1098:	000c      	movs	r4, r1
    109a:	0018      	movs	r0, r3
    109c:	0021      	movs	r1, r4
    109e:	4c4f      	ldr	r4, [pc, #316]	; (11dc <bme280_calc_dew+0x220>)
    10a0:	4a58      	ldr	r2, [pc, #352]	; (1204 <bme280_calc_dew+0x248>)
    10a2:	4b59      	ldr	r3, [pc, #356]	; (1208 <bme280_calc_dew+0x24c>)
    10a4:	47a0      	blx	r4
    10a6:	0003      	movs	r3, r0
    10a8:	000c      	movs	r4, r1
    10aa:	001a      	movs	r2, r3
    10ac:	0023      	movs	r3, r4
    10ae:	4c45      	ldr	r4, [pc, #276]	; (11c4 <bme280_calc_dew+0x208>)
    10b0:	6a38      	ldr	r0, [r7, #32]
    10b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
    10b4:	47a0      	blx	r4
    10b6:	0003      	movs	r3, r0
    10b8:	000c      	movs	r4, r1
    10ba:	623b      	str	r3, [r7, #32]
    10bc:	627c      	str	r4, [r7, #36]	; 0x24
	RHS += 8.1328e-3 * (pow(10, (-3.49149 * (RATIO - 1))) - 1) ;
    10be:	4c45      	ldr	r4, [pc, #276]	; (11d4 <bme280_calc_dew+0x218>)
    10c0:	2200      	movs	r2, #0
    10c2:	4b45      	ldr	r3, [pc, #276]	; (11d8 <bme280_calc_dew+0x21c>)
    10c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    10c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    10c8:	47a0      	blx	r4
    10ca:	0003      	movs	r3, r0
    10cc:	000c      	movs	r4, r1
    10ce:	0018      	movs	r0, r3
    10d0:	0021      	movs	r1, r4
    10d2:	4c42      	ldr	r4, [pc, #264]	; (11dc <bme280_calc_dew+0x220>)
    10d4:	4a4d      	ldr	r2, [pc, #308]	; (120c <bme280_calc_dew+0x250>)
    10d6:	4b4e      	ldr	r3, [pc, #312]	; (1210 <bme280_calc_dew+0x254>)
    10d8:	47a0      	blx	r4
    10da:	0003      	movs	r3, r0
    10dc:	000c      	movs	r4, r1
    10de:	2000      	movs	r0, #0
    10e0:	4946      	ldr	r1, [pc, #280]	; (11fc <bme280_calc_dew+0x240>)
    10e2:	001a      	movs	r2, r3
    10e4:	0023      	movs	r3, r4
    10e6:	4c46      	ldr	r4, [pc, #280]	; (1200 <bme280_calc_dew+0x244>)
    10e8:	47a0      	blx	r4
    10ea:	4c3a      	ldr	r4, [pc, #232]	; (11d4 <bme280_calc_dew+0x218>)
    10ec:	2200      	movs	r2, #0
    10ee:	4b3a      	ldr	r3, [pc, #232]	; (11d8 <bme280_calc_dew+0x21c>)
    10f0:	47a0      	blx	r4
    10f2:	0003      	movs	r3, r0
    10f4:	000c      	movs	r4, r1
    10f6:	0018      	movs	r0, r3
    10f8:	0021      	movs	r1, r4
    10fa:	4c38      	ldr	r4, [pc, #224]	; (11dc <bme280_calc_dew+0x220>)
    10fc:	4a45      	ldr	r2, [pc, #276]	; (1214 <bme280_calc_dew+0x258>)
    10fe:	4b46      	ldr	r3, [pc, #280]	; (1218 <bme280_calc_dew+0x25c>)
    1100:	47a0      	blx	r4
    1102:	0003      	movs	r3, r0
    1104:	000c      	movs	r4, r1
    1106:	001a      	movs	r2, r3
    1108:	0023      	movs	r3, r4
    110a:	4c2e      	ldr	r4, [pc, #184]	; (11c4 <bme280_calc_dew+0x208>)
    110c:	6a38      	ldr	r0, [r7, #32]
    110e:	6a79      	ldr	r1, [r7, #36]	; 0x24
    1110:	47a0      	blx	r4
    1112:	0003      	movs	r3, r0
    1114:	000c      	movs	r4, r1
    1116:	623b      	str	r3, [r7, #32]
    1118:	627c      	str	r4, [r7, #36]	; 0x24
	RHS += log10(1013.246);
    111a:	4c2a      	ldr	r4, [pc, #168]	; (11c4 <bme280_calc_dew+0x208>)
    111c:	4a3f      	ldr	r2, [pc, #252]	; (121c <bme280_calc_dew+0x260>)
    111e:	4b40      	ldr	r3, [pc, #256]	; (1220 <bme280_calc_dew+0x264>)
    1120:	6a38      	ldr	r0, [r7, #32]
    1122:	6a79      	ldr	r1, [r7, #36]	; 0x24
    1124:	47a0      	blx	r4
    1126:	0003      	movs	r3, r0
    1128:	000c      	movs	r4, r1
    112a:	623b      	str	r3, [r7, #32]
    112c:	627c      	str	r4, [r7, #36]	; 0x24
	// factor -3 is to adjust units - Vapor Pressure SVP * humidity
	double VP = pow(10, RHS - 3) * hum;
    112e:	4c29      	ldr	r4, [pc, #164]	; (11d4 <bme280_calc_dew+0x218>)
    1130:	2200      	movs	r2, #0
    1132:	4b3c      	ldr	r3, [pc, #240]	; (1224 <bme280_calc_dew+0x268>)
    1134:	6a38      	ldr	r0, [r7, #32]
    1136:	6a79      	ldr	r1, [r7, #36]	; 0x24
    1138:	47a0      	blx	r4
    113a:	0003      	movs	r3, r0
    113c:	000c      	movs	r4, r1
    113e:	2000      	movs	r0, #0
    1140:	492e      	ldr	r1, [pc, #184]	; (11fc <bme280_calc_dew+0x240>)
    1142:	001a      	movs	r2, r3
    1144:	0023      	movs	r3, r4
    1146:	4c2e      	ldr	r4, [pc, #184]	; (1200 <bme280_calc_dew+0x244>)
    1148:	47a0      	blx	r4
    114a:	4c24      	ldr	r4, [pc, #144]	; (11dc <bme280_calc_dew+0x220>)
    114c:	683a      	ldr	r2, [r7, #0]
    114e:	687b      	ldr	r3, [r7, #4]
    1150:	47a0      	blx	r4
    1152:	0003      	movs	r3, r0
    1154:	000c      	movs	r4, r1
    1156:	61bb      	str	r3, [r7, #24]
    1158:	61fc      	str	r4, [r7, #28]
	// (2) DEWPOINT = F(Vapor Pressure)
	double T = log(VP/0.61078);   // temp var
    115a:	4c18      	ldr	r4, [pc, #96]	; (11bc <bme280_calc_dew+0x200>)
    115c:	4a32      	ldr	r2, [pc, #200]	; (1228 <bme280_calc_dew+0x26c>)
    115e:	4b33      	ldr	r3, [pc, #204]	; (122c <bme280_calc_dew+0x270>)
    1160:	69b8      	ldr	r0, [r7, #24]
    1162:	69f9      	ldr	r1, [r7, #28]
    1164:	47a0      	blx	r4
    1166:	0003      	movs	r3, r0
    1168:	000c      	movs	r4, r1
    116a:	0018      	movs	r0, r3
    116c:	0021      	movs	r1, r4
    116e:	4b30      	ldr	r3, [pc, #192]	; (1230 <bme280_calc_dew+0x274>)
    1170:	4798      	blx	r3
    1172:	0003      	movs	r3, r0
    1174:	000c      	movs	r4, r1
    1176:	613b      	str	r3, [r7, #16]
    1178:	617c      	str	r4, [r7, #20]
	return (241.88 * T) / (17.558 - T);
    117a:	4c18      	ldr	r4, [pc, #96]	; (11dc <bme280_calc_dew+0x220>)
    117c:	4a2d      	ldr	r2, [pc, #180]	; (1234 <bme280_calc_dew+0x278>)
    117e:	4b2e      	ldr	r3, [pc, #184]	; (1238 <bme280_calc_dew+0x27c>)
    1180:	6938      	ldr	r0, [r7, #16]
    1182:	6979      	ldr	r1, [r7, #20]
    1184:	47a0      	blx	r4
    1186:	0003      	movs	r3, r0
    1188:	000c      	movs	r4, r1
    118a:	001d      	movs	r5, r3
    118c:	0026      	movs	r6, r4
    118e:	4c11      	ldr	r4, [pc, #68]	; (11d4 <bme280_calc_dew+0x218>)
    1190:	693a      	ldr	r2, [r7, #16]
    1192:	697b      	ldr	r3, [r7, #20]
    1194:	4829      	ldr	r0, [pc, #164]	; (123c <bme280_calc_dew+0x280>)
    1196:	492a      	ldr	r1, [pc, #168]	; (1240 <bme280_calc_dew+0x284>)
    1198:	47a0      	blx	r4
    119a:	0003      	movs	r3, r0
    119c:	000c      	movs	r4, r1
    119e:	001a      	movs	r2, r3
    11a0:	0023      	movs	r3, r4
    11a2:	4c06      	ldr	r4, [pc, #24]	; (11bc <bme280_calc_dew+0x200>)
    11a4:	0028      	movs	r0, r5
    11a6:	0031      	movs	r1, r6
    11a8:	47a0      	blx	r4
    11aa:	0003      	movs	r3, r0
    11ac:	000c      	movs	r4, r1
}
    11ae:	0018      	movs	r0, r3
    11b0:	0021      	movs	r1, r4
    11b2:	46bd      	mov	sp, r7
    11b4:	b00f      	add	sp, #60	; 0x3c
    11b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    11b8:	00007099 	.word	0x00007099
    11bc:	00005cc5 	.word	0x00005cc5
    11c0:	40590000 	.word	0x40590000
    11c4:	000056a5 	.word	0x000056a5
    11c8:	66666666 	.word	0x66666666
    11cc:	40711266 	.word	0x40711266
    11d0:	40775266 	.word	0x40775266
    11d4:	00006a2d 	.word	0x00006a2d
    11d8:	3ff00000 	.word	0x3ff00000
    11dc:	0000652d 	.word	0x0000652d
    11e0:	ca03c4b1 	.word	0xca03c4b1
    11e4:	c01f9ca6 	.word	0xc01f9ca6
    11e8:	00003b29 	.word	0x00003b29
    11ec:	00e6afcd 	.word	0x00e6afcd
    11f0:	40141cc1 	.word	0x40141cc1
    11f4:	c49ba5e3 	.word	0xc49ba5e3
    11f8:	4026b020 	.word	0x4026b020
    11fc:	40240000 	.word	0x40240000
    1200:	00003c41 	.word	0x00003c41
    1204:	36423db1 	.word	0x36423db1
    1208:	be828b24 	.word	0xbe828b24
    120c:	4f227d03 	.word	0x4f227d03
    1210:	c00bee92 	.word	0xc00bee92
    1214:	f0330363 	.word	0xf0330363
    1218:	3f80a7ed 	.word	0x3f80a7ed
    121c:	409e541b 	.word	0x409e541b
    1220:	40080bb4 	.word	0x40080bb4
    1224:	40080000 	.word	0x40080000
    1228:	7fa1a0cf 	.word	0x7fa1a0cf
    122c:	3fe38b82 	.word	0x3fe38b82
    1230:	00003a19 	.word	0x00003a19
    1234:	f5c28f5c 	.word	0xf5c28f5c
    1238:	406e3c28 	.word	0x406e3c28
    123c:	16872b02 	.word	0x16872b02
    1240:	40318ed9 	.word	0x40318ed9

00001244 <bme280_get_all_calced>:

void bme280_get_all_calced(struct bme280_data *bme280_data_object)
{
    1244:	b590      	push	{r4, r7, lr}
    1246:	b087      	sub	sp, #28
    1248:	af00      	add	r7, sp, #0
    124a:	6078      	str	r0, [r7, #4]
	uint8_t temps[3];
	uint8_t pres[3];
	uint8_t hum[2];
	
	bme280_force_update();
    124c:	4b36      	ldr	r3, [pc, #216]	; (1328 <bme280_get_all_calced+0xe4>)
    124e:	4798      	blx	r3
		
	bme280_read_temp(&temps);
    1250:	2314      	movs	r3, #20
    1252:	18fb      	adds	r3, r7, r3
    1254:	0018      	movs	r0, r3
    1256:	4b35      	ldr	r3, [pc, #212]	; (132c <bme280_get_all_calced+0xe8>)
    1258:	4798      	blx	r3
	bme280_read_pres(&pres);
    125a:	2310      	movs	r3, #16
    125c:	18fb      	adds	r3, r7, r3
    125e:	0018      	movs	r0, r3
    1260:	4b33      	ldr	r3, [pc, #204]	; (1330 <bme280_get_all_calced+0xec>)
    1262:	4798      	blx	r3
	bme280_read_hum(&hum);
    1264:	230c      	movs	r3, #12
    1266:	18fb      	adds	r3, r7, r3
    1268:	0018      	movs	r0, r3
    126a:	4b32      	ldr	r3, [pc, #200]	; (1334 <bme280_get_all_calced+0xf0>)
    126c:	4798      	blx	r3
	
	bme280_data_object->temperature = bme280_calc_temp((int32_t)(temps[0]<<12)+(temps[1] << 4)+(temps[2] >> 4));
    126e:	2314      	movs	r3, #20
    1270:	18fb      	adds	r3, r7, r3
    1272:	781b      	ldrb	r3, [r3, #0]
    1274:	031a      	lsls	r2, r3, #12
    1276:	2314      	movs	r3, #20
    1278:	18fb      	adds	r3, r7, r3
    127a:	785b      	ldrb	r3, [r3, #1]
    127c:	011b      	lsls	r3, r3, #4
    127e:	18d3      	adds	r3, r2, r3
    1280:	2214      	movs	r2, #20
    1282:	18ba      	adds	r2, r7, r2
    1284:	7892      	ldrb	r2, [r2, #2]
    1286:	0912      	lsrs	r2, r2, #4
    1288:	b2d2      	uxtb	r2, r2
    128a:	189b      	adds	r3, r3, r2
    128c:	0018      	movs	r0, r3
    128e:	4b2a      	ldr	r3, [pc, #168]	; (1338 <bme280_get_all_calced+0xf4>)
    1290:	4798      	blx	r3
    1292:	0002      	movs	r2, r0
    1294:	687b      	ldr	r3, [r7, #4]
    1296:	601a      	str	r2, [r3, #0]
	bme280_data_object->pressure = bme280_calc_pres((int32_t)(pres[0]<<12)+(pres[1] << 4)+(pres[2] >> 4))/100;
    1298:	2310      	movs	r3, #16
    129a:	18fb      	adds	r3, r7, r3
    129c:	781b      	ldrb	r3, [r3, #0]
    129e:	031a      	lsls	r2, r3, #12
    12a0:	2310      	movs	r3, #16
    12a2:	18fb      	adds	r3, r7, r3
    12a4:	785b      	ldrb	r3, [r3, #1]
    12a6:	011b      	lsls	r3, r3, #4
    12a8:	18d3      	adds	r3, r2, r3
    12aa:	2210      	movs	r2, #16
    12ac:	18ba      	adds	r2, r7, r2
    12ae:	7892      	ldrb	r2, [r2, #2]
    12b0:	0912      	lsrs	r2, r2, #4
    12b2:	b2d2      	uxtb	r2, r2
    12b4:	189b      	adds	r3, r3, r2
    12b6:	0018      	movs	r0, r3
    12b8:	4b20      	ldr	r3, [pc, #128]	; (133c <bme280_get_all_calced+0xf8>)
    12ba:	4798      	blx	r3
    12bc:	0002      	movs	r2, r0
    12be:	4b20      	ldr	r3, [pc, #128]	; (1340 <bme280_get_all_calced+0xfc>)
    12c0:	2164      	movs	r1, #100	; 0x64
    12c2:	0010      	movs	r0, r2
    12c4:	4798      	blx	r3
    12c6:	0003      	movs	r3, r0
    12c8:	001a      	movs	r2, r3
    12ca:	687b      	ldr	r3, [r7, #4]
    12cc:	605a      	str	r2, [r3, #4]
	bme280_data_object->humidity = (float)bme280_calc_hum((hum[0]<<8)+hum[1]);
    12ce:	230c      	movs	r3, #12
    12d0:	18fb      	adds	r3, r7, r3
    12d2:	781b      	ldrb	r3, [r3, #0]
    12d4:	021b      	lsls	r3, r3, #8
    12d6:	220c      	movs	r2, #12
    12d8:	18ba      	adds	r2, r7, r2
    12da:	7852      	ldrb	r2, [r2, #1]
    12dc:	189b      	adds	r3, r3, r2
    12de:	0018      	movs	r0, r3
    12e0:	4b18      	ldr	r3, [pc, #96]	; (1344 <bme280_get_all_calced+0x100>)
    12e2:	4798      	blx	r3
    12e4:	000a      	movs	r2, r1
    12e6:	0001      	movs	r1, r0
    12e8:	4b17      	ldr	r3, [pc, #92]	; (1348 <bme280_get_all_calced+0x104>)
    12ea:	0008      	movs	r0, r1
    12ec:	0011      	movs	r1, r2
    12ee:	4798      	blx	r3
    12f0:	1c02      	adds	r2, r0, #0
    12f2:	687b      	ldr	r3, [r7, #4]
    12f4:	609a      	str	r2, [r3, #8]
	bme280_data_object->dew_point = (float)bme280_calc_dew(bme280_data_object->temperature, bme280_data_object->humidity);
    12f6:	687b      	ldr	r3, [r7, #4]
    12f8:	681c      	ldr	r4, [r3, #0]
    12fa:	687b      	ldr	r3, [r7, #4]
    12fc:	689a      	ldr	r2, [r3, #8]
    12fe:	4b13      	ldr	r3, [pc, #76]	; (134c <bme280_get_all_calced+0x108>)
    1300:	1c10      	adds	r0, r2, #0
    1302:	4798      	blx	r3
    1304:	0002      	movs	r2, r0
    1306:	000b      	movs	r3, r1
    1308:	0020      	movs	r0, r4
    130a:	4911      	ldr	r1, [pc, #68]	; (1350 <bme280_get_all_calced+0x10c>)
    130c:	4788      	blx	r1
    130e:	000a      	movs	r2, r1
    1310:	0001      	movs	r1, r0
    1312:	4b0d      	ldr	r3, [pc, #52]	; (1348 <bme280_get_all_calced+0x104>)
    1314:	0008      	movs	r0, r1
    1316:	0011      	movs	r1, r2
    1318:	4798      	blx	r3
    131a:	1c02      	adds	r2, r0, #0
    131c:	687b      	ldr	r3, [r7, #4]
    131e:	60da      	str	r2, [r3, #12]
}
    1320:	46c0      	nop			; (mov r8, r8)
    1322:	46bd      	mov	sp, r7
    1324:	b007      	add	sp, #28
    1326:	bd90      	pop	{r4, r7, pc}
    1328:	00001355 	.word	0x00001355
    132c:	00000809 	.word	0x00000809
    1330:	00000869 	.word	0x00000869
    1334:	000008c9 	.word	0x000008c9
    1338:	00000bad 	.word	0x00000bad
    133c:	00000c25 	.word	0x00000c25
    1340:	00005451 	.word	0x00005451
    1344:	00000d81 	.word	0x00000d81
    1348:	00007231 	.word	0x00007231
    134c:	0000718d 	.word	0x0000718d
    1350:	00000fbd 	.word	0x00000fbd

00001354 <bme280_force_update>:

void bme280_force_update(void)
{
    1354:	b580      	push	{r7, lr}
    1356:	b082      	sub	sp, #8
    1358:	af00      	add	r7, sp, #0
	uint8_t data[2];
	data[0] = 0xF4;
    135a:	1d3b      	adds	r3, r7, #4
    135c:	22f4      	movs	r2, #244	; 0xf4
    135e:	701a      	strb	r2, [r3, #0]
	data[1] = 0x26;
    1360:	1d3b      	adds	r3, r7, #4
    1362:	2226      	movs	r2, #38	; 0x26
    1364:	705a      	strb	r2, [r3, #1]
	bme280_spi_write(&data,2);
    1366:	1d3b      	adds	r3, r7, #4
    1368:	2102      	movs	r1, #2
    136a:	0018      	movs	r0, r3
    136c:	4b04      	ldr	r3, [pc, #16]	; (1380 <bme280_force_update+0x2c>)
    136e:	4798      	blx	r3
	delay_ms(15);
    1370:	200f      	movs	r0, #15
    1372:	4b04      	ldr	r3, [pc, #16]	; (1384 <bme280_force_update+0x30>)
    1374:	4798      	blx	r3
}
    1376:	46c0      	nop			; (mov r8, r8)
    1378:	46bd      	mov	sp, r7
    137a:	b002      	add	sp, #8
    137c:	bd80      	pop	{r7, pc}
    137e:	46c0      	nop			; (mov r8, r8)
    1380:	00000729 	.word	0x00000729
    1384:	000001a1 	.word	0x000001a1

00001388 <bme280_init>:

void bme280_init(void)
{
    1388:	b580      	push	{r7, lr}
    138a:	b082      	sub	sp, #8
    138c:	af00      	add	r7, sp, #0
	bme280_get_cal_data();
    138e:	4b1c      	ldr	r3, [pc, #112]	; (1400 <bme280_init+0x78>)
    1390:	4798      	blx	r3
	bme280_calc_cal();
    1392:	4b1c      	ldr	r3, [pc, #112]	; (1404 <bme280_init+0x7c>)
    1394:	4798      	blx	r3
	bme280_spi_read(&device_id,1,0xD0);
    1396:	4b1c      	ldr	r3, [pc, #112]	; (1408 <bme280_init+0x80>)
    1398:	22d0      	movs	r2, #208	; 0xd0
    139a:	2101      	movs	r1, #1
    139c:	0018      	movs	r0, r3
    139e:	4b1b      	ldr	r3, [pc, #108]	; (140c <bme280_init+0x84>)
    13a0:	4798      	blx	r3
	uint8_t data[2];
	
	uint8_t temp =  0;
    13a2:	1cfb      	adds	r3, r7, #3
    13a4:	2200      	movs	r2, #0
    13a6:	701a      	strb	r2, [r3, #0]
	bme280_spi_read(&temp,1,0xF2);
    13a8:	1cfb      	adds	r3, r7, #3
    13aa:	22f2      	movs	r2, #242	; 0xf2
    13ac:	2101      	movs	r1, #1
    13ae:	0018      	movs	r0, r3
    13b0:	4b16      	ldr	r3, [pc, #88]	; (140c <bme280_init+0x84>)
    13b2:	4798      	blx	r3
	
	data[0] = 0xF2;
    13b4:	1d3b      	adds	r3, r7, #4
    13b6:	22f2      	movs	r2, #242	; 0xf2
    13b8:	701a      	strb	r2, [r3, #0]
	data[1] = 0x01;
    13ba:	1d3b      	adds	r3, r7, #4
    13bc:	2201      	movs	r2, #1
    13be:	705a      	strb	r2, [r3, #1]
	bme280_spi_write(&data,2);
    13c0:	1d3b      	adds	r3, r7, #4
    13c2:	2102      	movs	r1, #2
    13c4:	0018      	movs	r0, r3
    13c6:	4b12      	ldr	r3, [pc, #72]	; (1410 <bme280_init+0x88>)
    13c8:	4798      	blx	r3
	data[0] = 0xF4;
    13ca:	1d3b      	adds	r3, r7, #4
    13cc:	22f4      	movs	r2, #244	; 0xf4
    13ce:	701a      	strb	r2, [r3, #0]
	data[1] = 0x26;
    13d0:	1d3b      	adds	r3, r7, #4
    13d2:	2226      	movs	r2, #38	; 0x26
    13d4:	705a      	strb	r2, [r3, #1]
	bme280_spi_write(&data,2);
    13d6:	1d3b      	adds	r3, r7, #4
    13d8:	2102      	movs	r1, #2
    13da:	0018      	movs	r0, r3
    13dc:	4b0c      	ldr	r3, [pc, #48]	; (1410 <bme280_init+0x88>)
    13de:	4798      	blx	r3
	
	data[0] = 0xF5;
    13e0:	1d3b      	adds	r3, r7, #4
    13e2:	22f5      	movs	r2, #245	; 0xf5
    13e4:	701a      	strb	r2, [r3, #0]
	data[1] = 0xC0;
    13e6:	1d3b      	adds	r3, r7, #4
    13e8:	22c0      	movs	r2, #192	; 0xc0
    13ea:	705a      	strb	r2, [r3, #1]
	bme280_spi_write(&data,2);
    13ec:	1d3b      	adds	r3, r7, #4
    13ee:	2102      	movs	r1, #2
    13f0:	0018      	movs	r0, r3
    13f2:	4b07      	ldr	r3, [pc, #28]	; (1410 <bme280_init+0x88>)
    13f4:	4798      	blx	r3
}
    13f6:	46c0      	nop			; (mov r8, r8)
    13f8:	46bd      	mov	sp, r7
    13fa:	b002      	add	sp, #8
    13fc:	bd80      	pop	{r7, pc}
    13fe:	46c0      	nop			; (mov r8, r8)
    1400:	00000929 	.word	0x00000929
    1404:	000009a9 	.word	0x000009a9
    1408:	2000013c 	.word	0x2000013c
    140c:	00000785 	.word	0x00000785
    1410:	00000729 	.word	0x00000729

00001414 <bme280_data_compress>:
		}hestestruct;
		uint8_t bytes[16];
	}testheste;

void bme280_data_compress(struct bme280_data *bme280_data_object, uint8_t *data_array)
{
    1414:	b580      	push	{r7, lr}
    1416:	b088      	sub	sp, #32
    1418:	af00      	add	r7, sp, #0
    141a:	6078      	str	r0, [r7, #4]
    141c:	6039      	str	r1, [r7, #0]
	testheste testhest;
	testhest.hestestruct.temperature = bme280_data_object->temperature;
    141e:	687b      	ldr	r3, [r7, #4]
    1420:	681a      	ldr	r2, [r3, #0]
    1422:	230c      	movs	r3, #12
    1424:	18fb      	adds	r3, r7, r3
    1426:	601a      	str	r2, [r3, #0]
	testhest.hestestruct.pressure = bme280_data_object->pressure;
    1428:	687b      	ldr	r3, [r7, #4]
    142a:	685a      	ldr	r2, [r3, #4]
    142c:	230c      	movs	r3, #12
    142e:	18fb      	adds	r3, r7, r3
    1430:	605a      	str	r2, [r3, #4]
	testhest.hestestruct.dew_point = bme280_data_object->dew_point;
    1432:	687b      	ldr	r3, [r7, #4]
    1434:	68da      	ldr	r2, [r3, #12]
    1436:	230c      	movs	r3, #12
    1438:	18fb      	adds	r3, r7, r3
    143a:	60da      	str	r2, [r3, #12]
	testhest.hestestruct.humidity = bme280_data_object->humidity;
    143c:	687b      	ldr	r3, [r7, #4]
    143e:	689a      	ldr	r2, [r3, #8]
    1440:	230c      	movs	r3, #12
    1442:	18fb      	adds	r3, r7, r3
    1444:	609a      	str	r2, [r3, #8]
	
	for (int i=0;i<16;i++)
    1446:	2300      	movs	r3, #0
    1448:	61fb      	str	r3, [r7, #28]
    144a:	e00b      	b.n	1464 <bme280_data_compress+0x50>
	{
		data_array[i] = testhest.bytes[i];
    144c:	69fb      	ldr	r3, [r7, #28]
    144e:	683a      	ldr	r2, [r7, #0]
    1450:	18d3      	adds	r3, r2, r3
    1452:	220c      	movs	r2, #12
    1454:	18b9      	adds	r1, r7, r2
    1456:	69fa      	ldr	r2, [r7, #28]
    1458:	188a      	adds	r2, r1, r2
    145a:	7812      	ldrb	r2, [r2, #0]
    145c:	701a      	strb	r2, [r3, #0]
	for (int i=0;i<16;i++)
    145e:	69fb      	ldr	r3, [r7, #28]
    1460:	3301      	adds	r3, #1
    1462:	61fb      	str	r3, [r7, #28]
    1464:	69fb      	ldr	r3, [r7, #28]
    1466:	2b0f      	cmp	r3, #15
    1468:	ddf0      	ble.n	144c <bme280_data_compress+0x38>
	
	data_array[12] = tobytearray.bytes[0];
	data_array[13] = tobytearray.bytes[1];
	data_array[14] = tobytearray.bytes[2];
	data_array[15] = tobytearray.bytes[3];*/
    146a:	46c0      	nop			; (mov r8, r8)
    146c:	46bd      	mov	sp, r7
    146e:	b008      	add	sp, #32
    1470:	bd80      	pop	{r7, pc}
	...

00001474 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    1474:	b580      	push	{r7, lr}
    1476:	b084      	sub	sp, #16
    1478:	af00      	add	r7, sp, #0
    147a:	0002      	movs	r2, r0
    147c:	1dfb      	adds	r3, r7, #7
    147e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    1480:	230f      	movs	r3, #15
    1482:	18fb      	adds	r3, r7, r3
    1484:	1dfa      	adds	r2, r7, #7
    1486:	7812      	ldrb	r2, [r2, #0]
    1488:	09d2      	lsrs	r2, r2, #7
    148a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    148c:	230e      	movs	r3, #14
    148e:	18fb      	adds	r3, r7, r3
    1490:	1dfa      	adds	r2, r7, #7
    1492:	7812      	ldrb	r2, [r2, #0]
    1494:	0952      	lsrs	r2, r2, #5
    1496:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    1498:	4b0d      	ldr	r3, [pc, #52]	; (14d0 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    149a:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    149c:	230f      	movs	r3, #15
    149e:	18fb      	adds	r3, r7, r3
    14a0:	781b      	ldrb	r3, [r3, #0]
    14a2:	2b00      	cmp	r3, #0
    14a4:	d10f      	bne.n	14c6 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    14a6:	230f      	movs	r3, #15
    14a8:	18fb      	adds	r3, r7, r3
    14aa:	781b      	ldrb	r3, [r3, #0]
    14ac:	009b      	lsls	r3, r3, #2
    14ae:	2210      	movs	r2, #16
    14b0:	4694      	mov	ip, r2
    14b2:	44bc      	add	ip, r7
    14b4:	4463      	add	r3, ip
    14b6:	3b08      	subs	r3, #8
    14b8:	681a      	ldr	r2, [r3, #0]
    14ba:	230e      	movs	r3, #14
    14bc:	18fb      	adds	r3, r7, r3
    14be:	781b      	ldrb	r3, [r3, #0]
    14c0:	01db      	lsls	r3, r3, #7
    14c2:	18d3      	adds	r3, r2, r3
    14c4:	e000      	b.n	14c8 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    14c6:	2300      	movs	r3, #0
	}
}
    14c8:	0018      	movs	r0, r3
    14ca:	46bd      	mov	sp, r7
    14cc:	b004      	add	sp, #16
    14ce:	bd80      	pop	{r7, pc}
    14d0:	41004400 	.word	0x41004400

000014d4 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    14d4:	b580      	push	{r7, lr}
    14d6:	b082      	sub	sp, #8
    14d8:	af00      	add	r7, sp, #0
    14da:	0002      	movs	r2, r0
    14dc:	1dfb      	adds	r3, r7, #7
    14de:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    14e0:	1dfb      	adds	r3, r7, #7
    14e2:	781b      	ldrb	r3, [r3, #0]
    14e4:	0018      	movs	r0, r3
    14e6:	4b03      	ldr	r3, [pc, #12]	; (14f4 <port_get_group_from_gpio_pin+0x20>)
    14e8:	4798      	blx	r3
    14ea:	0003      	movs	r3, r0
}
    14ec:	0018      	movs	r0, r3
    14ee:	46bd      	mov	sp, r7
    14f0:	b002      	add	sp, #8
    14f2:	bd80      	pop	{r7, pc}
    14f4:	00001475 	.word	0x00001475

000014f8 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    14f8:	b580      	push	{r7, lr}
    14fa:	b084      	sub	sp, #16
    14fc:	af00      	add	r7, sp, #0
    14fe:	0002      	movs	r2, r0
    1500:	1dfb      	adds	r3, r7, #7
    1502:	701a      	strb	r2, [r3, #0]
    1504:	1dbb      	adds	r3, r7, #6
    1506:	1c0a      	adds	r2, r1, #0
    1508:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    150a:	1dfb      	adds	r3, r7, #7
    150c:	781b      	ldrb	r3, [r3, #0]
    150e:	0018      	movs	r0, r3
    1510:	4b0d      	ldr	r3, [pc, #52]	; (1548 <port_pin_set_output_level+0x50>)
    1512:	4798      	blx	r3
    1514:	0003      	movs	r3, r0
    1516:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1518:	1dfb      	adds	r3, r7, #7
    151a:	781b      	ldrb	r3, [r3, #0]
    151c:	221f      	movs	r2, #31
    151e:	4013      	ands	r3, r2
    1520:	2201      	movs	r2, #1
    1522:	409a      	lsls	r2, r3
    1524:	0013      	movs	r3, r2
    1526:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    1528:	1dbb      	adds	r3, r7, #6
    152a:	781b      	ldrb	r3, [r3, #0]
    152c:	2b00      	cmp	r3, #0
    152e:	d003      	beq.n	1538 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    1530:	68fb      	ldr	r3, [r7, #12]
    1532:	68ba      	ldr	r2, [r7, #8]
    1534:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    1536:	e002      	b.n	153e <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    1538:	68fb      	ldr	r3, [r7, #12]
    153a:	68ba      	ldr	r2, [r7, #8]
    153c:	615a      	str	r2, [r3, #20]
}
    153e:	46c0      	nop			; (mov r8, r8)
    1540:	46bd      	mov	sp, r7
    1542:	b004      	add	sp, #16
    1544:	bd80      	pop	{r7, pc}
    1546:	46c0      	nop			; (mov r8, r8)
    1548:	000014d5 	.word	0x000014d5

0000154c <nrf24l01_spi_write>:
 */ 

#include "nrf24l01.h"

uint32_t nrf24l01_spi_write(uint8_t *data,uint16_t length)
{
    154c:	b580      	push	{r7, lr}
    154e:	b084      	sub	sp, #16
    1550:	af00      	add	r7, sp, #0
    1552:	6078      	str	r0, [r7, #4]
    1554:	000a      	movs	r2, r1
    1556:	1cbb      	adds	r3, r7, #2
    1558:	801a      	strh	r2, [r3, #0]
	//spi_select_slave(&spi_master_instance,&nrf24l01_slave_instance,true);
	uint32_t status_code = (uint32_t) spi_write_buffer_wait(&spi_master_instance,data,length);
    155a:	1cbb      	adds	r3, r7, #2
    155c:	881a      	ldrh	r2, [r3, #0]
    155e:	6879      	ldr	r1, [r7, #4]
    1560:	4b05      	ldr	r3, [pc, #20]	; (1578 <nrf24l01_spi_write+0x2c>)
    1562:	0018      	movs	r0, r3
    1564:	4b05      	ldr	r3, [pc, #20]	; (157c <nrf24l01_spi_write+0x30>)
    1566:	4798      	blx	r3
    1568:	0003      	movs	r3, r0
    156a:	60fb      	str	r3, [r7, #12]
	//spi_select_slave(&spi_master_instance,&nrf24l01_slave_instance,false);
	return status_code;
    156c:	68fb      	ldr	r3, [r7, #12]
}
    156e:	0018      	movs	r0, r3
    1570:	46bd      	mov	sp, r7
    1572:	b004      	add	sp, #16
    1574:	bd80      	pop	{r7, pc}
    1576:	46c0      	nop			; (mov r8, r8)
    1578:	20000158 	.word	0x20000158
    157c:	0000282d 	.word	0x0000282d

00001580 <nrf24l01_spi_write_single>:

uint32_t nrf24l01_spi_write_single(uint8_t *data)
{
    1580:	b580      	push	{r7, lr}
    1582:	b082      	sub	sp, #8
    1584:	af00      	add	r7, sp, #0
    1586:	6078      	str	r0, [r7, #4]
	return nrf24l01_spi_write(data,1);
    1588:	687b      	ldr	r3, [r7, #4]
    158a:	2101      	movs	r1, #1
    158c:	0018      	movs	r0, r3
    158e:	4b03      	ldr	r3, [pc, #12]	; (159c <nrf24l01_spi_write_single+0x1c>)
    1590:	4798      	blx	r3
    1592:	0003      	movs	r3, r0
}
    1594:	0018      	movs	r0, r3
    1596:	46bd      	mov	sp, r7
    1598:	b002      	add	sp, #8
    159a:	bd80      	pop	{r7, pc}
    159c:	0000154d 	.word	0x0000154d

000015a0 <nrf24l01_spi_read>:
{
	nrf24l01_cmd2(cmd,2,data_input);	
}

void nrf24l01_spi_read(uint8_t *data,uint16_t length,uint16_t reg)
{
    15a0:	b590      	push	{r4, r7, lr}
    15a2:	b083      	sub	sp, #12
    15a4:	af00      	add	r7, sp, #0
    15a6:	6078      	str	r0, [r7, #4]
    15a8:	0008      	movs	r0, r1
    15aa:	0011      	movs	r1, r2
    15ac:	1cbb      	adds	r3, r7, #2
    15ae:	1c02      	adds	r2, r0, #0
    15b0:	801a      	strh	r2, [r3, #0]
    15b2:	003b      	movs	r3, r7
    15b4:	1c0a      	adds	r2, r1, #0
    15b6:	801a      	strh	r2, [r3, #0]
	//uint16_t dummy = reg | 0x80;
	spi_select_slave(&spi_master_instance,&nrf24l01_slave_instance,true);
    15b8:	490f      	ldr	r1, [pc, #60]	; (15f8 <nrf24l01_spi_read+0x58>)
    15ba:	4b10      	ldr	r3, [pc, #64]	; (15fc <nrf24l01_spi_read+0x5c>)
    15bc:	2201      	movs	r2, #1
    15be:	0018      	movs	r0, r3
    15c0:	4b0f      	ldr	r3, [pc, #60]	; (1600 <nrf24l01_spi_read+0x60>)
    15c2:	4798      	blx	r3
	spi_write_buffer_wait(&spi_master_instance,&reg,1);
    15c4:	0039      	movs	r1, r7
    15c6:	4b0d      	ldr	r3, [pc, #52]	; (15fc <nrf24l01_spi_read+0x5c>)
    15c8:	2201      	movs	r2, #1
    15ca:	0018      	movs	r0, r3
    15cc:	4b0d      	ldr	r3, [pc, #52]	; (1604 <nrf24l01_spi_read+0x64>)
    15ce:	4798      	blx	r3
	spi_read_buffer_wait(&spi_master_instance,data,length,reg);
    15d0:	003b      	movs	r3, r7
    15d2:	881c      	ldrh	r4, [r3, #0]
    15d4:	1cbb      	adds	r3, r7, #2
    15d6:	881a      	ldrh	r2, [r3, #0]
    15d8:	6879      	ldr	r1, [r7, #4]
    15da:	4808      	ldr	r0, [pc, #32]	; (15fc <nrf24l01_spi_read+0x5c>)
    15dc:	0023      	movs	r3, r4
    15de:	4c0a      	ldr	r4, [pc, #40]	; (1608 <nrf24l01_spi_read+0x68>)
    15e0:	47a0      	blx	r4
	//spi_transceive_wait(&spi_master_instance,reg,data);
	spi_select_slave(&spi_master_instance,&nrf24l01_slave_instance,false);
    15e2:	4905      	ldr	r1, [pc, #20]	; (15f8 <nrf24l01_spi_read+0x58>)
    15e4:	4b05      	ldr	r3, [pc, #20]	; (15fc <nrf24l01_spi_read+0x5c>)
    15e6:	2200      	movs	r2, #0
    15e8:	0018      	movs	r0, r3
    15ea:	4b05      	ldr	r3, [pc, #20]	; (1600 <nrf24l01_spi_read+0x60>)
    15ec:	4798      	blx	r3
}
    15ee:	46c0      	nop			; (mov r8, r8)
    15f0:	46bd      	mov	sp, r7
    15f2:	b003      	add	sp, #12
    15f4:	bd90      	pop	{r4, r7, pc}
    15f6:	46c0      	nop			; (mov r8, r8)
    15f8:	2000014c 	.word	0x2000014c
    15fc:	20000158 	.word	0x20000158
    1600:	0000273d 	.word	0x0000273d
    1604:	0000282d 	.word	0x0000282d
    1608:	00002591 	.word	0x00002591

0000160c <NRF_CS_Set>:




void NRF_CS_Set(void)
{
    160c:	b580      	push	{r7, lr}
    160e:	af00      	add	r7, sp, #0
	spi_select_slave(&spi_master_instance,&nrf24l01_slave_instance,true);
    1610:	4904      	ldr	r1, [pc, #16]	; (1624 <NRF_CS_Set+0x18>)
    1612:	4b05      	ldr	r3, [pc, #20]	; (1628 <NRF_CS_Set+0x1c>)
    1614:	2201      	movs	r2, #1
    1616:	0018      	movs	r0, r3
    1618:	4b04      	ldr	r3, [pc, #16]	; (162c <NRF_CS_Set+0x20>)
    161a:	4798      	blx	r3
	//port_pin_set_output_level(NRF24L01_CS,true);
	//PORT_IOBUS->Group[0].OUTSET.bit.OUTSET = PORT_PA10;
}
    161c:	46c0      	nop			; (mov r8, r8)
    161e:	46bd      	mov	sp, r7
    1620:	bd80      	pop	{r7, pc}
    1622:	46c0      	nop			; (mov r8, r8)
    1624:	2000014c 	.word	0x2000014c
    1628:	20000158 	.word	0x20000158
    162c:	0000273d 	.word	0x0000273d

00001630 <NRF_CS_Clear>:

void NRF_CS_Clear(void)
{
    1630:	b580      	push	{r7, lr}
    1632:	af00      	add	r7, sp, #0
	spi_select_slave(&spi_master_instance,&nrf24l01_slave_instance,false);
    1634:	4904      	ldr	r1, [pc, #16]	; (1648 <NRF_CS_Clear+0x18>)
    1636:	4b05      	ldr	r3, [pc, #20]	; (164c <NRF_CS_Clear+0x1c>)
    1638:	2200      	movs	r2, #0
    163a:	0018      	movs	r0, r3
    163c:	4b04      	ldr	r3, [pc, #16]	; (1650 <NRF_CS_Clear+0x20>)
    163e:	4798      	blx	r3
	//port_pin_set_output_level(NRF24L01_CS,false);
	//PORT_IOBUS->Group[0].OUTCLR.bit.OUTCLR = PORT_PA10;
}
    1640:	46c0      	nop			; (mov r8, r8)
    1642:	46bd      	mov	sp, r7
    1644:	bd80      	pop	{r7, pc}
    1646:	46c0      	nop			; (mov r8, r8)
    1648:	2000014c 	.word	0x2000014c
    164c:	20000158 	.word	0x20000158
    1650:	0000273d 	.word	0x0000273d

00001654 <NRF_CE_Set>:

void NRF_CE_Set(void)
{
    1654:	b580      	push	{r7, lr}
    1656:	af00      	add	r7, sp, #0
	port_pin_set_output_level(NRF24L01_CE,true);
    1658:	2101      	movs	r1, #1
    165a:	200a      	movs	r0, #10
    165c:	4b02      	ldr	r3, [pc, #8]	; (1668 <NRF_CE_Set+0x14>)
    165e:	4798      	blx	r3
	//PORT_IOBUS->Group[1].OUTSET.bit.OUTSET = PORT_PB11;
}
    1660:	46c0      	nop			; (mov r8, r8)
    1662:	46bd      	mov	sp, r7
    1664:	bd80      	pop	{r7, pc}
    1666:	46c0      	nop			; (mov r8, r8)
    1668:	000014f9 	.word	0x000014f9

0000166c <NRF_CE_Clear>:

void NRF_CE_Clear(void)
{
    166c:	b580      	push	{r7, lr}
    166e:	af00      	add	r7, sp, #0
	port_pin_set_output_level(NRF24L01_CE,false);
    1670:	2100      	movs	r1, #0
    1672:	200a      	movs	r0, #10
    1674:	4b02      	ldr	r3, [pc, #8]	; (1680 <NRF_CE_Clear+0x14>)
    1676:	4798      	blx	r3
	//PORT_IOBUS->Group[1].OUTCLR.bit.OUTCLR = PORT_PB11;
}
    1678:	46c0      	nop			; (mov r8, r8)
    167a:	46bd      	mov	sp, r7
    167c:	bd80      	pop	{r7, pc}
    167e:	46c0      	nop			; (mov r8, r8)
    1680:	000014f9 	.word	0x000014f9

00001684 <NRF_Enter_TX_Mode>:
	}
	return NRF_FAILURE;
}

void NRF_Enter_TX_Mode(char To_Addr[],char From_Addr[])
{
    1684:	b580      	push	{r7, lr}
    1686:	b082      	sub	sp, #8
    1688:	af00      	add	r7, sp, #0
    168a:	6078      	str	r0, [r7, #4]
    168c:	6039      	str	r1, [r7, #0]
	NRF_CE_Clear();
    168e:	4b16      	ldr	r3, [pc, #88]	; (16e8 <NRF_Enter_TX_Mode+0x64>)
    1690:	4798      	blx	r3
	delay_ms(1);
    1692:	2001      	movs	r0, #1
    1694:	4b15      	ldr	r3, [pc, #84]	; (16ec <NRF_Enter_TX_Mode+0x68>)
    1696:	4798      	blx	r3
	NRF_Write_2(NRF_W_REGISTER(NRF_CONFIG_REG),NRF_CONFIG_PWR_UP);
    1698:	2102      	movs	r1, #2
    169a:	2020      	movs	r0, #32
    169c:	4b14      	ldr	r3, [pc, #80]	; (16f0 <NRF_Enter_TX_Mode+0x6c>)
    169e:	4798      	blx	r3

	NRF_Write_2(NRF_W_REGISTER(NRF_EN_AA_REG),NRF_EN_AA_ENAA_P0);
    16a0:	2101      	movs	r1, #1
    16a2:	2021      	movs	r0, #33	; 0x21
    16a4:	4b12      	ldr	r3, [pc, #72]	; (16f0 <NRF_Enter_TX_Mode+0x6c>)
    16a6:	4798      	blx	r3

	NRF_Write_2(NRF_W_REGISTER(NRF_SETUP_AW_REG),NRF_SETUP_AW_4BYTES); //NRF_SETUP_AW_4BYTES
    16a8:	2102      	movs	r1, #2
    16aa:	2023      	movs	r0, #35	; 0x23
    16ac:	4b10      	ldr	r3, [pc, #64]	; (16f0 <NRF_Enter_TX_Mode+0x6c>)
    16ae:	4798      	blx	r3

	NRF_Write_2(NRF_W_REGISTER(NRF_FEATURE_REG),NRF_FEATURE_EN_DPL);
    16b0:	2104      	movs	r1, #4
    16b2:	203d      	movs	r0, #61	; 0x3d
    16b4:	4b0e      	ldr	r3, [pc, #56]	; (16f0 <NRF_Enter_TX_Mode+0x6c>)
    16b6:	4798      	blx	r3
	
	NRF_Write_2(NRF_W_REGISTER(NRF_DYNPD_REG),NRF_DYNPD_DPL_P0);
    16b8:	2101      	movs	r1, #1
    16ba:	203c      	movs	r0, #60	; 0x3c
    16bc:	4b0c      	ldr	r3, [pc, #48]	; (16f0 <NRF_Enter_TX_Mode+0x6c>)
    16be:	4798      	blx	r3

	NRF_Write_2(NRF_W_REGISTER(NRF_SETUP_RETR_REG),(NRF_SETUP_RETR_ARC_RT15 | NRF_SETUP_RETR_ARD_W4000));
    16c0:	21ff      	movs	r1, #255	; 0xff
    16c2:	2024      	movs	r0, #36	; 0x24
    16c4:	4b0a      	ldr	r3, [pc, #40]	; (16f0 <NRF_Enter_TX_Mode+0x6c>)
    16c6:	4798      	blx	r3
	//To_Addr[4] = 0xA1;
	NRF_Write(NRF_W_REGISTER(NRF_TX_ADDR_REG),5,To_Addr);
    16c8:	687b      	ldr	r3, [r7, #4]
    16ca:	001a      	movs	r2, r3
    16cc:	2105      	movs	r1, #5
    16ce:	2030      	movs	r0, #48	; 0x30
    16d0:	4b08      	ldr	r3, [pc, #32]	; (16f4 <NRF_Enter_TX_Mode+0x70>)
    16d2:	4798      	blx	r3
	NRF_Write(NRF_W_REGISTER(NRF_RX_ADDR_P0_REG),5,From_Addr);
    16d4:	683b      	ldr	r3, [r7, #0]
    16d6:	001a      	movs	r2, r3
    16d8:	2105      	movs	r1, #5
    16da:	202a      	movs	r0, #42	; 0x2a
    16dc:	4b05      	ldr	r3, [pc, #20]	; (16f4 <NRF_Enter_TX_Mode+0x70>)
    16de:	4798      	blx	r3
}
    16e0:	46c0      	nop			; (mov r8, r8)
    16e2:	46bd      	mov	sp, r7
    16e4:	b002      	add	sp, #8
    16e6:	bd80      	pop	{r7, pc}
    16e8:	0000166d 	.word	0x0000166d
    16ec:	000001a1 	.word	0x000001a1
    16f0:	00001791 	.word	0x00001791
    16f4:	00001725 	.word	0x00001725

000016f8 <NRF_Read_single>:
	
	return Status_Reg;
}

uint32_t NRF_Read_single(uint32_t Command)
{
    16f8:	b580      	push	{r7, lr}
    16fa:	b084      	sub	sp, #16
    16fc:	af00      	add	r7, sp, #0
    16fe:	6078      	str	r0, [r7, #4]
	char buffer;
	//NRF_Read(Command,1,&buffer);
	nrf24l01_spi_read(&buffer,1,(uint16_t)Command);
    1700:	687b      	ldr	r3, [r7, #4]
    1702:	b29a      	uxth	r2, r3
    1704:	230f      	movs	r3, #15
    1706:	18fb      	adds	r3, r7, r3
    1708:	2101      	movs	r1, #1
    170a:	0018      	movs	r0, r3
    170c:	4b04      	ldr	r3, [pc, #16]	; (1720 <NRF_Read_single+0x28>)
    170e:	4798      	blx	r3
	return buffer;
    1710:	230f      	movs	r3, #15
    1712:	18fb      	adds	r3, r7, r3
    1714:	781b      	ldrb	r3, [r3, #0]
}
    1716:	0018      	movs	r0, r3
    1718:	46bd      	mov	sp, r7
    171a:	b004      	add	sp, #16
    171c:	bd80      	pop	{r7, pc}
    171e:	46c0      	nop			; (mov r8, r8)
    1720:	000015a1 	.word	0x000015a1

00001724 <NRF_Write>:


uint32_t NRF_Write(uint32_t Command, uint32_t Length, char *Input)
{
    1724:	b580      	push	{r7, lr}
    1726:	b088      	sub	sp, #32
    1728:	af00      	add	r7, sp, #0
    172a:	60f8      	str	r0, [r7, #12]
    172c:	60b9      	str	r1, [r7, #8]
    172e:	607a      	str	r2, [r7, #4]
	uint32_t Temp=0;
    1730:	2300      	movs	r3, #0
    1732:	61fb      	str	r3, [r7, #28]
	char *buffer = Input;
    1734:	687b      	ldr	r3, [r7, #4]
    1736:	61bb      	str	r3, [r7, #24]
	uint32_t i = 0;
    1738:	2300      	movs	r3, #0
    173a:	617b      	str	r3, [r7, #20]
	NRF_CS_Set();
    173c:	4b11      	ldr	r3, [pc, #68]	; (1784 <NRF_Write+0x60>)
    173e:	4798      	blx	r3
	Temp = nrf24l01_spi_write_single(&Command);
    1740:	230c      	movs	r3, #12
    1742:	18fb      	adds	r3, r7, r3
    1744:	0018      	movs	r0, r3
    1746:	4b10      	ldr	r3, [pc, #64]	; (1788 <NRF_Write+0x64>)
    1748:	4798      	blx	r3
    174a:	0003      	movs	r3, r0
    174c:	61fb      	str	r3, [r7, #28]
	for (i = 0;i<Length;i++)
    174e:	2300      	movs	r3, #0
    1750:	617b      	str	r3, [r7, #20]
    1752:	e00b      	b.n	176c <NRF_Write+0x48>
	{
		Temp = nrf24l01_spi_write_single(buffer);
    1754:	69bb      	ldr	r3, [r7, #24]
    1756:	0018      	movs	r0, r3
    1758:	4b0b      	ldr	r3, [pc, #44]	; (1788 <NRF_Write+0x64>)
    175a:	4798      	blx	r3
    175c:	0003      	movs	r3, r0
    175e:	61fb      	str	r3, [r7, #28]
		buffer++;
    1760:	69bb      	ldr	r3, [r7, #24]
    1762:	3301      	adds	r3, #1
    1764:	61bb      	str	r3, [r7, #24]
	for (i = 0;i<Length;i++)
    1766:	697b      	ldr	r3, [r7, #20]
    1768:	3301      	adds	r3, #1
    176a:	617b      	str	r3, [r7, #20]
    176c:	697a      	ldr	r2, [r7, #20]
    176e:	68bb      	ldr	r3, [r7, #8]
    1770:	429a      	cmp	r2, r3
    1772:	d3ef      	bcc.n	1754 <NRF_Write+0x30>
	}
	NRF_CS_Clear();
    1774:	4b05      	ldr	r3, [pc, #20]	; (178c <NRF_Write+0x68>)
    1776:	4798      	blx	r3
	
	return Temp;
    1778:	69fb      	ldr	r3, [r7, #28]
}
    177a:	0018      	movs	r0, r3
    177c:	46bd      	mov	sp, r7
    177e:	b008      	add	sp, #32
    1780:	bd80      	pop	{r7, pc}
    1782:	46c0      	nop			; (mov r8, r8)
    1784:	0000160d 	.word	0x0000160d
    1788:	00001581 	.word	0x00001581
    178c:	00001631 	.word	0x00001631

00001790 <NRF_Write_2>:

uint32_t NRF_Write_2(uint32_t Command, char Input)
{
    1790:	b580      	push	{r7, lr}
    1792:	b082      	sub	sp, #8
    1794:	af00      	add	r7, sp, #0
    1796:	6078      	str	r0, [r7, #4]
    1798:	000a      	movs	r2, r1
    179a:	1cfb      	adds	r3, r7, #3
    179c:	701a      	strb	r2, [r3, #0]
	return NRF_Write(Command,1,&Input);
    179e:	1cfa      	adds	r2, r7, #3
    17a0:	687b      	ldr	r3, [r7, #4]
    17a2:	2101      	movs	r1, #1
    17a4:	0018      	movs	r0, r3
    17a6:	4b03      	ldr	r3, [pc, #12]	; (17b4 <NRF_Write_2+0x24>)
    17a8:	4798      	blx	r3
    17aa:	0003      	movs	r3, r0
}
    17ac:	0018      	movs	r0, r3
    17ae:	46bd      	mov	sp, r7
    17b0:	b002      	add	sp, #8
    17b2:	bd80      	pop	{r7, pc}
    17b4:	00001725 	.word	0x00001725

000017b8 <NRF_Write_1>:

uint32_t NRF_Write_1(uint32_t Command)
{
    17b8:	b580      	push	{r7, lr}
    17ba:	b082      	sub	sp, #8
    17bc:	af00      	add	r7, sp, #0
    17be:	6078      	str	r0, [r7, #4]
	return NRF_Write(Command,0,'\0');
    17c0:	687b      	ldr	r3, [r7, #4]
    17c2:	2200      	movs	r2, #0
    17c4:	2100      	movs	r1, #0
    17c6:	0018      	movs	r0, r3
    17c8:	4b03      	ldr	r3, [pc, #12]	; (17d8 <NRF_Write_1+0x20>)
    17ca:	4798      	blx	r3
    17cc:	0003      	movs	r3, r0
}
    17ce:	0018      	movs	r0, r3
    17d0:	46bd      	mov	sp, r7
    17d2:	b002      	add	sp, #8
    17d4:	bd80      	pop	{r7, pc}
    17d6:	46c0      	nop			; (mov r8, r8)
    17d8:	00001725 	.word	0x00001725

000017dc <NRF_TX_data>:


uint32_t NRF_TX_data(uint8_t *data, uint32_t length)
{
    17dc:	b580      	push	{r7, lr}
    17de:	b08a      	sub	sp, #40	; 0x28
    17e0:	af00      	add	r7, sp, #0
    17e2:	6078      	str	r0, [r7, #4]
    17e4:	6039      	str	r1, [r7, #0]
	if (length > 16)
    17e6:	683b      	ldr	r3, [r7, #0]
    17e8:	2b10      	cmp	r3, #16
    17ea:	d901      	bls.n	17f0 <NRF_TX_data+0x14>
	{
		return NRF_FAILURE;
    17ec:	2300      	movs	r3, #0
    17ee:	e0aa      	b.n	1946 <NRF_TX_data+0x16a>
	}
	
	uint32_t Temp=0;
    17f0:	2300      	movs	r3, #0
    17f2:	623b      	str	r3, [r7, #32]
	static char Count;
	Count++;
    17f4:	4b56      	ldr	r3, [pc, #344]	; (1950 <NRF_TX_data+0x174>)
    17f6:	781b      	ldrb	r3, [r3, #0]
    17f8:	3301      	adds	r3, #1
    17fa:	b2da      	uxtb	r2, r3
    17fc:	4b54      	ldr	r3, [pc, #336]	; (1950 <NRF_TX_data+0x174>)
    17fe:	701a      	strb	r2, [r3, #0]
	{
		Count=0;
	}
	//char Package_Data[4] = {(char)((Type>>8)&0xFF),(char)((Type>>0)&0xFF),(char)((Command>>8)&0xFF),(char)((Command>>0)&0xFF)};
	//char Package_Data[16] = {0x00,0x00,0x00,0x05,Count,0x00,0x00,0x00,0x01,(char)(Type&0x00),(char)((Command>>24)&0xFF),(char)((Command>>16)&0xFF)}(char)((Command>>8)&0xFF),(char)((Command>>0)&0xFF),0x2A,0x42};
	char Package_Data[20] = {0x2A,0x42,0x05,Count,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x2A,0x42};
    1800:	230c      	movs	r3, #12
    1802:	18fb      	adds	r3, r7, r3
    1804:	222a      	movs	r2, #42	; 0x2a
    1806:	701a      	strb	r2, [r3, #0]
    1808:	230c      	movs	r3, #12
    180a:	18fb      	adds	r3, r7, r3
    180c:	2242      	movs	r2, #66	; 0x42
    180e:	705a      	strb	r2, [r3, #1]
    1810:	230c      	movs	r3, #12
    1812:	18fb      	adds	r3, r7, r3
    1814:	2205      	movs	r2, #5
    1816:	709a      	strb	r2, [r3, #2]
    1818:	4b4d      	ldr	r3, [pc, #308]	; (1950 <NRF_TX_data+0x174>)
    181a:	781a      	ldrb	r2, [r3, #0]
    181c:	230c      	movs	r3, #12
    181e:	18fb      	adds	r3, r7, r3
    1820:	70da      	strb	r2, [r3, #3]
    1822:	230c      	movs	r3, #12
    1824:	18fb      	adds	r3, r7, r3
    1826:	2200      	movs	r2, #0
    1828:	711a      	strb	r2, [r3, #4]
    182a:	230c      	movs	r3, #12
    182c:	18fb      	adds	r3, r7, r3
    182e:	2200      	movs	r2, #0
    1830:	715a      	strb	r2, [r3, #5]
    1832:	230c      	movs	r3, #12
    1834:	18fb      	adds	r3, r7, r3
    1836:	2200      	movs	r2, #0
    1838:	719a      	strb	r2, [r3, #6]
    183a:	230c      	movs	r3, #12
    183c:	18fb      	adds	r3, r7, r3
    183e:	2200      	movs	r2, #0
    1840:	71da      	strb	r2, [r3, #7]
    1842:	230c      	movs	r3, #12
    1844:	18fb      	adds	r3, r7, r3
    1846:	2200      	movs	r2, #0
    1848:	721a      	strb	r2, [r3, #8]
    184a:	230c      	movs	r3, #12
    184c:	18fb      	adds	r3, r7, r3
    184e:	2200      	movs	r2, #0
    1850:	725a      	strb	r2, [r3, #9]
    1852:	230c      	movs	r3, #12
    1854:	18fb      	adds	r3, r7, r3
    1856:	2200      	movs	r2, #0
    1858:	729a      	strb	r2, [r3, #10]
    185a:	230c      	movs	r3, #12
    185c:	18fb      	adds	r3, r7, r3
    185e:	2200      	movs	r2, #0
    1860:	72da      	strb	r2, [r3, #11]
    1862:	230c      	movs	r3, #12
    1864:	18fb      	adds	r3, r7, r3
    1866:	2200      	movs	r2, #0
    1868:	731a      	strb	r2, [r3, #12]
    186a:	230c      	movs	r3, #12
    186c:	18fb      	adds	r3, r7, r3
    186e:	2200      	movs	r2, #0
    1870:	735a      	strb	r2, [r3, #13]
    1872:	230c      	movs	r3, #12
    1874:	18fb      	adds	r3, r7, r3
    1876:	2200      	movs	r2, #0
    1878:	739a      	strb	r2, [r3, #14]
    187a:	230c      	movs	r3, #12
    187c:	18fb      	adds	r3, r7, r3
    187e:	2200      	movs	r2, #0
    1880:	73da      	strb	r2, [r3, #15]
    1882:	230c      	movs	r3, #12
    1884:	18fb      	adds	r3, r7, r3
    1886:	2200      	movs	r2, #0
    1888:	741a      	strb	r2, [r3, #16]
    188a:	230c      	movs	r3, #12
    188c:	18fb      	adds	r3, r7, r3
    188e:	2201      	movs	r2, #1
    1890:	745a      	strb	r2, [r3, #17]
    1892:	230c      	movs	r3, #12
    1894:	18fb      	adds	r3, r7, r3
    1896:	222a      	movs	r2, #42	; 0x2a
    1898:	749a      	strb	r2, [r3, #18]
    189a:	230c      	movs	r3, #12
    189c:	18fb      	adds	r3, r7, r3
    189e:	2242      	movs	r2, #66	; 0x42
    18a0:	74da      	strb	r2, [r3, #19]
	for (int i=0;i<length;i++)
    18a2:	2300      	movs	r3, #0
    18a4:	627b      	str	r3, [r7, #36]	; 0x24
    18a6:	e00b      	b.n	18c0 <NRF_TX_data+0xe4>
	{
		Package_Data[i+4] = data[i];
    18a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    18aa:	3304      	adds	r3, #4
    18ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    18ae:	6879      	ldr	r1, [r7, #4]
    18b0:	188a      	adds	r2, r1, r2
    18b2:	7811      	ldrb	r1, [r2, #0]
    18b4:	220c      	movs	r2, #12
    18b6:	18ba      	adds	r2, r7, r2
    18b8:	54d1      	strb	r1, [r2, r3]
	for (int i=0;i<length;i++)
    18ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    18bc:	3301      	adds	r3, #1
    18be:	627b      	str	r3, [r7, #36]	; 0x24
    18c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    18c2:	683b      	ldr	r3, [r7, #0]
    18c4:	429a      	cmp	r2, r3
    18c6:	d3ef      	bcc.n	18a8 <NRF_TX_data+0xcc>
	}
	
	
	NRF_Write_1(NRF_FLUSH_TX);
    18c8:	20e1      	movs	r0, #225	; 0xe1
    18ca:	4b22      	ldr	r3, [pc, #136]	; (1954 <NRF_TX_data+0x178>)
    18cc:	4798      	blx	r3
	NRF_Write(NRF_W_TX_PAYLOAD,20,&Package_Data);
    18ce:	230c      	movs	r3, #12
    18d0:	18fb      	adds	r3, r7, r3
    18d2:	001a      	movs	r2, r3
    18d4:	2114      	movs	r1, #20
    18d6:	20a0      	movs	r0, #160	; 0xa0
    18d8:	4b1f      	ldr	r3, [pc, #124]	; (1958 <NRF_TX_data+0x17c>)
    18da:	4798      	blx	r3
	
	NRF_CE_Set();
    18dc:	4b1f      	ldr	r3, [pc, #124]	; (195c <NRF_TX_data+0x180>)
    18de:	4798      	blx	r3
	delay_ms(1);
    18e0:	2001      	movs	r0, #1
    18e2:	4b1f      	ldr	r3, [pc, #124]	; (1960 <NRF_TX_data+0x184>)
    18e4:	4798      	blx	r3
	do
	{
		Temp = NRF_Read_single(NRF_R_REGISTER(NRF_STATUS_REG));
    18e6:	2007      	movs	r0, #7
    18e8:	4b1e      	ldr	r3, [pc, #120]	; (1964 <NRF_TX_data+0x188>)
    18ea:	4798      	blx	r3
    18ec:	0003      	movs	r3, r0
    18ee:	623b      	str	r3, [r7, #32]
	}
	while (!(Temp & (NRF_STATUS_TX_DS | NRF_STATUS_MAX_RT)));
    18f0:	6a3b      	ldr	r3, [r7, #32]
    18f2:	2230      	movs	r2, #48	; 0x30
    18f4:	4013      	ands	r3, r2
    18f6:	d0f6      	beq.n	18e6 <NRF_TX_data+0x10a>
	
	
	if (Temp & NRF_STATUS_TX_DS )
    18f8:	6a3b      	ldr	r3, [r7, #32]
    18fa:	2220      	movs	r2, #32
    18fc:	4013      	ands	r3, r2
    18fe:	d005      	beq.n	190c <NRF_TX_data+0x130>
	{
		NRF_Write_2(NRF_W_REGISTER(NRF_STATUS_REG),(NRF_STATUS_TX_DS | NRF_STATUS_MAX_RT));
    1900:	2130      	movs	r1, #48	; 0x30
    1902:	2027      	movs	r0, #39	; 0x27
    1904:	4b18      	ldr	r3, [pc, #96]	; (1968 <NRF_TX_data+0x18c>)
    1906:	4798      	blx	r3
		return NRF_SUCCES;
    1908:	2301      	movs	r3, #1
    190a:	e01c      	b.n	1946 <NRF_TX_data+0x16a>
	}
	else if (Temp & NRF_STATUS_MAX_RT)
    190c:	6a3b      	ldr	r3, [r7, #32]
    190e:	2210      	movs	r2, #16
    1910:	4013      	ands	r3, r2
    1912:	d017      	beq.n	1944 <NRF_TX_data+0x168>
	{
		delay_ms(4);
    1914:	2004      	movs	r0, #4
    1916:	4b12      	ldr	r3, [pc, #72]	; (1960 <NRF_TX_data+0x184>)
    1918:	4798      	blx	r3
		Temp = NRF_Read_single(NRF_R_REGISTER(NRF_STATUS_REG));
    191a:	2007      	movs	r0, #7
    191c:	4b11      	ldr	r3, [pc, #68]	; (1964 <NRF_TX_data+0x188>)
    191e:	4798      	blx	r3
    1920:	0003      	movs	r3, r0
    1922:	623b      	str	r3, [r7, #32]
		if (Temp & NRF_STATUS_TX_DS )
    1924:	6a3b      	ldr	r3, [r7, #32]
    1926:	2220      	movs	r2, #32
    1928:	4013      	ands	r3, r2
    192a:	d005      	beq.n	1938 <NRF_TX_data+0x15c>
		{
			NRF_Write_2(NRF_W_REGISTER(NRF_STATUS_REG),(NRF_STATUS_TX_DS | NRF_STATUS_MAX_RT));
    192c:	2130      	movs	r1, #48	; 0x30
    192e:	2027      	movs	r0, #39	; 0x27
    1930:	4b0d      	ldr	r3, [pc, #52]	; (1968 <NRF_TX_data+0x18c>)
    1932:	4798      	blx	r3
			return NRF_SUCCES;
    1934:	2301      	movs	r3, #1
    1936:	e006      	b.n	1946 <NRF_TX_data+0x16a>
		}
		else
		{
			NRF_Write_2(NRF_W_REGISTER(NRF_STATUS_REG),(NRF_STATUS_TX_DS | NRF_STATUS_MAX_RT));
    1938:	2130      	movs	r1, #48	; 0x30
    193a:	2027      	movs	r0, #39	; 0x27
    193c:	4b0a      	ldr	r3, [pc, #40]	; (1968 <NRF_TX_data+0x18c>)
    193e:	4798      	blx	r3
			return NRF_FAILURE;
    1940:	2300      	movs	r3, #0
    1942:	e000      	b.n	1946 <NRF_TX_data+0x16a>
		}
		
	}
	return NRF_FAILURE;
    1944:	2300      	movs	r3, #0
    1946:	0018      	movs	r0, r3
    1948:	46bd      	mov	sp, r7
    194a:	b00a      	add	sp, #40	; 0x28
    194c:	bd80      	pop	{r7, pc}
    194e:	46c0      	nop			; (mov r8, r8)
    1950:	200000a2 	.word	0x200000a2
    1954:	000017b9 	.word	0x000017b9
    1958:	00001725 	.word	0x00001725
    195c:	00001655 	.word	0x00001655
    1960:	000001a1 	.word	0x000001a1
    1964:	000016f9 	.word	0x000016f9
    1968:	00001791 	.word	0x00001791

0000196c <system_pinmux_get_group_from_gpio_pin>:
{
    196c:	b580      	push	{r7, lr}
    196e:	b084      	sub	sp, #16
    1970:	af00      	add	r7, sp, #0
    1972:	0002      	movs	r2, r0
    1974:	1dfb      	adds	r3, r7, #7
    1976:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    1978:	230f      	movs	r3, #15
    197a:	18fb      	adds	r3, r7, r3
    197c:	1dfa      	adds	r2, r7, #7
    197e:	7812      	ldrb	r2, [r2, #0]
    1980:	09d2      	lsrs	r2, r2, #7
    1982:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    1984:	230e      	movs	r3, #14
    1986:	18fb      	adds	r3, r7, r3
    1988:	1dfa      	adds	r2, r7, #7
    198a:	7812      	ldrb	r2, [r2, #0]
    198c:	0952      	lsrs	r2, r2, #5
    198e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    1990:	4b0d      	ldr	r3, [pc, #52]	; (19c8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    1992:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    1994:	230f      	movs	r3, #15
    1996:	18fb      	adds	r3, r7, r3
    1998:	781b      	ldrb	r3, [r3, #0]
    199a:	2b00      	cmp	r3, #0
    199c:	d10f      	bne.n	19be <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    199e:	230f      	movs	r3, #15
    19a0:	18fb      	adds	r3, r7, r3
    19a2:	781b      	ldrb	r3, [r3, #0]
    19a4:	009b      	lsls	r3, r3, #2
    19a6:	2210      	movs	r2, #16
    19a8:	4694      	mov	ip, r2
    19aa:	44bc      	add	ip, r7
    19ac:	4463      	add	r3, ip
    19ae:	3b08      	subs	r3, #8
    19b0:	681a      	ldr	r2, [r3, #0]
    19b2:	230e      	movs	r3, #14
    19b4:	18fb      	adds	r3, r7, r3
    19b6:	781b      	ldrb	r3, [r3, #0]
    19b8:	01db      	lsls	r3, r3, #7
    19ba:	18d3      	adds	r3, r2, r3
    19bc:	e000      	b.n	19c0 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    19be:	2300      	movs	r3, #0
}
    19c0:	0018      	movs	r0, r3
    19c2:	46bd      	mov	sp, r7
    19c4:	b004      	add	sp, #16
    19c6:	bd80      	pop	{r7, pc}
    19c8:	41004400 	.word	0x41004400

000019cc <port_get_group_from_gpio_pin>:
{
    19cc:	b580      	push	{r7, lr}
    19ce:	b082      	sub	sp, #8
    19d0:	af00      	add	r7, sp, #0
    19d2:	0002      	movs	r2, r0
    19d4:	1dfb      	adds	r3, r7, #7
    19d6:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    19d8:	1dfb      	adds	r3, r7, #7
    19da:	781b      	ldrb	r3, [r3, #0]
    19dc:	0018      	movs	r0, r3
    19de:	4b03      	ldr	r3, [pc, #12]	; (19ec <port_get_group_from_gpio_pin+0x20>)
    19e0:	4798      	blx	r3
    19e2:	0003      	movs	r3, r0
}
    19e4:	0018      	movs	r0, r3
    19e6:	46bd      	mov	sp, r7
    19e8:	b002      	add	sp, #8
    19ea:	bd80      	pop	{r7, pc}
    19ec:	0000196d 	.word	0x0000196d

000019f0 <port_get_config_defaults>:
{
    19f0:	b580      	push	{r7, lr}
    19f2:	b082      	sub	sp, #8
    19f4:	af00      	add	r7, sp, #0
    19f6:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
    19f8:	687b      	ldr	r3, [r7, #4]
    19fa:	2200      	movs	r2, #0
    19fc:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    19fe:	687b      	ldr	r3, [r7, #4]
    1a00:	2201      	movs	r2, #1
    1a02:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    1a04:	687b      	ldr	r3, [r7, #4]
    1a06:	2200      	movs	r2, #0
    1a08:	709a      	strb	r2, [r3, #2]
}
    1a0a:	46c0      	nop			; (mov r8, r8)
    1a0c:	46bd      	mov	sp, r7
    1a0e:	b002      	add	sp, #8
    1a10:	bd80      	pop	{r7, pc}
	...

00001a14 <port_pin_set_output_level>:
{
    1a14:	b580      	push	{r7, lr}
    1a16:	b084      	sub	sp, #16
    1a18:	af00      	add	r7, sp, #0
    1a1a:	0002      	movs	r2, r0
    1a1c:	1dfb      	adds	r3, r7, #7
    1a1e:	701a      	strb	r2, [r3, #0]
    1a20:	1dbb      	adds	r3, r7, #6
    1a22:	1c0a      	adds	r2, r1, #0
    1a24:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    1a26:	1dfb      	adds	r3, r7, #7
    1a28:	781b      	ldrb	r3, [r3, #0]
    1a2a:	0018      	movs	r0, r3
    1a2c:	4b0d      	ldr	r3, [pc, #52]	; (1a64 <port_pin_set_output_level+0x50>)
    1a2e:	4798      	blx	r3
    1a30:	0003      	movs	r3, r0
    1a32:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1a34:	1dfb      	adds	r3, r7, #7
    1a36:	781b      	ldrb	r3, [r3, #0]
    1a38:	221f      	movs	r2, #31
    1a3a:	4013      	ands	r3, r2
    1a3c:	2201      	movs	r2, #1
    1a3e:	409a      	lsls	r2, r3
    1a40:	0013      	movs	r3, r2
    1a42:	60bb      	str	r3, [r7, #8]
	if (level) {
    1a44:	1dbb      	adds	r3, r7, #6
    1a46:	781b      	ldrb	r3, [r3, #0]
    1a48:	2b00      	cmp	r3, #0
    1a4a:	d003      	beq.n	1a54 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    1a4c:	68fb      	ldr	r3, [r7, #12]
    1a4e:	68ba      	ldr	r2, [r7, #8]
    1a50:	619a      	str	r2, [r3, #24]
}
    1a52:	e002      	b.n	1a5a <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    1a54:	68fb      	ldr	r3, [r7, #12]
    1a56:	68ba      	ldr	r2, [r7, #8]
    1a58:	615a      	str	r2, [r3, #20]
}
    1a5a:	46c0      	nop			; (mov r8, r8)
    1a5c:	46bd      	mov	sp, r7
    1a5e:	b004      	add	sp, #16
    1a60:	bd80      	pop	{r7, pc}
    1a62:	46c0      	nop			; (mov r8, r8)
    1a64:	000019cd 	.word	0x000019cd

00001a68 <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
    1a68:	b580      	push	{r7, lr}
    1a6a:	b084      	sub	sp, #16
    1a6c:	af00      	add	r7, sp, #0
    1a6e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1a70:	687b      	ldr	r3, [r7, #4]
    1a72:	681b      	ldr	r3, [r3, #0]
    1a74:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    1a76:	68fb      	ldr	r3, [r7, #12]
    1a78:	69db      	ldr	r3, [r3, #28]
    1a7a:	1e5a      	subs	r2, r3, #1
    1a7c:	4193      	sbcs	r3, r2
    1a7e:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
    1a80:	0018      	movs	r0, r3
    1a82:	46bd      	mov	sp, r7
    1a84:	b004      	add	sp, #16
    1a86:	bd80      	pop	{r7, pc}

00001a88 <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
    1a88:	b580      	push	{r7, lr}
    1a8a:	b082      	sub	sp, #8
    1a8c:	af00      	add	r7, sp, #0
    1a8e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    1a90:	687b      	ldr	r3, [r7, #4]
    1a92:	2201      	movs	r2, #1
    1a94:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    1a96:	687b      	ldr	r3, [r7, #4]
    1a98:	2200      	movs	r2, #0
    1a9a:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    1a9c:	687b      	ldr	r3, [r7, #4]
    1a9e:	2200      	movs	r2, #0
    1aa0:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    1aa2:	687b      	ldr	r3, [r7, #4]
    1aa4:	22c0      	movs	r2, #192	; 0xc0
    1aa6:	0392      	lsls	r2, r2, #14
    1aa8:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    1aaa:	687b      	ldr	r3, [r7, #4]
    1aac:	2200      	movs	r2, #0
    1aae:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
    1ab0:	687b      	ldr	r3, [r7, #4]
    1ab2:	2200      	movs	r2, #0
    1ab4:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
    1ab6:	687b      	ldr	r3, [r7, #4]
    1ab8:	2201      	movs	r2, #1
    1aba:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    1abc:	687b      	ldr	r3, [r7, #4]
    1abe:	2201      	movs	r2, #1
    1ac0:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    1ac2:	687b      	ldr	r3, [r7, #4]
    1ac4:	2200      	movs	r2, #0
    1ac6:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    1ac8:	687b      	ldr	r3, [r7, #4]
    1aca:	2224      	movs	r2, #36	; 0x24
    1acc:	2100      	movs	r1, #0
    1ace:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    1ad0:	687b      	ldr	r3, [r7, #4]
    1ad2:	3318      	adds	r3, #24
    1ad4:	220c      	movs	r2, #12
    1ad6:	2100      	movs	r1, #0
    1ad8:	0018      	movs	r0, r3
    1ada:	4b0a      	ldr	r3, [pc, #40]	; (1b04 <spi_get_config_defaults+0x7c>)
    1adc:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
    1ade:	687b      	ldr	r3, [r7, #4]
    1ae0:	4a09      	ldr	r2, [pc, #36]	; (1b08 <spi_get_config_defaults+0x80>)
    1ae2:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
    1ae4:	687b      	ldr	r3, [r7, #4]
    1ae6:	2200      	movs	r2, #0
    1ae8:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
    1aea:	687b      	ldr	r3, [r7, #4]
    1aec:	2200      	movs	r2, #0
    1aee:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
    1af0:	687b      	ldr	r3, [r7, #4]
    1af2:	2200      	movs	r2, #0
    1af4:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
    1af6:	687b      	ldr	r3, [r7, #4]
    1af8:	2200      	movs	r2, #0
    1afa:	635a      	str	r2, [r3, #52]	; 0x34

};
    1afc:	46c0      	nop			; (mov r8, r8)
    1afe:	46bd      	mov	sp, r7
    1b00:	b002      	add	sp, #8
    1b02:	bd80      	pop	{r7, pc}
    1b04:	000073d5 	.word	0x000073d5
    1b08:	000186a0 	.word	0x000186a0

00001b0c <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
    1b0c:	b580      	push	{r7, lr}
    1b0e:	b082      	sub	sp, #8
    1b10:	af00      	add	r7, sp, #0
    1b12:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
    1b14:	687b      	ldr	r3, [r7, #4]
    1b16:	220a      	movs	r2, #10
    1b18:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
    1b1a:	687b      	ldr	r3, [r7, #4]
    1b1c:	2200      	movs	r2, #0
    1b1e:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
    1b20:	687b      	ldr	r3, [r7, #4]
    1b22:	2200      	movs	r2, #0
    1b24:	709a      	strb	r2, [r3, #2]
}
    1b26:	46c0      	nop			; (mov r8, r8)
    1b28:	46bd      	mov	sp, r7
    1b2a:	b002      	add	sp, #8
    1b2c:	bd80      	pop	{r7, pc}
	...

00001b30 <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		const struct spi_slave_inst_config *const config)
{
    1b30:	b580      	push	{r7, lr}
    1b32:	b084      	sub	sp, #16
    1b34:	af00      	add	r7, sp, #0
    1b36:	6078      	str	r0, [r7, #4]
    1b38:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    1b3a:	683b      	ldr	r3, [r7, #0]
    1b3c:	781a      	ldrb	r2, [r3, #0]
    1b3e:	687b      	ldr	r3, [r7, #4]
    1b40:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
    1b42:	683b      	ldr	r3, [r7, #0]
    1b44:	785a      	ldrb	r2, [r3, #1]
    1b46:	687b      	ldr	r3, [r7, #4]
    1b48:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
    1b4a:	683b      	ldr	r3, [r7, #0]
    1b4c:	789a      	ldrb	r2, [r3, #2]
    1b4e:	687b      	ldr	r3, [r7, #4]
    1b50:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    1b52:	230c      	movs	r3, #12
    1b54:	18fb      	adds	r3, r7, r3
    1b56:	0018      	movs	r0, r3
    1b58:	4b0b      	ldr	r3, [pc, #44]	; (1b88 <spi_attach_slave+0x58>)
    1b5a:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    1b5c:	230c      	movs	r3, #12
    1b5e:	18fb      	adds	r3, r7, r3
    1b60:	2201      	movs	r2, #1
    1b62:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    1b64:	687b      	ldr	r3, [r7, #4]
    1b66:	781b      	ldrb	r3, [r3, #0]
    1b68:	220c      	movs	r2, #12
    1b6a:	18ba      	adds	r2, r7, r2
    1b6c:	0011      	movs	r1, r2
    1b6e:	0018      	movs	r0, r3
    1b70:	4b06      	ldr	r3, [pc, #24]	; (1b8c <spi_attach_slave+0x5c>)
    1b72:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    1b74:	687b      	ldr	r3, [r7, #4]
    1b76:	781b      	ldrb	r3, [r3, #0]
    1b78:	2101      	movs	r1, #1
    1b7a:	0018      	movs	r0, r3
    1b7c:	4b04      	ldr	r3, [pc, #16]	; (1b90 <spi_attach_slave+0x60>)
    1b7e:	4798      	blx	r3
}
    1b80:	46c0      	nop			; (mov r8, r8)
    1b82:	46bd      	mov	sp, r7
    1b84:	b004      	add	sp, #16
    1b86:	bd80      	pop	{r7, pc}
    1b88:	000019f1 	.word	0x000019f1
    1b8c:	00002ca1 	.word	0x00002ca1
    1b90:	00001a15 	.word	0x00001a15

00001b94 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
    1b94:	b580      	push	{r7, lr}
    1b96:	b084      	sub	sp, #16
    1b98:	af00      	add	r7, sp, #0
    1b9a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1b9c:	687b      	ldr	r3, [r7, #4]
    1b9e:	681b      	ldr	r3, [r3, #0]
    1ba0:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
    1ba2:	46c0      	nop			; (mov r8, r8)
    1ba4:	687b      	ldr	r3, [r7, #4]
    1ba6:	0018      	movs	r0, r3
    1ba8:	4b06      	ldr	r3, [pc, #24]	; (1bc4 <spi_enable+0x30>)
    1baa:	4798      	blx	r3
    1bac:	1e03      	subs	r3, r0, #0
    1bae:	d1f9      	bne.n	1ba4 <spi_enable+0x10>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    1bb0:	68fb      	ldr	r3, [r7, #12]
    1bb2:	681b      	ldr	r3, [r3, #0]
    1bb4:	2202      	movs	r2, #2
    1bb6:	431a      	orrs	r2, r3
    1bb8:	68fb      	ldr	r3, [r7, #12]
    1bba:	601a      	str	r2, [r3, #0]
}
    1bbc:	46c0      	nop			; (mov r8, r8)
    1bbe:	46bd      	mov	sp, r7
    1bc0:	b004      	add	sp, #16
    1bc2:	bd80      	pop	{r7, pc}
    1bc4:	00001a69 	.word	0x00001a69

00001bc8 <spi_master_init>:
 */ 

#include "spi_master.h"

void spi_master_init(void)
{
    1bc8:	b580      	push	{r7, lr}
    1bca:	b090      	sub	sp, #64	; 0x40
    1bcc:	af00      	add	r7, sp, #0
	struct spi_config config_spi;
	struct spi_slave_inst_config bme280_slave_config;
	struct spi_slave_inst_config nrf24l01_slave_config;
	
	spi_slave_inst_get_config_defaults(&bme280_slave_config);
    1bce:	1d3b      	adds	r3, r7, #4
    1bd0:	0018      	movs	r0, r3
    1bd2:	4b23      	ldr	r3, [pc, #140]	; (1c60 <spi_master_init+0x98>)
    1bd4:	4798      	blx	r3
	bme280_slave_config.ss_pin = BME280_CE;
    1bd6:	1d3b      	adds	r3, r7, #4
    1bd8:	2210      	movs	r2, #16
    1bda:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&bme280_slave_instance, &bme280_slave_config);
    1bdc:	1d3a      	adds	r2, r7, #4
    1bde:	4b21      	ldr	r3, [pc, #132]	; (1c64 <spi_master_init+0x9c>)
    1be0:	0011      	movs	r1, r2
    1be2:	0018      	movs	r0, r3
    1be4:	4b20      	ldr	r3, [pc, #128]	; (1c68 <spi_master_init+0xa0>)
    1be6:	4798      	blx	r3
	
	spi_slave_inst_get_config_defaults(&nrf24l01_slave_config);
    1be8:	003b      	movs	r3, r7
    1bea:	0018      	movs	r0, r3
    1bec:	4b1c      	ldr	r3, [pc, #112]	; (1c60 <spi_master_init+0x98>)
    1bee:	4798      	blx	r3
	nrf24l01_slave_config.ss_pin = NRF24L01_SS;
    1bf0:	003b      	movs	r3, r7
    1bf2:	220c      	movs	r2, #12
    1bf4:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&nrf24l01_slave_instance, &nrf24l01_slave_config);
    1bf6:	003a      	movs	r2, r7
    1bf8:	4b1c      	ldr	r3, [pc, #112]	; (1c6c <spi_master_init+0xa4>)
    1bfa:	0011      	movs	r1, r2
    1bfc:	0018      	movs	r0, r3
    1bfe:	4b1a      	ldr	r3, [pc, #104]	; (1c68 <spi_master_init+0xa0>)
    1c00:	4798      	blx	r3
	
	
	/* Configure, initialize and enable SERCOM SPI module */
	spi_get_config_defaults(&config_spi);
    1c02:	2308      	movs	r3, #8
    1c04:	18fb      	adds	r3, r7, r3
    1c06:	0018      	movs	r0, r3
    1c08:	4b19      	ldr	r3, [pc, #100]	; (1c70 <spi_master_init+0xa8>)
    1c0a:	4798      	blx	r3
	config_spi.mux_setting = SPI_MUX_SETTING;
    1c0c:	2308      	movs	r3, #8
    1c0e:	18fb      	adds	r3, r7, r3
    1c10:	22c0      	movs	r2, #192	; 0xc0
    1c12:	0392      	lsls	r2, r2, #14
    1c14:	60da      	str	r2, [r3, #12]
	/* Configure pad 0 for data in */
	config_spi.pinmux_pad0 = SPI_MOSI;
    1c16:	2308      	movs	r3, #8
    1c18:	18fb      	adds	r3, r7, r3
    1c1a:	4a16      	ldr	r2, [pc, #88]	; (1c74 <spi_master_init+0xac>)
    1c1c:	629a      	str	r2, [r3, #40]	; 0x28
	/* Configure pad 1 as unused */
	config_spi.pinmux_pad1 = SPI_SCK;
    1c1e:	2308      	movs	r3, #8
    1c20:	18fb      	adds	r3, r7, r3
    1c22:	4a15      	ldr	r2, [pc, #84]	; (1c78 <spi_master_init+0xb0>)
    1c24:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Configure pad 2 for data out */
	config_spi.pinmux_pad2 = PINMUX_UNUSED;
    1c26:	2308      	movs	r3, #8
    1c28:	18fb      	adds	r3, r7, r3
    1c2a:	2201      	movs	r2, #1
    1c2c:	4252      	negs	r2, r2
    1c2e:	631a      	str	r2, [r3, #48]	; 0x30
	/* Configure pad 3 for SCK */
	config_spi.pinmux_pad3 = SPI_MISO;
    1c30:	2308      	movs	r3, #8
    1c32:	18fb      	adds	r3, r7, r3
    1c34:	4a11      	ldr	r2, [pc, #68]	; (1c7c <spi_master_init+0xb4>)
    1c36:	635a      	str	r2, [r3, #52]	; 0x34
	config_spi.receiver_enable = true;
    1c38:	2308      	movs	r3, #8
    1c3a:	18fb      	adds	r3, r7, r3
    1c3c:	2201      	movs	r2, #1
    1c3e:	749a      	strb	r2, [r3, #18]
	spi_init(&spi_master_instance, SPI_MODULE, &config_spi); 
    1c40:	2308      	movs	r3, #8
    1c42:	18fa      	adds	r2, r7, r3
    1c44:	490e      	ldr	r1, [pc, #56]	; (1c80 <spi_master_init+0xb8>)
    1c46:	4b0f      	ldr	r3, [pc, #60]	; (1c84 <spi_master_init+0xbc>)
    1c48:	0018      	movs	r0, r3
    1c4a:	4b0f      	ldr	r3, [pc, #60]	; (1c88 <spi_master_init+0xc0>)
    1c4c:	4798      	blx	r3
	spi_enable(&spi_master_instance);
    1c4e:	4b0d      	ldr	r3, [pc, #52]	; (1c84 <spi_master_init+0xbc>)
    1c50:	0018      	movs	r0, r3
    1c52:	4b0e      	ldr	r3, [pc, #56]	; (1c8c <spi_master_init+0xc4>)
    1c54:	4798      	blx	r3
}
    1c56:	46c0      	nop			; (mov r8, r8)
    1c58:	46bd      	mov	sp, r7
    1c5a:	b010      	add	sp, #64	; 0x40
    1c5c:	bd80      	pop	{r7, pc}
    1c5e:	46c0      	nop			; (mov r8, r8)
    1c60:	00001b0d 	.word	0x00001b0d
    1c64:	20000154 	.word	0x20000154
    1c68:	00001b31 	.word	0x00001b31
    1c6c:	2000014c 	.word	0x2000014c
    1c70:	00001a89 	.word	0x00001a89
    1c74:	00080002 	.word	0x00080002
    1c78:	00090002 	.word	0x00090002
    1c7c:	000b0002 	.word	0x000b0002
    1c80:	42000800 	.word	0x42000800
    1c84:	20000158 	.word	0x20000158
    1c88:	00002489 	.word	0x00002489
    1c8c:	00001b95 	.word	0x00001b95

00001c90 <system_pinmux_get_config_defaults>:
{
    1c90:	b580      	push	{r7, lr}
    1c92:	b082      	sub	sp, #8
    1c94:	af00      	add	r7, sp, #0
    1c96:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1c98:	687b      	ldr	r3, [r7, #4]
    1c9a:	2280      	movs	r2, #128	; 0x80
    1c9c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1c9e:	687b      	ldr	r3, [r7, #4]
    1ca0:	2200      	movs	r2, #0
    1ca2:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1ca4:	687b      	ldr	r3, [r7, #4]
    1ca6:	2201      	movs	r2, #1
    1ca8:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    1caa:	687b      	ldr	r3, [r7, #4]
    1cac:	2200      	movs	r2, #0
    1cae:	70da      	strb	r2, [r3, #3]
}
    1cb0:	46c0      	nop			; (mov r8, r8)
    1cb2:	46bd      	mov	sp, r7
    1cb4:	b002      	add	sp, #8
    1cb6:	bd80      	pop	{r7, pc}

00001cb8 <system_pinmux_get_group_from_gpio_pin>:
{
    1cb8:	b580      	push	{r7, lr}
    1cba:	b084      	sub	sp, #16
    1cbc:	af00      	add	r7, sp, #0
    1cbe:	0002      	movs	r2, r0
    1cc0:	1dfb      	adds	r3, r7, #7
    1cc2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    1cc4:	230f      	movs	r3, #15
    1cc6:	18fb      	adds	r3, r7, r3
    1cc8:	1dfa      	adds	r2, r7, #7
    1cca:	7812      	ldrb	r2, [r2, #0]
    1ccc:	09d2      	lsrs	r2, r2, #7
    1cce:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    1cd0:	230e      	movs	r3, #14
    1cd2:	18fb      	adds	r3, r7, r3
    1cd4:	1dfa      	adds	r2, r7, #7
    1cd6:	7812      	ldrb	r2, [r2, #0]
    1cd8:	0952      	lsrs	r2, r2, #5
    1cda:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    1cdc:	4b0d      	ldr	r3, [pc, #52]	; (1d14 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    1cde:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    1ce0:	230f      	movs	r3, #15
    1ce2:	18fb      	adds	r3, r7, r3
    1ce4:	781b      	ldrb	r3, [r3, #0]
    1ce6:	2b00      	cmp	r3, #0
    1ce8:	d10f      	bne.n	1d0a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    1cea:	230f      	movs	r3, #15
    1cec:	18fb      	adds	r3, r7, r3
    1cee:	781b      	ldrb	r3, [r3, #0]
    1cf0:	009b      	lsls	r3, r3, #2
    1cf2:	2210      	movs	r2, #16
    1cf4:	4694      	mov	ip, r2
    1cf6:	44bc      	add	ip, r7
    1cf8:	4463      	add	r3, ip
    1cfa:	3b08      	subs	r3, #8
    1cfc:	681a      	ldr	r2, [r3, #0]
    1cfe:	230e      	movs	r3, #14
    1d00:	18fb      	adds	r3, r7, r3
    1d02:	781b      	ldrb	r3, [r3, #0]
    1d04:	01db      	lsls	r3, r3, #7
    1d06:	18d3      	adds	r3, r2, r3
    1d08:	e000      	b.n	1d0c <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    1d0a:	2300      	movs	r3, #0
}
    1d0c:	0018      	movs	r0, r3
    1d0e:	46bd      	mov	sp, r7
    1d10:	b004      	add	sp, #16
    1d12:	bd80      	pop	{r7, pc}
    1d14:	41004400 	.word	0x41004400

00001d18 <system_pinmux_pin_get_mux_position>:
 *
 * \return Currently selected peripheral index on the specified pin.
 */
static inline uint8_t system_pinmux_pin_get_mux_position(
		const uint8_t gpio_pin)
{
    1d18:	b580      	push	{r7, lr}
    1d1a:	b086      	sub	sp, #24
    1d1c:	af00      	add	r7, sp, #0
    1d1e:	0002      	movs	r2, r0
    1d20:	1dfb      	adds	r3, r7, #7
    1d22:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    1d24:	1dfb      	adds	r3, r7, #7
    1d26:	781b      	ldrb	r3, [r3, #0]
    1d28:	0018      	movs	r0, r3
    1d2a:	4b19      	ldr	r3, [pc, #100]	; (1d90 <system_pinmux_pin_get_mux_position+0x78>)
    1d2c:	4798      	blx	r3
    1d2e:	0003      	movs	r3, r0
    1d30:	617b      	str	r3, [r7, #20]
	uint32_t pin_index = (gpio_pin % 32);
    1d32:	1dfb      	adds	r3, r7, #7
    1d34:	781b      	ldrb	r3, [r3, #0]
    1d36:	221f      	movs	r2, #31
    1d38:	4013      	ands	r3, r2
    1d3a:	613b      	str	r3, [r7, #16]

	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    1d3c:	697a      	ldr	r2, [r7, #20]
    1d3e:	2140      	movs	r1, #64	; 0x40
    1d40:	693b      	ldr	r3, [r7, #16]
    1d42:	18d3      	adds	r3, r2, r3
    1d44:	185b      	adds	r3, r3, r1
    1d46:	781b      	ldrb	r3, [r3, #0]
    1d48:	b2db      	uxtb	r3, r3
    1d4a:	001a      	movs	r2, r3
    1d4c:	2301      	movs	r3, #1
    1d4e:	4013      	ands	r3, r2
    1d50:	d101      	bne.n	1d56 <system_pinmux_pin_get_mux_position+0x3e>
		return SYSTEM_PINMUX_GPIO;
    1d52:	2380      	movs	r3, #128	; 0x80
    1d54:	e018      	b.n	1d88 <system_pinmux_pin_get_mux_position+0x70>
	}

	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
    1d56:	693b      	ldr	r3, [r7, #16]
    1d58:	085b      	lsrs	r3, r3, #1
    1d5a:	697a      	ldr	r2, [r7, #20]
    1d5c:	2130      	movs	r1, #48	; 0x30
    1d5e:	18d3      	adds	r3, r2, r3
    1d60:	185b      	adds	r3, r3, r1
    1d62:	781b      	ldrb	r3, [r3, #0]
    1d64:	b2db      	uxtb	r3, r3
    1d66:	60fb      	str	r3, [r7, #12]

	if (pin_index & 1) {
    1d68:	693b      	ldr	r3, [r7, #16]
    1d6a:	2201      	movs	r2, #1
    1d6c:	4013      	ands	r3, r2
    1d6e:	d006      	beq.n	1d7e <system_pinmux_pin_get_mux_position+0x66>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
    1d70:	68fb      	ldr	r3, [r7, #12]
    1d72:	091b      	lsrs	r3, r3, #4
    1d74:	b2db      	uxtb	r3, r3
    1d76:	220f      	movs	r2, #15
    1d78:	4013      	ands	r3, r2
    1d7a:	b2db      	uxtb	r3, r3
    1d7c:	e004      	b.n	1d88 <system_pinmux_pin_get_mux_position+0x70>
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
    1d7e:	68fb      	ldr	r3, [r7, #12]
    1d80:	b2db      	uxtb	r3, r3
    1d82:	220f      	movs	r2, #15
    1d84:	4013      	ands	r3, r2
    1d86:	b2db      	uxtb	r3, r3
	}
}
    1d88:	0018      	movs	r0, r3
    1d8a:	46bd      	mov	sp, r7
    1d8c:	b006      	add	sp, #24
    1d8e:	bd80      	pop	{r7, pc}
    1d90:	00001cb9 	.word	0x00001cb9

00001d94 <port_get_group_from_gpio_pin>:
{
    1d94:	b580      	push	{r7, lr}
    1d96:	b082      	sub	sp, #8
    1d98:	af00      	add	r7, sp, #0
    1d9a:	0002      	movs	r2, r0
    1d9c:	1dfb      	adds	r3, r7, #7
    1d9e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    1da0:	1dfb      	adds	r3, r7, #7
    1da2:	781b      	ldrb	r3, [r3, #0]
    1da4:	0018      	movs	r0, r3
    1da6:	4b03      	ldr	r3, [pc, #12]	; (1db4 <port_get_group_from_gpio_pin+0x20>)
    1da8:	4798      	blx	r3
    1daa:	0003      	movs	r3, r0
}
    1dac:	0018      	movs	r0, r3
    1dae:	46bd      	mov	sp, r7
    1db0:	b002      	add	sp, #8
    1db2:	bd80      	pop	{r7, pc}
    1db4:	00001cb9 	.word	0x00001cb9

00001db8 <port_pin_set_output_level>:
{
    1db8:	b580      	push	{r7, lr}
    1dba:	b084      	sub	sp, #16
    1dbc:	af00      	add	r7, sp, #0
    1dbe:	0002      	movs	r2, r0
    1dc0:	1dfb      	adds	r3, r7, #7
    1dc2:	701a      	strb	r2, [r3, #0]
    1dc4:	1dbb      	adds	r3, r7, #6
    1dc6:	1c0a      	adds	r2, r1, #0
    1dc8:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    1dca:	1dfb      	adds	r3, r7, #7
    1dcc:	781b      	ldrb	r3, [r3, #0]
    1dce:	0018      	movs	r0, r3
    1dd0:	4b0d      	ldr	r3, [pc, #52]	; (1e08 <port_pin_set_output_level+0x50>)
    1dd2:	4798      	blx	r3
    1dd4:	0003      	movs	r3, r0
    1dd6:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1dd8:	1dfb      	adds	r3, r7, #7
    1dda:	781b      	ldrb	r3, [r3, #0]
    1ddc:	221f      	movs	r2, #31
    1dde:	4013      	ands	r3, r2
    1de0:	2201      	movs	r2, #1
    1de2:	409a      	lsls	r2, r3
    1de4:	0013      	movs	r3, r2
    1de6:	60bb      	str	r3, [r7, #8]
	if (level) {
    1de8:	1dbb      	adds	r3, r7, #6
    1dea:	781b      	ldrb	r3, [r3, #0]
    1dec:	2b00      	cmp	r3, #0
    1dee:	d003      	beq.n	1df8 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    1df0:	68fb      	ldr	r3, [r7, #12]
    1df2:	68ba      	ldr	r2, [r7, #8]
    1df4:	619a      	str	r2, [r3, #24]
}
    1df6:	e002      	b.n	1dfe <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    1df8:	68fb      	ldr	r3, [r7, #12]
    1dfa:	68ba      	ldr	r2, [r7, #8]
    1dfc:	615a      	str	r2, [r3, #20]
}
    1dfe:	46c0      	nop			; (mov r8, r8)
    1e00:	46bd      	mov	sp, r7
    1e02:	b004      	add	sp, #16
    1e04:	bd80      	pop	{r7, pc}
    1e06:	46c0      	nop			; (mov r8, r8)
    1e08:	00001d95 	.word	0x00001d95

00001e0c <system_gclk_chan_get_config_defaults>:
{
    1e0c:	b580      	push	{r7, lr}
    1e0e:	b082      	sub	sp, #8
    1e10:	af00      	add	r7, sp, #0
    1e12:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    1e14:	687b      	ldr	r3, [r7, #4]
    1e16:	2200      	movs	r2, #0
    1e18:	701a      	strb	r2, [r3, #0]
}
    1e1a:	46c0      	nop			; (mov r8, r8)
    1e1c:	46bd      	mov	sp, r7
    1e1e:	b002      	add	sp, #8
    1e20:	bd80      	pop	{r7, pc}
	...

00001e24 <system_apb_clock_set_mask>:
{
    1e24:	b580      	push	{r7, lr}
    1e26:	b082      	sub	sp, #8
    1e28:	af00      	add	r7, sp, #0
    1e2a:	0002      	movs	r2, r0
    1e2c:	6039      	str	r1, [r7, #0]
    1e2e:	1dfb      	adds	r3, r7, #7
    1e30:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    1e32:	1dfb      	adds	r3, r7, #7
    1e34:	781b      	ldrb	r3, [r3, #0]
    1e36:	2b01      	cmp	r3, #1
    1e38:	d00a      	beq.n	1e50 <system_apb_clock_set_mask+0x2c>
    1e3a:	2b02      	cmp	r3, #2
    1e3c:	d00f      	beq.n	1e5e <system_apb_clock_set_mask+0x3a>
    1e3e:	2b00      	cmp	r3, #0
    1e40:	d114      	bne.n	1e6c <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    1e42:	4b0e      	ldr	r3, [pc, #56]	; (1e7c <system_apb_clock_set_mask+0x58>)
    1e44:	4a0d      	ldr	r2, [pc, #52]	; (1e7c <system_apb_clock_set_mask+0x58>)
    1e46:	6991      	ldr	r1, [r2, #24]
    1e48:	683a      	ldr	r2, [r7, #0]
    1e4a:	430a      	orrs	r2, r1
    1e4c:	619a      	str	r2, [r3, #24]
			break;
    1e4e:	e00f      	b.n	1e70 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    1e50:	4b0a      	ldr	r3, [pc, #40]	; (1e7c <system_apb_clock_set_mask+0x58>)
    1e52:	4a0a      	ldr	r2, [pc, #40]	; (1e7c <system_apb_clock_set_mask+0x58>)
    1e54:	69d1      	ldr	r1, [r2, #28]
    1e56:	683a      	ldr	r2, [r7, #0]
    1e58:	430a      	orrs	r2, r1
    1e5a:	61da      	str	r2, [r3, #28]
			break;
    1e5c:	e008      	b.n	1e70 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    1e5e:	4b07      	ldr	r3, [pc, #28]	; (1e7c <system_apb_clock_set_mask+0x58>)
    1e60:	4a06      	ldr	r2, [pc, #24]	; (1e7c <system_apb_clock_set_mask+0x58>)
    1e62:	6a11      	ldr	r1, [r2, #32]
    1e64:	683a      	ldr	r2, [r7, #0]
    1e66:	430a      	orrs	r2, r1
    1e68:	621a      	str	r2, [r3, #32]
			break;
    1e6a:	e001      	b.n	1e70 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    1e6c:	2317      	movs	r3, #23
    1e6e:	e000      	b.n	1e72 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    1e70:	2300      	movs	r3, #0
}
    1e72:	0018      	movs	r0, r3
    1e74:	46bd      	mov	sp, r7
    1e76:	b002      	add	sp, #8
    1e78:	bd80      	pop	{r7, pc}
    1e7a:	46c0      	nop			; (mov r8, r8)
    1e7c:	40000400 	.word	0x40000400

00001e80 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    1e80:	b580      	push	{r7, lr}
    1e82:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    1e84:	4b05      	ldr	r3, [pc, #20]	; (1e9c <system_is_debugger_present+0x1c>)
    1e86:	789b      	ldrb	r3, [r3, #2]
    1e88:	b2db      	uxtb	r3, r3
    1e8a:	001a      	movs	r2, r3
    1e8c:	2302      	movs	r3, #2
    1e8e:	4013      	ands	r3, r2
    1e90:	1e5a      	subs	r2, r3, #1
    1e92:	4193      	sbcs	r3, r2
    1e94:	b2db      	uxtb	r3, r3
}
    1e96:	0018      	movs	r0, r3
    1e98:	46bd      	mov	sp, r7
    1e9a:	bd80      	pop	{r7, pc}
    1e9c:	41002000 	.word	0x41002000

00001ea0 <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
    1ea0:	b580      	push	{r7, lr}
    1ea2:	b084      	sub	sp, #16
    1ea4:	af00      	add	r7, sp, #0
    1ea6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1ea8:	687b      	ldr	r3, [r7, #4]
    1eaa:	681b      	ldr	r3, [r3, #0]
    1eac:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    1eae:	68fb      	ldr	r3, [r7, #12]
    1eb0:	7e1b      	ldrb	r3, [r3, #24]
    1eb2:	b2db      	uxtb	r3, r3
    1eb4:	001a      	movs	r2, r3
    1eb6:	2302      	movs	r3, #2
    1eb8:	4013      	ands	r3, r2
    1eba:	1e5a      	subs	r2, r3, #1
    1ebc:	4193      	sbcs	r3, r2
    1ebe:	b2db      	uxtb	r3, r3
}
    1ec0:	0018      	movs	r0, r3
    1ec2:	46bd      	mov	sp, r7
    1ec4:	b004      	add	sp, #16
    1ec6:	bd80      	pop	{r7, pc}

00001ec8 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
    1ec8:	b580      	push	{r7, lr}
    1eca:	b084      	sub	sp, #16
    1ecc:	af00      	add	r7, sp, #0
    1ece:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1ed0:	687b      	ldr	r3, [r7, #4]
    1ed2:	681b      	ldr	r3, [r3, #0]
    1ed4:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1ed6:	68fb      	ldr	r3, [r7, #12]
    1ed8:	7e1b      	ldrb	r3, [r3, #24]
    1eda:	b2db      	uxtb	r3, r3
    1edc:	001a      	movs	r2, r3
    1ede:	2301      	movs	r3, #1
    1ee0:	4013      	ands	r3, r2
    1ee2:	1e5a      	subs	r2, r3, #1
    1ee4:	4193      	sbcs	r3, r2
    1ee6:	b2db      	uxtb	r3, r3
}
    1ee8:	0018      	movs	r0, r3
    1eea:	46bd      	mov	sp, r7
    1eec:	b004      	add	sp, #16
    1eee:	bd80      	pop	{r7, pc}

00001ef0 <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
    1ef0:	b580      	push	{r7, lr}
    1ef2:	b084      	sub	sp, #16
    1ef4:	af00      	add	r7, sp, #0
    1ef6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1ef8:	687b      	ldr	r3, [r7, #4]
    1efa:	681b      	ldr	r3, [r3, #0]
    1efc:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1efe:	68fb      	ldr	r3, [r7, #12]
    1f00:	7e1b      	ldrb	r3, [r3, #24]
    1f02:	b2db      	uxtb	r3, r3
    1f04:	001a      	movs	r2, r3
    1f06:	2304      	movs	r3, #4
    1f08:	4013      	ands	r3, r2
    1f0a:	1e5a      	subs	r2, r3, #1
    1f0c:	4193      	sbcs	r3, r2
    1f0e:	b2db      	uxtb	r3, r3
}
    1f10:	0018      	movs	r0, r3
    1f12:	46bd      	mov	sp, r7
    1f14:	b004      	add	sp, #16
    1f16:	bd80      	pop	{r7, pc}

00001f18 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
    1f18:	b580      	push	{r7, lr}
    1f1a:	b084      	sub	sp, #16
    1f1c:	af00      	add	r7, sp, #0
    1f1e:	6078      	str	r0, [r7, #4]
    1f20:	000a      	movs	r2, r1
    1f22:	1cbb      	adds	r3, r7, #2
    1f24:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1f26:	687b      	ldr	r3, [r7, #4]
    1f28:	681b      	ldr	r3, [r3, #0]
    1f2a:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    1f2c:	687b      	ldr	r3, [r7, #4]
    1f2e:	0018      	movs	r0, r3
    1f30:	4b0a      	ldr	r3, [pc, #40]	; (1f5c <spi_write+0x44>)
    1f32:	4798      	blx	r3
    1f34:	0003      	movs	r3, r0
    1f36:	001a      	movs	r2, r3
    1f38:	2301      	movs	r3, #1
    1f3a:	4053      	eors	r3, r2
    1f3c:	b2db      	uxtb	r3, r3
    1f3e:	2b00      	cmp	r3, #0
    1f40:	d001      	beq.n	1f46 <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
    1f42:	2305      	movs	r3, #5
    1f44:	e006      	b.n	1f54 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1f46:	1cbb      	adds	r3, r7, #2
    1f48:	881b      	ldrh	r3, [r3, #0]
    1f4a:	05db      	lsls	r3, r3, #23
    1f4c:	0dda      	lsrs	r2, r3, #23
    1f4e:	68fb      	ldr	r3, [r7, #12]
    1f50:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
    1f52:	2300      	movs	r3, #0
}
    1f54:	0018      	movs	r0, r3
    1f56:	46bd      	mov	sp, r7
    1f58:	b004      	add	sp, #16
    1f5a:	bd80      	pop	{r7, pc}
    1f5c:	00001ec9 	.word	0x00001ec9

00001f60 <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
    1f60:	b580      	push	{r7, lr}
    1f62:	b084      	sub	sp, #16
    1f64:	af00      	add	r7, sp, #0
    1f66:	6078      	str	r0, [r7, #4]
    1f68:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1f6a:	687b      	ldr	r3, [r7, #4]
    1f6c:	681b      	ldr	r3, [r3, #0]
    1f6e:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    1f70:	687b      	ldr	r3, [r7, #4]
    1f72:	0018      	movs	r0, r3
    1f74:	4b1b      	ldr	r3, [pc, #108]	; (1fe4 <spi_read+0x84>)
    1f76:	4798      	blx	r3
    1f78:	0003      	movs	r3, r0
    1f7a:	001a      	movs	r2, r3
    1f7c:	2301      	movs	r3, #1
    1f7e:	4053      	eors	r3, r2
    1f80:	b2db      	uxtb	r3, r3
    1f82:	2b00      	cmp	r3, #0
    1f84:	d001      	beq.n	1f8a <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
    1f86:	2310      	movs	r3, #16
    1f88:	e027      	b.n	1fda <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
    1f8a:	230f      	movs	r3, #15
    1f8c:	18fb      	adds	r3, r7, r3
    1f8e:	2200      	movs	r2, #0
    1f90:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1f92:	68bb      	ldr	r3, [r7, #8]
    1f94:	8b5b      	ldrh	r3, [r3, #26]
    1f96:	b29b      	uxth	r3, r3
    1f98:	001a      	movs	r2, r3
    1f9a:	2304      	movs	r3, #4
    1f9c:	4013      	ands	r3, r2
    1f9e:	d006      	beq.n	1fae <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
    1fa0:	230f      	movs	r3, #15
    1fa2:	18fb      	adds	r3, r7, r3
    1fa4:	221e      	movs	r2, #30
    1fa6:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    1fa8:	68bb      	ldr	r3, [r7, #8]
    1faa:	2204      	movs	r2, #4
    1fac:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1fae:	687b      	ldr	r3, [r7, #4]
    1fb0:	799b      	ldrb	r3, [r3, #6]
    1fb2:	2b01      	cmp	r3, #1
    1fb4:	d108      	bne.n	1fc8 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    1fb6:	68bb      	ldr	r3, [r7, #8]
    1fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1fba:	b29b      	uxth	r3, r3
    1fbc:	05db      	lsls	r3, r3, #23
    1fbe:	0ddb      	lsrs	r3, r3, #23
    1fc0:	b29a      	uxth	r2, r3
    1fc2:	683b      	ldr	r3, [r7, #0]
    1fc4:	801a      	strh	r2, [r3, #0]
    1fc6:	e005      	b.n	1fd4 <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    1fc8:	68bb      	ldr	r3, [r7, #8]
    1fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1fcc:	b2db      	uxtb	r3, r3
    1fce:	b29a      	uxth	r2, r3
    1fd0:	683b      	ldr	r3, [r7, #0]
    1fd2:	801a      	strh	r2, [r3, #0]
	}

	return retval;
    1fd4:	230f      	movs	r3, #15
    1fd6:	18fb      	adds	r3, r7, r3
    1fd8:	781b      	ldrb	r3, [r3, #0]
}
    1fda:	0018      	movs	r0, r3
    1fdc:	46bd      	mov	sp, r7
    1fde:	b004      	add	sp, #16
    1fe0:	bd80      	pop	{r7, pc}
    1fe2:	46c0      	nop			; (mov r8, r8)
    1fe4:	00001ef1 	.word	0x00001ef1

00001fe8 <_spi_clear_tx_complete_flag>:
 *
 * \param[in]  module  Pointer to the software instance struct
 */
static void _spi_clear_tx_complete_flag(
		struct spi_module *const module)
{
    1fe8:	b580      	push	{r7, lr}
    1fea:	b084      	sub	sp, #16
    1fec:	af00      	add	r7, sp, #0
    1fee:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1ff0:	687b      	ldr	r3, [r7, #4]
    1ff2:	681b      	ldr	r3, [r3, #0]
    1ff4:	60fb      	str	r3, [r7, #12]

	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1ff6:	68fb      	ldr	r3, [r7, #12]
    1ff8:	2202      	movs	r2, #2
    1ffa:	761a      	strb	r2, [r3, #24]
}
    1ffc:	46c0      	nop			; (mov r8, r8)
    1ffe:	46bd      	mov	sp, r7
    2000:	b004      	add	sp, #16
    2002:	bd80      	pop	{r7, pc}

00002004 <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
    2004:	b590      	push	{r4, r7, lr}
    2006:	b093      	sub	sp, #76	; 0x4c
    2008:	af00      	add	r7, sp, #0
    200a:	6078      	str	r0, [r7, #4]
    200c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    200e:	687b      	ldr	r3, [r7, #4]
    2010:	681b      	ldr	r3, [r3, #0]
    2012:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
    2014:	687b      	ldr	r3, [r7, #4]
    2016:	681b      	ldr	r3, [r3, #0]
    2018:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    201a:	231c      	movs	r3, #28
    201c:	18fb      	adds	r3, r7, r3
    201e:	0018      	movs	r0, r3
    2020:	4b85      	ldr	r3, [pc, #532]	; (2238 <_spi_set_config+0x234>)
    2022:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2024:	231c      	movs	r3, #28
    2026:	18fb      	adds	r3, r7, r3
    2028:	2200      	movs	r2, #0
    202a:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
    202c:	683b      	ldr	r3, [r7, #0]
    202e:	781b      	ldrb	r3, [r3, #0]
    2030:	2b00      	cmp	r3, #0
    2032:	d103      	bne.n	203c <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    2034:	231c      	movs	r3, #28
    2036:	18fb      	adds	r3, r7, r3
    2038:	2200      	movs	r2, #0
    203a:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    203c:	683b      	ldr	r3, [r7, #0]
    203e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
    2040:	230c      	movs	r3, #12
    2042:	18fb      	adds	r3, r7, r3
    2044:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    2046:	683b      	ldr	r3, [r7, #0]
    2048:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
    204a:	230c      	movs	r3, #12
    204c:	18fb      	adds	r3, r7, r3
    204e:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
    2050:	683b      	ldr	r3, [r7, #0]
    2052:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
    2054:	230c      	movs	r3, #12
    2056:	18fb      	adds	r3, r7, r3
    2058:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
    205a:	683b      	ldr	r3, [r7, #0]
    205c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
    205e:	230c      	movs	r3, #12
    2060:	18fb      	adds	r3, r7, r3
    2062:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    2064:	2347      	movs	r3, #71	; 0x47
    2066:	18fb      	adds	r3, r7, r3
    2068:	2200      	movs	r2, #0
    206a:	701a      	strb	r2, [r3, #0]
    206c:	e02c      	b.n	20c8 <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    206e:	2347      	movs	r3, #71	; 0x47
    2070:	18fb      	adds	r3, r7, r3
    2072:	781a      	ldrb	r2, [r3, #0]
    2074:	230c      	movs	r3, #12
    2076:	18fb      	adds	r3, r7, r3
    2078:	0092      	lsls	r2, r2, #2
    207a:	58d3      	ldr	r3, [r2, r3]
    207c:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    207e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    2080:	2b00      	cmp	r3, #0
    2082:	d109      	bne.n	2098 <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    2084:	2347      	movs	r3, #71	; 0x47
    2086:	18fb      	adds	r3, r7, r3
    2088:	781a      	ldrb	r2, [r3, #0]
    208a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    208c:	0011      	movs	r1, r2
    208e:	0018      	movs	r0, r3
    2090:	4b6a      	ldr	r3, [pc, #424]	; (223c <_spi_set_config+0x238>)
    2092:	4798      	blx	r3
    2094:	0003      	movs	r3, r0
    2096:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    2098:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    209a:	3301      	adds	r3, #1
    209c:	d00d      	beq.n	20ba <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    209e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    20a0:	b2da      	uxtb	r2, r3
    20a2:	231c      	movs	r3, #28
    20a4:	18fb      	adds	r3, r7, r3
    20a6:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    20a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    20aa:	0c1b      	lsrs	r3, r3, #16
    20ac:	b2db      	uxtb	r3, r3
    20ae:	221c      	movs	r2, #28
    20b0:	18ba      	adds	r2, r7, r2
    20b2:	0011      	movs	r1, r2
    20b4:	0018      	movs	r0, r3
    20b6:	4b62      	ldr	r3, [pc, #392]	; (2240 <_spi_set_config+0x23c>)
    20b8:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
    20ba:	2347      	movs	r3, #71	; 0x47
    20bc:	18fb      	adds	r3, r7, r3
    20be:	781a      	ldrb	r2, [r3, #0]
    20c0:	2347      	movs	r3, #71	; 0x47
    20c2:	18fb      	adds	r3, r7, r3
    20c4:	3201      	adds	r2, #1
    20c6:	701a      	strb	r2, [r3, #0]
    20c8:	2347      	movs	r3, #71	; 0x47
    20ca:	18fb      	adds	r3, r7, r3
    20cc:	781b      	ldrb	r3, [r3, #0]
    20ce:	2b03      	cmp	r3, #3
    20d0:	d9cd      	bls.n	206e <_spi_set_config+0x6a>
		}
	}

	module->mode             = config->mode;
    20d2:	683b      	ldr	r3, [r7, #0]
    20d4:	781a      	ldrb	r2, [r3, #0]
    20d6:	687b      	ldr	r3, [r7, #4]
    20d8:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
    20da:	683b      	ldr	r3, [r7, #0]
    20dc:	7c1a      	ldrb	r2, [r3, #16]
    20de:	687b      	ldr	r3, [r7, #4]
    20e0:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
    20e2:	683b      	ldr	r3, [r7, #0]
    20e4:	7c9a      	ldrb	r2, [r3, #18]
    20e6:	687b      	ldr	r3, [r7, #4]
    20e8:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
    20ea:	683b      	ldr	r3, [r7, #0]
    20ec:	7d1a      	ldrb	r2, [r3, #20]
    20ee:	687b      	ldr	r3, [r7, #4]
    20f0:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
    20f2:	230a      	movs	r3, #10
    20f4:	18fb      	adds	r3, r7, r3
    20f6:	2200      	movs	r2, #0
    20f8:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
    20fa:	2300      	movs	r3, #0
    20fc:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
    20fe:	2300      	movs	r3, #0
    2100:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
    2102:	683b      	ldr	r3, [r7, #0]
    2104:	781b      	ldrb	r3, [r3, #0]
    2106:	2b01      	cmp	r3, #1
    2108:	d129      	bne.n	215e <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    210a:	687b      	ldr	r3, [r7, #4]
    210c:	681b      	ldr	r3, [r3, #0]
    210e:	0018      	movs	r0, r3
    2110:	4b4c      	ldr	r3, [pc, #304]	; (2244 <_spi_set_config+0x240>)
    2112:	4798      	blx	r3
    2114:	0003      	movs	r3, r0
    2116:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    2118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    211a:	3314      	adds	r3, #20
    211c:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    211e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2120:	b2db      	uxtb	r3, r3
    2122:	0018      	movs	r0, r3
    2124:	4b48      	ldr	r3, [pc, #288]	; (2248 <_spi_set_config+0x244>)
    2126:	4798      	blx	r3
    2128:	0003      	movs	r3, r0
    212a:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
    212c:	683b      	ldr	r3, [r7, #0]
    212e:	699b      	ldr	r3, [r3, #24]
    2130:	2223      	movs	r2, #35	; 0x23
    2132:	18bc      	adds	r4, r7, r2
    2134:	220a      	movs	r2, #10
    2136:	18ba      	adds	r2, r7, r2
    2138:	6a79      	ldr	r1, [r7, #36]	; 0x24
    213a:	0018      	movs	r0, r3
    213c:	4b43      	ldr	r3, [pc, #268]	; (224c <_spi_set_config+0x248>)
    213e:	4798      	blx	r3
    2140:	0003      	movs	r3, r0
    2142:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
    2144:	2323      	movs	r3, #35	; 0x23
    2146:	18fb      	adds	r3, r7, r3
    2148:	781b      	ldrb	r3, [r3, #0]
    214a:	2b00      	cmp	r3, #0
    214c:	d001      	beq.n	2152 <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    214e:	2317      	movs	r3, #23
    2150:	e06d      	b.n	222e <_spi_set_config+0x22a>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
    2152:	230a      	movs	r3, #10
    2154:	18fb      	adds	r3, r7, r3
    2156:	881b      	ldrh	r3, [r3, #0]
    2158:	b2da      	uxtb	r2, r3
    215a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    215c:	731a      	strb	r2, [r3, #12]
	}
# endif
# if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    215e:	683b      	ldr	r3, [r7, #0]
    2160:	781b      	ldrb	r3, [r3, #0]
    2162:	2b00      	cmp	r3, #0
    2164:	d11a      	bne.n	219c <_spi_set_config+0x198>
		/* Set frame format */
		ctrla = config->mode_specific.slave.frame_format;
    2166:	683b      	ldr	r3, [r7, #0]
    2168:	699b      	ldr	r3, [r3, #24]
    216a:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;
    216c:	683b      	ldr	r3, [r7, #0]
    216e:	8b9b      	ldrh	r3, [r3, #28]
    2170:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
    2172:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    2176:	683a      	ldr	r2, [r7, #0]
    2178:	7f92      	ldrb	r2, [r2, #30]
    217a:	0011      	movs	r1, r2
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    217c:	683a      	ldr	r2, [r7, #0]
    217e:	7fd2      	ldrb	r2, [r2, #31]
    2180:	0412      	lsls	r2, r2, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    2182:	430a      	orrs	r2, r1
		spi_module->ADDR.reg |=
    2184:	431a      	orrs	r2, r3
    2186:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2188:	625a      	str	r2, [r3, #36]	; 0x24

		if (config->mode_specific.slave.preload_enable) {
    218a:	683b      	ldr	r3, [r7, #0]
    218c:	2220      	movs	r2, #32
    218e:	5c9b      	ldrb	r3, [r3, r2]
    2190:	2b00      	cmp	r3, #0
    2192:	d003      	beq.n	219c <_spi_set_config+0x198>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    2194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2196:	2240      	movs	r2, #64	; 0x40
    2198:	4313      	orrs	r3, r2
    219a:	63bb      	str	r3, [r7, #56]	; 0x38
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
    219c:	683b      	ldr	r3, [r7, #0]
    219e:	685b      	ldr	r3, [r3, #4]
    21a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    21a2:	4313      	orrs	r3, r2
    21a4:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    21a6:	683b      	ldr	r3, [r7, #0]
    21a8:	689b      	ldr	r3, [r3, #8]
    21aa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    21ac:	4313      	orrs	r3, r2
    21ae:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    21b0:	683b      	ldr	r3, [r7, #0]
    21b2:	68db      	ldr	r3, [r3, #12]
    21b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    21b6:	4313      	orrs	r3, r2
    21b8:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
    21ba:	683b      	ldr	r3, [r7, #0]
    21bc:	7c1b      	ldrb	r3, [r3, #16]
    21be:	001a      	movs	r2, r3
    21c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    21c2:	4313      	orrs	r3, r2
    21c4:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    21c6:	683b      	ldr	r3, [r7, #0]
    21c8:	7c5b      	ldrb	r3, [r3, #17]
    21ca:	2b00      	cmp	r3, #0
    21cc:	d103      	bne.n	21d6 <_spi_set_config+0x1d2>
    21ce:	4b20      	ldr	r3, [pc, #128]	; (2250 <_spi_set_config+0x24c>)
    21d0:	4798      	blx	r3
    21d2:	1e03      	subs	r3, r0, #0
    21d4:	d003      	beq.n	21de <_spi_set_config+0x1da>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    21d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    21d8:	2280      	movs	r2, #128	; 0x80
    21da:	4313      	orrs	r3, r2
    21dc:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
    21de:	683b      	ldr	r3, [r7, #0]
    21e0:	7c9b      	ldrb	r3, [r3, #18]
    21e2:	2b00      	cmp	r3, #0
    21e4:	d004      	beq.n	21f0 <_spi_set_config+0x1ec>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    21e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    21e8:	2280      	movs	r2, #128	; 0x80
    21ea:	0292      	lsls	r2, r2, #10
    21ec:	4313      	orrs	r3, r2
    21ee:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    21f0:	683b      	ldr	r3, [r7, #0]
    21f2:	7cdb      	ldrb	r3, [r3, #19]
    21f4:	2b00      	cmp	r3, #0
    21f6:	d004      	beq.n	2202 <_spi_set_config+0x1fe>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    21f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    21fa:	2280      	movs	r2, #128	; 0x80
    21fc:	0092      	lsls	r2, r2, #2
    21fe:	4313      	orrs	r3, r2
    2200:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    2202:	683b      	ldr	r3, [r7, #0]
    2204:	7d1b      	ldrb	r3, [r3, #20]
    2206:	2b00      	cmp	r3, #0
    2208:	d004      	beq.n	2214 <_spi_set_config+0x210>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    220a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    220c:	2280      	movs	r2, #128	; 0x80
    220e:	0192      	lsls	r2, r2, #6
    2210:	4313      	orrs	r3, r2
    2212:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
    2214:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2216:	681a      	ldr	r2, [r3, #0]
    2218:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    221a:	431a      	orrs	r2, r3
    221c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    221e:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
    2220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2222:	685a      	ldr	r2, [r3, #4]
    2224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2226:	431a      	orrs	r2, r3
    2228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    222a:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
    222c:	2300      	movs	r3, #0
}
    222e:	0018      	movs	r0, r3
    2230:	46bd      	mov	sp, r7
    2232:	b013      	add	sp, #76	; 0x4c
    2234:	bd90      	pop	{r4, r7, pc}
    2236:	46c0      	nop			; (mov r8, r8)
    2238:	00001c91 	.word	0x00001c91
    223c:	0000051d 	.word	0x0000051d
    2240:	00003801 	.word	0x00003801
    2244:	000006d9 	.word	0x000006d9
    2248:	00003639 	.word	0x00003639
    224c:	00000413 	.word	0x00000413
    2250:	00001e81 	.word	0x00001e81

00002254 <_spi_check_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_check_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
    2254:	b590      	push	{r4, r7, lr}
    2256:	b091      	sub	sp, #68	; 0x44
    2258:	af00      	add	r7, sp, #0
    225a:	6078      	str	r0, [r7, #4]
    225c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    225e:	687b      	ldr	r3, [r7, #4]
    2260:	681b      	ldr	r3, [r3, #0]
    2262:	62fb      	str	r3, [r7, #44]	; 0x2c
	Sercom *const hw = module->hw;
    2264:	687b      	ldr	r3, [r7, #4]
    2266:	681b      	ldr	r3, [r3, #0]
    2268:	62bb      	str	r3, [r7, #40]	; 0x28

	uint32_t pad_pinmuxes[] = {
		config->pinmux_pad0, config->pinmux_pad1,
    226a:	683b      	ldr	r3, [r7, #0]
    226c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
    226e:	230c      	movs	r3, #12
    2270:	18fb      	adds	r3, r7, r3
    2272:	601a      	str	r2, [r3, #0]
		config->pinmux_pad0, config->pinmux_pad1,
    2274:	683b      	ldr	r3, [r7, #0]
    2276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
    2278:	230c      	movs	r3, #12
    227a:	18fb      	adds	r3, r7, r3
    227c:	605a      	str	r2, [r3, #4]
		config->pinmux_pad2, config->pinmux_pad3
    227e:	683b      	ldr	r3, [r7, #0]
    2280:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
    2282:	230c      	movs	r3, #12
    2284:	18fb      	adds	r3, r7, r3
    2286:	609a      	str	r2, [r3, #8]
		config->pinmux_pad2, config->pinmux_pad3
    2288:	683b      	ldr	r3, [r7, #0]
    228a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
    228c:	230c      	movs	r3, #12
    228e:	18fb      	adds	r3, r7, r3
    2290:	60da      	str	r2, [r3, #12]
	};

	/* Compare the current SERCOM pins against the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    2292:	233f      	movs	r3, #63	; 0x3f
    2294:	18fb      	adds	r3, r7, r3
    2296:	2200      	movs	r2, #0
    2298:	701a      	strb	r2, [r3, #0]
    229a:	e030      	b.n	22fe <_spi_check_config+0xaa>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    229c:	233f      	movs	r3, #63	; 0x3f
    229e:	18fb      	adds	r3, r7, r3
    22a0:	781a      	ldrb	r2, [r3, #0]
    22a2:	230c      	movs	r3, #12
    22a4:	18fb      	adds	r3, r7, r3
    22a6:	0092      	lsls	r2, r2, #2
    22a8:	58d3      	ldr	r3, [r2, r3]
    22aa:	63bb      	str	r3, [r7, #56]	; 0x38

		if (current_pinmux == PINMUX_DEFAULT) {
    22ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    22ae:	2b00      	cmp	r3, #0
    22b0:	d109      	bne.n	22c6 <_spi_check_config+0x72>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    22b2:	233f      	movs	r3, #63	; 0x3f
    22b4:	18fb      	adds	r3, r7, r3
    22b6:	781a      	ldrb	r2, [r3, #0]
    22b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    22ba:	0011      	movs	r1, r2
    22bc:	0018      	movs	r0, r3
    22be:	4b6e      	ldr	r3, [pc, #440]	; (2478 <_spi_check_config+0x224>)
    22c0:	4798      	blx	r3
    22c2:	0003      	movs	r3, r0
    22c4:	63bb      	str	r3, [r7, #56]	; 0x38
		}

		if (current_pinmux == PINMUX_UNUSED) {
    22c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    22c8:	3301      	adds	r3, #1
    22ca:	d010      	beq.n	22ee <_spi_check_config+0x9a>
			continue;
		}

		if ((current_pinmux & 0xFFFF) !=
    22cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    22ce:	041b      	lsls	r3, r3, #16
    22d0:	0c1c      	lsrs	r4, r3, #16
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
    22d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    22d4:	0c1b      	lsrs	r3, r3, #16
    22d6:	b2db      	uxtb	r3, r3
    22d8:	0018      	movs	r0, r3
    22da:	4b68      	ldr	r3, [pc, #416]	; (247c <_spi_check_config+0x228>)
    22dc:	4798      	blx	r3
    22de:	0003      	movs	r3, r0
		if ((current_pinmux & 0xFFFF) !=
    22e0:	429c      	cmp	r4, r3
    22e2:	d005      	beq.n	22f0 <_spi_check_config+0x9c>
			module->hw = NULL;
    22e4:	687b      	ldr	r3, [r7, #4]
    22e6:	2200      	movs	r2, #0
    22e8:	601a      	str	r2, [r3, #0]
			return STATUS_ERR_DENIED;
    22ea:	231c      	movs	r3, #28
    22ec:	e0bf      	b.n	246e <_spi_check_config+0x21a>
			continue;
    22ee:	46c0      	nop			; (mov r8, r8)
	for (uint8_t pad = 0; pad < 4; pad++) {
    22f0:	233f      	movs	r3, #63	; 0x3f
    22f2:	18fb      	adds	r3, r7, r3
    22f4:	781a      	ldrb	r2, [r3, #0]
    22f6:	233f      	movs	r3, #63	; 0x3f
    22f8:	18fb      	adds	r3, r7, r3
    22fa:	3201      	adds	r2, #1
    22fc:	701a      	strb	r2, [r3, #0]
    22fe:	233f      	movs	r3, #63	; 0x3f
    2300:	18fb      	adds	r3, r7, r3
    2302:	781b      	ldrb	r3, [r3, #0]
    2304:	2b03      	cmp	r3, #3
    2306:	d9c9      	bls.n	229c <_spi_check_config+0x48>
	}

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to read BAUD register */
	uint16_t baud;
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
    2308:	2013      	movs	r0, #19
    230a:	4b5d      	ldr	r3, [pc, #372]	; (2480 <_spi_check_config+0x22c>)
    230c:	4798      	blx	r3
    230e:	0003      	movs	r3, r0
    2310:	627b      	str	r3, [r7, #36]	; 0x24
#  endif
	/* Value to read CTRLA, CTRLB and ADDR register */
	uint32_t ctrla = 0;
    2312:	2300      	movs	r3, #0
    2314:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t ctrlb = 0;
    2316:	2300      	movs	r3, #0
    2318:	633b      	str	r3, [r7, #48]	; 0x30
#  if CONF_SPI_SLAVE_ENABLE == true
	uint32_t addr = 0;
    231a:	2300      	movs	r3, #0
    231c:	623b      	str	r3, [r7, #32]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and compare it */
	if (config->mode == SPI_MODE_MASTER) {
    231e:	683b      	ldr	r3, [r7, #0]
    2320:	781b      	ldrb	r3, [r3, #0]
    2322:	2b01      	cmp	r3, #1
    2324:	d121      	bne.n	236a <_spi_check_config+0x116>
		enum status_code error_code = _sercom_get_sync_baud_val(
    2326:	683b      	ldr	r3, [r7, #0]
    2328:	699b      	ldr	r3, [r3, #24]
    232a:	221f      	movs	r2, #31
    232c:	18bc      	adds	r4, r7, r2
    232e:	220a      	movs	r2, #10
    2330:	18ba      	adds	r2, r7, r2
    2332:	6a79      	ldr	r1, [r7, #36]	; 0x24
    2334:	0018      	movs	r0, r3
    2336:	4b53      	ldr	r3, [pc, #332]	; (2484 <_spi_check_config+0x230>)
    2338:	4798      	blx	r3
    233a:	0003      	movs	r3, r0
    233c:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				external_clock, &baud);

		if (error_code != STATUS_OK) {
    233e:	231f      	movs	r3, #31
    2340:	18fb      	adds	r3, r7, r3
    2342:	781b      	ldrb	r3, [r3, #0]
    2344:	2b00      	cmp	r3, #0
    2346:	d001      	beq.n	234c <_spi_check_config+0xf8>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    2348:	2317      	movs	r3, #23
    234a:	e090      	b.n	246e <_spi_check_config+0x21a>
		}

		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    234c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    234e:	7b1b      	ldrb	r3, [r3, #12]
    2350:	b2da      	uxtb	r2, r3
    2352:	230a      	movs	r3, #10
    2354:	18fb      	adds	r3, r7, r3
    2356:	881b      	ldrh	r3, [r3, #0]
    2358:	b2db      	uxtb	r3, r3
    235a:	429a      	cmp	r2, r3
    235c:	d001      	beq.n	2362 <_spi_check_config+0x10e>
			return STATUS_ERR_DENIED;
    235e:	231c      	movs	r3, #28
    2360:	e085      	b.n	246e <_spi_check_config+0x21a>
		}

		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
    2362:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2364:	220c      	movs	r2, #12
    2366:	4313      	orrs	r3, r2
    2368:	637b      	str	r3, [r7, #52]	; 0x34
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    236a:	683b      	ldr	r3, [r7, #0]
    236c:	781b      	ldrb	r3, [r3, #0]
    236e:	2b00      	cmp	r3, #0
    2370:	d129      	bne.n	23c6 <_spi_check_config+0x172>

		/* Set frame format */
		ctrla |= config->mode_specific.slave.frame_format;
    2372:	683b      	ldr	r3, [r7, #0]
    2374:	699b      	ldr	r3, [r3, #24]
    2376:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    2378:	4313      	orrs	r3, r2
    237a:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set address mode */
		ctrlb |= config->mode_specific.slave.address_mode;
    237c:	683b      	ldr	r3, [r7, #0]
    237e:	8b9b      	ldrh	r3, [r3, #28]
    2380:	001a      	movs	r2, r3
    2382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2384:	4313      	orrs	r3, r2
    2386:	633b      	str	r3, [r7, #48]	; 0x30

		/* Set address and address mask*/
		addr |= (config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    2388:	683b      	ldr	r3, [r7, #0]
    238a:	7f9b      	ldrb	r3, [r3, #30]
    238c:	001a      	movs	r2, r3
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    238e:	683b      	ldr	r3, [r7, #0]
    2390:	7fdb      	ldrb	r3, [r3, #31]
    2392:	041b      	lsls	r3, r3, #16
		addr |= (config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    2394:	4313      	orrs	r3, r2
    2396:	001a      	movs	r2, r3
    2398:	6a3b      	ldr	r3, [r7, #32]
    239a:	4313      	orrs	r3, r2
    239c:	623b      	str	r3, [r7, #32]
		if (spi_module->CTRLA.reg != addr) {
    239e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    23a0:	681a      	ldr	r2, [r3, #0]
    23a2:	6a3b      	ldr	r3, [r7, #32]
    23a4:	429a      	cmp	r2, r3
    23a6:	d001      	beq.n	23ac <_spi_check_config+0x158>
			return STATUS_ERR_DENIED;
    23a8:	231c      	movs	r3, #28
    23aa:	e060      	b.n	246e <_spi_check_config+0x21a>
		}

		if (config->mode_specific.slave.preload_enable) {
    23ac:	683b      	ldr	r3, [r7, #0]
    23ae:	2220      	movs	r2, #32
    23b0:	5c9b      	ldrb	r3, [r3, r2]
    23b2:	2b00      	cmp	r3, #0
    23b4:	d003      	beq.n	23be <_spi_check_config+0x16a>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    23b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    23b8:	2240      	movs	r2, #64	; 0x40
    23ba:	4313      	orrs	r3, r2
    23bc:	633b      	str	r3, [r7, #48]	; 0x30
		}
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x2);
    23be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    23c0:	2208      	movs	r2, #8
    23c2:	4313      	orrs	r3, r2
    23c4:	637b      	str	r3, [r7, #52]	; 0x34
	}
#  endif
	/* Set data order */
	ctrla |= config->data_order;
    23c6:	683b      	ldr	r3, [r7, #0]
    23c8:	685b      	ldr	r3, [r3, #4]
    23ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    23cc:	4313      	orrs	r3, r2
    23ce:	637b      	str	r3, [r7, #52]	; 0x34

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    23d0:	683b      	ldr	r3, [r7, #0]
    23d2:	689b      	ldr	r3, [r3, #8]
    23d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    23d6:	4313      	orrs	r3, r2
    23d8:	637b      	str	r3, [r7, #52]	; 0x34

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    23da:	683b      	ldr	r3, [r7, #0]
    23dc:	68db      	ldr	r3, [r3, #12]
    23de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    23e0:	4313      	orrs	r3, r2
    23e2:	637b      	str	r3, [r7, #52]	; 0x34

	/* Set SPI character size */
	ctrlb |= config->character_size;
    23e4:	683b      	ldr	r3, [r7, #0]
    23e6:	7c1b      	ldrb	r3, [r3, #16]
    23e8:	001a      	movs	r2, r3
    23ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    23ec:	4313      	orrs	r3, r2
    23ee:	633b      	str	r3, [r7, #48]	; 0x30

	if (config->run_in_standby) {
    23f0:	683b      	ldr	r3, [r7, #0]
    23f2:	7c5b      	ldrb	r3, [r3, #17]
    23f4:	2b00      	cmp	r3, #0
    23f6:	d003      	beq.n	2400 <_spi_check_config+0x1ac>
		/* Enable in sleep mode */
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    23f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    23fa:	2280      	movs	r2, #128	; 0x80
    23fc:	4313      	orrs	r3, r2
    23fe:	637b      	str	r3, [r7, #52]	; 0x34
	}

	if (config->receiver_enable) {
    2400:	683b      	ldr	r3, [r7, #0]
    2402:	7c9b      	ldrb	r3, [r3, #18]
    2404:	2b00      	cmp	r3, #0
    2406:	d004      	beq.n	2412 <_spi_check_config+0x1be>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    2408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    240a:	2280      	movs	r2, #128	; 0x80
    240c:	0292      	lsls	r2, r2, #10
    240e:	4313      	orrs	r3, r2
    2410:	633b      	str	r3, [r7, #48]	; 0x30
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    2412:	683b      	ldr	r3, [r7, #0]
    2414:	7cdb      	ldrb	r3, [r3, #19]
    2416:	2b00      	cmp	r3, #0
    2418:	d004      	beq.n	2424 <_spi_check_config+0x1d0>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    241a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    241c:	2280      	movs	r2, #128	; 0x80
    241e:	0092      	lsls	r2, r2, #2
    2420:	4313      	orrs	r3, r2
    2422:	633b      	str	r3, [r7, #48]	; 0x30
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    2424:	683b      	ldr	r3, [r7, #0]
    2426:	7d1b      	ldrb	r3, [r3, #20]
    2428:	2b00      	cmp	r3, #0
    242a:	d004      	beq.n	2436 <_spi_check_config+0x1e2>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    242c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    242e:	2280      	movs	r2, #128	; 0x80
    2430:	0192      	lsls	r2, r2, #6
    2432:	4313      	orrs	r3, r2
    2434:	633b      	str	r3, [r7, #48]	; 0x30
	}
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
    2436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2438:	2202      	movs	r2, #2
    243a:	4313      	orrs	r3, r2
    243c:	637b      	str	r3, [r7, #52]	; 0x34

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
    243e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2440:	681a      	ldr	r2, [r3, #0]
    2442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2444:	429a      	cmp	r2, r3
    2446:	d10e      	bne.n	2466 <_spi_check_config+0x212>
			spi_module->CTRLB.reg == ctrlb) {
    2448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    244a:	685a      	ldr	r2, [r3, #4]
	if (spi_module->CTRLA.reg == ctrla &&
    244c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    244e:	429a      	cmp	r2, r3
    2450:	d109      	bne.n	2466 <_spi_check_config+0x212>
		module->mode           = config->mode;
    2452:	683b      	ldr	r3, [r7, #0]
    2454:	781a      	ldrb	r2, [r3, #0]
    2456:	687b      	ldr	r3, [r7, #4]
    2458:	715a      	strb	r2, [r3, #5]
		module->character_size = config->character_size;
    245a:	683b      	ldr	r3, [r7, #0]
    245c:	7c1a      	ldrb	r2, [r3, #16]
    245e:	687b      	ldr	r3, [r7, #4]
    2460:	719a      	strb	r2, [r3, #6]
		return STATUS_OK;
    2462:	2300      	movs	r3, #0
    2464:	e003      	b.n	246e <_spi_check_config+0x21a>
	}

	/* Not same config, wipe module pointer and return */
	module->hw = NULL;
    2466:	687b      	ldr	r3, [r7, #4]
    2468:	2200      	movs	r2, #0
    246a:	601a      	str	r2, [r3, #0]

	return STATUS_ERR_DENIED;
    246c:	231c      	movs	r3, #28
}
    246e:	0018      	movs	r0, r3
    2470:	46bd      	mov	sp, r7
    2472:	b011      	add	sp, #68	; 0x44
    2474:	bd90      	pop	{r4, r7, pc}
    2476:	46c0      	nop			; (mov r8, r8)
    2478:	0000051d 	.word	0x0000051d
    247c:	00001d19 	.word	0x00001d19
    2480:	00003639 	.word	0x00003639
    2484:	00000413 	.word	0x00000413

00002488 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    2488:	b580      	push	{r7, lr}
    248a:	b08a      	sub	sp, #40	; 0x28
    248c:	af00      	add	r7, sp, #0
    248e:	60f8      	str	r0, [r7, #12]
    2490:	60b9      	str	r1, [r7, #8]
    2492:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    2494:	68fb      	ldr	r3, [r7, #12]
    2496:	68ba      	ldr	r2, [r7, #8]
    2498:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
    249a:	68fb      	ldr	r3, [r7, #12]
    249c:	681b      	ldr	r3, [r3, #0]
    249e:	627b      	str	r3, [r7, #36]	; 0x24

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    24a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    24a2:	681b      	ldr	r3, [r3, #0]
    24a4:	2202      	movs	r2, #2
    24a6:	4013      	ands	r3, r2
    24a8:	d007      	beq.n	24ba <spi_init+0x32>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
    24aa:	687a      	ldr	r2, [r7, #4]
    24ac:	68fb      	ldr	r3, [r7, #12]
    24ae:	0011      	movs	r1, r2
    24b0:	0018      	movs	r0, r3
    24b2:	4b2f      	ldr	r3, [pc, #188]	; (2570 <spi_init+0xe8>)
    24b4:	4798      	blx	r3
    24b6:	0003      	movs	r3, r0
    24b8:	e055      	b.n	2566 <spi_init+0xde>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    24ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    24bc:	681b      	ldr	r3, [r3, #0]
    24be:	2201      	movs	r2, #1
    24c0:	4013      	ands	r3, r2
    24c2:	d001      	beq.n	24c8 <spi_init+0x40>
		return STATUS_BUSY;
    24c4:	2305      	movs	r3, #5
    24c6:	e04e      	b.n	2566 <spi_init+0xde>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    24c8:	68fb      	ldr	r3, [r7, #12]
    24ca:	681b      	ldr	r3, [r3, #0]
    24cc:	0018      	movs	r0, r3
    24ce:	4b29      	ldr	r3, [pc, #164]	; (2574 <spi_init+0xec>)
    24d0:	4798      	blx	r3
    24d2:	0003      	movs	r3, r0
    24d4:	623b      	str	r3, [r7, #32]
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    24d6:	6a3b      	ldr	r3, [r7, #32]
    24d8:	3302      	adds	r3, #2
    24da:	61fb      	str	r3, [r7, #28]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    24dc:	6a3b      	ldr	r3, [r7, #32]
    24de:	3314      	adds	r3, #20
    24e0:	61bb      	str	r3, [r7, #24]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    24e2:	2201      	movs	r2, #1
    24e4:	69fb      	ldr	r3, [r7, #28]
    24e6:	409a      	lsls	r2, r3
    24e8:	0013      	movs	r3, r2
    24ea:	0019      	movs	r1, r3
    24ec:	2002      	movs	r0, #2
    24ee:	4b22      	ldr	r3, [pc, #136]	; (2578 <spi_init+0xf0>)
    24f0:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    24f2:	2314      	movs	r3, #20
    24f4:	18fb      	adds	r3, r7, r3
    24f6:	0018      	movs	r0, r3
    24f8:	4b20      	ldr	r3, [pc, #128]	; (257c <spi_init+0xf4>)
    24fa:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    24fc:	687b      	ldr	r3, [r7, #4]
    24fe:	2224      	movs	r2, #36	; 0x24
    2500:	5c9a      	ldrb	r2, [r3, r2]
    2502:	2314      	movs	r3, #20
    2504:	18fb      	adds	r3, r7, r3
    2506:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    2508:	69bb      	ldr	r3, [r7, #24]
    250a:	b2db      	uxtb	r3, r3
    250c:	2214      	movs	r2, #20
    250e:	18ba      	adds	r2, r7, r2
    2510:	0011      	movs	r1, r2
    2512:	0018      	movs	r0, r3
    2514:	4b1a      	ldr	r3, [pc, #104]	; (2580 <spi_init+0xf8>)
    2516:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    2518:	69bb      	ldr	r3, [r7, #24]
    251a:	b2db      	uxtb	r3, r3
    251c:	0018      	movs	r0, r3
    251e:	4b19      	ldr	r3, [pc, #100]	; (2584 <spi_init+0xfc>)
    2520:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    2522:	687b      	ldr	r3, [r7, #4]
    2524:	2224      	movs	r2, #36	; 0x24
    2526:	5c9b      	ldrb	r3, [r3, r2]
    2528:	2100      	movs	r1, #0
    252a:	0018      	movs	r0, r3
    252c:	4b16      	ldr	r3, [pc, #88]	; (2588 <spi_init+0x100>)
    252e:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    2530:	687b      	ldr	r3, [r7, #4]
    2532:	781b      	ldrb	r3, [r3, #0]
    2534:	2b01      	cmp	r3, #1
    2536:	d105      	bne.n	2544 <spi_init+0xbc>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    2538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    253a:	681b      	ldr	r3, [r3, #0]
    253c:	220c      	movs	r2, #12
    253e:	431a      	orrs	r2, r3
    2540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2542:	601a      	str	r2, [r3, #0]
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    2544:	687b      	ldr	r3, [r7, #4]
    2546:	781b      	ldrb	r3, [r3, #0]
    2548:	2b00      	cmp	r3, #0
    254a:	d105      	bne.n	2558 <spi_init+0xd0>
		/* Set the SERCOM in SPI slave mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    254c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    254e:	681b      	ldr	r3, [r3, #0]
    2550:	2208      	movs	r2, #8
    2552:	431a      	orrs	r2, r3
    2554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2556:	601a      	str	r2, [r3, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
    2558:	687a      	ldr	r2, [r7, #4]
    255a:	68fb      	ldr	r3, [r7, #12]
    255c:	0011      	movs	r1, r2
    255e:	0018      	movs	r0, r3
    2560:	4b0a      	ldr	r3, [pc, #40]	; (258c <spi_init+0x104>)
    2562:	4798      	blx	r3
    2564:	0003      	movs	r3, r0
}
    2566:	0018      	movs	r0, r3
    2568:	46bd      	mov	sp, r7
    256a:	b00a      	add	sp, #40	; 0x28
    256c:	bd80      	pop	{r7, pc}
    256e:	46c0      	nop			; (mov r8, r8)
    2570:	00002255 	.word	0x00002255
    2574:	000006d9 	.word	0x000006d9
    2578:	00001e25 	.word	0x00001e25
    257c:	00001e0d 	.word	0x00001e0d
    2580:	00003515 	.word	0x00003515
    2584:	00003559 	.word	0x00003559
    2588:	00000491 	.word	0x00000491
    258c:	00002005 	.word	0x00002005

00002590 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    2590:	b590      	push	{r4, r7, lr}
    2592:	b089      	sub	sp, #36	; 0x24
    2594:	af00      	add	r7, sp, #0
    2596:	60f8      	str	r0, [r7, #12]
    2598:	60b9      	str	r1, [r7, #8]
    259a:	0019      	movs	r1, r3
    259c:	1dbb      	adds	r3, r7, #6
    259e:	801a      	strh	r2, [r3, #0]
    25a0:	1d3b      	adds	r3, r7, #4
    25a2:	1c0a      	adds	r2, r1, #0
    25a4:	801a      	strh	r2, [r3, #0]
		return STATUS_BUSY;
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
    25a6:	1dbb      	adds	r3, r7, #6
    25a8:	881b      	ldrh	r3, [r3, #0]
    25aa:	2b00      	cmp	r3, #0
    25ac:	d101      	bne.n	25b2 <spi_read_buffer_wait+0x22>
		return STATUS_ERR_INVALID_ARG;
    25ae:	2317      	movs	r3, #23
    25b0:	e0b2      	b.n	2718 <spi_read_buffer_wait+0x188>
	}

	if (!(module->receiver_enabled)) {
    25b2:	68fb      	ldr	r3, [r7, #12]
    25b4:	79db      	ldrb	r3, [r3, #7]
    25b6:	2201      	movs	r2, #1
    25b8:	4053      	eors	r3, r2
    25ba:	b2db      	uxtb	r3, r3
    25bc:	2b00      	cmp	r3, #0
    25be:	d001      	beq.n	25c4 <spi_read_buffer_wait+0x34>
		return STATUS_ERR_DENIED;
    25c0:	231c      	movs	r3, #28
    25c2:	e0a9      	b.n	2718 <spi_read_buffer_wait+0x188>
	}
#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    25c4:	68fb      	ldr	r3, [r7, #12]
    25c6:	795b      	ldrb	r3, [r3, #5]
    25c8:	2b00      	cmp	r3, #0
    25ca:	d109      	bne.n	25e0 <spi_read_buffer_wait+0x50>
    25cc:	68fb      	ldr	r3, [r7, #12]
    25ce:	0018      	movs	r0, r3
    25d0:	4b53      	ldr	r3, [pc, #332]	; (2720 <spi_read_buffer_wait+0x190>)
    25d2:	4798      	blx	r3
    25d4:	1e03      	subs	r3, r0, #0
    25d6:	d003      	beq.n	25e0 <spi_read_buffer_wait+0x50>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
    25d8:	68fb      	ldr	r3, [r7, #12]
    25da:	0018      	movs	r0, r3
    25dc:	4b51      	ldr	r3, [pc, #324]	; (2724 <spi_read_buffer_wait+0x194>)
    25de:	4798      	blx	r3
	}
#  endif
	uint16_t rx_pos = 0;
    25e0:	231e      	movs	r3, #30
    25e2:	18fb      	adds	r3, r7, r3
    25e4:	2200      	movs	r2, #0
    25e6:	801a      	strh	r2, [r3, #0]

	while (length--) {
    25e8:	e08d      	b.n	2706 <spi_read_buffer_wait+0x176>
#  if CONF_SPI_MASTER_ENABLE == true
		if (module->mode == SPI_MODE_MASTER) {
    25ea:	68fb      	ldr	r3, [r7, #12]
    25ec:	795b      	ldrb	r3, [r3, #5]
    25ee:	2b01      	cmp	r3, #1
    25f0:	d112      	bne.n	2618 <spi_read_buffer_wait+0x88>
			/* Wait until the module is ready to write a character */
			while (!spi_is_ready_to_write(module)) {
    25f2:	46c0      	nop			; (mov r8, r8)
    25f4:	68fb      	ldr	r3, [r7, #12]
    25f6:	0018      	movs	r0, r3
    25f8:	4b4b      	ldr	r3, [pc, #300]	; (2728 <spi_read_buffer_wait+0x198>)
    25fa:	4798      	blx	r3
    25fc:	0003      	movs	r3, r0
    25fe:	001a      	movs	r2, r3
    2600:	2301      	movs	r3, #1
    2602:	4053      	eors	r3, r2
    2604:	b2db      	uxtb	r3, r3
    2606:	2b00      	cmp	r3, #0
    2608:	d1f4      	bne.n	25f4 <spi_read_buffer_wait+0x64>
			}

			/* Send dummy SPI character to read in master mode */
			spi_write(module, dummy);
    260a:	1d3b      	adds	r3, r7, #4
    260c:	881a      	ldrh	r2, [r3, #0]
    260e:	68fb      	ldr	r3, [r7, #12]
    2610:	0011      	movs	r1, r2
    2612:	0018      	movs	r0, r3
    2614:	4b45      	ldr	r3, [pc, #276]	; (272c <spi_read_buffer_wait+0x19c>)
    2616:	4798      	blx	r3
		}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
    2618:	68fb      	ldr	r3, [r7, #12]
    261a:	795b      	ldrb	r3, [r3, #5]
    261c:	2b00      	cmp	r3, #0
    261e:	d12a      	bne.n	2676 <spi_read_buffer_wait+0xe6>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    2620:	2300      	movs	r3, #0
    2622:	61bb      	str	r3, [r7, #24]
    2624:	e008      	b.n	2638 <spi_read_buffer_wait+0xa8>
				if (spi_is_ready_to_read(module)) {
    2626:	68fb      	ldr	r3, [r7, #12]
    2628:	0018      	movs	r0, r3
    262a:	4b41      	ldr	r3, [pc, #260]	; (2730 <spi_read_buffer_wait+0x1a0>)
    262c:	4798      	blx	r3
    262e:	1e03      	subs	r3, r0, #0
    2630:	d107      	bne.n	2642 <spi_read_buffer_wait+0xb2>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    2632:	69bb      	ldr	r3, [r7, #24]
    2634:	3301      	adds	r3, #1
    2636:	61bb      	str	r3, [r7, #24]
    2638:	69bb      	ldr	r3, [r7, #24]
    263a:	4a3e      	ldr	r2, [pc, #248]	; (2734 <spi_read_buffer_wait+0x1a4>)
    263c:	4293      	cmp	r3, r2
    263e:	d9f2      	bls.n	2626 <spi_read_buffer_wait+0x96>
    2640:	e000      	b.n	2644 <spi_read_buffer_wait+0xb4>
					break;
    2642:	46c0      	nop			; (mov r8, r8)
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
    2644:	68fb      	ldr	r3, [r7, #12]
    2646:	0018      	movs	r0, r3
    2648:	4b35      	ldr	r3, [pc, #212]	; (2720 <spi_read_buffer_wait+0x190>)
    264a:	4798      	blx	r3
    264c:	1e03      	subs	r3, r0, #0
    264e:	d005      	beq.n	265c <spi_read_buffer_wait+0xcc>
				_spi_clear_tx_complete_flag(module);
    2650:	68fb      	ldr	r3, [r7, #12]
    2652:	0018      	movs	r0, r3
    2654:	4b33      	ldr	r3, [pc, #204]	; (2724 <spi_read_buffer_wait+0x194>)
    2656:	4798      	blx	r3
				return STATUS_ABORTED;
    2658:	2304      	movs	r3, #4
    265a:	e05d      	b.n	2718 <spi_read_buffer_wait+0x188>
			}

			if (!spi_is_ready_to_read(module)) {
    265c:	68fb      	ldr	r3, [r7, #12]
    265e:	0018      	movs	r0, r3
    2660:	4b33      	ldr	r3, [pc, #204]	; (2730 <spi_read_buffer_wait+0x1a0>)
    2662:	4798      	blx	r3
    2664:	0003      	movs	r3, r0
    2666:	001a      	movs	r2, r3
    2668:	2301      	movs	r3, #1
    266a:	4053      	eors	r3, r2
    266c:	b2db      	uxtb	r3, r3
    266e:	2b00      	cmp	r3, #0
    2670:	d001      	beq.n	2676 <spi_read_buffer_wait+0xe6>
				/* Not ready to read data within timeout period */
				return STATUS_ERR_TIMEOUT;
    2672:	2312      	movs	r3, #18
    2674:	e050      	b.n	2718 <spi_read_buffer_wait+0x188>
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
    2676:	46c0      	nop			; (mov r8, r8)
    2678:	68fb      	ldr	r3, [r7, #12]
    267a:	0018      	movs	r0, r3
    267c:	4b2c      	ldr	r3, [pc, #176]	; (2730 <spi_read_buffer_wait+0x1a0>)
    267e:	4798      	blx	r3
    2680:	0003      	movs	r3, r0
    2682:	001a      	movs	r2, r3
    2684:	2301      	movs	r3, #1
    2686:	4053      	eors	r3, r2
    2688:	b2db      	uxtb	r3, r3
    268a:	2b00      	cmp	r3, #0
    268c:	d1f4      	bne.n	2678 <spi_read_buffer_wait+0xe8>
		}

		uint16_t received_data = 0;
    268e:	2314      	movs	r3, #20
    2690:	18fb      	adds	r3, r7, r3
    2692:	2200      	movs	r2, #0
    2694:	801a      	strh	r2, [r3, #0]
		enum status_code retval = spi_read(module, &received_data);
    2696:	2317      	movs	r3, #23
    2698:	18fc      	adds	r4, r7, r3
    269a:	2314      	movs	r3, #20
    269c:	18fa      	adds	r2, r7, r3
    269e:	68fb      	ldr	r3, [r7, #12]
    26a0:	0011      	movs	r1, r2
    26a2:	0018      	movs	r0, r3
    26a4:	4b24      	ldr	r3, [pc, #144]	; (2738 <spi_read_buffer_wait+0x1a8>)
    26a6:	4798      	blx	r3
    26a8:	0003      	movs	r3, r0
    26aa:	7023      	strb	r3, [r4, #0]

		if (retval != STATUS_OK) {
    26ac:	2317      	movs	r3, #23
    26ae:	18fb      	adds	r3, r7, r3
    26b0:	781b      	ldrb	r3, [r3, #0]
    26b2:	2b00      	cmp	r3, #0
    26b4:	d003      	beq.n	26be <spi_read_buffer_wait+0x12e>
			/* Overflow, abort */
			return retval;
    26b6:	2317      	movs	r3, #23
    26b8:	18fb      	adds	r3, r7, r3
    26ba:	781b      	ldrb	r3, [r3, #0]
    26bc:	e02c      	b.n	2718 <spi_read_buffer_wait+0x188>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    26be:	231e      	movs	r3, #30
    26c0:	18fb      	adds	r3, r7, r3
    26c2:	881b      	ldrh	r3, [r3, #0]
    26c4:	221e      	movs	r2, #30
    26c6:	18ba      	adds	r2, r7, r2
    26c8:	1c59      	adds	r1, r3, #1
    26ca:	8011      	strh	r1, [r2, #0]
    26cc:	001a      	movs	r2, r3
    26ce:	68bb      	ldr	r3, [r7, #8]
    26d0:	189b      	adds	r3, r3, r2
    26d2:	2214      	movs	r2, #20
    26d4:	18ba      	adds	r2, r7, r2
    26d6:	8812      	ldrh	r2, [r2, #0]
    26d8:	b2d2      	uxtb	r2, r2
    26da:	701a      	strb	r2, [r3, #0]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    26dc:	68fb      	ldr	r3, [r7, #12]
    26de:	799b      	ldrb	r3, [r3, #6]
    26e0:	2b01      	cmp	r3, #1
    26e2:	d110      	bne.n	2706 <spi_read_buffer_wait+0x176>
			rx_data[rx_pos++] = (received_data >> 8);
    26e4:	231e      	movs	r3, #30
    26e6:	18fb      	adds	r3, r7, r3
    26e8:	881b      	ldrh	r3, [r3, #0]
    26ea:	221e      	movs	r2, #30
    26ec:	18ba      	adds	r2, r7, r2
    26ee:	1c59      	adds	r1, r3, #1
    26f0:	8011      	strh	r1, [r2, #0]
    26f2:	001a      	movs	r2, r3
    26f4:	68bb      	ldr	r3, [r7, #8]
    26f6:	189b      	adds	r3, r3, r2
    26f8:	2214      	movs	r2, #20
    26fa:	18ba      	adds	r2, r7, r2
    26fc:	8812      	ldrh	r2, [r2, #0]
    26fe:	0a12      	lsrs	r2, r2, #8
    2700:	b292      	uxth	r2, r2
    2702:	b2d2      	uxtb	r2, r2
    2704:	701a      	strb	r2, [r3, #0]
	while (length--) {
    2706:	1dbb      	adds	r3, r7, #6
    2708:	881b      	ldrh	r3, [r3, #0]
    270a:	1dba      	adds	r2, r7, #6
    270c:	1e59      	subs	r1, r3, #1
    270e:	8011      	strh	r1, [r2, #0]
    2710:	2b00      	cmp	r3, #0
    2712:	d000      	beq.n	2716 <spi_read_buffer_wait+0x186>
    2714:	e769      	b.n	25ea <spi_read_buffer_wait+0x5a>
		}
	}

	return STATUS_OK;
    2716:	2300      	movs	r3, #0
}
    2718:	0018      	movs	r0, r3
    271a:	46bd      	mov	sp, r7
    271c:	b009      	add	sp, #36	; 0x24
    271e:	bd90      	pop	{r4, r7, pc}
    2720:	00001ea1 	.word	0x00001ea1
    2724:	00001fe9 	.word	0x00001fe9
    2728:	00001ec9 	.word	0x00001ec9
    272c:	00001f19 	.word	0x00001f19
    2730:	00001ef1 	.word	0x00001ef1
    2734:	00002710 	.word	0x00002710
    2738:	00001f61 	.word	0x00001f61

0000273c <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    273c:	b580      	push	{r7, lr}
    273e:	b086      	sub	sp, #24
    2740:	af00      	add	r7, sp, #0
    2742:	60f8      	str	r0, [r7, #12]
    2744:	60b9      	str	r1, [r7, #8]
    2746:	1dfb      	adds	r3, r7, #7
    2748:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    274a:	68fb      	ldr	r3, [r7, #12]
    274c:	795b      	ldrb	r3, [r3, #5]
    274e:	2b01      	cmp	r3, #1
    2750:	d001      	beq.n	2756 <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
    2752:	2315      	movs	r3, #21
    2754:	e05c      	b.n	2810 <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    2756:	68fb      	ldr	r3, [r7, #12]
    2758:	7a1b      	ldrb	r3, [r3, #8]
    275a:	2201      	movs	r2, #1
    275c:	4053      	eors	r3, r2
    275e:	b2db      	uxtb	r3, r3
    2760:	2b00      	cmp	r3, #0
    2762:	d054      	beq.n	280e <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
    2764:	1dfb      	adds	r3, r7, #7
    2766:	781b      	ldrb	r3, [r3, #0]
    2768:	2b00      	cmp	r3, #0
    276a:	d04a      	beq.n	2802 <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
    276c:	68bb      	ldr	r3, [r7, #8]
    276e:	785b      	ldrb	r3, [r3, #1]
    2770:	2b00      	cmp	r3, #0
    2772:	d03f      	beq.n	27f4 <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
    2774:	68fb      	ldr	r3, [r7, #12]
    2776:	0018      	movs	r0, r3
    2778:	4b27      	ldr	r3, [pc, #156]	; (2818 <spi_select_slave+0xdc>)
    277a:	4798      	blx	r3
    277c:	0003      	movs	r3, r0
    277e:	001a      	movs	r2, r3
    2780:	2301      	movs	r3, #1
    2782:	4053      	eors	r3, r2
    2784:	b2db      	uxtb	r3, r3
    2786:	2b00      	cmp	r3, #0
    2788:	d007      	beq.n	279a <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
    278a:	68bb      	ldr	r3, [r7, #8]
    278c:	781b      	ldrb	r3, [r3, #0]
    278e:	2101      	movs	r1, #1
    2790:	0018      	movs	r0, r3
    2792:	4b22      	ldr	r3, [pc, #136]	; (281c <spi_select_slave+0xe0>)
    2794:	4798      	blx	r3
					return STATUS_BUSY;
    2796:	2305      	movs	r3, #5
    2798:	e03a      	b.n	2810 <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    279a:	68bb      	ldr	r3, [r7, #8]
    279c:	781b      	ldrb	r3, [r3, #0]
    279e:	2100      	movs	r1, #0
    27a0:	0018      	movs	r0, r3
    27a2:	4b1e      	ldr	r3, [pc, #120]	; (281c <spi_select_slave+0xe0>)
    27a4:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
    27a6:	68bb      	ldr	r3, [r7, #8]
    27a8:	789b      	ldrb	r3, [r3, #2]
    27aa:	b29a      	uxth	r2, r3
    27ac:	68fb      	ldr	r3, [r7, #12]
    27ae:	0011      	movs	r1, r2
    27b0:	0018      	movs	r0, r3
    27b2:	4b1b      	ldr	r3, [pc, #108]	; (2820 <spi_select_slave+0xe4>)
    27b4:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
    27b6:	68fb      	ldr	r3, [r7, #12]
    27b8:	79db      	ldrb	r3, [r3, #7]
    27ba:	2201      	movs	r2, #1
    27bc:	4053      	eors	r3, r2
    27be:	b2db      	uxtb	r3, r3
    27c0:	2b00      	cmp	r3, #0
    27c2:	d024      	beq.n	280e <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
    27c4:	46c0      	nop			; (mov r8, r8)
    27c6:	68fb      	ldr	r3, [r7, #12]
    27c8:	0018      	movs	r0, r3
    27ca:	4b16      	ldr	r3, [pc, #88]	; (2824 <spi_select_slave+0xe8>)
    27cc:	4798      	blx	r3
    27ce:	0003      	movs	r3, r0
    27d0:	001a      	movs	r2, r3
    27d2:	2301      	movs	r3, #1
    27d4:	4053      	eors	r3, r2
    27d6:	b2db      	uxtb	r3, r3
    27d8:	2b00      	cmp	r3, #0
    27da:	d1f4      	bne.n	27c6 <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
    27dc:	2316      	movs	r3, #22
    27de:	18fb      	adds	r3, r7, r3
    27e0:	2200      	movs	r2, #0
    27e2:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
    27e4:	2316      	movs	r3, #22
    27e6:	18fa      	adds	r2, r7, r3
    27e8:	68fb      	ldr	r3, [r7, #12]
    27ea:	0011      	movs	r1, r2
    27ec:	0018      	movs	r0, r3
    27ee:	4b0e      	ldr	r3, [pc, #56]	; (2828 <spi_select_slave+0xec>)
    27f0:	4798      	blx	r3
    27f2:	e00c      	b.n	280e <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    27f4:	68bb      	ldr	r3, [r7, #8]
    27f6:	781b      	ldrb	r3, [r3, #0]
    27f8:	2100      	movs	r1, #0
    27fa:	0018      	movs	r0, r3
    27fc:	4b07      	ldr	r3, [pc, #28]	; (281c <spi_select_slave+0xe0>)
    27fe:	4798      	blx	r3
    2800:	e005      	b.n	280e <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
    2802:	68bb      	ldr	r3, [r7, #8]
    2804:	781b      	ldrb	r3, [r3, #0]
    2806:	2101      	movs	r1, #1
    2808:	0018      	movs	r0, r3
    280a:	4b04      	ldr	r3, [pc, #16]	; (281c <spi_select_slave+0xe0>)
    280c:	4798      	blx	r3
		}
	}
	return STATUS_OK;
    280e:	2300      	movs	r3, #0
}
    2810:	0018      	movs	r0, r3
    2812:	46bd      	mov	sp, r7
    2814:	b006      	add	sp, #24
    2816:	bd80      	pop	{r7, pc}
    2818:	00001ec9 	.word	0x00001ec9
    281c:	00001db9 	.word	0x00001db9
    2820:	00001f19 	.word	0x00001f19
    2824:	00001ef1 	.word	0x00001ef1
    2828:	00001f61 	.word	0x00001f61

0000282c <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    282c:	b580      	push	{r7, lr}
    282e:	b08a      	sub	sp, #40	; 0x28
    2830:	af00      	add	r7, sp, #0
    2832:	60f8      	str	r0, [r7, #12]
    2834:	60b9      	str	r1, [r7, #8]
    2836:	1dbb      	adds	r3, r7, #6
    2838:	801a      	strh	r2, [r3, #0]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
	}
#  endif

	if (length == 0) {
    283a:	1dbb      	adds	r3, r7, #6
    283c:	881b      	ldrh	r3, [r3, #0]
    283e:	2b00      	cmp	r3, #0
    2840:	d101      	bne.n	2846 <spi_write_buffer_wait+0x1a>
		return STATUS_ERR_INVALID_ARG;
    2842:	2317      	movs	r3, #23
    2844:	e16a      	b.n	2b1c <spi_write_buffer_wait+0x2f0>
	}

#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    2846:	68fb      	ldr	r3, [r7, #12]
    2848:	795b      	ldrb	r3, [r3, #5]
    284a:	2b00      	cmp	r3, #0
    284c:	d109      	bne.n	2862 <spi_write_buffer_wait+0x36>
    284e:	68fb      	ldr	r3, [r7, #12]
    2850:	0018      	movs	r0, r3
    2852:	4bb4      	ldr	r3, [pc, #720]	; (2b24 <spi_write_buffer_wait+0x2f8>)
    2854:	4798      	blx	r3
    2856:	1e03      	subs	r3, r0, #0
    2858:	d003      	beq.n	2862 <spi_write_buffer_wait+0x36>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
    285a:	68fb      	ldr	r3, [r7, #12]
    285c:	0018      	movs	r0, r3
    285e:	4bb2      	ldr	r3, [pc, #712]	; (2b28 <spi_write_buffer_wait+0x2fc>)
    2860:	4798      	blx	r3
	}
#  endif

	uint16_t tx_pos = 0;
    2862:	2326      	movs	r3, #38	; 0x26
    2864:	18fb      	adds	r3, r7, r3
    2866:	2200      	movs	r2, #0
    2868:	801a      	strh	r2, [r3, #0]
	uint16_t flush_length = length;
    286a:	2324      	movs	r3, #36	; 0x24
    286c:	18fb      	adds	r3, r7, r3
    286e:	1dba      	adds	r2, r7, #6
    2870:	8812      	ldrh	r2, [r2, #0]
    2872:	801a      	strh	r2, [r3, #0]

	/* Write block */
	while (length--) {
    2874:	e0fe      	b.n	2a74 <spi_write_buffer_wait+0x248>
#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
    2876:	68fb      	ldr	r3, [r7, #12]
    2878:	795b      	ldrb	r3, [r3, #5]
    287a:	2b00      	cmp	r3, #0
    287c:	d12a      	bne.n	28d4 <spi_write_buffer_wait+0xa8>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    287e:	2300      	movs	r3, #0
    2880:	623b      	str	r3, [r7, #32]
    2882:	e008      	b.n	2896 <spi_write_buffer_wait+0x6a>
				if (spi_is_ready_to_write(module)) {
    2884:	68fb      	ldr	r3, [r7, #12]
    2886:	0018      	movs	r0, r3
    2888:	4ba8      	ldr	r3, [pc, #672]	; (2b2c <spi_write_buffer_wait+0x300>)
    288a:	4798      	blx	r3
    288c:	1e03      	subs	r3, r0, #0
    288e:	d107      	bne.n	28a0 <spi_write_buffer_wait+0x74>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    2890:	6a3b      	ldr	r3, [r7, #32]
    2892:	3301      	adds	r3, #1
    2894:	623b      	str	r3, [r7, #32]
    2896:	6a3b      	ldr	r3, [r7, #32]
    2898:	4aa5      	ldr	r2, [pc, #660]	; (2b30 <spi_write_buffer_wait+0x304>)
    289a:	4293      	cmp	r3, r2
    289c:	d9f2      	bls.n	2884 <spi_write_buffer_wait+0x58>
    289e:	e000      	b.n	28a2 <spi_write_buffer_wait+0x76>
					break;
    28a0:	46c0      	nop			; (mov r8, r8)
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
    28a2:	68fb      	ldr	r3, [r7, #12]
    28a4:	0018      	movs	r0, r3
    28a6:	4b9f      	ldr	r3, [pc, #636]	; (2b24 <spi_write_buffer_wait+0x2f8>)
    28a8:	4798      	blx	r3
    28aa:	1e03      	subs	r3, r0, #0
    28ac:	d005      	beq.n	28ba <spi_write_buffer_wait+0x8e>
				_spi_clear_tx_complete_flag(module);
    28ae:	68fb      	ldr	r3, [r7, #12]
    28b0:	0018      	movs	r0, r3
    28b2:	4b9d      	ldr	r3, [pc, #628]	; (2b28 <spi_write_buffer_wait+0x2fc>)
    28b4:	4798      	blx	r3
				return STATUS_ABORTED;
    28b6:	2304      	movs	r3, #4
    28b8:	e130      	b.n	2b1c <spi_write_buffer_wait+0x2f0>
			}

			if (!spi_is_ready_to_write(module)) {
    28ba:	68fb      	ldr	r3, [r7, #12]
    28bc:	0018      	movs	r0, r3
    28be:	4b9b      	ldr	r3, [pc, #620]	; (2b2c <spi_write_buffer_wait+0x300>)
    28c0:	4798      	blx	r3
    28c2:	0003      	movs	r3, r0
    28c4:	001a      	movs	r2, r3
    28c6:	2301      	movs	r3, #1
    28c8:	4053      	eors	r3, r2
    28ca:	b2db      	uxtb	r3, r3
    28cc:	2b00      	cmp	r3, #0
    28ce:	d001      	beq.n	28d4 <spi_write_buffer_wait+0xa8>
				/* Not ready to write data within timeout period */
				return STATUS_ERR_TIMEOUT;
    28d0:	2312      	movs	r3, #18
    28d2:	e123      	b.n	2b1c <spi_write_buffer_wait+0x2f0>
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
    28d4:	46c0      	nop			; (mov r8, r8)
    28d6:	68fb      	ldr	r3, [r7, #12]
    28d8:	0018      	movs	r0, r3
    28da:	4b94      	ldr	r3, [pc, #592]	; (2b2c <spi_write_buffer_wait+0x300>)
    28dc:	4798      	blx	r3
    28de:	0003      	movs	r3, r0
    28e0:	001a      	movs	r2, r3
    28e2:	2301      	movs	r3, #1
    28e4:	4053      	eors	r3, r2
    28e6:	b2db      	uxtb	r3, r3
    28e8:	2b00      	cmp	r3, #0
    28ea:	d1f4      	bne.n	28d6 <spi_write_buffer_wait+0xaa>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
    28ec:	2326      	movs	r3, #38	; 0x26
    28ee:	18fb      	adds	r3, r7, r3
    28f0:	881b      	ldrh	r3, [r3, #0]
    28f2:	2226      	movs	r2, #38	; 0x26
    28f4:	18ba      	adds	r2, r7, r2
    28f6:	1c59      	adds	r1, r3, #1
    28f8:	8011      	strh	r1, [r2, #0]
    28fa:	001a      	movs	r2, r3
    28fc:	68bb      	ldr	r3, [r7, #8]
    28fe:	189b      	adds	r3, r3, r2
    2900:	781a      	ldrb	r2, [r3, #0]
    2902:	231e      	movs	r3, #30
    2904:	18fb      	adds	r3, r7, r3
    2906:	801a      	strh	r2, [r3, #0]

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2908:	68fb      	ldr	r3, [r7, #12]
    290a:	799b      	ldrb	r3, [r3, #6]
    290c:	2b01      	cmp	r3, #1
    290e:	d115      	bne.n	293c <spi_write_buffer_wait+0x110>
			data_to_send |= (tx_data[tx_pos++] << 8);
    2910:	2326      	movs	r3, #38	; 0x26
    2912:	18fb      	adds	r3, r7, r3
    2914:	881b      	ldrh	r3, [r3, #0]
    2916:	2226      	movs	r2, #38	; 0x26
    2918:	18ba      	adds	r2, r7, r2
    291a:	1c59      	adds	r1, r3, #1
    291c:	8011      	strh	r1, [r2, #0]
    291e:	001a      	movs	r2, r3
    2920:	68bb      	ldr	r3, [r7, #8]
    2922:	189b      	adds	r3, r3, r2
    2924:	781b      	ldrb	r3, [r3, #0]
    2926:	021b      	lsls	r3, r3, #8
    2928:	b21a      	sxth	r2, r3
    292a:	231e      	movs	r3, #30
    292c:	18fb      	adds	r3, r7, r3
    292e:	2100      	movs	r1, #0
    2930:	5e5b      	ldrsh	r3, [r3, r1]
    2932:	4313      	orrs	r3, r2
    2934:	b21a      	sxth	r2, r3
    2936:	231e      	movs	r3, #30
    2938:	18fb      	adds	r3, r7, r3
    293a:	801a      	strh	r2, [r3, #0]
		}

		/* Write the data to send */
		spi_write(module, data_to_send);
    293c:	231e      	movs	r3, #30
    293e:	18fb      	adds	r3, r7, r3
    2940:	881a      	ldrh	r2, [r3, #0]
    2942:	68fb      	ldr	r3, [r7, #12]
    2944:	0011      	movs	r1, r2
    2946:	0018      	movs	r0, r3
    2948:	4b7a      	ldr	r3, [pc, #488]	; (2b34 <spi_write_buffer_wait+0x308>)
    294a:	4798      	blx	r3

		if (module->receiver_enabled) {
    294c:	68fb      	ldr	r3, [r7, #12]
    294e:	79db      	ldrb	r3, [r3, #7]
    2950:	2224      	movs	r2, #36	; 0x24
    2952:	18ba      	adds	r2, r7, r2
    2954:	2124      	movs	r1, #36	; 0x24
    2956:	1879      	adds	r1, r7, r1
    2958:	8809      	ldrh	r1, [r1, #0]
    295a:	8011      	strh	r1, [r2, #0]
    295c:	2b00      	cmp	r3, #0
    295e:	d100      	bne.n	2962 <spi_write_buffer_wait+0x136>
    2960:	e088      	b.n	2a74 <spi_write_buffer_wait+0x248>
#  if CONF_SPI_SLAVE_ENABLE == true
			/* Start timeout period for slave */
			if (module->mode == SPI_MODE_SLAVE) {
    2962:	68fb      	ldr	r3, [r7, #12]
    2964:	795b      	ldrb	r3, [r3, #5]
    2966:	2b00      	cmp	r3, #0
    2968:	d000      	beq.n	296c <spi_write_buffer_wait+0x140>
    296a:	e069      	b.n	2a40 <spi_write_buffer_wait+0x214>
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    296c:	2300      	movs	r3, #0
    296e:	61bb      	str	r3, [r7, #24]
    2970:	e047      	b.n	2a02 <spi_write_buffer_wait+0x1d6>
					if (length && spi_is_ready_to_write(module)) {
    2972:	1dbb      	adds	r3, r7, #6
    2974:	881b      	ldrh	r3, [r3, #0]
    2976:	2b00      	cmp	r3, #0
    2978:	d03a      	beq.n	29f0 <spi_write_buffer_wait+0x1c4>
    297a:	68fb      	ldr	r3, [r7, #12]
    297c:	0018      	movs	r0, r3
    297e:	4b6b      	ldr	r3, [pc, #428]	; (2b2c <spi_write_buffer_wait+0x300>)
    2980:	4798      	blx	r3
    2982:	1e03      	subs	r3, r0, #0
    2984:	d034      	beq.n	29f0 <spi_write_buffer_wait+0x1c4>
						data_to_send = tx_data[tx_pos++];
    2986:	2326      	movs	r3, #38	; 0x26
    2988:	18fb      	adds	r3, r7, r3
    298a:	881b      	ldrh	r3, [r3, #0]
    298c:	2226      	movs	r2, #38	; 0x26
    298e:	18ba      	adds	r2, r7, r2
    2990:	1c59      	adds	r1, r3, #1
    2992:	8011      	strh	r1, [r2, #0]
    2994:	001a      	movs	r2, r3
    2996:	68bb      	ldr	r3, [r7, #8]
    2998:	189b      	adds	r3, r3, r2
    299a:	781a      	ldrb	r2, [r3, #0]
    299c:	231e      	movs	r3, #30
    299e:	18fb      	adds	r3, r7, r3
    29a0:	801a      	strh	r2, [r3, #0]
						/* If 9-bit data, get next byte to send from the buffer */
						if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    29a2:	68fb      	ldr	r3, [r7, #12]
    29a4:	799b      	ldrb	r3, [r3, #6]
    29a6:	2b01      	cmp	r3, #1
    29a8:	d115      	bne.n	29d6 <spi_write_buffer_wait+0x1aa>
							data_to_send |= (tx_data[tx_pos++] << 8);
    29aa:	2326      	movs	r3, #38	; 0x26
    29ac:	18fb      	adds	r3, r7, r3
    29ae:	881b      	ldrh	r3, [r3, #0]
    29b0:	2226      	movs	r2, #38	; 0x26
    29b2:	18ba      	adds	r2, r7, r2
    29b4:	1c59      	adds	r1, r3, #1
    29b6:	8011      	strh	r1, [r2, #0]
    29b8:	001a      	movs	r2, r3
    29ba:	68bb      	ldr	r3, [r7, #8]
    29bc:	189b      	adds	r3, r3, r2
    29be:	781b      	ldrb	r3, [r3, #0]
    29c0:	021b      	lsls	r3, r3, #8
    29c2:	b21a      	sxth	r2, r3
    29c4:	231e      	movs	r3, #30
    29c6:	18fb      	adds	r3, r7, r3
    29c8:	2100      	movs	r1, #0
    29ca:	5e5b      	ldrsh	r3, [r3, r1]
    29cc:	4313      	orrs	r3, r2
    29ce:	b21a      	sxth	r2, r3
    29d0:	231e      	movs	r3, #30
    29d2:	18fb      	adds	r3, r7, r3
    29d4:	801a      	strh	r2, [r3, #0]
						}

						/* Write the data to send */
						spi_write(module, data_to_send);
    29d6:	231e      	movs	r3, #30
    29d8:	18fb      	adds	r3, r7, r3
    29da:	881a      	ldrh	r2, [r3, #0]
    29dc:	68fb      	ldr	r3, [r7, #12]
    29de:	0011      	movs	r1, r2
    29e0:	0018      	movs	r0, r3
    29e2:	4b54      	ldr	r3, [pc, #336]	; (2b34 <spi_write_buffer_wait+0x308>)
    29e4:	4798      	blx	r3
						length--;
    29e6:	1dbb      	adds	r3, r7, #6
    29e8:	881a      	ldrh	r2, [r3, #0]
    29ea:	1dbb      	adds	r3, r7, #6
    29ec:	3a01      	subs	r2, #1
    29ee:	801a      	strh	r2, [r3, #0]
					}
					if (spi_is_ready_to_read(module)) {
    29f0:	68fb      	ldr	r3, [r7, #12]
    29f2:	0018      	movs	r0, r3
    29f4:	4b50      	ldr	r3, [pc, #320]	; (2b38 <spi_write_buffer_wait+0x30c>)
    29f6:	4798      	blx	r3
    29f8:	1e03      	subs	r3, r0, #0
    29fa:	d107      	bne.n	2a0c <spi_write_buffer_wait+0x1e0>
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    29fc:	69bb      	ldr	r3, [r7, #24]
    29fe:	3301      	adds	r3, #1
    2a00:	61bb      	str	r3, [r7, #24]
    2a02:	69bb      	ldr	r3, [r7, #24]
    2a04:	4a4a      	ldr	r2, [pc, #296]	; (2b30 <spi_write_buffer_wait+0x304>)
    2a06:	4293      	cmp	r3, r2
    2a08:	d9b3      	bls.n	2972 <spi_write_buffer_wait+0x146>
    2a0a:	e000      	b.n	2a0e <spi_write_buffer_wait+0x1e2>
						break;
    2a0c:	46c0      	nop			; (mov r8, r8)
					}
				}

				/* Check if master has ended the transaction */
				if (spi_is_write_complete(module)) {
    2a0e:	68fb      	ldr	r3, [r7, #12]
    2a10:	0018      	movs	r0, r3
    2a12:	4b44      	ldr	r3, [pc, #272]	; (2b24 <spi_write_buffer_wait+0x2f8>)
    2a14:	4798      	blx	r3
    2a16:	1e03      	subs	r3, r0, #0
    2a18:	d005      	beq.n	2a26 <spi_write_buffer_wait+0x1fa>
					_spi_clear_tx_complete_flag(module);
    2a1a:	68fb      	ldr	r3, [r7, #12]
    2a1c:	0018      	movs	r0, r3
    2a1e:	4b42      	ldr	r3, [pc, #264]	; (2b28 <spi_write_buffer_wait+0x2fc>)
    2a20:	4798      	blx	r3
					return STATUS_ABORTED;
    2a22:	2304      	movs	r3, #4
    2a24:	e07a      	b.n	2b1c <spi_write_buffer_wait+0x2f0>
				}

				if (!spi_is_ready_to_read(module)) {
    2a26:	68fb      	ldr	r3, [r7, #12]
    2a28:	0018      	movs	r0, r3
    2a2a:	4b43      	ldr	r3, [pc, #268]	; (2b38 <spi_write_buffer_wait+0x30c>)
    2a2c:	4798      	blx	r3
    2a2e:	0003      	movs	r3, r0
    2a30:	001a      	movs	r2, r3
    2a32:	2301      	movs	r3, #1
    2a34:	4053      	eors	r3, r2
    2a36:	b2db      	uxtb	r3, r3
    2a38:	2b00      	cmp	r3, #0
    2a3a:	d001      	beq.n	2a40 <spi_write_buffer_wait+0x214>
					/* Not ready to read data within timeout period */
					return STATUS_ERR_TIMEOUT;
    2a3c:	2312      	movs	r3, #18
    2a3e:	e06d      	b.n	2b1c <spi_write_buffer_wait+0x2f0>
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
    2a40:	46c0      	nop			; (mov r8, r8)
    2a42:	68fb      	ldr	r3, [r7, #12]
    2a44:	0018      	movs	r0, r3
    2a46:	4b3c      	ldr	r3, [pc, #240]	; (2b38 <spi_write_buffer_wait+0x30c>)
    2a48:	4798      	blx	r3
    2a4a:	0003      	movs	r3, r0
    2a4c:	001a      	movs	r2, r3
    2a4e:	2301      	movs	r3, #1
    2a50:	4053      	eors	r3, r2
    2a52:	b2db      	uxtb	r3, r3
    2a54:	2b00      	cmp	r3, #0
    2a56:	d1f4      	bne.n	2a42 <spi_write_buffer_wait+0x216>
			}

			/* Flush read buffer */
			uint16_t flush;
			spi_read(module, &flush);
    2a58:	2312      	movs	r3, #18
    2a5a:	18fa      	adds	r2, r7, r3
    2a5c:	68fb      	ldr	r3, [r7, #12]
    2a5e:	0011      	movs	r1, r2
    2a60:	0018      	movs	r0, r3
    2a62:	4b36      	ldr	r3, [pc, #216]	; (2b3c <spi_write_buffer_wait+0x310>)
    2a64:	4798      	blx	r3
			flush_length--;
    2a66:	2324      	movs	r3, #36	; 0x24
    2a68:	18fb      	adds	r3, r7, r3
    2a6a:	881a      	ldrh	r2, [r3, #0]
    2a6c:	2324      	movs	r3, #36	; 0x24
    2a6e:	18fb      	adds	r3, r7, r3
    2a70:	3a01      	subs	r2, #1
    2a72:	801a      	strh	r2, [r3, #0]
	while (length--) {
    2a74:	1dbb      	adds	r3, r7, #6
    2a76:	881b      	ldrh	r3, [r3, #0]
    2a78:	1dba      	adds	r2, r7, #6
    2a7a:	1e59      	subs	r1, r3, #1
    2a7c:	8011      	strh	r1, [r2, #0]
    2a7e:	2b00      	cmp	r3, #0
    2a80:	d000      	beq.n	2a84 <spi_write_buffer_wait+0x258>
    2a82:	e6f8      	b.n	2876 <spi_write_buffer_wait+0x4a>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
    2a84:	68fb      	ldr	r3, [r7, #12]
    2a86:	795b      	ldrb	r3, [r3, #5]
    2a88:	2b01      	cmp	r3, #1
    2a8a:	d10b      	bne.n	2aa4 <spi_write_buffer_wait+0x278>
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
    2a8c:	46c0      	nop			; (mov r8, r8)
    2a8e:	68fb      	ldr	r3, [r7, #12]
    2a90:	0018      	movs	r0, r3
    2a92:	4b24      	ldr	r3, [pc, #144]	; (2b24 <spi_write_buffer_wait+0x2f8>)
    2a94:	4798      	blx	r3
    2a96:	0003      	movs	r3, r0
    2a98:	001a      	movs	r2, r3
    2a9a:	2301      	movs	r3, #1
    2a9c:	4053      	eors	r3, r2
    2a9e:	b2db      	uxtb	r3, r3
    2aa0:	2b00      	cmp	r3, #0
    2aa2:	d1f4      	bne.n	2a8e <spi_write_buffer_wait+0x262>
		}
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
    2aa4:	68fb      	ldr	r3, [r7, #12]
    2aa6:	795b      	ldrb	r3, [r3, #5]
    2aa8:	2b00      	cmp	r3, #0
    2aaa:	d136      	bne.n	2b1a <spi_write_buffer_wait+0x2ee>
		if (module->receiver_enabled) {
    2aac:	68fb      	ldr	r3, [r7, #12]
    2aae:	79db      	ldrb	r3, [r3, #7]
    2ab0:	2b00      	cmp	r3, #0
    2ab2:	d032      	beq.n	2b1a <spi_write_buffer_wait+0x2ee>
			while (flush_length) {
    2ab4:	e02c      	b.n	2b10 <spi_write_buffer_wait+0x2e4>
				/* Start timeout period for slave */
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    2ab6:	2300      	movs	r3, #0
    2ab8:	617b      	str	r3, [r7, #20]
    2aba:	e008      	b.n	2ace <spi_write_buffer_wait+0x2a2>
					if (spi_is_ready_to_read(module)) {
    2abc:	68fb      	ldr	r3, [r7, #12]
    2abe:	0018      	movs	r0, r3
    2ac0:	4b1d      	ldr	r3, [pc, #116]	; (2b38 <spi_write_buffer_wait+0x30c>)
    2ac2:	4798      	blx	r3
    2ac4:	1e03      	subs	r3, r0, #0
    2ac6:	d107      	bne.n	2ad8 <spi_write_buffer_wait+0x2ac>
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    2ac8:	697b      	ldr	r3, [r7, #20]
    2aca:	3301      	adds	r3, #1
    2acc:	617b      	str	r3, [r7, #20]
    2ace:	697b      	ldr	r3, [r7, #20]
    2ad0:	4a17      	ldr	r2, [pc, #92]	; (2b30 <spi_write_buffer_wait+0x304>)
    2ad2:	4293      	cmp	r3, r2
    2ad4:	d9f2      	bls.n	2abc <spi_write_buffer_wait+0x290>
    2ad6:	e000      	b.n	2ada <spi_write_buffer_wait+0x2ae>
						break;
    2ad8:	46c0      	nop			; (mov r8, r8)
					}
				}
				if (!spi_is_ready_to_read(module)) {
    2ada:	68fb      	ldr	r3, [r7, #12]
    2adc:	0018      	movs	r0, r3
    2ade:	4b16      	ldr	r3, [pc, #88]	; (2b38 <spi_write_buffer_wait+0x30c>)
    2ae0:	4798      	blx	r3
    2ae2:	0003      	movs	r3, r0
    2ae4:	001a      	movs	r2, r3
    2ae6:	2301      	movs	r3, #1
    2ae8:	4053      	eors	r3, r2
    2aea:	b2db      	uxtb	r3, r3
    2aec:	2b00      	cmp	r3, #0
    2aee:	d001      	beq.n	2af4 <spi_write_buffer_wait+0x2c8>
					/* Not ready to read data within timeout period */
					return STATUS_ERR_TIMEOUT;
    2af0:	2312      	movs	r3, #18
    2af2:	e013      	b.n	2b1c <spi_write_buffer_wait+0x2f0>
				}
				/* Flush read buffer */
				uint16_t flush;
				spi_read(module, &flush);
    2af4:	2310      	movs	r3, #16
    2af6:	18fa      	adds	r2, r7, r3
    2af8:	68fb      	ldr	r3, [r7, #12]
    2afa:	0011      	movs	r1, r2
    2afc:	0018      	movs	r0, r3
    2afe:	4b0f      	ldr	r3, [pc, #60]	; (2b3c <spi_write_buffer_wait+0x310>)
    2b00:	4798      	blx	r3
				flush_length--;
    2b02:	2324      	movs	r3, #36	; 0x24
    2b04:	18fb      	adds	r3, r7, r3
    2b06:	881a      	ldrh	r2, [r3, #0]
    2b08:	2324      	movs	r3, #36	; 0x24
    2b0a:	18fb      	adds	r3, r7, r3
    2b0c:	3a01      	subs	r2, #1
    2b0e:	801a      	strh	r2, [r3, #0]
			while (flush_length) {
    2b10:	2324      	movs	r3, #36	; 0x24
    2b12:	18fb      	adds	r3, r7, r3
    2b14:	881b      	ldrh	r3, [r3, #0]
    2b16:	2b00      	cmp	r3, #0
    2b18:	d1cd      	bne.n	2ab6 <spi_write_buffer_wait+0x28a>
			}
		}
	}
#  endif
	return STATUS_OK;
    2b1a:	2300      	movs	r3, #0
}
    2b1c:	0018      	movs	r0, r3
    2b1e:	46bd      	mov	sp, r7
    2b20:	b00a      	add	sp, #40	; 0x28
    2b22:	bd80      	pop	{r7, pc}
    2b24:	00001ea1 	.word	0x00001ea1
    2b28:	00001fe9 	.word	0x00001fe9
    2b2c:	00001ec9 	.word	0x00001ec9
    2b30:	00002710 	.word	0x00002710
    2b34:	00001f19 	.word	0x00001f19
    2b38:	00001ef1 	.word	0x00001ef1
    2b3c:	00001f61 	.word	0x00001f61

00002b40 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
    2b40:	b580      	push	{r7, lr}
    2b42:	b084      	sub	sp, #16
    2b44:	af00      	add	r7, sp, #0
    2b46:	0002      	movs	r2, r0
    2b48:	1dfb      	adds	r3, r7, #7
    2b4a:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    2b4c:	230f      	movs	r3, #15
    2b4e:	18fb      	adds	r3, r7, r3
    2b50:	1dfa      	adds	r2, r7, #7
    2b52:	7812      	ldrb	r2, [r2, #0]
    2b54:	0952      	lsrs	r2, r2, #5
    2b56:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
    2b58:	230f      	movs	r3, #15
    2b5a:	18fb      	adds	r3, r7, r3
    2b5c:	781b      	ldrb	r3, [r3, #0]
    2b5e:	2b00      	cmp	r3, #0
    2b60:	d10c      	bne.n	2b7c <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    2b62:	4b09      	ldr	r3, [pc, #36]	; (2b88 <_extint_get_eic_from_channel+0x48>)
    2b64:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
    2b66:	230f      	movs	r3, #15
    2b68:	18fb      	adds	r3, r7, r3
    2b6a:	781b      	ldrb	r3, [r3, #0]
    2b6c:	009b      	lsls	r3, r3, #2
    2b6e:	2210      	movs	r2, #16
    2b70:	4694      	mov	ip, r2
    2b72:	44bc      	add	ip, r7
    2b74:	4463      	add	r3, ip
    2b76:	3b08      	subs	r3, #8
    2b78:	681b      	ldr	r3, [r3, #0]
    2b7a:	e000      	b.n	2b7e <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
    2b7c:	2300      	movs	r3, #0
	}
}
    2b7e:	0018      	movs	r0, r3
    2b80:	46bd      	mov	sp, r7
    2b82:	b004      	add	sp, #16
    2b84:	bd80      	pop	{r7, pc}
    2b86:	46c0      	nop			; (mov r8, r8)
    2b88:	40001800 	.word	0x40001800

00002b8c <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
    2b8c:	b580      	push	{r7, lr}
    2b8e:	b084      	sub	sp, #16
    2b90:	af00      	add	r7, sp, #0
    2b92:	0002      	movs	r2, r0
    2b94:	1dfb      	adds	r3, r7, #7
    2b96:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    2b98:	1dfb      	adds	r3, r7, #7
    2b9a:	781b      	ldrb	r3, [r3, #0]
    2b9c:	0018      	movs	r0, r3
    2b9e:	4b0b      	ldr	r3, [pc, #44]	; (2bcc <extint_chan_is_detected+0x40>)
    2ba0:	4798      	blx	r3
    2ba2:	0003      	movs	r3, r0
    2ba4:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    2ba6:	1dfb      	adds	r3, r7, #7
    2ba8:	781b      	ldrb	r3, [r3, #0]
    2baa:	221f      	movs	r2, #31
    2bac:	4013      	ands	r3, r2
    2bae:	2201      	movs	r2, #1
    2bb0:	409a      	lsls	r2, r3
    2bb2:	0013      	movs	r3, r2
    2bb4:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
    2bb6:	68fb      	ldr	r3, [r7, #12]
    2bb8:	691b      	ldr	r3, [r3, #16]
    2bba:	68ba      	ldr	r2, [r7, #8]
    2bbc:	4013      	ands	r3, r2
    2bbe:	1e5a      	subs	r2, r3, #1
    2bc0:	4193      	sbcs	r3, r2
    2bc2:	b2db      	uxtb	r3, r3
}
    2bc4:	0018      	movs	r0, r3
    2bc6:	46bd      	mov	sp, r7
    2bc8:	b004      	add	sp, #16
    2bca:	bd80      	pop	{r7, pc}
    2bcc:	00002b41 	.word	0x00002b41

00002bd0 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
    2bd0:	b580      	push	{r7, lr}
    2bd2:	b084      	sub	sp, #16
    2bd4:	af00      	add	r7, sp, #0
    2bd6:	0002      	movs	r2, r0
    2bd8:	1dfb      	adds	r3, r7, #7
    2bda:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    2bdc:	1dfb      	adds	r3, r7, #7
    2bde:	781b      	ldrb	r3, [r3, #0]
    2be0:	0018      	movs	r0, r3
    2be2:	4b09      	ldr	r3, [pc, #36]	; (2c08 <extint_chan_clear_detected+0x38>)
    2be4:	4798      	blx	r3
    2be6:	0003      	movs	r3, r0
    2be8:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    2bea:	1dfb      	adds	r3, r7, #7
    2bec:	781b      	ldrb	r3, [r3, #0]
    2bee:	221f      	movs	r2, #31
    2bf0:	4013      	ands	r3, r2
    2bf2:	2201      	movs	r2, #1
    2bf4:	409a      	lsls	r2, r3
    2bf6:	0013      	movs	r3, r2
    2bf8:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
    2bfa:	68fb      	ldr	r3, [r7, #12]
    2bfc:	68ba      	ldr	r2, [r7, #8]
    2bfe:	611a      	str	r2, [r3, #16]
}
    2c00:	46c0      	nop			; (mov r8, r8)
    2c02:	46bd      	mov	sp, r7
    2c04:	b004      	add	sp, #16
    2c06:	bd80      	pop	{r7, pc}
    2c08:	00002b41 	.word	0x00002b41

00002c0c <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    2c0c:	b580      	push	{r7, lr}
    2c0e:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    2c10:	4b15      	ldr	r3, [pc, #84]	; (2c68 <EIC_Handler+0x5c>)
    2c12:	2200      	movs	r2, #0
    2c14:	701a      	strb	r2, [r3, #0]
    2c16:	e020      	b.n	2c5a <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
    2c18:	4b13      	ldr	r3, [pc, #76]	; (2c68 <EIC_Handler+0x5c>)
    2c1a:	781b      	ldrb	r3, [r3, #0]
    2c1c:	0018      	movs	r0, r3
    2c1e:	4b13      	ldr	r3, [pc, #76]	; (2c6c <EIC_Handler+0x60>)
    2c20:	4798      	blx	r3
    2c22:	1e03      	subs	r3, r0, #0
    2c24:	d013      	beq.n	2c4e <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
    2c26:	4b10      	ldr	r3, [pc, #64]	; (2c68 <EIC_Handler+0x5c>)
    2c28:	781b      	ldrb	r3, [r3, #0]
    2c2a:	0018      	movs	r0, r3
    2c2c:	4b10      	ldr	r3, [pc, #64]	; (2c70 <EIC_Handler+0x64>)
    2c2e:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    2c30:	4b0d      	ldr	r3, [pc, #52]	; (2c68 <EIC_Handler+0x5c>)
    2c32:	781b      	ldrb	r3, [r3, #0]
    2c34:	001a      	movs	r2, r3
    2c36:	4b0f      	ldr	r3, [pc, #60]	; (2c74 <EIC_Handler+0x68>)
    2c38:	0092      	lsls	r2, r2, #2
    2c3a:	58d3      	ldr	r3, [r2, r3]
    2c3c:	2b00      	cmp	r3, #0
    2c3e:	d006      	beq.n	2c4e <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    2c40:	4b09      	ldr	r3, [pc, #36]	; (2c68 <EIC_Handler+0x5c>)
    2c42:	781b      	ldrb	r3, [r3, #0]
    2c44:	001a      	movs	r2, r3
    2c46:	4b0b      	ldr	r3, [pc, #44]	; (2c74 <EIC_Handler+0x68>)
    2c48:	0092      	lsls	r2, r2, #2
    2c4a:	58d3      	ldr	r3, [r2, r3]
    2c4c:	4798      	blx	r3
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    2c4e:	4b06      	ldr	r3, [pc, #24]	; (2c68 <EIC_Handler+0x5c>)
    2c50:	781b      	ldrb	r3, [r3, #0]
    2c52:	3301      	adds	r3, #1
    2c54:	b2da      	uxtb	r2, r3
    2c56:	4b04      	ldr	r3, [pc, #16]	; (2c68 <EIC_Handler+0x5c>)
    2c58:	701a      	strb	r2, [r3, #0]
    2c5a:	4b03      	ldr	r3, [pc, #12]	; (2c68 <EIC_Handler+0x5c>)
    2c5c:	781b      	ldrb	r3, [r3, #0]
    2c5e:	2b0f      	cmp	r3, #15
    2c60:	d9da      	bls.n	2c18 <EIC_Handler+0xc>
			}
		}
	}
}
    2c62:	46c0      	nop			; (mov r8, r8)
    2c64:	46bd      	mov	sp, r7
    2c66:	bd80      	pop	{r7, pc}
    2c68:	20000170 	.word	0x20000170
    2c6c:	00002b8d 	.word	0x00002b8d
    2c70:	00002bd1 	.word	0x00002bd1
    2c74:	200000c4 	.word	0x200000c4

00002c78 <system_pinmux_get_config_defaults>:
{
    2c78:	b580      	push	{r7, lr}
    2c7a:	b082      	sub	sp, #8
    2c7c:	af00      	add	r7, sp, #0
    2c7e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    2c80:	687b      	ldr	r3, [r7, #4]
    2c82:	2280      	movs	r2, #128	; 0x80
    2c84:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2c86:	687b      	ldr	r3, [r7, #4]
    2c88:	2200      	movs	r2, #0
    2c8a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    2c8c:	687b      	ldr	r3, [r7, #4]
    2c8e:	2201      	movs	r2, #1
    2c90:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    2c92:	687b      	ldr	r3, [r7, #4]
    2c94:	2200      	movs	r2, #0
    2c96:	70da      	strb	r2, [r3, #3]
}
    2c98:	46c0      	nop			; (mov r8, r8)
    2c9a:	46bd      	mov	sp, r7
    2c9c:	b002      	add	sp, #8
    2c9e:	bd80      	pop	{r7, pc}

00002ca0 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    2ca0:	b580      	push	{r7, lr}
    2ca2:	b084      	sub	sp, #16
    2ca4:	af00      	add	r7, sp, #0
    2ca6:	0002      	movs	r2, r0
    2ca8:	6039      	str	r1, [r7, #0]
    2caa:	1dfb      	adds	r3, r7, #7
    2cac:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    2cae:	230c      	movs	r3, #12
    2cb0:	18fb      	adds	r3, r7, r3
    2cb2:	0018      	movs	r0, r3
    2cb4:	4b10      	ldr	r3, [pc, #64]	; (2cf8 <port_pin_set_config+0x58>)
    2cb6:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
    2cb8:	230c      	movs	r3, #12
    2cba:	18fb      	adds	r3, r7, r3
    2cbc:	2280      	movs	r2, #128	; 0x80
    2cbe:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    2cc0:	683b      	ldr	r3, [r7, #0]
    2cc2:	781a      	ldrb	r2, [r3, #0]
    2cc4:	230c      	movs	r3, #12
    2cc6:	18fb      	adds	r3, r7, r3
    2cc8:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    2cca:	683b      	ldr	r3, [r7, #0]
    2ccc:	785a      	ldrb	r2, [r3, #1]
    2cce:	230c      	movs	r3, #12
    2cd0:	18fb      	adds	r3, r7, r3
    2cd2:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    2cd4:	683b      	ldr	r3, [r7, #0]
    2cd6:	789a      	ldrb	r2, [r3, #2]
    2cd8:	230c      	movs	r3, #12
    2cda:	18fb      	adds	r3, r7, r3
    2cdc:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    2cde:	230c      	movs	r3, #12
    2ce0:	18fa      	adds	r2, r7, r3
    2ce2:	1dfb      	adds	r3, r7, #7
    2ce4:	781b      	ldrb	r3, [r3, #0]
    2ce6:	0011      	movs	r1, r2
    2ce8:	0018      	movs	r0, r3
    2cea:	4b04      	ldr	r3, [pc, #16]	; (2cfc <port_pin_set_config+0x5c>)
    2cec:	4798      	blx	r3
}
    2cee:	46c0      	nop			; (mov r8, r8)
    2cf0:	46bd      	mov	sp, r7
    2cf2:	b004      	add	sp, #16
    2cf4:	bd80      	pop	{r7, pc}
    2cf6:	46c0      	nop			; (mov r8, r8)
    2cf8:	00002c79 	.word	0x00002c79
    2cfc:	00003801 	.word	0x00003801

00002d00 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    2d00:	b580      	push	{r7, lr}
    2d02:	af00      	add	r7, sp, #0
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    2d04:	46c0      	nop			; (mov r8, r8)
    2d06:	46bd      	mov	sp, r7
    2d08:	bd80      	pop	{r7, pc}
	...

00002d0c <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    2d0c:	b580      	push	{r7, lr}
    2d0e:	b082      	sub	sp, #8
    2d10:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    2d12:	4b10      	ldr	r3, [pc, #64]	; (2d54 <cpu_irq_enter_critical+0x48>)
    2d14:	681b      	ldr	r3, [r3, #0]
    2d16:	2b00      	cmp	r3, #0
    2d18:	d112      	bne.n	2d40 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2d1a:	f3ef 8310 	mrs	r3, PRIMASK
    2d1e:	607b      	str	r3, [r7, #4]
  return(result);
    2d20:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    2d22:	2b00      	cmp	r3, #0
    2d24:	d109      	bne.n	2d3a <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
    2d26:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    2d28:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    2d2c:	4b0a      	ldr	r3, [pc, #40]	; (2d58 <cpu_irq_enter_critical+0x4c>)
    2d2e:	2200      	movs	r2, #0
    2d30:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    2d32:	4b0a      	ldr	r3, [pc, #40]	; (2d5c <cpu_irq_enter_critical+0x50>)
    2d34:	2201      	movs	r2, #1
    2d36:	701a      	strb	r2, [r3, #0]
    2d38:	e002      	b.n	2d40 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    2d3a:	4b08      	ldr	r3, [pc, #32]	; (2d5c <cpu_irq_enter_critical+0x50>)
    2d3c:	2200      	movs	r2, #0
    2d3e:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    2d40:	4b04      	ldr	r3, [pc, #16]	; (2d54 <cpu_irq_enter_critical+0x48>)
    2d42:	681b      	ldr	r3, [r3, #0]
    2d44:	1c5a      	adds	r2, r3, #1
    2d46:	4b03      	ldr	r3, [pc, #12]	; (2d54 <cpu_irq_enter_critical+0x48>)
    2d48:	601a      	str	r2, [r3, #0]
}
    2d4a:	46c0      	nop			; (mov r8, r8)
    2d4c:	46bd      	mov	sp, r7
    2d4e:	b002      	add	sp, #8
    2d50:	bd80      	pop	{r7, pc}
    2d52:	46c0      	nop			; (mov r8, r8)
    2d54:	200000a4 	.word	0x200000a4
    2d58:	20000008 	.word	0x20000008
    2d5c:	200000a8 	.word	0x200000a8

00002d60 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    2d60:	b580      	push	{r7, lr}
    2d62:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    2d64:	4b0b      	ldr	r3, [pc, #44]	; (2d94 <cpu_irq_leave_critical+0x34>)
    2d66:	681b      	ldr	r3, [r3, #0]
    2d68:	1e5a      	subs	r2, r3, #1
    2d6a:	4b0a      	ldr	r3, [pc, #40]	; (2d94 <cpu_irq_leave_critical+0x34>)
    2d6c:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    2d6e:	4b09      	ldr	r3, [pc, #36]	; (2d94 <cpu_irq_leave_critical+0x34>)
    2d70:	681b      	ldr	r3, [r3, #0]
    2d72:	2b00      	cmp	r3, #0
    2d74:	d10a      	bne.n	2d8c <cpu_irq_leave_critical+0x2c>
    2d76:	4b08      	ldr	r3, [pc, #32]	; (2d98 <cpu_irq_leave_critical+0x38>)
    2d78:	781b      	ldrb	r3, [r3, #0]
    2d7a:	b2db      	uxtb	r3, r3
    2d7c:	2b00      	cmp	r3, #0
    2d7e:	d005      	beq.n	2d8c <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    2d80:	4b06      	ldr	r3, [pc, #24]	; (2d9c <cpu_irq_leave_critical+0x3c>)
    2d82:	2201      	movs	r2, #1
    2d84:	701a      	strb	r2, [r3, #0]
    2d86:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2d8a:	b662      	cpsie	i
	}
}
    2d8c:	46c0      	nop			; (mov r8, r8)
    2d8e:	46bd      	mov	sp, r7
    2d90:	bd80      	pop	{r7, pc}
    2d92:	46c0      	nop			; (mov r8, r8)
    2d94:	200000a4 	.word	0x200000a4
    2d98:	200000a8 	.word	0x200000a8
    2d9c:	20000008 	.word	0x20000008

00002da0 <system_gclk_gen_get_config_defaults>:
{
    2da0:	b580      	push	{r7, lr}
    2da2:	b082      	sub	sp, #8
    2da4:	af00      	add	r7, sp, #0
    2da6:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
    2da8:	687b      	ldr	r3, [r7, #4]
    2daa:	2201      	movs	r2, #1
    2dac:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    2dae:	687b      	ldr	r3, [r7, #4]
    2db0:	2200      	movs	r2, #0
    2db2:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    2db4:	687b      	ldr	r3, [r7, #4]
    2db6:	2206      	movs	r2, #6
    2db8:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
    2dba:	687b      	ldr	r3, [r7, #4]
    2dbc:	2200      	movs	r2, #0
    2dbe:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    2dc0:	687b      	ldr	r3, [r7, #4]
    2dc2:	2200      	movs	r2, #0
    2dc4:	725a      	strb	r2, [r3, #9]
}
    2dc6:	46c0      	nop			; (mov r8, r8)
    2dc8:	46bd      	mov	sp, r7
    2dca:	b002      	add	sp, #8
    2dcc:	bd80      	pop	{r7, pc}

00002dce <system_clock_source_osc8m_get_config_defaults>:
{
    2dce:	b580      	push	{r7, lr}
    2dd0:	b082      	sub	sp, #8
    2dd2:	af00      	add	r7, sp, #0
    2dd4:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    2dd6:	687b      	ldr	r3, [r7, #4]
    2dd8:	2203      	movs	r2, #3
    2dda:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    2ddc:	687b      	ldr	r3, [r7, #4]
    2dde:	2200      	movs	r2, #0
    2de0:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    2de2:	687b      	ldr	r3, [r7, #4]
    2de4:	2201      	movs	r2, #1
    2de6:	709a      	strb	r2, [r3, #2]
}
    2de8:	46c0      	nop			; (mov r8, r8)
    2dea:	46bd      	mov	sp, r7
    2dec:	b002      	add	sp, #8
    2dee:	bd80      	pop	{r7, pc}

00002df0 <system_cpu_clock_set_divider>:
{
    2df0:	b580      	push	{r7, lr}
    2df2:	b082      	sub	sp, #8
    2df4:	af00      	add	r7, sp, #0
    2df6:	0002      	movs	r2, r0
    2df8:	1dfb      	adds	r3, r7, #7
    2dfa:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
    2dfc:	4a03      	ldr	r2, [pc, #12]	; (2e0c <system_cpu_clock_set_divider+0x1c>)
    2dfe:	1dfb      	adds	r3, r7, #7
    2e00:	781b      	ldrb	r3, [r3, #0]
    2e02:	7213      	strb	r3, [r2, #8]
}
    2e04:	46c0      	nop			; (mov r8, r8)
    2e06:	46bd      	mov	sp, r7
    2e08:	b002      	add	sp, #8
    2e0a:	bd80      	pop	{r7, pc}
    2e0c:	40000400 	.word	0x40000400

00002e10 <system_apb_clock_set_divider>:
{
    2e10:	b580      	push	{r7, lr}
    2e12:	b082      	sub	sp, #8
    2e14:	af00      	add	r7, sp, #0
    2e16:	0002      	movs	r2, r0
    2e18:	1dfb      	adds	r3, r7, #7
    2e1a:	701a      	strb	r2, [r3, #0]
    2e1c:	1dbb      	adds	r3, r7, #6
    2e1e:	1c0a      	adds	r2, r1, #0
    2e20:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    2e22:	1dfb      	adds	r3, r7, #7
    2e24:	781b      	ldrb	r3, [r3, #0]
    2e26:	2b01      	cmp	r3, #1
    2e28:	d008      	beq.n	2e3c <system_apb_clock_set_divider+0x2c>
    2e2a:	2b02      	cmp	r3, #2
    2e2c:	d00b      	beq.n	2e46 <system_apb_clock_set_divider+0x36>
    2e2e:	2b00      	cmp	r3, #0
    2e30:	d10e      	bne.n	2e50 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
    2e32:	4a0b      	ldr	r2, [pc, #44]	; (2e60 <system_apb_clock_set_divider+0x50>)
    2e34:	1dbb      	adds	r3, r7, #6
    2e36:	781b      	ldrb	r3, [r3, #0]
    2e38:	7253      	strb	r3, [r2, #9]
			break;
    2e3a:	e00b      	b.n	2e54 <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
    2e3c:	4a08      	ldr	r2, [pc, #32]	; (2e60 <system_apb_clock_set_divider+0x50>)
    2e3e:	1dbb      	adds	r3, r7, #6
    2e40:	781b      	ldrb	r3, [r3, #0]
    2e42:	7293      	strb	r3, [r2, #10]
			break;
    2e44:	e006      	b.n	2e54 <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
    2e46:	4a06      	ldr	r2, [pc, #24]	; (2e60 <system_apb_clock_set_divider+0x50>)
    2e48:	1dbb      	adds	r3, r7, #6
    2e4a:	781b      	ldrb	r3, [r3, #0]
    2e4c:	72d3      	strb	r3, [r2, #11]
			break;
    2e4e:	e001      	b.n	2e54 <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
    2e50:	2317      	movs	r3, #23
    2e52:	e000      	b.n	2e56 <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
    2e54:	2300      	movs	r3, #0
}
    2e56:	0018      	movs	r0, r3
    2e58:	46bd      	mov	sp, r7
    2e5a:	b002      	add	sp, #8
    2e5c:	bd80      	pop	{r7, pc}
    2e5e:	46c0      	nop			; (mov r8, r8)
    2e60:	40000400 	.word	0x40000400

00002e64 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    2e64:	b580      	push	{r7, lr}
    2e66:	b082      	sub	sp, #8
    2e68:	af00      	add	r7, sp, #0
    2e6a:	0002      	movs	r2, r0
    2e6c:	1dfb      	adds	r3, r7, #7
    2e6e:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    2e70:	4a08      	ldr	r2, [pc, #32]	; (2e94 <system_flash_set_waitstates+0x30>)
    2e72:	1dfb      	adds	r3, r7, #7
    2e74:	781b      	ldrb	r3, [r3, #0]
    2e76:	210f      	movs	r1, #15
    2e78:	400b      	ands	r3, r1
    2e7a:	b2d9      	uxtb	r1, r3
    2e7c:	6853      	ldr	r3, [r2, #4]
    2e7e:	200f      	movs	r0, #15
    2e80:	4001      	ands	r1, r0
    2e82:	0049      	lsls	r1, r1, #1
    2e84:	201e      	movs	r0, #30
    2e86:	4383      	bics	r3, r0
    2e88:	430b      	orrs	r3, r1
    2e8a:	6053      	str	r3, [r2, #4]
}
    2e8c:	46c0      	nop			; (mov r8, r8)
    2e8e:	46bd      	mov	sp, r7
    2e90:	b002      	add	sp, #8
    2e92:	bd80      	pop	{r7, pc}
    2e94:	41004000 	.word	0x41004000

00002e98 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    2e98:	b580      	push	{r7, lr}
    2e9a:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2e9c:	46c0      	nop			; (mov r8, r8)
    2e9e:	4b04      	ldr	r3, [pc, #16]	; (2eb0 <_system_dfll_wait_for_sync+0x18>)
    2ea0:	68db      	ldr	r3, [r3, #12]
    2ea2:	2210      	movs	r2, #16
    2ea4:	4013      	ands	r3, r2
    2ea6:	d0fa      	beq.n	2e9e <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    2ea8:	46c0      	nop			; (mov r8, r8)
    2eaa:	46bd      	mov	sp, r7
    2eac:	bd80      	pop	{r7, pc}
    2eae:	46c0      	nop			; (mov r8, r8)
    2eb0:	40000800 	.word	0x40000800

00002eb4 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    2eb4:	b580      	push	{r7, lr}
    2eb6:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    2eb8:	4b0c      	ldr	r3, [pc, #48]	; (2eec <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    2eba:	2202      	movs	r2, #2
    2ebc:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    2ebe:	4b0c      	ldr	r3, [pc, #48]	; (2ef0 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    2ec0:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    2ec2:	4a0a      	ldr	r2, [pc, #40]	; (2eec <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    2ec4:	4b0b      	ldr	r3, [pc, #44]	; (2ef4 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    2ec6:	689b      	ldr	r3, [r3, #8]
    2ec8:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    2eca:	4a08      	ldr	r2, [pc, #32]	; (2eec <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    2ecc:	4b09      	ldr	r3, [pc, #36]	; (2ef4 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    2ece:	685b      	ldr	r3, [r3, #4]
    2ed0:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    2ed2:	4b06      	ldr	r3, [pc, #24]	; (2eec <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    2ed4:	2200      	movs	r2, #0
    2ed6:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    2ed8:	4b05      	ldr	r3, [pc, #20]	; (2ef0 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    2eda:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    2edc:	4a03      	ldr	r2, [pc, #12]	; (2eec <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    2ede:	4b05      	ldr	r3, [pc, #20]	; (2ef4 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    2ee0:	681b      	ldr	r3, [r3, #0]
    2ee2:	b29b      	uxth	r3, r3
    2ee4:	8493      	strh	r3, [r2, #36]	; 0x24
}
    2ee6:	46c0      	nop			; (mov r8, r8)
    2ee8:	46bd      	mov	sp, r7
    2eea:	bd80      	pop	{r7, pc}
    2eec:	40000800 	.word	0x40000800
    2ef0:	00002e99 	.word	0x00002e99
    2ef4:	200000ac 	.word	0x200000ac

00002ef8 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    2ef8:	b580      	push	{r7, lr}
    2efa:	b082      	sub	sp, #8
    2efc:	af00      	add	r7, sp, #0
    2efe:	0002      	movs	r2, r0
    2f00:	1dfb      	adds	r3, r7, #7
    2f02:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    2f04:	1dfb      	adds	r3, r7, #7
    2f06:	781b      	ldrb	r3, [r3, #0]
    2f08:	2b08      	cmp	r3, #8
    2f0a:	d841      	bhi.n	2f90 <system_clock_source_get_hz+0x98>
    2f0c:	009a      	lsls	r2, r3, #2
    2f0e:	4b23      	ldr	r3, [pc, #140]	; (2f9c <system_clock_source_get_hz+0xa4>)
    2f10:	18d3      	adds	r3, r2, r3
    2f12:	681b      	ldr	r3, [r3, #0]
    2f14:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    2f16:	4b22      	ldr	r3, [pc, #136]	; (2fa0 <system_clock_source_get_hz+0xa8>)
    2f18:	691b      	ldr	r3, [r3, #16]
    2f1a:	e03a      	b.n	2f92 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    2f1c:	4b21      	ldr	r3, [pc, #132]	; (2fa4 <system_clock_source_get_hz+0xac>)
    2f1e:	6a1b      	ldr	r3, [r3, #32]
    2f20:	059b      	lsls	r3, r3, #22
    2f22:	0f9b      	lsrs	r3, r3, #30
    2f24:	b2db      	uxtb	r3, r3
    2f26:	001a      	movs	r2, r3
    2f28:	4b1f      	ldr	r3, [pc, #124]	; (2fa8 <system_clock_source_get_hz+0xb0>)
    2f2a:	40d3      	lsrs	r3, r2
    2f2c:	e031      	b.n	2f92 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    2f2e:	2380      	movs	r3, #128	; 0x80
    2f30:	021b      	lsls	r3, r3, #8
    2f32:	e02e      	b.n	2f92 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    2f34:	2380      	movs	r3, #128	; 0x80
    2f36:	021b      	lsls	r3, r3, #8
    2f38:	e02b      	b.n	2f92 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    2f3a:	4b19      	ldr	r3, [pc, #100]	; (2fa0 <system_clock_source_get_hz+0xa8>)
    2f3c:	695b      	ldr	r3, [r3, #20]
    2f3e:	e028      	b.n	2f92 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    2f40:	4b17      	ldr	r3, [pc, #92]	; (2fa0 <system_clock_source_get_hz+0xa8>)
    2f42:	681b      	ldr	r3, [r3, #0]
    2f44:	2202      	movs	r2, #2
    2f46:	4013      	ands	r3, r2
    2f48:	d101      	bne.n	2f4e <system_clock_source_get_hz+0x56>
			return 0;
    2f4a:	2300      	movs	r3, #0
    2f4c:	e021      	b.n	2f92 <system_clock_source_get_hz+0x9a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    2f4e:	4b17      	ldr	r3, [pc, #92]	; (2fac <system_clock_source_get_hz+0xb4>)
    2f50:	4798      	blx	r3

		/* Check if operating in closed loop (USB) mode */
		switch(_system_clock_inst.dfll.control &
    2f52:	4b13      	ldr	r3, [pc, #76]	; (2fa0 <system_clock_source_get_hz+0xa8>)
    2f54:	681b      	ldr	r3, [r3, #0]
    2f56:	2224      	movs	r2, #36	; 0x24
    2f58:	4013      	ands	r3, r2
    2f5a:	2b04      	cmp	r3, #4
    2f5c:	d109      	bne.n	2f72 <system_clock_source_get_hz+0x7a>
				(SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_USBCRM)) {
		case SYSCTRL_DFLLCTRL_MODE:
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2f5e:	2000      	movs	r0, #0
    2f60:	4b13      	ldr	r3, [pc, #76]	; (2fb0 <system_clock_source_get_hz+0xb8>)
    2f62:	4798      	blx	r3
    2f64:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    2f66:	4b0e      	ldr	r3, [pc, #56]	; (2fa0 <system_clock_source_get_hz+0xa8>)
    2f68:	689b      	ldr	r3, [r3, #8]
    2f6a:	041b      	lsls	r3, r3, #16
    2f6c:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2f6e:	4353      	muls	r3, r2
    2f70:	e00f      	b.n	2f92 <system_clock_source_get_hz+0x9a>
		default:
			return 48000000UL;
    2f72:	4b10      	ldr	r3, [pc, #64]	; (2fb4 <system_clock_source_get_hz+0xbc>)
    2f74:	e00d      	b.n	2f92 <system_clock_source_get_hz+0x9a>
		}

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    2f76:	4a0b      	ldr	r2, [pc, #44]	; (2fa4 <system_clock_source_get_hz+0xac>)
    2f78:	2350      	movs	r3, #80	; 0x50
    2f7a:	5cd3      	ldrb	r3, [r2, r3]
    2f7c:	b2db      	uxtb	r3, r3
    2f7e:	001a      	movs	r2, r3
    2f80:	2304      	movs	r3, #4
    2f82:	4013      	ands	r3, r2
    2f84:	d101      	bne.n	2f8a <system_clock_source_get_hz+0x92>
			return 0;
    2f86:	2300      	movs	r3, #0
    2f88:	e003      	b.n	2f92 <system_clock_source_get_hz+0x9a>
		}

		return _system_clock_inst.dpll.frequency;
    2f8a:	4b05      	ldr	r3, [pc, #20]	; (2fa0 <system_clock_source_get_hz+0xa8>)
    2f8c:	68db      	ldr	r3, [r3, #12]
    2f8e:	e000      	b.n	2f92 <system_clock_source_get_hz+0x9a>
#endif

	default:
		return 0;
    2f90:	2300      	movs	r3, #0
	}
}
    2f92:	0018      	movs	r0, r3
    2f94:	46bd      	mov	sp, r7
    2f96:	b002      	add	sp, #8
    2f98:	bd80      	pop	{r7, pc}
    2f9a:	46c0      	nop			; (mov r8, r8)
    2f9c:	000073fc 	.word	0x000073fc
    2fa0:	200000ac 	.word	0x200000ac
    2fa4:	40000800 	.word	0x40000800
    2fa8:	007a1200 	.word	0x007a1200
    2fac:	00002e99 	.word	0x00002e99
    2fb0:	00003639 	.word	0x00003639
    2fb4:	02dc6c00 	.word	0x02dc6c00

00002fb8 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    2fb8:	b580      	push	{r7, lr}
    2fba:	b084      	sub	sp, #16
    2fbc:	af00      	add	r7, sp, #0
    2fbe:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    2fc0:	4b1a      	ldr	r3, [pc, #104]	; (302c <system_clock_source_osc8m_set_config+0x74>)
    2fc2:	6a1b      	ldr	r3, [r3, #32]
    2fc4:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    2fc6:	687b      	ldr	r3, [r7, #4]
    2fc8:	781b      	ldrb	r3, [r3, #0]
    2fca:	1c1a      	adds	r2, r3, #0
    2fcc:	2303      	movs	r3, #3
    2fce:	4013      	ands	r3, r2
    2fd0:	b2da      	uxtb	r2, r3
    2fd2:	230d      	movs	r3, #13
    2fd4:	18fb      	adds	r3, r7, r3
    2fd6:	2103      	movs	r1, #3
    2fd8:	400a      	ands	r2, r1
    2fda:	0010      	movs	r0, r2
    2fdc:	781a      	ldrb	r2, [r3, #0]
    2fde:	2103      	movs	r1, #3
    2fe0:	438a      	bics	r2, r1
    2fe2:	1c11      	adds	r1, r2, #0
    2fe4:	1c02      	adds	r2, r0, #0
    2fe6:	430a      	orrs	r2, r1
    2fe8:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    2fea:	687b      	ldr	r3, [r7, #4]
    2fec:	789a      	ldrb	r2, [r3, #2]
    2fee:	230c      	movs	r3, #12
    2ff0:	18fb      	adds	r3, r7, r3
    2ff2:	01d0      	lsls	r0, r2, #7
    2ff4:	781a      	ldrb	r2, [r3, #0]
    2ff6:	217f      	movs	r1, #127	; 0x7f
    2ff8:	400a      	ands	r2, r1
    2ffa:	1c11      	adds	r1, r2, #0
    2ffc:	1c02      	adds	r2, r0, #0
    2ffe:	430a      	orrs	r2, r1
    3000:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    3002:	687b      	ldr	r3, [r7, #4]
    3004:	785a      	ldrb	r2, [r3, #1]
    3006:	230c      	movs	r3, #12
    3008:	18fb      	adds	r3, r7, r3
    300a:	2101      	movs	r1, #1
    300c:	400a      	ands	r2, r1
    300e:	0190      	lsls	r0, r2, #6
    3010:	781a      	ldrb	r2, [r3, #0]
    3012:	2140      	movs	r1, #64	; 0x40
    3014:	438a      	bics	r2, r1
    3016:	1c11      	adds	r1, r2, #0
    3018:	1c02      	adds	r2, r0, #0
    301a:	430a      	orrs	r2, r1
    301c:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    301e:	4b03      	ldr	r3, [pc, #12]	; (302c <system_clock_source_osc8m_set_config+0x74>)
    3020:	68fa      	ldr	r2, [r7, #12]
    3022:	621a      	str	r2, [r3, #32]
}
    3024:	46c0      	nop			; (mov r8, r8)
    3026:	46bd      	mov	sp, r7
    3028:	b004      	add	sp, #16
    302a:	bd80      	pop	{r7, pc}
    302c:	40000800 	.word	0x40000800

00003030 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    3030:	b580      	push	{r7, lr}
    3032:	b082      	sub	sp, #8
    3034:	af00      	add	r7, sp, #0
    3036:	0002      	movs	r2, r0
    3038:	1dfb      	adds	r3, r7, #7
    303a:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    303c:	1dfb      	adds	r3, r7, #7
    303e:	781b      	ldrb	r3, [r3, #0]
    3040:	2b08      	cmp	r3, #8
    3042:	d83b      	bhi.n	30bc <system_clock_source_enable+0x8c>
    3044:	009a      	lsls	r2, r3, #2
    3046:	4b21      	ldr	r3, [pc, #132]	; (30cc <system_clock_source_enable+0x9c>)
    3048:	18d3      	adds	r3, r2, r3
    304a:	681b      	ldr	r3, [r3, #0]
    304c:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    304e:	4b20      	ldr	r3, [pc, #128]	; (30d0 <system_clock_source_enable+0xa0>)
    3050:	4a1f      	ldr	r2, [pc, #124]	; (30d0 <system_clock_source_enable+0xa0>)
    3052:	6a12      	ldr	r2, [r2, #32]
    3054:	2102      	movs	r1, #2
    3056:	430a      	orrs	r2, r1
    3058:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    305a:	2300      	movs	r3, #0
    305c:	e031      	b.n	30c2 <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    305e:	4b1c      	ldr	r3, [pc, #112]	; (30d0 <system_clock_source_enable+0xa0>)
    3060:	4a1b      	ldr	r2, [pc, #108]	; (30d0 <system_clock_source_enable+0xa0>)
    3062:	6992      	ldr	r2, [r2, #24]
    3064:	2102      	movs	r1, #2
    3066:	430a      	orrs	r2, r1
    3068:	619a      	str	r2, [r3, #24]
		break;
    306a:	e029      	b.n	30c0 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    306c:	4a18      	ldr	r2, [pc, #96]	; (30d0 <system_clock_source_enable+0xa0>)
    306e:	4b18      	ldr	r3, [pc, #96]	; (30d0 <system_clock_source_enable+0xa0>)
    3070:	8a1b      	ldrh	r3, [r3, #16]
    3072:	b29b      	uxth	r3, r3
    3074:	2102      	movs	r1, #2
    3076:	430b      	orrs	r3, r1
    3078:	b29b      	uxth	r3, r3
    307a:	8213      	strh	r3, [r2, #16]
		break;
    307c:	e020      	b.n	30c0 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    307e:	4a14      	ldr	r2, [pc, #80]	; (30d0 <system_clock_source_enable+0xa0>)
    3080:	4b13      	ldr	r3, [pc, #76]	; (30d0 <system_clock_source_enable+0xa0>)
    3082:	8a9b      	ldrh	r3, [r3, #20]
    3084:	b29b      	uxth	r3, r3
    3086:	2102      	movs	r1, #2
    3088:	430b      	orrs	r3, r1
    308a:	b29b      	uxth	r3, r3
    308c:	8293      	strh	r3, [r2, #20]
		break;
    308e:	e017      	b.n	30c0 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    3090:	4b10      	ldr	r3, [pc, #64]	; (30d4 <system_clock_source_enable+0xa4>)
    3092:	681b      	ldr	r3, [r3, #0]
    3094:	2202      	movs	r2, #2
    3096:	431a      	orrs	r2, r3
    3098:	4b0e      	ldr	r3, [pc, #56]	; (30d4 <system_clock_source_enable+0xa4>)
    309a:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    309c:	4b0e      	ldr	r3, [pc, #56]	; (30d8 <system_clock_source_enable+0xa8>)
    309e:	4798      	blx	r3
		break;
    30a0:	e00e      	b.n	30c0 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    30a2:	4a0b      	ldr	r2, [pc, #44]	; (30d0 <system_clock_source_enable+0xa0>)
    30a4:	490a      	ldr	r1, [pc, #40]	; (30d0 <system_clock_source_enable+0xa0>)
    30a6:	2344      	movs	r3, #68	; 0x44
    30a8:	5ccb      	ldrb	r3, [r1, r3]
    30aa:	b2db      	uxtb	r3, r3
    30ac:	2102      	movs	r1, #2
    30ae:	430b      	orrs	r3, r1
    30b0:	b2d9      	uxtb	r1, r3
    30b2:	2344      	movs	r3, #68	; 0x44
    30b4:	54d1      	strb	r1, [r2, r3]
		break;
    30b6:	e003      	b.n	30c0 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    30b8:	2300      	movs	r3, #0
    30ba:	e002      	b.n	30c2 <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    30bc:	2317      	movs	r3, #23
    30be:	e000      	b.n	30c2 <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    30c0:	2300      	movs	r3, #0
}
    30c2:	0018      	movs	r0, r3
    30c4:	46bd      	mov	sp, r7
    30c6:	b002      	add	sp, #8
    30c8:	bd80      	pop	{r7, pc}
    30ca:	46c0      	nop			; (mov r8, r8)
    30cc:	00007420 	.word	0x00007420
    30d0:	40000800 	.word	0x40000800
    30d4:	200000ac 	.word	0x200000ac
    30d8:	00002eb5 	.word	0x00002eb5

000030dc <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    30dc:	b580      	push	{r7, lr}
    30de:	b082      	sub	sp, #8
    30e0:	af00      	add	r7, sp, #0
	uint32_t gclk_id;
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    30e2:	003b      	movs	r3, r7
    30e4:	2201      	movs	r2, #1
    30e6:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    30e8:	2300      	movs	r3, #0
    30ea:	607b      	str	r3, [r7, #4]
    30ec:	e009      	b.n	3102 <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    30ee:	687b      	ldr	r3, [r7, #4]
    30f0:	b2db      	uxtb	r3, r3
    30f2:	003a      	movs	r2, r7
    30f4:	0011      	movs	r1, r2
    30f6:	0018      	movs	r0, r3
    30f8:	4b05      	ldr	r3, [pc, #20]	; (3110 <_switch_peripheral_gclk+0x34>)
    30fa:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    30fc:	687b      	ldr	r3, [r7, #4]
    30fe:	3301      	adds	r3, #1
    3100:	607b      	str	r3, [r7, #4]
    3102:	687b      	ldr	r3, [r7, #4]
    3104:	2b24      	cmp	r3, #36	; 0x24
    3106:	d9f2      	bls.n	30ee <_switch_peripheral_gclk+0x12>
	}
}
    3108:	46c0      	nop			; (mov r8, r8)
    310a:	46bd      	mov	sp, r7
    310c:	b002      	add	sp, #8
    310e:	bd80      	pop	{r7, pc}
    3110:	00003515 	.word	0x00003515

00003114 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    3114:	b580      	push	{r7, lr}
    3116:	b0a0      	sub	sp, #128	; 0x80
    3118:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    311a:	4b27      	ldr	r3, [pc, #156]	; (31b8 <system_clock_init+0xa4>)
    311c:	22c2      	movs	r2, #194	; 0xc2
    311e:	00d2      	lsls	r2, r2, #3
    3120:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    3122:	2000      	movs	r0, #0
    3124:	4b25      	ldr	r3, [pc, #148]	; (31bc <system_clock_init+0xa8>)
    3126:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    3128:	4b25      	ldr	r3, [pc, #148]	; (31c0 <system_clock_init+0xac>)
    312a:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    312c:	237c      	movs	r3, #124	; 0x7c
    312e:	18fb      	adds	r3, r7, r3
    3130:	0018      	movs	r0, r3
    3132:	4b24      	ldr	r3, [pc, #144]	; (31c4 <system_clock_init+0xb0>)
    3134:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    3136:	237c      	movs	r3, #124	; 0x7c
    3138:	18fb      	adds	r3, r7, r3
    313a:	2200      	movs	r2, #0
    313c:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    313e:	237c      	movs	r3, #124	; 0x7c
    3140:	18fb      	adds	r3, r7, r3
    3142:	2201      	movs	r2, #1
    3144:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    3146:	237c      	movs	r3, #124	; 0x7c
    3148:	18fb      	adds	r3, r7, r3
    314a:	2200      	movs	r2, #0
    314c:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    314e:	237c      	movs	r3, #124	; 0x7c
    3150:	18fb      	adds	r3, r7, r3
    3152:	0018      	movs	r0, r3
    3154:	4b1c      	ldr	r3, [pc, #112]	; (31c8 <system_clock_init+0xb4>)
    3156:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    3158:	2006      	movs	r0, #6
    315a:	4b1c      	ldr	r3, [pc, #112]	; (31cc <system_clock_init+0xb8>)
    315c:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    315e:	4b1c      	ldr	r3, [pc, #112]	; (31d0 <system_clock_init+0xbc>)
    3160:	4798      	blx	r3

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    3162:	2000      	movs	r0, #0
    3164:	4b1b      	ldr	r3, [pc, #108]	; (31d4 <system_clock_init+0xc0>)
    3166:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    3168:	2100      	movs	r1, #0
    316a:	2000      	movs	r0, #0
    316c:	4b1a      	ldr	r3, [pc, #104]	; (31d8 <system_clock_init+0xc4>)
    316e:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    3170:	2100      	movs	r1, #0
    3172:	2001      	movs	r0, #1
    3174:	4b18      	ldr	r3, [pc, #96]	; (31d8 <system_clock_init+0xc4>)
    3176:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    3178:	2100      	movs	r1, #0
    317a:	2002      	movs	r0, #2
    317c:	4b16      	ldr	r3, [pc, #88]	; (31d8 <system_clock_init+0xc4>)
    317e:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    3180:	1d3b      	adds	r3, r7, #4
    3182:	0018      	movs	r0, r3
    3184:	4b15      	ldr	r3, [pc, #84]	; (31dc <system_clock_init+0xc8>)
    3186:	4798      	blx	r3
    3188:	1d3b      	adds	r3, r7, #4
    318a:	2206      	movs	r2, #6
    318c:	701a      	strb	r2, [r3, #0]
    318e:	1d3b      	adds	r3, r7, #4
    3190:	2201      	movs	r2, #1
    3192:	605a      	str	r2, [r3, #4]
    3194:	1d3b      	adds	r3, r7, #4
    3196:	2200      	movs	r2, #0
    3198:	721a      	strb	r2, [r3, #8]
    319a:	1d3b      	adds	r3, r7, #4
    319c:	2200      	movs	r2, #0
    319e:	725a      	strb	r2, [r3, #9]
    31a0:	1d3b      	adds	r3, r7, #4
    31a2:	0019      	movs	r1, r3
    31a4:	2000      	movs	r0, #0
    31a6:	4b0e      	ldr	r3, [pc, #56]	; (31e0 <system_clock_init+0xcc>)
    31a8:	4798      	blx	r3
    31aa:	2000      	movs	r0, #0
    31ac:	4b0d      	ldr	r3, [pc, #52]	; (31e4 <system_clock_init+0xd0>)
    31ae:	4798      	blx	r3
#endif
}
    31b0:	46c0      	nop			; (mov r8, r8)
    31b2:	46bd      	mov	sp, r7
    31b4:	b020      	add	sp, #128	; 0x80
    31b6:	bd80      	pop	{r7, pc}
    31b8:	40000800 	.word	0x40000800
    31bc:	00002e65 	.word	0x00002e65
    31c0:	000030dd 	.word	0x000030dd
    31c4:	00002dcf 	.word	0x00002dcf
    31c8:	00002fb9 	.word	0x00002fb9
    31cc:	00003031 	.word	0x00003031
    31d0:	0000328d 	.word	0x0000328d
    31d4:	00002df1 	.word	0x00002df1
    31d8:	00002e11 	.word	0x00002e11
    31dc:	00002da1 	.word	0x00002da1
    31e0:	000032bd 	.word	0x000032bd
    31e4:	000033e1 	.word	0x000033e1

000031e8 <system_apb_clock_set_mask>:
{
    31e8:	b580      	push	{r7, lr}
    31ea:	b082      	sub	sp, #8
    31ec:	af00      	add	r7, sp, #0
    31ee:	0002      	movs	r2, r0
    31f0:	6039      	str	r1, [r7, #0]
    31f2:	1dfb      	adds	r3, r7, #7
    31f4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    31f6:	1dfb      	adds	r3, r7, #7
    31f8:	781b      	ldrb	r3, [r3, #0]
    31fa:	2b01      	cmp	r3, #1
    31fc:	d00a      	beq.n	3214 <system_apb_clock_set_mask+0x2c>
    31fe:	2b02      	cmp	r3, #2
    3200:	d00f      	beq.n	3222 <system_apb_clock_set_mask+0x3a>
    3202:	2b00      	cmp	r3, #0
    3204:	d114      	bne.n	3230 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    3206:	4b0e      	ldr	r3, [pc, #56]	; (3240 <system_apb_clock_set_mask+0x58>)
    3208:	4a0d      	ldr	r2, [pc, #52]	; (3240 <system_apb_clock_set_mask+0x58>)
    320a:	6991      	ldr	r1, [r2, #24]
    320c:	683a      	ldr	r2, [r7, #0]
    320e:	430a      	orrs	r2, r1
    3210:	619a      	str	r2, [r3, #24]
			break;
    3212:	e00f      	b.n	3234 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    3214:	4b0a      	ldr	r3, [pc, #40]	; (3240 <system_apb_clock_set_mask+0x58>)
    3216:	4a0a      	ldr	r2, [pc, #40]	; (3240 <system_apb_clock_set_mask+0x58>)
    3218:	69d1      	ldr	r1, [r2, #28]
    321a:	683a      	ldr	r2, [r7, #0]
    321c:	430a      	orrs	r2, r1
    321e:	61da      	str	r2, [r3, #28]
			break;
    3220:	e008      	b.n	3234 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    3222:	4b07      	ldr	r3, [pc, #28]	; (3240 <system_apb_clock_set_mask+0x58>)
    3224:	4a06      	ldr	r2, [pc, #24]	; (3240 <system_apb_clock_set_mask+0x58>)
    3226:	6a11      	ldr	r1, [r2, #32]
    3228:	683a      	ldr	r2, [r7, #0]
    322a:	430a      	orrs	r2, r1
    322c:	621a      	str	r2, [r3, #32]
			break;
    322e:	e001      	b.n	3234 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    3230:	2317      	movs	r3, #23
    3232:	e000      	b.n	3236 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    3234:	2300      	movs	r3, #0
}
    3236:	0018      	movs	r0, r3
    3238:	46bd      	mov	sp, r7
    323a:	b002      	add	sp, #8
    323c:	bd80      	pop	{r7, pc}
    323e:	46c0      	nop			; (mov r8, r8)
    3240:	40000400 	.word	0x40000400

00003244 <system_interrupt_enter_critical_section>:
{
    3244:	b580      	push	{r7, lr}
    3246:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    3248:	4b02      	ldr	r3, [pc, #8]	; (3254 <system_interrupt_enter_critical_section+0x10>)
    324a:	4798      	blx	r3
}
    324c:	46c0      	nop			; (mov r8, r8)
    324e:	46bd      	mov	sp, r7
    3250:	bd80      	pop	{r7, pc}
    3252:	46c0      	nop			; (mov r8, r8)
    3254:	00002d0d 	.word	0x00002d0d

00003258 <system_interrupt_leave_critical_section>:
{
    3258:	b580      	push	{r7, lr}
    325a:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    325c:	4b02      	ldr	r3, [pc, #8]	; (3268 <system_interrupt_leave_critical_section+0x10>)
    325e:	4798      	blx	r3
}
    3260:	46c0      	nop			; (mov r8, r8)
    3262:	46bd      	mov	sp, r7
    3264:	bd80      	pop	{r7, pc}
    3266:	46c0      	nop			; (mov r8, r8)
    3268:	00002d61 	.word	0x00002d61

0000326c <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    326c:	b580      	push	{r7, lr}
    326e:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3270:	4b05      	ldr	r3, [pc, #20]	; (3288 <system_gclk_is_syncing+0x1c>)
    3272:	785b      	ldrb	r3, [r3, #1]
    3274:	b2db      	uxtb	r3, r3
    3276:	b25b      	sxtb	r3, r3
    3278:	2b00      	cmp	r3, #0
    327a:	da01      	bge.n	3280 <system_gclk_is_syncing+0x14>
		return true;
    327c:	2301      	movs	r3, #1
    327e:	e000      	b.n	3282 <system_gclk_is_syncing+0x16>
	}

	return false;
    3280:	2300      	movs	r3, #0
}
    3282:	0018      	movs	r0, r3
    3284:	46bd      	mov	sp, r7
    3286:	bd80      	pop	{r7, pc}
    3288:	40000c00 	.word	0x40000c00

0000328c <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    328c:	b580      	push	{r7, lr}
    328e:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    3290:	2108      	movs	r1, #8
    3292:	2000      	movs	r0, #0
    3294:	4b07      	ldr	r3, [pc, #28]	; (32b4 <system_gclk_init+0x28>)
    3296:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    3298:	4b07      	ldr	r3, [pc, #28]	; (32b8 <system_gclk_init+0x2c>)
    329a:	2201      	movs	r2, #1
    329c:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    329e:	46c0      	nop			; (mov r8, r8)
    32a0:	4b05      	ldr	r3, [pc, #20]	; (32b8 <system_gclk_init+0x2c>)
    32a2:	781b      	ldrb	r3, [r3, #0]
    32a4:	b2db      	uxtb	r3, r3
    32a6:	001a      	movs	r2, r3
    32a8:	2301      	movs	r3, #1
    32aa:	4013      	ands	r3, r2
    32ac:	d1f8      	bne.n	32a0 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    32ae:	46c0      	nop			; (mov r8, r8)
    32b0:	46bd      	mov	sp, r7
    32b2:	bd80      	pop	{r7, pc}
    32b4:	000031e9 	.word	0x000031e9
    32b8:	40000c00 	.word	0x40000c00

000032bc <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    32bc:	b580      	push	{r7, lr}
    32be:	b086      	sub	sp, #24
    32c0:	af00      	add	r7, sp, #0
    32c2:	0002      	movs	r2, r0
    32c4:	6039      	str	r1, [r7, #0]
    32c6:	1dfb      	adds	r3, r7, #7
    32c8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    32ca:	1dfb      	adds	r3, r7, #7
    32cc:	781b      	ldrb	r3, [r3, #0]
    32ce:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    32d0:	1dfb      	adds	r3, r7, #7
    32d2:	781b      	ldrb	r3, [r3, #0]
    32d4:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    32d6:	683b      	ldr	r3, [r7, #0]
    32d8:	781b      	ldrb	r3, [r3, #0]
    32da:	021b      	lsls	r3, r3, #8
    32dc:	001a      	movs	r2, r3
    32de:	697b      	ldr	r3, [r7, #20]
    32e0:	4313      	orrs	r3, r2
    32e2:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    32e4:	683b      	ldr	r3, [r7, #0]
    32e6:	785b      	ldrb	r3, [r3, #1]
    32e8:	2b00      	cmp	r3, #0
    32ea:	d004      	beq.n	32f6 <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    32ec:	697b      	ldr	r3, [r7, #20]
    32ee:	2280      	movs	r2, #128	; 0x80
    32f0:	02d2      	lsls	r2, r2, #11
    32f2:	4313      	orrs	r3, r2
    32f4:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    32f6:	683b      	ldr	r3, [r7, #0]
    32f8:	7a5b      	ldrb	r3, [r3, #9]
    32fa:	2b00      	cmp	r3, #0
    32fc:	d004      	beq.n	3308 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    32fe:	697b      	ldr	r3, [r7, #20]
    3300:	2280      	movs	r2, #128	; 0x80
    3302:	0312      	lsls	r2, r2, #12
    3304:	4313      	orrs	r3, r2
    3306:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    3308:	683b      	ldr	r3, [r7, #0]
    330a:	685b      	ldr	r3, [r3, #4]
    330c:	2b01      	cmp	r3, #1
    330e:	d92c      	bls.n	336a <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    3310:	683b      	ldr	r3, [r7, #0]
    3312:	685a      	ldr	r2, [r3, #4]
    3314:	683b      	ldr	r3, [r7, #0]
    3316:	685b      	ldr	r3, [r3, #4]
    3318:	3b01      	subs	r3, #1
    331a:	4013      	ands	r3, r2
    331c:	d11a      	bne.n	3354 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    331e:	2300      	movs	r3, #0
    3320:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    3322:	2302      	movs	r3, #2
    3324:	60bb      	str	r3, [r7, #8]
    3326:	e005      	b.n	3334 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    3328:	68fb      	ldr	r3, [r7, #12]
    332a:	3301      	adds	r3, #1
    332c:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
    332e:	68bb      	ldr	r3, [r7, #8]
    3330:	005b      	lsls	r3, r3, #1
    3332:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
    3334:	683b      	ldr	r3, [r7, #0]
    3336:	685a      	ldr	r2, [r3, #4]
    3338:	68bb      	ldr	r3, [r7, #8]
    333a:	429a      	cmp	r2, r3
    333c:	d8f4      	bhi.n	3328 <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    333e:	68fb      	ldr	r3, [r7, #12]
    3340:	021b      	lsls	r3, r3, #8
    3342:	693a      	ldr	r2, [r7, #16]
    3344:	4313      	orrs	r3, r2
    3346:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    3348:	697b      	ldr	r3, [r7, #20]
    334a:	2280      	movs	r2, #128	; 0x80
    334c:	0352      	lsls	r2, r2, #13
    334e:	4313      	orrs	r3, r2
    3350:	617b      	str	r3, [r7, #20]
    3352:	e00a      	b.n	336a <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    3354:	683b      	ldr	r3, [r7, #0]
    3356:	685b      	ldr	r3, [r3, #4]
    3358:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
    335a:	693a      	ldr	r2, [r7, #16]
    335c:	4313      	orrs	r3, r2
    335e:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    3360:	697b      	ldr	r3, [r7, #20]
    3362:	2280      	movs	r2, #128	; 0x80
    3364:	0292      	lsls	r2, r2, #10
    3366:	4313      	orrs	r3, r2
    3368:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    336a:	683b      	ldr	r3, [r7, #0]
    336c:	7a1b      	ldrb	r3, [r3, #8]
    336e:	2b00      	cmp	r3, #0
    3370:	d004      	beq.n	337c <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    3372:	697b      	ldr	r3, [r7, #20]
    3374:	2280      	movs	r2, #128	; 0x80
    3376:	0392      	lsls	r2, r2, #14
    3378:	4313      	orrs	r3, r2
    337a:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    337c:	46c0      	nop			; (mov r8, r8)
    337e:	4b13      	ldr	r3, [pc, #76]	; (33cc <system_gclk_gen_set_config+0x110>)
    3380:	4798      	blx	r3
    3382:	1e03      	subs	r3, r0, #0
    3384:	d1fb      	bne.n	337e <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    3386:	4b12      	ldr	r3, [pc, #72]	; (33d0 <system_gclk_gen_set_config+0x114>)
    3388:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    338a:	4a12      	ldr	r2, [pc, #72]	; (33d4 <system_gclk_gen_set_config+0x118>)
    338c:	1dfb      	adds	r3, r7, #7
    338e:	781b      	ldrb	r3, [r3, #0]
    3390:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    3392:	46c0      	nop			; (mov r8, r8)
    3394:	4b0d      	ldr	r3, [pc, #52]	; (33cc <system_gclk_gen_set_config+0x110>)
    3396:	4798      	blx	r3
    3398:	1e03      	subs	r3, r0, #0
    339a:	d1fb      	bne.n	3394 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    339c:	4b0e      	ldr	r3, [pc, #56]	; (33d8 <system_gclk_gen_set_config+0x11c>)
    339e:	693a      	ldr	r2, [r7, #16]
    33a0:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    33a2:	46c0      	nop			; (mov r8, r8)
    33a4:	4b09      	ldr	r3, [pc, #36]	; (33cc <system_gclk_gen_set_config+0x110>)
    33a6:	4798      	blx	r3
    33a8:	1e03      	subs	r3, r0, #0
    33aa:	d1fb      	bne.n	33a4 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    33ac:	4b0a      	ldr	r3, [pc, #40]	; (33d8 <system_gclk_gen_set_config+0x11c>)
    33ae:	4a0a      	ldr	r2, [pc, #40]	; (33d8 <system_gclk_gen_set_config+0x11c>)
    33b0:	6851      	ldr	r1, [r2, #4]
    33b2:	2280      	movs	r2, #128	; 0x80
    33b4:	0252      	lsls	r2, r2, #9
    33b6:	4011      	ands	r1, r2
    33b8:	697a      	ldr	r2, [r7, #20]
    33ba:	430a      	orrs	r2, r1
    33bc:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    33be:	4b07      	ldr	r3, [pc, #28]	; (33dc <system_gclk_gen_set_config+0x120>)
    33c0:	4798      	blx	r3
}
    33c2:	46c0      	nop			; (mov r8, r8)
    33c4:	46bd      	mov	sp, r7
    33c6:	b006      	add	sp, #24
    33c8:	bd80      	pop	{r7, pc}
    33ca:	46c0      	nop			; (mov r8, r8)
    33cc:	0000326d 	.word	0x0000326d
    33d0:	00003245 	.word	0x00003245
    33d4:	40000c08 	.word	0x40000c08
    33d8:	40000c00 	.word	0x40000c00
    33dc:	00003259 	.word	0x00003259

000033e0 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    33e0:	b580      	push	{r7, lr}
    33e2:	b082      	sub	sp, #8
    33e4:	af00      	add	r7, sp, #0
    33e6:	0002      	movs	r2, r0
    33e8:	1dfb      	adds	r3, r7, #7
    33ea:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    33ec:	46c0      	nop			; (mov r8, r8)
    33ee:	4b0e      	ldr	r3, [pc, #56]	; (3428 <system_gclk_gen_enable+0x48>)
    33f0:	4798      	blx	r3
    33f2:	1e03      	subs	r3, r0, #0
    33f4:	d1fb      	bne.n	33ee <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    33f6:	4b0d      	ldr	r3, [pc, #52]	; (342c <system_gclk_gen_enable+0x4c>)
    33f8:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    33fa:	4a0d      	ldr	r2, [pc, #52]	; (3430 <system_gclk_gen_enable+0x50>)
    33fc:	1dfb      	adds	r3, r7, #7
    33fe:	781b      	ldrb	r3, [r3, #0]
    3400:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    3402:	46c0      	nop			; (mov r8, r8)
    3404:	4b08      	ldr	r3, [pc, #32]	; (3428 <system_gclk_gen_enable+0x48>)
    3406:	4798      	blx	r3
    3408:	1e03      	subs	r3, r0, #0
    340a:	d1fb      	bne.n	3404 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    340c:	4b09      	ldr	r3, [pc, #36]	; (3434 <system_gclk_gen_enable+0x54>)
    340e:	4a09      	ldr	r2, [pc, #36]	; (3434 <system_gclk_gen_enable+0x54>)
    3410:	6852      	ldr	r2, [r2, #4]
    3412:	2180      	movs	r1, #128	; 0x80
    3414:	0249      	lsls	r1, r1, #9
    3416:	430a      	orrs	r2, r1
    3418:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    341a:	4b07      	ldr	r3, [pc, #28]	; (3438 <system_gclk_gen_enable+0x58>)
    341c:	4798      	blx	r3
}
    341e:	46c0      	nop			; (mov r8, r8)
    3420:	46bd      	mov	sp, r7
    3422:	b002      	add	sp, #8
    3424:	bd80      	pop	{r7, pc}
    3426:	46c0      	nop			; (mov r8, r8)
    3428:	0000326d 	.word	0x0000326d
    342c:	00003245 	.word	0x00003245
    3430:	40000c04 	.word	0x40000c04
    3434:	40000c00 	.word	0x40000c00
    3438:	00003259 	.word	0x00003259

0000343c <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    343c:	b580      	push	{r7, lr}
    343e:	b086      	sub	sp, #24
    3440:	af00      	add	r7, sp, #0
    3442:	0002      	movs	r2, r0
    3444:	1dfb      	adds	r3, r7, #7
    3446:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    3448:	46c0      	nop			; (mov r8, r8)
    344a:	4b2a      	ldr	r3, [pc, #168]	; (34f4 <system_gclk_gen_get_hz+0xb8>)
    344c:	4798      	blx	r3
    344e:	1e03      	subs	r3, r0, #0
    3450:	d1fb      	bne.n	344a <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    3452:	4b29      	ldr	r3, [pc, #164]	; (34f8 <system_gclk_gen_get_hz+0xbc>)
    3454:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    3456:	4a29      	ldr	r2, [pc, #164]	; (34fc <system_gclk_gen_get_hz+0xc0>)
    3458:	1dfb      	adds	r3, r7, #7
    345a:	781b      	ldrb	r3, [r3, #0]
    345c:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    345e:	46c0      	nop			; (mov r8, r8)
    3460:	4b24      	ldr	r3, [pc, #144]	; (34f4 <system_gclk_gen_get_hz+0xb8>)
    3462:	4798      	blx	r3
    3464:	1e03      	subs	r3, r0, #0
    3466:	d1fb      	bne.n	3460 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    3468:	4b25      	ldr	r3, [pc, #148]	; (3500 <system_gclk_gen_get_hz+0xc4>)
    346a:	685b      	ldr	r3, [r3, #4]
    346c:	04db      	lsls	r3, r3, #19
    346e:	0edb      	lsrs	r3, r3, #27
    3470:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
    3472:	0018      	movs	r0, r3
    3474:	4b23      	ldr	r3, [pc, #140]	; (3504 <system_gclk_gen_get_hz+0xc8>)
    3476:	4798      	blx	r3
    3478:	0003      	movs	r3, r0
    347a:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    347c:	4a1f      	ldr	r2, [pc, #124]	; (34fc <system_gclk_gen_get_hz+0xc0>)
    347e:	1dfb      	adds	r3, r7, #7
    3480:	781b      	ldrb	r3, [r3, #0]
    3482:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    3484:	4b1e      	ldr	r3, [pc, #120]	; (3500 <system_gclk_gen_get_hz+0xc4>)
    3486:	685b      	ldr	r3, [r3, #4]
    3488:	02db      	lsls	r3, r3, #11
    348a:	0fdb      	lsrs	r3, r3, #31
    348c:	b2da      	uxtb	r2, r3
    348e:	2313      	movs	r3, #19
    3490:	18fb      	adds	r3, r7, r3
    3492:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    3494:	4a1c      	ldr	r2, [pc, #112]	; (3508 <system_gclk_gen_get_hz+0xcc>)
    3496:	1dfb      	adds	r3, r7, #7
    3498:	781b      	ldrb	r3, [r3, #0]
    349a:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    349c:	46c0      	nop			; (mov r8, r8)
    349e:	4b15      	ldr	r3, [pc, #84]	; (34f4 <system_gclk_gen_get_hz+0xb8>)
    34a0:	4798      	blx	r3
    34a2:	1e03      	subs	r3, r0, #0
    34a4:	d1fb      	bne.n	349e <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    34a6:	4b16      	ldr	r3, [pc, #88]	; (3500 <system_gclk_gen_get_hz+0xc4>)
    34a8:	689b      	ldr	r3, [r3, #8]
    34aa:	021b      	lsls	r3, r3, #8
    34ac:	0c1b      	lsrs	r3, r3, #16
    34ae:	b29b      	uxth	r3, r3
    34b0:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    34b2:	4b16      	ldr	r3, [pc, #88]	; (350c <system_gclk_gen_get_hz+0xd0>)
    34b4:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    34b6:	2313      	movs	r3, #19
    34b8:	18fb      	adds	r3, r7, r3
    34ba:	781b      	ldrb	r3, [r3, #0]
    34bc:	2b00      	cmp	r3, #0
    34be:	d109      	bne.n	34d4 <system_gclk_gen_get_hz+0x98>
    34c0:	68fb      	ldr	r3, [r7, #12]
    34c2:	2b01      	cmp	r3, #1
    34c4:	d906      	bls.n	34d4 <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
    34c6:	4b12      	ldr	r3, [pc, #72]	; (3510 <system_gclk_gen_get_hz+0xd4>)
    34c8:	68f9      	ldr	r1, [r7, #12]
    34ca:	6978      	ldr	r0, [r7, #20]
    34cc:	4798      	blx	r3
    34ce:	0003      	movs	r3, r0
    34d0:	617b      	str	r3, [r7, #20]
    34d2:	e00a      	b.n	34ea <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
    34d4:	2313      	movs	r3, #19
    34d6:	18fb      	adds	r3, r7, r3
    34d8:	781b      	ldrb	r3, [r3, #0]
    34da:	2b00      	cmp	r3, #0
    34dc:	d005      	beq.n	34ea <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
    34de:	68fb      	ldr	r3, [r7, #12]
    34e0:	3301      	adds	r3, #1
    34e2:	697a      	ldr	r2, [r7, #20]
    34e4:	40da      	lsrs	r2, r3
    34e6:	0013      	movs	r3, r2
    34e8:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    34ea:	697b      	ldr	r3, [r7, #20]
}
    34ec:	0018      	movs	r0, r3
    34ee:	46bd      	mov	sp, r7
    34f0:	b006      	add	sp, #24
    34f2:	bd80      	pop	{r7, pc}
    34f4:	0000326d 	.word	0x0000326d
    34f8:	00003245 	.word	0x00003245
    34fc:	40000c04 	.word	0x40000c04
    3500:	40000c00 	.word	0x40000c00
    3504:	00002ef9 	.word	0x00002ef9
    3508:	40000c08 	.word	0x40000c08
    350c:	00003259 	.word	0x00003259
    3510:	0000533d 	.word	0x0000533d

00003514 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    3514:	b580      	push	{r7, lr}
    3516:	b084      	sub	sp, #16
    3518:	af00      	add	r7, sp, #0
    351a:	0002      	movs	r2, r0
    351c:	6039      	str	r1, [r7, #0]
    351e:	1dfb      	adds	r3, r7, #7
    3520:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    3522:	1dfb      	adds	r3, r7, #7
    3524:	781b      	ldrb	r3, [r3, #0]
    3526:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    3528:	683b      	ldr	r3, [r7, #0]
    352a:	781b      	ldrb	r3, [r3, #0]
    352c:	021b      	lsls	r3, r3, #8
    352e:	001a      	movs	r2, r3
    3530:	68fb      	ldr	r3, [r7, #12]
    3532:	4313      	orrs	r3, r2
    3534:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    3536:	1dfb      	adds	r3, r7, #7
    3538:	781b      	ldrb	r3, [r3, #0]
    353a:	0018      	movs	r0, r3
    353c:	4b04      	ldr	r3, [pc, #16]	; (3550 <system_gclk_chan_set_config+0x3c>)
    353e:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    3540:	4b04      	ldr	r3, [pc, #16]	; (3554 <system_gclk_chan_set_config+0x40>)
    3542:	68fa      	ldr	r2, [r7, #12]
    3544:	b292      	uxth	r2, r2
    3546:	805a      	strh	r2, [r3, #2]
}
    3548:	46c0      	nop			; (mov r8, r8)
    354a:	46bd      	mov	sp, r7
    354c:	b004      	add	sp, #16
    354e:	bd80      	pop	{r7, pc}
    3550:	000035a1 	.word	0x000035a1
    3554:	40000c00 	.word	0x40000c00

00003558 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    3558:	b580      	push	{r7, lr}
    355a:	b082      	sub	sp, #8
    355c:	af00      	add	r7, sp, #0
    355e:	0002      	movs	r2, r0
    3560:	1dfb      	adds	r3, r7, #7
    3562:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    3564:	4b0a      	ldr	r3, [pc, #40]	; (3590 <system_gclk_chan_enable+0x38>)
    3566:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    3568:	4a0a      	ldr	r2, [pc, #40]	; (3594 <system_gclk_chan_enable+0x3c>)
    356a:	1dfb      	adds	r3, r7, #7
    356c:	781b      	ldrb	r3, [r3, #0]
    356e:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    3570:	4909      	ldr	r1, [pc, #36]	; (3598 <system_gclk_chan_enable+0x40>)
    3572:	4b09      	ldr	r3, [pc, #36]	; (3598 <system_gclk_chan_enable+0x40>)
    3574:	885b      	ldrh	r3, [r3, #2]
    3576:	b29b      	uxth	r3, r3
    3578:	2280      	movs	r2, #128	; 0x80
    357a:	01d2      	lsls	r2, r2, #7
    357c:	4313      	orrs	r3, r2
    357e:	b29b      	uxth	r3, r3
    3580:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    3582:	4b06      	ldr	r3, [pc, #24]	; (359c <system_gclk_chan_enable+0x44>)
    3584:	4798      	blx	r3
}
    3586:	46c0      	nop			; (mov r8, r8)
    3588:	46bd      	mov	sp, r7
    358a:	b002      	add	sp, #8
    358c:	bd80      	pop	{r7, pc}
    358e:	46c0      	nop			; (mov r8, r8)
    3590:	00003245 	.word	0x00003245
    3594:	40000c02 	.word	0x40000c02
    3598:	40000c00 	.word	0x40000c00
    359c:	00003259 	.word	0x00003259

000035a0 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    35a0:	b580      	push	{r7, lr}
    35a2:	b084      	sub	sp, #16
    35a4:	af00      	add	r7, sp, #0
    35a6:	0002      	movs	r2, r0
    35a8:	1dfb      	adds	r3, r7, #7
    35aa:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    35ac:	4b1c      	ldr	r3, [pc, #112]	; (3620 <system_gclk_chan_disable+0x80>)
    35ae:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    35b0:	4a1c      	ldr	r2, [pc, #112]	; (3624 <system_gclk_chan_disable+0x84>)
    35b2:	1dfb      	adds	r3, r7, #7
    35b4:	781b      	ldrb	r3, [r3, #0]
    35b6:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    35b8:	4b1b      	ldr	r3, [pc, #108]	; (3628 <system_gclk_chan_disable+0x88>)
    35ba:	885b      	ldrh	r3, [r3, #2]
    35bc:	051b      	lsls	r3, r3, #20
    35be:	0f1b      	lsrs	r3, r3, #28
    35c0:	b2db      	uxtb	r3, r3
    35c2:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    35c4:	4a18      	ldr	r2, [pc, #96]	; (3628 <system_gclk_chan_disable+0x88>)
    35c6:	8853      	ldrh	r3, [r2, #2]
    35c8:	4918      	ldr	r1, [pc, #96]	; (362c <system_gclk_chan_disable+0x8c>)
    35ca:	400b      	ands	r3, r1
    35cc:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    35ce:	4a16      	ldr	r2, [pc, #88]	; (3628 <system_gclk_chan_disable+0x88>)
    35d0:	4b15      	ldr	r3, [pc, #84]	; (3628 <system_gclk_chan_disable+0x88>)
    35d2:	885b      	ldrh	r3, [r3, #2]
    35d4:	b29b      	uxth	r3, r3
    35d6:	4916      	ldr	r1, [pc, #88]	; (3630 <system_gclk_chan_disable+0x90>)
    35d8:	400b      	ands	r3, r1
    35da:	b29b      	uxth	r3, r3
    35dc:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    35de:	46c0      	nop			; (mov r8, r8)
    35e0:	4b11      	ldr	r3, [pc, #68]	; (3628 <system_gclk_chan_disable+0x88>)
    35e2:	885b      	ldrh	r3, [r3, #2]
    35e4:	b29b      	uxth	r3, r3
    35e6:	001a      	movs	r2, r3
    35e8:	2380      	movs	r3, #128	; 0x80
    35ea:	01db      	lsls	r3, r3, #7
    35ec:	4013      	ands	r3, r2
    35ee:	d1f7      	bne.n	35e0 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    35f0:	4a0d      	ldr	r2, [pc, #52]	; (3628 <system_gclk_chan_disable+0x88>)
    35f2:	68fb      	ldr	r3, [r7, #12]
    35f4:	b2db      	uxtb	r3, r3
    35f6:	1c19      	adds	r1, r3, #0
    35f8:	230f      	movs	r3, #15
    35fa:	400b      	ands	r3, r1
    35fc:	b2d9      	uxtb	r1, r3
    35fe:	8853      	ldrh	r3, [r2, #2]
    3600:	1c08      	adds	r0, r1, #0
    3602:	210f      	movs	r1, #15
    3604:	4001      	ands	r1, r0
    3606:	0208      	lsls	r0, r1, #8
    3608:	4908      	ldr	r1, [pc, #32]	; (362c <system_gclk_chan_disable+0x8c>)
    360a:	400b      	ands	r3, r1
    360c:	1c19      	adds	r1, r3, #0
    360e:	1c03      	adds	r3, r0, #0
    3610:	430b      	orrs	r3, r1
    3612:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    3614:	4b07      	ldr	r3, [pc, #28]	; (3634 <system_gclk_chan_disable+0x94>)
    3616:	4798      	blx	r3
}
    3618:	46c0      	nop			; (mov r8, r8)
    361a:	46bd      	mov	sp, r7
    361c:	b004      	add	sp, #16
    361e:	bd80      	pop	{r7, pc}
    3620:	00003245 	.word	0x00003245
    3624:	40000c02 	.word	0x40000c02
    3628:	40000c00 	.word	0x40000c00
    362c:	fffff0ff 	.word	0xfffff0ff
    3630:	ffffbfff 	.word	0xffffbfff
    3634:	00003259 	.word	0x00003259

00003638 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    3638:	b580      	push	{r7, lr}
    363a:	b084      	sub	sp, #16
    363c:	af00      	add	r7, sp, #0
    363e:	0002      	movs	r2, r0
    3640:	1dfb      	adds	r3, r7, #7
    3642:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    3644:	4b0d      	ldr	r3, [pc, #52]	; (367c <system_gclk_chan_get_hz+0x44>)
    3646:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    3648:	4a0d      	ldr	r2, [pc, #52]	; (3680 <system_gclk_chan_get_hz+0x48>)
    364a:	1dfb      	adds	r3, r7, #7
    364c:	781b      	ldrb	r3, [r3, #0]
    364e:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    3650:	4b0c      	ldr	r3, [pc, #48]	; (3684 <system_gclk_chan_get_hz+0x4c>)
    3652:	885b      	ldrh	r3, [r3, #2]
    3654:	051b      	lsls	r3, r3, #20
    3656:	0f1b      	lsrs	r3, r3, #28
    3658:	b2da      	uxtb	r2, r3
    365a:	230f      	movs	r3, #15
    365c:	18fb      	adds	r3, r7, r3
    365e:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    3660:	4b09      	ldr	r3, [pc, #36]	; (3688 <system_gclk_chan_get_hz+0x50>)
    3662:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    3664:	230f      	movs	r3, #15
    3666:	18fb      	adds	r3, r7, r3
    3668:	781b      	ldrb	r3, [r3, #0]
    366a:	0018      	movs	r0, r3
    366c:	4b07      	ldr	r3, [pc, #28]	; (368c <system_gclk_chan_get_hz+0x54>)
    366e:	4798      	blx	r3
    3670:	0003      	movs	r3, r0
}
    3672:	0018      	movs	r0, r3
    3674:	46bd      	mov	sp, r7
    3676:	b004      	add	sp, #16
    3678:	bd80      	pop	{r7, pc}
    367a:	46c0      	nop			; (mov r8, r8)
    367c:	00003245 	.word	0x00003245
    3680:	40000c02 	.word	0x40000c02
    3684:	40000c00 	.word	0x40000c00
    3688:	00003259 	.word	0x00003259
    368c:	0000343d 	.word	0x0000343d

00003690 <system_pinmux_get_group_from_gpio_pin>:
{
    3690:	b580      	push	{r7, lr}
    3692:	b084      	sub	sp, #16
    3694:	af00      	add	r7, sp, #0
    3696:	0002      	movs	r2, r0
    3698:	1dfb      	adds	r3, r7, #7
    369a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    369c:	230f      	movs	r3, #15
    369e:	18fb      	adds	r3, r7, r3
    36a0:	1dfa      	adds	r2, r7, #7
    36a2:	7812      	ldrb	r2, [r2, #0]
    36a4:	09d2      	lsrs	r2, r2, #7
    36a6:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    36a8:	230e      	movs	r3, #14
    36aa:	18fb      	adds	r3, r7, r3
    36ac:	1dfa      	adds	r2, r7, #7
    36ae:	7812      	ldrb	r2, [r2, #0]
    36b0:	0952      	lsrs	r2, r2, #5
    36b2:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    36b4:	4b0d      	ldr	r3, [pc, #52]	; (36ec <system_pinmux_get_group_from_gpio_pin+0x5c>)
    36b6:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    36b8:	230f      	movs	r3, #15
    36ba:	18fb      	adds	r3, r7, r3
    36bc:	781b      	ldrb	r3, [r3, #0]
    36be:	2b00      	cmp	r3, #0
    36c0:	d10f      	bne.n	36e2 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    36c2:	230f      	movs	r3, #15
    36c4:	18fb      	adds	r3, r7, r3
    36c6:	781b      	ldrb	r3, [r3, #0]
    36c8:	009b      	lsls	r3, r3, #2
    36ca:	2210      	movs	r2, #16
    36cc:	4694      	mov	ip, r2
    36ce:	44bc      	add	ip, r7
    36d0:	4463      	add	r3, ip
    36d2:	3b08      	subs	r3, #8
    36d4:	681a      	ldr	r2, [r3, #0]
    36d6:	230e      	movs	r3, #14
    36d8:	18fb      	adds	r3, r7, r3
    36da:	781b      	ldrb	r3, [r3, #0]
    36dc:	01db      	lsls	r3, r3, #7
    36de:	18d3      	adds	r3, r2, r3
    36e0:	e000      	b.n	36e4 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    36e2:	2300      	movs	r3, #0
}
    36e4:	0018      	movs	r0, r3
    36e6:	46bd      	mov	sp, r7
    36e8:	b004      	add	sp, #16
    36ea:	bd80      	pop	{r7, pc}
    36ec:	41004400 	.word	0x41004400

000036f0 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    36f0:	b580      	push	{r7, lr}
    36f2:	b088      	sub	sp, #32
    36f4:	af00      	add	r7, sp, #0
    36f6:	60f8      	str	r0, [r7, #12]
    36f8:	60b9      	str	r1, [r7, #8]
    36fa:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    36fc:	2300      	movs	r3, #0
    36fe:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    3700:	687b      	ldr	r3, [r7, #4]
    3702:	78db      	ldrb	r3, [r3, #3]
    3704:	2201      	movs	r2, #1
    3706:	4053      	eors	r3, r2
    3708:	b2db      	uxtb	r3, r3
    370a:	2b00      	cmp	r3, #0
    370c:	d035      	beq.n	377a <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    370e:	687b      	ldr	r3, [r7, #4]
    3710:	781b      	ldrb	r3, [r3, #0]
    3712:	2b80      	cmp	r3, #128	; 0x80
    3714:	d00b      	beq.n	372e <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    3716:	69fb      	ldr	r3, [r7, #28]
    3718:	2280      	movs	r2, #128	; 0x80
    371a:	0252      	lsls	r2, r2, #9
    371c:	4313      	orrs	r3, r2
    371e:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    3720:	687b      	ldr	r3, [r7, #4]
    3722:	781b      	ldrb	r3, [r3, #0]
    3724:	061b      	lsls	r3, r3, #24
    3726:	001a      	movs	r2, r3
    3728:	69fb      	ldr	r3, [r7, #28]
    372a:	4313      	orrs	r3, r2
    372c:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    372e:	687b      	ldr	r3, [r7, #4]
    3730:	785b      	ldrb	r3, [r3, #1]
    3732:	2b00      	cmp	r3, #0
    3734:	d003      	beq.n	373e <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    3736:	687b      	ldr	r3, [r7, #4]
    3738:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    373a:	2b02      	cmp	r3, #2
    373c:	d110      	bne.n	3760 <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    373e:	69fb      	ldr	r3, [r7, #28]
    3740:	2280      	movs	r2, #128	; 0x80
    3742:	0292      	lsls	r2, r2, #10
    3744:	4313      	orrs	r3, r2
    3746:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    3748:	687b      	ldr	r3, [r7, #4]
    374a:	789b      	ldrb	r3, [r3, #2]
    374c:	2b00      	cmp	r3, #0
    374e:	d004      	beq.n	375a <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    3750:	69fb      	ldr	r3, [r7, #28]
    3752:	2280      	movs	r2, #128	; 0x80
    3754:	02d2      	lsls	r2, r2, #11
    3756:	4313      	orrs	r3, r2
    3758:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    375a:	68fb      	ldr	r3, [r7, #12]
    375c:	68ba      	ldr	r2, [r7, #8]
    375e:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    3760:	687b      	ldr	r3, [r7, #4]
    3762:	785b      	ldrb	r3, [r3, #1]
    3764:	2b01      	cmp	r3, #1
    3766:	d003      	beq.n	3770 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    3768:	687b      	ldr	r3, [r7, #4]
    376a:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    376c:	2b02      	cmp	r3, #2
    376e:	d107      	bne.n	3780 <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    3770:	69fb      	ldr	r3, [r7, #28]
    3772:	4a22      	ldr	r2, [pc, #136]	; (37fc <_system_pinmux_config+0x10c>)
    3774:	4013      	ands	r3, r2
    3776:	61fb      	str	r3, [r7, #28]
    3778:	e002      	b.n	3780 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    377a:	68fb      	ldr	r3, [r7, #12]
    377c:	68ba      	ldr	r2, [r7, #8]
    377e:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    3780:	68bb      	ldr	r3, [r7, #8]
    3782:	041b      	lsls	r3, r3, #16
    3784:	0c1b      	lsrs	r3, r3, #16
    3786:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    3788:	68bb      	ldr	r3, [r7, #8]
    378a:	0c1b      	lsrs	r3, r3, #16
    378c:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    378e:	69ba      	ldr	r2, [r7, #24]
    3790:	69fb      	ldr	r3, [r7, #28]
    3792:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    3794:	22a0      	movs	r2, #160	; 0xa0
    3796:	05d2      	lsls	r2, r2, #23
    3798:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    379a:	68fb      	ldr	r3, [r7, #12]
    379c:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    379e:	697a      	ldr	r2, [r7, #20]
    37a0:	69fb      	ldr	r3, [r7, #28]
    37a2:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    37a4:	22d0      	movs	r2, #208	; 0xd0
    37a6:	0612      	lsls	r2, r2, #24
    37a8:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    37aa:	68fb      	ldr	r3, [r7, #12]
    37ac:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    37ae:	687b      	ldr	r3, [r7, #4]
    37b0:	78db      	ldrb	r3, [r3, #3]
    37b2:	2201      	movs	r2, #1
    37b4:	4053      	eors	r3, r2
    37b6:	b2db      	uxtb	r3, r3
    37b8:	2b00      	cmp	r3, #0
    37ba:	d01a      	beq.n	37f2 <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    37bc:	69fa      	ldr	r2, [r7, #28]
    37be:	2380      	movs	r3, #128	; 0x80
    37c0:	02db      	lsls	r3, r3, #11
    37c2:	4013      	ands	r3, r2
    37c4:	d00a      	beq.n	37dc <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    37c6:	687b      	ldr	r3, [r7, #4]
    37c8:	789b      	ldrb	r3, [r3, #2]
    37ca:	2b01      	cmp	r3, #1
    37cc:	d103      	bne.n	37d6 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    37ce:	68fb      	ldr	r3, [r7, #12]
    37d0:	68ba      	ldr	r2, [r7, #8]
    37d2:	619a      	str	r2, [r3, #24]
    37d4:	e002      	b.n	37dc <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    37d6:	68fb      	ldr	r3, [r7, #12]
    37d8:	68ba      	ldr	r2, [r7, #8]
    37da:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    37dc:	687b      	ldr	r3, [r7, #4]
    37de:	785b      	ldrb	r3, [r3, #1]
    37e0:	2b01      	cmp	r3, #1
    37e2:	d003      	beq.n	37ec <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    37e4:	687b      	ldr	r3, [r7, #4]
    37e6:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    37e8:	2b02      	cmp	r3, #2
    37ea:	d102      	bne.n	37f2 <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    37ec:	68fb      	ldr	r3, [r7, #12]
    37ee:	68ba      	ldr	r2, [r7, #8]
    37f0:	609a      	str	r2, [r3, #8]
		}
	}
}
    37f2:	46c0      	nop			; (mov r8, r8)
    37f4:	46bd      	mov	sp, r7
    37f6:	b008      	add	sp, #32
    37f8:	bd80      	pop	{r7, pc}
    37fa:	46c0      	nop			; (mov r8, r8)
    37fc:	fffbffff 	.word	0xfffbffff

00003800 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    3800:	b580      	push	{r7, lr}
    3802:	b084      	sub	sp, #16
    3804:	af00      	add	r7, sp, #0
    3806:	0002      	movs	r2, r0
    3808:	6039      	str	r1, [r7, #0]
    380a:	1dfb      	adds	r3, r7, #7
    380c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    380e:	1dfb      	adds	r3, r7, #7
    3810:	781b      	ldrb	r3, [r3, #0]
    3812:	0018      	movs	r0, r3
    3814:	4b0a      	ldr	r3, [pc, #40]	; (3840 <system_pinmux_pin_set_config+0x40>)
    3816:	4798      	blx	r3
    3818:	0003      	movs	r3, r0
    381a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    381c:	1dfb      	adds	r3, r7, #7
    381e:	781b      	ldrb	r3, [r3, #0]
    3820:	221f      	movs	r2, #31
    3822:	4013      	ands	r3, r2
    3824:	2201      	movs	r2, #1
    3826:	409a      	lsls	r2, r3
    3828:	0013      	movs	r3, r2
    382a:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    382c:	683a      	ldr	r2, [r7, #0]
    382e:	68b9      	ldr	r1, [r7, #8]
    3830:	68fb      	ldr	r3, [r7, #12]
    3832:	0018      	movs	r0, r3
    3834:	4b03      	ldr	r3, [pc, #12]	; (3844 <system_pinmux_pin_set_config+0x44>)
    3836:	4798      	blx	r3
}
    3838:	46c0      	nop			; (mov r8, r8)
    383a:	46bd      	mov	sp, r7
    383c:	b004      	add	sp, #16
    383e:	bd80      	pop	{r7, pc}
    3840:	00003691 	.word	0x00003691
    3844:	000036f1 	.word	0x000036f1

00003848 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    3848:	b580      	push	{r7, lr}
    384a:	af00      	add	r7, sp, #0
	return;
    384c:	46c0      	nop			; (mov r8, r8)
}
    384e:	46bd      	mov	sp, r7
    3850:	bd80      	pop	{r7, pc}
	...

00003854 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    3854:	b580      	push	{r7, lr}
    3856:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    3858:	4b06      	ldr	r3, [pc, #24]	; (3874 <system_init+0x20>)
    385a:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    385c:	4b06      	ldr	r3, [pc, #24]	; (3878 <system_init+0x24>)
    385e:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    3860:	4b06      	ldr	r3, [pc, #24]	; (387c <system_init+0x28>)
    3862:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    3864:	4b06      	ldr	r3, [pc, #24]	; (3880 <system_init+0x2c>)
    3866:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    3868:	4b06      	ldr	r3, [pc, #24]	; (3884 <system_init+0x30>)
    386a:	4798      	blx	r3
}
    386c:	46c0      	nop			; (mov r8, r8)
    386e:	46bd      	mov	sp, r7
    3870:	bd80      	pop	{r7, pc}
    3872:	46c0      	nop			; (mov r8, r8)
    3874:	00003115 	.word	0x00003115
    3878:	00002d01 	.word	0x00002d01
    387c:	00003849 	.word	0x00003849
    3880:	000002b9 	.word	0x000002b9
    3884:	00003849 	.word	0x00003849

00003888 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    3888:	b580      	push	{r7, lr}
    388a:	b082      	sub	sp, #8
    388c:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    388e:	4b2f      	ldr	r3, [pc, #188]	; (394c <Reset_Handler+0xc4>)
    3890:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    3892:	4b2f      	ldr	r3, [pc, #188]	; (3950 <Reset_Handler+0xc8>)
    3894:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    3896:	687a      	ldr	r2, [r7, #4]
    3898:	683b      	ldr	r3, [r7, #0]
    389a:	429a      	cmp	r2, r3
    389c:	d00c      	beq.n	38b8 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    389e:	e007      	b.n	38b0 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    38a0:	683b      	ldr	r3, [r7, #0]
    38a2:	1d1a      	adds	r2, r3, #4
    38a4:	603a      	str	r2, [r7, #0]
    38a6:	687a      	ldr	r2, [r7, #4]
    38a8:	1d11      	adds	r1, r2, #4
    38aa:	6079      	str	r1, [r7, #4]
    38ac:	6812      	ldr	r2, [r2, #0]
    38ae:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
    38b0:	683a      	ldr	r2, [r7, #0]
    38b2:	4b28      	ldr	r3, [pc, #160]	; (3954 <Reset_Handler+0xcc>)
    38b4:	429a      	cmp	r2, r3
    38b6:	d3f3      	bcc.n	38a0 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    38b8:	4b27      	ldr	r3, [pc, #156]	; (3958 <Reset_Handler+0xd0>)
    38ba:	603b      	str	r3, [r7, #0]
    38bc:	e004      	b.n	38c8 <Reset_Handler+0x40>
                *pDest++ = 0;
    38be:	683b      	ldr	r3, [r7, #0]
    38c0:	1d1a      	adds	r2, r3, #4
    38c2:	603a      	str	r2, [r7, #0]
    38c4:	2200      	movs	r2, #0
    38c6:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
    38c8:	683a      	ldr	r2, [r7, #0]
    38ca:	4b24      	ldr	r3, [pc, #144]	; (395c <Reset_Handler+0xd4>)
    38cc:	429a      	cmp	r2, r3
    38ce:	d3f6      	bcc.n	38be <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    38d0:	4b23      	ldr	r3, [pc, #140]	; (3960 <Reset_Handler+0xd8>)
    38d2:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    38d4:	4b23      	ldr	r3, [pc, #140]	; (3964 <Reset_Handler+0xdc>)
    38d6:	687a      	ldr	r2, [r7, #4]
    38d8:	21ff      	movs	r1, #255	; 0xff
    38da:	438a      	bics	r2, r1
    38dc:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    38de:	4a22      	ldr	r2, [pc, #136]	; (3968 <Reset_Handler+0xe0>)
    38e0:	2390      	movs	r3, #144	; 0x90
    38e2:	005b      	lsls	r3, r3, #1
    38e4:	2102      	movs	r1, #2
    38e6:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    38e8:	4a20      	ldr	r2, [pc, #128]	; (396c <Reset_Handler+0xe4>)
    38ea:	78d3      	ldrb	r3, [r2, #3]
    38ec:	2103      	movs	r1, #3
    38ee:	438b      	bics	r3, r1
    38f0:	1c19      	adds	r1, r3, #0
    38f2:	2302      	movs	r3, #2
    38f4:	430b      	orrs	r3, r1
    38f6:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    38f8:	4a1c      	ldr	r2, [pc, #112]	; (396c <Reset_Handler+0xe4>)
    38fa:	78d3      	ldrb	r3, [r2, #3]
    38fc:	210c      	movs	r1, #12
    38fe:	438b      	bics	r3, r1
    3900:	1c19      	adds	r1, r3, #0
    3902:	2308      	movs	r3, #8
    3904:	430b      	orrs	r3, r1
    3906:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    3908:	4a19      	ldr	r2, [pc, #100]	; (3970 <Reset_Handler+0xe8>)
    390a:	7b93      	ldrb	r3, [r2, #14]
    390c:	2130      	movs	r1, #48	; 0x30
    390e:	438b      	bics	r3, r1
    3910:	1c19      	adds	r1, r3, #0
    3912:	2320      	movs	r3, #32
    3914:	430b      	orrs	r3, r1
    3916:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    3918:	4a15      	ldr	r2, [pc, #84]	; (3970 <Reset_Handler+0xe8>)
    391a:	7b93      	ldrb	r3, [r2, #14]
    391c:	210c      	movs	r1, #12
    391e:	438b      	bics	r3, r1
    3920:	1c19      	adds	r1, r3, #0
    3922:	2308      	movs	r3, #8
    3924:	430b      	orrs	r3, r1
    3926:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    3928:	4a11      	ldr	r2, [pc, #68]	; (3970 <Reset_Handler+0xe8>)
    392a:	7b93      	ldrb	r3, [r2, #14]
    392c:	2103      	movs	r1, #3
    392e:	438b      	bics	r3, r1
    3930:	1c19      	adds	r1, r3, #0
    3932:	2302      	movs	r3, #2
    3934:	430b      	orrs	r3, r1
    3936:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    3938:	4a0e      	ldr	r2, [pc, #56]	; (3974 <Reset_Handler+0xec>)
    393a:	6853      	ldr	r3, [r2, #4]
    393c:	2180      	movs	r1, #128	; 0x80
    393e:	430b      	orrs	r3, r1
    3940:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    3942:	4b0d      	ldr	r3, [pc, #52]	; (3978 <Reset_Handler+0xf0>)
    3944:	4798      	blx	r3

        /* Branch to main function */
        main();
    3946:	4b0d      	ldr	r3, [pc, #52]	; (397c <Reset_Handler+0xf4>)
    3948:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    394a:	e7fe      	b.n	394a <Reset_Handler+0xc2>
    394c:	00007508 	.word	0x00007508
    3950:	20000000 	.word	0x20000000
    3954:	20000084 	.word	0x20000084
    3958:	20000084 	.word	0x20000084
    395c:	20000194 	.word	0x20000194
    3960:	00000000 	.word	0x00000000
    3964:	e000ed00 	.word	0xe000ed00
    3968:	41007000 	.word	0x41007000
    396c:	41005000 	.word	0x41005000
    3970:	41004800 	.word	0x41004800
    3974:	41004000 	.word	0x41004000
    3978:	0000738d 	.word	0x0000738d
    397c:	00003999 	.word	0x00003999

00003980 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
uint32_t phantomISR = 9999;

void Dummy_Handler(void)
{
    3980:	b580      	push	{r7, lr}
    3982:	b082      	sub	sp, #8
    3984:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    3986:	f3ef 8305 	mrs	r3, IPSR
    398a:	607b      	str	r3, [r7, #4]
  return(result);
    398c:	687a      	ldr	r2, [r7, #4]
        while (1) {
			phantomISR = __get_IPSR();
    398e:	4b01      	ldr	r3, [pc, #4]	; (3994 <Dummy_Handler+0x14>)
    3990:	601a      	str	r2, [r3, #0]
    3992:	e7f8      	b.n	3986 <Dummy_Handler+0x6>
    3994:	2000000c 	.word	0x2000000c

00003998 <main>:
char TX_ADDR[5] = {0x2A,0x2A,0x2A,0x2A,0};
	
uint8_t data_array[16];

int main (void)
{
    3998:	b580      	push	{r7, lr}
    399a:	b082      	sub	sp, #8
    399c:	af00      	add	r7, sp, #0
	system_init();
    399e:	4b11      	ldr	r3, [pc, #68]	; (39e4 <main+0x4c>)
    39a0:	4798      	blx	r3
	delay_init();
    39a2:	4b11      	ldr	r3, [pc, #68]	; (39e8 <main+0x50>)
    39a4:	4798      	blx	r3
	spi_master_init();
    39a6:	4b11      	ldr	r3, [pc, #68]	; (39ec <main+0x54>)
    39a8:	4798      	blx	r3
	
	bme280_init();
    39aa:	4b11      	ldr	r3, [pc, #68]	; (39f0 <main+0x58>)
    39ac:	4798      	blx	r3
	//nrf24l01_init();
	
	
	//delay_ms(10);
	
	NRF_Enter_TX_Mode(TX_ADDR,RX_ADDR);
    39ae:	4a11      	ldr	r2, [pc, #68]	; (39f4 <main+0x5c>)
    39b0:	4b11      	ldr	r3, [pc, #68]	; (39f8 <main+0x60>)
    39b2:	0011      	movs	r1, r2
    39b4:	0018      	movs	r0, r3
    39b6:	4b11      	ldr	r3, [pc, #68]	; (39fc <main+0x64>)
    39b8:	4798      	blx	r3
	
	
	while (1)
	{
		bme280_get_all_calced(&bme280_data_object);
    39ba:	4b11      	ldr	r3, [pc, #68]	; (3a00 <main+0x68>)
    39bc:	0018      	movs	r0, r3
    39be:	4b11      	ldr	r3, [pc, #68]	; (3a04 <main+0x6c>)
    39c0:	4798      	blx	r3
		bme280_data_compress(&bme280_data_object,&data_array);
    39c2:	4a11      	ldr	r2, [pc, #68]	; (3a08 <main+0x70>)
    39c4:	4b0e      	ldr	r3, [pc, #56]	; (3a00 <main+0x68>)
    39c6:	0011      	movs	r1, r2
    39c8:	0018      	movs	r0, r3
    39ca:	4b10      	ldr	r3, [pc, #64]	; (3a0c <main+0x74>)
    39cc:	4798      	blx	r3
		uint32_t status = NRF_TX_data(&data_array,16);
    39ce:	4b0e      	ldr	r3, [pc, #56]	; (3a08 <main+0x70>)
    39d0:	2110      	movs	r1, #16
    39d2:	0018      	movs	r0, r3
    39d4:	4b0e      	ldr	r3, [pc, #56]	; (3a10 <main+0x78>)
    39d6:	4798      	blx	r3
    39d8:	0003      	movs	r3, r0
    39da:	607b      	str	r3, [r7, #4]
		//uint32_t status = NRF_TX(NRF_CONTACT_2BTN_V1,NRF_CMD_OFF);
		delay_ms(100);
    39dc:	2064      	movs	r0, #100	; 0x64
    39de:	4b0d      	ldr	r3, [pc, #52]	; (3a14 <main+0x7c>)
    39e0:	4798      	blx	r3
	{
    39e2:	e7ea      	b.n	39ba <main+0x22>
    39e4:	00003855 	.word	0x00003855
    39e8:	00000149 	.word	0x00000149
    39ec:	00001bc9 	.word	0x00001bc9
    39f0:	00001389 	.word	0x00001389
    39f4:	20000010 	.word	0x20000010
    39f8:	20000018 	.word	0x20000018
    39fc:	00001685 	.word	0x00001685
    3a00:	20000174 	.word	0x20000174
    3a04:	00001245 	.word	0x00001245
    3a08:	20000184 	.word	0x20000184
    3a0c:	00001415 	.word	0x00001415
    3a10:	000017dd 	.word	0x000017dd
    3a14:	000001a1 	.word	0x000001a1

00003a18 <log>:
    3a18:	b5f0      	push	{r4, r5, r6, r7, lr}
    3a1a:	46c6      	mov	lr, r8
    3a1c:	b500      	push	{lr}
    3a1e:	b08c      	sub	sp, #48	; 0x30
    3a20:	0004      	movs	r4, r0
    3a22:	000d      	movs	r5, r1
    3a24:	f000 fab8 	bl	3f98 <__ieee754_log>
    3a28:	4b3a      	ldr	r3, [pc, #232]	; (3b14 <log+0xfc>)
    3a2a:	0006      	movs	r6, r0
    3a2c:	781b      	ldrb	r3, [r3, #0]
    3a2e:	000f      	movs	r7, r1
    3a30:	b25b      	sxtb	r3, r3
    3a32:	4698      	mov	r8, r3
    3a34:	3301      	adds	r3, #1
    3a36:	d00f      	beq.n	3a58 <log+0x40>
    3a38:	0022      	movs	r2, r4
    3a3a:	002b      	movs	r3, r5
    3a3c:	0020      	movs	r0, r4
    3a3e:	0029      	movs	r1, r5
    3a40:	f003 fb0a 	bl	7058 <__aeabi_dcmpun>
    3a44:	2800      	cmp	r0, #0
    3a46:	d107      	bne.n	3a58 <log+0x40>
    3a48:	2200      	movs	r2, #0
    3a4a:	2300      	movs	r3, #0
    3a4c:	0020      	movs	r0, r4
    3a4e:	0029      	movs	r1, r5
    3a50:	f001 fe14 	bl	567c <__aeabi_dcmpgt>
    3a54:	2800      	cmp	r0, #0
    3a56:	d005      	beq.n	3a64 <log+0x4c>
    3a58:	0030      	movs	r0, r6
    3a5a:	0039      	movs	r1, r7
    3a5c:	b00c      	add	sp, #48	; 0x30
    3a5e:	bc04      	pop	{r2}
    3a60:	4690      	mov	r8, r2
    3a62:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3a64:	4b2c      	ldr	r3, [pc, #176]	; (3b18 <log+0x100>)
    3a66:	900a      	str	r0, [sp, #40]	; 0x28
    3a68:	9303      	str	r3, [sp, #12]
    3a6a:	4643      	mov	r3, r8
    3a6c:	9404      	str	r4, [sp, #16]
    3a6e:	9505      	str	r5, [sp, #20]
    3a70:	9406      	str	r4, [sp, #24]
    3a72:	9507      	str	r5, [sp, #28]
    3a74:	2b00      	cmp	r3, #0
    3a76:	d11a      	bne.n	3aae <log+0x96>
    3a78:	22e0      	movs	r2, #224	; 0xe0
    3a7a:	4b28      	ldr	r3, [pc, #160]	; (3b1c <log+0x104>)
    3a7c:	0612      	lsls	r2, r2, #24
    3a7e:	9208      	str	r2, [sp, #32]
    3a80:	9309      	str	r3, [sp, #36]	; 0x24
    3a82:	0020      	movs	r0, r4
    3a84:	2200      	movs	r2, #0
    3a86:	2300      	movs	r3, #0
    3a88:	0029      	movs	r1, r5
    3a8a:	f001 fddd 	bl	5648 <__aeabi_dcmpeq>
    3a8e:	2800      	cmp	r0, #0
    3a90:	d038      	beq.n	3b04 <log+0xec>
    3a92:	2302      	movs	r3, #2
    3a94:	9302      	str	r3, [sp, #8]
    3a96:	a802      	add	r0, sp, #8
    3a98:	f001 fb36 	bl	5108 <matherr>
    3a9c:	2800      	cmp	r0, #0
    3a9e:	d017      	beq.n	3ad0 <log+0xb8>
    3aa0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3aa2:	9301      	str	r3, [sp, #4]
    3aa4:	2b00      	cmp	r3, #0
    3aa6:	d118      	bne.n	3ada <log+0xc2>
    3aa8:	9e08      	ldr	r6, [sp, #32]
    3aaa:	9f09      	ldr	r7, [sp, #36]	; 0x24
    3aac:	e7d4      	b.n	3a58 <log+0x40>
    3aae:	2200      	movs	r2, #0
    3ab0:	4b1b      	ldr	r3, [pc, #108]	; (3b20 <log+0x108>)
    3ab2:	0020      	movs	r0, r4
    3ab4:	9208      	str	r2, [sp, #32]
    3ab6:	9309      	str	r3, [sp, #36]	; 0x24
    3ab8:	0029      	movs	r1, r5
    3aba:	2200      	movs	r2, #0
    3abc:	2300      	movs	r3, #0
    3abe:	f001 fdc3 	bl	5648 <__aeabi_dcmpeq>
    3ac2:	2800      	cmp	r0, #0
    3ac4:	d00f      	beq.n	3ae6 <log+0xce>
    3ac6:	2302      	movs	r3, #2
    3ac8:	9302      	str	r3, [sp, #8]
    3aca:	4643      	mov	r3, r8
    3acc:	2b02      	cmp	r3, #2
    3ace:	d1e2      	bne.n	3a96 <log+0x7e>
    3ad0:	f003 fc56 	bl	7380 <__errno>
    3ad4:	2322      	movs	r3, #34	; 0x22
    3ad6:	6003      	str	r3, [r0, #0]
    3ad8:	e7e2      	b.n	3aa0 <log+0x88>
    3ada:	f003 fc51 	bl	7380 <__errno>
    3ade:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3ae0:	9301      	str	r3, [sp, #4]
    3ae2:	6003      	str	r3, [r0, #0]
    3ae4:	e7e0      	b.n	3aa8 <log+0x90>
    3ae6:	2301      	movs	r3, #1
    3ae8:	9302      	str	r3, [sp, #8]
    3aea:	4643      	mov	r3, r8
    3aec:	2b02      	cmp	r3, #2
    3aee:	d10b      	bne.n	3b08 <log+0xf0>
    3af0:	f003 fc46 	bl	7380 <__errno>
    3af4:	2321      	movs	r3, #33	; 0x21
    3af6:	6003      	str	r3, [r0, #0]
    3af8:	480a      	ldr	r0, [pc, #40]	; (3b24 <log+0x10c>)
    3afa:	f001 fb07 	bl	510c <nan>
    3afe:	9008      	str	r0, [sp, #32]
    3b00:	9109      	str	r1, [sp, #36]	; 0x24
    3b02:	e7cd      	b.n	3aa0 <log+0x88>
    3b04:	2301      	movs	r3, #1
    3b06:	9302      	str	r3, [sp, #8]
    3b08:	a802      	add	r0, sp, #8
    3b0a:	f001 fafd 	bl	5108 <matherr>
    3b0e:	2800      	cmp	r0, #0
    3b10:	d1f2      	bne.n	3af8 <log+0xe0>
    3b12:	e7ed      	b.n	3af0 <log+0xd8>
    3b14:	2000001d 	.word	0x2000001d
    3b18:	00007444 	.word	0x00007444
    3b1c:	c7efffff 	.word	0xc7efffff
    3b20:	fff00000 	.word	0xfff00000
    3b24:	00007448 	.word	0x00007448

00003b28 <log10>:
    3b28:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b2a:	4647      	mov	r7, r8
    3b2c:	46ce      	mov	lr, r9
    3b2e:	b580      	push	{r7, lr}
    3b30:	b08d      	sub	sp, #52	; 0x34
    3b32:	0004      	movs	r4, r0
    3b34:	000d      	movs	r5, r1
    3b36:	f000 fc31 	bl	439c <__ieee754_log10>
    3b3a:	4b3c      	ldr	r3, [pc, #240]	; (3c2c <log10+0x104>)
    3b3c:	0006      	movs	r6, r0
    3b3e:	781b      	ldrb	r3, [r3, #0]
    3b40:	000f      	movs	r7, r1
    3b42:	b25b      	sxtb	r3, r3
    3b44:	4698      	mov	r8, r3
    3b46:	3301      	adds	r3, #1
    3b48:	d010      	beq.n	3b6c <log10+0x44>
    3b4a:	0022      	movs	r2, r4
    3b4c:	002b      	movs	r3, r5
    3b4e:	0020      	movs	r0, r4
    3b50:	0029      	movs	r1, r5
    3b52:	f003 fa81 	bl	7058 <__aeabi_dcmpun>
    3b56:	4681      	mov	r9, r0
    3b58:	2800      	cmp	r0, #0
    3b5a:	d107      	bne.n	3b6c <log10+0x44>
    3b5c:	2200      	movs	r2, #0
    3b5e:	2300      	movs	r3, #0
    3b60:	0020      	movs	r0, r4
    3b62:	0029      	movs	r1, r5
    3b64:	f001 fd80 	bl	5668 <__aeabi_dcmple>
    3b68:	2800      	cmp	r0, #0
    3b6a:	d106      	bne.n	3b7a <log10+0x52>
    3b6c:	0030      	movs	r0, r6
    3b6e:	0039      	movs	r1, r7
    3b70:	b00d      	add	sp, #52	; 0x34
    3b72:	bc0c      	pop	{r2, r3}
    3b74:	4690      	mov	r8, r2
    3b76:	4699      	mov	r9, r3
    3b78:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3b7a:	4b2d      	ldr	r3, [pc, #180]	; (3c30 <log10+0x108>)
    3b7c:	9404      	str	r4, [sp, #16]
    3b7e:	9505      	str	r5, [sp, #20]
    3b80:	9303      	str	r3, [sp, #12]
    3b82:	464b      	mov	r3, r9
    3b84:	930a      	str	r3, [sp, #40]	; 0x28
    3b86:	4643      	mov	r3, r8
    3b88:	9406      	str	r4, [sp, #24]
    3b8a:	9507      	str	r5, [sp, #28]
    3b8c:	2b00      	cmp	r3, #0
    3b8e:	d11a      	bne.n	3bc6 <log10+0x9e>
    3b90:	22e0      	movs	r2, #224	; 0xe0
    3b92:	4b28      	ldr	r3, [pc, #160]	; (3c34 <log10+0x10c>)
    3b94:	0612      	lsls	r2, r2, #24
    3b96:	9208      	str	r2, [sp, #32]
    3b98:	9309      	str	r3, [sp, #36]	; 0x24
    3b9a:	0020      	movs	r0, r4
    3b9c:	2200      	movs	r2, #0
    3b9e:	2300      	movs	r3, #0
    3ba0:	0029      	movs	r1, r5
    3ba2:	f001 fd51 	bl	5648 <__aeabi_dcmpeq>
    3ba6:	2800      	cmp	r0, #0
    3ba8:	d038      	beq.n	3c1c <log10+0xf4>
    3baa:	2302      	movs	r3, #2
    3bac:	9302      	str	r3, [sp, #8]
    3bae:	a802      	add	r0, sp, #8
    3bb0:	f001 faaa 	bl	5108 <matherr>
    3bb4:	2800      	cmp	r0, #0
    3bb6:	d017      	beq.n	3be8 <log10+0xc0>
    3bb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3bba:	9301      	str	r3, [sp, #4]
    3bbc:	2b00      	cmp	r3, #0
    3bbe:	d118      	bne.n	3bf2 <log10+0xca>
    3bc0:	9e08      	ldr	r6, [sp, #32]
    3bc2:	9f09      	ldr	r7, [sp, #36]	; 0x24
    3bc4:	e7d2      	b.n	3b6c <log10+0x44>
    3bc6:	2200      	movs	r2, #0
    3bc8:	4b1b      	ldr	r3, [pc, #108]	; (3c38 <log10+0x110>)
    3bca:	0020      	movs	r0, r4
    3bcc:	9208      	str	r2, [sp, #32]
    3bce:	9309      	str	r3, [sp, #36]	; 0x24
    3bd0:	0029      	movs	r1, r5
    3bd2:	2200      	movs	r2, #0
    3bd4:	2300      	movs	r3, #0
    3bd6:	f001 fd37 	bl	5648 <__aeabi_dcmpeq>
    3bda:	2800      	cmp	r0, #0
    3bdc:	d00f      	beq.n	3bfe <log10+0xd6>
    3bde:	2302      	movs	r3, #2
    3be0:	9302      	str	r3, [sp, #8]
    3be2:	4643      	mov	r3, r8
    3be4:	2b02      	cmp	r3, #2
    3be6:	d1e2      	bne.n	3bae <log10+0x86>
    3be8:	f003 fbca 	bl	7380 <__errno>
    3bec:	2322      	movs	r3, #34	; 0x22
    3bee:	6003      	str	r3, [r0, #0]
    3bf0:	e7e2      	b.n	3bb8 <log10+0x90>
    3bf2:	f003 fbc5 	bl	7380 <__errno>
    3bf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3bf8:	9301      	str	r3, [sp, #4]
    3bfa:	6003      	str	r3, [r0, #0]
    3bfc:	e7e0      	b.n	3bc0 <log10+0x98>
    3bfe:	2301      	movs	r3, #1
    3c00:	9302      	str	r3, [sp, #8]
    3c02:	4643      	mov	r3, r8
    3c04:	2b02      	cmp	r3, #2
    3c06:	d10b      	bne.n	3c20 <log10+0xf8>
    3c08:	f003 fbba 	bl	7380 <__errno>
    3c0c:	2321      	movs	r3, #33	; 0x21
    3c0e:	6003      	str	r3, [r0, #0]
    3c10:	480a      	ldr	r0, [pc, #40]	; (3c3c <log10+0x114>)
    3c12:	f001 fa7b 	bl	510c <nan>
    3c16:	9008      	str	r0, [sp, #32]
    3c18:	9109      	str	r1, [sp, #36]	; 0x24
    3c1a:	e7cd      	b.n	3bb8 <log10+0x90>
    3c1c:	2301      	movs	r3, #1
    3c1e:	9302      	str	r3, [sp, #8]
    3c20:	a802      	add	r0, sp, #8
    3c22:	f001 fa71 	bl	5108 <matherr>
    3c26:	2800      	cmp	r0, #0
    3c28:	d1f2      	bne.n	3c10 <log10+0xe8>
    3c2a:	e7ed      	b.n	3c08 <log10+0xe0>
    3c2c:	2000001d 	.word	0x2000001d
    3c30:	0000744c 	.word	0x0000744c
    3c34:	c7efffff 	.word	0xc7efffff
    3c38:	fff00000 	.word	0xfff00000
    3c3c:	00007448 	.word	0x00007448

00003c40 <pow>:
    3c40:	b5f0      	push	{r4, r5, r6, r7, lr}
    3c42:	4657      	mov	r7, sl
    3c44:	464e      	mov	r6, r9
    3c46:	46de      	mov	lr, fp
    3c48:	4645      	mov	r5, r8
    3c4a:	b5e0      	push	{r5, r6, r7, lr}
    3c4c:	b08f      	sub	sp, #60	; 0x3c
    3c4e:	001d      	movs	r5, r3
    3c50:	0006      	movs	r6, r0
    3c52:	000f      	movs	r7, r1
    3c54:	0014      	movs	r4, r2
    3c56:	f000 fc33 	bl	44c0 <__ieee754_pow>
    3c5a:	4bc7      	ldr	r3, [pc, #796]	; (3f78 <pow+0x338>)
    3c5c:	9000      	str	r0, [sp, #0]
    3c5e:	9101      	str	r1, [sp, #4]
    3c60:	469a      	mov	sl, r3
    3c62:	781b      	ldrb	r3, [r3, #0]
    3c64:	b25b      	sxtb	r3, r3
    3c66:	4699      	mov	r9, r3
    3c68:	3301      	adds	r3, #1
    3c6a:	d03e      	beq.n	3cea <pow+0xaa>
    3c6c:	0022      	movs	r2, r4
    3c6e:	002b      	movs	r3, r5
    3c70:	0020      	movs	r0, r4
    3c72:	0029      	movs	r1, r5
    3c74:	f003 f9f0 	bl	7058 <__aeabi_dcmpun>
    3c78:	4683      	mov	fp, r0
    3c7a:	2800      	cmp	r0, #0
    3c7c:	d135      	bne.n	3cea <pow+0xaa>
    3c7e:	0032      	movs	r2, r6
    3c80:	003b      	movs	r3, r7
    3c82:	0030      	movs	r0, r6
    3c84:	0039      	movs	r1, r7
    3c86:	f003 f9e7 	bl	7058 <__aeabi_dcmpun>
    3c8a:	2200      	movs	r2, #0
    3c8c:	9003      	str	r0, [sp, #12]
    3c8e:	2800      	cmp	r0, #0
    3c90:	d000      	beq.n	3c94 <pow+0x54>
    3c92:	e0b6      	b.n	3e02 <pow+0x1c2>
    3c94:	2300      	movs	r3, #0
    3c96:	0030      	movs	r0, r6
    3c98:	0039      	movs	r1, r7
    3c9a:	f001 fcd5 	bl	5648 <__aeabi_dcmpeq>
    3c9e:	2800      	cmp	r0, #0
    3ca0:	d02c      	beq.n	3cfc <pow+0xbc>
    3ca2:	2200      	movs	r2, #0
    3ca4:	2300      	movs	r3, #0
    3ca6:	0020      	movs	r0, r4
    3ca8:	0029      	movs	r1, r5
    3caa:	f001 fccd 	bl	5648 <__aeabi_dcmpeq>
    3cae:	4683      	mov	fp, r0
    3cb0:	2800      	cmp	r0, #0
    3cb2:	d100      	bne.n	3cb6 <pow+0x76>
    3cb4:	e077      	b.n	3da6 <pow+0x166>
    3cb6:	ab04      	add	r3, sp, #16
    3cb8:	4698      	mov	r8, r3
    3cba:	2301      	movs	r3, #1
    3cbc:	4642      	mov	r2, r8
    3cbe:	9304      	str	r3, [sp, #16]
    3cc0:	4bae      	ldr	r3, [pc, #696]	; (3f7c <pow+0x33c>)
    3cc2:	6053      	str	r3, [r2, #4]
    3cc4:	4643      	mov	r3, r8
    3cc6:	9a03      	ldr	r2, [sp, #12]
    3cc8:	611c      	str	r4, [r3, #16]
    3cca:	615d      	str	r5, [r3, #20]
    3ccc:	621a      	str	r2, [r3, #32]
    3cce:	609e      	str	r6, [r3, #8]
    3cd0:	60df      	str	r7, [r3, #12]
    3cd2:	4642      	mov	r2, r8
    3cd4:	2300      	movs	r3, #0
    3cd6:	2400      	movs	r4, #0
    3cd8:	6193      	str	r3, [r2, #24]
    3cda:	61d4      	str	r4, [r2, #28]
    3cdc:	464b      	mov	r3, r9
    3cde:	2b00      	cmp	r3, #0
    3ce0:	d04d      	beq.n	3d7e <pow+0x13e>
    3ce2:	2300      	movs	r3, #0
    3ce4:	4ca6      	ldr	r4, [pc, #664]	; (3f80 <pow+0x340>)
    3ce6:	9300      	str	r3, [sp, #0]
    3ce8:	9401      	str	r4, [sp, #4]
    3cea:	9800      	ldr	r0, [sp, #0]
    3cec:	9901      	ldr	r1, [sp, #4]
    3cee:	b00f      	add	sp, #60	; 0x3c
    3cf0:	bc3c      	pop	{r2, r3, r4, r5}
    3cf2:	4690      	mov	r8, r2
    3cf4:	4699      	mov	r9, r3
    3cf6:	46a2      	mov	sl, r4
    3cf8:	46ab      	mov	fp, r5
    3cfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3cfc:	9800      	ldr	r0, [sp, #0]
    3cfe:	9901      	ldr	r1, [sp, #4]
    3d00:	f001 f9f8 	bl	50f4 <finite>
    3d04:	4681      	mov	r9, r0
    3d06:	2800      	cmp	r0, #0
    3d08:	d100      	bne.n	3d0c <pow+0xcc>
    3d0a:	e09b      	b.n	3e44 <pow+0x204>
    3d0c:	9800      	ldr	r0, [sp, #0]
    3d0e:	9901      	ldr	r1, [sp, #4]
    3d10:	2200      	movs	r2, #0
    3d12:	2300      	movs	r3, #0
    3d14:	f001 fc98 	bl	5648 <__aeabi_dcmpeq>
    3d18:	2800      	cmp	r0, #0
    3d1a:	d0e6      	beq.n	3cea <pow+0xaa>
    3d1c:	0030      	movs	r0, r6
    3d1e:	0039      	movs	r1, r7
    3d20:	f001 f9e8 	bl	50f4 <finite>
    3d24:	2800      	cmp	r0, #0
    3d26:	d0e0      	beq.n	3cea <pow+0xaa>
    3d28:	0020      	movs	r0, r4
    3d2a:	0029      	movs	r1, r5
    3d2c:	f001 f9e2 	bl	50f4 <finite>
    3d30:	2800      	cmp	r0, #0
    3d32:	d0da      	beq.n	3cea <pow+0xaa>
    3d34:	ab04      	add	r3, sp, #16
    3d36:	4698      	mov	r8, r3
    3d38:	2304      	movs	r3, #4
    3d3a:	4642      	mov	r2, r8
    3d3c:	9304      	str	r3, [sp, #16]
    3d3e:	4b8f      	ldr	r3, [pc, #572]	; (3f7c <pow+0x33c>)
    3d40:	6114      	str	r4, [r2, #16]
    3d42:	6155      	str	r5, [r2, #20]
    3d44:	6053      	str	r3, [r2, #4]
    3d46:	2300      	movs	r3, #0
    3d48:	2400      	movs	r4, #0
    3d4a:	6213      	str	r3, [r2, #32]
    3d4c:	2300      	movs	r3, #0
    3d4e:	6193      	str	r3, [r2, #24]
    3d50:	61d4      	str	r4, [r2, #28]
    3d52:	4653      	mov	r3, sl
    3d54:	781b      	ldrb	r3, [r3, #0]
    3d56:	6096      	str	r6, [r2, #8]
    3d58:	60d7      	str	r7, [r2, #12]
    3d5a:	b25b      	sxtb	r3, r3
    3d5c:	2b02      	cmp	r3, #2
    3d5e:	d004      	beq.n	3d6a <pow+0x12a>
    3d60:	4640      	mov	r0, r8
    3d62:	f001 f9d1 	bl	5108 <matherr>
    3d66:	2800      	cmp	r0, #0
    3d68:	d10e      	bne.n	3d88 <pow+0x148>
    3d6a:	f003 fb09 	bl	7380 <__errno>
    3d6e:	2322      	movs	r3, #34	; 0x22
    3d70:	6003      	str	r3, [r0, #0]
    3d72:	e009      	b.n	3d88 <pow+0x148>
    3d74:	4642      	mov	r2, r8
    3d76:	2300      	movs	r3, #0
    3d78:	2400      	movs	r4, #0
    3d7a:	6193      	str	r3, [r2, #24]
    3d7c:	61d4      	str	r4, [r2, #28]
    3d7e:	4640      	mov	r0, r8
    3d80:	f001 f9c2 	bl	5108 <matherr>
    3d84:	2800      	cmp	r0, #0
    3d86:	d037      	beq.n	3df8 <pow+0x1b8>
    3d88:	4643      	mov	r3, r8
    3d8a:	6a1b      	ldr	r3, [r3, #32]
    3d8c:	2b00      	cmp	r3, #0
    3d8e:	d004      	beq.n	3d9a <pow+0x15a>
    3d90:	f003 faf6 	bl	7380 <__errno>
    3d94:	4643      	mov	r3, r8
    3d96:	6a1b      	ldr	r3, [r3, #32]
    3d98:	6003      	str	r3, [r0, #0]
    3d9a:	4643      	mov	r3, r8
    3d9c:	69dc      	ldr	r4, [r3, #28]
    3d9e:	699b      	ldr	r3, [r3, #24]
    3da0:	9300      	str	r3, [sp, #0]
    3da2:	9401      	str	r4, [sp, #4]
    3da4:	e7a1      	b.n	3cea <pow+0xaa>
    3da6:	0020      	movs	r0, r4
    3da8:	0029      	movs	r1, r5
    3daa:	f001 f9a3 	bl	50f4 <finite>
    3dae:	2800      	cmp	r0, #0
    3db0:	d09b      	beq.n	3cea <pow+0xaa>
    3db2:	2200      	movs	r2, #0
    3db4:	2300      	movs	r3, #0
    3db6:	0020      	movs	r0, r4
    3db8:	0029      	movs	r1, r5
    3dba:	f001 fc4b 	bl	5654 <__aeabi_dcmplt>
    3dbe:	2800      	cmp	r0, #0
    3dc0:	d100      	bne.n	3dc4 <pow+0x184>
    3dc2:	e792      	b.n	3cea <pow+0xaa>
    3dc4:	ab04      	add	r3, sp, #16
    3dc6:	4698      	mov	r8, r3
    3dc8:	2301      	movs	r3, #1
    3dca:	4642      	mov	r2, r8
    3dcc:	9304      	str	r3, [sp, #16]
    3dce:	4b6b      	ldr	r3, [pc, #428]	; (3f7c <pow+0x33c>)
    3dd0:	6053      	str	r3, [r2, #4]
    3dd2:	4643      	mov	r3, r8
    3dd4:	465a      	mov	r2, fp
    3dd6:	609e      	str	r6, [r3, #8]
    3dd8:	60df      	str	r7, [r3, #12]
    3dda:	621a      	str	r2, [r3, #32]
    3ddc:	611c      	str	r4, [r3, #16]
    3dde:	615d      	str	r5, [r3, #20]
    3de0:	4653      	mov	r3, sl
    3de2:	781b      	ldrb	r3, [r3, #0]
    3de4:	b25b      	sxtb	r3, r3
    3de6:	2b00      	cmp	r3, #0
    3de8:	d0c4      	beq.n	3d74 <pow+0x134>
    3dea:	2000      	movs	r0, #0
    3dec:	4642      	mov	r2, r8
    3dee:	4965      	ldr	r1, [pc, #404]	; (3f84 <pow+0x344>)
    3df0:	6190      	str	r0, [r2, #24]
    3df2:	61d1      	str	r1, [r2, #28]
    3df4:	2b02      	cmp	r3, #2
    3df6:	d1c2      	bne.n	3d7e <pow+0x13e>
    3df8:	f003 fac2 	bl	7380 <__errno>
    3dfc:	2321      	movs	r3, #33	; 0x21
    3dfe:	6003      	str	r3, [r0, #0]
    3e00:	e7c2      	b.n	3d88 <pow+0x148>
    3e02:	2300      	movs	r3, #0
    3e04:	0020      	movs	r0, r4
    3e06:	0029      	movs	r1, r5
    3e08:	f001 fc1e 	bl	5648 <__aeabi_dcmpeq>
    3e0c:	2800      	cmp	r0, #0
    3e0e:	d100      	bne.n	3e12 <pow+0x1d2>
    3e10:	e76b      	b.n	3cea <pow+0xaa>
    3e12:	ab04      	add	r3, sp, #16
    3e14:	4698      	mov	r8, r3
    3e16:	2301      	movs	r3, #1
    3e18:	4642      	mov	r2, r8
    3e1a:	9304      	str	r3, [sp, #16]
    3e1c:	4b57      	ldr	r3, [pc, #348]	; (3f7c <pow+0x33c>)
    3e1e:	4641      	mov	r1, r8
    3e20:	6053      	str	r3, [r2, #4]
    3e22:	4643      	mov	r3, r8
    3e24:	465a      	mov	r2, fp
    3e26:	621a      	str	r2, [r3, #32]
    3e28:	2200      	movs	r2, #0
    3e2a:	609e      	str	r6, [r3, #8]
    3e2c:	60df      	str	r7, [r3, #12]
    3e2e:	611c      	str	r4, [r3, #16]
    3e30:	615d      	str	r5, [r3, #20]
    3e32:	4b53      	ldr	r3, [pc, #332]	; (3f80 <pow+0x340>)
    3e34:	618a      	str	r2, [r1, #24]
    3e36:	61cb      	str	r3, [r1, #28]
    3e38:	9200      	str	r2, [sp, #0]
    3e3a:	9301      	str	r3, [sp, #4]
    3e3c:	464b      	mov	r3, r9
    3e3e:	2b02      	cmp	r3, #2
    3e40:	d19d      	bne.n	3d7e <pow+0x13e>
    3e42:	e752      	b.n	3cea <pow+0xaa>
    3e44:	0030      	movs	r0, r6
    3e46:	0039      	movs	r1, r7
    3e48:	f001 f954 	bl	50f4 <finite>
    3e4c:	2800      	cmp	r0, #0
    3e4e:	d100      	bne.n	3e52 <pow+0x212>
    3e50:	e75c      	b.n	3d0c <pow+0xcc>
    3e52:	0020      	movs	r0, r4
    3e54:	0029      	movs	r1, r5
    3e56:	f001 f94d 	bl	50f4 <finite>
    3e5a:	2800      	cmp	r0, #0
    3e5c:	d100      	bne.n	3e60 <pow+0x220>
    3e5e:	e755      	b.n	3d0c <pow+0xcc>
    3e60:	9800      	ldr	r0, [sp, #0]
    3e62:	9901      	ldr	r1, [sp, #4]
    3e64:	000b      	movs	r3, r1
    3e66:	0002      	movs	r2, r0
    3e68:	f003 f8f6 	bl	7058 <__aeabi_dcmpun>
    3e6c:	ab04      	add	r3, sp, #16
    3e6e:	4698      	mov	r8, r3
    3e70:	2800      	cmp	r0, #0
    3e72:	d161      	bne.n	3f38 <pow+0x2f8>
    3e74:	2303      	movs	r3, #3
    3e76:	4642      	mov	r2, r8
    3e78:	9304      	str	r3, [sp, #16]
    3e7a:	4b40      	ldr	r3, [pc, #256]	; (3f7c <pow+0x33c>)
    3e7c:	6210      	str	r0, [r2, #32]
    3e7e:	6053      	str	r3, [r2, #4]
    3e80:	4653      	mov	r3, sl
    3e82:	781b      	ldrb	r3, [r3, #0]
    3e84:	6096      	str	r6, [r2, #8]
    3e86:	60d7      	str	r7, [r2, #12]
    3e88:	b25b      	sxtb	r3, r3
    3e8a:	6114      	str	r4, [r2, #16]
    3e8c:	6155      	str	r5, [r2, #20]
    3e8e:	4699      	mov	r9, r3
    3e90:	2b00      	cmp	r3, #0
    3e92:	d12f      	bne.n	3ef4 <pow+0x2b4>
    3e94:	22e0      	movs	r2, #224	; 0xe0
    3e96:	4641      	mov	r1, r8
    3e98:	4b3b      	ldr	r3, [pc, #236]	; (3f88 <pow+0x348>)
    3e9a:	0612      	lsls	r2, r2, #24
    3e9c:	618a      	str	r2, [r1, #24]
    3e9e:	61cb      	str	r3, [r1, #28]
    3ea0:	0030      	movs	r0, r6
    3ea2:	2200      	movs	r2, #0
    3ea4:	2300      	movs	r3, #0
    3ea6:	0039      	movs	r1, r7
    3ea8:	f001 fbd4 	bl	5654 <__aeabi_dcmplt>
    3eac:	2800      	cmp	r0, #0
    3eae:	d100      	bne.n	3eb2 <pow+0x272>
    3eb0:	e756      	b.n	3d60 <pow+0x120>
    3eb2:	2200      	movs	r2, #0
    3eb4:	4b35      	ldr	r3, [pc, #212]	; (3f8c <pow+0x34c>)
    3eb6:	0020      	movs	r0, r4
    3eb8:	0029      	movs	r1, r5
    3eba:	f002 fb37 	bl	652c <__aeabi_dmul>
    3ebe:	0004      	movs	r4, r0
    3ec0:	000d      	movs	r5, r1
    3ec2:	f001 f929 	bl	5118 <rint>
    3ec6:	0002      	movs	r2, r0
    3ec8:	000b      	movs	r3, r1
    3eca:	0020      	movs	r0, r4
    3ecc:	0029      	movs	r1, r5
    3ece:	f001 fbbb 	bl	5648 <__aeabi_dcmpeq>
    3ed2:	2800      	cmp	r0, #0
    3ed4:	d105      	bne.n	3ee2 <pow+0x2a2>
    3ed6:	22e0      	movs	r2, #224	; 0xe0
    3ed8:	4b2d      	ldr	r3, [pc, #180]	; (3f90 <pow+0x350>)
    3eda:	0612      	lsls	r2, r2, #24
    3edc:	4641      	mov	r1, r8
    3ede:	618a      	str	r2, [r1, #24]
    3ee0:	61cb      	str	r3, [r1, #28]
    3ee2:	4653      	mov	r3, sl
    3ee4:	781b      	ldrb	r3, [r3, #0]
    3ee6:	b25b      	sxtb	r3, r3
    3ee8:	4699      	mov	r9, r3
    3eea:	464b      	mov	r3, r9
    3eec:	2b02      	cmp	r3, #2
    3eee:	d000      	beq.n	3ef2 <pow+0x2b2>
    3ef0:	e736      	b.n	3d60 <pow+0x120>
    3ef2:	e73a      	b.n	3d6a <pow+0x12a>
    3ef4:	2200      	movs	r2, #0
    3ef6:	4641      	mov	r1, r8
    3ef8:	4b26      	ldr	r3, [pc, #152]	; (3f94 <pow+0x354>)
    3efa:	0030      	movs	r0, r6
    3efc:	618a      	str	r2, [r1, #24]
    3efe:	61cb      	str	r3, [r1, #28]
    3f00:	2200      	movs	r2, #0
    3f02:	2300      	movs	r3, #0
    3f04:	0039      	movs	r1, r7
    3f06:	f001 fba5 	bl	5654 <__aeabi_dcmplt>
    3f0a:	2800      	cmp	r0, #0
    3f0c:	d0ed      	beq.n	3eea <pow+0x2aa>
    3f0e:	2200      	movs	r2, #0
    3f10:	4b1e      	ldr	r3, [pc, #120]	; (3f8c <pow+0x34c>)
    3f12:	0020      	movs	r0, r4
    3f14:	0029      	movs	r1, r5
    3f16:	f002 fb09 	bl	652c <__aeabi_dmul>
    3f1a:	0004      	movs	r4, r0
    3f1c:	000d      	movs	r5, r1
    3f1e:	f001 f8fb 	bl	5118 <rint>
    3f22:	0002      	movs	r2, r0
    3f24:	000b      	movs	r3, r1
    3f26:	0020      	movs	r0, r4
    3f28:	0029      	movs	r1, r5
    3f2a:	f001 fb8d 	bl	5648 <__aeabi_dcmpeq>
    3f2e:	2800      	cmp	r0, #0
    3f30:	d1d7      	bne.n	3ee2 <pow+0x2a2>
    3f32:	2200      	movs	r2, #0
    3f34:	4b13      	ldr	r3, [pc, #76]	; (3f84 <pow+0x344>)
    3f36:	e7d1      	b.n	3edc <pow+0x29c>
    3f38:	2301      	movs	r3, #1
    3f3a:	4642      	mov	r2, r8
    3f3c:	9304      	str	r3, [sp, #16]
    3f3e:	4b0f      	ldr	r3, [pc, #60]	; (3f7c <pow+0x33c>)
    3f40:	6053      	str	r3, [r2, #4]
    3f42:	4643      	mov	r3, r8
    3f44:	464a      	mov	r2, r9
    3f46:	611c      	str	r4, [r3, #16]
    3f48:	615d      	str	r5, [r3, #20]
    3f4a:	621a      	str	r2, [r3, #32]
    3f4c:	609e      	str	r6, [r3, #8]
    3f4e:	60df      	str	r7, [r3, #12]
    3f50:	2400      	movs	r4, #0
    3f52:	4653      	mov	r3, sl
    3f54:	571c      	ldrsb	r4, [r3, r4]
    3f56:	2c00      	cmp	r4, #0
    3f58:	d100      	bne.n	3f5c <pow+0x31c>
    3f5a:	e70b      	b.n	3d74 <pow+0x134>
    3f5c:	2300      	movs	r3, #0
    3f5e:	2200      	movs	r2, #0
    3f60:	0019      	movs	r1, r3
    3f62:	0010      	movs	r0, r2
    3f64:	f001 feae 	bl	5cc4 <__aeabi_ddiv>
    3f68:	4643      	mov	r3, r8
    3f6a:	6198      	str	r0, [r3, #24]
    3f6c:	61d9      	str	r1, [r3, #28]
    3f6e:	2c02      	cmp	r4, #2
    3f70:	d100      	bne.n	3f74 <pow+0x334>
    3f72:	e741      	b.n	3df8 <pow+0x1b8>
    3f74:	e703      	b.n	3d7e <pow+0x13e>
    3f76:	46c0      	nop			; (mov r8, r8)
    3f78:	2000001d 	.word	0x2000001d
    3f7c:	00007454 	.word	0x00007454
    3f80:	3ff00000 	.word	0x3ff00000
    3f84:	fff00000 	.word	0xfff00000
    3f88:	47efffff 	.word	0x47efffff
    3f8c:	3fe00000 	.word	0x3fe00000
    3f90:	c7efffff 	.word	0xc7efffff
    3f94:	7ff00000 	.word	0x7ff00000

00003f98 <__ieee754_log>:
    3f98:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f9a:	46d6      	mov	lr, sl
    3f9c:	464f      	mov	r7, r9
    3f9e:	4646      	mov	r6, r8
    3fa0:	b5c0      	push	{r6, r7, lr}
    3fa2:	4ada      	ldr	r2, [pc, #872]	; (430c <__ieee754_log+0x374>)
    3fa4:	b088      	sub	sp, #32
    3fa6:	000b      	movs	r3, r1
    3fa8:	4291      	cmp	r1, r2
    3faa:	dc55      	bgt.n	4058 <__ieee754_log+0xc0>
    3fac:	004a      	lsls	r2, r1, #1
    3fae:	0852      	lsrs	r2, r2, #1
    3fb0:	4302      	orrs	r2, r0
    3fb2:	d100      	bne.n	3fb6 <__ieee754_log+0x1e>
    3fb4:	e0ef      	b.n	4196 <__ieee754_log+0x1fe>
    3fb6:	2900      	cmp	r1, #0
    3fb8:	da00      	bge.n	3fbc <__ieee754_log+0x24>
    3fba:	e179      	b.n	42b0 <__ieee754_log+0x318>
    3fbc:	4bd4      	ldr	r3, [pc, #848]	; (4310 <__ieee754_log+0x378>)
    3fbe:	2200      	movs	r2, #0
    3fc0:	f002 fab4 	bl	652c <__aeabi_dmul>
    3fc4:	2536      	movs	r5, #54	; 0x36
    3fc6:	4cd3      	ldr	r4, [pc, #844]	; (4314 <__ieee754_log+0x37c>)
    3fc8:	000b      	movs	r3, r1
    3fca:	426d      	negs	r5, r5
    3fcc:	42a3      	cmp	r3, r4
    3fce:	dc47      	bgt.n	4060 <__ieee754_log+0xc8>
    3fd0:	151a      	asrs	r2, r3, #20
    3fd2:	4cd1      	ldr	r4, [pc, #836]	; (4318 <__ieee754_log+0x380>)
    3fd4:	031b      	lsls	r3, r3, #12
    3fd6:	0b1b      	lsrs	r3, r3, #12
    3fd8:	4698      	mov	r8, r3
    3fda:	46a4      	mov	ip, r4
    3fdc:	2480      	movs	r4, #128	; 0x80
    3fde:	4bcf      	ldr	r3, [pc, #828]	; (431c <__ieee754_log+0x384>)
    3fe0:	0364      	lsls	r4, r4, #13
    3fe2:	4443      	add	r3, r8
    3fe4:	4023      	ands	r3, r4
    3fe6:	4cce      	ldr	r4, [pc, #824]	; (4320 <__ieee754_log+0x388>)
    3fe8:	4462      	add	r2, ip
    3fea:	1952      	adds	r2, r2, r5
    3fec:	405c      	eors	r4, r3
    3fee:	4645      	mov	r5, r8
    3ff0:	151b      	asrs	r3, r3, #20
    3ff2:	4699      	mov	r9, r3
    3ff4:	4325      	orrs	r5, r4
    3ff6:	4bca      	ldr	r3, [pc, #808]	; (4320 <__ieee754_log+0x388>)
    3ff8:	0029      	movs	r1, r5
    3ffa:	4491      	add	r9, r2
    3ffc:	2200      	movs	r2, #0
    3ffe:	f002 fd15 	bl	6a2c <__aeabi_dsub>
    4002:	4643      	mov	r3, r8
    4004:	3302      	adds	r3, #2
    4006:	031b      	lsls	r3, r3, #12
    4008:	0006      	movs	r6, r0
    400a:	000f      	movs	r7, r1
    400c:	0b1b      	lsrs	r3, r3, #12
    400e:	2200      	movs	r2, #0
    4010:	2b02      	cmp	r3, #2
    4012:	dc2f      	bgt.n	4074 <__ieee754_log+0xdc>
    4014:	2300      	movs	r3, #0
    4016:	f001 fb17 	bl	5648 <__aeabi_dcmpeq>
    401a:	2800      	cmp	r0, #0
    401c:	d100      	bne.n	4020 <__ieee754_log+0x88>
    401e:	e0c1      	b.n	41a4 <__ieee754_log+0x20c>
    4020:	464b      	mov	r3, r9
    4022:	2b00      	cmp	r3, #0
    4024:	d100      	bne.n	4028 <__ieee754_log+0x90>
    4026:	e14c      	b.n	42c2 <__ieee754_log+0x32a>
    4028:	4648      	mov	r0, r9
    402a:	f003 f835 	bl	7098 <__aeabi_i2d>
    402e:	4abd      	ldr	r2, [pc, #756]	; (4324 <__ieee754_log+0x38c>)
    4030:	4bbd      	ldr	r3, [pc, #756]	; (4328 <__ieee754_log+0x390>)
    4032:	0004      	movs	r4, r0
    4034:	000d      	movs	r5, r1
    4036:	f002 fa79 	bl	652c <__aeabi_dmul>
    403a:	4abc      	ldr	r2, [pc, #752]	; (432c <__ieee754_log+0x394>)
    403c:	0006      	movs	r6, r0
    403e:	000f      	movs	r7, r1
    4040:	4bbb      	ldr	r3, [pc, #748]	; (4330 <__ieee754_log+0x398>)
    4042:	0020      	movs	r0, r4
    4044:	0029      	movs	r1, r5
    4046:	f002 fa71 	bl	652c <__aeabi_dmul>
    404a:	0002      	movs	r2, r0
    404c:	000b      	movs	r3, r1
    404e:	0030      	movs	r0, r6
    4050:	0039      	movs	r1, r7
    4052:	f001 fb27 	bl	56a4 <__aeabi_dadd>
    4056:	e007      	b.n	4068 <__ieee754_log+0xd0>
    4058:	4cae      	ldr	r4, [pc, #696]	; (4314 <__ieee754_log+0x37c>)
    405a:	2500      	movs	r5, #0
    405c:	42a3      	cmp	r3, r4
    405e:	ddb7      	ble.n	3fd0 <__ieee754_log+0x38>
    4060:	0002      	movs	r2, r0
    4062:	000b      	movs	r3, r1
    4064:	f001 fb1e 	bl	56a4 <__aeabi_dadd>
    4068:	b008      	add	sp, #32
    406a:	bc1c      	pop	{r2, r3, r4}
    406c:	4690      	mov	r8, r2
    406e:	4699      	mov	r9, r3
    4070:	46a2      	mov	sl, r4
    4072:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4074:	2380      	movs	r3, #128	; 0x80
    4076:	05db      	lsls	r3, r3, #23
    4078:	f001 fb14 	bl	56a4 <__aeabi_dadd>
    407c:	0002      	movs	r2, r0
    407e:	000b      	movs	r3, r1
    4080:	0030      	movs	r0, r6
    4082:	0039      	movs	r1, r7
    4084:	f001 fe1e 	bl	5cc4 <__aeabi_ddiv>
    4088:	0004      	movs	r4, r0
    408a:	4648      	mov	r0, r9
    408c:	000d      	movs	r5, r1
    408e:	f003 f803 	bl	7098 <__aeabi_i2d>
    4092:	0022      	movs	r2, r4
    4094:	9002      	str	r0, [sp, #8]
    4096:	9103      	str	r1, [sp, #12]
    4098:	002b      	movs	r3, r5
    409a:	0020      	movs	r0, r4
    409c:	0029      	movs	r1, r5
    409e:	9404      	str	r4, [sp, #16]
    40a0:	9505      	str	r5, [sp, #20]
    40a2:	f002 fa43 	bl	652c <__aeabi_dmul>
    40a6:	0004      	movs	r4, r0
    40a8:	000d      	movs	r5, r1
    40aa:	4ba2      	ldr	r3, [pc, #648]	; (4334 <__ieee754_log+0x39c>)
    40ac:	0002      	movs	r2, r0
    40ae:	4443      	add	r3, r8
    40b0:	469a      	mov	sl, r3
    40b2:	000b      	movs	r3, r1
    40b4:	9400      	str	r4, [sp, #0]
    40b6:	9501      	str	r5, [sp, #4]
    40b8:	f002 fa38 	bl	652c <__aeabi_dmul>
    40bc:	0004      	movs	r4, r0
    40be:	000d      	movs	r5, r1
    40c0:	4a9d      	ldr	r2, [pc, #628]	; (4338 <__ieee754_log+0x3a0>)
    40c2:	4b9e      	ldr	r3, [pc, #632]	; (433c <__ieee754_log+0x3a4>)
    40c4:	f002 fa32 	bl	652c <__aeabi_dmul>
    40c8:	4a9d      	ldr	r2, [pc, #628]	; (4340 <__ieee754_log+0x3a8>)
    40ca:	4b9e      	ldr	r3, [pc, #632]	; (4344 <__ieee754_log+0x3ac>)
    40cc:	f001 faea 	bl	56a4 <__aeabi_dadd>
    40d0:	0022      	movs	r2, r4
    40d2:	002b      	movs	r3, r5
    40d4:	f002 fa2a 	bl	652c <__aeabi_dmul>
    40d8:	4a9b      	ldr	r2, [pc, #620]	; (4348 <__ieee754_log+0x3b0>)
    40da:	4b9c      	ldr	r3, [pc, #624]	; (434c <__ieee754_log+0x3b4>)
    40dc:	f001 fae2 	bl	56a4 <__aeabi_dadd>
    40e0:	0022      	movs	r2, r4
    40e2:	002b      	movs	r3, r5
    40e4:	f002 fa22 	bl	652c <__aeabi_dmul>
    40e8:	4a99      	ldr	r2, [pc, #612]	; (4350 <__ieee754_log+0x3b8>)
    40ea:	4b9a      	ldr	r3, [pc, #616]	; (4354 <__ieee754_log+0x3bc>)
    40ec:	f001 fada 	bl	56a4 <__aeabi_dadd>
    40f0:	9a00      	ldr	r2, [sp, #0]
    40f2:	9b01      	ldr	r3, [sp, #4]
    40f4:	f002 fa1a 	bl	652c <__aeabi_dmul>
    40f8:	4a97      	ldr	r2, [pc, #604]	; (4358 <__ieee754_log+0x3c0>)
    40fa:	9000      	str	r0, [sp, #0]
    40fc:	9101      	str	r1, [sp, #4]
    40fe:	4b97      	ldr	r3, [pc, #604]	; (435c <__ieee754_log+0x3c4>)
    4100:	0020      	movs	r0, r4
    4102:	0029      	movs	r1, r5
    4104:	f002 fa12 	bl	652c <__aeabi_dmul>
    4108:	4a95      	ldr	r2, [pc, #596]	; (4360 <__ieee754_log+0x3c8>)
    410a:	4b96      	ldr	r3, [pc, #600]	; (4364 <__ieee754_log+0x3cc>)
    410c:	f001 faca 	bl	56a4 <__aeabi_dadd>
    4110:	0022      	movs	r2, r4
    4112:	002b      	movs	r3, r5
    4114:	f002 fa0a 	bl	652c <__aeabi_dmul>
    4118:	4a93      	ldr	r2, [pc, #588]	; (4368 <__ieee754_log+0x3d0>)
    411a:	4b94      	ldr	r3, [pc, #592]	; (436c <__ieee754_log+0x3d4>)
    411c:	f001 fac2 	bl	56a4 <__aeabi_dadd>
    4120:	0022      	movs	r2, r4
    4122:	002b      	movs	r3, r5
    4124:	f002 fa02 	bl	652c <__aeabi_dmul>
    4128:	000b      	movs	r3, r1
    412a:	0002      	movs	r2, r0
    412c:	9800      	ldr	r0, [sp, #0]
    412e:	9901      	ldr	r1, [sp, #4]
    4130:	f001 fab8 	bl	56a4 <__aeabi_dadd>
    4134:	000d      	movs	r5, r1
    4136:	4641      	mov	r1, r8
    4138:	4b8d      	ldr	r3, [pc, #564]	; (4370 <__ieee754_log+0x3d8>)
    413a:	0004      	movs	r4, r0
    413c:	1a5b      	subs	r3, r3, r1
    413e:	4651      	mov	r1, sl
    4140:	430b      	orrs	r3, r1
    4142:	2b00      	cmp	r3, #0
    4144:	dd54      	ble.n	41f0 <__ieee754_log+0x258>
    4146:	2200      	movs	r2, #0
    4148:	4b8a      	ldr	r3, [pc, #552]	; (4374 <__ieee754_log+0x3dc>)
    414a:	0030      	movs	r0, r6
    414c:	0039      	movs	r1, r7
    414e:	f002 f9ed 	bl	652c <__aeabi_dmul>
    4152:	0032      	movs	r2, r6
    4154:	003b      	movs	r3, r7
    4156:	f002 f9e9 	bl	652c <__aeabi_dmul>
    415a:	464b      	mov	r3, r9
    415c:	000a      	movs	r2, r1
    415e:	0001      	movs	r1, r0
    4160:	9100      	str	r1, [sp, #0]
    4162:	9201      	str	r2, [sp, #4]
    4164:	2b00      	cmp	r3, #0
    4166:	d172      	bne.n	424e <__ieee754_log+0x2b6>
    4168:	0013      	movs	r3, r2
    416a:	0029      	movs	r1, r5
    416c:	0002      	movs	r2, r0
    416e:	0020      	movs	r0, r4
    4170:	f001 fa98 	bl	56a4 <__aeabi_dadd>
    4174:	9a04      	ldr	r2, [sp, #16]
    4176:	9b05      	ldr	r3, [sp, #20]
    4178:	f002 f9d8 	bl	652c <__aeabi_dmul>
    417c:	0002      	movs	r2, r0
    417e:	000b      	movs	r3, r1
    4180:	9800      	ldr	r0, [sp, #0]
    4182:	9901      	ldr	r1, [sp, #4]
    4184:	f002 fc52 	bl	6a2c <__aeabi_dsub>
    4188:	0002      	movs	r2, r0
    418a:	000b      	movs	r3, r1
    418c:	0030      	movs	r0, r6
    418e:	0039      	movs	r1, r7
    4190:	f002 fc4c 	bl	6a2c <__aeabi_dsub>
    4194:	e768      	b.n	4068 <__ieee754_log+0xd0>
    4196:	2200      	movs	r2, #0
    4198:	2300      	movs	r3, #0
    419a:	2000      	movs	r0, #0
    419c:	4976      	ldr	r1, [pc, #472]	; (4378 <__ieee754_log+0x3e0>)
    419e:	f001 fd91 	bl	5cc4 <__aeabi_ddiv>
    41a2:	e761      	b.n	4068 <__ieee754_log+0xd0>
    41a4:	4a75      	ldr	r2, [pc, #468]	; (437c <__ieee754_log+0x3e4>)
    41a6:	4b76      	ldr	r3, [pc, #472]	; (4380 <__ieee754_log+0x3e8>)
    41a8:	0030      	movs	r0, r6
    41aa:	0039      	movs	r1, r7
    41ac:	f002 f9be 	bl	652c <__aeabi_dmul>
    41b0:	0002      	movs	r2, r0
    41b2:	000b      	movs	r3, r1
    41b4:	2000      	movs	r0, #0
    41b6:	496f      	ldr	r1, [pc, #444]	; (4374 <__ieee754_log+0x3dc>)
    41b8:	f002 fc38 	bl	6a2c <__aeabi_dsub>
    41bc:	0032      	movs	r2, r6
    41be:	0004      	movs	r4, r0
    41c0:	000d      	movs	r5, r1
    41c2:	003b      	movs	r3, r7
    41c4:	0030      	movs	r0, r6
    41c6:	0039      	movs	r1, r7
    41c8:	f002 f9b0 	bl	652c <__aeabi_dmul>
    41cc:	000b      	movs	r3, r1
    41ce:	0002      	movs	r2, r0
    41d0:	0029      	movs	r1, r5
    41d2:	0020      	movs	r0, r4
    41d4:	f002 f9aa 	bl	652c <__aeabi_dmul>
    41d8:	464b      	mov	r3, r9
    41da:	0004      	movs	r4, r0
    41dc:	000d      	movs	r5, r1
    41de:	2b00      	cmp	r3, #0
    41e0:	d172      	bne.n	42c8 <__ieee754_log+0x330>
    41e2:	0002      	movs	r2, r0
    41e4:	000b      	movs	r3, r1
    41e6:	0030      	movs	r0, r6
    41e8:	0039      	movs	r1, r7
    41ea:	f002 fc1f 	bl	6a2c <__aeabi_dsub>
    41ee:	e73b      	b.n	4068 <__ieee754_log+0xd0>
    41f0:	464b      	mov	r3, r9
    41f2:	2b00      	cmp	r3, #0
    41f4:	d100      	bne.n	41f8 <__ieee754_log+0x260>
    41f6:	e0c5      	b.n	4384 <__ieee754_log+0x3ec>
    41f8:	9802      	ldr	r0, [sp, #8]
    41fa:	9903      	ldr	r1, [sp, #12]
    41fc:	4a49      	ldr	r2, [pc, #292]	; (4324 <__ieee754_log+0x38c>)
    41fe:	4b4a      	ldr	r3, [pc, #296]	; (4328 <__ieee754_log+0x390>)
    4200:	f002 f994 	bl	652c <__aeabi_dmul>
    4204:	0022      	movs	r2, r4
    4206:	9000      	str	r0, [sp, #0]
    4208:	9101      	str	r1, [sp, #4]
    420a:	002b      	movs	r3, r5
    420c:	0030      	movs	r0, r6
    420e:	0039      	movs	r1, r7
    4210:	f002 fc0c 	bl	6a2c <__aeabi_dsub>
    4214:	9a04      	ldr	r2, [sp, #16]
    4216:	9b05      	ldr	r3, [sp, #20]
    4218:	f002 f988 	bl	652c <__aeabi_dmul>
    421c:	4a43      	ldr	r2, [pc, #268]	; (432c <__ieee754_log+0x394>)
    421e:	0004      	movs	r4, r0
    4220:	000d      	movs	r5, r1
    4222:	9802      	ldr	r0, [sp, #8]
    4224:	9903      	ldr	r1, [sp, #12]
    4226:	4b42      	ldr	r3, [pc, #264]	; (4330 <__ieee754_log+0x398>)
    4228:	f002 f980 	bl	652c <__aeabi_dmul>
    422c:	0002      	movs	r2, r0
    422e:	000b      	movs	r3, r1
    4230:	0020      	movs	r0, r4
    4232:	0029      	movs	r1, r5
    4234:	f002 fbfa 	bl	6a2c <__aeabi_dsub>
    4238:	0032      	movs	r2, r6
    423a:	003b      	movs	r3, r7
    423c:	f002 fbf6 	bl	6a2c <__aeabi_dsub>
    4240:	0002      	movs	r2, r0
    4242:	000b      	movs	r3, r1
    4244:	9800      	ldr	r0, [sp, #0]
    4246:	9901      	ldr	r1, [sp, #4]
    4248:	f002 fbf0 	bl	6a2c <__aeabi_dsub>
    424c:	e70c      	b.n	4068 <__ieee754_log+0xd0>
    424e:	4a35      	ldr	r2, [pc, #212]	; (4324 <__ieee754_log+0x38c>)
    4250:	4b35      	ldr	r3, [pc, #212]	; (4328 <__ieee754_log+0x390>)
    4252:	9802      	ldr	r0, [sp, #8]
    4254:	9903      	ldr	r1, [sp, #12]
    4256:	f002 f969 	bl	652c <__aeabi_dmul>
    425a:	9a00      	ldr	r2, [sp, #0]
    425c:	9b01      	ldr	r3, [sp, #4]
    425e:	9006      	str	r0, [sp, #24]
    4260:	9107      	str	r1, [sp, #28]
    4262:	0020      	movs	r0, r4
    4264:	0029      	movs	r1, r5
    4266:	f001 fa1d 	bl	56a4 <__aeabi_dadd>
    426a:	9a04      	ldr	r2, [sp, #16]
    426c:	9b05      	ldr	r3, [sp, #20]
    426e:	f002 f95d 	bl	652c <__aeabi_dmul>
    4272:	4a2e      	ldr	r2, [pc, #184]	; (432c <__ieee754_log+0x394>)
    4274:	0004      	movs	r4, r0
    4276:	000d      	movs	r5, r1
    4278:	9802      	ldr	r0, [sp, #8]
    427a:	9903      	ldr	r1, [sp, #12]
    427c:	4b2c      	ldr	r3, [pc, #176]	; (4330 <__ieee754_log+0x398>)
    427e:	f002 f955 	bl	652c <__aeabi_dmul>
    4282:	0002      	movs	r2, r0
    4284:	000b      	movs	r3, r1
    4286:	0020      	movs	r0, r4
    4288:	0029      	movs	r1, r5
    428a:	f001 fa0b 	bl	56a4 <__aeabi_dadd>
    428e:	0002      	movs	r2, r0
    4290:	000b      	movs	r3, r1
    4292:	9800      	ldr	r0, [sp, #0]
    4294:	9901      	ldr	r1, [sp, #4]
    4296:	f002 fbc9 	bl	6a2c <__aeabi_dsub>
    429a:	0032      	movs	r2, r6
    429c:	003b      	movs	r3, r7
    429e:	f002 fbc5 	bl	6a2c <__aeabi_dsub>
    42a2:	0002      	movs	r2, r0
    42a4:	000b      	movs	r3, r1
    42a6:	9806      	ldr	r0, [sp, #24]
    42a8:	9907      	ldr	r1, [sp, #28]
    42aa:	f002 fbbf 	bl	6a2c <__aeabi_dsub>
    42ae:	e6db      	b.n	4068 <__ieee754_log+0xd0>
    42b0:	0002      	movs	r2, r0
    42b2:	000b      	movs	r3, r1
    42b4:	f002 fbba 	bl	6a2c <__aeabi_dsub>
    42b8:	2200      	movs	r2, #0
    42ba:	2300      	movs	r3, #0
    42bc:	f001 fd02 	bl	5cc4 <__aeabi_ddiv>
    42c0:	e6d2      	b.n	4068 <__ieee754_log+0xd0>
    42c2:	2000      	movs	r0, #0
    42c4:	2100      	movs	r1, #0
    42c6:	e6cf      	b.n	4068 <__ieee754_log+0xd0>
    42c8:	4648      	mov	r0, r9
    42ca:	f002 fee5 	bl	7098 <__aeabi_i2d>
    42ce:	4a15      	ldr	r2, [pc, #84]	; (4324 <__ieee754_log+0x38c>)
    42d0:	4b15      	ldr	r3, [pc, #84]	; (4328 <__ieee754_log+0x390>)
    42d2:	9000      	str	r0, [sp, #0]
    42d4:	9101      	str	r1, [sp, #4]
    42d6:	f002 f929 	bl	652c <__aeabi_dmul>
    42da:	4a14      	ldr	r2, [pc, #80]	; (432c <__ieee754_log+0x394>)
    42dc:	9002      	str	r0, [sp, #8]
    42de:	9103      	str	r1, [sp, #12]
    42e0:	9800      	ldr	r0, [sp, #0]
    42e2:	9901      	ldr	r1, [sp, #4]
    42e4:	4b12      	ldr	r3, [pc, #72]	; (4330 <__ieee754_log+0x398>)
    42e6:	f002 f921 	bl	652c <__aeabi_dmul>
    42ea:	0002      	movs	r2, r0
    42ec:	000b      	movs	r3, r1
    42ee:	0020      	movs	r0, r4
    42f0:	0029      	movs	r1, r5
    42f2:	f002 fb9b 	bl	6a2c <__aeabi_dsub>
    42f6:	0032      	movs	r2, r6
    42f8:	003b      	movs	r3, r7
    42fa:	f002 fb97 	bl	6a2c <__aeabi_dsub>
    42fe:	0002      	movs	r2, r0
    4300:	000b      	movs	r3, r1
    4302:	9802      	ldr	r0, [sp, #8]
    4304:	9903      	ldr	r1, [sp, #12]
    4306:	f002 fb91 	bl	6a2c <__aeabi_dsub>
    430a:	e6ad      	b.n	4068 <__ieee754_log+0xd0>
    430c:	000fffff 	.word	0x000fffff
    4310:	43500000 	.word	0x43500000
    4314:	7fefffff 	.word	0x7fefffff
    4318:	fffffc01 	.word	0xfffffc01
    431c:	00095f64 	.word	0x00095f64
    4320:	3ff00000 	.word	0x3ff00000
    4324:	fee00000 	.word	0xfee00000
    4328:	3fe62e42 	.word	0x3fe62e42
    432c:	35793c76 	.word	0x35793c76
    4330:	3dea39ef 	.word	0x3dea39ef
    4334:	fff9eb86 	.word	0xfff9eb86
    4338:	df3e5244 	.word	0xdf3e5244
    433c:	3fc2f112 	.word	0x3fc2f112
    4340:	96cb03de 	.word	0x96cb03de
    4344:	3fc74664 	.word	0x3fc74664
    4348:	94229359 	.word	0x94229359
    434c:	3fd24924 	.word	0x3fd24924
    4350:	55555593 	.word	0x55555593
    4354:	3fe55555 	.word	0x3fe55555
    4358:	d078c69f 	.word	0xd078c69f
    435c:	3fc39a09 	.word	0x3fc39a09
    4360:	1d8e78af 	.word	0x1d8e78af
    4364:	3fcc71c5 	.word	0x3fcc71c5
    4368:	9997fa04 	.word	0x9997fa04
    436c:	3fd99999 	.word	0x3fd99999
    4370:	0006b851 	.word	0x0006b851
    4374:	3fe00000 	.word	0x3fe00000
    4378:	c3500000 	.word	0xc3500000
    437c:	55555555 	.word	0x55555555
    4380:	3fd55555 	.word	0x3fd55555
    4384:	0022      	movs	r2, r4
    4386:	002b      	movs	r3, r5
    4388:	0030      	movs	r0, r6
    438a:	0039      	movs	r1, r7
    438c:	f002 fb4e 	bl	6a2c <__aeabi_dsub>
    4390:	9a04      	ldr	r2, [sp, #16]
    4392:	9b05      	ldr	r3, [sp, #20]
    4394:	f002 f8ca 	bl	652c <__aeabi_dmul>
    4398:	e6f6      	b.n	4188 <__ieee754_log+0x1f0>
    439a:	46c0      	nop			; (mov r8, r8)

0000439c <__ieee754_log10>:
    439c:	b5f0      	push	{r4, r5, r6, r7, lr}
    439e:	46ce      	mov	lr, r9
    43a0:	4647      	mov	r7, r8
    43a2:	b580      	push	{r7, lr}
    43a4:	4a3a      	ldr	r2, [pc, #232]	; (4490 <__ieee754_log10+0xf4>)
    43a6:	b083      	sub	sp, #12
    43a8:	0004      	movs	r4, r0
    43aa:	000d      	movs	r5, r1
    43ac:	000b      	movs	r3, r1
    43ae:	4291      	cmp	r1, r2
    43b0:	dc1c      	bgt.n	43ec <__ieee754_log10+0x50>
    43b2:	004a      	lsls	r2, r1, #1
    43b4:	0852      	lsrs	r2, r2, #1
    43b6:	4302      	orrs	r2, r0
    43b8:	d05a      	beq.n	4470 <__ieee754_log10+0xd4>
    43ba:	2900      	cmp	r1, #0
    43bc:	db5f      	blt.n	447e <__ieee754_log10+0xe2>
    43be:	2200      	movs	r2, #0
    43c0:	4b34      	ldr	r3, [pc, #208]	; (4494 <__ieee754_log10+0xf8>)
    43c2:	f002 f8b3 	bl	652c <__aeabi_dmul>
    43c6:	000d      	movs	r5, r1
    43c8:	000b      	movs	r3, r1
    43ca:	2136      	movs	r1, #54	; 0x36
    43cc:	4a32      	ldr	r2, [pc, #200]	; (4498 <__ieee754_log10+0xfc>)
    43ce:	0004      	movs	r4, r0
    43d0:	4249      	negs	r1, r1
    43d2:	4293      	cmp	r3, r2
    43d4:	dd0e      	ble.n	43f4 <__ieee754_log10+0x58>
    43d6:	0022      	movs	r2, r4
    43d8:	002b      	movs	r3, r5
    43da:	0020      	movs	r0, r4
    43dc:	0029      	movs	r1, r5
    43de:	f001 f961 	bl	56a4 <__aeabi_dadd>
    43e2:	b003      	add	sp, #12
    43e4:	bc0c      	pop	{r2, r3}
    43e6:	4690      	mov	r8, r2
    43e8:	4699      	mov	r9, r3
    43ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    43ec:	4a2a      	ldr	r2, [pc, #168]	; (4498 <__ieee754_log10+0xfc>)
    43ee:	2100      	movs	r1, #0
    43f0:	4293      	cmp	r3, r2
    43f2:	dcf0      	bgt.n	43d6 <__ieee754_log10+0x3a>
    43f4:	4a29      	ldr	r2, [pc, #164]	; (449c <__ieee754_log10+0x100>)
    43f6:	1518      	asrs	r0, r3, #20
    43f8:	4694      	mov	ip, r2
    43fa:	4460      	add	r0, ip
    43fc:	1840      	adds	r0, r0, r1
    43fe:	0fc2      	lsrs	r2, r0, #31
    4400:	4691      	mov	r9, r2
    4402:	031b      	lsls	r3, r3, #12
    4404:	0b1b      	lsrs	r3, r3, #12
    4406:	4448      	add	r0, r9
    4408:	4698      	mov	r8, r3
    440a:	f002 fe45 	bl	7098 <__aeabi_i2d>
    440e:	464a      	mov	r2, r9
    4410:	4b23      	ldr	r3, [pc, #140]	; (44a0 <__ieee754_log10+0x104>)
    4412:	0006      	movs	r6, r0
    4414:	1a9b      	subs	r3, r3, r2
    4416:	4642      	mov	r2, r8
    4418:	051b      	lsls	r3, r3, #20
    441a:	431a      	orrs	r2, r3
    441c:	000f      	movs	r7, r1
    441e:	0020      	movs	r0, r4
    4420:	0011      	movs	r1, r2
    4422:	f7ff fdb9 	bl	3f98 <__ieee754_log>
    4426:	4a1f      	ldr	r2, [pc, #124]	; (44a4 <__ieee754_log10+0x108>)
    4428:	0004      	movs	r4, r0
    442a:	000d      	movs	r5, r1
    442c:	4b1e      	ldr	r3, [pc, #120]	; (44a8 <__ieee754_log10+0x10c>)
    442e:	0030      	movs	r0, r6
    4430:	0039      	movs	r1, r7
    4432:	f002 f87b 	bl	652c <__aeabi_dmul>
    4436:	4a1d      	ldr	r2, [pc, #116]	; (44ac <__ieee754_log10+0x110>)
    4438:	9000      	str	r0, [sp, #0]
    443a:	9101      	str	r1, [sp, #4]
    443c:	4b1c      	ldr	r3, [pc, #112]	; (44b0 <__ieee754_log10+0x114>)
    443e:	0020      	movs	r0, r4
    4440:	0029      	movs	r1, r5
    4442:	f002 f873 	bl	652c <__aeabi_dmul>
    4446:	0002      	movs	r2, r0
    4448:	000b      	movs	r3, r1
    444a:	9800      	ldr	r0, [sp, #0]
    444c:	9901      	ldr	r1, [sp, #4]
    444e:	f001 f929 	bl	56a4 <__aeabi_dadd>
    4452:	4a18      	ldr	r2, [pc, #96]	; (44b4 <__ieee754_log10+0x118>)
    4454:	0004      	movs	r4, r0
    4456:	000d      	movs	r5, r1
    4458:	4b17      	ldr	r3, [pc, #92]	; (44b8 <__ieee754_log10+0x11c>)
    445a:	0030      	movs	r0, r6
    445c:	0039      	movs	r1, r7
    445e:	f002 f865 	bl	652c <__aeabi_dmul>
    4462:	0002      	movs	r2, r0
    4464:	000b      	movs	r3, r1
    4466:	0020      	movs	r0, r4
    4468:	0029      	movs	r1, r5
    446a:	f001 f91b 	bl	56a4 <__aeabi_dadd>
    446e:	e7b8      	b.n	43e2 <__ieee754_log10+0x46>
    4470:	2200      	movs	r2, #0
    4472:	2300      	movs	r3, #0
    4474:	2000      	movs	r0, #0
    4476:	4911      	ldr	r1, [pc, #68]	; (44bc <__ieee754_log10+0x120>)
    4478:	f001 fc24 	bl	5cc4 <__aeabi_ddiv>
    447c:	e7b1      	b.n	43e2 <__ieee754_log10+0x46>
    447e:	0002      	movs	r2, r0
    4480:	000b      	movs	r3, r1
    4482:	f002 fad3 	bl	6a2c <__aeabi_dsub>
    4486:	2200      	movs	r2, #0
    4488:	2300      	movs	r3, #0
    448a:	f001 fc1b 	bl	5cc4 <__aeabi_ddiv>
    448e:	e7a8      	b.n	43e2 <__ieee754_log10+0x46>
    4490:	000fffff 	.word	0x000fffff
    4494:	43500000 	.word	0x43500000
    4498:	7fefffff 	.word	0x7fefffff
    449c:	fffffc01 	.word	0xfffffc01
    44a0:	000003ff 	.word	0x000003ff
    44a4:	11f12b36 	.word	0x11f12b36
    44a8:	3d59fef3 	.word	0x3d59fef3
    44ac:	1526e50e 	.word	0x1526e50e
    44b0:	3fdbcb7b 	.word	0x3fdbcb7b
    44b4:	509f6000 	.word	0x509f6000
    44b8:	3fd34413 	.word	0x3fd34413
    44bc:	c3500000 	.word	0xc3500000

000044c0 <__ieee754_pow>:
    44c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    44c2:	4657      	mov	r7, sl
    44c4:	464e      	mov	r6, r9
    44c6:	4645      	mov	r5, r8
    44c8:	46de      	mov	lr, fp
    44ca:	001c      	movs	r4, r3
    44cc:	0013      	movs	r3, r2
    44ce:	b5e0      	push	{r5, r6, r7, lr}
    44d0:	0065      	lsls	r5, r4, #1
    44d2:	b091      	sub	sp, #68	; 0x44
    44d4:	086d      	lsrs	r5, r5, #1
    44d6:	9300      	str	r3, [sp, #0]
    44d8:	9401      	str	r4, [sp, #4]
    44da:	0007      	movs	r7, r0
    44dc:	000e      	movs	r6, r1
    44de:	4680      	mov	r8, r0
    44e0:	4689      	mov	r9, r1
    44e2:	46a2      	mov	sl, r4
    44e4:	432b      	orrs	r3, r5
    44e6:	d031      	beq.n	454c <__ieee754_pow+0x8c>
    44e8:	4b67      	ldr	r3, [pc, #412]	; (4688 <__ieee754_pow+0x1c8>)
    44ea:	0074      	lsls	r4, r6, #1
    44ec:	0864      	lsrs	r4, r4, #1
    44ee:	429c      	cmp	r4, r3
    44f0:	dc27      	bgt.n	4542 <__ieee754_pow+0x82>
    44f2:	d024      	beq.n	453e <__ieee754_pow+0x7e>
    44f4:	429d      	cmp	r5, r3
    44f6:	dc24      	bgt.n	4542 <__ieee754_pow+0x82>
    44f8:	4b63      	ldr	r3, [pc, #396]	; (4688 <__ieee754_pow+0x1c8>)
    44fa:	429d      	cmp	r5, r3
    44fc:	d100      	bne.n	4500 <__ieee754_pow+0x40>
    44fe:	e081      	b.n	4604 <__ieee754_pow+0x144>
    4500:	2300      	movs	r3, #0
    4502:	469b      	mov	fp, r3
    4504:	464b      	mov	r3, r9
    4506:	2b00      	cmp	r3, #0
    4508:	da00      	bge.n	450c <__ieee754_pow+0x4c>
    450a:	e07f      	b.n	460c <__ieee754_pow+0x14c>
    450c:	2a00      	cmp	r2, #0
    450e:	d12c      	bne.n	456a <__ieee754_pow+0xaa>
    4510:	4b5d      	ldr	r3, [pc, #372]	; (4688 <__ieee754_pow+0x1c8>)
    4512:	429d      	cmp	r5, r3
    4514:	d100      	bne.n	4518 <__ieee754_pow+0x58>
    4516:	e097      	b.n	4648 <__ieee754_pow+0x188>
    4518:	4b5c      	ldr	r3, [pc, #368]	; (468c <__ieee754_pow+0x1cc>)
    451a:	429d      	cmp	r5, r3
    451c:	d066      	beq.n	45ec <__ieee754_pow+0x12c>
    451e:	2380      	movs	r3, #128	; 0x80
    4520:	05db      	lsls	r3, r3, #23
    4522:	459a      	cmp	sl, r3
    4524:	d100      	bne.n	4528 <__ieee754_pow+0x68>
    4526:	e3b9      	b.n	4c9c <__ieee754_pow+0x7dc>
    4528:	4b59      	ldr	r3, [pc, #356]	; (4690 <__ieee754_pow+0x1d0>)
    452a:	459a      	cmp	sl, r3
    452c:	d11d      	bne.n	456a <__ieee754_pow+0xaa>
    452e:	464b      	mov	r3, r9
    4530:	2b00      	cmp	r3, #0
    4532:	db1a      	blt.n	456a <__ieee754_pow+0xaa>
    4534:	0038      	movs	r0, r7
    4536:	0031      	movs	r1, r6
    4538:	f000 fcf8 	bl	4f2c <__ieee754_sqrt>
    453c:	e008      	b.n	4550 <__ieee754_pow+0x90>
    453e:	2800      	cmp	r0, #0
    4540:	d00d      	beq.n	455e <__ieee754_pow+0x9e>
    4542:	4b54      	ldr	r3, [pc, #336]	; (4694 <__ieee754_pow+0x1d4>)
    4544:	469c      	mov	ip, r3
    4546:	4464      	add	r4, ip
    4548:	4327      	orrs	r7, r4
    454a:	d10a      	bne.n	4562 <__ieee754_pow+0xa2>
    454c:	2000      	movs	r0, #0
    454e:	494f      	ldr	r1, [pc, #316]	; (468c <__ieee754_pow+0x1cc>)
    4550:	b011      	add	sp, #68	; 0x44
    4552:	bc3c      	pop	{r2, r3, r4, r5}
    4554:	4690      	mov	r8, r2
    4556:	4699      	mov	r9, r3
    4558:	46a2      	mov	sl, r4
    455a:	46ab      	mov	fp, r5
    455c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    455e:	42a5      	cmp	r5, r4
    4560:	ddca      	ble.n	44f8 <__ieee754_pow+0x38>
    4562:	484d      	ldr	r0, [pc, #308]	; (4698 <__ieee754_pow+0x1d8>)
    4564:	f000 fdd2 	bl	510c <nan>
    4568:	e7f2      	b.n	4550 <__ieee754_pow+0x90>
    456a:	0038      	movs	r0, r7
    456c:	0031      	movs	r1, r6
    456e:	f000 fdbd 	bl	50ec <fabs>
    4572:	4643      	mov	r3, r8
    4574:	2b00      	cmp	r3, #0
    4576:	d11d      	bne.n	45b4 <__ieee754_pow+0xf4>
    4578:	2c00      	cmp	r4, #0
    457a:	d004      	beq.n	4586 <__ieee754_pow+0xc6>
    457c:	4a43      	ldr	r2, [pc, #268]	; (468c <__ieee754_pow+0x1cc>)
    457e:	00b3      	lsls	r3, r6, #2
    4580:	089b      	lsrs	r3, r3, #2
    4582:	4293      	cmp	r3, r2
    4584:	d116      	bne.n	45b4 <__ieee754_pow+0xf4>
    4586:	4653      	mov	r3, sl
    4588:	2b00      	cmp	r3, #0
    458a:	da00      	bge.n	458e <__ieee754_pow+0xce>
    458c:	e3c5      	b.n	4d1a <__ieee754_pow+0x85a>
    458e:	464b      	mov	r3, r9
    4590:	2b00      	cmp	r3, #0
    4592:	dadd      	bge.n	4550 <__ieee754_pow+0x90>
    4594:	4b3f      	ldr	r3, [pc, #252]	; (4694 <__ieee754_pow+0x1d4>)
    4596:	469c      	mov	ip, r3
    4598:	465b      	mov	r3, fp
    459a:	4464      	add	r4, ip
    459c:	431c      	orrs	r4, r3
    459e:	d101      	bne.n	45a4 <__ieee754_pow+0xe4>
    45a0:	f000 fc53 	bl	4e4a <__ieee754_pow+0x98a>
    45a4:	465b      	mov	r3, fp
    45a6:	2b01      	cmp	r3, #1
    45a8:	d1d2      	bne.n	4550 <__ieee754_pow+0x90>
    45aa:	2480      	movs	r4, #128	; 0x80
    45ac:	0624      	lsls	r4, r4, #24
    45ae:	190b      	adds	r3, r1, r4
    45b0:	0019      	movs	r1, r3
    45b2:	e7cd      	b.n	4550 <__ieee754_pow+0x90>
    45b4:	0ff3      	lsrs	r3, r6, #31
    45b6:	3b01      	subs	r3, #1
    45b8:	4698      	mov	r8, r3
    45ba:	465b      	mov	r3, fp
    45bc:	4642      	mov	r2, r8
    45be:	4313      	orrs	r3, r2
    45c0:	d057      	beq.n	4672 <__ieee754_pow+0x1b2>
    45c2:	4b36      	ldr	r3, [pc, #216]	; (469c <__ieee754_pow+0x1dc>)
    45c4:	429d      	cmp	r5, r3
    45c6:	dd77      	ble.n	46b8 <__ieee754_pow+0x1f8>
    45c8:	4b35      	ldr	r3, [pc, #212]	; (46a0 <__ieee754_pow+0x1e0>)
    45ca:	429d      	cmp	r5, r3
    45cc:	dc00      	bgt.n	45d0 <__ieee754_pow+0x110>
    45ce:	e3b1      	b.n	4d34 <__ieee754_pow+0x874>
    45d0:	4b34      	ldr	r3, [pc, #208]	; (46a4 <__ieee754_pow+0x1e4>)
    45d2:	429c      	cmp	r4, r3
    45d4:	dc00      	bgt.n	45d8 <__ieee754_pow+0x118>
    45d6:	e3a8      	b.n	4d2a <__ieee754_pow+0x86a>
    45d8:	4653      	mov	r3, sl
    45da:	2b00      	cmp	r3, #0
    45dc:	dd43      	ble.n	4666 <__ieee754_pow+0x1a6>
    45de:	4a32      	ldr	r2, [pc, #200]	; (46a8 <__ieee754_pow+0x1e8>)
    45e0:	4b32      	ldr	r3, [pc, #200]	; (46ac <__ieee754_pow+0x1ec>)
    45e2:	0010      	movs	r0, r2
    45e4:	0019      	movs	r1, r3
    45e6:	f001 ffa1 	bl	652c <__aeabi_dmul>
    45ea:	e7b1      	b.n	4550 <__ieee754_pow+0x90>
    45ec:	4653      	mov	r3, sl
    45ee:	0038      	movs	r0, r7
    45f0:	0031      	movs	r1, r6
    45f2:	2b00      	cmp	r3, #0
    45f4:	daac      	bge.n	4550 <__ieee754_pow+0x90>
    45f6:	003a      	movs	r2, r7
    45f8:	0033      	movs	r3, r6
    45fa:	2000      	movs	r0, #0
    45fc:	4923      	ldr	r1, [pc, #140]	; (468c <__ieee754_pow+0x1cc>)
    45fe:	f001 fb61 	bl	5cc4 <__aeabi_ddiv>
    4602:	e7a5      	b.n	4550 <__ieee754_pow+0x90>
    4604:	2a00      	cmp	r2, #0
    4606:	d100      	bne.n	460a <__ieee754_pow+0x14a>
    4608:	e77a      	b.n	4500 <__ieee754_pow+0x40>
    460a:	e79a      	b.n	4542 <__ieee754_pow+0x82>
    460c:	4b28      	ldr	r3, [pc, #160]	; (46b0 <__ieee754_pow+0x1f0>)
    460e:	429d      	cmp	r5, r3
    4610:	dc2c      	bgt.n	466c <__ieee754_pow+0x1ac>
    4612:	4b24      	ldr	r3, [pc, #144]	; (46a4 <__ieee754_pow+0x1e4>)
    4614:	429d      	cmp	r5, r3
    4616:	dc00      	bgt.n	461a <__ieee754_pow+0x15a>
    4618:	e778      	b.n	450c <__ieee754_pow+0x4c>
    461a:	4926      	ldr	r1, [pc, #152]	; (46b4 <__ieee754_pow+0x1f4>)
    461c:	152b      	asrs	r3, r5, #20
    461e:	468c      	mov	ip, r1
    4620:	4463      	add	r3, ip
    4622:	2b14      	cmp	r3, #20
    4624:	dc01      	bgt.n	462a <__ieee754_pow+0x16a>
    4626:	f000 fbf3 	bl	4e10 <__ieee754_pow+0x950>
    462a:	2134      	movs	r1, #52	; 0x34
    462c:	1acb      	subs	r3, r1, r3
    462e:	9900      	ldr	r1, [sp, #0]
    4630:	40d9      	lsrs	r1, r3
    4632:	0008      	movs	r0, r1
    4634:	4098      	lsls	r0, r3
    4636:	4282      	cmp	r2, r0
    4638:	d000      	beq.n	463c <__ieee754_pow+0x17c>
    463a:	e767      	b.n	450c <__ieee754_pow+0x4c>
    463c:	2301      	movs	r3, #1
    463e:	4019      	ands	r1, r3
    4640:	3301      	adds	r3, #1
    4642:	1a5b      	subs	r3, r3, r1
    4644:	469b      	mov	fp, r3
    4646:	e761      	b.n	450c <__ieee754_pow+0x4c>
    4648:	4b12      	ldr	r3, [pc, #72]	; (4694 <__ieee754_pow+0x1d4>)
    464a:	18e3      	adds	r3, r4, r3
    464c:	431f      	orrs	r7, r3
    464e:	d100      	bne.n	4652 <__ieee754_pow+0x192>
    4650:	e77c      	b.n	454c <__ieee754_pow+0x8c>
    4652:	4b14      	ldr	r3, [pc, #80]	; (46a4 <__ieee754_pow+0x1e4>)
    4654:	429c      	cmp	r4, r3
    4656:	dc00      	bgt.n	465a <__ieee754_pow+0x19a>
    4658:	e327      	b.n	4caa <__ieee754_pow+0x7ea>
    465a:	9800      	ldr	r0, [sp, #0]
    465c:	9901      	ldr	r1, [sp, #4]
    465e:	4653      	mov	r3, sl
    4660:	2b00      	cmp	r3, #0
    4662:	db00      	blt.n	4666 <__ieee754_pow+0x1a6>
    4664:	e774      	b.n	4550 <__ieee754_pow+0x90>
    4666:	2000      	movs	r0, #0
    4668:	2100      	movs	r1, #0
    466a:	e771      	b.n	4550 <__ieee754_pow+0x90>
    466c:	2302      	movs	r3, #2
    466e:	469b      	mov	fp, r3
    4670:	e74c      	b.n	450c <__ieee754_pow+0x4c>
    4672:	003a      	movs	r2, r7
    4674:	0033      	movs	r3, r6
    4676:	0038      	movs	r0, r7
    4678:	0031      	movs	r1, r6
    467a:	f002 f9d7 	bl	6a2c <__aeabi_dsub>
    467e:	0002      	movs	r2, r0
    4680:	000b      	movs	r3, r1
    4682:	f001 fb1f 	bl	5cc4 <__aeabi_ddiv>
    4686:	e763      	b.n	4550 <__ieee754_pow+0x90>
    4688:	7ff00000 	.word	0x7ff00000
    468c:	3ff00000 	.word	0x3ff00000
    4690:	3fe00000 	.word	0x3fe00000
    4694:	c0100000 	.word	0xc0100000
    4698:	00007448 	.word	0x00007448
    469c:	41e00000 	.word	0x41e00000
    46a0:	43f00000 	.word	0x43f00000
    46a4:	3fefffff 	.word	0x3fefffff
    46a8:	8800759c 	.word	0x8800759c
    46ac:	7e37e43c 	.word	0x7e37e43c
    46b0:	433fffff 	.word	0x433fffff
    46b4:	fffffc01 	.word	0xfffffc01
    46b8:	4be9      	ldr	r3, [pc, #932]	; (4a60 <__ieee754_pow+0x5a0>)
    46ba:	2200      	movs	r2, #0
    46bc:	429c      	cmp	r4, r3
    46be:	dc06      	bgt.n	46ce <__ieee754_pow+0x20e>
    46c0:	2200      	movs	r2, #0
    46c2:	4be8      	ldr	r3, [pc, #928]	; (4a64 <__ieee754_pow+0x5a4>)
    46c4:	f001 ff32 	bl	652c <__aeabi_dmul>
    46c8:	2235      	movs	r2, #53	; 0x35
    46ca:	000c      	movs	r4, r1
    46cc:	4252      	negs	r2, r2
    46ce:	4de6      	ldr	r5, [pc, #920]	; (4a68 <__ieee754_pow+0x5a8>)
    46d0:	1523      	asrs	r3, r4, #20
    46d2:	46ac      	mov	ip, r5
    46d4:	4463      	add	r3, ip
    46d6:	4699      	mov	r9, r3
    46d8:	0324      	lsls	r4, r4, #12
    46da:	4de4      	ldr	r5, [pc, #912]	; (4a6c <__ieee754_pow+0x5ac>)
    46dc:	4be4      	ldr	r3, [pc, #912]	; (4a70 <__ieee754_pow+0x5b0>)
    46de:	0b24      	lsrs	r4, r4, #12
    46e0:	4491      	add	r9, r2
    46e2:	4325      	orrs	r5, r4
    46e4:	429c      	cmp	r4, r3
    46e6:	dd09      	ble.n	46fc <__ieee754_pow+0x23c>
    46e8:	4be2      	ldr	r3, [pc, #904]	; (4a74 <__ieee754_pow+0x5b4>)
    46ea:	429c      	cmp	r4, r3
    46ec:	dc00      	bgt.n	46f0 <__ieee754_pow+0x230>
    46ee:	e3b6      	b.n	4e5e <__ieee754_pow+0x99e>
    46f0:	2301      	movs	r3, #1
    46f2:	469c      	mov	ip, r3
    46f4:	4be0      	ldr	r3, [pc, #896]	; (4a78 <__ieee754_pow+0x5b8>)
    46f6:	44e1      	add	r9, ip
    46f8:	469c      	mov	ip, r3
    46fa:	4465      	add	r5, ip
    46fc:	2300      	movs	r3, #0
    46fe:	2400      	movs	r4, #0
    4700:	2200      	movs	r2, #0
    4702:	9308      	str	r3, [sp, #32]
    4704:	9409      	str	r4, [sp, #36]	; 0x24
    4706:	930c      	str	r3, [sp, #48]	; 0x30
    4708:	940d      	str	r4, [sp, #52]	; 0x34
    470a:	2400      	movs	r4, #0
    470c:	4bd7      	ldr	r3, [pc, #860]	; (4a6c <__ieee754_pow+0x5ac>)
    470e:	9206      	str	r2, [sp, #24]
    4710:	9307      	str	r3, [sp, #28]
    4712:	9a06      	ldr	r2, [sp, #24]
    4714:	9b07      	ldr	r3, [sp, #28]
    4716:	0029      	movs	r1, r5
    4718:	900a      	str	r0, [sp, #40]	; 0x28
    471a:	910b      	str	r1, [sp, #44]	; 0x2c
    471c:	f002 f986 	bl	6a2c <__aeabi_dsub>
    4720:	9a06      	ldr	r2, [sp, #24]
    4722:	9b07      	ldr	r3, [sp, #28]
    4724:	0006      	movs	r6, r0
    4726:	000f      	movs	r7, r1
    4728:	980a      	ldr	r0, [sp, #40]	; 0x28
    472a:	990b      	ldr	r1, [sp, #44]	; 0x2c
    472c:	f000 ffba 	bl	56a4 <__aeabi_dadd>
    4730:	0002      	movs	r2, r0
    4732:	000b      	movs	r3, r1
    4734:	2000      	movs	r0, #0
    4736:	49cd      	ldr	r1, [pc, #820]	; (4a6c <__ieee754_pow+0x5ac>)
    4738:	f001 fac4 	bl	5cc4 <__aeabi_ddiv>
    473c:	000a      	movs	r2, r1
    473e:	0001      	movs	r1, r0
    4740:	0013      	movs	r3, r2
    4742:	910e      	str	r1, [sp, #56]	; 0x38
    4744:	920f      	str	r2, [sp, #60]	; 0x3c
    4746:	0002      	movs	r2, r0
    4748:	0039      	movs	r1, r7
    474a:	0030      	movs	r0, r6
    474c:	f001 feee 	bl	652c <__aeabi_dmul>
    4750:	000a      	movs	r2, r1
    4752:	0001      	movs	r1, r0
    4754:	2080      	movs	r0, #128	; 0x80
    4756:	9104      	str	r1, [sp, #16]
    4758:	9205      	str	r2, [sp, #20]
    475a:	0013      	movs	r3, r2
    475c:	2200      	movs	r2, #0
    475e:	1069      	asrs	r1, r5, #1
    4760:	2580      	movs	r5, #128	; 0x80
    4762:	0300      	lsls	r0, r0, #12
    4764:	4684      	mov	ip, r0
    4766:	9202      	str	r2, [sp, #8]
    4768:	9303      	str	r3, [sp, #12]
    476a:	2200      	movs	r2, #0
    476c:	05ad      	lsls	r5, r5, #22
    476e:	430d      	orrs	r5, r1
    4770:	4465      	add	r5, ip
    4772:	192b      	adds	r3, r5, r4
    4774:	9802      	ldr	r0, [sp, #8]
    4776:	9903      	ldr	r1, [sp, #12]
    4778:	0014      	movs	r4, r2
    477a:	001d      	movs	r5, r3
    477c:	f001 fed6 	bl	652c <__aeabi_dmul>
    4780:	0002      	movs	r2, r0
    4782:	000b      	movs	r3, r1
    4784:	0030      	movs	r0, r6
    4786:	0039      	movs	r1, r7
    4788:	f002 f950 	bl	6a2c <__aeabi_dsub>
    478c:	9a06      	ldr	r2, [sp, #24]
    478e:	9b07      	ldr	r3, [sp, #28]
    4790:	0006      	movs	r6, r0
    4792:	000f      	movs	r7, r1
    4794:	0020      	movs	r0, r4
    4796:	0029      	movs	r1, r5
    4798:	f002 f948 	bl	6a2c <__aeabi_dsub>
    479c:	0002      	movs	r2, r0
    479e:	000b      	movs	r3, r1
    47a0:	980a      	ldr	r0, [sp, #40]	; 0x28
    47a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
    47a4:	f002 f942 	bl	6a2c <__aeabi_dsub>
    47a8:	9a02      	ldr	r2, [sp, #8]
    47aa:	9b03      	ldr	r3, [sp, #12]
    47ac:	f001 febe 	bl	652c <__aeabi_dmul>
    47b0:	0002      	movs	r2, r0
    47b2:	000b      	movs	r3, r1
    47b4:	0030      	movs	r0, r6
    47b6:	0039      	movs	r1, r7
    47b8:	f002 f938 	bl	6a2c <__aeabi_dsub>
    47bc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    47be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    47c0:	f001 feb4 	bl	652c <__aeabi_dmul>
    47c4:	9d04      	ldr	r5, [sp, #16]
    47c6:	9e05      	ldr	r6, [sp, #20]
    47c8:	9006      	str	r0, [sp, #24]
    47ca:	9107      	str	r1, [sp, #28]
    47cc:	002a      	movs	r2, r5
    47ce:	0033      	movs	r3, r6
    47d0:	0028      	movs	r0, r5
    47d2:	0031      	movs	r1, r6
    47d4:	f001 feaa 	bl	652c <__aeabi_dmul>
    47d8:	0006      	movs	r6, r0
    47da:	000f      	movs	r7, r1
    47dc:	4aa7      	ldr	r2, [pc, #668]	; (4a7c <__ieee754_pow+0x5bc>)
    47de:	4ba8      	ldr	r3, [pc, #672]	; (4a80 <__ieee754_pow+0x5c0>)
    47e0:	f001 fea4 	bl	652c <__aeabi_dmul>
    47e4:	4aa7      	ldr	r2, [pc, #668]	; (4a84 <__ieee754_pow+0x5c4>)
    47e6:	4ba8      	ldr	r3, [pc, #672]	; (4a88 <__ieee754_pow+0x5c8>)
    47e8:	f000 ff5c 	bl	56a4 <__aeabi_dadd>
    47ec:	0032      	movs	r2, r6
    47ee:	003b      	movs	r3, r7
    47f0:	f001 fe9c 	bl	652c <__aeabi_dmul>
    47f4:	4aa5      	ldr	r2, [pc, #660]	; (4a8c <__ieee754_pow+0x5cc>)
    47f6:	4ba6      	ldr	r3, [pc, #664]	; (4a90 <__ieee754_pow+0x5d0>)
    47f8:	f000 ff54 	bl	56a4 <__aeabi_dadd>
    47fc:	0032      	movs	r2, r6
    47fe:	003b      	movs	r3, r7
    4800:	f001 fe94 	bl	652c <__aeabi_dmul>
    4804:	4aa3      	ldr	r2, [pc, #652]	; (4a94 <__ieee754_pow+0x5d4>)
    4806:	4ba4      	ldr	r3, [pc, #656]	; (4a98 <__ieee754_pow+0x5d8>)
    4808:	f000 ff4c 	bl	56a4 <__aeabi_dadd>
    480c:	0032      	movs	r2, r6
    480e:	003b      	movs	r3, r7
    4810:	f001 fe8c 	bl	652c <__aeabi_dmul>
    4814:	4aa1      	ldr	r2, [pc, #644]	; (4a9c <__ieee754_pow+0x5dc>)
    4816:	4ba2      	ldr	r3, [pc, #648]	; (4aa0 <__ieee754_pow+0x5e0>)
    4818:	f000 ff44 	bl	56a4 <__aeabi_dadd>
    481c:	0032      	movs	r2, r6
    481e:	003b      	movs	r3, r7
    4820:	f001 fe84 	bl	652c <__aeabi_dmul>
    4824:	4a9f      	ldr	r2, [pc, #636]	; (4aa4 <__ieee754_pow+0x5e4>)
    4826:	4ba0      	ldr	r3, [pc, #640]	; (4aa8 <__ieee754_pow+0x5e8>)
    4828:	f000 ff3c 	bl	56a4 <__aeabi_dadd>
    482c:	0032      	movs	r2, r6
    482e:	0004      	movs	r4, r0
    4830:	000d      	movs	r5, r1
    4832:	003b      	movs	r3, r7
    4834:	0030      	movs	r0, r6
    4836:	0039      	movs	r1, r7
    4838:	f001 fe78 	bl	652c <__aeabi_dmul>
    483c:	0002      	movs	r2, r0
    483e:	000b      	movs	r3, r1
    4840:	0020      	movs	r0, r4
    4842:	0029      	movs	r1, r5
    4844:	f001 fe72 	bl	652c <__aeabi_dmul>
    4848:	9e02      	ldr	r6, [sp, #8]
    484a:	9f03      	ldr	r7, [sp, #12]
    484c:	0004      	movs	r4, r0
    484e:	000d      	movs	r5, r1
    4850:	9804      	ldr	r0, [sp, #16]
    4852:	9905      	ldr	r1, [sp, #20]
    4854:	0032      	movs	r2, r6
    4856:	003b      	movs	r3, r7
    4858:	f000 ff24 	bl	56a4 <__aeabi_dadd>
    485c:	9a06      	ldr	r2, [sp, #24]
    485e:	9b07      	ldr	r3, [sp, #28]
    4860:	f001 fe64 	bl	652c <__aeabi_dmul>
    4864:	0022      	movs	r2, r4
    4866:	002b      	movs	r3, r5
    4868:	f000 ff1c 	bl	56a4 <__aeabi_dadd>
    486c:	0032      	movs	r2, r6
    486e:	900a      	str	r0, [sp, #40]	; 0x28
    4870:	910b      	str	r1, [sp, #44]	; 0x2c
    4872:	003b      	movs	r3, r7
    4874:	0030      	movs	r0, r6
    4876:	0039      	movs	r1, r7
    4878:	9602      	str	r6, [sp, #8]
    487a:	9703      	str	r7, [sp, #12]
    487c:	f001 fe56 	bl	652c <__aeabi_dmul>
    4880:	2200      	movs	r2, #0
    4882:	4b8a      	ldr	r3, [pc, #552]	; (4aac <__ieee754_pow+0x5ec>)
    4884:	0004      	movs	r4, r0
    4886:	000d      	movs	r5, r1
    4888:	f000 ff0c 	bl	56a4 <__aeabi_dadd>
    488c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    488e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4890:	f000 ff08 	bl	56a4 <__aeabi_dadd>
    4894:	2600      	movs	r6, #0
    4896:	000f      	movs	r7, r1
    4898:	0032      	movs	r2, r6
    489a:	000b      	movs	r3, r1
    489c:	9802      	ldr	r0, [sp, #8]
    489e:	9903      	ldr	r1, [sp, #12]
    48a0:	f001 fe44 	bl	652c <__aeabi_dmul>
    48a4:	2200      	movs	r2, #0
    48a6:	9002      	str	r0, [sp, #8]
    48a8:	9103      	str	r1, [sp, #12]
    48aa:	4b80      	ldr	r3, [pc, #512]	; (4aac <__ieee754_pow+0x5ec>)
    48ac:	0030      	movs	r0, r6
    48ae:	0039      	movs	r1, r7
    48b0:	f002 f8bc 	bl	6a2c <__aeabi_dsub>
    48b4:	0022      	movs	r2, r4
    48b6:	002b      	movs	r3, r5
    48b8:	f002 f8b8 	bl	6a2c <__aeabi_dsub>
    48bc:	0002      	movs	r2, r0
    48be:	000b      	movs	r3, r1
    48c0:	980a      	ldr	r0, [sp, #40]	; 0x28
    48c2:	990b      	ldr	r1, [sp, #44]	; 0x2c
    48c4:	f002 f8b2 	bl	6a2c <__aeabi_dsub>
    48c8:	9a04      	ldr	r2, [sp, #16]
    48ca:	9b05      	ldr	r3, [sp, #20]
    48cc:	f001 fe2e 	bl	652c <__aeabi_dmul>
    48d0:	0032      	movs	r2, r6
    48d2:	0004      	movs	r4, r0
    48d4:	000d      	movs	r5, r1
    48d6:	9806      	ldr	r0, [sp, #24]
    48d8:	9907      	ldr	r1, [sp, #28]
    48da:	003b      	movs	r3, r7
    48dc:	f001 fe26 	bl	652c <__aeabi_dmul>
    48e0:	0002      	movs	r2, r0
    48e2:	000b      	movs	r3, r1
    48e4:	0020      	movs	r0, r4
    48e6:	0029      	movs	r1, r5
    48e8:	f000 fedc 	bl	56a4 <__aeabi_dadd>
    48ec:	0004      	movs	r4, r0
    48ee:	000d      	movs	r5, r1
    48f0:	0002      	movs	r2, r0
    48f2:	000b      	movs	r3, r1
    48f4:	9802      	ldr	r0, [sp, #8]
    48f6:	9903      	ldr	r1, [sp, #12]
    48f8:	f000 fed4 	bl	56a4 <__aeabi_dadd>
    48fc:	2600      	movs	r6, #0
    48fe:	22e0      	movs	r2, #224	; 0xe0
    4900:	4b6b      	ldr	r3, [pc, #428]	; (4ab0 <__ieee754_pow+0x5f0>)
    4902:	0612      	lsls	r2, r2, #24
    4904:	0030      	movs	r0, r6
    4906:	000f      	movs	r7, r1
    4908:	f001 fe10 	bl	652c <__aeabi_dmul>
    490c:	9a02      	ldr	r2, [sp, #8]
    490e:	9b03      	ldr	r3, [sp, #12]
    4910:	9004      	str	r0, [sp, #16]
    4912:	9105      	str	r1, [sp, #20]
    4914:	0030      	movs	r0, r6
    4916:	0039      	movs	r1, r7
    4918:	f002 f888 	bl	6a2c <__aeabi_dsub>
    491c:	0002      	movs	r2, r0
    491e:	000b      	movs	r3, r1
    4920:	0020      	movs	r0, r4
    4922:	0029      	movs	r1, r5
    4924:	f002 f882 	bl	6a2c <__aeabi_dsub>
    4928:	4a62      	ldr	r2, [pc, #392]	; (4ab4 <__ieee754_pow+0x5f4>)
    492a:	4b61      	ldr	r3, [pc, #388]	; (4ab0 <__ieee754_pow+0x5f0>)
    492c:	f001 fdfe 	bl	652c <__aeabi_dmul>
    4930:	4a61      	ldr	r2, [pc, #388]	; (4ab8 <__ieee754_pow+0x5f8>)
    4932:	0004      	movs	r4, r0
    4934:	000d      	movs	r5, r1
    4936:	4b61      	ldr	r3, [pc, #388]	; (4abc <__ieee754_pow+0x5fc>)
    4938:	0030      	movs	r0, r6
    493a:	0039      	movs	r1, r7
    493c:	f001 fdf6 	bl	652c <__aeabi_dmul>
    4940:	0002      	movs	r2, r0
    4942:	000b      	movs	r3, r1
    4944:	0020      	movs	r0, r4
    4946:	0029      	movs	r1, r5
    4948:	f000 feac 	bl	56a4 <__aeabi_dadd>
    494c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    494e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4950:	f000 fea8 	bl	56a4 <__aeabi_dadd>
    4954:	0006      	movs	r6, r0
    4956:	4648      	mov	r0, r9
    4958:	000f      	movs	r7, r1
    495a:	f002 fb9d 	bl	7098 <__aeabi_i2d>
    495e:	0004      	movs	r4, r0
    4960:	000d      	movs	r5, r1
    4962:	9804      	ldr	r0, [sp, #16]
    4964:	9905      	ldr	r1, [sp, #20]
    4966:	0032      	movs	r2, r6
    4968:	003b      	movs	r3, r7
    496a:	f000 fe9b 	bl	56a4 <__aeabi_dadd>
    496e:	9a08      	ldr	r2, [sp, #32]
    4970:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4972:	f000 fe97 	bl	56a4 <__aeabi_dadd>
    4976:	0022      	movs	r2, r4
    4978:	002b      	movs	r3, r5
    497a:	f000 fe93 	bl	56a4 <__aeabi_dadd>
    497e:	2000      	movs	r0, #0
    4980:	0022      	movs	r2, r4
    4982:	002b      	movs	r3, r5
    4984:	9002      	str	r0, [sp, #8]
    4986:	9103      	str	r1, [sp, #12]
    4988:	f002 f850 	bl	6a2c <__aeabi_dsub>
    498c:	9a08      	ldr	r2, [sp, #32]
    498e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4990:	f002 f84c 	bl	6a2c <__aeabi_dsub>
    4994:	9a04      	ldr	r2, [sp, #16]
    4996:	9b05      	ldr	r3, [sp, #20]
    4998:	f002 f848 	bl	6a2c <__aeabi_dsub>
    499c:	0002      	movs	r2, r0
    499e:	000b      	movs	r3, r1
    49a0:	0030      	movs	r0, r6
    49a2:	0039      	movs	r1, r7
    49a4:	f002 f842 	bl	6a2c <__aeabi_dsub>
    49a8:	9004      	str	r0, [sp, #16]
    49aa:	9105      	str	r1, [sp, #20]
    49ac:	465b      	mov	r3, fp
    49ae:	4642      	mov	r2, r8
    49b0:	3b01      	subs	r3, #1
    49b2:	4313      	orrs	r3, r2
    49b4:	d100      	bne.n	49b8 <__ieee754_pow+0x4f8>
    49b6:	e1ab      	b.n	4d10 <__ieee754_pow+0x850>
    49b8:	2300      	movs	r3, #0
    49ba:	4c2c      	ldr	r4, [pc, #176]	; (4a6c <__ieee754_pow+0x5ac>)
    49bc:	9306      	str	r3, [sp, #24]
    49be:	9407      	str	r4, [sp, #28]
    49c0:	9800      	ldr	r0, [sp, #0]
    49c2:	9901      	ldr	r1, [sp, #4]
    49c4:	2600      	movs	r6, #0
    49c6:	000b      	movs	r3, r1
    49c8:	0032      	movs	r2, r6
    49ca:	000f      	movs	r7, r1
    49cc:	f002 f82e 	bl	6a2c <__aeabi_dsub>
    49d0:	9a02      	ldr	r2, [sp, #8]
    49d2:	9b03      	ldr	r3, [sp, #12]
    49d4:	f001 fdaa 	bl	652c <__aeabi_dmul>
    49d8:	9a00      	ldr	r2, [sp, #0]
    49da:	9b01      	ldr	r3, [sp, #4]
    49dc:	0004      	movs	r4, r0
    49de:	000d      	movs	r5, r1
    49e0:	9804      	ldr	r0, [sp, #16]
    49e2:	9905      	ldr	r1, [sp, #20]
    49e4:	f001 fda2 	bl	652c <__aeabi_dmul>
    49e8:	0002      	movs	r2, r0
    49ea:	000b      	movs	r3, r1
    49ec:	0020      	movs	r0, r4
    49ee:	0029      	movs	r1, r5
    49f0:	f000 fe58 	bl	56a4 <__aeabi_dadd>
    49f4:	0004      	movs	r4, r0
    49f6:	000d      	movs	r5, r1
    49f8:	9802      	ldr	r0, [sp, #8]
    49fa:	9903      	ldr	r1, [sp, #12]
    49fc:	0032      	movs	r2, r6
    49fe:	003b      	movs	r3, r7
    4a00:	9400      	str	r4, [sp, #0]
    4a02:	9501      	str	r5, [sp, #4]
    4a04:	f001 fd92 	bl	652c <__aeabi_dmul>
    4a08:	0002      	movs	r2, r0
    4a0a:	000b      	movs	r3, r1
    4a0c:	0006      	movs	r6, r0
    4a0e:	000f      	movs	r7, r1
    4a10:	0020      	movs	r0, r4
    4a12:	0029      	movs	r1, r5
    4a14:	f000 fe46 	bl	56a4 <__aeabi_dadd>
    4a18:	4b29      	ldr	r3, [pc, #164]	; (4ac0 <__ieee754_pow+0x600>)
    4a1a:	0004      	movs	r4, r0
    4a1c:	000d      	movs	r5, r1
    4a1e:	0002      	movs	r2, r0
    4a20:	468b      	mov	fp, r1
    4a22:	4299      	cmp	r1, r3
    4a24:	dc00      	bgt.n	4a28 <__ieee754_pow+0x568>
    4a26:	e14f      	b.n	4cc8 <__ieee754_pow+0x808>
    4a28:	4b26      	ldr	r3, [pc, #152]	; (4ac4 <__ieee754_pow+0x604>)
    4a2a:	18cb      	adds	r3, r1, r3
    4a2c:	4303      	orrs	r3, r0
    4a2e:	d000      	beq.n	4a32 <__ieee754_pow+0x572>
    4a30:	e1e2      	b.n	4df8 <__ieee754_pow+0x938>
    4a32:	9800      	ldr	r0, [sp, #0]
    4a34:	9901      	ldr	r1, [sp, #4]
    4a36:	4a24      	ldr	r2, [pc, #144]	; (4ac8 <__ieee754_pow+0x608>)
    4a38:	4b24      	ldr	r3, [pc, #144]	; (4acc <__ieee754_pow+0x60c>)
    4a3a:	f000 fe33 	bl	56a4 <__aeabi_dadd>
    4a3e:	0032      	movs	r2, r6
    4a40:	9002      	str	r0, [sp, #8]
    4a42:	9103      	str	r1, [sp, #12]
    4a44:	003b      	movs	r3, r7
    4a46:	0020      	movs	r0, r4
    4a48:	0029      	movs	r1, r5
    4a4a:	f001 ffef 	bl	6a2c <__aeabi_dsub>
    4a4e:	0002      	movs	r2, r0
    4a50:	000b      	movs	r3, r1
    4a52:	9802      	ldr	r0, [sp, #8]
    4a54:	9903      	ldr	r1, [sp, #12]
    4a56:	f000 fe11 	bl	567c <__aeabi_dcmpgt>
    4a5a:	46aa      	mov	sl, r5
    4a5c:	e038      	b.n	4ad0 <__ieee754_pow+0x610>
    4a5e:	46c0      	nop			; (mov r8, r8)
    4a60:	000fffff 	.word	0x000fffff
    4a64:	43400000 	.word	0x43400000
    4a68:	fffffc01 	.word	0xfffffc01
    4a6c:	3ff00000 	.word	0x3ff00000
    4a70:	0003988e 	.word	0x0003988e
    4a74:	000bb679 	.word	0x000bb679
    4a78:	fff00000 	.word	0xfff00000
    4a7c:	4a454eef 	.word	0x4a454eef
    4a80:	3fca7e28 	.word	0x3fca7e28
    4a84:	93c9db65 	.word	0x93c9db65
    4a88:	3fcd864a 	.word	0x3fcd864a
    4a8c:	a91d4101 	.word	0xa91d4101
    4a90:	3fd17460 	.word	0x3fd17460
    4a94:	518f264d 	.word	0x518f264d
    4a98:	3fd55555 	.word	0x3fd55555
    4a9c:	db6fabff 	.word	0xdb6fabff
    4aa0:	3fdb6db6 	.word	0x3fdb6db6
    4aa4:	33333303 	.word	0x33333303
    4aa8:	3fe33333 	.word	0x3fe33333
    4aac:	40080000 	.word	0x40080000
    4ab0:	3feec709 	.word	0x3feec709
    4ab4:	dc3a03fd 	.word	0xdc3a03fd
    4ab8:	145b01f5 	.word	0x145b01f5
    4abc:	be3e2fe0 	.word	0xbe3e2fe0
    4ac0:	408fffff 	.word	0x408fffff
    4ac4:	bf700000 	.word	0xbf700000
    4ac8:	652b82fe 	.word	0x652b82fe
    4acc:	3c971547 	.word	0x3c971547
    4ad0:	2800      	cmp	r0, #0
    4ad2:	d000      	beq.n	4ad6 <__ieee754_pow+0x616>
    4ad4:	e190      	b.n	4df8 <__ieee754_pow+0x938>
    4ad6:	4aec      	ldr	r2, [pc, #944]	; (4e88 <__ieee754_pow+0x9c8>)
    4ad8:	4653      	mov	r3, sl
    4ada:	4694      	mov	ip, r2
    4adc:	2280      	movs	r2, #128	; 0x80
    4ade:	0352      	lsls	r2, r2, #13
    4ae0:	0011      	movs	r1, r2
    4ae2:	151b      	asrs	r3, r3, #20
    4ae4:	4463      	add	r3, ip
    4ae6:	4119      	asrs	r1, r3
    4ae8:	000b      	movs	r3, r1
    4aea:	4690      	mov	r8, r2
    4aec:	4ae7      	ldr	r2, [pc, #924]	; (4e8c <__ieee754_pow+0x9cc>)
    4aee:	445b      	add	r3, fp
    4af0:	4694      	mov	ip, r2
    4af2:	005c      	lsls	r4, r3, #1
    4af4:	0d64      	lsrs	r4, r4, #21
    4af6:	4de6      	ldr	r5, [pc, #920]	; (4e90 <__ieee754_pow+0x9d0>)
    4af8:	4464      	add	r4, ip
    4afa:	4125      	asrs	r5, r4
    4afc:	001a      	movs	r2, r3
    4afe:	43aa      	bics	r2, r5
    4b00:	0011      	movs	r1, r2
    4b02:	4642      	mov	r2, r8
    4b04:	031b      	lsls	r3, r3, #12
    4b06:	0b1b      	lsrs	r3, r3, #12
    4b08:	4313      	orrs	r3, r2
    4b0a:	2214      	movs	r2, #20
    4b0c:	1b14      	subs	r4, r2, r4
    4b0e:	4123      	asrs	r3, r4
    4b10:	4699      	mov	r9, r3
    4b12:	465b      	mov	r3, fp
    4b14:	2000      	movs	r0, #0
    4b16:	2b00      	cmp	r3, #0
    4b18:	da00      	bge.n	4b1c <__ieee754_pow+0x65c>
    4b1a:	e1b0      	b.n	4e7e <__ieee754_pow+0x9be>
    4b1c:	0002      	movs	r2, r0
    4b1e:	000b      	movs	r3, r1
    4b20:	0030      	movs	r0, r6
    4b22:	0039      	movs	r1, r7
    4b24:	f001 ff82 	bl	6a2c <__aeabi_dsub>
    4b28:	000b      	movs	r3, r1
    4b2a:	0002      	movs	r2, r0
    4b2c:	0006      	movs	r6, r0
    4b2e:	000f      	movs	r7, r1
    4b30:	9800      	ldr	r0, [sp, #0]
    4b32:	9901      	ldr	r1, [sp, #4]
    4b34:	f000 fdb6 	bl	56a4 <__aeabi_dadd>
    4b38:	464b      	mov	r3, r9
    4b3a:	051b      	lsls	r3, r3, #20
    4b3c:	000d      	movs	r5, r1
    4b3e:	4698      	mov	r8, r3
    4b40:	2400      	movs	r4, #0
    4b42:	2200      	movs	r2, #0
    4b44:	4bd3      	ldr	r3, [pc, #844]	; (4e94 <__ieee754_pow+0x9d4>)
    4b46:	0020      	movs	r0, r4
    4b48:	0029      	movs	r1, r5
    4b4a:	f001 fcef 	bl	652c <__aeabi_dmul>
    4b4e:	0032      	movs	r2, r6
    4b50:	9002      	str	r0, [sp, #8]
    4b52:	9103      	str	r1, [sp, #12]
    4b54:	003b      	movs	r3, r7
    4b56:	0020      	movs	r0, r4
    4b58:	0029      	movs	r1, r5
    4b5a:	f001 ff67 	bl	6a2c <__aeabi_dsub>
    4b5e:	0002      	movs	r2, r0
    4b60:	000b      	movs	r3, r1
    4b62:	9800      	ldr	r0, [sp, #0]
    4b64:	9901      	ldr	r1, [sp, #4]
    4b66:	f001 ff61 	bl	6a2c <__aeabi_dsub>
    4b6a:	4acb      	ldr	r2, [pc, #812]	; (4e98 <__ieee754_pow+0x9d8>)
    4b6c:	4bcb      	ldr	r3, [pc, #812]	; (4e9c <__ieee754_pow+0x9dc>)
    4b6e:	f001 fcdd 	bl	652c <__aeabi_dmul>
    4b72:	4acb      	ldr	r2, [pc, #812]	; (4ea0 <__ieee754_pow+0x9e0>)
    4b74:	0006      	movs	r6, r0
    4b76:	000f      	movs	r7, r1
    4b78:	4bca      	ldr	r3, [pc, #808]	; (4ea4 <__ieee754_pow+0x9e4>)
    4b7a:	0020      	movs	r0, r4
    4b7c:	0029      	movs	r1, r5
    4b7e:	f001 fcd5 	bl	652c <__aeabi_dmul>
    4b82:	0002      	movs	r2, r0
    4b84:	000b      	movs	r3, r1
    4b86:	0030      	movs	r0, r6
    4b88:	0039      	movs	r1, r7
    4b8a:	f000 fd8b 	bl	56a4 <__aeabi_dadd>
    4b8e:	0004      	movs	r4, r0
    4b90:	000d      	movs	r5, r1
    4b92:	0002      	movs	r2, r0
    4b94:	000b      	movs	r3, r1
    4b96:	9802      	ldr	r0, [sp, #8]
    4b98:	9903      	ldr	r1, [sp, #12]
    4b9a:	f000 fd83 	bl	56a4 <__aeabi_dadd>
    4b9e:	9a02      	ldr	r2, [sp, #8]
    4ba0:	9b03      	ldr	r3, [sp, #12]
    4ba2:	0006      	movs	r6, r0
    4ba4:	000f      	movs	r7, r1
    4ba6:	f001 ff41 	bl	6a2c <__aeabi_dsub>
    4baa:	0002      	movs	r2, r0
    4bac:	000b      	movs	r3, r1
    4bae:	0020      	movs	r0, r4
    4bb0:	0029      	movs	r1, r5
    4bb2:	f001 ff3b 	bl	6a2c <__aeabi_dsub>
    4bb6:	0032      	movs	r2, r6
    4bb8:	9000      	str	r0, [sp, #0]
    4bba:	9101      	str	r1, [sp, #4]
    4bbc:	003b      	movs	r3, r7
    4bbe:	0030      	movs	r0, r6
    4bc0:	0039      	movs	r1, r7
    4bc2:	f001 fcb3 	bl	652c <__aeabi_dmul>
    4bc6:	0004      	movs	r4, r0
    4bc8:	000d      	movs	r5, r1
    4bca:	4ab7      	ldr	r2, [pc, #732]	; (4ea8 <__ieee754_pow+0x9e8>)
    4bcc:	4bb7      	ldr	r3, [pc, #732]	; (4eac <__ieee754_pow+0x9ec>)
    4bce:	f001 fcad 	bl	652c <__aeabi_dmul>
    4bd2:	4ab7      	ldr	r2, [pc, #732]	; (4eb0 <__ieee754_pow+0x9f0>)
    4bd4:	4bb7      	ldr	r3, [pc, #732]	; (4eb4 <__ieee754_pow+0x9f4>)
    4bd6:	f001 ff29 	bl	6a2c <__aeabi_dsub>
    4bda:	0022      	movs	r2, r4
    4bdc:	002b      	movs	r3, r5
    4bde:	f001 fca5 	bl	652c <__aeabi_dmul>
    4be2:	4ab5      	ldr	r2, [pc, #724]	; (4eb8 <__ieee754_pow+0x9f8>)
    4be4:	4bb5      	ldr	r3, [pc, #724]	; (4ebc <__ieee754_pow+0x9fc>)
    4be6:	f000 fd5d 	bl	56a4 <__aeabi_dadd>
    4bea:	0022      	movs	r2, r4
    4bec:	002b      	movs	r3, r5
    4bee:	f001 fc9d 	bl	652c <__aeabi_dmul>
    4bf2:	4ab3      	ldr	r2, [pc, #716]	; (4ec0 <__ieee754_pow+0xa00>)
    4bf4:	4bb3      	ldr	r3, [pc, #716]	; (4ec4 <__ieee754_pow+0xa04>)
    4bf6:	f001 ff19 	bl	6a2c <__aeabi_dsub>
    4bfa:	0022      	movs	r2, r4
    4bfc:	002b      	movs	r3, r5
    4bfe:	f001 fc95 	bl	652c <__aeabi_dmul>
    4c02:	4ab1      	ldr	r2, [pc, #708]	; (4ec8 <__ieee754_pow+0xa08>)
    4c04:	4bb1      	ldr	r3, [pc, #708]	; (4ecc <__ieee754_pow+0xa0c>)
    4c06:	f000 fd4d 	bl	56a4 <__aeabi_dadd>
    4c0a:	0022      	movs	r2, r4
    4c0c:	002b      	movs	r3, r5
    4c0e:	f001 fc8d 	bl	652c <__aeabi_dmul>
    4c12:	0002      	movs	r2, r0
    4c14:	000b      	movs	r3, r1
    4c16:	0030      	movs	r0, r6
    4c18:	0039      	movs	r1, r7
    4c1a:	f001 ff07 	bl	6a2c <__aeabi_dsub>
    4c1e:	0004      	movs	r4, r0
    4c20:	000d      	movs	r5, r1
    4c22:	0002      	movs	r2, r0
    4c24:	000b      	movs	r3, r1
    4c26:	0030      	movs	r0, r6
    4c28:	0039      	movs	r1, r7
    4c2a:	f001 fc7f 	bl	652c <__aeabi_dmul>
    4c2e:	2380      	movs	r3, #128	; 0x80
    4c30:	9002      	str	r0, [sp, #8]
    4c32:	9103      	str	r1, [sp, #12]
    4c34:	2200      	movs	r2, #0
    4c36:	05db      	lsls	r3, r3, #23
    4c38:	0020      	movs	r0, r4
    4c3a:	0029      	movs	r1, r5
    4c3c:	f001 fef6 	bl	6a2c <__aeabi_dsub>
    4c40:	0002      	movs	r2, r0
    4c42:	000b      	movs	r3, r1
    4c44:	9802      	ldr	r0, [sp, #8]
    4c46:	9903      	ldr	r1, [sp, #12]
    4c48:	f001 f83c 	bl	5cc4 <__aeabi_ddiv>
    4c4c:	9a00      	ldr	r2, [sp, #0]
    4c4e:	9b01      	ldr	r3, [sp, #4]
    4c50:	0004      	movs	r4, r0
    4c52:	000d      	movs	r5, r1
    4c54:	0030      	movs	r0, r6
    4c56:	0039      	movs	r1, r7
    4c58:	f001 fc68 	bl	652c <__aeabi_dmul>
    4c5c:	9a00      	ldr	r2, [sp, #0]
    4c5e:	9b01      	ldr	r3, [sp, #4]
    4c60:	f000 fd20 	bl	56a4 <__aeabi_dadd>
    4c64:	0002      	movs	r2, r0
    4c66:	000b      	movs	r3, r1
    4c68:	0020      	movs	r0, r4
    4c6a:	0029      	movs	r1, r5
    4c6c:	f001 fede 	bl	6a2c <__aeabi_dsub>
    4c70:	0032      	movs	r2, r6
    4c72:	003b      	movs	r3, r7
    4c74:	f001 feda 	bl	6a2c <__aeabi_dsub>
    4c78:	0002      	movs	r2, r0
    4c7a:	000b      	movs	r3, r1
    4c7c:	2000      	movs	r0, #0
    4c7e:	4994      	ldr	r1, [pc, #592]	; (4ed0 <__ieee754_pow+0xa10>)
    4c80:	f001 fed4 	bl	6a2c <__aeabi_dsub>
    4c84:	4643      	mov	r3, r8
    4c86:	185b      	adds	r3, r3, r1
    4c88:	151a      	asrs	r2, r3, #20
    4c8a:	2a00      	cmp	r2, #0
    4c8c:	dc00      	bgt.n	4c90 <__ieee754_pow+0x7d0>
    4c8e:	e149      	b.n	4f24 <__ieee754_pow+0xa64>
    4c90:	0019      	movs	r1, r3
    4c92:	9a06      	ldr	r2, [sp, #24]
    4c94:	9b07      	ldr	r3, [sp, #28]
    4c96:	f001 fc49 	bl	652c <__aeabi_dmul>
    4c9a:	e459      	b.n	4550 <__ieee754_pow+0x90>
    4c9c:	003a      	movs	r2, r7
    4c9e:	0033      	movs	r3, r6
    4ca0:	0038      	movs	r0, r7
    4ca2:	0031      	movs	r1, r6
    4ca4:	f001 fc42 	bl	652c <__aeabi_dmul>
    4ca8:	e452      	b.n	4550 <__ieee754_pow+0x90>
    4caa:	4653      	mov	r3, sl
    4cac:	2b00      	cmp	r3, #0
    4cae:	db00      	blt.n	4cb2 <__ieee754_pow+0x7f2>
    4cb0:	e4d9      	b.n	4666 <__ieee754_pow+0x1a6>
    4cb2:	9c00      	ldr	r4, [sp, #0]
    4cb4:	9d01      	ldr	r5, [sp, #4]
    4cb6:	2280      	movs	r2, #128	; 0x80
    4cb8:	0612      	lsls	r2, r2, #24
    4cba:	002b      	movs	r3, r5
    4cbc:	4694      	mov	ip, r2
    4cbe:	4463      	add	r3, ip
    4cc0:	0020      	movs	r0, r4
    4cc2:	0019      	movs	r1, r3
    4cc4:	f7ff fc44 	bl	4550 <__ieee754_pow+0x90>
    4cc8:	004b      	lsls	r3, r1, #1
    4cca:	085b      	lsrs	r3, r3, #1
    4ccc:	469a      	mov	sl, r3
    4cce:	4b81      	ldr	r3, [pc, #516]	; (4ed4 <__ieee754_pow+0xa14>)
    4cd0:	459a      	cmp	sl, r3
    4cd2:	dc00      	bgt.n	4cd6 <__ieee754_pow+0x816>
    4cd4:	e0b1      	b.n	4e3a <__ieee754_pow+0x97a>
    4cd6:	4b80      	ldr	r3, [pc, #512]	; (4ed8 <__ieee754_pow+0xa18>)
    4cd8:	445b      	add	r3, fp
    4cda:	431a      	orrs	r2, r3
    4cdc:	d10c      	bne.n	4cf8 <__ieee754_pow+0x838>
    4cde:	0032      	movs	r2, r6
    4ce0:	003b      	movs	r3, r7
    4ce2:	f001 fea3 	bl	6a2c <__aeabi_dsub>
    4ce6:	0002      	movs	r2, r0
    4ce8:	000b      	movs	r3, r1
    4cea:	9800      	ldr	r0, [sp, #0]
    4cec:	9901      	ldr	r1, [sp, #4]
    4cee:	f000 fcbb 	bl	5668 <__aeabi_dcmple>
    4cf2:	2800      	cmp	r0, #0
    4cf4:	d100      	bne.n	4cf8 <__ieee754_pow+0x838>
    4cf6:	e6ee      	b.n	4ad6 <__ieee754_pow+0x616>
    4cf8:	9806      	ldr	r0, [sp, #24]
    4cfa:	9907      	ldr	r1, [sp, #28]
    4cfc:	4a77      	ldr	r2, [pc, #476]	; (4edc <__ieee754_pow+0xa1c>)
    4cfe:	4b78      	ldr	r3, [pc, #480]	; (4ee0 <__ieee754_pow+0xa20>)
    4d00:	f001 fc14 	bl	652c <__aeabi_dmul>
    4d04:	4a75      	ldr	r2, [pc, #468]	; (4edc <__ieee754_pow+0xa1c>)
    4d06:	4b76      	ldr	r3, [pc, #472]	; (4ee0 <__ieee754_pow+0xa20>)
    4d08:	f001 fc10 	bl	652c <__aeabi_dmul>
    4d0c:	f7ff fc20 	bl	4550 <__ieee754_pow+0x90>
    4d10:	2300      	movs	r3, #0
    4d12:	4c74      	ldr	r4, [pc, #464]	; (4ee4 <__ieee754_pow+0xa24>)
    4d14:	9306      	str	r3, [sp, #24]
    4d16:	9407      	str	r4, [sp, #28]
    4d18:	e652      	b.n	49c0 <__ieee754_pow+0x500>
    4d1a:	0002      	movs	r2, r0
    4d1c:	000b      	movs	r3, r1
    4d1e:	2000      	movs	r0, #0
    4d20:	496b      	ldr	r1, [pc, #428]	; (4ed0 <__ieee754_pow+0xa10>)
    4d22:	f000 ffcf 	bl	5cc4 <__aeabi_ddiv>
    4d26:	f7ff fc32 	bl	458e <__ieee754_pow+0xce>
    4d2a:	4653      	mov	r3, sl
    4d2c:	2b00      	cmp	r3, #0
    4d2e:	db00      	blt.n	4d32 <__ieee754_pow+0x872>
    4d30:	e499      	b.n	4666 <__ieee754_pow+0x1a6>
    4d32:	e454      	b.n	45de <__ieee754_pow+0x11e>
    4d34:	4b6c      	ldr	r3, [pc, #432]	; (4ee8 <__ieee754_pow+0xa28>)
    4d36:	429c      	cmp	r4, r3
    4d38:	ddf7      	ble.n	4d2a <__ieee754_pow+0x86a>
    4d3a:	4b65      	ldr	r3, [pc, #404]	; (4ed0 <__ieee754_pow+0xa10>)
    4d3c:	429c      	cmp	r4, r3
    4d3e:	dd00      	ble.n	4d42 <__ieee754_pow+0x882>
    4d40:	e44a      	b.n	45d8 <__ieee754_pow+0x118>
    4d42:	2200      	movs	r2, #0
    4d44:	4b62      	ldr	r3, [pc, #392]	; (4ed0 <__ieee754_pow+0xa10>)
    4d46:	f001 fe71 	bl	6a2c <__aeabi_dsub>
    4d4a:	22c0      	movs	r2, #192	; 0xc0
    4d4c:	4b67      	ldr	r3, [pc, #412]	; (4eec <__ieee754_pow+0xa2c>)
    4d4e:	05d2      	lsls	r2, r2, #23
    4d50:	0004      	movs	r4, r0
    4d52:	000d      	movs	r5, r1
    4d54:	f001 fbea 	bl	652c <__aeabi_dmul>
    4d58:	4a65      	ldr	r2, [pc, #404]	; (4ef0 <__ieee754_pow+0xa30>)
    4d5a:	0006      	movs	r6, r0
    4d5c:	000f      	movs	r7, r1
    4d5e:	4b65      	ldr	r3, [pc, #404]	; (4ef4 <__ieee754_pow+0xa34>)
    4d60:	0020      	movs	r0, r4
    4d62:	0029      	movs	r1, r5
    4d64:	f001 fbe2 	bl	652c <__aeabi_dmul>
    4d68:	2200      	movs	r2, #0
    4d6a:	9002      	str	r0, [sp, #8]
    4d6c:	9103      	str	r1, [sp, #12]
    4d6e:	4b62      	ldr	r3, [pc, #392]	; (4ef8 <__ieee754_pow+0xa38>)
    4d70:	0020      	movs	r0, r4
    4d72:	0029      	movs	r1, r5
    4d74:	f001 fbda 	bl	652c <__aeabi_dmul>
    4d78:	0002      	movs	r2, r0
    4d7a:	000b      	movs	r3, r1
    4d7c:	485f      	ldr	r0, [pc, #380]	; (4efc <__ieee754_pow+0xa3c>)
    4d7e:	4960      	ldr	r1, [pc, #384]	; (4f00 <__ieee754_pow+0xa40>)
    4d80:	f001 fe54 	bl	6a2c <__aeabi_dsub>
    4d84:	0022      	movs	r2, r4
    4d86:	002b      	movs	r3, r5
    4d88:	f001 fbd0 	bl	652c <__aeabi_dmul>
    4d8c:	0002      	movs	r2, r0
    4d8e:	000b      	movs	r3, r1
    4d90:	2000      	movs	r0, #0
    4d92:	495c      	ldr	r1, [pc, #368]	; (4f04 <__ieee754_pow+0xa44>)
    4d94:	f001 fe4a 	bl	6a2c <__aeabi_dsub>
    4d98:	0022      	movs	r2, r4
    4d9a:	9004      	str	r0, [sp, #16]
    4d9c:	9105      	str	r1, [sp, #20]
    4d9e:	002b      	movs	r3, r5
    4da0:	0020      	movs	r0, r4
    4da2:	0029      	movs	r1, r5
    4da4:	f001 fbc2 	bl	652c <__aeabi_dmul>
    4da8:	0002      	movs	r2, r0
    4daa:	000b      	movs	r3, r1
    4dac:	9804      	ldr	r0, [sp, #16]
    4dae:	9905      	ldr	r1, [sp, #20]
    4db0:	f001 fbbc 	bl	652c <__aeabi_dmul>
    4db4:	4a54      	ldr	r2, [pc, #336]	; (4f08 <__ieee754_pow+0xa48>)
    4db6:	4b4d      	ldr	r3, [pc, #308]	; (4eec <__ieee754_pow+0xa2c>)
    4db8:	f001 fbb8 	bl	652c <__aeabi_dmul>
    4dbc:	0002      	movs	r2, r0
    4dbe:	000b      	movs	r3, r1
    4dc0:	9802      	ldr	r0, [sp, #8]
    4dc2:	9903      	ldr	r1, [sp, #12]
    4dc4:	f001 fe32 	bl	6a2c <__aeabi_dsub>
    4dc8:	0002      	movs	r2, r0
    4dca:	000b      	movs	r3, r1
    4dcc:	0004      	movs	r4, r0
    4dce:	000d      	movs	r5, r1
    4dd0:	0030      	movs	r0, r6
    4dd2:	0039      	movs	r1, r7
    4dd4:	f000 fc66 	bl	56a4 <__aeabi_dadd>
    4dd8:	2000      	movs	r0, #0
    4dda:	0032      	movs	r2, r6
    4ddc:	003b      	movs	r3, r7
    4dde:	9002      	str	r0, [sp, #8]
    4de0:	9103      	str	r1, [sp, #12]
    4de2:	f001 fe23 	bl	6a2c <__aeabi_dsub>
    4de6:	0002      	movs	r2, r0
    4de8:	000b      	movs	r3, r1
    4dea:	0020      	movs	r0, r4
    4dec:	0029      	movs	r1, r5
    4dee:	f001 fe1d 	bl	6a2c <__aeabi_dsub>
    4df2:	9004      	str	r0, [sp, #16]
    4df4:	9105      	str	r1, [sp, #20]
    4df6:	e5d9      	b.n	49ac <__ieee754_pow+0x4ec>
    4df8:	4a44      	ldr	r2, [pc, #272]	; (4f0c <__ieee754_pow+0xa4c>)
    4dfa:	4b45      	ldr	r3, [pc, #276]	; (4f10 <__ieee754_pow+0xa50>)
    4dfc:	9806      	ldr	r0, [sp, #24]
    4dfe:	9907      	ldr	r1, [sp, #28]
    4e00:	f001 fb94 	bl	652c <__aeabi_dmul>
    4e04:	4a41      	ldr	r2, [pc, #260]	; (4f0c <__ieee754_pow+0xa4c>)
    4e06:	4b42      	ldr	r3, [pc, #264]	; (4f10 <__ieee754_pow+0xa50>)
    4e08:	f001 fb90 	bl	652c <__aeabi_dmul>
    4e0c:	f7ff fba0 	bl	4550 <__ieee754_pow+0x90>
    4e10:	2a00      	cmp	r2, #0
    4e12:	d001      	beq.n	4e18 <__ieee754_pow+0x958>
    4e14:	f7ff fba9 	bl	456a <__ieee754_pow+0xaa>
    4e18:	3214      	adds	r2, #20
    4e1a:	1ad3      	subs	r3, r2, r3
    4e1c:	002a      	movs	r2, r5
    4e1e:	411a      	asrs	r2, r3
    4e20:	0011      	movs	r1, r2
    4e22:	4099      	lsls	r1, r3
    4e24:	428d      	cmp	r5, r1
    4e26:	d001      	beq.n	4e2c <__ieee754_pow+0x96c>
    4e28:	f7ff fb76 	bl	4518 <__ieee754_pow+0x58>
    4e2c:	2301      	movs	r3, #1
    4e2e:	401a      	ands	r2, r3
    4e30:	18db      	adds	r3, r3, r3
    4e32:	1a9b      	subs	r3, r3, r2
    4e34:	469b      	mov	fp, r3
    4e36:	f7ff fb6f 	bl	4518 <__ieee754_pow+0x58>
    4e3a:	2200      	movs	r2, #0
    4e3c:	4b31      	ldr	r3, [pc, #196]	; (4f04 <__ieee754_pow+0xa44>)
    4e3e:	4690      	mov	r8, r2
    4e40:	4691      	mov	r9, r2
    4e42:	459a      	cmp	sl, r3
    4e44:	dc00      	bgt.n	4e48 <__ieee754_pow+0x988>
    4e46:	e67b      	b.n	4b40 <__ieee754_pow+0x680>
    4e48:	e645      	b.n	4ad6 <__ieee754_pow+0x616>
    4e4a:	0002      	movs	r2, r0
    4e4c:	000b      	movs	r3, r1
    4e4e:	f001 fded 	bl	6a2c <__aeabi_dsub>
    4e52:	0002      	movs	r2, r0
    4e54:	000b      	movs	r3, r1
    4e56:	f000 ff35 	bl	5cc4 <__aeabi_ddiv>
    4e5a:	f7ff fb79 	bl	4550 <__ieee754_pow+0x90>
    4e5e:	2380      	movs	r3, #128	; 0x80
    4e60:	4c2c      	ldr	r4, [pc, #176]	; (4f14 <__ieee754_pow+0xa54>)
    4e62:	05db      	lsls	r3, r3, #23
    4e64:	9308      	str	r3, [sp, #32]
    4e66:	9409      	str	r4, [sp, #36]	; 0x24
    4e68:	4b2b      	ldr	r3, [pc, #172]	; (4f18 <__ieee754_pow+0xa58>)
    4e6a:	4c2c      	ldr	r4, [pc, #176]	; (4f1c <__ieee754_pow+0xa5c>)
    4e6c:	2200      	movs	r2, #0
    4e6e:	930c      	str	r3, [sp, #48]	; 0x30
    4e70:	940d      	str	r4, [sp, #52]	; 0x34
    4e72:	2480      	movs	r4, #128	; 0x80
    4e74:	4b2a      	ldr	r3, [pc, #168]	; (4f20 <__ieee754_pow+0xa60>)
    4e76:	02e4      	lsls	r4, r4, #11
    4e78:	9206      	str	r2, [sp, #24]
    4e7a:	9307      	str	r3, [sp, #28]
    4e7c:	e449      	b.n	4712 <__ieee754_pow+0x252>
    4e7e:	464b      	mov	r3, r9
    4e80:	425b      	negs	r3, r3
    4e82:	4699      	mov	r9, r3
    4e84:	e64a      	b.n	4b1c <__ieee754_pow+0x65c>
    4e86:	46c0      	nop			; (mov r8, r8)
    4e88:	fffffc02 	.word	0xfffffc02
    4e8c:	fffffc01 	.word	0xfffffc01
    4e90:	000fffff 	.word	0x000fffff
    4e94:	3fe62e43 	.word	0x3fe62e43
    4e98:	fefa39ef 	.word	0xfefa39ef
    4e9c:	3fe62e42 	.word	0x3fe62e42
    4ea0:	0ca86c39 	.word	0x0ca86c39
    4ea4:	be205c61 	.word	0xbe205c61
    4ea8:	72bea4d0 	.word	0x72bea4d0
    4eac:	3e663769 	.word	0x3e663769
    4eb0:	c5d26bf1 	.word	0xc5d26bf1
    4eb4:	3ebbbd41 	.word	0x3ebbbd41
    4eb8:	af25de2c 	.word	0xaf25de2c
    4ebc:	3f11566a 	.word	0x3f11566a
    4ec0:	16bebd93 	.word	0x16bebd93
    4ec4:	3f66c16c 	.word	0x3f66c16c
    4ec8:	5555553e 	.word	0x5555553e
    4ecc:	3fc55555 	.word	0x3fc55555
    4ed0:	3ff00000 	.word	0x3ff00000
    4ed4:	4090cbff 	.word	0x4090cbff
    4ed8:	3f6f3400 	.word	0x3f6f3400
    4edc:	c2f8f359 	.word	0xc2f8f359
    4ee0:	01a56e1f 	.word	0x01a56e1f
    4ee4:	bff00000 	.word	0xbff00000
    4ee8:	3feffffe 	.word	0x3feffffe
    4eec:	3ff71547 	.word	0x3ff71547
    4ef0:	f85ddf44 	.word	0xf85ddf44
    4ef4:	3e54ae0b 	.word	0x3e54ae0b
    4ef8:	3fd00000 	.word	0x3fd00000
    4efc:	55555555 	.word	0x55555555
    4f00:	3fd55555 	.word	0x3fd55555
    4f04:	3fe00000 	.word	0x3fe00000
    4f08:	652b82fe 	.word	0x652b82fe
    4f0c:	8800759c 	.word	0x8800759c
    4f10:	7e37e43c 	.word	0x7e37e43c
    4f14:	3fe2b803 	.word	0x3fe2b803
    4f18:	43cfd006 	.word	0x43cfd006
    4f1c:	3e4cfdeb 	.word	0x3e4cfdeb
    4f20:	3ff80000 	.word	0x3ff80000
    4f24:	464a      	mov	r2, r9
    4f26:	f000 f999 	bl	525c <scalbn>
    4f2a:	e6b2      	b.n	4c92 <__ieee754_pow+0x7d2>

00004f2c <__ieee754_sqrt>:
    4f2c:	4b6c      	ldr	r3, [pc, #432]	; (50e0 <__ieee754_sqrt+0x1b4>)
    4f2e:	b5f0      	push	{r4, r5, r6, r7, lr}
    4f30:	000a      	movs	r2, r1
    4f32:	4646      	mov	r6, r8
    4f34:	000d      	movs	r5, r1
    4f36:	46d6      	mov	lr, sl
    4f38:	464f      	mov	r7, r9
    4f3a:	0019      	movs	r1, r3
    4f3c:	b5c0      	push	{r6, r7, lr}
    4f3e:	0004      	movs	r4, r0
    4f40:	0006      	movs	r6, r0
    4f42:	4029      	ands	r1, r5
    4f44:	4299      	cmp	r1, r3
    4f46:	d100      	bne.n	4f4a <__ieee754_sqrt+0x1e>
    4f48:	e0a7      	b.n	509a <__ieee754_sqrt+0x16e>
    4f4a:	2d00      	cmp	r5, #0
    4f4c:	dc00      	bgt.n	4f50 <__ieee754_sqrt+0x24>
    4f4e:	e081      	b.n	5054 <__ieee754_sqrt+0x128>
    4f50:	152f      	asrs	r7, r5, #20
    4f52:	d100      	bne.n	4f56 <__ieee754_sqrt+0x2a>
    4f54:	e08e      	b.n	5074 <__ieee754_sqrt+0x148>
    4f56:	4b63      	ldr	r3, [pc, #396]	; (50e4 <__ieee754_sqrt+0x1b8>)
    4f58:	0312      	lsls	r2, r2, #12
    4f5a:	469c      	mov	ip, r3
    4f5c:	2380      	movs	r3, #128	; 0x80
    4f5e:	0b12      	lsrs	r2, r2, #12
    4f60:	035b      	lsls	r3, r3, #13
    4f62:	4467      	add	r7, ip
    4f64:	431a      	orrs	r2, r3
    4f66:	07fb      	lsls	r3, r7, #31
    4f68:	d468      	bmi.n	503c <__ieee754_sqrt+0x110>
    4f6a:	107b      	asrs	r3, r7, #1
    4f6c:	469c      	mov	ip, r3
    4f6e:	0fe3      	lsrs	r3, r4, #31
    4f70:	189b      	adds	r3, r3, r2
    4f72:	189b      	adds	r3, r3, r2
    4f74:	2280      	movs	r2, #128	; 0x80
    4f76:	2116      	movs	r1, #22
    4f78:	2600      	movs	r6, #0
    4f7a:	2500      	movs	r5, #0
    4f7c:	0064      	lsls	r4, r4, #1
    4f7e:	0392      	lsls	r2, r2, #14
    4f80:	18a8      	adds	r0, r5, r2
    4f82:	4298      	cmp	r0, r3
    4f84:	dc02      	bgt.n	4f8c <__ieee754_sqrt+0x60>
    4f86:	1885      	adds	r5, r0, r2
    4f88:	1a1b      	subs	r3, r3, r0
    4f8a:	18b6      	adds	r6, r6, r2
    4f8c:	0fe0      	lsrs	r0, r4, #31
    4f8e:	005b      	lsls	r3, r3, #1
    4f90:	3901      	subs	r1, #1
    4f92:	181b      	adds	r3, r3, r0
    4f94:	0064      	lsls	r4, r4, #1
    4f96:	0852      	lsrs	r2, r2, #1
    4f98:	2900      	cmp	r1, #0
    4f9a:	d1f1      	bne.n	4f80 <__ieee754_sqrt+0x54>
    4f9c:	2200      	movs	r2, #0
    4f9e:	4692      	mov	sl, r2
    4fa0:	4690      	mov	r8, r2
    4fa2:	2280      	movs	r2, #128	; 0x80
    4fa4:	2020      	movs	r0, #32
    4fa6:	0612      	lsls	r2, r2, #24
    4fa8:	e009      	b.n	4fbe <__ieee754_sqrt+0x92>
    4faa:	42ab      	cmp	r3, r5
    4fac:	d038      	beq.n	5020 <__ieee754_sqrt+0xf4>
    4fae:	0fe1      	lsrs	r1, r4, #31
    4fb0:	18c9      	adds	r1, r1, r3
    4fb2:	3801      	subs	r0, #1
    4fb4:	18cb      	adds	r3, r1, r3
    4fb6:	0064      	lsls	r4, r4, #1
    4fb8:	0852      	lsrs	r2, r2, #1
    4fba:	2800      	cmp	r0, #0
    4fbc:	d018      	beq.n	4ff0 <__ieee754_sqrt+0xc4>
    4fbe:	4641      	mov	r1, r8
    4fc0:	1851      	adds	r1, r2, r1
    4fc2:	42ab      	cmp	r3, r5
    4fc4:	ddf1      	ble.n	4faa <__ieee754_sqrt+0x7e>
    4fc6:	188f      	adds	r7, r1, r2
    4fc8:	46b8      	mov	r8, r7
    4fca:	46a9      	mov	r9, r5
    4fcc:	2900      	cmp	r1, #0
    4fce:	db30      	blt.n	5032 <__ieee754_sqrt+0x106>
    4fd0:	1b5b      	subs	r3, r3, r5
    4fd2:	428c      	cmp	r4, r1
    4fd4:	41ad      	sbcs	r5, r5
    4fd6:	426d      	negs	r5, r5
    4fd8:	1b5b      	subs	r3, r3, r5
    4fda:	1a64      	subs	r4, r4, r1
    4fdc:	0fe1      	lsrs	r1, r4, #31
    4fde:	18c9      	adds	r1, r1, r3
    4fe0:	3801      	subs	r0, #1
    4fe2:	4492      	add	sl, r2
    4fe4:	464d      	mov	r5, r9
    4fe6:	18cb      	adds	r3, r1, r3
    4fe8:	0064      	lsls	r4, r4, #1
    4fea:	0852      	lsrs	r2, r2, #1
    4fec:	2800      	cmp	r0, #0
    4fee:	d1e6      	bne.n	4fbe <__ieee754_sqrt+0x92>
    4ff0:	4323      	orrs	r3, r4
    4ff2:	d128      	bne.n	5046 <__ieee754_sqrt+0x11a>
    4ff4:	4653      	mov	r3, sl
    4ff6:	085b      	lsrs	r3, r3, #1
    4ff8:	493b      	ldr	r1, [pc, #236]	; (50e8 <__ieee754_sqrt+0x1bc>)
    4ffa:	1072      	asrs	r2, r6, #1
    4ffc:	4688      	mov	r8, r1
    4ffe:	4442      	add	r2, r8
    5000:	07f1      	lsls	r1, r6, #31
    5002:	d502      	bpl.n	500a <__ieee754_sqrt+0xde>
    5004:	2180      	movs	r1, #128	; 0x80
    5006:	0609      	lsls	r1, r1, #24
    5008:	430b      	orrs	r3, r1
    500a:	4661      	mov	r1, ip
    500c:	001e      	movs	r6, r3
    500e:	050f      	lsls	r7, r1, #20
    5010:	18bd      	adds	r5, r7, r2
    5012:	0030      	movs	r0, r6
    5014:	0029      	movs	r1, r5
    5016:	bc1c      	pop	{r2, r3, r4}
    5018:	4690      	mov	r8, r2
    501a:	4699      	mov	r9, r3
    501c:	46a2      	mov	sl, r4
    501e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5020:	42a1      	cmp	r1, r4
    5022:	d8c4      	bhi.n	4fae <__ieee754_sqrt+0x82>
    5024:	188f      	adds	r7, r1, r2
    5026:	46b8      	mov	r8, r7
    5028:	2900      	cmp	r1, #0
    502a:	db42      	blt.n	50b2 <__ieee754_sqrt+0x186>
    502c:	4699      	mov	r9, r3
    502e:	2300      	movs	r3, #0
    5030:	e7d3      	b.n	4fda <__ieee754_sqrt+0xae>
    5032:	2f00      	cmp	r7, #0
    5034:	db2f      	blt.n	5096 <__ieee754_sqrt+0x16a>
    5036:	1c6f      	adds	r7, r5, #1
    5038:	46b9      	mov	r9, r7
    503a:	e7c9      	b.n	4fd0 <__ieee754_sqrt+0xa4>
    503c:	0fe1      	lsrs	r1, r4, #31
    503e:	0052      	lsls	r2, r2, #1
    5040:	188a      	adds	r2, r1, r2
    5042:	0064      	lsls	r4, r4, #1
    5044:	e791      	b.n	4f6a <__ieee754_sqrt+0x3e>
    5046:	4653      	mov	r3, sl
    5048:	3301      	adds	r3, #1
    504a:	d035      	beq.n	50b8 <__ieee754_sqrt+0x18c>
    504c:	4653      	mov	r3, sl
    504e:	3301      	adds	r3, #1
    5050:	085b      	lsrs	r3, r3, #1
    5052:	e7d1      	b.n	4ff8 <__ieee754_sqrt+0xcc>
    5054:	006b      	lsls	r3, r5, #1
    5056:	085b      	lsrs	r3, r3, #1
    5058:	4303      	orrs	r3, r0
    505a:	d0da      	beq.n	5012 <__ieee754_sqrt+0xe6>
    505c:	2700      	movs	r7, #0
    505e:	2d00      	cmp	r5, #0
    5060:	d132      	bne.n	50c8 <__ieee754_sqrt+0x19c>
    5062:	0ae2      	lsrs	r2, r4, #11
    5064:	3f15      	subs	r7, #21
    5066:	0564      	lsls	r4, r4, #21
    5068:	2a00      	cmp	r2, #0
    506a:	d0fa      	beq.n	5062 <__ieee754_sqrt+0x136>
    506c:	2380      	movs	r3, #128	; 0x80
    506e:	035b      	lsls	r3, r3, #13
    5070:	421a      	tst	r2, r3
    5072:	d124      	bne.n	50be <__ieee754_sqrt+0x192>
    5074:	2080      	movs	r0, #128	; 0x80
    5076:	2300      	movs	r3, #0
    5078:	0340      	lsls	r0, r0, #13
    507a:	e000      	b.n	507e <__ieee754_sqrt+0x152>
    507c:	000b      	movs	r3, r1
    507e:	0052      	lsls	r2, r2, #1
    5080:	1c59      	adds	r1, r3, #1
    5082:	4202      	tst	r2, r0
    5084:	d0fa      	beq.n	507c <__ieee754_sqrt+0x150>
    5086:	2020      	movs	r0, #32
    5088:	1a40      	subs	r0, r0, r1
    508a:	1aff      	subs	r7, r7, r3
    508c:	0023      	movs	r3, r4
    508e:	40c3      	lsrs	r3, r0
    5090:	408c      	lsls	r4, r1
    5092:	431a      	orrs	r2, r3
    5094:	e75f      	b.n	4f56 <__ieee754_sqrt+0x2a>
    5096:	46a9      	mov	r9, r5
    5098:	e79a      	b.n	4fd0 <__ieee754_sqrt+0xa4>
    509a:	002b      	movs	r3, r5
    509c:	0002      	movs	r2, r0
    509e:	0029      	movs	r1, r5
    50a0:	f001 fa44 	bl	652c <__aeabi_dmul>
    50a4:	0032      	movs	r2, r6
    50a6:	002b      	movs	r3, r5
    50a8:	f000 fafc 	bl	56a4 <__aeabi_dadd>
    50ac:	0006      	movs	r6, r0
    50ae:	000d      	movs	r5, r1
    50b0:	e7af      	b.n	5012 <__ieee754_sqrt+0xe6>
    50b2:	2f00      	cmp	r7, #0
    50b4:	dabf      	bge.n	5036 <__ieee754_sqrt+0x10a>
    50b6:	e7b9      	b.n	502c <__ieee754_sqrt+0x100>
    50b8:	3601      	adds	r6, #1
    50ba:	2300      	movs	r3, #0
    50bc:	e79c      	b.n	4ff8 <__ieee754_sqrt+0xcc>
    50be:	2301      	movs	r3, #1
    50c0:	2100      	movs	r1, #0
    50c2:	2020      	movs	r0, #32
    50c4:	425b      	negs	r3, r3
    50c6:	e7e0      	b.n	508a <__ieee754_sqrt+0x15e>
    50c8:	002b      	movs	r3, r5
    50ca:	0002      	movs	r2, r0
    50cc:	0029      	movs	r1, r5
    50ce:	f001 fcad 	bl	6a2c <__aeabi_dsub>
    50d2:	0002      	movs	r2, r0
    50d4:	000b      	movs	r3, r1
    50d6:	f000 fdf5 	bl	5cc4 <__aeabi_ddiv>
    50da:	0006      	movs	r6, r0
    50dc:	000d      	movs	r5, r1
    50de:	e798      	b.n	5012 <__ieee754_sqrt+0xe6>
    50e0:	7ff00000 	.word	0x7ff00000
    50e4:	fffffc01 	.word	0xfffffc01
    50e8:	3fe00000 	.word	0x3fe00000

000050ec <fabs>:
    50ec:	0049      	lsls	r1, r1, #1
    50ee:	084b      	lsrs	r3, r1, #1
    50f0:	0019      	movs	r1, r3
    50f2:	4770      	bx	lr

000050f4 <finite>:
    50f4:	4b03      	ldr	r3, [pc, #12]	; (5104 <finite+0x10>)
    50f6:	0048      	lsls	r0, r1, #1
    50f8:	469c      	mov	ip, r3
    50fa:	0840      	lsrs	r0, r0, #1
    50fc:	4460      	add	r0, ip
    50fe:	0fc0      	lsrs	r0, r0, #31
    5100:	4770      	bx	lr
    5102:	46c0      	nop			; (mov r8, r8)
    5104:	80100000 	.word	0x80100000

00005108 <matherr>:
    5108:	2000      	movs	r0, #0
    510a:	4770      	bx	lr

0000510c <nan>:
    510c:	2000      	movs	r0, #0
    510e:	4901      	ldr	r1, [pc, #4]	; (5114 <nan+0x8>)
    5110:	4770      	bx	lr
    5112:	46c0      	nop			; (mov r8, r8)
    5114:	7ff80000 	.word	0x7ff80000

00005118 <rint>:
    5118:	b5f0      	push	{r4, r5, r6, r7, lr}
    511a:	46c6      	mov	lr, r8
    511c:	b500      	push	{lr}
    511e:	0fcb      	lsrs	r3, r1, #31
    5120:	4698      	mov	r8, r3
    5122:	4c4a      	ldr	r4, [pc, #296]	; (524c <rint+0x134>)
    5124:	004b      	lsls	r3, r1, #1
    5126:	0d5b      	lsrs	r3, r3, #21
    5128:	191e      	adds	r6, r3, r4
    512a:	b082      	sub	sp, #8
    512c:	0007      	movs	r7, r0
    512e:	000a      	movs	r2, r1
    5130:	2e13      	cmp	r6, #19
    5132:	dc35      	bgt.n	51a0 <rint+0x88>
    5134:	2e00      	cmp	r6, #0
    5136:	db57      	blt.n	51e8 <rint+0xd0>
    5138:	4b45      	ldr	r3, [pc, #276]	; (5250 <rint+0x138>)
    513a:	0004      	movs	r4, r0
    513c:	4133      	asrs	r3, r6
    513e:	001f      	movs	r7, r3
    5140:	400f      	ands	r7, r1
    5142:	4307      	orrs	r7, r0
    5144:	000d      	movs	r5, r1
    5146:	2f00      	cmp	r7, #0
    5148:	d024      	beq.n	5194 <rint+0x7c>
    514a:	085b      	lsrs	r3, r3, #1
    514c:	001c      	movs	r4, r3
    514e:	400c      	ands	r4, r1
    5150:	4320      	orrs	r0, r4
    5152:	2700      	movs	r7, #0
    5154:	2800      	cmp	r0, #0
    5156:	d007      	beq.n	5168 <rint+0x50>
    5158:	2e13      	cmp	r6, #19
    515a:	d100      	bne.n	515e <rint+0x46>
    515c:	e073      	b.n	5246 <rint+0x12e>
    515e:	2280      	movs	r2, #128	; 0x80
    5160:	02d2      	lsls	r2, r2, #11
    5162:	4132      	asrs	r2, r6
    5164:	4399      	bics	r1, r3
    5166:	430a      	orrs	r2, r1
    5168:	4643      	mov	r3, r8
    516a:	00de      	lsls	r6, r3, #3
    516c:	4b39      	ldr	r3, [pc, #228]	; (5254 <rint+0x13c>)
    516e:	0011      	movs	r1, r2
    5170:	199e      	adds	r6, r3, r6
    5172:	6834      	ldr	r4, [r6, #0]
    5174:	6875      	ldr	r5, [r6, #4]
    5176:	0038      	movs	r0, r7
    5178:	0022      	movs	r2, r4
    517a:	002b      	movs	r3, r5
    517c:	f000 fa92 	bl	56a4 <__aeabi_dadd>
    5180:	9000      	str	r0, [sp, #0]
    5182:	9101      	str	r1, [sp, #4]
    5184:	9800      	ldr	r0, [sp, #0]
    5186:	9901      	ldr	r1, [sp, #4]
    5188:	0022      	movs	r2, r4
    518a:	002b      	movs	r3, r5
    518c:	f001 fc4e 	bl	6a2c <__aeabi_dsub>
    5190:	0004      	movs	r4, r0
    5192:	000d      	movs	r5, r1
    5194:	0020      	movs	r0, r4
    5196:	0029      	movs	r1, r5
    5198:	b002      	add	sp, #8
    519a:	bc04      	pop	{r2}
    519c:	4690      	mov	r8, r2
    519e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    51a0:	2e33      	cmp	r6, #51	; 0x33
    51a2:	dd0c      	ble.n	51be <rint+0xa6>
    51a4:	2380      	movs	r3, #128	; 0x80
    51a6:	0004      	movs	r4, r0
    51a8:	00db      	lsls	r3, r3, #3
    51aa:	000d      	movs	r5, r1
    51ac:	429e      	cmp	r6, r3
    51ae:	d1f1      	bne.n	5194 <rint+0x7c>
    51b0:	0002      	movs	r2, r0
    51b2:	000b      	movs	r3, r1
    51b4:	f000 fa76 	bl	56a4 <__aeabi_dadd>
    51b8:	0004      	movs	r4, r0
    51ba:	000d      	movs	r5, r1
    51bc:	e7ea      	b.n	5194 <rint+0x7c>
    51be:	4c26      	ldr	r4, [pc, #152]	; (5258 <rint+0x140>)
    51c0:	000d      	movs	r5, r1
    51c2:	46a4      	mov	ip, r4
    51c4:	2401      	movs	r4, #1
    51c6:	4463      	add	r3, ip
    51c8:	4264      	negs	r4, r4
    51ca:	40dc      	lsrs	r4, r3
    51cc:	46a4      	mov	ip, r4
    51ce:	4661      	mov	r1, ip
    51d0:	0004      	movs	r4, r0
    51d2:	4201      	tst	r1, r0
    51d4:	d0de      	beq.n	5194 <rint+0x7c>
    51d6:	0849      	lsrs	r1, r1, #1
    51d8:	4201      	tst	r1, r0
    51da:	d0c5      	beq.n	5168 <rint+0x50>
    51dc:	2780      	movs	r7, #128	; 0x80
    51de:	05ff      	lsls	r7, r7, #23
    51e0:	411f      	asrs	r7, r3
    51e2:	4388      	bics	r0, r1
    51e4:	4307      	orrs	r7, r0
    51e6:	e7bf      	b.n	5168 <rint+0x50>
    51e8:	004b      	lsls	r3, r1, #1
    51ea:	085b      	lsrs	r3, r3, #1
    51ec:	4303      	orrs	r3, r0
    51ee:	0004      	movs	r4, r0
    51f0:	000d      	movs	r5, r1
    51f2:	2b00      	cmp	r3, #0
    51f4:	d0ce      	beq.n	5194 <rint+0x7c>
    51f6:	030b      	lsls	r3, r1, #12
    51f8:	0b1b      	lsrs	r3, r3, #12
    51fa:	4303      	orrs	r3, r0
    51fc:	001a      	movs	r2, r3
    51fe:	425b      	negs	r3, r3
    5200:	4313      	orrs	r3, r2
    5202:	2280      	movs	r2, #128	; 0x80
    5204:	0b1b      	lsrs	r3, r3, #12
    5206:	0312      	lsls	r2, r2, #12
    5208:	4013      	ands	r3, r2
    520a:	0c4a      	lsrs	r2, r1, #17
    520c:	0452      	lsls	r2, r2, #17
    520e:	4313      	orrs	r3, r2
    5210:	0019      	movs	r1, r3
    5212:	4643      	mov	r3, r8
    5214:	00da      	lsls	r2, r3, #3
    5216:	4b0f      	ldr	r3, [pc, #60]	; (5254 <rint+0x13c>)
    5218:	189b      	adds	r3, r3, r2
    521a:	681c      	ldr	r4, [r3, #0]
    521c:	685d      	ldr	r5, [r3, #4]
    521e:	0022      	movs	r2, r4
    5220:	002b      	movs	r3, r5
    5222:	f000 fa3f 	bl	56a4 <__aeabi_dadd>
    5226:	9000      	str	r0, [sp, #0]
    5228:	9101      	str	r1, [sp, #4]
    522a:	9800      	ldr	r0, [sp, #0]
    522c:	9901      	ldr	r1, [sp, #4]
    522e:	0022      	movs	r2, r4
    5230:	002b      	movs	r3, r5
    5232:	f001 fbfb 	bl	6a2c <__aeabi_dsub>
    5236:	4642      	mov	r2, r8
    5238:	004b      	lsls	r3, r1, #1
    523a:	085b      	lsrs	r3, r3, #1
    523c:	07d6      	lsls	r6, r2, #31
    523e:	4333      	orrs	r3, r6
    5240:	0004      	movs	r4, r0
    5242:	001d      	movs	r5, r3
    5244:	e7a6      	b.n	5194 <rint+0x7c>
    5246:	2780      	movs	r7, #128	; 0x80
    5248:	063f      	lsls	r7, r7, #24
    524a:	e788      	b.n	515e <rint+0x46>
    524c:	fffffc01 	.word	0xfffffc01
    5250:	000fffff 	.word	0x000fffff
    5254:	00007458 	.word	0x00007458
    5258:	fffffbed 	.word	0xfffffbed

0000525c <scalbn>:
    525c:	004b      	lsls	r3, r1, #1
    525e:	b570      	push	{r4, r5, r6, lr}
    5260:	0d5b      	lsrs	r3, r3, #21
    5262:	0014      	movs	r4, r2
    5264:	000a      	movs	r2, r1
    5266:	2b00      	cmp	r3, #0
    5268:	d11a      	bne.n	52a0 <scalbn+0x44>
    526a:	004b      	lsls	r3, r1, #1
    526c:	085b      	lsrs	r3, r3, #1
    526e:	4303      	orrs	r3, r0
    5270:	d015      	beq.n	529e <scalbn+0x42>
    5272:	2200      	movs	r2, #0
    5274:	4b22      	ldr	r3, [pc, #136]	; (5300 <scalbn+0xa4>)
    5276:	f001 f959 	bl	652c <__aeabi_dmul>
    527a:	4b22      	ldr	r3, [pc, #136]	; (5304 <scalbn+0xa8>)
    527c:	000a      	movs	r2, r1
    527e:	429c      	cmp	r4, r3
    5280:	db22      	blt.n	52c8 <scalbn+0x6c>
    5282:	004b      	lsls	r3, r1, #1
    5284:	0d5b      	lsrs	r3, r3, #21
    5286:	3b36      	subs	r3, #54	; 0x36
    5288:	4d1f      	ldr	r5, [pc, #124]	; (5308 <scalbn+0xac>)
    528a:	18e3      	adds	r3, r4, r3
    528c:	42ab      	cmp	r3, r5
    528e:	dc20      	bgt.n	52d2 <scalbn+0x76>
    5290:	2b00      	cmp	r3, #0
    5292:	dd0d      	ble.n	52b0 <scalbn+0x54>
    5294:	4c1d      	ldr	r4, [pc, #116]	; (530c <scalbn+0xb0>)
    5296:	051b      	lsls	r3, r3, #20
    5298:	4022      	ands	r2, r4
    529a:	431a      	orrs	r2, r3
    529c:	0011      	movs	r1, r2
    529e:	bd70      	pop	{r4, r5, r6, pc}
    52a0:	4d1b      	ldr	r5, [pc, #108]	; (5310 <scalbn+0xb4>)
    52a2:	42ab      	cmp	r3, r5
    52a4:	d1f0      	bne.n	5288 <scalbn+0x2c>
    52a6:	0002      	movs	r2, r0
    52a8:	000b      	movs	r3, r1
    52aa:	f000 f9fb 	bl	56a4 <__aeabi_dadd>
    52ae:	e7f6      	b.n	529e <scalbn+0x42>
    52b0:	001d      	movs	r5, r3
    52b2:	3535      	adds	r5, #53	; 0x35
    52b4:	da18      	bge.n	52e8 <scalbn+0x8c>
    52b6:	4b17      	ldr	r3, [pc, #92]	; (5314 <scalbn+0xb8>)
    52b8:	0002      	movs	r2, r0
    52ba:	429c      	cmp	r4, r3
    52bc:	dc0a      	bgt.n	52d4 <scalbn+0x78>
    52be:	000b      	movs	r3, r1
    52c0:	4815      	ldr	r0, [pc, #84]	; (5318 <scalbn+0xbc>)
    52c2:	4916      	ldr	r1, [pc, #88]	; (531c <scalbn+0xc0>)
    52c4:	f000 f832 	bl	532c <copysign>
    52c8:	4a13      	ldr	r2, [pc, #76]	; (5318 <scalbn+0xbc>)
    52ca:	4b14      	ldr	r3, [pc, #80]	; (531c <scalbn+0xc0>)
    52cc:	f001 f92e 	bl	652c <__aeabi_dmul>
    52d0:	e7e5      	b.n	529e <scalbn+0x42>
    52d2:	0002      	movs	r2, r0
    52d4:	000b      	movs	r3, r1
    52d6:	4812      	ldr	r0, [pc, #72]	; (5320 <scalbn+0xc4>)
    52d8:	4912      	ldr	r1, [pc, #72]	; (5324 <scalbn+0xc8>)
    52da:	f000 f827 	bl	532c <copysign>
    52de:	4a10      	ldr	r2, [pc, #64]	; (5320 <scalbn+0xc4>)
    52e0:	4b10      	ldr	r3, [pc, #64]	; (5324 <scalbn+0xc8>)
    52e2:	f001 f923 	bl	652c <__aeabi_dmul>
    52e6:	e7da      	b.n	529e <scalbn+0x42>
    52e8:	4c08      	ldr	r4, [pc, #32]	; (530c <scalbn+0xb0>)
    52ea:	3336      	adds	r3, #54	; 0x36
    52ec:	4022      	ands	r2, r4
    52ee:	051b      	lsls	r3, r3, #20
    52f0:	4313      	orrs	r3, r2
    52f2:	0019      	movs	r1, r3
    52f4:	2200      	movs	r2, #0
    52f6:	4b0c      	ldr	r3, [pc, #48]	; (5328 <scalbn+0xcc>)
    52f8:	f001 f918 	bl	652c <__aeabi_dmul>
    52fc:	e7cf      	b.n	529e <scalbn+0x42>
    52fe:	46c0      	nop			; (mov r8, r8)
    5300:	43500000 	.word	0x43500000
    5304:	ffff3cb0 	.word	0xffff3cb0
    5308:	000007fe 	.word	0x000007fe
    530c:	800fffff 	.word	0x800fffff
    5310:	000007ff 	.word	0x000007ff
    5314:	0000c350 	.word	0x0000c350
    5318:	c2f8f359 	.word	0xc2f8f359
    531c:	01a56e1f 	.word	0x01a56e1f
    5320:	8800759c 	.word	0x8800759c
    5324:	7e37e43c 	.word	0x7e37e43c
    5328:	3c900000 	.word	0x3c900000

0000532c <copysign>:
    532c:	b530      	push	{r4, r5, lr}
    532e:	004a      	lsls	r2, r1, #1
    5330:	0fdb      	lsrs	r3, r3, #31
    5332:	07db      	lsls	r3, r3, #31
    5334:	0852      	lsrs	r2, r2, #1
    5336:	431a      	orrs	r2, r3
    5338:	0011      	movs	r1, r2
    533a:	bd30      	pop	{r4, r5, pc}

0000533c <__udivsi3>:
    533c:	2200      	movs	r2, #0
    533e:	0843      	lsrs	r3, r0, #1
    5340:	428b      	cmp	r3, r1
    5342:	d374      	bcc.n	542e <__udivsi3+0xf2>
    5344:	0903      	lsrs	r3, r0, #4
    5346:	428b      	cmp	r3, r1
    5348:	d35f      	bcc.n	540a <__udivsi3+0xce>
    534a:	0a03      	lsrs	r3, r0, #8
    534c:	428b      	cmp	r3, r1
    534e:	d344      	bcc.n	53da <__udivsi3+0x9e>
    5350:	0b03      	lsrs	r3, r0, #12
    5352:	428b      	cmp	r3, r1
    5354:	d328      	bcc.n	53a8 <__udivsi3+0x6c>
    5356:	0c03      	lsrs	r3, r0, #16
    5358:	428b      	cmp	r3, r1
    535a:	d30d      	bcc.n	5378 <__udivsi3+0x3c>
    535c:	22ff      	movs	r2, #255	; 0xff
    535e:	0209      	lsls	r1, r1, #8
    5360:	ba12      	rev	r2, r2
    5362:	0c03      	lsrs	r3, r0, #16
    5364:	428b      	cmp	r3, r1
    5366:	d302      	bcc.n	536e <__udivsi3+0x32>
    5368:	1212      	asrs	r2, r2, #8
    536a:	0209      	lsls	r1, r1, #8
    536c:	d065      	beq.n	543a <__udivsi3+0xfe>
    536e:	0b03      	lsrs	r3, r0, #12
    5370:	428b      	cmp	r3, r1
    5372:	d319      	bcc.n	53a8 <__udivsi3+0x6c>
    5374:	e000      	b.n	5378 <__udivsi3+0x3c>
    5376:	0a09      	lsrs	r1, r1, #8
    5378:	0bc3      	lsrs	r3, r0, #15
    537a:	428b      	cmp	r3, r1
    537c:	d301      	bcc.n	5382 <__udivsi3+0x46>
    537e:	03cb      	lsls	r3, r1, #15
    5380:	1ac0      	subs	r0, r0, r3
    5382:	4152      	adcs	r2, r2
    5384:	0b83      	lsrs	r3, r0, #14
    5386:	428b      	cmp	r3, r1
    5388:	d301      	bcc.n	538e <__udivsi3+0x52>
    538a:	038b      	lsls	r3, r1, #14
    538c:	1ac0      	subs	r0, r0, r3
    538e:	4152      	adcs	r2, r2
    5390:	0b43      	lsrs	r3, r0, #13
    5392:	428b      	cmp	r3, r1
    5394:	d301      	bcc.n	539a <__udivsi3+0x5e>
    5396:	034b      	lsls	r3, r1, #13
    5398:	1ac0      	subs	r0, r0, r3
    539a:	4152      	adcs	r2, r2
    539c:	0b03      	lsrs	r3, r0, #12
    539e:	428b      	cmp	r3, r1
    53a0:	d301      	bcc.n	53a6 <__udivsi3+0x6a>
    53a2:	030b      	lsls	r3, r1, #12
    53a4:	1ac0      	subs	r0, r0, r3
    53a6:	4152      	adcs	r2, r2
    53a8:	0ac3      	lsrs	r3, r0, #11
    53aa:	428b      	cmp	r3, r1
    53ac:	d301      	bcc.n	53b2 <__udivsi3+0x76>
    53ae:	02cb      	lsls	r3, r1, #11
    53b0:	1ac0      	subs	r0, r0, r3
    53b2:	4152      	adcs	r2, r2
    53b4:	0a83      	lsrs	r3, r0, #10
    53b6:	428b      	cmp	r3, r1
    53b8:	d301      	bcc.n	53be <__udivsi3+0x82>
    53ba:	028b      	lsls	r3, r1, #10
    53bc:	1ac0      	subs	r0, r0, r3
    53be:	4152      	adcs	r2, r2
    53c0:	0a43      	lsrs	r3, r0, #9
    53c2:	428b      	cmp	r3, r1
    53c4:	d301      	bcc.n	53ca <__udivsi3+0x8e>
    53c6:	024b      	lsls	r3, r1, #9
    53c8:	1ac0      	subs	r0, r0, r3
    53ca:	4152      	adcs	r2, r2
    53cc:	0a03      	lsrs	r3, r0, #8
    53ce:	428b      	cmp	r3, r1
    53d0:	d301      	bcc.n	53d6 <__udivsi3+0x9a>
    53d2:	020b      	lsls	r3, r1, #8
    53d4:	1ac0      	subs	r0, r0, r3
    53d6:	4152      	adcs	r2, r2
    53d8:	d2cd      	bcs.n	5376 <__udivsi3+0x3a>
    53da:	09c3      	lsrs	r3, r0, #7
    53dc:	428b      	cmp	r3, r1
    53de:	d301      	bcc.n	53e4 <__udivsi3+0xa8>
    53e0:	01cb      	lsls	r3, r1, #7
    53e2:	1ac0      	subs	r0, r0, r3
    53e4:	4152      	adcs	r2, r2
    53e6:	0983      	lsrs	r3, r0, #6
    53e8:	428b      	cmp	r3, r1
    53ea:	d301      	bcc.n	53f0 <__udivsi3+0xb4>
    53ec:	018b      	lsls	r3, r1, #6
    53ee:	1ac0      	subs	r0, r0, r3
    53f0:	4152      	adcs	r2, r2
    53f2:	0943      	lsrs	r3, r0, #5
    53f4:	428b      	cmp	r3, r1
    53f6:	d301      	bcc.n	53fc <__udivsi3+0xc0>
    53f8:	014b      	lsls	r3, r1, #5
    53fa:	1ac0      	subs	r0, r0, r3
    53fc:	4152      	adcs	r2, r2
    53fe:	0903      	lsrs	r3, r0, #4
    5400:	428b      	cmp	r3, r1
    5402:	d301      	bcc.n	5408 <__udivsi3+0xcc>
    5404:	010b      	lsls	r3, r1, #4
    5406:	1ac0      	subs	r0, r0, r3
    5408:	4152      	adcs	r2, r2
    540a:	08c3      	lsrs	r3, r0, #3
    540c:	428b      	cmp	r3, r1
    540e:	d301      	bcc.n	5414 <__udivsi3+0xd8>
    5410:	00cb      	lsls	r3, r1, #3
    5412:	1ac0      	subs	r0, r0, r3
    5414:	4152      	adcs	r2, r2
    5416:	0883      	lsrs	r3, r0, #2
    5418:	428b      	cmp	r3, r1
    541a:	d301      	bcc.n	5420 <__udivsi3+0xe4>
    541c:	008b      	lsls	r3, r1, #2
    541e:	1ac0      	subs	r0, r0, r3
    5420:	4152      	adcs	r2, r2
    5422:	0843      	lsrs	r3, r0, #1
    5424:	428b      	cmp	r3, r1
    5426:	d301      	bcc.n	542c <__udivsi3+0xf0>
    5428:	004b      	lsls	r3, r1, #1
    542a:	1ac0      	subs	r0, r0, r3
    542c:	4152      	adcs	r2, r2
    542e:	1a41      	subs	r1, r0, r1
    5430:	d200      	bcs.n	5434 <__udivsi3+0xf8>
    5432:	4601      	mov	r1, r0
    5434:	4152      	adcs	r2, r2
    5436:	4610      	mov	r0, r2
    5438:	4770      	bx	lr
    543a:	e7ff      	b.n	543c <__udivsi3+0x100>
    543c:	b501      	push	{r0, lr}
    543e:	2000      	movs	r0, #0
    5440:	f000 f8f0 	bl	5624 <__aeabi_idiv0>
    5444:	bd02      	pop	{r1, pc}
    5446:	46c0      	nop			; (mov r8, r8)

00005448 <__aeabi_uidivmod>:
    5448:	2900      	cmp	r1, #0
    544a:	d0f7      	beq.n	543c <__udivsi3+0x100>
    544c:	e776      	b.n	533c <__udivsi3>
    544e:	4770      	bx	lr

00005450 <__divsi3>:
    5450:	4603      	mov	r3, r0
    5452:	430b      	orrs	r3, r1
    5454:	d47f      	bmi.n	5556 <__divsi3+0x106>
    5456:	2200      	movs	r2, #0
    5458:	0843      	lsrs	r3, r0, #1
    545a:	428b      	cmp	r3, r1
    545c:	d374      	bcc.n	5548 <__divsi3+0xf8>
    545e:	0903      	lsrs	r3, r0, #4
    5460:	428b      	cmp	r3, r1
    5462:	d35f      	bcc.n	5524 <__divsi3+0xd4>
    5464:	0a03      	lsrs	r3, r0, #8
    5466:	428b      	cmp	r3, r1
    5468:	d344      	bcc.n	54f4 <__divsi3+0xa4>
    546a:	0b03      	lsrs	r3, r0, #12
    546c:	428b      	cmp	r3, r1
    546e:	d328      	bcc.n	54c2 <__divsi3+0x72>
    5470:	0c03      	lsrs	r3, r0, #16
    5472:	428b      	cmp	r3, r1
    5474:	d30d      	bcc.n	5492 <__divsi3+0x42>
    5476:	22ff      	movs	r2, #255	; 0xff
    5478:	0209      	lsls	r1, r1, #8
    547a:	ba12      	rev	r2, r2
    547c:	0c03      	lsrs	r3, r0, #16
    547e:	428b      	cmp	r3, r1
    5480:	d302      	bcc.n	5488 <__divsi3+0x38>
    5482:	1212      	asrs	r2, r2, #8
    5484:	0209      	lsls	r1, r1, #8
    5486:	d065      	beq.n	5554 <__divsi3+0x104>
    5488:	0b03      	lsrs	r3, r0, #12
    548a:	428b      	cmp	r3, r1
    548c:	d319      	bcc.n	54c2 <__divsi3+0x72>
    548e:	e000      	b.n	5492 <__divsi3+0x42>
    5490:	0a09      	lsrs	r1, r1, #8
    5492:	0bc3      	lsrs	r3, r0, #15
    5494:	428b      	cmp	r3, r1
    5496:	d301      	bcc.n	549c <__divsi3+0x4c>
    5498:	03cb      	lsls	r3, r1, #15
    549a:	1ac0      	subs	r0, r0, r3
    549c:	4152      	adcs	r2, r2
    549e:	0b83      	lsrs	r3, r0, #14
    54a0:	428b      	cmp	r3, r1
    54a2:	d301      	bcc.n	54a8 <__divsi3+0x58>
    54a4:	038b      	lsls	r3, r1, #14
    54a6:	1ac0      	subs	r0, r0, r3
    54a8:	4152      	adcs	r2, r2
    54aa:	0b43      	lsrs	r3, r0, #13
    54ac:	428b      	cmp	r3, r1
    54ae:	d301      	bcc.n	54b4 <__divsi3+0x64>
    54b0:	034b      	lsls	r3, r1, #13
    54b2:	1ac0      	subs	r0, r0, r3
    54b4:	4152      	adcs	r2, r2
    54b6:	0b03      	lsrs	r3, r0, #12
    54b8:	428b      	cmp	r3, r1
    54ba:	d301      	bcc.n	54c0 <__divsi3+0x70>
    54bc:	030b      	lsls	r3, r1, #12
    54be:	1ac0      	subs	r0, r0, r3
    54c0:	4152      	adcs	r2, r2
    54c2:	0ac3      	lsrs	r3, r0, #11
    54c4:	428b      	cmp	r3, r1
    54c6:	d301      	bcc.n	54cc <__divsi3+0x7c>
    54c8:	02cb      	lsls	r3, r1, #11
    54ca:	1ac0      	subs	r0, r0, r3
    54cc:	4152      	adcs	r2, r2
    54ce:	0a83      	lsrs	r3, r0, #10
    54d0:	428b      	cmp	r3, r1
    54d2:	d301      	bcc.n	54d8 <__divsi3+0x88>
    54d4:	028b      	lsls	r3, r1, #10
    54d6:	1ac0      	subs	r0, r0, r3
    54d8:	4152      	adcs	r2, r2
    54da:	0a43      	lsrs	r3, r0, #9
    54dc:	428b      	cmp	r3, r1
    54de:	d301      	bcc.n	54e4 <__divsi3+0x94>
    54e0:	024b      	lsls	r3, r1, #9
    54e2:	1ac0      	subs	r0, r0, r3
    54e4:	4152      	adcs	r2, r2
    54e6:	0a03      	lsrs	r3, r0, #8
    54e8:	428b      	cmp	r3, r1
    54ea:	d301      	bcc.n	54f0 <__divsi3+0xa0>
    54ec:	020b      	lsls	r3, r1, #8
    54ee:	1ac0      	subs	r0, r0, r3
    54f0:	4152      	adcs	r2, r2
    54f2:	d2cd      	bcs.n	5490 <__divsi3+0x40>
    54f4:	09c3      	lsrs	r3, r0, #7
    54f6:	428b      	cmp	r3, r1
    54f8:	d301      	bcc.n	54fe <__divsi3+0xae>
    54fa:	01cb      	lsls	r3, r1, #7
    54fc:	1ac0      	subs	r0, r0, r3
    54fe:	4152      	adcs	r2, r2
    5500:	0983      	lsrs	r3, r0, #6
    5502:	428b      	cmp	r3, r1
    5504:	d301      	bcc.n	550a <__divsi3+0xba>
    5506:	018b      	lsls	r3, r1, #6
    5508:	1ac0      	subs	r0, r0, r3
    550a:	4152      	adcs	r2, r2
    550c:	0943      	lsrs	r3, r0, #5
    550e:	428b      	cmp	r3, r1
    5510:	d301      	bcc.n	5516 <__divsi3+0xc6>
    5512:	014b      	lsls	r3, r1, #5
    5514:	1ac0      	subs	r0, r0, r3
    5516:	4152      	adcs	r2, r2
    5518:	0903      	lsrs	r3, r0, #4
    551a:	428b      	cmp	r3, r1
    551c:	d301      	bcc.n	5522 <__divsi3+0xd2>
    551e:	010b      	lsls	r3, r1, #4
    5520:	1ac0      	subs	r0, r0, r3
    5522:	4152      	adcs	r2, r2
    5524:	08c3      	lsrs	r3, r0, #3
    5526:	428b      	cmp	r3, r1
    5528:	d301      	bcc.n	552e <__divsi3+0xde>
    552a:	00cb      	lsls	r3, r1, #3
    552c:	1ac0      	subs	r0, r0, r3
    552e:	4152      	adcs	r2, r2
    5530:	0883      	lsrs	r3, r0, #2
    5532:	428b      	cmp	r3, r1
    5534:	d301      	bcc.n	553a <__divsi3+0xea>
    5536:	008b      	lsls	r3, r1, #2
    5538:	1ac0      	subs	r0, r0, r3
    553a:	4152      	adcs	r2, r2
    553c:	0843      	lsrs	r3, r0, #1
    553e:	428b      	cmp	r3, r1
    5540:	d301      	bcc.n	5546 <__divsi3+0xf6>
    5542:	004b      	lsls	r3, r1, #1
    5544:	1ac0      	subs	r0, r0, r3
    5546:	4152      	adcs	r2, r2
    5548:	1a41      	subs	r1, r0, r1
    554a:	d200      	bcs.n	554e <__divsi3+0xfe>
    554c:	4601      	mov	r1, r0
    554e:	4152      	adcs	r2, r2
    5550:	4610      	mov	r0, r2
    5552:	4770      	bx	lr
    5554:	e05d      	b.n	5612 <__divsi3+0x1c2>
    5556:	0fca      	lsrs	r2, r1, #31
    5558:	d000      	beq.n	555c <__divsi3+0x10c>
    555a:	4249      	negs	r1, r1
    555c:	1003      	asrs	r3, r0, #32
    555e:	d300      	bcc.n	5562 <__divsi3+0x112>
    5560:	4240      	negs	r0, r0
    5562:	4053      	eors	r3, r2
    5564:	2200      	movs	r2, #0
    5566:	469c      	mov	ip, r3
    5568:	0903      	lsrs	r3, r0, #4
    556a:	428b      	cmp	r3, r1
    556c:	d32d      	bcc.n	55ca <__divsi3+0x17a>
    556e:	0a03      	lsrs	r3, r0, #8
    5570:	428b      	cmp	r3, r1
    5572:	d312      	bcc.n	559a <__divsi3+0x14a>
    5574:	22fc      	movs	r2, #252	; 0xfc
    5576:	0189      	lsls	r1, r1, #6
    5578:	ba12      	rev	r2, r2
    557a:	0a03      	lsrs	r3, r0, #8
    557c:	428b      	cmp	r3, r1
    557e:	d30c      	bcc.n	559a <__divsi3+0x14a>
    5580:	0189      	lsls	r1, r1, #6
    5582:	1192      	asrs	r2, r2, #6
    5584:	428b      	cmp	r3, r1
    5586:	d308      	bcc.n	559a <__divsi3+0x14a>
    5588:	0189      	lsls	r1, r1, #6
    558a:	1192      	asrs	r2, r2, #6
    558c:	428b      	cmp	r3, r1
    558e:	d304      	bcc.n	559a <__divsi3+0x14a>
    5590:	0189      	lsls	r1, r1, #6
    5592:	d03a      	beq.n	560a <__divsi3+0x1ba>
    5594:	1192      	asrs	r2, r2, #6
    5596:	e000      	b.n	559a <__divsi3+0x14a>
    5598:	0989      	lsrs	r1, r1, #6
    559a:	09c3      	lsrs	r3, r0, #7
    559c:	428b      	cmp	r3, r1
    559e:	d301      	bcc.n	55a4 <__divsi3+0x154>
    55a0:	01cb      	lsls	r3, r1, #7
    55a2:	1ac0      	subs	r0, r0, r3
    55a4:	4152      	adcs	r2, r2
    55a6:	0983      	lsrs	r3, r0, #6
    55a8:	428b      	cmp	r3, r1
    55aa:	d301      	bcc.n	55b0 <__divsi3+0x160>
    55ac:	018b      	lsls	r3, r1, #6
    55ae:	1ac0      	subs	r0, r0, r3
    55b0:	4152      	adcs	r2, r2
    55b2:	0943      	lsrs	r3, r0, #5
    55b4:	428b      	cmp	r3, r1
    55b6:	d301      	bcc.n	55bc <__divsi3+0x16c>
    55b8:	014b      	lsls	r3, r1, #5
    55ba:	1ac0      	subs	r0, r0, r3
    55bc:	4152      	adcs	r2, r2
    55be:	0903      	lsrs	r3, r0, #4
    55c0:	428b      	cmp	r3, r1
    55c2:	d301      	bcc.n	55c8 <__divsi3+0x178>
    55c4:	010b      	lsls	r3, r1, #4
    55c6:	1ac0      	subs	r0, r0, r3
    55c8:	4152      	adcs	r2, r2
    55ca:	08c3      	lsrs	r3, r0, #3
    55cc:	428b      	cmp	r3, r1
    55ce:	d301      	bcc.n	55d4 <__divsi3+0x184>
    55d0:	00cb      	lsls	r3, r1, #3
    55d2:	1ac0      	subs	r0, r0, r3
    55d4:	4152      	adcs	r2, r2
    55d6:	0883      	lsrs	r3, r0, #2
    55d8:	428b      	cmp	r3, r1
    55da:	d301      	bcc.n	55e0 <__divsi3+0x190>
    55dc:	008b      	lsls	r3, r1, #2
    55de:	1ac0      	subs	r0, r0, r3
    55e0:	4152      	adcs	r2, r2
    55e2:	d2d9      	bcs.n	5598 <__divsi3+0x148>
    55e4:	0843      	lsrs	r3, r0, #1
    55e6:	428b      	cmp	r3, r1
    55e8:	d301      	bcc.n	55ee <__divsi3+0x19e>
    55ea:	004b      	lsls	r3, r1, #1
    55ec:	1ac0      	subs	r0, r0, r3
    55ee:	4152      	adcs	r2, r2
    55f0:	1a41      	subs	r1, r0, r1
    55f2:	d200      	bcs.n	55f6 <__divsi3+0x1a6>
    55f4:	4601      	mov	r1, r0
    55f6:	4663      	mov	r3, ip
    55f8:	4152      	adcs	r2, r2
    55fa:	105b      	asrs	r3, r3, #1
    55fc:	4610      	mov	r0, r2
    55fe:	d301      	bcc.n	5604 <__divsi3+0x1b4>
    5600:	4240      	negs	r0, r0
    5602:	2b00      	cmp	r3, #0
    5604:	d500      	bpl.n	5608 <__divsi3+0x1b8>
    5606:	4249      	negs	r1, r1
    5608:	4770      	bx	lr
    560a:	4663      	mov	r3, ip
    560c:	105b      	asrs	r3, r3, #1
    560e:	d300      	bcc.n	5612 <__divsi3+0x1c2>
    5610:	4240      	negs	r0, r0
    5612:	b501      	push	{r0, lr}
    5614:	2000      	movs	r0, #0
    5616:	f000 f805 	bl	5624 <__aeabi_idiv0>
    561a:	bd02      	pop	{r1, pc}

0000561c <__aeabi_idivmod>:
    561c:	2900      	cmp	r1, #0
    561e:	d0f8      	beq.n	5612 <__divsi3+0x1c2>
    5620:	e716      	b.n	5450 <__divsi3>
    5622:	4770      	bx	lr

00005624 <__aeabi_idiv0>:
    5624:	4770      	bx	lr
    5626:	46c0      	nop			; (mov r8, r8)

00005628 <__aeabi_cdrcmple>:
    5628:	4684      	mov	ip, r0
    562a:	1c10      	adds	r0, r2, #0
    562c:	4662      	mov	r2, ip
    562e:	468c      	mov	ip, r1
    5630:	1c19      	adds	r1, r3, #0
    5632:	4663      	mov	r3, ip
    5634:	e000      	b.n	5638 <__aeabi_cdcmpeq>
    5636:	46c0      	nop			; (mov r8, r8)

00005638 <__aeabi_cdcmpeq>:
    5638:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    563a:	f000 ff15 	bl	6468 <__ledf2>
    563e:	2800      	cmp	r0, #0
    5640:	d401      	bmi.n	5646 <__aeabi_cdcmpeq+0xe>
    5642:	2100      	movs	r1, #0
    5644:	42c8      	cmn	r0, r1
    5646:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00005648 <__aeabi_dcmpeq>:
    5648:	b510      	push	{r4, lr}
    564a:	f000 fe6f 	bl	632c <__eqdf2>
    564e:	4240      	negs	r0, r0
    5650:	3001      	adds	r0, #1
    5652:	bd10      	pop	{r4, pc}

00005654 <__aeabi_dcmplt>:
    5654:	b510      	push	{r4, lr}
    5656:	f000 ff07 	bl	6468 <__ledf2>
    565a:	2800      	cmp	r0, #0
    565c:	db01      	blt.n	5662 <__aeabi_dcmplt+0xe>
    565e:	2000      	movs	r0, #0
    5660:	bd10      	pop	{r4, pc}
    5662:	2001      	movs	r0, #1
    5664:	bd10      	pop	{r4, pc}
    5666:	46c0      	nop			; (mov r8, r8)

00005668 <__aeabi_dcmple>:
    5668:	b510      	push	{r4, lr}
    566a:	f000 fefd 	bl	6468 <__ledf2>
    566e:	2800      	cmp	r0, #0
    5670:	dd01      	ble.n	5676 <__aeabi_dcmple+0xe>
    5672:	2000      	movs	r0, #0
    5674:	bd10      	pop	{r4, pc}
    5676:	2001      	movs	r0, #1
    5678:	bd10      	pop	{r4, pc}
    567a:	46c0      	nop			; (mov r8, r8)

0000567c <__aeabi_dcmpgt>:
    567c:	b510      	push	{r4, lr}
    567e:	f000 fe8f 	bl	63a0 <__gedf2>
    5682:	2800      	cmp	r0, #0
    5684:	dc01      	bgt.n	568a <__aeabi_dcmpgt+0xe>
    5686:	2000      	movs	r0, #0
    5688:	bd10      	pop	{r4, pc}
    568a:	2001      	movs	r0, #1
    568c:	bd10      	pop	{r4, pc}
    568e:	46c0      	nop			; (mov r8, r8)

00005690 <__aeabi_dcmpge>:
    5690:	b510      	push	{r4, lr}
    5692:	f000 fe85 	bl	63a0 <__gedf2>
    5696:	2800      	cmp	r0, #0
    5698:	da01      	bge.n	569e <__aeabi_dcmpge+0xe>
    569a:	2000      	movs	r0, #0
    569c:	bd10      	pop	{r4, pc}
    569e:	2001      	movs	r0, #1
    56a0:	bd10      	pop	{r4, pc}
    56a2:	46c0      	nop			; (mov r8, r8)

000056a4 <__aeabi_dadd>:
    56a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    56a6:	4645      	mov	r5, r8
    56a8:	46de      	mov	lr, fp
    56aa:	4657      	mov	r7, sl
    56ac:	464e      	mov	r6, r9
    56ae:	030c      	lsls	r4, r1, #12
    56b0:	b5e0      	push	{r5, r6, r7, lr}
    56b2:	004e      	lsls	r6, r1, #1
    56b4:	0fc9      	lsrs	r1, r1, #31
    56b6:	4688      	mov	r8, r1
    56b8:	000d      	movs	r5, r1
    56ba:	0a61      	lsrs	r1, r4, #9
    56bc:	0f44      	lsrs	r4, r0, #29
    56be:	430c      	orrs	r4, r1
    56c0:	00c7      	lsls	r7, r0, #3
    56c2:	0319      	lsls	r1, r3, #12
    56c4:	0058      	lsls	r0, r3, #1
    56c6:	0fdb      	lsrs	r3, r3, #31
    56c8:	469b      	mov	fp, r3
    56ca:	0a4b      	lsrs	r3, r1, #9
    56cc:	0f51      	lsrs	r1, r2, #29
    56ce:	430b      	orrs	r3, r1
    56d0:	0d76      	lsrs	r6, r6, #21
    56d2:	0d40      	lsrs	r0, r0, #21
    56d4:	0019      	movs	r1, r3
    56d6:	00d2      	lsls	r2, r2, #3
    56d8:	45d8      	cmp	r8, fp
    56da:	d100      	bne.n	56de <__aeabi_dadd+0x3a>
    56dc:	e0ae      	b.n	583c <__aeabi_dadd+0x198>
    56de:	1a35      	subs	r5, r6, r0
    56e0:	2d00      	cmp	r5, #0
    56e2:	dc00      	bgt.n	56e6 <__aeabi_dadd+0x42>
    56e4:	e0f6      	b.n	58d4 <__aeabi_dadd+0x230>
    56e6:	2800      	cmp	r0, #0
    56e8:	d10f      	bne.n	570a <__aeabi_dadd+0x66>
    56ea:	4313      	orrs	r3, r2
    56ec:	d100      	bne.n	56f0 <__aeabi_dadd+0x4c>
    56ee:	e0db      	b.n	58a8 <__aeabi_dadd+0x204>
    56f0:	1e6b      	subs	r3, r5, #1
    56f2:	2b00      	cmp	r3, #0
    56f4:	d000      	beq.n	56f8 <__aeabi_dadd+0x54>
    56f6:	e137      	b.n	5968 <__aeabi_dadd+0x2c4>
    56f8:	1aba      	subs	r2, r7, r2
    56fa:	4297      	cmp	r7, r2
    56fc:	41bf      	sbcs	r7, r7
    56fe:	1a64      	subs	r4, r4, r1
    5700:	427f      	negs	r7, r7
    5702:	1be4      	subs	r4, r4, r7
    5704:	2601      	movs	r6, #1
    5706:	0017      	movs	r7, r2
    5708:	e024      	b.n	5754 <__aeabi_dadd+0xb0>
    570a:	4bc6      	ldr	r3, [pc, #792]	; (5a24 <__aeabi_dadd+0x380>)
    570c:	429e      	cmp	r6, r3
    570e:	d04d      	beq.n	57ac <__aeabi_dadd+0x108>
    5710:	2380      	movs	r3, #128	; 0x80
    5712:	041b      	lsls	r3, r3, #16
    5714:	4319      	orrs	r1, r3
    5716:	2d38      	cmp	r5, #56	; 0x38
    5718:	dd00      	ble.n	571c <__aeabi_dadd+0x78>
    571a:	e107      	b.n	592c <__aeabi_dadd+0x288>
    571c:	2d1f      	cmp	r5, #31
    571e:	dd00      	ble.n	5722 <__aeabi_dadd+0x7e>
    5720:	e138      	b.n	5994 <__aeabi_dadd+0x2f0>
    5722:	2020      	movs	r0, #32
    5724:	1b43      	subs	r3, r0, r5
    5726:	469a      	mov	sl, r3
    5728:	000b      	movs	r3, r1
    572a:	4650      	mov	r0, sl
    572c:	4083      	lsls	r3, r0
    572e:	4699      	mov	r9, r3
    5730:	0013      	movs	r3, r2
    5732:	4648      	mov	r0, r9
    5734:	40eb      	lsrs	r3, r5
    5736:	4318      	orrs	r0, r3
    5738:	0003      	movs	r3, r0
    573a:	4650      	mov	r0, sl
    573c:	4082      	lsls	r2, r0
    573e:	1e50      	subs	r0, r2, #1
    5740:	4182      	sbcs	r2, r0
    5742:	40e9      	lsrs	r1, r5
    5744:	431a      	orrs	r2, r3
    5746:	1aba      	subs	r2, r7, r2
    5748:	1a61      	subs	r1, r4, r1
    574a:	4297      	cmp	r7, r2
    574c:	41a4      	sbcs	r4, r4
    574e:	0017      	movs	r7, r2
    5750:	4264      	negs	r4, r4
    5752:	1b0c      	subs	r4, r1, r4
    5754:	0223      	lsls	r3, r4, #8
    5756:	d562      	bpl.n	581e <__aeabi_dadd+0x17a>
    5758:	0264      	lsls	r4, r4, #9
    575a:	0a65      	lsrs	r5, r4, #9
    575c:	2d00      	cmp	r5, #0
    575e:	d100      	bne.n	5762 <__aeabi_dadd+0xbe>
    5760:	e0df      	b.n	5922 <__aeabi_dadd+0x27e>
    5762:	0028      	movs	r0, r5
    5764:	f001 fdee 	bl	7344 <__clzsi2>
    5768:	0003      	movs	r3, r0
    576a:	3b08      	subs	r3, #8
    576c:	2b1f      	cmp	r3, #31
    576e:	dd00      	ble.n	5772 <__aeabi_dadd+0xce>
    5770:	e0d2      	b.n	5918 <__aeabi_dadd+0x274>
    5772:	2220      	movs	r2, #32
    5774:	003c      	movs	r4, r7
    5776:	1ad2      	subs	r2, r2, r3
    5778:	409d      	lsls	r5, r3
    577a:	40d4      	lsrs	r4, r2
    577c:	409f      	lsls	r7, r3
    577e:	4325      	orrs	r5, r4
    5780:	429e      	cmp	r6, r3
    5782:	dd00      	ble.n	5786 <__aeabi_dadd+0xe2>
    5784:	e0c4      	b.n	5910 <__aeabi_dadd+0x26c>
    5786:	1b9e      	subs	r6, r3, r6
    5788:	1c73      	adds	r3, r6, #1
    578a:	2b1f      	cmp	r3, #31
    578c:	dd00      	ble.n	5790 <__aeabi_dadd+0xec>
    578e:	e0f1      	b.n	5974 <__aeabi_dadd+0x2d0>
    5790:	2220      	movs	r2, #32
    5792:	0038      	movs	r0, r7
    5794:	0029      	movs	r1, r5
    5796:	1ad2      	subs	r2, r2, r3
    5798:	40d8      	lsrs	r0, r3
    579a:	4091      	lsls	r1, r2
    579c:	4097      	lsls	r7, r2
    579e:	002c      	movs	r4, r5
    57a0:	4301      	orrs	r1, r0
    57a2:	1e78      	subs	r0, r7, #1
    57a4:	4187      	sbcs	r7, r0
    57a6:	40dc      	lsrs	r4, r3
    57a8:	2600      	movs	r6, #0
    57aa:	430f      	orrs	r7, r1
    57ac:	077b      	lsls	r3, r7, #29
    57ae:	d009      	beq.n	57c4 <__aeabi_dadd+0x120>
    57b0:	230f      	movs	r3, #15
    57b2:	403b      	ands	r3, r7
    57b4:	2b04      	cmp	r3, #4
    57b6:	d005      	beq.n	57c4 <__aeabi_dadd+0x120>
    57b8:	1d3b      	adds	r3, r7, #4
    57ba:	42bb      	cmp	r3, r7
    57bc:	41bf      	sbcs	r7, r7
    57be:	427f      	negs	r7, r7
    57c0:	19e4      	adds	r4, r4, r7
    57c2:	001f      	movs	r7, r3
    57c4:	0223      	lsls	r3, r4, #8
    57c6:	d52c      	bpl.n	5822 <__aeabi_dadd+0x17e>
    57c8:	4b96      	ldr	r3, [pc, #600]	; (5a24 <__aeabi_dadd+0x380>)
    57ca:	3601      	adds	r6, #1
    57cc:	429e      	cmp	r6, r3
    57ce:	d100      	bne.n	57d2 <__aeabi_dadd+0x12e>
    57d0:	e09a      	b.n	5908 <__aeabi_dadd+0x264>
    57d2:	4645      	mov	r5, r8
    57d4:	4b94      	ldr	r3, [pc, #592]	; (5a28 <__aeabi_dadd+0x384>)
    57d6:	08ff      	lsrs	r7, r7, #3
    57d8:	401c      	ands	r4, r3
    57da:	0760      	lsls	r0, r4, #29
    57dc:	0576      	lsls	r6, r6, #21
    57de:	0264      	lsls	r4, r4, #9
    57e0:	4307      	orrs	r7, r0
    57e2:	0b24      	lsrs	r4, r4, #12
    57e4:	0d76      	lsrs	r6, r6, #21
    57e6:	2100      	movs	r1, #0
    57e8:	0324      	lsls	r4, r4, #12
    57ea:	0b23      	lsrs	r3, r4, #12
    57ec:	0d0c      	lsrs	r4, r1, #20
    57ee:	4a8f      	ldr	r2, [pc, #572]	; (5a2c <__aeabi_dadd+0x388>)
    57f0:	0524      	lsls	r4, r4, #20
    57f2:	431c      	orrs	r4, r3
    57f4:	4014      	ands	r4, r2
    57f6:	0533      	lsls	r3, r6, #20
    57f8:	4323      	orrs	r3, r4
    57fa:	005b      	lsls	r3, r3, #1
    57fc:	07ed      	lsls	r5, r5, #31
    57fe:	085b      	lsrs	r3, r3, #1
    5800:	432b      	orrs	r3, r5
    5802:	0038      	movs	r0, r7
    5804:	0019      	movs	r1, r3
    5806:	bc3c      	pop	{r2, r3, r4, r5}
    5808:	4690      	mov	r8, r2
    580a:	4699      	mov	r9, r3
    580c:	46a2      	mov	sl, r4
    580e:	46ab      	mov	fp, r5
    5810:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5812:	4664      	mov	r4, ip
    5814:	4304      	orrs	r4, r0
    5816:	d100      	bne.n	581a <__aeabi_dadd+0x176>
    5818:	e211      	b.n	5c3e <__aeabi_dadd+0x59a>
    581a:	0004      	movs	r4, r0
    581c:	4667      	mov	r7, ip
    581e:	077b      	lsls	r3, r7, #29
    5820:	d1c6      	bne.n	57b0 <__aeabi_dadd+0x10c>
    5822:	4645      	mov	r5, r8
    5824:	0760      	lsls	r0, r4, #29
    5826:	08ff      	lsrs	r7, r7, #3
    5828:	4307      	orrs	r7, r0
    582a:	08e4      	lsrs	r4, r4, #3
    582c:	4b7d      	ldr	r3, [pc, #500]	; (5a24 <__aeabi_dadd+0x380>)
    582e:	429e      	cmp	r6, r3
    5830:	d030      	beq.n	5894 <__aeabi_dadd+0x1f0>
    5832:	0324      	lsls	r4, r4, #12
    5834:	0576      	lsls	r6, r6, #21
    5836:	0b24      	lsrs	r4, r4, #12
    5838:	0d76      	lsrs	r6, r6, #21
    583a:	e7d4      	b.n	57e6 <__aeabi_dadd+0x142>
    583c:	1a33      	subs	r3, r6, r0
    583e:	469a      	mov	sl, r3
    5840:	2b00      	cmp	r3, #0
    5842:	dd78      	ble.n	5936 <__aeabi_dadd+0x292>
    5844:	2800      	cmp	r0, #0
    5846:	d031      	beq.n	58ac <__aeabi_dadd+0x208>
    5848:	4876      	ldr	r0, [pc, #472]	; (5a24 <__aeabi_dadd+0x380>)
    584a:	4286      	cmp	r6, r0
    584c:	d0ae      	beq.n	57ac <__aeabi_dadd+0x108>
    584e:	2080      	movs	r0, #128	; 0x80
    5850:	0400      	lsls	r0, r0, #16
    5852:	4301      	orrs	r1, r0
    5854:	4653      	mov	r3, sl
    5856:	2b38      	cmp	r3, #56	; 0x38
    5858:	dc00      	bgt.n	585c <__aeabi_dadd+0x1b8>
    585a:	e0e9      	b.n	5a30 <__aeabi_dadd+0x38c>
    585c:	430a      	orrs	r2, r1
    585e:	1e51      	subs	r1, r2, #1
    5860:	418a      	sbcs	r2, r1
    5862:	2100      	movs	r1, #0
    5864:	19d2      	adds	r2, r2, r7
    5866:	42ba      	cmp	r2, r7
    5868:	41bf      	sbcs	r7, r7
    586a:	1909      	adds	r1, r1, r4
    586c:	427c      	negs	r4, r7
    586e:	0017      	movs	r7, r2
    5870:	190c      	adds	r4, r1, r4
    5872:	0223      	lsls	r3, r4, #8
    5874:	d5d3      	bpl.n	581e <__aeabi_dadd+0x17a>
    5876:	4b6b      	ldr	r3, [pc, #428]	; (5a24 <__aeabi_dadd+0x380>)
    5878:	3601      	adds	r6, #1
    587a:	429e      	cmp	r6, r3
    587c:	d100      	bne.n	5880 <__aeabi_dadd+0x1dc>
    587e:	e13a      	b.n	5af6 <__aeabi_dadd+0x452>
    5880:	2001      	movs	r0, #1
    5882:	4b69      	ldr	r3, [pc, #420]	; (5a28 <__aeabi_dadd+0x384>)
    5884:	401c      	ands	r4, r3
    5886:	087b      	lsrs	r3, r7, #1
    5888:	4007      	ands	r7, r0
    588a:	431f      	orrs	r7, r3
    588c:	07e0      	lsls	r0, r4, #31
    588e:	4307      	orrs	r7, r0
    5890:	0864      	lsrs	r4, r4, #1
    5892:	e78b      	b.n	57ac <__aeabi_dadd+0x108>
    5894:	0023      	movs	r3, r4
    5896:	433b      	orrs	r3, r7
    5898:	d100      	bne.n	589c <__aeabi_dadd+0x1f8>
    589a:	e1cb      	b.n	5c34 <__aeabi_dadd+0x590>
    589c:	2280      	movs	r2, #128	; 0x80
    589e:	0312      	lsls	r2, r2, #12
    58a0:	4314      	orrs	r4, r2
    58a2:	0324      	lsls	r4, r4, #12
    58a4:	0b24      	lsrs	r4, r4, #12
    58a6:	e79e      	b.n	57e6 <__aeabi_dadd+0x142>
    58a8:	002e      	movs	r6, r5
    58aa:	e77f      	b.n	57ac <__aeabi_dadd+0x108>
    58ac:	0008      	movs	r0, r1
    58ae:	4310      	orrs	r0, r2
    58b0:	d100      	bne.n	58b4 <__aeabi_dadd+0x210>
    58b2:	e0b4      	b.n	5a1e <__aeabi_dadd+0x37a>
    58b4:	1e58      	subs	r0, r3, #1
    58b6:	2800      	cmp	r0, #0
    58b8:	d000      	beq.n	58bc <__aeabi_dadd+0x218>
    58ba:	e0de      	b.n	5a7a <__aeabi_dadd+0x3d6>
    58bc:	18ba      	adds	r2, r7, r2
    58be:	42ba      	cmp	r2, r7
    58c0:	419b      	sbcs	r3, r3
    58c2:	1864      	adds	r4, r4, r1
    58c4:	425b      	negs	r3, r3
    58c6:	18e4      	adds	r4, r4, r3
    58c8:	0017      	movs	r7, r2
    58ca:	2601      	movs	r6, #1
    58cc:	0223      	lsls	r3, r4, #8
    58ce:	d5a6      	bpl.n	581e <__aeabi_dadd+0x17a>
    58d0:	2602      	movs	r6, #2
    58d2:	e7d5      	b.n	5880 <__aeabi_dadd+0x1dc>
    58d4:	2d00      	cmp	r5, #0
    58d6:	d16e      	bne.n	59b6 <__aeabi_dadd+0x312>
    58d8:	1c70      	adds	r0, r6, #1
    58da:	0540      	lsls	r0, r0, #21
    58dc:	0d40      	lsrs	r0, r0, #21
    58de:	2801      	cmp	r0, #1
    58e0:	dc00      	bgt.n	58e4 <__aeabi_dadd+0x240>
    58e2:	e0f9      	b.n	5ad8 <__aeabi_dadd+0x434>
    58e4:	1ab8      	subs	r0, r7, r2
    58e6:	4684      	mov	ip, r0
    58e8:	4287      	cmp	r7, r0
    58ea:	4180      	sbcs	r0, r0
    58ec:	1ae5      	subs	r5, r4, r3
    58ee:	4240      	negs	r0, r0
    58f0:	1a2d      	subs	r5, r5, r0
    58f2:	0228      	lsls	r0, r5, #8
    58f4:	d400      	bmi.n	58f8 <__aeabi_dadd+0x254>
    58f6:	e089      	b.n	5a0c <__aeabi_dadd+0x368>
    58f8:	1bd7      	subs	r7, r2, r7
    58fa:	42ba      	cmp	r2, r7
    58fc:	4192      	sbcs	r2, r2
    58fe:	1b1c      	subs	r4, r3, r4
    5900:	4252      	negs	r2, r2
    5902:	1aa5      	subs	r5, r4, r2
    5904:	46d8      	mov	r8, fp
    5906:	e729      	b.n	575c <__aeabi_dadd+0xb8>
    5908:	4645      	mov	r5, r8
    590a:	2400      	movs	r4, #0
    590c:	2700      	movs	r7, #0
    590e:	e76a      	b.n	57e6 <__aeabi_dadd+0x142>
    5910:	4c45      	ldr	r4, [pc, #276]	; (5a28 <__aeabi_dadd+0x384>)
    5912:	1af6      	subs	r6, r6, r3
    5914:	402c      	ands	r4, r5
    5916:	e749      	b.n	57ac <__aeabi_dadd+0x108>
    5918:	003d      	movs	r5, r7
    591a:	3828      	subs	r0, #40	; 0x28
    591c:	4085      	lsls	r5, r0
    591e:	2700      	movs	r7, #0
    5920:	e72e      	b.n	5780 <__aeabi_dadd+0xdc>
    5922:	0038      	movs	r0, r7
    5924:	f001 fd0e 	bl	7344 <__clzsi2>
    5928:	3020      	adds	r0, #32
    592a:	e71d      	b.n	5768 <__aeabi_dadd+0xc4>
    592c:	430a      	orrs	r2, r1
    592e:	1e51      	subs	r1, r2, #1
    5930:	418a      	sbcs	r2, r1
    5932:	2100      	movs	r1, #0
    5934:	e707      	b.n	5746 <__aeabi_dadd+0xa2>
    5936:	2b00      	cmp	r3, #0
    5938:	d000      	beq.n	593c <__aeabi_dadd+0x298>
    593a:	e0f3      	b.n	5b24 <__aeabi_dadd+0x480>
    593c:	1c70      	adds	r0, r6, #1
    593e:	0543      	lsls	r3, r0, #21
    5940:	0d5b      	lsrs	r3, r3, #21
    5942:	2b01      	cmp	r3, #1
    5944:	dc00      	bgt.n	5948 <__aeabi_dadd+0x2a4>
    5946:	e0ad      	b.n	5aa4 <__aeabi_dadd+0x400>
    5948:	4b36      	ldr	r3, [pc, #216]	; (5a24 <__aeabi_dadd+0x380>)
    594a:	4298      	cmp	r0, r3
    594c:	d100      	bne.n	5950 <__aeabi_dadd+0x2ac>
    594e:	e0d1      	b.n	5af4 <__aeabi_dadd+0x450>
    5950:	18ba      	adds	r2, r7, r2
    5952:	42ba      	cmp	r2, r7
    5954:	41bf      	sbcs	r7, r7
    5956:	1864      	adds	r4, r4, r1
    5958:	427f      	negs	r7, r7
    595a:	19e4      	adds	r4, r4, r7
    595c:	07e7      	lsls	r7, r4, #31
    595e:	0852      	lsrs	r2, r2, #1
    5960:	4317      	orrs	r7, r2
    5962:	0864      	lsrs	r4, r4, #1
    5964:	0006      	movs	r6, r0
    5966:	e721      	b.n	57ac <__aeabi_dadd+0x108>
    5968:	482e      	ldr	r0, [pc, #184]	; (5a24 <__aeabi_dadd+0x380>)
    596a:	4285      	cmp	r5, r0
    596c:	d100      	bne.n	5970 <__aeabi_dadd+0x2cc>
    596e:	e093      	b.n	5a98 <__aeabi_dadd+0x3f4>
    5970:	001d      	movs	r5, r3
    5972:	e6d0      	b.n	5716 <__aeabi_dadd+0x72>
    5974:	0029      	movs	r1, r5
    5976:	3e1f      	subs	r6, #31
    5978:	40f1      	lsrs	r1, r6
    597a:	2b20      	cmp	r3, #32
    597c:	d100      	bne.n	5980 <__aeabi_dadd+0x2dc>
    597e:	e08d      	b.n	5a9c <__aeabi_dadd+0x3f8>
    5980:	2240      	movs	r2, #64	; 0x40
    5982:	1ad3      	subs	r3, r2, r3
    5984:	409d      	lsls	r5, r3
    5986:	432f      	orrs	r7, r5
    5988:	1e7d      	subs	r5, r7, #1
    598a:	41af      	sbcs	r7, r5
    598c:	2400      	movs	r4, #0
    598e:	430f      	orrs	r7, r1
    5990:	2600      	movs	r6, #0
    5992:	e744      	b.n	581e <__aeabi_dadd+0x17a>
    5994:	002b      	movs	r3, r5
    5996:	0008      	movs	r0, r1
    5998:	3b20      	subs	r3, #32
    599a:	40d8      	lsrs	r0, r3
    599c:	0003      	movs	r3, r0
    599e:	2d20      	cmp	r5, #32
    59a0:	d100      	bne.n	59a4 <__aeabi_dadd+0x300>
    59a2:	e07d      	b.n	5aa0 <__aeabi_dadd+0x3fc>
    59a4:	2040      	movs	r0, #64	; 0x40
    59a6:	1b45      	subs	r5, r0, r5
    59a8:	40a9      	lsls	r1, r5
    59aa:	430a      	orrs	r2, r1
    59ac:	1e51      	subs	r1, r2, #1
    59ae:	418a      	sbcs	r2, r1
    59b0:	2100      	movs	r1, #0
    59b2:	431a      	orrs	r2, r3
    59b4:	e6c7      	b.n	5746 <__aeabi_dadd+0xa2>
    59b6:	2e00      	cmp	r6, #0
    59b8:	d050      	beq.n	5a5c <__aeabi_dadd+0x3b8>
    59ba:	4e1a      	ldr	r6, [pc, #104]	; (5a24 <__aeabi_dadd+0x380>)
    59bc:	42b0      	cmp	r0, r6
    59be:	d057      	beq.n	5a70 <__aeabi_dadd+0x3cc>
    59c0:	2680      	movs	r6, #128	; 0x80
    59c2:	426b      	negs	r3, r5
    59c4:	4699      	mov	r9, r3
    59c6:	0436      	lsls	r6, r6, #16
    59c8:	4334      	orrs	r4, r6
    59ca:	464b      	mov	r3, r9
    59cc:	2b38      	cmp	r3, #56	; 0x38
    59ce:	dd00      	ble.n	59d2 <__aeabi_dadd+0x32e>
    59d0:	e0d6      	b.n	5b80 <__aeabi_dadd+0x4dc>
    59d2:	2b1f      	cmp	r3, #31
    59d4:	dd00      	ble.n	59d8 <__aeabi_dadd+0x334>
    59d6:	e135      	b.n	5c44 <__aeabi_dadd+0x5a0>
    59d8:	2620      	movs	r6, #32
    59da:	1af5      	subs	r5, r6, r3
    59dc:	0026      	movs	r6, r4
    59de:	40ae      	lsls	r6, r5
    59e0:	46b2      	mov	sl, r6
    59e2:	003e      	movs	r6, r7
    59e4:	40de      	lsrs	r6, r3
    59e6:	46ac      	mov	ip, r5
    59e8:	0035      	movs	r5, r6
    59ea:	4656      	mov	r6, sl
    59ec:	432e      	orrs	r6, r5
    59ee:	4665      	mov	r5, ip
    59f0:	40af      	lsls	r7, r5
    59f2:	1e7d      	subs	r5, r7, #1
    59f4:	41af      	sbcs	r7, r5
    59f6:	40dc      	lsrs	r4, r3
    59f8:	4337      	orrs	r7, r6
    59fa:	1bd7      	subs	r7, r2, r7
    59fc:	42ba      	cmp	r2, r7
    59fe:	4192      	sbcs	r2, r2
    5a00:	1b0c      	subs	r4, r1, r4
    5a02:	4252      	negs	r2, r2
    5a04:	1aa4      	subs	r4, r4, r2
    5a06:	0006      	movs	r6, r0
    5a08:	46d8      	mov	r8, fp
    5a0a:	e6a3      	b.n	5754 <__aeabi_dadd+0xb0>
    5a0c:	4664      	mov	r4, ip
    5a0e:	4667      	mov	r7, ip
    5a10:	432c      	orrs	r4, r5
    5a12:	d000      	beq.n	5a16 <__aeabi_dadd+0x372>
    5a14:	e6a2      	b.n	575c <__aeabi_dadd+0xb8>
    5a16:	2500      	movs	r5, #0
    5a18:	2600      	movs	r6, #0
    5a1a:	2700      	movs	r7, #0
    5a1c:	e706      	b.n	582c <__aeabi_dadd+0x188>
    5a1e:	001e      	movs	r6, r3
    5a20:	e6c4      	b.n	57ac <__aeabi_dadd+0x108>
    5a22:	46c0      	nop			; (mov r8, r8)
    5a24:	000007ff 	.word	0x000007ff
    5a28:	ff7fffff 	.word	0xff7fffff
    5a2c:	800fffff 	.word	0x800fffff
    5a30:	2b1f      	cmp	r3, #31
    5a32:	dc63      	bgt.n	5afc <__aeabi_dadd+0x458>
    5a34:	2020      	movs	r0, #32
    5a36:	1ac3      	subs	r3, r0, r3
    5a38:	0008      	movs	r0, r1
    5a3a:	4098      	lsls	r0, r3
    5a3c:	469c      	mov	ip, r3
    5a3e:	4683      	mov	fp, r0
    5a40:	4653      	mov	r3, sl
    5a42:	0010      	movs	r0, r2
    5a44:	40d8      	lsrs	r0, r3
    5a46:	0003      	movs	r3, r0
    5a48:	4658      	mov	r0, fp
    5a4a:	4318      	orrs	r0, r3
    5a4c:	4663      	mov	r3, ip
    5a4e:	409a      	lsls	r2, r3
    5a50:	1e53      	subs	r3, r2, #1
    5a52:	419a      	sbcs	r2, r3
    5a54:	4653      	mov	r3, sl
    5a56:	4302      	orrs	r2, r0
    5a58:	40d9      	lsrs	r1, r3
    5a5a:	e703      	b.n	5864 <__aeabi_dadd+0x1c0>
    5a5c:	0026      	movs	r6, r4
    5a5e:	433e      	orrs	r6, r7
    5a60:	d006      	beq.n	5a70 <__aeabi_dadd+0x3cc>
    5a62:	43eb      	mvns	r3, r5
    5a64:	4699      	mov	r9, r3
    5a66:	2b00      	cmp	r3, #0
    5a68:	d0c7      	beq.n	59fa <__aeabi_dadd+0x356>
    5a6a:	4e94      	ldr	r6, [pc, #592]	; (5cbc <__aeabi_dadd+0x618>)
    5a6c:	42b0      	cmp	r0, r6
    5a6e:	d1ac      	bne.n	59ca <__aeabi_dadd+0x326>
    5a70:	000c      	movs	r4, r1
    5a72:	0017      	movs	r7, r2
    5a74:	0006      	movs	r6, r0
    5a76:	46d8      	mov	r8, fp
    5a78:	e698      	b.n	57ac <__aeabi_dadd+0x108>
    5a7a:	4b90      	ldr	r3, [pc, #576]	; (5cbc <__aeabi_dadd+0x618>)
    5a7c:	459a      	cmp	sl, r3
    5a7e:	d00b      	beq.n	5a98 <__aeabi_dadd+0x3f4>
    5a80:	4682      	mov	sl, r0
    5a82:	e6e7      	b.n	5854 <__aeabi_dadd+0x1b0>
    5a84:	2800      	cmp	r0, #0
    5a86:	d000      	beq.n	5a8a <__aeabi_dadd+0x3e6>
    5a88:	e09e      	b.n	5bc8 <__aeabi_dadd+0x524>
    5a8a:	0018      	movs	r0, r3
    5a8c:	4310      	orrs	r0, r2
    5a8e:	d100      	bne.n	5a92 <__aeabi_dadd+0x3ee>
    5a90:	e0e9      	b.n	5c66 <__aeabi_dadd+0x5c2>
    5a92:	001c      	movs	r4, r3
    5a94:	0017      	movs	r7, r2
    5a96:	46d8      	mov	r8, fp
    5a98:	4e88      	ldr	r6, [pc, #544]	; (5cbc <__aeabi_dadd+0x618>)
    5a9a:	e687      	b.n	57ac <__aeabi_dadd+0x108>
    5a9c:	2500      	movs	r5, #0
    5a9e:	e772      	b.n	5986 <__aeabi_dadd+0x2e2>
    5aa0:	2100      	movs	r1, #0
    5aa2:	e782      	b.n	59aa <__aeabi_dadd+0x306>
    5aa4:	0023      	movs	r3, r4
    5aa6:	433b      	orrs	r3, r7
    5aa8:	2e00      	cmp	r6, #0
    5aaa:	d000      	beq.n	5aae <__aeabi_dadd+0x40a>
    5aac:	e0ab      	b.n	5c06 <__aeabi_dadd+0x562>
    5aae:	2b00      	cmp	r3, #0
    5ab0:	d100      	bne.n	5ab4 <__aeabi_dadd+0x410>
    5ab2:	e0e7      	b.n	5c84 <__aeabi_dadd+0x5e0>
    5ab4:	000b      	movs	r3, r1
    5ab6:	4313      	orrs	r3, r2
    5ab8:	d100      	bne.n	5abc <__aeabi_dadd+0x418>
    5aba:	e677      	b.n	57ac <__aeabi_dadd+0x108>
    5abc:	18ba      	adds	r2, r7, r2
    5abe:	42ba      	cmp	r2, r7
    5ac0:	41bf      	sbcs	r7, r7
    5ac2:	1864      	adds	r4, r4, r1
    5ac4:	427f      	negs	r7, r7
    5ac6:	19e4      	adds	r4, r4, r7
    5ac8:	0223      	lsls	r3, r4, #8
    5aca:	d400      	bmi.n	5ace <__aeabi_dadd+0x42a>
    5acc:	e0f2      	b.n	5cb4 <__aeabi_dadd+0x610>
    5ace:	4b7c      	ldr	r3, [pc, #496]	; (5cc0 <__aeabi_dadd+0x61c>)
    5ad0:	0017      	movs	r7, r2
    5ad2:	401c      	ands	r4, r3
    5ad4:	0006      	movs	r6, r0
    5ad6:	e669      	b.n	57ac <__aeabi_dadd+0x108>
    5ad8:	0020      	movs	r0, r4
    5ada:	4338      	orrs	r0, r7
    5adc:	2e00      	cmp	r6, #0
    5ade:	d1d1      	bne.n	5a84 <__aeabi_dadd+0x3e0>
    5ae0:	2800      	cmp	r0, #0
    5ae2:	d15b      	bne.n	5b9c <__aeabi_dadd+0x4f8>
    5ae4:	001c      	movs	r4, r3
    5ae6:	4314      	orrs	r4, r2
    5ae8:	d100      	bne.n	5aec <__aeabi_dadd+0x448>
    5aea:	e0a8      	b.n	5c3e <__aeabi_dadd+0x59a>
    5aec:	001c      	movs	r4, r3
    5aee:	0017      	movs	r7, r2
    5af0:	46d8      	mov	r8, fp
    5af2:	e65b      	b.n	57ac <__aeabi_dadd+0x108>
    5af4:	0006      	movs	r6, r0
    5af6:	2400      	movs	r4, #0
    5af8:	2700      	movs	r7, #0
    5afa:	e697      	b.n	582c <__aeabi_dadd+0x188>
    5afc:	4650      	mov	r0, sl
    5afe:	000b      	movs	r3, r1
    5b00:	3820      	subs	r0, #32
    5b02:	40c3      	lsrs	r3, r0
    5b04:	4699      	mov	r9, r3
    5b06:	4653      	mov	r3, sl
    5b08:	2b20      	cmp	r3, #32
    5b0a:	d100      	bne.n	5b0e <__aeabi_dadd+0x46a>
    5b0c:	e095      	b.n	5c3a <__aeabi_dadd+0x596>
    5b0e:	2340      	movs	r3, #64	; 0x40
    5b10:	4650      	mov	r0, sl
    5b12:	1a1b      	subs	r3, r3, r0
    5b14:	4099      	lsls	r1, r3
    5b16:	430a      	orrs	r2, r1
    5b18:	1e51      	subs	r1, r2, #1
    5b1a:	418a      	sbcs	r2, r1
    5b1c:	464b      	mov	r3, r9
    5b1e:	2100      	movs	r1, #0
    5b20:	431a      	orrs	r2, r3
    5b22:	e69f      	b.n	5864 <__aeabi_dadd+0x1c0>
    5b24:	2e00      	cmp	r6, #0
    5b26:	d130      	bne.n	5b8a <__aeabi_dadd+0x4e6>
    5b28:	0026      	movs	r6, r4
    5b2a:	433e      	orrs	r6, r7
    5b2c:	d067      	beq.n	5bfe <__aeabi_dadd+0x55a>
    5b2e:	43db      	mvns	r3, r3
    5b30:	469a      	mov	sl, r3
    5b32:	2b00      	cmp	r3, #0
    5b34:	d01c      	beq.n	5b70 <__aeabi_dadd+0x4cc>
    5b36:	4e61      	ldr	r6, [pc, #388]	; (5cbc <__aeabi_dadd+0x618>)
    5b38:	42b0      	cmp	r0, r6
    5b3a:	d060      	beq.n	5bfe <__aeabi_dadd+0x55a>
    5b3c:	4653      	mov	r3, sl
    5b3e:	2b38      	cmp	r3, #56	; 0x38
    5b40:	dd00      	ble.n	5b44 <__aeabi_dadd+0x4a0>
    5b42:	e096      	b.n	5c72 <__aeabi_dadd+0x5ce>
    5b44:	2b1f      	cmp	r3, #31
    5b46:	dd00      	ble.n	5b4a <__aeabi_dadd+0x4a6>
    5b48:	e09f      	b.n	5c8a <__aeabi_dadd+0x5e6>
    5b4a:	2620      	movs	r6, #32
    5b4c:	1af3      	subs	r3, r6, r3
    5b4e:	0026      	movs	r6, r4
    5b50:	409e      	lsls	r6, r3
    5b52:	469c      	mov	ip, r3
    5b54:	46b3      	mov	fp, r6
    5b56:	4653      	mov	r3, sl
    5b58:	003e      	movs	r6, r7
    5b5a:	40de      	lsrs	r6, r3
    5b5c:	0033      	movs	r3, r6
    5b5e:	465e      	mov	r6, fp
    5b60:	431e      	orrs	r6, r3
    5b62:	4663      	mov	r3, ip
    5b64:	409f      	lsls	r7, r3
    5b66:	1e7b      	subs	r3, r7, #1
    5b68:	419f      	sbcs	r7, r3
    5b6a:	4653      	mov	r3, sl
    5b6c:	40dc      	lsrs	r4, r3
    5b6e:	4337      	orrs	r7, r6
    5b70:	18bf      	adds	r7, r7, r2
    5b72:	4297      	cmp	r7, r2
    5b74:	4192      	sbcs	r2, r2
    5b76:	1864      	adds	r4, r4, r1
    5b78:	4252      	negs	r2, r2
    5b7a:	18a4      	adds	r4, r4, r2
    5b7c:	0006      	movs	r6, r0
    5b7e:	e678      	b.n	5872 <__aeabi_dadd+0x1ce>
    5b80:	4327      	orrs	r7, r4
    5b82:	1e7c      	subs	r4, r7, #1
    5b84:	41a7      	sbcs	r7, r4
    5b86:	2400      	movs	r4, #0
    5b88:	e737      	b.n	59fa <__aeabi_dadd+0x356>
    5b8a:	4e4c      	ldr	r6, [pc, #304]	; (5cbc <__aeabi_dadd+0x618>)
    5b8c:	42b0      	cmp	r0, r6
    5b8e:	d036      	beq.n	5bfe <__aeabi_dadd+0x55a>
    5b90:	2680      	movs	r6, #128	; 0x80
    5b92:	425b      	negs	r3, r3
    5b94:	0436      	lsls	r6, r6, #16
    5b96:	469a      	mov	sl, r3
    5b98:	4334      	orrs	r4, r6
    5b9a:	e7cf      	b.n	5b3c <__aeabi_dadd+0x498>
    5b9c:	0018      	movs	r0, r3
    5b9e:	4310      	orrs	r0, r2
    5ba0:	d100      	bne.n	5ba4 <__aeabi_dadd+0x500>
    5ba2:	e603      	b.n	57ac <__aeabi_dadd+0x108>
    5ba4:	1ab8      	subs	r0, r7, r2
    5ba6:	4684      	mov	ip, r0
    5ba8:	4567      	cmp	r7, ip
    5baa:	41ad      	sbcs	r5, r5
    5bac:	1ae0      	subs	r0, r4, r3
    5bae:	426d      	negs	r5, r5
    5bb0:	1b40      	subs	r0, r0, r5
    5bb2:	0205      	lsls	r5, r0, #8
    5bb4:	d400      	bmi.n	5bb8 <__aeabi_dadd+0x514>
    5bb6:	e62c      	b.n	5812 <__aeabi_dadd+0x16e>
    5bb8:	1bd7      	subs	r7, r2, r7
    5bba:	42ba      	cmp	r2, r7
    5bbc:	4192      	sbcs	r2, r2
    5bbe:	1b1c      	subs	r4, r3, r4
    5bc0:	4252      	negs	r2, r2
    5bc2:	1aa4      	subs	r4, r4, r2
    5bc4:	46d8      	mov	r8, fp
    5bc6:	e5f1      	b.n	57ac <__aeabi_dadd+0x108>
    5bc8:	0018      	movs	r0, r3
    5bca:	4310      	orrs	r0, r2
    5bcc:	d100      	bne.n	5bd0 <__aeabi_dadd+0x52c>
    5bce:	e763      	b.n	5a98 <__aeabi_dadd+0x3f4>
    5bd0:	08f8      	lsrs	r0, r7, #3
    5bd2:	0767      	lsls	r7, r4, #29
    5bd4:	4307      	orrs	r7, r0
    5bd6:	2080      	movs	r0, #128	; 0x80
    5bd8:	08e4      	lsrs	r4, r4, #3
    5bda:	0300      	lsls	r0, r0, #12
    5bdc:	4204      	tst	r4, r0
    5bde:	d008      	beq.n	5bf2 <__aeabi_dadd+0x54e>
    5be0:	08dd      	lsrs	r5, r3, #3
    5be2:	4205      	tst	r5, r0
    5be4:	d105      	bne.n	5bf2 <__aeabi_dadd+0x54e>
    5be6:	08d2      	lsrs	r2, r2, #3
    5be8:	0759      	lsls	r1, r3, #29
    5bea:	4311      	orrs	r1, r2
    5bec:	000f      	movs	r7, r1
    5bee:	002c      	movs	r4, r5
    5bf0:	46d8      	mov	r8, fp
    5bf2:	0f7b      	lsrs	r3, r7, #29
    5bf4:	00e4      	lsls	r4, r4, #3
    5bf6:	431c      	orrs	r4, r3
    5bf8:	00ff      	lsls	r7, r7, #3
    5bfa:	4e30      	ldr	r6, [pc, #192]	; (5cbc <__aeabi_dadd+0x618>)
    5bfc:	e5d6      	b.n	57ac <__aeabi_dadd+0x108>
    5bfe:	000c      	movs	r4, r1
    5c00:	0017      	movs	r7, r2
    5c02:	0006      	movs	r6, r0
    5c04:	e5d2      	b.n	57ac <__aeabi_dadd+0x108>
    5c06:	2b00      	cmp	r3, #0
    5c08:	d038      	beq.n	5c7c <__aeabi_dadd+0x5d8>
    5c0a:	000b      	movs	r3, r1
    5c0c:	4313      	orrs	r3, r2
    5c0e:	d100      	bne.n	5c12 <__aeabi_dadd+0x56e>
    5c10:	e742      	b.n	5a98 <__aeabi_dadd+0x3f4>
    5c12:	08f8      	lsrs	r0, r7, #3
    5c14:	0767      	lsls	r7, r4, #29
    5c16:	4307      	orrs	r7, r0
    5c18:	2080      	movs	r0, #128	; 0x80
    5c1a:	08e4      	lsrs	r4, r4, #3
    5c1c:	0300      	lsls	r0, r0, #12
    5c1e:	4204      	tst	r4, r0
    5c20:	d0e7      	beq.n	5bf2 <__aeabi_dadd+0x54e>
    5c22:	08cb      	lsrs	r3, r1, #3
    5c24:	4203      	tst	r3, r0
    5c26:	d1e4      	bne.n	5bf2 <__aeabi_dadd+0x54e>
    5c28:	08d2      	lsrs	r2, r2, #3
    5c2a:	0749      	lsls	r1, r1, #29
    5c2c:	4311      	orrs	r1, r2
    5c2e:	000f      	movs	r7, r1
    5c30:	001c      	movs	r4, r3
    5c32:	e7de      	b.n	5bf2 <__aeabi_dadd+0x54e>
    5c34:	2700      	movs	r7, #0
    5c36:	2400      	movs	r4, #0
    5c38:	e5d5      	b.n	57e6 <__aeabi_dadd+0x142>
    5c3a:	2100      	movs	r1, #0
    5c3c:	e76b      	b.n	5b16 <__aeabi_dadd+0x472>
    5c3e:	2500      	movs	r5, #0
    5c40:	2700      	movs	r7, #0
    5c42:	e5f3      	b.n	582c <__aeabi_dadd+0x188>
    5c44:	464e      	mov	r6, r9
    5c46:	0025      	movs	r5, r4
    5c48:	3e20      	subs	r6, #32
    5c4a:	40f5      	lsrs	r5, r6
    5c4c:	464b      	mov	r3, r9
    5c4e:	002e      	movs	r6, r5
    5c50:	2b20      	cmp	r3, #32
    5c52:	d02d      	beq.n	5cb0 <__aeabi_dadd+0x60c>
    5c54:	2540      	movs	r5, #64	; 0x40
    5c56:	1aed      	subs	r5, r5, r3
    5c58:	40ac      	lsls	r4, r5
    5c5a:	4327      	orrs	r7, r4
    5c5c:	1e7c      	subs	r4, r7, #1
    5c5e:	41a7      	sbcs	r7, r4
    5c60:	2400      	movs	r4, #0
    5c62:	4337      	orrs	r7, r6
    5c64:	e6c9      	b.n	59fa <__aeabi_dadd+0x356>
    5c66:	2480      	movs	r4, #128	; 0x80
    5c68:	2500      	movs	r5, #0
    5c6a:	0324      	lsls	r4, r4, #12
    5c6c:	4e13      	ldr	r6, [pc, #76]	; (5cbc <__aeabi_dadd+0x618>)
    5c6e:	2700      	movs	r7, #0
    5c70:	e5dc      	b.n	582c <__aeabi_dadd+0x188>
    5c72:	4327      	orrs	r7, r4
    5c74:	1e7c      	subs	r4, r7, #1
    5c76:	41a7      	sbcs	r7, r4
    5c78:	2400      	movs	r4, #0
    5c7a:	e779      	b.n	5b70 <__aeabi_dadd+0x4cc>
    5c7c:	000c      	movs	r4, r1
    5c7e:	0017      	movs	r7, r2
    5c80:	4e0e      	ldr	r6, [pc, #56]	; (5cbc <__aeabi_dadd+0x618>)
    5c82:	e593      	b.n	57ac <__aeabi_dadd+0x108>
    5c84:	000c      	movs	r4, r1
    5c86:	0017      	movs	r7, r2
    5c88:	e590      	b.n	57ac <__aeabi_dadd+0x108>
    5c8a:	4656      	mov	r6, sl
    5c8c:	0023      	movs	r3, r4
    5c8e:	3e20      	subs	r6, #32
    5c90:	40f3      	lsrs	r3, r6
    5c92:	4699      	mov	r9, r3
    5c94:	4653      	mov	r3, sl
    5c96:	2b20      	cmp	r3, #32
    5c98:	d00e      	beq.n	5cb8 <__aeabi_dadd+0x614>
    5c9a:	2340      	movs	r3, #64	; 0x40
    5c9c:	4656      	mov	r6, sl
    5c9e:	1b9b      	subs	r3, r3, r6
    5ca0:	409c      	lsls	r4, r3
    5ca2:	4327      	orrs	r7, r4
    5ca4:	1e7c      	subs	r4, r7, #1
    5ca6:	41a7      	sbcs	r7, r4
    5ca8:	464b      	mov	r3, r9
    5caa:	2400      	movs	r4, #0
    5cac:	431f      	orrs	r7, r3
    5cae:	e75f      	b.n	5b70 <__aeabi_dadd+0x4cc>
    5cb0:	2400      	movs	r4, #0
    5cb2:	e7d2      	b.n	5c5a <__aeabi_dadd+0x5b6>
    5cb4:	0017      	movs	r7, r2
    5cb6:	e5b2      	b.n	581e <__aeabi_dadd+0x17a>
    5cb8:	2400      	movs	r4, #0
    5cba:	e7f2      	b.n	5ca2 <__aeabi_dadd+0x5fe>
    5cbc:	000007ff 	.word	0x000007ff
    5cc0:	ff7fffff 	.word	0xff7fffff

00005cc4 <__aeabi_ddiv>:
    5cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
    5cc6:	4657      	mov	r7, sl
    5cc8:	4645      	mov	r5, r8
    5cca:	46de      	mov	lr, fp
    5ccc:	464e      	mov	r6, r9
    5cce:	b5e0      	push	{r5, r6, r7, lr}
    5cd0:	004c      	lsls	r4, r1, #1
    5cd2:	030e      	lsls	r6, r1, #12
    5cd4:	b087      	sub	sp, #28
    5cd6:	4683      	mov	fp, r0
    5cd8:	4692      	mov	sl, r2
    5cda:	001d      	movs	r5, r3
    5cdc:	4680      	mov	r8, r0
    5cde:	0b36      	lsrs	r6, r6, #12
    5ce0:	0d64      	lsrs	r4, r4, #21
    5ce2:	0fcf      	lsrs	r7, r1, #31
    5ce4:	2c00      	cmp	r4, #0
    5ce6:	d04f      	beq.n	5d88 <__aeabi_ddiv+0xc4>
    5ce8:	4b6f      	ldr	r3, [pc, #444]	; (5ea8 <__aeabi_ddiv+0x1e4>)
    5cea:	429c      	cmp	r4, r3
    5cec:	d035      	beq.n	5d5a <__aeabi_ddiv+0x96>
    5cee:	2380      	movs	r3, #128	; 0x80
    5cf0:	0f42      	lsrs	r2, r0, #29
    5cf2:	041b      	lsls	r3, r3, #16
    5cf4:	00f6      	lsls	r6, r6, #3
    5cf6:	4313      	orrs	r3, r2
    5cf8:	4333      	orrs	r3, r6
    5cfa:	4699      	mov	r9, r3
    5cfc:	00c3      	lsls	r3, r0, #3
    5cfe:	4698      	mov	r8, r3
    5d00:	4b6a      	ldr	r3, [pc, #424]	; (5eac <__aeabi_ddiv+0x1e8>)
    5d02:	2600      	movs	r6, #0
    5d04:	469c      	mov	ip, r3
    5d06:	2300      	movs	r3, #0
    5d08:	4464      	add	r4, ip
    5d0a:	9303      	str	r3, [sp, #12]
    5d0c:	032b      	lsls	r3, r5, #12
    5d0e:	0b1b      	lsrs	r3, r3, #12
    5d10:	469b      	mov	fp, r3
    5d12:	006b      	lsls	r3, r5, #1
    5d14:	0fed      	lsrs	r5, r5, #31
    5d16:	4650      	mov	r0, sl
    5d18:	0d5b      	lsrs	r3, r3, #21
    5d1a:	9501      	str	r5, [sp, #4]
    5d1c:	d05e      	beq.n	5ddc <__aeabi_ddiv+0x118>
    5d1e:	4a62      	ldr	r2, [pc, #392]	; (5ea8 <__aeabi_ddiv+0x1e4>)
    5d20:	4293      	cmp	r3, r2
    5d22:	d053      	beq.n	5dcc <__aeabi_ddiv+0x108>
    5d24:	465a      	mov	r2, fp
    5d26:	00d1      	lsls	r1, r2, #3
    5d28:	2280      	movs	r2, #128	; 0x80
    5d2a:	0f40      	lsrs	r0, r0, #29
    5d2c:	0412      	lsls	r2, r2, #16
    5d2e:	4302      	orrs	r2, r0
    5d30:	430a      	orrs	r2, r1
    5d32:	4693      	mov	fp, r2
    5d34:	4652      	mov	r2, sl
    5d36:	00d1      	lsls	r1, r2, #3
    5d38:	4a5c      	ldr	r2, [pc, #368]	; (5eac <__aeabi_ddiv+0x1e8>)
    5d3a:	4694      	mov	ip, r2
    5d3c:	2200      	movs	r2, #0
    5d3e:	4463      	add	r3, ip
    5d40:	0038      	movs	r0, r7
    5d42:	4068      	eors	r0, r5
    5d44:	4684      	mov	ip, r0
    5d46:	9002      	str	r0, [sp, #8]
    5d48:	1ae4      	subs	r4, r4, r3
    5d4a:	4316      	orrs	r6, r2
    5d4c:	2e0f      	cmp	r6, #15
    5d4e:	d900      	bls.n	5d52 <__aeabi_ddiv+0x8e>
    5d50:	e0b4      	b.n	5ebc <__aeabi_ddiv+0x1f8>
    5d52:	4b57      	ldr	r3, [pc, #348]	; (5eb0 <__aeabi_ddiv+0x1ec>)
    5d54:	00b6      	lsls	r6, r6, #2
    5d56:	599b      	ldr	r3, [r3, r6]
    5d58:	469f      	mov	pc, r3
    5d5a:	0003      	movs	r3, r0
    5d5c:	4333      	orrs	r3, r6
    5d5e:	4699      	mov	r9, r3
    5d60:	d16c      	bne.n	5e3c <__aeabi_ddiv+0x178>
    5d62:	2300      	movs	r3, #0
    5d64:	4698      	mov	r8, r3
    5d66:	3302      	adds	r3, #2
    5d68:	2608      	movs	r6, #8
    5d6a:	9303      	str	r3, [sp, #12]
    5d6c:	e7ce      	b.n	5d0c <__aeabi_ddiv+0x48>
    5d6e:	46cb      	mov	fp, r9
    5d70:	4641      	mov	r1, r8
    5d72:	9a03      	ldr	r2, [sp, #12]
    5d74:	9701      	str	r7, [sp, #4]
    5d76:	2a02      	cmp	r2, #2
    5d78:	d165      	bne.n	5e46 <__aeabi_ddiv+0x182>
    5d7a:	9b01      	ldr	r3, [sp, #4]
    5d7c:	4c4a      	ldr	r4, [pc, #296]	; (5ea8 <__aeabi_ddiv+0x1e4>)
    5d7e:	469c      	mov	ip, r3
    5d80:	2300      	movs	r3, #0
    5d82:	2200      	movs	r2, #0
    5d84:	4698      	mov	r8, r3
    5d86:	e06b      	b.n	5e60 <__aeabi_ddiv+0x19c>
    5d88:	0003      	movs	r3, r0
    5d8a:	4333      	orrs	r3, r6
    5d8c:	4699      	mov	r9, r3
    5d8e:	d04e      	beq.n	5e2e <__aeabi_ddiv+0x16a>
    5d90:	2e00      	cmp	r6, #0
    5d92:	d100      	bne.n	5d96 <__aeabi_ddiv+0xd2>
    5d94:	e1bc      	b.n	6110 <__aeabi_ddiv+0x44c>
    5d96:	0030      	movs	r0, r6
    5d98:	f001 fad4 	bl	7344 <__clzsi2>
    5d9c:	0003      	movs	r3, r0
    5d9e:	3b0b      	subs	r3, #11
    5da0:	2b1c      	cmp	r3, #28
    5da2:	dd00      	ble.n	5da6 <__aeabi_ddiv+0xe2>
    5da4:	e1ac      	b.n	6100 <__aeabi_ddiv+0x43c>
    5da6:	221d      	movs	r2, #29
    5da8:	1ad3      	subs	r3, r2, r3
    5daa:	465a      	mov	r2, fp
    5dac:	0001      	movs	r1, r0
    5dae:	40da      	lsrs	r2, r3
    5db0:	3908      	subs	r1, #8
    5db2:	408e      	lsls	r6, r1
    5db4:	0013      	movs	r3, r2
    5db6:	4333      	orrs	r3, r6
    5db8:	4699      	mov	r9, r3
    5dba:	465b      	mov	r3, fp
    5dbc:	408b      	lsls	r3, r1
    5dbe:	4698      	mov	r8, r3
    5dc0:	2300      	movs	r3, #0
    5dc2:	4c3c      	ldr	r4, [pc, #240]	; (5eb4 <__aeabi_ddiv+0x1f0>)
    5dc4:	2600      	movs	r6, #0
    5dc6:	1a24      	subs	r4, r4, r0
    5dc8:	9303      	str	r3, [sp, #12]
    5dca:	e79f      	b.n	5d0c <__aeabi_ddiv+0x48>
    5dcc:	4651      	mov	r1, sl
    5dce:	465a      	mov	r2, fp
    5dd0:	4311      	orrs	r1, r2
    5dd2:	d129      	bne.n	5e28 <__aeabi_ddiv+0x164>
    5dd4:	2200      	movs	r2, #0
    5dd6:	4693      	mov	fp, r2
    5dd8:	3202      	adds	r2, #2
    5dda:	e7b1      	b.n	5d40 <__aeabi_ddiv+0x7c>
    5ddc:	4659      	mov	r1, fp
    5dde:	4301      	orrs	r1, r0
    5de0:	d01e      	beq.n	5e20 <__aeabi_ddiv+0x15c>
    5de2:	465b      	mov	r3, fp
    5de4:	2b00      	cmp	r3, #0
    5de6:	d100      	bne.n	5dea <__aeabi_ddiv+0x126>
    5de8:	e19e      	b.n	6128 <__aeabi_ddiv+0x464>
    5dea:	4658      	mov	r0, fp
    5dec:	f001 faaa 	bl	7344 <__clzsi2>
    5df0:	0003      	movs	r3, r0
    5df2:	3b0b      	subs	r3, #11
    5df4:	2b1c      	cmp	r3, #28
    5df6:	dd00      	ble.n	5dfa <__aeabi_ddiv+0x136>
    5df8:	e18f      	b.n	611a <__aeabi_ddiv+0x456>
    5dfa:	0002      	movs	r2, r0
    5dfc:	4659      	mov	r1, fp
    5dfe:	3a08      	subs	r2, #8
    5e00:	4091      	lsls	r1, r2
    5e02:	468b      	mov	fp, r1
    5e04:	211d      	movs	r1, #29
    5e06:	1acb      	subs	r3, r1, r3
    5e08:	4651      	mov	r1, sl
    5e0a:	40d9      	lsrs	r1, r3
    5e0c:	000b      	movs	r3, r1
    5e0e:	4659      	mov	r1, fp
    5e10:	430b      	orrs	r3, r1
    5e12:	4651      	mov	r1, sl
    5e14:	469b      	mov	fp, r3
    5e16:	4091      	lsls	r1, r2
    5e18:	4b26      	ldr	r3, [pc, #152]	; (5eb4 <__aeabi_ddiv+0x1f0>)
    5e1a:	2200      	movs	r2, #0
    5e1c:	1a1b      	subs	r3, r3, r0
    5e1e:	e78f      	b.n	5d40 <__aeabi_ddiv+0x7c>
    5e20:	2300      	movs	r3, #0
    5e22:	2201      	movs	r2, #1
    5e24:	469b      	mov	fp, r3
    5e26:	e78b      	b.n	5d40 <__aeabi_ddiv+0x7c>
    5e28:	4651      	mov	r1, sl
    5e2a:	2203      	movs	r2, #3
    5e2c:	e788      	b.n	5d40 <__aeabi_ddiv+0x7c>
    5e2e:	2300      	movs	r3, #0
    5e30:	4698      	mov	r8, r3
    5e32:	3301      	adds	r3, #1
    5e34:	2604      	movs	r6, #4
    5e36:	2400      	movs	r4, #0
    5e38:	9303      	str	r3, [sp, #12]
    5e3a:	e767      	b.n	5d0c <__aeabi_ddiv+0x48>
    5e3c:	2303      	movs	r3, #3
    5e3e:	46b1      	mov	r9, r6
    5e40:	9303      	str	r3, [sp, #12]
    5e42:	260c      	movs	r6, #12
    5e44:	e762      	b.n	5d0c <__aeabi_ddiv+0x48>
    5e46:	2a03      	cmp	r2, #3
    5e48:	d100      	bne.n	5e4c <__aeabi_ddiv+0x188>
    5e4a:	e25c      	b.n	6306 <__aeabi_ddiv+0x642>
    5e4c:	9b01      	ldr	r3, [sp, #4]
    5e4e:	2a01      	cmp	r2, #1
    5e50:	d000      	beq.n	5e54 <__aeabi_ddiv+0x190>
    5e52:	e1e4      	b.n	621e <__aeabi_ddiv+0x55a>
    5e54:	4013      	ands	r3, r2
    5e56:	469c      	mov	ip, r3
    5e58:	2300      	movs	r3, #0
    5e5a:	2400      	movs	r4, #0
    5e5c:	2200      	movs	r2, #0
    5e5e:	4698      	mov	r8, r3
    5e60:	2100      	movs	r1, #0
    5e62:	0312      	lsls	r2, r2, #12
    5e64:	0b13      	lsrs	r3, r2, #12
    5e66:	0d0a      	lsrs	r2, r1, #20
    5e68:	0512      	lsls	r2, r2, #20
    5e6a:	431a      	orrs	r2, r3
    5e6c:	0523      	lsls	r3, r4, #20
    5e6e:	4c12      	ldr	r4, [pc, #72]	; (5eb8 <__aeabi_ddiv+0x1f4>)
    5e70:	4640      	mov	r0, r8
    5e72:	4022      	ands	r2, r4
    5e74:	4313      	orrs	r3, r2
    5e76:	4662      	mov	r2, ip
    5e78:	005b      	lsls	r3, r3, #1
    5e7a:	07d2      	lsls	r2, r2, #31
    5e7c:	085b      	lsrs	r3, r3, #1
    5e7e:	4313      	orrs	r3, r2
    5e80:	0019      	movs	r1, r3
    5e82:	b007      	add	sp, #28
    5e84:	bc3c      	pop	{r2, r3, r4, r5}
    5e86:	4690      	mov	r8, r2
    5e88:	4699      	mov	r9, r3
    5e8a:	46a2      	mov	sl, r4
    5e8c:	46ab      	mov	fp, r5
    5e8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5e90:	2300      	movs	r3, #0
    5e92:	2280      	movs	r2, #128	; 0x80
    5e94:	469c      	mov	ip, r3
    5e96:	0312      	lsls	r2, r2, #12
    5e98:	4698      	mov	r8, r3
    5e9a:	4c03      	ldr	r4, [pc, #12]	; (5ea8 <__aeabi_ddiv+0x1e4>)
    5e9c:	e7e0      	b.n	5e60 <__aeabi_ddiv+0x19c>
    5e9e:	2300      	movs	r3, #0
    5ea0:	4c01      	ldr	r4, [pc, #4]	; (5ea8 <__aeabi_ddiv+0x1e4>)
    5ea2:	2200      	movs	r2, #0
    5ea4:	4698      	mov	r8, r3
    5ea6:	e7db      	b.n	5e60 <__aeabi_ddiv+0x19c>
    5ea8:	000007ff 	.word	0x000007ff
    5eac:	fffffc01 	.word	0xfffffc01
    5eb0:	00007468 	.word	0x00007468
    5eb4:	fffffc0d 	.word	0xfffffc0d
    5eb8:	800fffff 	.word	0x800fffff
    5ebc:	45d9      	cmp	r9, fp
    5ebe:	d900      	bls.n	5ec2 <__aeabi_ddiv+0x1fe>
    5ec0:	e139      	b.n	6136 <__aeabi_ddiv+0x472>
    5ec2:	d100      	bne.n	5ec6 <__aeabi_ddiv+0x202>
    5ec4:	e134      	b.n	6130 <__aeabi_ddiv+0x46c>
    5ec6:	2300      	movs	r3, #0
    5ec8:	4646      	mov	r6, r8
    5eca:	464d      	mov	r5, r9
    5ecc:	469a      	mov	sl, r3
    5ece:	3c01      	subs	r4, #1
    5ed0:	465b      	mov	r3, fp
    5ed2:	0e0a      	lsrs	r2, r1, #24
    5ed4:	021b      	lsls	r3, r3, #8
    5ed6:	431a      	orrs	r2, r3
    5ed8:	020b      	lsls	r3, r1, #8
    5eda:	0c17      	lsrs	r7, r2, #16
    5edc:	9303      	str	r3, [sp, #12]
    5ede:	0413      	lsls	r3, r2, #16
    5ee0:	0c1b      	lsrs	r3, r3, #16
    5ee2:	0039      	movs	r1, r7
    5ee4:	0028      	movs	r0, r5
    5ee6:	4690      	mov	r8, r2
    5ee8:	9301      	str	r3, [sp, #4]
    5eea:	f7ff fa27 	bl	533c <__udivsi3>
    5eee:	0002      	movs	r2, r0
    5ef0:	9b01      	ldr	r3, [sp, #4]
    5ef2:	4683      	mov	fp, r0
    5ef4:	435a      	muls	r2, r3
    5ef6:	0028      	movs	r0, r5
    5ef8:	0039      	movs	r1, r7
    5efa:	4691      	mov	r9, r2
    5efc:	f7ff faa4 	bl	5448 <__aeabi_uidivmod>
    5f00:	0c35      	lsrs	r5, r6, #16
    5f02:	0409      	lsls	r1, r1, #16
    5f04:	430d      	orrs	r5, r1
    5f06:	45a9      	cmp	r9, r5
    5f08:	d90d      	bls.n	5f26 <__aeabi_ddiv+0x262>
    5f0a:	465b      	mov	r3, fp
    5f0c:	4445      	add	r5, r8
    5f0e:	3b01      	subs	r3, #1
    5f10:	45a8      	cmp	r8, r5
    5f12:	d900      	bls.n	5f16 <__aeabi_ddiv+0x252>
    5f14:	e13a      	b.n	618c <__aeabi_ddiv+0x4c8>
    5f16:	45a9      	cmp	r9, r5
    5f18:	d800      	bhi.n	5f1c <__aeabi_ddiv+0x258>
    5f1a:	e137      	b.n	618c <__aeabi_ddiv+0x4c8>
    5f1c:	2302      	movs	r3, #2
    5f1e:	425b      	negs	r3, r3
    5f20:	469c      	mov	ip, r3
    5f22:	4445      	add	r5, r8
    5f24:	44e3      	add	fp, ip
    5f26:	464b      	mov	r3, r9
    5f28:	1aeb      	subs	r3, r5, r3
    5f2a:	0039      	movs	r1, r7
    5f2c:	0018      	movs	r0, r3
    5f2e:	9304      	str	r3, [sp, #16]
    5f30:	f7ff fa04 	bl	533c <__udivsi3>
    5f34:	9b01      	ldr	r3, [sp, #4]
    5f36:	0005      	movs	r5, r0
    5f38:	4343      	muls	r3, r0
    5f3a:	0039      	movs	r1, r7
    5f3c:	9804      	ldr	r0, [sp, #16]
    5f3e:	4699      	mov	r9, r3
    5f40:	f7ff fa82 	bl	5448 <__aeabi_uidivmod>
    5f44:	0433      	lsls	r3, r6, #16
    5f46:	0409      	lsls	r1, r1, #16
    5f48:	0c1b      	lsrs	r3, r3, #16
    5f4a:	430b      	orrs	r3, r1
    5f4c:	4599      	cmp	r9, r3
    5f4e:	d909      	bls.n	5f64 <__aeabi_ddiv+0x2a0>
    5f50:	4443      	add	r3, r8
    5f52:	1e6a      	subs	r2, r5, #1
    5f54:	4598      	cmp	r8, r3
    5f56:	d900      	bls.n	5f5a <__aeabi_ddiv+0x296>
    5f58:	e11a      	b.n	6190 <__aeabi_ddiv+0x4cc>
    5f5a:	4599      	cmp	r9, r3
    5f5c:	d800      	bhi.n	5f60 <__aeabi_ddiv+0x29c>
    5f5e:	e117      	b.n	6190 <__aeabi_ddiv+0x4cc>
    5f60:	3d02      	subs	r5, #2
    5f62:	4443      	add	r3, r8
    5f64:	464a      	mov	r2, r9
    5f66:	1a9b      	subs	r3, r3, r2
    5f68:	465a      	mov	r2, fp
    5f6a:	0412      	lsls	r2, r2, #16
    5f6c:	432a      	orrs	r2, r5
    5f6e:	9903      	ldr	r1, [sp, #12]
    5f70:	4693      	mov	fp, r2
    5f72:	0c10      	lsrs	r0, r2, #16
    5f74:	0c0a      	lsrs	r2, r1, #16
    5f76:	4691      	mov	r9, r2
    5f78:	0409      	lsls	r1, r1, #16
    5f7a:	465a      	mov	r2, fp
    5f7c:	0c09      	lsrs	r1, r1, #16
    5f7e:	464e      	mov	r6, r9
    5f80:	000d      	movs	r5, r1
    5f82:	0412      	lsls	r2, r2, #16
    5f84:	0c12      	lsrs	r2, r2, #16
    5f86:	4345      	muls	r5, r0
    5f88:	9105      	str	r1, [sp, #20]
    5f8a:	4351      	muls	r1, r2
    5f8c:	4372      	muls	r2, r6
    5f8e:	4370      	muls	r0, r6
    5f90:	1952      	adds	r2, r2, r5
    5f92:	0c0e      	lsrs	r6, r1, #16
    5f94:	18b2      	adds	r2, r6, r2
    5f96:	4295      	cmp	r5, r2
    5f98:	d903      	bls.n	5fa2 <__aeabi_ddiv+0x2de>
    5f9a:	2580      	movs	r5, #128	; 0x80
    5f9c:	026d      	lsls	r5, r5, #9
    5f9e:	46ac      	mov	ip, r5
    5fa0:	4460      	add	r0, ip
    5fa2:	0c15      	lsrs	r5, r2, #16
    5fa4:	0409      	lsls	r1, r1, #16
    5fa6:	0412      	lsls	r2, r2, #16
    5fa8:	0c09      	lsrs	r1, r1, #16
    5faa:	1828      	adds	r0, r5, r0
    5fac:	1852      	adds	r2, r2, r1
    5fae:	4283      	cmp	r3, r0
    5fb0:	d200      	bcs.n	5fb4 <__aeabi_ddiv+0x2f0>
    5fb2:	e0ce      	b.n	6152 <__aeabi_ddiv+0x48e>
    5fb4:	d100      	bne.n	5fb8 <__aeabi_ddiv+0x2f4>
    5fb6:	e0c8      	b.n	614a <__aeabi_ddiv+0x486>
    5fb8:	1a1d      	subs	r5, r3, r0
    5fba:	4653      	mov	r3, sl
    5fbc:	1a9e      	subs	r6, r3, r2
    5fbe:	45b2      	cmp	sl, r6
    5fc0:	4192      	sbcs	r2, r2
    5fc2:	4252      	negs	r2, r2
    5fc4:	1aab      	subs	r3, r5, r2
    5fc6:	469a      	mov	sl, r3
    5fc8:	4598      	cmp	r8, r3
    5fca:	d100      	bne.n	5fce <__aeabi_ddiv+0x30a>
    5fcc:	e117      	b.n	61fe <__aeabi_ddiv+0x53a>
    5fce:	0039      	movs	r1, r7
    5fd0:	0018      	movs	r0, r3
    5fd2:	f7ff f9b3 	bl	533c <__udivsi3>
    5fd6:	9b01      	ldr	r3, [sp, #4]
    5fd8:	0005      	movs	r5, r0
    5fda:	4343      	muls	r3, r0
    5fdc:	0039      	movs	r1, r7
    5fde:	4650      	mov	r0, sl
    5fe0:	9304      	str	r3, [sp, #16]
    5fe2:	f7ff fa31 	bl	5448 <__aeabi_uidivmod>
    5fe6:	9804      	ldr	r0, [sp, #16]
    5fe8:	040b      	lsls	r3, r1, #16
    5fea:	0c31      	lsrs	r1, r6, #16
    5fec:	4319      	orrs	r1, r3
    5fee:	4288      	cmp	r0, r1
    5ff0:	d909      	bls.n	6006 <__aeabi_ddiv+0x342>
    5ff2:	4441      	add	r1, r8
    5ff4:	1e6b      	subs	r3, r5, #1
    5ff6:	4588      	cmp	r8, r1
    5ff8:	d900      	bls.n	5ffc <__aeabi_ddiv+0x338>
    5ffa:	e107      	b.n	620c <__aeabi_ddiv+0x548>
    5ffc:	4288      	cmp	r0, r1
    5ffe:	d800      	bhi.n	6002 <__aeabi_ddiv+0x33e>
    6000:	e104      	b.n	620c <__aeabi_ddiv+0x548>
    6002:	3d02      	subs	r5, #2
    6004:	4441      	add	r1, r8
    6006:	9b04      	ldr	r3, [sp, #16]
    6008:	1acb      	subs	r3, r1, r3
    600a:	0018      	movs	r0, r3
    600c:	0039      	movs	r1, r7
    600e:	9304      	str	r3, [sp, #16]
    6010:	f7ff f994 	bl	533c <__udivsi3>
    6014:	9b01      	ldr	r3, [sp, #4]
    6016:	4682      	mov	sl, r0
    6018:	4343      	muls	r3, r0
    601a:	0039      	movs	r1, r7
    601c:	9804      	ldr	r0, [sp, #16]
    601e:	9301      	str	r3, [sp, #4]
    6020:	f7ff fa12 	bl	5448 <__aeabi_uidivmod>
    6024:	9801      	ldr	r0, [sp, #4]
    6026:	040b      	lsls	r3, r1, #16
    6028:	0431      	lsls	r1, r6, #16
    602a:	0c09      	lsrs	r1, r1, #16
    602c:	4319      	orrs	r1, r3
    602e:	4288      	cmp	r0, r1
    6030:	d90d      	bls.n	604e <__aeabi_ddiv+0x38a>
    6032:	4653      	mov	r3, sl
    6034:	4441      	add	r1, r8
    6036:	3b01      	subs	r3, #1
    6038:	4588      	cmp	r8, r1
    603a:	d900      	bls.n	603e <__aeabi_ddiv+0x37a>
    603c:	e0e8      	b.n	6210 <__aeabi_ddiv+0x54c>
    603e:	4288      	cmp	r0, r1
    6040:	d800      	bhi.n	6044 <__aeabi_ddiv+0x380>
    6042:	e0e5      	b.n	6210 <__aeabi_ddiv+0x54c>
    6044:	2302      	movs	r3, #2
    6046:	425b      	negs	r3, r3
    6048:	469c      	mov	ip, r3
    604a:	4441      	add	r1, r8
    604c:	44e2      	add	sl, ip
    604e:	9b01      	ldr	r3, [sp, #4]
    6050:	042d      	lsls	r5, r5, #16
    6052:	1ace      	subs	r6, r1, r3
    6054:	4651      	mov	r1, sl
    6056:	4329      	orrs	r1, r5
    6058:	9d05      	ldr	r5, [sp, #20]
    605a:	464f      	mov	r7, r9
    605c:	002a      	movs	r2, r5
    605e:	040b      	lsls	r3, r1, #16
    6060:	0c08      	lsrs	r0, r1, #16
    6062:	0c1b      	lsrs	r3, r3, #16
    6064:	435a      	muls	r2, r3
    6066:	4345      	muls	r5, r0
    6068:	437b      	muls	r3, r7
    606a:	4378      	muls	r0, r7
    606c:	195b      	adds	r3, r3, r5
    606e:	0c17      	lsrs	r7, r2, #16
    6070:	18fb      	adds	r3, r7, r3
    6072:	429d      	cmp	r5, r3
    6074:	d903      	bls.n	607e <__aeabi_ddiv+0x3ba>
    6076:	2580      	movs	r5, #128	; 0x80
    6078:	026d      	lsls	r5, r5, #9
    607a:	46ac      	mov	ip, r5
    607c:	4460      	add	r0, ip
    607e:	0c1d      	lsrs	r5, r3, #16
    6080:	0412      	lsls	r2, r2, #16
    6082:	041b      	lsls	r3, r3, #16
    6084:	0c12      	lsrs	r2, r2, #16
    6086:	1828      	adds	r0, r5, r0
    6088:	189b      	adds	r3, r3, r2
    608a:	4286      	cmp	r6, r0
    608c:	d200      	bcs.n	6090 <__aeabi_ddiv+0x3cc>
    608e:	e093      	b.n	61b8 <__aeabi_ddiv+0x4f4>
    6090:	d100      	bne.n	6094 <__aeabi_ddiv+0x3d0>
    6092:	e08e      	b.n	61b2 <__aeabi_ddiv+0x4ee>
    6094:	2301      	movs	r3, #1
    6096:	4319      	orrs	r1, r3
    6098:	4ba0      	ldr	r3, [pc, #640]	; (631c <__aeabi_ddiv+0x658>)
    609a:	18e3      	adds	r3, r4, r3
    609c:	2b00      	cmp	r3, #0
    609e:	dc00      	bgt.n	60a2 <__aeabi_ddiv+0x3de>
    60a0:	e099      	b.n	61d6 <__aeabi_ddiv+0x512>
    60a2:	074a      	lsls	r2, r1, #29
    60a4:	d000      	beq.n	60a8 <__aeabi_ddiv+0x3e4>
    60a6:	e09e      	b.n	61e6 <__aeabi_ddiv+0x522>
    60a8:	465a      	mov	r2, fp
    60aa:	01d2      	lsls	r2, r2, #7
    60ac:	d506      	bpl.n	60bc <__aeabi_ddiv+0x3f8>
    60ae:	465a      	mov	r2, fp
    60b0:	4b9b      	ldr	r3, [pc, #620]	; (6320 <__aeabi_ddiv+0x65c>)
    60b2:	401a      	ands	r2, r3
    60b4:	2380      	movs	r3, #128	; 0x80
    60b6:	4693      	mov	fp, r2
    60b8:	00db      	lsls	r3, r3, #3
    60ba:	18e3      	adds	r3, r4, r3
    60bc:	4a99      	ldr	r2, [pc, #612]	; (6324 <__aeabi_ddiv+0x660>)
    60be:	4293      	cmp	r3, r2
    60c0:	dd68      	ble.n	6194 <__aeabi_ddiv+0x4d0>
    60c2:	2301      	movs	r3, #1
    60c4:	9a02      	ldr	r2, [sp, #8]
    60c6:	4c98      	ldr	r4, [pc, #608]	; (6328 <__aeabi_ddiv+0x664>)
    60c8:	401a      	ands	r2, r3
    60ca:	2300      	movs	r3, #0
    60cc:	4694      	mov	ip, r2
    60ce:	4698      	mov	r8, r3
    60d0:	2200      	movs	r2, #0
    60d2:	e6c5      	b.n	5e60 <__aeabi_ddiv+0x19c>
    60d4:	2280      	movs	r2, #128	; 0x80
    60d6:	464b      	mov	r3, r9
    60d8:	0312      	lsls	r2, r2, #12
    60da:	4213      	tst	r3, r2
    60dc:	d00a      	beq.n	60f4 <__aeabi_ddiv+0x430>
    60de:	465b      	mov	r3, fp
    60e0:	4213      	tst	r3, r2
    60e2:	d106      	bne.n	60f2 <__aeabi_ddiv+0x42e>
    60e4:	431a      	orrs	r2, r3
    60e6:	0312      	lsls	r2, r2, #12
    60e8:	0b12      	lsrs	r2, r2, #12
    60ea:	46ac      	mov	ip, r5
    60ec:	4688      	mov	r8, r1
    60ee:	4c8e      	ldr	r4, [pc, #568]	; (6328 <__aeabi_ddiv+0x664>)
    60f0:	e6b6      	b.n	5e60 <__aeabi_ddiv+0x19c>
    60f2:	464b      	mov	r3, r9
    60f4:	431a      	orrs	r2, r3
    60f6:	0312      	lsls	r2, r2, #12
    60f8:	0b12      	lsrs	r2, r2, #12
    60fa:	46bc      	mov	ip, r7
    60fc:	4c8a      	ldr	r4, [pc, #552]	; (6328 <__aeabi_ddiv+0x664>)
    60fe:	e6af      	b.n	5e60 <__aeabi_ddiv+0x19c>
    6100:	0003      	movs	r3, r0
    6102:	465a      	mov	r2, fp
    6104:	3b28      	subs	r3, #40	; 0x28
    6106:	409a      	lsls	r2, r3
    6108:	2300      	movs	r3, #0
    610a:	4691      	mov	r9, r2
    610c:	4698      	mov	r8, r3
    610e:	e657      	b.n	5dc0 <__aeabi_ddiv+0xfc>
    6110:	4658      	mov	r0, fp
    6112:	f001 f917 	bl	7344 <__clzsi2>
    6116:	3020      	adds	r0, #32
    6118:	e640      	b.n	5d9c <__aeabi_ddiv+0xd8>
    611a:	0003      	movs	r3, r0
    611c:	4652      	mov	r2, sl
    611e:	3b28      	subs	r3, #40	; 0x28
    6120:	409a      	lsls	r2, r3
    6122:	2100      	movs	r1, #0
    6124:	4693      	mov	fp, r2
    6126:	e677      	b.n	5e18 <__aeabi_ddiv+0x154>
    6128:	f001 f90c 	bl	7344 <__clzsi2>
    612c:	3020      	adds	r0, #32
    612e:	e65f      	b.n	5df0 <__aeabi_ddiv+0x12c>
    6130:	4588      	cmp	r8, r1
    6132:	d200      	bcs.n	6136 <__aeabi_ddiv+0x472>
    6134:	e6c7      	b.n	5ec6 <__aeabi_ddiv+0x202>
    6136:	464b      	mov	r3, r9
    6138:	07de      	lsls	r6, r3, #31
    613a:	085d      	lsrs	r5, r3, #1
    613c:	4643      	mov	r3, r8
    613e:	085b      	lsrs	r3, r3, #1
    6140:	431e      	orrs	r6, r3
    6142:	4643      	mov	r3, r8
    6144:	07db      	lsls	r3, r3, #31
    6146:	469a      	mov	sl, r3
    6148:	e6c2      	b.n	5ed0 <__aeabi_ddiv+0x20c>
    614a:	2500      	movs	r5, #0
    614c:	4592      	cmp	sl, r2
    614e:	d300      	bcc.n	6152 <__aeabi_ddiv+0x48e>
    6150:	e733      	b.n	5fba <__aeabi_ddiv+0x2f6>
    6152:	9e03      	ldr	r6, [sp, #12]
    6154:	4659      	mov	r1, fp
    6156:	46b4      	mov	ip, r6
    6158:	44e2      	add	sl, ip
    615a:	45b2      	cmp	sl, r6
    615c:	41ad      	sbcs	r5, r5
    615e:	426d      	negs	r5, r5
    6160:	4445      	add	r5, r8
    6162:	18eb      	adds	r3, r5, r3
    6164:	3901      	subs	r1, #1
    6166:	4598      	cmp	r8, r3
    6168:	d207      	bcs.n	617a <__aeabi_ddiv+0x4b6>
    616a:	4298      	cmp	r0, r3
    616c:	d900      	bls.n	6170 <__aeabi_ddiv+0x4ac>
    616e:	e07f      	b.n	6270 <__aeabi_ddiv+0x5ac>
    6170:	d100      	bne.n	6174 <__aeabi_ddiv+0x4b0>
    6172:	e0bc      	b.n	62ee <__aeabi_ddiv+0x62a>
    6174:	1a1d      	subs	r5, r3, r0
    6176:	468b      	mov	fp, r1
    6178:	e71f      	b.n	5fba <__aeabi_ddiv+0x2f6>
    617a:	4598      	cmp	r8, r3
    617c:	d1fa      	bne.n	6174 <__aeabi_ddiv+0x4b0>
    617e:	9d03      	ldr	r5, [sp, #12]
    6180:	4555      	cmp	r5, sl
    6182:	d9f2      	bls.n	616a <__aeabi_ddiv+0x4a6>
    6184:	4643      	mov	r3, r8
    6186:	468b      	mov	fp, r1
    6188:	1a1d      	subs	r5, r3, r0
    618a:	e716      	b.n	5fba <__aeabi_ddiv+0x2f6>
    618c:	469b      	mov	fp, r3
    618e:	e6ca      	b.n	5f26 <__aeabi_ddiv+0x262>
    6190:	0015      	movs	r5, r2
    6192:	e6e7      	b.n	5f64 <__aeabi_ddiv+0x2a0>
    6194:	465a      	mov	r2, fp
    6196:	08c9      	lsrs	r1, r1, #3
    6198:	0752      	lsls	r2, r2, #29
    619a:	430a      	orrs	r2, r1
    619c:	055b      	lsls	r3, r3, #21
    619e:	4690      	mov	r8, r2
    61a0:	0d5c      	lsrs	r4, r3, #21
    61a2:	465a      	mov	r2, fp
    61a4:	2301      	movs	r3, #1
    61a6:	9902      	ldr	r1, [sp, #8]
    61a8:	0252      	lsls	r2, r2, #9
    61aa:	4019      	ands	r1, r3
    61ac:	0b12      	lsrs	r2, r2, #12
    61ae:	468c      	mov	ip, r1
    61b0:	e656      	b.n	5e60 <__aeabi_ddiv+0x19c>
    61b2:	2b00      	cmp	r3, #0
    61b4:	d100      	bne.n	61b8 <__aeabi_ddiv+0x4f4>
    61b6:	e76f      	b.n	6098 <__aeabi_ddiv+0x3d4>
    61b8:	4446      	add	r6, r8
    61ba:	1e4a      	subs	r2, r1, #1
    61bc:	45b0      	cmp	r8, r6
    61be:	d929      	bls.n	6214 <__aeabi_ddiv+0x550>
    61c0:	0011      	movs	r1, r2
    61c2:	4286      	cmp	r6, r0
    61c4:	d000      	beq.n	61c8 <__aeabi_ddiv+0x504>
    61c6:	e765      	b.n	6094 <__aeabi_ddiv+0x3d0>
    61c8:	9a03      	ldr	r2, [sp, #12]
    61ca:	4293      	cmp	r3, r2
    61cc:	d000      	beq.n	61d0 <__aeabi_ddiv+0x50c>
    61ce:	e761      	b.n	6094 <__aeabi_ddiv+0x3d0>
    61d0:	e762      	b.n	6098 <__aeabi_ddiv+0x3d4>
    61d2:	2101      	movs	r1, #1
    61d4:	4249      	negs	r1, r1
    61d6:	2001      	movs	r0, #1
    61d8:	1ac2      	subs	r2, r0, r3
    61da:	2a38      	cmp	r2, #56	; 0x38
    61dc:	dd21      	ble.n	6222 <__aeabi_ddiv+0x55e>
    61de:	9b02      	ldr	r3, [sp, #8]
    61e0:	4003      	ands	r3, r0
    61e2:	469c      	mov	ip, r3
    61e4:	e638      	b.n	5e58 <__aeabi_ddiv+0x194>
    61e6:	220f      	movs	r2, #15
    61e8:	400a      	ands	r2, r1
    61ea:	2a04      	cmp	r2, #4
    61ec:	d100      	bne.n	61f0 <__aeabi_ddiv+0x52c>
    61ee:	e75b      	b.n	60a8 <__aeabi_ddiv+0x3e4>
    61f0:	000a      	movs	r2, r1
    61f2:	1d11      	adds	r1, r2, #4
    61f4:	4291      	cmp	r1, r2
    61f6:	4192      	sbcs	r2, r2
    61f8:	4252      	negs	r2, r2
    61fa:	4493      	add	fp, r2
    61fc:	e754      	b.n	60a8 <__aeabi_ddiv+0x3e4>
    61fe:	4b47      	ldr	r3, [pc, #284]	; (631c <__aeabi_ddiv+0x658>)
    6200:	18e3      	adds	r3, r4, r3
    6202:	2b00      	cmp	r3, #0
    6204:	dde5      	ble.n	61d2 <__aeabi_ddiv+0x50e>
    6206:	2201      	movs	r2, #1
    6208:	4252      	negs	r2, r2
    620a:	e7f2      	b.n	61f2 <__aeabi_ddiv+0x52e>
    620c:	001d      	movs	r5, r3
    620e:	e6fa      	b.n	6006 <__aeabi_ddiv+0x342>
    6210:	469a      	mov	sl, r3
    6212:	e71c      	b.n	604e <__aeabi_ddiv+0x38a>
    6214:	42b0      	cmp	r0, r6
    6216:	d839      	bhi.n	628c <__aeabi_ddiv+0x5c8>
    6218:	d06e      	beq.n	62f8 <__aeabi_ddiv+0x634>
    621a:	0011      	movs	r1, r2
    621c:	e73a      	b.n	6094 <__aeabi_ddiv+0x3d0>
    621e:	9302      	str	r3, [sp, #8]
    6220:	e73a      	b.n	6098 <__aeabi_ddiv+0x3d4>
    6222:	2a1f      	cmp	r2, #31
    6224:	dc3c      	bgt.n	62a0 <__aeabi_ddiv+0x5dc>
    6226:	2320      	movs	r3, #32
    6228:	1a9b      	subs	r3, r3, r2
    622a:	000c      	movs	r4, r1
    622c:	4658      	mov	r0, fp
    622e:	4099      	lsls	r1, r3
    6230:	4098      	lsls	r0, r3
    6232:	1e4b      	subs	r3, r1, #1
    6234:	4199      	sbcs	r1, r3
    6236:	465b      	mov	r3, fp
    6238:	40d4      	lsrs	r4, r2
    623a:	40d3      	lsrs	r3, r2
    623c:	4320      	orrs	r0, r4
    623e:	4308      	orrs	r0, r1
    6240:	001a      	movs	r2, r3
    6242:	0743      	lsls	r3, r0, #29
    6244:	d009      	beq.n	625a <__aeabi_ddiv+0x596>
    6246:	230f      	movs	r3, #15
    6248:	4003      	ands	r3, r0
    624a:	2b04      	cmp	r3, #4
    624c:	d005      	beq.n	625a <__aeabi_ddiv+0x596>
    624e:	0001      	movs	r1, r0
    6250:	1d08      	adds	r0, r1, #4
    6252:	4288      	cmp	r0, r1
    6254:	419b      	sbcs	r3, r3
    6256:	425b      	negs	r3, r3
    6258:	18d2      	adds	r2, r2, r3
    625a:	0213      	lsls	r3, r2, #8
    625c:	d53a      	bpl.n	62d4 <__aeabi_ddiv+0x610>
    625e:	2301      	movs	r3, #1
    6260:	9a02      	ldr	r2, [sp, #8]
    6262:	2401      	movs	r4, #1
    6264:	401a      	ands	r2, r3
    6266:	2300      	movs	r3, #0
    6268:	4694      	mov	ip, r2
    626a:	4698      	mov	r8, r3
    626c:	2200      	movs	r2, #0
    626e:	e5f7      	b.n	5e60 <__aeabi_ddiv+0x19c>
    6270:	2102      	movs	r1, #2
    6272:	4249      	negs	r1, r1
    6274:	468c      	mov	ip, r1
    6276:	9d03      	ldr	r5, [sp, #12]
    6278:	44e3      	add	fp, ip
    627a:	46ac      	mov	ip, r5
    627c:	44e2      	add	sl, ip
    627e:	45aa      	cmp	sl, r5
    6280:	41ad      	sbcs	r5, r5
    6282:	426d      	negs	r5, r5
    6284:	4445      	add	r5, r8
    6286:	18ed      	adds	r5, r5, r3
    6288:	1a2d      	subs	r5, r5, r0
    628a:	e696      	b.n	5fba <__aeabi_ddiv+0x2f6>
    628c:	1e8a      	subs	r2, r1, #2
    628e:	9903      	ldr	r1, [sp, #12]
    6290:	004d      	lsls	r5, r1, #1
    6292:	428d      	cmp	r5, r1
    6294:	4189      	sbcs	r1, r1
    6296:	4249      	negs	r1, r1
    6298:	4441      	add	r1, r8
    629a:	1876      	adds	r6, r6, r1
    629c:	9503      	str	r5, [sp, #12]
    629e:	e78f      	b.n	61c0 <__aeabi_ddiv+0x4fc>
    62a0:	201f      	movs	r0, #31
    62a2:	4240      	negs	r0, r0
    62a4:	1ac3      	subs	r3, r0, r3
    62a6:	4658      	mov	r0, fp
    62a8:	40d8      	lsrs	r0, r3
    62aa:	0003      	movs	r3, r0
    62ac:	2a20      	cmp	r2, #32
    62ae:	d028      	beq.n	6302 <__aeabi_ddiv+0x63e>
    62b0:	2040      	movs	r0, #64	; 0x40
    62b2:	465d      	mov	r5, fp
    62b4:	1a82      	subs	r2, r0, r2
    62b6:	4095      	lsls	r5, r2
    62b8:	4329      	orrs	r1, r5
    62ba:	1e4a      	subs	r2, r1, #1
    62bc:	4191      	sbcs	r1, r2
    62be:	4319      	orrs	r1, r3
    62c0:	2307      	movs	r3, #7
    62c2:	2200      	movs	r2, #0
    62c4:	400b      	ands	r3, r1
    62c6:	d009      	beq.n	62dc <__aeabi_ddiv+0x618>
    62c8:	230f      	movs	r3, #15
    62ca:	2200      	movs	r2, #0
    62cc:	400b      	ands	r3, r1
    62ce:	0008      	movs	r0, r1
    62d0:	2b04      	cmp	r3, #4
    62d2:	d1bd      	bne.n	6250 <__aeabi_ddiv+0x58c>
    62d4:	0001      	movs	r1, r0
    62d6:	0753      	lsls	r3, r2, #29
    62d8:	0252      	lsls	r2, r2, #9
    62da:	0b12      	lsrs	r2, r2, #12
    62dc:	08c9      	lsrs	r1, r1, #3
    62de:	4319      	orrs	r1, r3
    62e0:	2301      	movs	r3, #1
    62e2:	4688      	mov	r8, r1
    62e4:	9902      	ldr	r1, [sp, #8]
    62e6:	2400      	movs	r4, #0
    62e8:	4019      	ands	r1, r3
    62ea:	468c      	mov	ip, r1
    62ec:	e5b8      	b.n	5e60 <__aeabi_ddiv+0x19c>
    62ee:	4552      	cmp	r2, sl
    62f0:	d8be      	bhi.n	6270 <__aeabi_ddiv+0x5ac>
    62f2:	468b      	mov	fp, r1
    62f4:	2500      	movs	r5, #0
    62f6:	e660      	b.n	5fba <__aeabi_ddiv+0x2f6>
    62f8:	9d03      	ldr	r5, [sp, #12]
    62fa:	429d      	cmp	r5, r3
    62fc:	d3c6      	bcc.n	628c <__aeabi_ddiv+0x5c8>
    62fe:	0011      	movs	r1, r2
    6300:	e762      	b.n	61c8 <__aeabi_ddiv+0x504>
    6302:	2500      	movs	r5, #0
    6304:	e7d8      	b.n	62b8 <__aeabi_ddiv+0x5f4>
    6306:	2280      	movs	r2, #128	; 0x80
    6308:	465b      	mov	r3, fp
    630a:	0312      	lsls	r2, r2, #12
    630c:	431a      	orrs	r2, r3
    630e:	9b01      	ldr	r3, [sp, #4]
    6310:	0312      	lsls	r2, r2, #12
    6312:	0b12      	lsrs	r2, r2, #12
    6314:	469c      	mov	ip, r3
    6316:	4688      	mov	r8, r1
    6318:	4c03      	ldr	r4, [pc, #12]	; (6328 <__aeabi_ddiv+0x664>)
    631a:	e5a1      	b.n	5e60 <__aeabi_ddiv+0x19c>
    631c:	000003ff 	.word	0x000003ff
    6320:	feffffff 	.word	0xfeffffff
    6324:	000007fe 	.word	0x000007fe
    6328:	000007ff 	.word	0x000007ff

0000632c <__eqdf2>:
    632c:	b5f0      	push	{r4, r5, r6, r7, lr}
    632e:	464f      	mov	r7, r9
    6330:	4646      	mov	r6, r8
    6332:	46d6      	mov	lr, sl
    6334:	005c      	lsls	r4, r3, #1
    6336:	b5c0      	push	{r6, r7, lr}
    6338:	031f      	lsls	r7, r3, #12
    633a:	0fdb      	lsrs	r3, r3, #31
    633c:	469a      	mov	sl, r3
    633e:	4b17      	ldr	r3, [pc, #92]	; (639c <__eqdf2+0x70>)
    6340:	030e      	lsls	r6, r1, #12
    6342:	004d      	lsls	r5, r1, #1
    6344:	4684      	mov	ip, r0
    6346:	4680      	mov	r8, r0
    6348:	0b36      	lsrs	r6, r6, #12
    634a:	0d6d      	lsrs	r5, r5, #21
    634c:	0fc9      	lsrs	r1, r1, #31
    634e:	4691      	mov	r9, r2
    6350:	0b3f      	lsrs	r7, r7, #12
    6352:	0d64      	lsrs	r4, r4, #21
    6354:	2001      	movs	r0, #1
    6356:	429d      	cmp	r5, r3
    6358:	d008      	beq.n	636c <__eqdf2+0x40>
    635a:	429c      	cmp	r4, r3
    635c:	d001      	beq.n	6362 <__eqdf2+0x36>
    635e:	42a5      	cmp	r5, r4
    6360:	d00b      	beq.n	637a <__eqdf2+0x4e>
    6362:	bc1c      	pop	{r2, r3, r4}
    6364:	4690      	mov	r8, r2
    6366:	4699      	mov	r9, r3
    6368:	46a2      	mov	sl, r4
    636a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    636c:	4663      	mov	r3, ip
    636e:	4333      	orrs	r3, r6
    6370:	d1f7      	bne.n	6362 <__eqdf2+0x36>
    6372:	42ac      	cmp	r4, r5
    6374:	d1f5      	bne.n	6362 <__eqdf2+0x36>
    6376:	433a      	orrs	r2, r7
    6378:	d1f3      	bne.n	6362 <__eqdf2+0x36>
    637a:	2001      	movs	r0, #1
    637c:	42be      	cmp	r6, r7
    637e:	d1f0      	bne.n	6362 <__eqdf2+0x36>
    6380:	45c8      	cmp	r8, r9
    6382:	d1ee      	bne.n	6362 <__eqdf2+0x36>
    6384:	4551      	cmp	r1, sl
    6386:	d007      	beq.n	6398 <__eqdf2+0x6c>
    6388:	2d00      	cmp	r5, #0
    638a:	d1ea      	bne.n	6362 <__eqdf2+0x36>
    638c:	4663      	mov	r3, ip
    638e:	431e      	orrs	r6, r3
    6390:	0030      	movs	r0, r6
    6392:	1e46      	subs	r6, r0, #1
    6394:	41b0      	sbcs	r0, r6
    6396:	e7e4      	b.n	6362 <__eqdf2+0x36>
    6398:	2000      	movs	r0, #0
    639a:	e7e2      	b.n	6362 <__eqdf2+0x36>
    639c:	000007ff 	.word	0x000007ff

000063a0 <__gedf2>:
    63a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    63a2:	4645      	mov	r5, r8
    63a4:	46de      	mov	lr, fp
    63a6:	4657      	mov	r7, sl
    63a8:	464e      	mov	r6, r9
    63aa:	b5e0      	push	{r5, r6, r7, lr}
    63ac:	031f      	lsls	r7, r3, #12
    63ae:	0b3d      	lsrs	r5, r7, #12
    63b0:	4f2c      	ldr	r7, [pc, #176]	; (6464 <__gedf2+0xc4>)
    63b2:	030e      	lsls	r6, r1, #12
    63b4:	004c      	lsls	r4, r1, #1
    63b6:	46ab      	mov	fp, r5
    63b8:	005d      	lsls	r5, r3, #1
    63ba:	4684      	mov	ip, r0
    63bc:	0b36      	lsrs	r6, r6, #12
    63be:	0d64      	lsrs	r4, r4, #21
    63c0:	0fc9      	lsrs	r1, r1, #31
    63c2:	4690      	mov	r8, r2
    63c4:	0d6d      	lsrs	r5, r5, #21
    63c6:	0fdb      	lsrs	r3, r3, #31
    63c8:	42bc      	cmp	r4, r7
    63ca:	d02a      	beq.n	6422 <__gedf2+0x82>
    63cc:	4f25      	ldr	r7, [pc, #148]	; (6464 <__gedf2+0xc4>)
    63ce:	42bd      	cmp	r5, r7
    63d0:	d02d      	beq.n	642e <__gedf2+0x8e>
    63d2:	2c00      	cmp	r4, #0
    63d4:	d10f      	bne.n	63f6 <__gedf2+0x56>
    63d6:	4330      	orrs	r0, r6
    63d8:	0007      	movs	r7, r0
    63da:	4681      	mov	r9, r0
    63dc:	4278      	negs	r0, r7
    63de:	4178      	adcs	r0, r7
    63e0:	b2c0      	uxtb	r0, r0
    63e2:	2d00      	cmp	r5, #0
    63e4:	d117      	bne.n	6416 <__gedf2+0x76>
    63e6:	465f      	mov	r7, fp
    63e8:	433a      	orrs	r2, r7
    63ea:	d114      	bne.n	6416 <__gedf2+0x76>
    63ec:	464b      	mov	r3, r9
    63ee:	2000      	movs	r0, #0
    63f0:	2b00      	cmp	r3, #0
    63f2:	d00a      	beq.n	640a <__gedf2+0x6a>
    63f4:	e006      	b.n	6404 <__gedf2+0x64>
    63f6:	2d00      	cmp	r5, #0
    63f8:	d102      	bne.n	6400 <__gedf2+0x60>
    63fa:	4658      	mov	r0, fp
    63fc:	4302      	orrs	r2, r0
    63fe:	d001      	beq.n	6404 <__gedf2+0x64>
    6400:	4299      	cmp	r1, r3
    6402:	d018      	beq.n	6436 <__gedf2+0x96>
    6404:	4248      	negs	r0, r1
    6406:	2101      	movs	r1, #1
    6408:	4308      	orrs	r0, r1
    640a:	bc3c      	pop	{r2, r3, r4, r5}
    640c:	4690      	mov	r8, r2
    640e:	4699      	mov	r9, r3
    6410:	46a2      	mov	sl, r4
    6412:	46ab      	mov	fp, r5
    6414:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6416:	2800      	cmp	r0, #0
    6418:	d0f2      	beq.n	6400 <__gedf2+0x60>
    641a:	2001      	movs	r0, #1
    641c:	3b01      	subs	r3, #1
    641e:	4318      	orrs	r0, r3
    6420:	e7f3      	b.n	640a <__gedf2+0x6a>
    6422:	0037      	movs	r7, r6
    6424:	4307      	orrs	r7, r0
    6426:	d0d1      	beq.n	63cc <__gedf2+0x2c>
    6428:	2002      	movs	r0, #2
    642a:	4240      	negs	r0, r0
    642c:	e7ed      	b.n	640a <__gedf2+0x6a>
    642e:	465f      	mov	r7, fp
    6430:	4317      	orrs	r7, r2
    6432:	d0ce      	beq.n	63d2 <__gedf2+0x32>
    6434:	e7f8      	b.n	6428 <__gedf2+0x88>
    6436:	42ac      	cmp	r4, r5
    6438:	dce4      	bgt.n	6404 <__gedf2+0x64>
    643a:	da03      	bge.n	6444 <__gedf2+0xa4>
    643c:	1e48      	subs	r0, r1, #1
    643e:	2101      	movs	r1, #1
    6440:	4308      	orrs	r0, r1
    6442:	e7e2      	b.n	640a <__gedf2+0x6a>
    6444:	455e      	cmp	r6, fp
    6446:	d8dd      	bhi.n	6404 <__gedf2+0x64>
    6448:	d006      	beq.n	6458 <__gedf2+0xb8>
    644a:	2000      	movs	r0, #0
    644c:	455e      	cmp	r6, fp
    644e:	d2dc      	bcs.n	640a <__gedf2+0x6a>
    6450:	2301      	movs	r3, #1
    6452:	1e48      	subs	r0, r1, #1
    6454:	4318      	orrs	r0, r3
    6456:	e7d8      	b.n	640a <__gedf2+0x6a>
    6458:	45c4      	cmp	ip, r8
    645a:	d8d3      	bhi.n	6404 <__gedf2+0x64>
    645c:	2000      	movs	r0, #0
    645e:	45c4      	cmp	ip, r8
    6460:	d3f6      	bcc.n	6450 <__gedf2+0xb0>
    6462:	e7d2      	b.n	640a <__gedf2+0x6a>
    6464:	000007ff 	.word	0x000007ff

00006468 <__ledf2>:
    6468:	b5f0      	push	{r4, r5, r6, r7, lr}
    646a:	464e      	mov	r6, r9
    646c:	4645      	mov	r5, r8
    646e:	46de      	mov	lr, fp
    6470:	4657      	mov	r7, sl
    6472:	005c      	lsls	r4, r3, #1
    6474:	b5e0      	push	{r5, r6, r7, lr}
    6476:	031f      	lsls	r7, r3, #12
    6478:	0fdb      	lsrs	r3, r3, #31
    647a:	4699      	mov	r9, r3
    647c:	4b2a      	ldr	r3, [pc, #168]	; (6528 <__ledf2+0xc0>)
    647e:	030e      	lsls	r6, r1, #12
    6480:	004d      	lsls	r5, r1, #1
    6482:	0fc9      	lsrs	r1, r1, #31
    6484:	4684      	mov	ip, r0
    6486:	0b36      	lsrs	r6, r6, #12
    6488:	0d6d      	lsrs	r5, r5, #21
    648a:	468b      	mov	fp, r1
    648c:	4690      	mov	r8, r2
    648e:	0b3f      	lsrs	r7, r7, #12
    6490:	0d64      	lsrs	r4, r4, #21
    6492:	429d      	cmp	r5, r3
    6494:	d020      	beq.n	64d8 <__ledf2+0x70>
    6496:	4b24      	ldr	r3, [pc, #144]	; (6528 <__ledf2+0xc0>)
    6498:	429c      	cmp	r4, r3
    649a:	d022      	beq.n	64e2 <__ledf2+0x7a>
    649c:	2d00      	cmp	r5, #0
    649e:	d112      	bne.n	64c6 <__ledf2+0x5e>
    64a0:	4330      	orrs	r0, r6
    64a2:	4243      	negs	r3, r0
    64a4:	4143      	adcs	r3, r0
    64a6:	b2db      	uxtb	r3, r3
    64a8:	2c00      	cmp	r4, #0
    64aa:	d01f      	beq.n	64ec <__ledf2+0x84>
    64ac:	2b00      	cmp	r3, #0
    64ae:	d00c      	beq.n	64ca <__ledf2+0x62>
    64b0:	464b      	mov	r3, r9
    64b2:	2001      	movs	r0, #1
    64b4:	3b01      	subs	r3, #1
    64b6:	4303      	orrs	r3, r0
    64b8:	0018      	movs	r0, r3
    64ba:	bc3c      	pop	{r2, r3, r4, r5}
    64bc:	4690      	mov	r8, r2
    64be:	4699      	mov	r9, r3
    64c0:	46a2      	mov	sl, r4
    64c2:	46ab      	mov	fp, r5
    64c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    64c6:	2c00      	cmp	r4, #0
    64c8:	d016      	beq.n	64f8 <__ledf2+0x90>
    64ca:	45cb      	cmp	fp, r9
    64cc:	d017      	beq.n	64fe <__ledf2+0x96>
    64ce:	465b      	mov	r3, fp
    64d0:	4259      	negs	r1, r3
    64d2:	2301      	movs	r3, #1
    64d4:	430b      	orrs	r3, r1
    64d6:	e7ef      	b.n	64b8 <__ledf2+0x50>
    64d8:	0031      	movs	r1, r6
    64da:	2302      	movs	r3, #2
    64dc:	4301      	orrs	r1, r0
    64de:	d1eb      	bne.n	64b8 <__ledf2+0x50>
    64e0:	e7d9      	b.n	6496 <__ledf2+0x2e>
    64e2:	0039      	movs	r1, r7
    64e4:	2302      	movs	r3, #2
    64e6:	4311      	orrs	r1, r2
    64e8:	d1e6      	bne.n	64b8 <__ledf2+0x50>
    64ea:	e7d7      	b.n	649c <__ledf2+0x34>
    64ec:	433a      	orrs	r2, r7
    64ee:	d1dd      	bne.n	64ac <__ledf2+0x44>
    64f0:	2300      	movs	r3, #0
    64f2:	2800      	cmp	r0, #0
    64f4:	d0e0      	beq.n	64b8 <__ledf2+0x50>
    64f6:	e7ea      	b.n	64ce <__ledf2+0x66>
    64f8:	433a      	orrs	r2, r7
    64fa:	d1e6      	bne.n	64ca <__ledf2+0x62>
    64fc:	e7e7      	b.n	64ce <__ledf2+0x66>
    64fe:	42a5      	cmp	r5, r4
    6500:	dce5      	bgt.n	64ce <__ledf2+0x66>
    6502:	db05      	blt.n	6510 <__ledf2+0xa8>
    6504:	42be      	cmp	r6, r7
    6506:	d8e2      	bhi.n	64ce <__ledf2+0x66>
    6508:	d007      	beq.n	651a <__ledf2+0xb2>
    650a:	2300      	movs	r3, #0
    650c:	42be      	cmp	r6, r7
    650e:	d2d3      	bcs.n	64b8 <__ledf2+0x50>
    6510:	4659      	mov	r1, fp
    6512:	2301      	movs	r3, #1
    6514:	3901      	subs	r1, #1
    6516:	430b      	orrs	r3, r1
    6518:	e7ce      	b.n	64b8 <__ledf2+0x50>
    651a:	45c4      	cmp	ip, r8
    651c:	d8d7      	bhi.n	64ce <__ledf2+0x66>
    651e:	2300      	movs	r3, #0
    6520:	45c4      	cmp	ip, r8
    6522:	d3f5      	bcc.n	6510 <__ledf2+0xa8>
    6524:	e7c8      	b.n	64b8 <__ledf2+0x50>
    6526:	46c0      	nop			; (mov r8, r8)
    6528:	000007ff 	.word	0x000007ff

0000652c <__aeabi_dmul>:
    652c:	b5f0      	push	{r4, r5, r6, r7, lr}
    652e:	4657      	mov	r7, sl
    6530:	4645      	mov	r5, r8
    6532:	46de      	mov	lr, fp
    6534:	464e      	mov	r6, r9
    6536:	b5e0      	push	{r5, r6, r7, lr}
    6538:	030c      	lsls	r4, r1, #12
    653a:	4698      	mov	r8, r3
    653c:	004e      	lsls	r6, r1, #1
    653e:	0b23      	lsrs	r3, r4, #12
    6540:	b087      	sub	sp, #28
    6542:	0007      	movs	r7, r0
    6544:	4692      	mov	sl, r2
    6546:	469b      	mov	fp, r3
    6548:	0d76      	lsrs	r6, r6, #21
    654a:	0fcd      	lsrs	r5, r1, #31
    654c:	2e00      	cmp	r6, #0
    654e:	d06b      	beq.n	6628 <__aeabi_dmul+0xfc>
    6550:	4b6d      	ldr	r3, [pc, #436]	; (6708 <__aeabi_dmul+0x1dc>)
    6552:	429e      	cmp	r6, r3
    6554:	d035      	beq.n	65c2 <__aeabi_dmul+0x96>
    6556:	2480      	movs	r4, #128	; 0x80
    6558:	465b      	mov	r3, fp
    655a:	0f42      	lsrs	r2, r0, #29
    655c:	0424      	lsls	r4, r4, #16
    655e:	00db      	lsls	r3, r3, #3
    6560:	4314      	orrs	r4, r2
    6562:	431c      	orrs	r4, r3
    6564:	00c3      	lsls	r3, r0, #3
    6566:	4699      	mov	r9, r3
    6568:	4b68      	ldr	r3, [pc, #416]	; (670c <__aeabi_dmul+0x1e0>)
    656a:	46a3      	mov	fp, r4
    656c:	469c      	mov	ip, r3
    656e:	2300      	movs	r3, #0
    6570:	2700      	movs	r7, #0
    6572:	4466      	add	r6, ip
    6574:	9302      	str	r3, [sp, #8]
    6576:	4643      	mov	r3, r8
    6578:	031c      	lsls	r4, r3, #12
    657a:	005a      	lsls	r2, r3, #1
    657c:	0fdb      	lsrs	r3, r3, #31
    657e:	4650      	mov	r0, sl
    6580:	0b24      	lsrs	r4, r4, #12
    6582:	0d52      	lsrs	r2, r2, #21
    6584:	4698      	mov	r8, r3
    6586:	d100      	bne.n	658a <__aeabi_dmul+0x5e>
    6588:	e076      	b.n	6678 <__aeabi_dmul+0x14c>
    658a:	4b5f      	ldr	r3, [pc, #380]	; (6708 <__aeabi_dmul+0x1dc>)
    658c:	429a      	cmp	r2, r3
    658e:	d06d      	beq.n	666c <__aeabi_dmul+0x140>
    6590:	2380      	movs	r3, #128	; 0x80
    6592:	0f41      	lsrs	r1, r0, #29
    6594:	041b      	lsls	r3, r3, #16
    6596:	430b      	orrs	r3, r1
    6598:	495c      	ldr	r1, [pc, #368]	; (670c <__aeabi_dmul+0x1e0>)
    659a:	00e4      	lsls	r4, r4, #3
    659c:	468c      	mov	ip, r1
    659e:	431c      	orrs	r4, r3
    65a0:	00c3      	lsls	r3, r0, #3
    65a2:	2000      	movs	r0, #0
    65a4:	4462      	add	r2, ip
    65a6:	4641      	mov	r1, r8
    65a8:	18b6      	adds	r6, r6, r2
    65aa:	4069      	eors	r1, r5
    65ac:	1c72      	adds	r2, r6, #1
    65ae:	9101      	str	r1, [sp, #4]
    65b0:	4694      	mov	ip, r2
    65b2:	4307      	orrs	r7, r0
    65b4:	2f0f      	cmp	r7, #15
    65b6:	d900      	bls.n	65ba <__aeabi_dmul+0x8e>
    65b8:	e0b0      	b.n	671c <__aeabi_dmul+0x1f0>
    65ba:	4a55      	ldr	r2, [pc, #340]	; (6710 <__aeabi_dmul+0x1e4>)
    65bc:	00bf      	lsls	r7, r7, #2
    65be:	59d2      	ldr	r2, [r2, r7]
    65c0:	4697      	mov	pc, r2
    65c2:	465b      	mov	r3, fp
    65c4:	4303      	orrs	r3, r0
    65c6:	4699      	mov	r9, r3
    65c8:	d000      	beq.n	65cc <__aeabi_dmul+0xa0>
    65ca:	e087      	b.n	66dc <__aeabi_dmul+0x1b0>
    65cc:	2300      	movs	r3, #0
    65ce:	469b      	mov	fp, r3
    65d0:	3302      	adds	r3, #2
    65d2:	2708      	movs	r7, #8
    65d4:	9302      	str	r3, [sp, #8]
    65d6:	e7ce      	b.n	6576 <__aeabi_dmul+0x4a>
    65d8:	4642      	mov	r2, r8
    65da:	9201      	str	r2, [sp, #4]
    65dc:	2802      	cmp	r0, #2
    65de:	d067      	beq.n	66b0 <__aeabi_dmul+0x184>
    65e0:	2803      	cmp	r0, #3
    65e2:	d100      	bne.n	65e6 <__aeabi_dmul+0xba>
    65e4:	e20e      	b.n	6a04 <__aeabi_dmul+0x4d8>
    65e6:	2801      	cmp	r0, #1
    65e8:	d000      	beq.n	65ec <__aeabi_dmul+0xc0>
    65ea:	e162      	b.n	68b2 <__aeabi_dmul+0x386>
    65ec:	2300      	movs	r3, #0
    65ee:	2400      	movs	r4, #0
    65f0:	2200      	movs	r2, #0
    65f2:	4699      	mov	r9, r3
    65f4:	9901      	ldr	r1, [sp, #4]
    65f6:	4001      	ands	r1, r0
    65f8:	b2cd      	uxtb	r5, r1
    65fa:	2100      	movs	r1, #0
    65fc:	0312      	lsls	r2, r2, #12
    65fe:	0d0b      	lsrs	r3, r1, #20
    6600:	0b12      	lsrs	r2, r2, #12
    6602:	051b      	lsls	r3, r3, #20
    6604:	4313      	orrs	r3, r2
    6606:	4a43      	ldr	r2, [pc, #268]	; (6714 <__aeabi_dmul+0x1e8>)
    6608:	0524      	lsls	r4, r4, #20
    660a:	4013      	ands	r3, r2
    660c:	431c      	orrs	r4, r3
    660e:	0064      	lsls	r4, r4, #1
    6610:	07ed      	lsls	r5, r5, #31
    6612:	0864      	lsrs	r4, r4, #1
    6614:	432c      	orrs	r4, r5
    6616:	4648      	mov	r0, r9
    6618:	0021      	movs	r1, r4
    661a:	b007      	add	sp, #28
    661c:	bc3c      	pop	{r2, r3, r4, r5}
    661e:	4690      	mov	r8, r2
    6620:	4699      	mov	r9, r3
    6622:	46a2      	mov	sl, r4
    6624:	46ab      	mov	fp, r5
    6626:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6628:	4303      	orrs	r3, r0
    662a:	4699      	mov	r9, r3
    662c:	d04f      	beq.n	66ce <__aeabi_dmul+0x1a2>
    662e:	465b      	mov	r3, fp
    6630:	2b00      	cmp	r3, #0
    6632:	d100      	bne.n	6636 <__aeabi_dmul+0x10a>
    6634:	e189      	b.n	694a <__aeabi_dmul+0x41e>
    6636:	4658      	mov	r0, fp
    6638:	f000 fe84 	bl	7344 <__clzsi2>
    663c:	0003      	movs	r3, r0
    663e:	3b0b      	subs	r3, #11
    6640:	2b1c      	cmp	r3, #28
    6642:	dd00      	ble.n	6646 <__aeabi_dmul+0x11a>
    6644:	e17a      	b.n	693c <__aeabi_dmul+0x410>
    6646:	221d      	movs	r2, #29
    6648:	1ad3      	subs	r3, r2, r3
    664a:	003a      	movs	r2, r7
    664c:	0001      	movs	r1, r0
    664e:	465c      	mov	r4, fp
    6650:	40da      	lsrs	r2, r3
    6652:	3908      	subs	r1, #8
    6654:	408c      	lsls	r4, r1
    6656:	0013      	movs	r3, r2
    6658:	408f      	lsls	r7, r1
    665a:	4323      	orrs	r3, r4
    665c:	469b      	mov	fp, r3
    665e:	46b9      	mov	r9, r7
    6660:	2300      	movs	r3, #0
    6662:	4e2d      	ldr	r6, [pc, #180]	; (6718 <__aeabi_dmul+0x1ec>)
    6664:	2700      	movs	r7, #0
    6666:	1a36      	subs	r6, r6, r0
    6668:	9302      	str	r3, [sp, #8]
    666a:	e784      	b.n	6576 <__aeabi_dmul+0x4a>
    666c:	4653      	mov	r3, sl
    666e:	4323      	orrs	r3, r4
    6670:	d12a      	bne.n	66c8 <__aeabi_dmul+0x19c>
    6672:	2400      	movs	r4, #0
    6674:	2002      	movs	r0, #2
    6676:	e796      	b.n	65a6 <__aeabi_dmul+0x7a>
    6678:	4653      	mov	r3, sl
    667a:	4323      	orrs	r3, r4
    667c:	d020      	beq.n	66c0 <__aeabi_dmul+0x194>
    667e:	2c00      	cmp	r4, #0
    6680:	d100      	bne.n	6684 <__aeabi_dmul+0x158>
    6682:	e157      	b.n	6934 <__aeabi_dmul+0x408>
    6684:	0020      	movs	r0, r4
    6686:	f000 fe5d 	bl	7344 <__clzsi2>
    668a:	0003      	movs	r3, r0
    668c:	3b0b      	subs	r3, #11
    668e:	2b1c      	cmp	r3, #28
    6690:	dd00      	ble.n	6694 <__aeabi_dmul+0x168>
    6692:	e149      	b.n	6928 <__aeabi_dmul+0x3fc>
    6694:	211d      	movs	r1, #29
    6696:	1acb      	subs	r3, r1, r3
    6698:	4651      	mov	r1, sl
    669a:	0002      	movs	r2, r0
    669c:	40d9      	lsrs	r1, r3
    669e:	4653      	mov	r3, sl
    66a0:	3a08      	subs	r2, #8
    66a2:	4094      	lsls	r4, r2
    66a4:	4093      	lsls	r3, r2
    66a6:	430c      	orrs	r4, r1
    66a8:	4a1b      	ldr	r2, [pc, #108]	; (6718 <__aeabi_dmul+0x1ec>)
    66aa:	1a12      	subs	r2, r2, r0
    66ac:	2000      	movs	r0, #0
    66ae:	e77a      	b.n	65a6 <__aeabi_dmul+0x7a>
    66b0:	2501      	movs	r5, #1
    66b2:	9b01      	ldr	r3, [sp, #4]
    66b4:	4c14      	ldr	r4, [pc, #80]	; (6708 <__aeabi_dmul+0x1dc>)
    66b6:	401d      	ands	r5, r3
    66b8:	2300      	movs	r3, #0
    66ba:	2200      	movs	r2, #0
    66bc:	4699      	mov	r9, r3
    66be:	e79c      	b.n	65fa <__aeabi_dmul+0xce>
    66c0:	2400      	movs	r4, #0
    66c2:	2200      	movs	r2, #0
    66c4:	2001      	movs	r0, #1
    66c6:	e76e      	b.n	65a6 <__aeabi_dmul+0x7a>
    66c8:	4653      	mov	r3, sl
    66ca:	2003      	movs	r0, #3
    66cc:	e76b      	b.n	65a6 <__aeabi_dmul+0x7a>
    66ce:	2300      	movs	r3, #0
    66d0:	469b      	mov	fp, r3
    66d2:	3301      	adds	r3, #1
    66d4:	2704      	movs	r7, #4
    66d6:	2600      	movs	r6, #0
    66d8:	9302      	str	r3, [sp, #8]
    66da:	e74c      	b.n	6576 <__aeabi_dmul+0x4a>
    66dc:	2303      	movs	r3, #3
    66de:	4681      	mov	r9, r0
    66e0:	270c      	movs	r7, #12
    66e2:	9302      	str	r3, [sp, #8]
    66e4:	e747      	b.n	6576 <__aeabi_dmul+0x4a>
    66e6:	2280      	movs	r2, #128	; 0x80
    66e8:	2300      	movs	r3, #0
    66ea:	2500      	movs	r5, #0
    66ec:	0312      	lsls	r2, r2, #12
    66ee:	4699      	mov	r9, r3
    66f0:	4c05      	ldr	r4, [pc, #20]	; (6708 <__aeabi_dmul+0x1dc>)
    66f2:	e782      	b.n	65fa <__aeabi_dmul+0xce>
    66f4:	465c      	mov	r4, fp
    66f6:	464b      	mov	r3, r9
    66f8:	9802      	ldr	r0, [sp, #8]
    66fa:	e76f      	b.n	65dc <__aeabi_dmul+0xb0>
    66fc:	465c      	mov	r4, fp
    66fe:	464b      	mov	r3, r9
    6700:	9501      	str	r5, [sp, #4]
    6702:	9802      	ldr	r0, [sp, #8]
    6704:	e76a      	b.n	65dc <__aeabi_dmul+0xb0>
    6706:	46c0      	nop			; (mov r8, r8)
    6708:	000007ff 	.word	0x000007ff
    670c:	fffffc01 	.word	0xfffffc01
    6710:	000074a8 	.word	0x000074a8
    6714:	800fffff 	.word	0x800fffff
    6718:	fffffc0d 	.word	0xfffffc0d
    671c:	464a      	mov	r2, r9
    671e:	4649      	mov	r1, r9
    6720:	0c17      	lsrs	r7, r2, #16
    6722:	0c1a      	lsrs	r2, r3, #16
    6724:	041b      	lsls	r3, r3, #16
    6726:	0c1b      	lsrs	r3, r3, #16
    6728:	0408      	lsls	r0, r1, #16
    672a:	0019      	movs	r1, r3
    672c:	0c00      	lsrs	r0, r0, #16
    672e:	4341      	muls	r1, r0
    6730:	0015      	movs	r5, r2
    6732:	4688      	mov	r8, r1
    6734:	0019      	movs	r1, r3
    6736:	437d      	muls	r5, r7
    6738:	4379      	muls	r1, r7
    673a:	9503      	str	r5, [sp, #12]
    673c:	4689      	mov	r9, r1
    673e:	0029      	movs	r1, r5
    6740:	0015      	movs	r5, r2
    6742:	4345      	muls	r5, r0
    6744:	444d      	add	r5, r9
    6746:	9502      	str	r5, [sp, #8]
    6748:	4645      	mov	r5, r8
    674a:	0c2d      	lsrs	r5, r5, #16
    674c:	46aa      	mov	sl, r5
    674e:	9d02      	ldr	r5, [sp, #8]
    6750:	4455      	add	r5, sl
    6752:	45a9      	cmp	r9, r5
    6754:	d906      	bls.n	6764 <__aeabi_dmul+0x238>
    6756:	468a      	mov	sl, r1
    6758:	2180      	movs	r1, #128	; 0x80
    675a:	0249      	lsls	r1, r1, #9
    675c:	4689      	mov	r9, r1
    675e:	44ca      	add	sl, r9
    6760:	4651      	mov	r1, sl
    6762:	9103      	str	r1, [sp, #12]
    6764:	0c29      	lsrs	r1, r5, #16
    6766:	9104      	str	r1, [sp, #16]
    6768:	4641      	mov	r1, r8
    676a:	0409      	lsls	r1, r1, #16
    676c:	042d      	lsls	r5, r5, #16
    676e:	0c09      	lsrs	r1, r1, #16
    6770:	4688      	mov	r8, r1
    6772:	0029      	movs	r1, r5
    6774:	0c25      	lsrs	r5, r4, #16
    6776:	0424      	lsls	r4, r4, #16
    6778:	4441      	add	r1, r8
    677a:	0c24      	lsrs	r4, r4, #16
    677c:	9105      	str	r1, [sp, #20]
    677e:	0021      	movs	r1, r4
    6780:	4341      	muls	r1, r0
    6782:	4688      	mov	r8, r1
    6784:	0021      	movs	r1, r4
    6786:	4379      	muls	r1, r7
    6788:	468a      	mov	sl, r1
    678a:	4368      	muls	r0, r5
    678c:	4641      	mov	r1, r8
    678e:	4450      	add	r0, sl
    6790:	4681      	mov	r9, r0
    6792:	0c08      	lsrs	r0, r1, #16
    6794:	4448      	add	r0, r9
    6796:	436f      	muls	r7, r5
    6798:	4582      	cmp	sl, r0
    679a:	d903      	bls.n	67a4 <__aeabi_dmul+0x278>
    679c:	2180      	movs	r1, #128	; 0x80
    679e:	0249      	lsls	r1, r1, #9
    67a0:	4689      	mov	r9, r1
    67a2:	444f      	add	r7, r9
    67a4:	0c01      	lsrs	r1, r0, #16
    67a6:	4689      	mov	r9, r1
    67a8:	0039      	movs	r1, r7
    67aa:	4449      	add	r1, r9
    67ac:	9102      	str	r1, [sp, #8]
    67ae:	4641      	mov	r1, r8
    67b0:	040f      	lsls	r7, r1, #16
    67b2:	9904      	ldr	r1, [sp, #16]
    67b4:	0c3f      	lsrs	r7, r7, #16
    67b6:	4688      	mov	r8, r1
    67b8:	0400      	lsls	r0, r0, #16
    67ba:	19c0      	adds	r0, r0, r7
    67bc:	4480      	add	r8, r0
    67be:	4641      	mov	r1, r8
    67c0:	9104      	str	r1, [sp, #16]
    67c2:	4659      	mov	r1, fp
    67c4:	0c0f      	lsrs	r7, r1, #16
    67c6:	0409      	lsls	r1, r1, #16
    67c8:	0c09      	lsrs	r1, r1, #16
    67ca:	4688      	mov	r8, r1
    67cc:	4359      	muls	r1, r3
    67ce:	468a      	mov	sl, r1
    67d0:	0039      	movs	r1, r7
    67d2:	4351      	muls	r1, r2
    67d4:	4689      	mov	r9, r1
    67d6:	4641      	mov	r1, r8
    67d8:	434a      	muls	r2, r1
    67da:	4651      	mov	r1, sl
    67dc:	0c09      	lsrs	r1, r1, #16
    67de:	468b      	mov	fp, r1
    67e0:	437b      	muls	r3, r7
    67e2:	18d2      	adds	r2, r2, r3
    67e4:	445a      	add	r2, fp
    67e6:	4293      	cmp	r3, r2
    67e8:	d903      	bls.n	67f2 <__aeabi_dmul+0x2c6>
    67ea:	2380      	movs	r3, #128	; 0x80
    67ec:	025b      	lsls	r3, r3, #9
    67ee:	469b      	mov	fp, r3
    67f0:	44d9      	add	r9, fp
    67f2:	4651      	mov	r1, sl
    67f4:	0409      	lsls	r1, r1, #16
    67f6:	0c09      	lsrs	r1, r1, #16
    67f8:	468a      	mov	sl, r1
    67fa:	4641      	mov	r1, r8
    67fc:	4361      	muls	r1, r4
    67fe:	437c      	muls	r4, r7
    6800:	0c13      	lsrs	r3, r2, #16
    6802:	0412      	lsls	r2, r2, #16
    6804:	444b      	add	r3, r9
    6806:	4452      	add	r2, sl
    6808:	46a1      	mov	r9, r4
    680a:	468a      	mov	sl, r1
    680c:	003c      	movs	r4, r7
    680e:	4641      	mov	r1, r8
    6810:	436c      	muls	r4, r5
    6812:	434d      	muls	r5, r1
    6814:	4651      	mov	r1, sl
    6816:	444d      	add	r5, r9
    6818:	0c0f      	lsrs	r7, r1, #16
    681a:	197d      	adds	r5, r7, r5
    681c:	45a9      	cmp	r9, r5
    681e:	d903      	bls.n	6828 <__aeabi_dmul+0x2fc>
    6820:	2180      	movs	r1, #128	; 0x80
    6822:	0249      	lsls	r1, r1, #9
    6824:	4688      	mov	r8, r1
    6826:	4444      	add	r4, r8
    6828:	9f04      	ldr	r7, [sp, #16]
    682a:	9903      	ldr	r1, [sp, #12]
    682c:	46b8      	mov	r8, r7
    682e:	4441      	add	r1, r8
    6830:	468b      	mov	fp, r1
    6832:	4583      	cmp	fp, r0
    6834:	4180      	sbcs	r0, r0
    6836:	4241      	negs	r1, r0
    6838:	4688      	mov	r8, r1
    683a:	4651      	mov	r1, sl
    683c:	0408      	lsls	r0, r1, #16
    683e:	042f      	lsls	r7, r5, #16
    6840:	0c00      	lsrs	r0, r0, #16
    6842:	183f      	adds	r7, r7, r0
    6844:	4658      	mov	r0, fp
    6846:	9902      	ldr	r1, [sp, #8]
    6848:	1810      	adds	r0, r2, r0
    684a:	4689      	mov	r9, r1
    684c:	4290      	cmp	r0, r2
    684e:	4192      	sbcs	r2, r2
    6850:	444f      	add	r7, r9
    6852:	46ba      	mov	sl, r7
    6854:	4252      	negs	r2, r2
    6856:	4699      	mov	r9, r3
    6858:	4693      	mov	fp, r2
    685a:	44c2      	add	sl, r8
    685c:	44d1      	add	r9, sl
    685e:	44cb      	add	fp, r9
    6860:	428f      	cmp	r7, r1
    6862:	41bf      	sbcs	r7, r7
    6864:	45c2      	cmp	sl, r8
    6866:	4189      	sbcs	r1, r1
    6868:	4599      	cmp	r9, r3
    686a:	419b      	sbcs	r3, r3
    686c:	4593      	cmp	fp, r2
    686e:	4192      	sbcs	r2, r2
    6870:	427f      	negs	r7, r7
    6872:	4249      	negs	r1, r1
    6874:	0c2d      	lsrs	r5, r5, #16
    6876:	4252      	negs	r2, r2
    6878:	430f      	orrs	r7, r1
    687a:	425b      	negs	r3, r3
    687c:	4313      	orrs	r3, r2
    687e:	197f      	adds	r7, r7, r5
    6880:	18ff      	adds	r7, r7, r3
    6882:	465b      	mov	r3, fp
    6884:	193c      	adds	r4, r7, r4
    6886:	0ddb      	lsrs	r3, r3, #23
    6888:	9a05      	ldr	r2, [sp, #20]
    688a:	0264      	lsls	r4, r4, #9
    688c:	431c      	orrs	r4, r3
    688e:	0243      	lsls	r3, r0, #9
    6890:	4313      	orrs	r3, r2
    6892:	1e5d      	subs	r5, r3, #1
    6894:	41ab      	sbcs	r3, r5
    6896:	465a      	mov	r2, fp
    6898:	0dc0      	lsrs	r0, r0, #23
    689a:	4303      	orrs	r3, r0
    689c:	0252      	lsls	r2, r2, #9
    689e:	4313      	orrs	r3, r2
    68a0:	01e2      	lsls	r2, r4, #7
    68a2:	d556      	bpl.n	6952 <__aeabi_dmul+0x426>
    68a4:	2001      	movs	r0, #1
    68a6:	085a      	lsrs	r2, r3, #1
    68a8:	4003      	ands	r3, r0
    68aa:	4313      	orrs	r3, r2
    68ac:	07e2      	lsls	r2, r4, #31
    68ae:	4313      	orrs	r3, r2
    68b0:	0864      	lsrs	r4, r4, #1
    68b2:	485a      	ldr	r0, [pc, #360]	; (6a1c <__aeabi_dmul+0x4f0>)
    68b4:	4460      	add	r0, ip
    68b6:	2800      	cmp	r0, #0
    68b8:	dd4d      	ble.n	6956 <__aeabi_dmul+0x42a>
    68ba:	075a      	lsls	r2, r3, #29
    68bc:	d009      	beq.n	68d2 <__aeabi_dmul+0x3a6>
    68be:	220f      	movs	r2, #15
    68c0:	401a      	ands	r2, r3
    68c2:	2a04      	cmp	r2, #4
    68c4:	d005      	beq.n	68d2 <__aeabi_dmul+0x3a6>
    68c6:	1d1a      	adds	r2, r3, #4
    68c8:	429a      	cmp	r2, r3
    68ca:	419b      	sbcs	r3, r3
    68cc:	425b      	negs	r3, r3
    68ce:	18e4      	adds	r4, r4, r3
    68d0:	0013      	movs	r3, r2
    68d2:	01e2      	lsls	r2, r4, #7
    68d4:	d504      	bpl.n	68e0 <__aeabi_dmul+0x3b4>
    68d6:	2080      	movs	r0, #128	; 0x80
    68d8:	4a51      	ldr	r2, [pc, #324]	; (6a20 <__aeabi_dmul+0x4f4>)
    68da:	00c0      	lsls	r0, r0, #3
    68dc:	4014      	ands	r4, r2
    68de:	4460      	add	r0, ip
    68e0:	4a50      	ldr	r2, [pc, #320]	; (6a24 <__aeabi_dmul+0x4f8>)
    68e2:	4290      	cmp	r0, r2
    68e4:	dd00      	ble.n	68e8 <__aeabi_dmul+0x3bc>
    68e6:	e6e3      	b.n	66b0 <__aeabi_dmul+0x184>
    68e8:	2501      	movs	r5, #1
    68ea:	08db      	lsrs	r3, r3, #3
    68ec:	0762      	lsls	r2, r4, #29
    68ee:	431a      	orrs	r2, r3
    68f0:	0264      	lsls	r4, r4, #9
    68f2:	9b01      	ldr	r3, [sp, #4]
    68f4:	4691      	mov	r9, r2
    68f6:	0b22      	lsrs	r2, r4, #12
    68f8:	0544      	lsls	r4, r0, #21
    68fa:	0d64      	lsrs	r4, r4, #21
    68fc:	401d      	ands	r5, r3
    68fe:	e67c      	b.n	65fa <__aeabi_dmul+0xce>
    6900:	2280      	movs	r2, #128	; 0x80
    6902:	4659      	mov	r1, fp
    6904:	0312      	lsls	r2, r2, #12
    6906:	4211      	tst	r1, r2
    6908:	d008      	beq.n	691c <__aeabi_dmul+0x3f0>
    690a:	4214      	tst	r4, r2
    690c:	d106      	bne.n	691c <__aeabi_dmul+0x3f0>
    690e:	4322      	orrs	r2, r4
    6910:	0312      	lsls	r2, r2, #12
    6912:	0b12      	lsrs	r2, r2, #12
    6914:	4645      	mov	r5, r8
    6916:	4699      	mov	r9, r3
    6918:	4c43      	ldr	r4, [pc, #268]	; (6a28 <__aeabi_dmul+0x4fc>)
    691a:	e66e      	b.n	65fa <__aeabi_dmul+0xce>
    691c:	465b      	mov	r3, fp
    691e:	431a      	orrs	r2, r3
    6920:	0312      	lsls	r2, r2, #12
    6922:	0b12      	lsrs	r2, r2, #12
    6924:	4c40      	ldr	r4, [pc, #256]	; (6a28 <__aeabi_dmul+0x4fc>)
    6926:	e668      	b.n	65fa <__aeabi_dmul+0xce>
    6928:	0003      	movs	r3, r0
    692a:	4654      	mov	r4, sl
    692c:	3b28      	subs	r3, #40	; 0x28
    692e:	409c      	lsls	r4, r3
    6930:	2300      	movs	r3, #0
    6932:	e6b9      	b.n	66a8 <__aeabi_dmul+0x17c>
    6934:	f000 fd06 	bl	7344 <__clzsi2>
    6938:	3020      	adds	r0, #32
    693a:	e6a6      	b.n	668a <__aeabi_dmul+0x15e>
    693c:	0003      	movs	r3, r0
    693e:	3b28      	subs	r3, #40	; 0x28
    6940:	409f      	lsls	r7, r3
    6942:	2300      	movs	r3, #0
    6944:	46bb      	mov	fp, r7
    6946:	4699      	mov	r9, r3
    6948:	e68a      	b.n	6660 <__aeabi_dmul+0x134>
    694a:	f000 fcfb 	bl	7344 <__clzsi2>
    694e:	3020      	adds	r0, #32
    6950:	e674      	b.n	663c <__aeabi_dmul+0x110>
    6952:	46b4      	mov	ip, r6
    6954:	e7ad      	b.n	68b2 <__aeabi_dmul+0x386>
    6956:	2501      	movs	r5, #1
    6958:	1a2a      	subs	r2, r5, r0
    695a:	2a38      	cmp	r2, #56	; 0x38
    695c:	dd06      	ble.n	696c <__aeabi_dmul+0x440>
    695e:	9b01      	ldr	r3, [sp, #4]
    6960:	2400      	movs	r4, #0
    6962:	401d      	ands	r5, r3
    6964:	2300      	movs	r3, #0
    6966:	2200      	movs	r2, #0
    6968:	4699      	mov	r9, r3
    696a:	e646      	b.n	65fa <__aeabi_dmul+0xce>
    696c:	2a1f      	cmp	r2, #31
    696e:	dc21      	bgt.n	69b4 <__aeabi_dmul+0x488>
    6970:	2520      	movs	r5, #32
    6972:	0020      	movs	r0, r4
    6974:	1aad      	subs	r5, r5, r2
    6976:	001e      	movs	r6, r3
    6978:	40ab      	lsls	r3, r5
    697a:	40a8      	lsls	r0, r5
    697c:	40d6      	lsrs	r6, r2
    697e:	1e5d      	subs	r5, r3, #1
    6980:	41ab      	sbcs	r3, r5
    6982:	4330      	orrs	r0, r6
    6984:	4318      	orrs	r0, r3
    6986:	40d4      	lsrs	r4, r2
    6988:	0743      	lsls	r3, r0, #29
    698a:	d009      	beq.n	69a0 <__aeabi_dmul+0x474>
    698c:	230f      	movs	r3, #15
    698e:	4003      	ands	r3, r0
    6990:	2b04      	cmp	r3, #4
    6992:	d005      	beq.n	69a0 <__aeabi_dmul+0x474>
    6994:	0003      	movs	r3, r0
    6996:	1d18      	adds	r0, r3, #4
    6998:	4298      	cmp	r0, r3
    699a:	419b      	sbcs	r3, r3
    699c:	425b      	negs	r3, r3
    699e:	18e4      	adds	r4, r4, r3
    69a0:	0223      	lsls	r3, r4, #8
    69a2:	d521      	bpl.n	69e8 <__aeabi_dmul+0x4bc>
    69a4:	2501      	movs	r5, #1
    69a6:	9b01      	ldr	r3, [sp, #4]
    69a8:	2401      	movs	r4, #1
    69aa:	401d      	ands	r5, r3
    69ac:	2300      	movs	r3, #0
    69ae:	2200      	movs	r2, #0
    69b0:	4699      	mov	r9, r3
    69b2:	e622      	b.n	65fa <__aeabi_dmul+0xce>
    69b4:	251f      	movs	r5, #31
    69b6:	0021      	movs	r1, r4
    69b8:	426d      	negs	r5, r5
    69ba:	1a28      	subs	r0, r5, r0
    69bc:	40c1      	lsrs	r1, r0
    69be:	0008      	movs	r0, r1
    69c0:	2a20      	cmp	r2, #32
    69c2:	d01d      	beq.n	6a00 <__aeabi_dmul+0x4d4>
    69c4:	355f      	adds	r5, #95	; 0x5f
    69c6:	1aaa      	subs	r2, r5, r2
    69c8:	4094      	lsls	r4, r2
    69ca:	4323      	orrs	r3, r4
    69cc:	1e5c      	subs	r4, r3, #1
    69ce:	41a3      	sbcs	r3, r4
    69d0:	2507      	movs	r5, #7
    69d2:	4303      	orrs	r3, r0
    69d4:	401d      	ands	r5, r3
    69d6:	2200      	movs	r2, #0
    69d8:	2d00      	cmp	r5, #0
    69da:	d009      	beq.n	69f0 <__aeabi_dmul+0x4c4>
    69dc:	220f      	movs	r2, #15
    69de:	2400      	movs	r4, #0
    69e0:	401a      	ands	r2, r3
    69e2:	0018      	movs	r0, r3
    69e4:	2a04      	cmp	r2, #4
    69e6:	d1d6      	bne.n	6996 <__aeabi_dmul+0x46a>
    69e8:	0003      	movs	r3, r0
    69ea:	0765      	lsls	r5, r4, #29
    69ec:	0264      	lsls	r4, r4, #9
    69ee:	0b22      	lsrs	r2, r4, #12
    69f0:	08db      	lsrs	r3, r3, #3
    69f2:	432b      	orrs	r3, r5
    69f4:	2501      	movs	r5, #1
    69f6:	4699      	mov	r9, r3
    69f8:	9b01      	ldr	r3, [sp, #4]
    69fa:	2400      	movs	r4, #0
    69fc:	401d      	ands	r5, r3
    69fe:	e5fc      	b.n	65fa <__aeabi_dmul+0xce>
    6a00:	2400      	movs	r4, #0
    6a02:	e7e2      	b.n	69ca <__aeabi_dmul+0x49e>
    6a04:	2280      	movs	r2, #128	; 0x80
    6a06:	2501      	movs	r5, #1
    6a08:	0312      	lsls	r2, r2, #12
    6a0a:	4322      	orrs	r2, r4
    6a0c:	9901      	ldr	r1, [sp, #4]
    6a0e:	0312      	lsls	r2, r2, #12
    6a10:	0b12      	lsrs	r2, r2, #12
    6a12:	400d      	ands	r5, r1
    6a14:	4699      	mov	r9, r3
    6a16:	4c04      	ldr	r4, [pc, #16]	; (6a28 <__aeabi_dmul+0x4fc>)
    6a18:	e5ef      	b.n	65fa <__aeabi_dmul+0xce>
    6a1a:	46c0      	nop			; (mov r8, r8)
    6a1c:	000003ff 	.word	0x000003ff
    6a20:	feffffff 	.word	0xfeffffff
    6a24:	000007fe 	.word	0x000007fe
    6a28:	000007ff 	.word	0x000007ff

00006a2c <__aeabi_dsub>:
    6a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    6a2e:	4646      	mov	r6, r8
    6a30:	46d6      	mov	lr, sl
    6a32:	464f      	mov	r7, r9
    6a34:	030c      	lsls	r4, r1, #12
    6a36:	b5c0      	push	{r6, r7, lr}
    6a38:	0fcd      	lsrs	r5, r1, #31
    6a3a:	004e      	lsls	r6, r1, #1
    6a3c:	0a61      	lsrs	r1, r4, #9
    6a3e:	0f44      	lsrs	r4, r0, #29
    6a40:	430c      	orrs	r4, r1
    6a42:	00c1      	lsls	r1, r0, #3
    6a44:	0058      	lsls	r0, r3, #1
    6a46:	0d40      	lsrs	r0, r0, #21
    6a48:	4684      	mov	ip, r0
    6a4a:	468a      	mov	sl, r1
    6a4c:	000f      	movs	r7, r1
    6a4e:	0319      	lsls	r1, r3, #12
    6a50:	0f50      	lsrs	r0, r2, #29
    6a52:	0a49      	lsrs	r1, r1, #9
    6a54:	4301      	orrs	r1, r0
    6a56:	48c6      	ldr	r0, [pc, #792]	; (6d70 <__aeabi_dsub+0x344>)
    6a58:	0d76      	lsrs	r6, r6, #21
    6a5a:	46a8      	mov	r8, r5
    6a5c:	0fdb      	lsrs	r3, r3, #31
    6a5e:	00d2      	lsls	r2, r2, #3
    6a60:	4584      	cmp	ip, r0
    6a62:	d100      	bne.n	6a66 <__aeabi_dsub+0x3a>
    6a64:	e0d8      	b.n	6c18 <__aeabi_dsub+0x1ec>
    6a66:	2001      	movs	r0, #1
    6a68:	4043      	eors	r3, r0
    6a6a:	42ab      	cmp	r3, r5
    6a6c:	d100      	bne.n	6a70 <__aeabi_dsub+0x44>
    6a6e:	e0a6      	b.n	6bbe <__aeabi_dsub+0x192>
    6a70:	4660      	mov	r0, ip
    6a72:	1a35      	subs	r5, r6, r0
    6a74:	2d00      	cmp	r5, #0
    6a76:	dc00      	bgt.n	6a7a <__aeabi_dsub+0x4e>
    6a78:	e105      	b.n	6c86 <__aeabi_dsub+0x25a>
    6a7a:	2800      	cmp	r0, #0
    6a7c:	d110      	bne.n	6aa0 <__aeabi_dsub+0x74>
    6a7e:	000b      	movs	r3, r1
    6a80:	4313      	orrs	r3, r2
    6a82:	d100      	bne.n	6a86 <__aeabi_dsub+0x5a>
    6a84:	e0d7      	b.n	6c36 <__aeabi_dsub+0x20a>
    6a86:	1e6b      	subs	r3, r5, #1
    6a88:	2b00      	cmp	r3, #0
    6a8a:	d000      	beq.n	6a8e <__aeabi_dsub+0x62>
    6a8c:	e14b      	b.n	6d26 <__aeabi_dsub+0x2fa>
    6a8e:	4653      	mov	r3, sl
    6a90:	1a9f      	subs	r7, r3, r2
    6a92:	45ba      	cmp	sl, r7
    6a94:	4180      	sbcs	r0, r0
    6a96:	1a64      	subs	r4, r4, r1
    6a98:	4240      	negs	r0, r0
    6a9a:	1a24      	subs	r4, r4, r0
    6a9c:	2601      	movs	r6, #1
    6a9e:	e01e      	b.n	6ade <__aeabi_dsub+0xb2>
    6aa0:	4bb3      	ldr	r3, [pc, #716]	; (6d70 <__aeabi_dsub+0x344>)
    6aa2:	429e      	cmp	r6, r3
    6aa4:	d048      	beq.n	6b38 <__aeabi_dsub+0x10c>
    6aa6:	2380      	movs	r3, #128	; 0x80
    6aa8:	041b      	lsls	r3, r3, #16
    6aaa:	4319      	orrs	r1, r3
    6aac:	2d38      	cmp	r5, #56	; 0x38
    6aae:	dd00      	ble.n	6ab2 <__aeabi_dsub+0x86>
    6ab0:	e119      	b.n	6ce6 <__aeabi_dsub+0x2ba>
    6ab2:	2d1f      	cmp	r5, #31
    6ab4:	dd00      	ble.n	6ab8 <__aeabi_dsub+0x8c>
    6ab6:	e14c      	b.n	6d52 <__aeabi_dsub+0x326>
    6ab8:	2320      	movs	r3, #32
    6aba:	000f      	movs	r7, r1
    6abc:	1b5b      	subs	r3, r3, r5
    6abe:	0010      	movs	r0, r2
    6ac0:	409a      	lsls	r2, r3
    6ac2:	409f      	lsls	r7, r3
    6ac4:	40e8      	lsrs	r0, r5
    6ac6:	1e53      	subs	r3, r2, #1
    6ac8:	419a      	sbcs	r2, r3
    6aca:	40e9      	lsrs	r1, r5
    6acc:	4307      	orrs	r7, r0
    6ace:	4317      	orrs	r7, r2
    6ad0:	4653      	mov	r3, sl
    6ad2:	1bdf      	subs	r7, r3, r7
    6ad4:	1a61      	subs	r1, r4, r1
    6ad6:	45ba      	cmp	sl, r7
    6ad8:	41a4      	sbcs	r4, r4
    6ada:	4264      	negs	r4, r4
    6adc:	1b0c      	subs	r4, r1, r4
    6ade:	0223      	lsls	r3, r4, #8
    6ae0:	d400      	bmi.n	6ae4 <__aeabi_dsub+0xb8>
    6ae2:	e0c5      	b.n	6c70 <__aeabi_dsub+0x244>
    6ae4:	0264      	lsls	r4, r4, #9
    6ae6:	0a65      	lsrs	r5, r4, #9
    6ae8:	2d00      	cmp	r5, #0
    6aea:	d100      	bne.n	6aee <__aeabi_dsub+0xc2>
    6aec:	e0f6      	b.n	6cdc <__aeabi_dsub+0x2b0>
    6aee:	0028      	movs	r0, r5
    6af0:	f000 fc28 	bl	7344 <__clzsi2>
    6af4:	0003      	movs	r3, r0
    6af6:	3b08      	subs	r3, #8
    6af8:	2b1f      	cmp	r3, #31
    6afa:	dd00      	ble.n	6afe <__aeabi_dsub+0xd2>
    6afc:	e0e9      	b.n	6cd2 <__aeabi_dsub+0x2a6>
    6afe:	2220      	movs	r2, #32
    6b00:	003c      	movs	r4, r7
    6b02:	1ad2      	subs	r2, r2, r3
    6b04:	409d      	lsls	r5, r3
    6b06:	40d4      	lsrs	r4, r2
    6b08:	409f      	lsls	r7, r3
    6b0a:	4325      	orrs	r5, r4
    6b0c:	429e      	cmp	r6, r3
    6b0e:	dd00      	ble.n	6b12 <__aeabi_dsub+0xe6>
    6b10:	e0db      	b.n	6cca <__aeabi_dsub+0x29e>
    6b12:	1b9e      	subs	r6, r3, r6
    6b14:	1c73      	adds	r3, r6, #1
    6b16:	2b1f      	cmp	r3, #31
    6b18:	dd00      	ble.n	6b1c <__aeabi_dsub+0xf0>
    6b1a:	e10a      	b.n	6d32 <__aeabi_dsub+0x306>
    6b1c:	2220      	movs	r2, #32
    6b1e:	0038      	movs	r0, r7
    6b20:	1ad2      	subs	r2, r2, r3
    6b22:	0029      	movs	r1, r5
    6b24:	4097      	lsls	r7, r2
    6b26:	002c      	movs	r4, r5
    6b28:	4091      	lsls	r1, r2
    6b2a:	40d8      	lsrs	r0, r3
    6b2c:	1e7a      	subs	r2, r7, #1
    6b2e:	4197      	sbcs	r7, r2
    6b30:	40dc      	lsrs	r4, r3
    6b32:	2600      	movs	r6, #0
    6b34:	4301      	orrs	r1, r0
    6b36:	430f      	orrs	r7, r1
    6b38:	077b      	lsls	r3, r7, #29
    6b3a:	d009      	beq.n	6b50 <__aeabi_dsub+0x124>
    6b3c:	230f      	movs	r3, #15
    6b3e:	403b      	ands	r3, r7
    6b40:	2b04      	cmp	r3, #4
    6b42:	d005      	beq.n	6b50 <__aeabi_dsub+0x124>
    6b44:	1d3b      	adds	r3, r7, #4
    6b46:	42bb      	cmp	r3, r7
    6b48:	41bf      	sbcs	r7, r7
    6b4a:	427f      	negs	r7, r7
    6b4c:	19e4      	adds	r4, r4, r7
    6b4e:	001f      	movs	r7, r3
    6b50:	0223      	lsls	r3, r4, #8
    6b52:	d525      	bpl.n	6ba0 <__aeabi_dsub+0x174>
    6b54:	4b86      	ldr	r3, [pc, #536]	; (6d70 <__aeabi_dsub+0x344>)
    6b56:	3601      	adds	r6, #1
    6b58:	429e      	cmp	r6, r3
    6b5a:	d100      	bne.n	6b5e <__aeabi_dsub+0x132>
    6b5c:	e0af      	b.n	6cbe <__aeabi_dsub+0x292>
    6b5e:	4b85      	ldr	r3, [pc, #532]	; (6d74 <__aeabi_dsub+0x348>)
    6b60:	2501      	movs	r5, #1
    6b62:	401c      	ands	r4, r3
    6b64:	4643      	mov	r3, r8
    6b66:	0762      	lsls	r2, r4, #29
    6b68:	08ff      	lsrs	r7, r7, #3
    6b6a:	0264      	lsls	r4, r4, #9
    6b6c:	0576      	lsls	r6, r6, #21
    6b6e:	4317      	orrs	r7, r2
    6b70:	0b24      	lsrs	r4, r4, #12
    6b72:	0d76      	lsrs	r6, r6, #21
    6b74:	401d      	ands	r5, r3
    6b76:	2100      	movs	r1, #0
    6b78:	0324      	lsls	r4, r4, #12
    6b7a:	0b23      	lsrs	r3, r4, #12
    6b7c:	0d0c      	lsrs	r4, r1, #20
    6b7e:	4a7e      	ldr	r2, [pc, #504]	; (6d78 <__aeabi_dsub+0x34c>)
    6b80:	0524      	lsls	r4, r4, #20
    6b82:	431c      	orrs	r4, r3
    6b84:	4014      	ands	r4, r2
    6b86:	0533      	lsls	r3, r6, #20
    6b88:	4323      	orrs	r3, r4
    6b8a:	005b      	lsls	r3, r3, #1
    6b8c:	07ed      	lsls	r5, r5, #31
    6b8e:	085b      	lsrs	r3, r3, #1
    6b90:	432b      	orrs	r3, r5
    6b92:	0038      	movs	r0, r7
    6b94:	0019      	movs	r1, r3
    6b96:	bc1c      	pop	{r2, r3, r4}
    6b98:	4690      	mov	r8, r2
    6b9a:	4699      	mov	r9, r3
    6b9c:	46a2      	mov	sl, r4
    6b9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6ba0:	2501      	movs	r5, #1
    6ba2:	4643      	mov	r3, r8
    6ba4:	0762      	lsls	r2, r4, #29
    6ba6:	08ff      	lsrs	r7, r7, #3
    6ba8:	4317      	orrs	r7, r2
    6baa:	08e4      	lsrs	r4, r4, #3
    6bac:	401d      	ands	r5, r3
    6bae:	4b70      	ldr	r3, [pc, #448]	; (6d70 <__aeabi_dsub+0x344>)
    6bb0:	429e      	cmp	r6, r3
    6bb2:	d036      	beq.n	6c22 <__aeabi_dsub+0x1f6>
    6bb4:	0324      	lsls	r4, r4, #12
    6bb6:	0576      	lsls	r6, r6, #21
    6bb8:	0b24      	lsrs	r4, r4, #12
    6bba:	0d76      	lsrs	r6, r6, #21
    6bbc:	e7db      	b.n	6b76 <__aeabi_dsub+0x14a>
    6bbe:	4663      	mov	r3, ip
    6bc0:	1af3      	subs	r3, r6, r3
    6bc2:	2b00      	cmp	r3, #0
    6bc4:	dc00      	bgt.n	6bc8 <__aeabi_dsub+0x19c>
    6bc6:	e094      	b.n	6cf2 <__aeabi_dsub+0x2c6>
    6bc8:	4660      	mov	r0, ip
    6bca:	2800      	cmp	r0, #0
    6bcc:	d035      	beq.n	6c3a <__aeabi_dsub+0x20e>
    6bce:	4868      	ldr	r0, [pc, #416]	; (6d70 <__aeabi_dsub+0x344>)
    6bd0:	4286      	cmp	r6, r0
    6bd2:	d0b1      	beq.n	6b38 <__aeabi_dsub+0x10c>
    6bd4:	2780      	movs	r7, #128	; 0x80
    6bd6:	043f      	lsls	r7, r7, #16
    6bd8:	4339      	orrs	r1, r7
    6bda:	2b38      	cmp	r3, #56	; 0x38
    6bdc:	dc00      	bgt.n	6be0 <__aeabi_dsub+0x1b4>
    6bde:	e0fd      	b.n	6ddc <__aeabi_dsub+0x3b0>
    6be0:	430a      	orrs	r2, r1
    6be2:	0017      	movs	r7, r2
    6be4:	2100      	movs	r1, #0
    6be6:	1e7a      	subs	r2, r7, #1
    6be8:	4197      	sbcs	r7, r2
    6bea:	4457      	add	r7, sl
    6bec:	4557      	cmp	r7, sl
    6bee:	4180      	sbcs	r0, r0
    6bf0:	1909      	adds	r1, r1, r4
    6bf2:	4244      	negs	r4, r0
    6bf4:	190c      	adds	r4, r1, r4
    6bf6:	0223      	lsls	r3, r4, #8
    6bf8:	d53a      	bpl.n	6c70 <__aeabi_dsub+0x244>
    6bfa:	4b5d      	ldr	r3, [pc, #372]	; (6d70 <__aeabi_dsub+0x344>)
    6bfc:	3601      	adds	r6, #1
    6bfe:	429e      	cmp	r6, r3
    6c00:	d100      	bne.n	6c04 <__aeabi_dsub+0x1d8>
    6c02:	e14b      	b.n	6e9c <__aeabi_dsub+0x470>
    6c04:	2201      	movs	r2, #1
    6c06:	4b5b      	ldr	r3, [pc, #364]	; (6d74 <__aeabi_dsub+0x348>)
    6c08:	401c      	ands	r4, r3
    6c0a:	087b      	lsrs	r3, r7, #1
    6c0c:	4017      	ands	r7, r2
    6c0e:	431f      	orrs	r7, r3
    6c10:	07e2      	lsls	r2, r4, #31
    6c12:	4317      	orrs	r7, r2
    6c14:	0864      	lsrs	r4, r4, #1
    6c16:	e78f      	b.n	6b38 <__aeabi_dsub+0x10c>
    6c18:	0008      	movs	r0, r1
    6c1a:	4310      	orrs	r0, r2
    6c1c:	d000      	beq.n	6c20 <__aeabi_dsub+0x1f4>
    6c1e:	e724      	b.n	6a6a <__aeabi_dsub+0x3e>
    6c20:	e721      	b.n	6a66 <__aeabi_dsub+0x3a>
    6c22:	0023      	movs	r3, r4
    6c24:	433b      	orrs	r3, r7
    6c26:	d100      	bne.n	6c2a <__aeabi_dsub+0x1fe>
    6c28:	e1b9      	b.n	6f9e <__aeabi_dsub+0x572>
    6c2a:	2280      	movs	r2, #128	; 0x80
    6c2c:	0312      	lsls	r2, r2, #12
    6c2e:	4314      	orrs	r4, r2
    6c30:	0324      	lsls	r4, r4, #12
    6c32:	0b24      	lsrs	r4, r4, #12
    6c34:	e79f      	b.n	6b76 <__aeabi_dsub+0x14a>
    6c36:	002e      	movs	r6, r5
    6c38:	e77e      	b.n	6b38 <__aeabi_dsub+0x10c>
    6c3a:	0008      	movs	r0, r1
    6c3c:	4310      	orrs	r0, r2
    6c3e:	d100      	bne.n	6c42 <__aeabi_dsub+0x216>
    6c40:	e0ca      	b.n	6dd8 <__aeabi_dsub+0x3ac>
    6c42:	1e58      	subs	r0, r3, #1
    6c44:	4684      	mov	ip, r0
    6c46:	2800      	cmp	r0, #0
    6c48:	d000      	beq.n	6c4c <__aeabi_dsub+0x220>
    6c4a:	e0e7      	b.n	6e1c <__aeabi_dsub+0x3f0>
    6c4c:	4452      	add	r2, sl
    6c4e:	4552      	cmp	r2, sl
    6c50:	4180      	sbcs	r0, r0
    6c52:	1864      	adds	r4, r4, r1
    6c54:	4240      	negs	r0, r0
    6c56:	1824      	adds	r4, r4, r0
    6c58:	0017      	movs	r7, r2
    6c5a:	2601      	movs	r6, #1
    6c5c:	0223      	lsls	r3, r4, #8
    6c5e:	d507      	bpl.n	6c70 <__aeabi_dsub+0x244>
    6c60:	2602      	movs	r6, #2
    6c62:	e7cf      	b.n	6c04 <__aeabi_dsub+0x1d8>
    6c64:	4664      	mov	r4, ip
    6c66:	432c      	orrs	r4, r5
    6c68:	d100      	bne.n	6c6c <__aeabi_dsub+0x240>
    6c6a:	e1b3      	b.n	6fd4 <__aeabi_dsub+0x5a8>
    6c6c:	002c      	movs	r4, r5
    6c6e:	4667      	mov	r7, ip
    6c70:	077b      	lsls	r3, r7, #29
    6c72:	d000      	beq.n	6c76 <__aeabi_dsub+0x24a>
    6c74:	e762      	b.n	6b3c <__aeabi_dsub+0x110>
    6c76:	0763      	lsls	r3, r4, #29
    6c78:	08ff      	lsrs	r7, r7, #3
    6c7a:	431f      	orrs	r7, r3
    6c7c:	2501      	movs	r5, #1
    6c7e:	4643      	mov	r3, r8
    6c80:	08e4      	lsrs	r4, r4, #3
    6c82:	401d      	ands	r5, r3
    6c84:	e793      	b.n	6bae <__aeabi_dsub+0x182>
    6c86:	2d00      	cmp	r5, #0
    6c88:	d178      	bne.n	6d7c <__aeabi_dsub+0x350>
    6c8a:	1c75      	adds	r5, r6, #1
    6c8c:	056d      	lsls	r5, r5, #21
    6c8e:	0d6d      	lsrs	r5, r5, #21
    6c90:	2d01      	cmp	r5, #1
    6c92:	dc00      	bgt.n	6c96 <__aeabi_dsub+0x26a>
    6c94:	e0f2      	b.n	6e7c <__aeabi_dsub+0x450>
    6c96:	4650      	mov	r0, sl
    6c98:	1a80      	subs	r0, r0, r2
    6c9a:	4582      	cmp	sl, r0
    6c9c:	41bf      	sbcs	r7, r7
    6c9e:	1a65      	subs	r5, r4, r1
    6ca0:	427f      	negs	r7, r7
    6ca2:	1bed      	subs	r5, r5, r7
    6ca4:	4684      	mov	ip, r0
    6ca6:	0228      	lsls	r0, r5, #8
    6ca8:	d400      	bmi.n	6cac <__aeabi_dsub+0x280>
    6caa:	e08c      	b.n	6dc6 <__aeabi_dsub+0x39a>
    6cac:	4650      	mov	r0, sl
    6cae:	1a17      	subs	r7, r2, r0
    6cb0:	42ba      	cmp	r2, r7
    6cb2:	4192      	sbcs	r2, r2
    6cb4:	1b0c      	subs	r4, r1, r4
    6cb6:	4255      	negs	r5, r2
    6cb8:	1b65      	subs	r5, r4, r5
    6cba:	4698      	mov	r8, r3
    6cbc:	e714      	b.n	6ae8 <__aeabi_dsub+0xbc>
    6cbe:	2501      	movs	r5, #1
    6cc0:	4643      	mov	r3, r8
    6cc2:	2400      	movs	r4, #0
    6cc4:	401d      	ands	r5, r3
    6cc6:	2700      	movs	r7, #0
    6cc8:	e755      	b.n	6b76 <__aeabi_dsub+0x14a>
    6cca:	4c2a      	ldr	r4, [pc, #168]	; (6d74 <__aeabi_dsub+0x348>)
    6ccc:	1af6      	subs	r6, r6, r3
    6cce:	402c      	ands	r4, r5
    6cd0:	e732      	b.n	6b38 <__aeabi_dsub+0x10c>
    6cd2:	003d      	movs	r5, r7
    6cd4:	3828      	subs	r0, #40	; 0x28
    6cd6:	4085      	lsls	r5, r0
    6cd8:	2700      	movs	r7, #0
    6cda:	e717      	b.n	6b0c <__aeabi_dsub+0xe0>
    6cdc:	0038      	movs	r0, r7
    6cde:	f000 fb31 	bl	7344 <__clzsi2>
    6ce2:	3020      	adds	r0, #32
    6ce4:	e706      	b.n	6af4 <__aeabi_dsub+0xc8>
    6ce6:	430a      	orrs	r2, r1
    6ce8:	0017      	movs	r7, r2
    6cea:	2100      	movs	r1, #0
    6cec:	1e7a      	subs	r2, r7, #1
    6cee:	4197      	sbcs	r7, r2
    6cf0:	e6ee      	b.n	6ad0 <__aeabi_dsub+0xa4>
    6cf2:	2b00      	cmp	r3, #0
    6cf4:	d000      	beq.n	6cf8 <__aeabi_dsub+0x2cc>
    6cf6:	e0e5      	b.n	6ec4 <__aeabi_dsub+0x498>
    6cf8:	1c73      	adds	r3, r6, #1
    6cfa:	469c      	mov	ip, r3
    6cfc:	055b      	lsls	r3, r3, #21
    6cfe:	0d5b      	lsrs	r3, r3, #21
    6d00:	2b01      	cmp	r3, #1
    6d02:	dc00      	bgt.n	6d06 <__aeabi_dsub+0x2da>
    6d04:	e09f      	b.n	6e46 <__aeabi_dsub+0x41a>
    6d06:	4b1a      	ldr	r3, [pc, #104]	; (6d70 <__aeabi_dsub+0x344>)
    6d08:	459c      	cmp	ip, r3
    6d0a:	d100      	bne.n	6d0e <__aeabi_dsub+0x2e2>
    6d0c:	e0c5      	b.n	6e9a <__aeabi_dsub+0x46e>
    6d0e:	4452      	add	r2, sl
    6d10:	4552      	cmp	r2, sl
    6d12:	4180      	sbcs	r0, r0
    6d14:	1864      	adds	r4, r4, r1
    6d16:	4240      	negs	r0, r0
    6d18:	1824      	adds	r4, r4, r0
    6d1a:	07e7      	lsls	r7, r4, #31
    6d1c:	0852      	lsrs	r2, r2, #1
    6d1e:	4317      	orrs	r7, r2
    6d20:	0864      	lsrs	r4, r4, #1
    6d22:	4666      	mov	r6, ip
    6d24:	e708      	b.n	6b38 <__aeabi_dsub+0x10c>
    6d26:	4812      	ldr	r0, [pc, #72]	; (6d70 <__aeabi_dsub+0x344>)
    6d28:	4285      	cmp	r5, r0
    6d2a:	d100      	bne.n	6d2e <__aeabi_dsub+0x302>
    6d2c:	e085      	b.n	6e3a <__aeabi_dsub+0x40e>
    6d2e:	001d      	movs	r5, r3
    6d30:	e6bc      	b.n	6aac <__aeabi_dsub+0x80>
    6d32:	0029      	movs	r1, r5
    6d34:	3e1f      	subs	r6, #31
    6d36:	40f1      	lsrs	r1, r6
    6d38:	2b20      	cmp	r3, #32
    6d3a:	d100      	bne.n	6d3e <__aeabi_dsub+0x312>
    6d3c:	e07f      	b.n	6e3e <__aeabi_dsub+0x412>
    6d3e:	2240      	movs	r2, #64	; 0x40
    6d40:	1ad3      	subs	r3, r2, r3
    6d42:	409d      	lsls	r5, r3
    6d44:	432f      	orrs	r7, r5
    6d46:	1e7d      	subs	r5, r7, #1
    6d48:	41af      	sbcs	r7, r5
    6d4a:	2400      	movs	r4, #0
    6d4c:	430f      	orrs	r7, r1
    6d4e:	2600      	movs	r6, #0
    6d50:	e78e      	b.n	6c70 <__aeabi_dsub+0x244>
    6d52:	002b      	movs	r3, r5
    6d54:	000f      	movs	r7, r1
    6d56:	3b20      	subs	r3, #32
    6d58:	40df      	lsrs	r7, r3
    6d5a:	2d20      	cmp	r5, #32
    6d5c:	d071      	beq.n	6e42 <__aeabi_dsub+0x416>
    6d5e:	2340      	movs	r3, #64	; 0x40
    6d60:	1b5d      	subs	r5, r3, r5
    6d62:	40a9      	lsls	r1, r5
    6d64:	430a      	orrs	r2, r1
    6d66:	1e51      	subs	r1, r2, #1
    6d68:	418a      	sbcs	r2, r1
    6d6a:	2100      	movs	r1, #0
    6d6c:	4317      	orrs	r7, r2
    6d6e:	e6af      	b.n	6ad0 <__aeabi_dsub+0xa4>
    6d70:	000007ff 	.word	0x000007ff
    6d74:	ff7fffff 	.word	0xff7fffff
    6d78:	800fffff 	.word	0x800fffff
    6d7c:	2e00      	cmp	r6, #0
    6d7e:	d03e      	beq.n	6dfe <__aeabi_dsub+0x3d2>
    6d80:	4eb3      	ldr	r6, [pc, #716]	; (7050 <__aeabi_dsub+0x624>)
    6d82:	45b4      	cmp	ip, r6
    6d84:	d045      	beq.n	6e12 <__aeabi_dsub+0x3e6>
    6d86:	2680      	movs	r6, #128	; 0x80
    6d88:	0436      	lsls	r6, r6, #16
    6d8a:	426d      	negs	r5, r5
    6d8c:	4334      	orrs	r4, r6
    6d8e:	2d38      	cmp	r5, #56	; 0x38
    6d90:	dd00      	ble.n	6d94 <__aeabi_dsub+0x368>
    6d92:	e0a8      	b.n	6ee6 <__aeabi_dsub+0x4ba>
    6d94:	2d1f      	cmp	r5, #31
    6d96:	dd00      	ble.n	6d9a <__aeabi_dsub+0x36e>
    6d98:	e11f      	b.n	6fda <__aeabi_dsub+0x5ae>
    6d9a:	2620      	movs	r6, #32
    6d9c:	0027      	movs	r7, r4
    6d9e:	4650      	mov	r0, sl
    6da0:	1b76      	subs	r6, r6, r5
    6da2:	40b7      	lsls	r7, r6
    6da4:	40e8      	lsrs	r0, r5
    6da6:	4307      	orrs	r7, r0
    6da8:	4650      	mov	r0, sl
    6daa:	40b0      	lsls	r0, r6
    6dac:	1e46      	subs	r6, r0, #1
    6dae:	41b0      	sbcs	r0, r6
    6db0:	40ec      	lsrs	r4, r5
    6db2:	4338      	orrs	r0, r7
    6db4:	1a17      	subs	r7, r2, r0
    6db6:	42ba      	cmp	r2, r7
    6db8:	4192      	sbcs	r2, r2
    6dba:	1b0c      	subs	r4, r1, r4
    6dbc:	4252      	negs	r2, r2
    6dbe:	1aa4      	subs	r4, r4, r2
    6dc0:	4666      	mov	r6, ip
    6dc2:	4698      	mov	r8, r3
    6dc4:	e68b      	b.n	6ade <__aeabi_dsub+0xb2>
    6dc6:	4664      	mov	r4, ip
    6dc8:	4667      	mov	r7, ip
    6dca:	432c      	orrs	r4, r5
    6dcc:	d000      	beq.n	6dd0 <__aeabi_dsub+0x3a4>
    6dce:	e68b      	b.n	6ae8 <__aeabi_dsub+0xbc>
    6dd0:	2500      	movs	r5, #0
    6dd2:	2600      	movs	r6, #0
    6dd4:	2700      	movs	r7, #0
    6dd6:	e6ea      	b.n	6bae <__aeabi_dsub+0x182>
    6dd8:	001e      	movs	r6, r3
    6dda:	e6ad      	b.n	6b38 <__aeabi_dsub+0x10c>
    6ddc:	2b1f      	cmp	r3, #31
    6dde:	dc60      	bgt.n	6ea2 <__aeabi_dsub+0x476>
    6de0:	2720      	movs	r7, #32
    6de2:	1af8      	subs	r0, r7, r3
    6de4:	000f      	movs	r7, r1
    6de6:	4684      	mov	ip, r0
    6de8:	4087      	lsls	r7, r0
    6dea:	0010      	movs	r0, r2
    6dec:	40d8      	lsrs	r0, r3
    6dee:	4307      	orrs	r7, r0
    6df0:	4660      	mov	r0, ip
    6df2:	4082      	lsls	r2, r0
    6df4:	1e50      	subs	r0, r2, #1
    6df6:	4182      	sbcs	r2, r0
    6df8:	40d9      	lsrs	r1, r3
    6dfa:	4317      	orrs	r7, r2
    6dfc:	e6f5      	b.n	6bea <__aeabi_dsub+0x1be>
    6dfe:	0026      	movs	r6, r4
    6e00:	4650      	mov	r0, sl
    6e02:	4306      	orrs	r6, r0
    6e04:	d005      	beq.n	6e12 <__aeabi_dsub+0x3e6>
    6e06:	43ed      	mvns	r5, r5
    6e08:	2d00      	cmp	r5, #0
    6e0a:	d0d3      	beq.n	6db4 <__aeabi_dsub+0x388>
    6e0c:	4e90      	ldr	r6, [pc, #576]	; (7050 <__aeabi_dsub+0x624>)
    6e0e:	45b4      	cmp	ip, r6
    6e10:	d1bd      	bne.n	6d8e <__aeabi_dsub+0x362>
    6e12:	000c      	movs	r4, r1
    6e14:	0017      	movs	r7, r2
    6e16:	4666      	mov	r6, ip
    6e18:	4698      	mov	r8, r3
    6e1a:	e68d      	b.n	6b38 <__aeabi_dsub+0x10c>
    6e1c:	488c      	ldr	r0, [pc, #560]	; (7050 <__aeabi_dsub+0x624>)
    6e1e:	4283      	cmp	r3, r0
    6e20:	d00b      	beq.n	6e3a <__aeabi_dsub+0x40e>
    6e22:	4663      	mov	r3, ip
    6e24:	e6d9      	b.n	6bda <__aeabi_dsub+0x1ae>
    6e26:	2d00      	cmp	r5, #0
    6e28:	d000      	beq.n	6e2c <__aeabi_dsub+0x400>
    6e2a:	e096      	b.n	6f5a <__aeabi_dsub+0x52e>
    6e2c:	0008      	movs	r0, r1
    6e2e:	4310      	orrs	r0, r2
    6e30:	d100      	bne.n	6e34 <__aeabi_dsub+0x408>
    6e32:	e0e2      	b.n	6ffa <__aeabi_dsub+0x5ce>
    6e34:	000c      	movs	r4, r1
    6e36:	0017      	movs	r7, r2
    6e38:	4698      	mov	r8, r3
    6e3a:	4e85      	ldr	r6, [pc, #532]	; (7050 <__aeabi_dsub+0x624>)
    6e3c:	e67c      	b.n	6b38 <__aeabi_dsub+0x10c>
    6e3e:	2500      	movs	r5, #0
    6e40:	e780      	b.n	6d44 <__aeabi_dsub+0x318>
    6e42:	2100      	movs	r1, #0
    6e44:	e78e      	b.n	6d64 <__aeabi_dsub+0x338>
    6e46:	0023      	movs	r3, r4
    6e48:	4650      	mov	r0, sl
    6e4a:	4303      	orrs	r3, r0
    6e4c:	2e00      	cmp	r6, #0
    6e4e:	d000      	beq.n	6e52 <__aeabi_dsub+0x426>
    6e50:	e0a8      	b.n	6fa4 <__aeabi_dsub+0x578>
    6e52:	2b00      	cmp	r3, #0
    6e54:	d100      	bne.n	6e58 <__aeabi_dsub+0x42c>
    6e56:	e0de      	b.n	7016 <__aeabi_dsub+0x5ea>
    6e58:	000b      	movs	r3, r1
    6e5a:	4313      	orrs	r3, r2
    6e5c:	d100      	bne.n	6e60 <__aeabi_dsub+0x434>
    6e5e:	e66b      	b.n	6b38 <__aeabi_dsub+0x10c>
    6e60:	4452      	add	r2, sl
    6e62:	4552      	cmp	r2, sl
    6e64:	4180      	sbcs	r0, r0
    6e66:	1864      	adds	r4, r4, r1
    6e68:	4240      	negs	r0, r0
    6e6a:	1824      	adds	r4, r4, r0
    6e6c:	0017      	movs	r7, r2
    6e6e:	0223      	lsls	r3, r4, #8
    6e70:	d400      	bmi.n	6e74 <__aeabi_dsub+0x448>
    6e72:	e6fd      	b.n	6c70 <__aeabi_dsub+0x244>
    6e74:	4b77      	ldr	r3, [pc, #476]	; (7054 <__aeabi_dsub+0x628>)
    6e76:	4666      	mov	r6, ip
    6e78:	401c      	ands	r4, r3
    6e7a:	e65d      	b.n	6b38 <__aeabi_dsub+0x10c>
    6e7c:	0025      	movs	r5, r4
    6e7e:	4650      	mov	r0, sl
    6e80:	4305      	orrs	r5, r0
    6e82:	2e00      	cmp	r6, #0
    6e84:	d1cf      	bne.n	6e26 <__aeabi_dsub+0x3fa>
    6e86:	2d00      	cmp	r5, #0
    6e88:	d14f      	bne.n	6f2a <__aeabi_dsub+0x4fe>
    6e8a:	000c      	movs	r4, r1
    6e8c:	4314      	orrs	r4, r2
    6e8e:	d100      	bne.n	6e92 <__aeabi_dsub+0x466>
    6e90:	e0a0      	b.n	6fd4 <__aeabi_dsub+0x5a8>
    6e92:	000c      	movs	r4, r1
    6e94:	0017      	movs	r7, r2
    6e96:	4698      	mov	r8, r3
    6e98:	e64e      	b.n	6b38 <__aeabi_dsub+0x10c>
    6e9a:	4666      	mov	r6, ip
    6e9c:	2400      	movs	r4, #0
    6e9e:	2700      	movs	r7, #0
    6ea0:	e685      	b.n	6bae <__aeabi_dsub+0x182>
    6ea2:	001f      	movs	r7, r3
    6ea4:	0008      	movs	r0, r1
    6ea6:	3f20      	subs	r7, #32
    6ea8:	40f8      	lsrs	r0, r7
    6eaa:	0007      	movs	r7, r0
    6eac:	2b20      	cmp	r3, #32
    6eae:	d100      	bne.n	6eb2 <__aeabi_dsub+0x486>
    6eb0:	e08e      	b.n	6fd0 <__aeabi_dsub+0x5a4>
    6eb2:	2040      	movs	r0, #64	; 0x40
    6eb4:	1ac3      	subs	r3, r0, r3
    6eb6:	4099      	lsls	r1, r3
    6eb8:	430a      	orrs	r2, r1
    6eba:	1e51      	subs	r1, r2, #1
    6ebc:	418a      	sbcs	r2, r1
    6ebe:	2100      	movs	r1, #0
    6ec0:	4317      	orrs	r7, r2
    6ec2:	e692      	b.n	6bea <__aeabi_dsub+0x1be>
    6ec4:	2e00      	cmp	r6, #0
    6ec6:	d114      	bne.n	6ef2 <__aeabi_dsub+0x4c6>
    6ec8:	0026      	movs	r6, r4
    6eca:	4650      	mov	r0, sl
    6ecc:	4306      	orrs	r6, r0
    6ece:	d062      	beq.n	6f96 <__aeabi_dsub+0x56a>
    6ed0:	43db      	mvns	r3, r3
    6ed2:	2b00      	cmp	r3, #0
    6ed4:	d15c      	bne.n	6f90 <__aeabi_dsub+0x564>
    6ed6:	1887      	adds	r7, r0, r2
    6ed8:	4297      	cmp	r7, r2
    6eda:	4192      	sbcs	r2, r2
    6edc:	1864      	adds	r4, r4, r1
    6ede:	4252      	negs	r2, r2
    6ee0:	18a4      	adds	r4, r4, r2
    6ee2:	4666      	mov	r6, ip
    6ee4:	e687      	b.n	6bf6 <__aeabi_dsub+0x1ca>
    6ee6:	4650      	mov	r0, sl
    6ee8:	4320      	orrs	r0, r4
    6eea:	1e44      	subs	r4, r0, #1
    6eec:	41a0      	sbcs	r0, r4
    6eee:	2400      	movs	r4, #0
    6ef0:	e760      	b.n	6db4 <__aeabi_dsub+0x388>
    6ef2:	4e57      	ldr	r6, [pc, #348]	; (7050 <__aeabi_dsub+0x624>)
    6ef4:	45b4      	cmp	ip, r6
    6ef6:	d04e      	beq.n	6f96 <__aeabi_dsub+0x56a>
    6ef8:	2680      	movs	r6, #128	; 0x80
    6efa:	0436      	lsls	r6, r6, #16
    6efc:	425b      	negs	r3, r3
    6efe:	4334      	orrs	r4, r6
    6f00:	2b38      	cmp	r3, #56	; 0x38
    6f02:	dd00      	ble.n	6f06 <__aeabi_dsub+0x4da>
    6f04:	e07f      	b.n	7006 <__aeabi_dsub+0x5da>
    6f06:	2b1f      	cmp	r3, #31
    6f08:	dd00      	ble.n	6f0c <__aeabi_dsub+0x4e0>
    6f0a:	e08b      	b.n	7024 <__aeabi_dsub+0x5f8>
    6f0c:	2620      	movs	r6, #32
    6f0e:	0027      	movs	r7, r4
    6f10:	4650      	mov	r0, sl
    6f12:	1af6      	subs	r6, r6, r3
    6f14:	40b7      	lsls	r7, r6
    6f16:	40d8      	lsrs	r0, r3
    6f18:	4307      	orrs	r7, r0
    6f1a:	4650      	mov	r0, sl
    6f1c:	40b0      	lsls	r0, r6
    6f1e:	1e46      	subs	r6, r0, #1
    6f20:	41b0      	sbcs	r0, r6
    6f22:	4307      	orrs	r7, r0
    6f24:	40dc      	lsrs	r4, r3
    6f26:	18bf      	adds	r7, r7, r2
    6f28:	e7d6      	b.n	6ed8 <__aeabi_dsub+0x4ac>
    6f2a:	000d      	movs	r5, r1
    6f2c:	4315      	orrs	r5, r2
    6f2e:	d100      	bne.n	6f32 <__aeabi_dsub+0x506>
    6f30:	e602      	b.n	6b38 <__aeabi_dsub+0x10c>
    6f32:	4650      	mov	r0, sl
    6f34:	1a80      	subs	r0, r0, r2
    6f36:	4582      	cmp	sl, r0
    6f38:	41bf      	sbcs	r7, r7
    6f3a:	1a65      	subs	r5, r4, r1
    6f3c:	427f      	negs	r7, r7
    6f3e:	1bed      	subs	r5, r5, r7
    6f40:	4684      	mov	ip, r0
    6f42:	0228      	lsls	r0, r5, #8
    6f44:	d400      	bmi.n	6f48 <__aeabi_dsub+0x51c>
    6f46:	e68d      	b.n	6c64 <__aeabi_dsub+0x238>
    6f48:	4650      	mov	r0, sl
    6f4a:	1a17      	subs	r7, r2, r0
    6f4c:	42ba      	cmp	r2, r7
    6f4e:	4192      	sbcs	r2, r2
    6f50:	1b0c      	subs	r4, r1, r4
    6f52:	4252      	negs	r2, r2
    6f54:	1aa4      	subs	r4, r4, r2
    6f56:	4698      	mov	r8, r3
    6f58:	e5ee      	b.n	6b38 <__aeabi_dsub+0x10c>
    6f5a:	000d      	movs	r5, r1
    6f5c:	4315      	orrs	r5, r2
    6f5e:	d100      	bne.n	6f62 <__aeabi_dsub+0x536>
    6f60:	e76b      	b.n	6e3a <__aeabi_dsub+0x40e>
    6f62:	4650      	mov	r0, sl
    6f64:	0767      	lsls	r7, r4, #29
    6f66:	08c0      	lsrs	r0, r0, #3
    6f68:	4307      	orrs	r7, r0
    6f6a:	2080      	movs	r0, #128	; 0x80
    6f6c:	08e4      	lsrs	r4, r4, #3
    6f6e:	0300      	lsls	r0, r0, #12
    6f70:	4204      	tst	r4, r0
    6f72:	d007      	beq.n	6f84 <__aeabi_dsub+0x558>
    6f74:	08cd      	lsrs	r5, r1, #3
    6f76:	4205      	tst	r5, r0
    6f78:	d104      	bne.n	6f84 <__aeabi_dsub+0x558>
    6f7a:	002c      	movs	r4, r5
    6f7c:	4698      	mov	r8, r3
    6f7e:	08d7      	lsrs	r7, r2, #3
    6f80:	0749      	lsls	r1, r1, #29
    6f82:	430f      	orrs	r7, r1
    6f84:	0f7b      	lsrs	r3, r7, #29
    6f86:	00e4      	lsls	r4, r4, #3
    6f88:	431c      	orrs	r4, r3
    6f8a:	00ff      	lsls	r7, r7, #3
    6f8c:	4e30      	ldr	r6, [pc, #192]	; (7050 <__aeabi_dsub+0x624>)
    6f8e:	e5d3      	b.n	6b38 <__aeabi_dsub+0x10c>
    6f90:	4e2f      	ldr	r6, [pc, #188]	; (7050 <__aeabi_dsub+0x624>)
    6f92:	45b4      	cmp	ip, r6
    6f94:	d1b4      	bne.n	6f00 <__aeabi_dsub+0x4d4>
    6f96:	000c      	movs	r4, r1
    6f98:	0017      	movs	r7, r2
    6f9a:	4666      	mov	r6, ip
    6f9c:	e5cc      	b.n	6b38 <__aeabi_dsub+0x10c>
    6f9e:	2700      	movs	r7, #0
    6fa0:	2400      	movs	r4, #0
    6fa2:	e5e8      	b.n	6b76 <__aeabi_dsub+0x14a>
    6fa4:	2b00      	cmp	r3, #0
    6fa6:	d039      	beq.n	701c <__aeabi_dsub+0x5f0>
    6fa8:	000b      	movs	r3, r1
    6faa:	4313      	orrs	r3, r2
    6fac:	d100      	bne.n	6fb0 <__aeabi_dsub+0x584>
    6fae:	e744      	b.n	6e3a <__aeabi_dsub+0x40e>
    6fb0:	08c0      	lsrs	r0, r0, #3
    6fb2:	0767      	lsls	r7, r4, #29
    6fb4:	4307      	orrs	r7, r0
    6fb6:	2080      	movs	r0, #128	; 0x80
    6fb8:	08e4      	lsrs	r4, r4, #3
    6fba:	0300      	lsls	r0, r0, #12
    6fbc:	4204      	tst	r4, r0
    6fbe:	d0e1      	beq.n	6f84 <__aeabi_dsub+0x558>
    6fc0:	08cb      	lsrs	r3, r1, #3
    6fc2:	4203      	tst	r3, r0
    6fc4:	d1de      	bne.n	6f84 <__aeabi_dsub+0x558>
    6fc6:	08d7      	lsrs	r7, r2, #3
    6fc8:	0749      	lsls	r1, r1, #29
    6fca:	430f      	orrs	r7, r1
    6fcc:	001c      	movs	r4, r3
    6fce:	e7d9      	b.n	6f84 <__aeabi_dsub+0x558>
    6fd0:	2100      	movs	r1, #0
    6fd2:	e771      	b.n	6eb8 <__aeabi_dsub+0x48c>
    6fd4:	2500      	movs	r5, #0
    6fd6:	2700      	movs	r7, #0
    6fd8:	e5e9      	b.n	6bae <__aeabi_dsub+0x182>
    6fda:	002e      	movs	r6, r5
    6fdc:	0027      	movs	r7, r4
    6fde:	3e20      	subs	r6, #32
    6fe0:	40f7      	lsrs	r7, r6
    6fe2:	2d20      	cmp	r5, #32
    6fe4:	d02f      	beq.n	7046 <__aeabi_dsub+0x61a>
    6fe6:	2640      	movs	r6, #64	; 0x40
    6fe8:	1b75      	subs	r5, r6, r5
    6fea:	40ac      	lsls	r4, r5
    6fec:	4650      	mov	r0, sl
    6fee:	4320      	orrs	r0, r4
    6ff0:	1e44      	subs	r4, r0, #1
    6ff2:	41a0      	sbcs	r0, r4
    6ff4:	2400      	movs	r4, #0
    6ff6:	4338      	orrs	r0, r7
    6ff8:	e6dc      	b.n	6db4 <__aeabi_dsub+0x388>
    6ffa:	2480      	movs	r4, #128	; 0x80
    6ffc:	2500      	movs	r5, #0
    6ffe:	0324      	lsls	r4, r4, #12
    7000:	4e13      	ldr	r6, [pc, #76]	; (7050 <__aeabi_dsub+0x624>)
    7002:	2700      	movs	r7, #0
    7004:	e5d3      	b.n	6bae <__aeabi_dsub+0x182>
    7006:	4650      	mov	r0, sl
    7008:	4320      	orrs	r0, r4
    700a:	0007      	movs	r7, r0
    700c:	1e78      	subs	r0, r7, #1
    700e:	4187      	sbcs	r7, r0
    7010:	2400      	movs	r4, #0
    7012:	18bf      	adds	r7, r7, r2
    7014:	e760      	b.n	6ed8 <__aeabi_dsub+0x4ac>
    7016:	000c      	movs	r4, r1
    7018:	0017      	movs	r7, r2
    701a:	e58d      	b.n	6b38 <__aeabi_dsub+0x10c>
    701c:	000c      	movs	r4, r1
    701e:	0017      	movs	r7, r2
    7020:	4e0b      	ldr	r6, [pc, #44]	; (7050 <__aeabi_dsub+0x624>)
    7022:	e589      	b.n	6b38 <__aeabi_dsub+0x10c>
    7024:	001e      	movs	r6, r3
    7026:	0027      	movs	r7, r4
    7028:	3e20      	subs	r6, #32
    702a:	40f7      	lsrs	r7, r6
    702c:	2b20      	cmp	r3, #32
    702e:	d00c      	beq.n	704a <__aeabi_dsub+0x61e>
    7030:	2640      	movs	r6, #64	; 0x40
    7032:	1af3      	subs	r3, r6, r3
    7034:	409c      	lsls	r4, r3
    7036:	4650      	mov	r0, sl
    7038:	4320      	orrs	r0, r4
    703a:	1e44      	subs	r4, r0, #1
    703c:	41a0      	sbcs	r0, r4
    703e:	4307      	orrs	r7, r0
    7040:	2400      	movs	r4, #0
    7042:	18bf      	adds	r7, r7, r2
    7044:	e748      	b.n	6ed8 <__aeabi_dsub+0x4ac>
    7046:	2400      	movs	r4, #0
    7048:	e7d0      	b.n	6fec <__aeabi_dsub+0x5c0>
    704a:	2400      	movs	r4, #0
    704c:	e7f3      	b.n	7036 <__aeabi_dsub+0x60a>
    704e:	46c0      	nop			; (mov r8, r8)
    7050:	000007ff 	.word	0x000007ff
    7054:	ff7fffff 	.word	0xff7fffff

00007058 <__aeabi_dcmpun>:
    7058:	b570      	push	{r4, r5, r6, lr}
    705a:	4e0e      	ldr	r6, [pc, #56]	; (7094 <__aeabi_dcmpun+0x3c>)
    705c:	030d      	lsls	r5, r1, #12
    705e:	031c      	lsls	r4, r3, #12
    7060:	0049      	lsls	r1, r1, #1
    7062:	005b      	lsls	r3, r3, #1
    7064:	0b2d      	lsrs	r5, r5, #12
    7066:	0d49      	lsrs	r1, r1, #21
    7068:	0b24      	lsrs	r4, r4, #12
    706a:	0d5b      	lsrs	r3, r3, #21
    706c:	42b1      	cmp	r1, r6
    706e:	d004      	beq.n	707a <__aeabi_dcmpun+0x22>
    7070:	4908      	ldr	r1, [pc, #32]	; (7094 <__aeabi_dcmpun+0x3c>)
    7072:	2000      	movs	r0, #0
    7074:	428b      	cmp	r3, r1
    7076:	d008      	beq.n	708a <__aeabi_dcmpun+0x32>
    7078:	bd70      	pop	{r4, r5, r6, pc}
    707a:	4305      	orrs	r5, r0
    707c:	2001      	movs	r0, #1
    707e:	2d00      	cmp	r5, #0
    7080:	d1fa      	bne.n	7078 <__aeabi_dcmpun+0x20>
    7082:	4904      	ldr	r1, [pc, #16]	; (7094 <__aeabi_dcmpun+0x3c>)
    7084:	2000      	movs	r0, #0
    7086:	428b      	cmp	r3, r1
    7088:	d1f6      	bne.n	7078 <__aeabi_dcmpun+0x20>
    708a:	4314      	orrs	r4, r2
    708c:	0020      	movs	r0, r4
    708e:	1e44      	subs	r4, r0, #1
    7090:	41a0      	sbcs	r0, r4
    7092:	e7f1      	b.n	7078 <__aeabi_dcmpun+0x20>
    7094:	000007ff 	.word	0x000007ff

00007098 <__aeabi_i2d>:
    7098:	b570      	push	{r4, r5, r6, lr}
    709a:	2800      	cmp	r0, #0
    709c:	d030      	beq.n	7100 <__aeabi_i2d+0x68>
    709e:	17c3      	asrs	r3, r0, #31
    70a0:	18c4      	adds	r4, r0, r3
    70a2:	405c      	eors	r4, r3
    70a4:	0fc5      	lsrs	r5, r0, #31
    70a6:	0020      	movs	r0, r4
    70a8:	f000 f94c 	bl	7344 <__clzsi2>
    70ac:	4b17      	ldr	r3, [pc, #92]	; (710c <__aeabi_i2d+0x74>)
    70ae:	4a18      	ldr	r2, [pc, #96]	; (7110 <__aeabi_i2d+0x78>)
    70b0:	1a1b      	subs	r3, r3, r0
    70b2:	1ad2      	subs	r2, r2, r3
    70b4:	2a1f      	cmp	r2, #31
    70b6:	dd18      	ble.n	70ea <__aeabi_i2d+0x52>
    70b8:	4a16      	ldr	r2, [pc, #88]	; (7114 <__aeabi_i2d+0x7c>)
    70ba:	1ad2      	subs	r2, r2, r3
    70bc:	4094      	lsls	r4, r2
    70be:	2200      	movs	r2, #0
    70c0:	0324      	lsls	r4, r4, #12
    70c2:	055b      	lsls	r3, r3, #21
    70c4:	0b24      	lsrs	r4, r4, #12
    70c6:	0d5b      	lsrs	r3, r3, #21
    70c8:	2100      	movs	r1, #0
    70ca:	0010      	movs	r0, r2
    70cc:	0324      	lsls	r4, r4, #12
    70ce:	0d0a      	lsrs	r2, r1, #20
    70d0:	0b24      	lsrs	r4, r4, #12
    70d2:	0512      	lsls	r2, r2, #20
    70d4:	4322      	orrs	r2, r4
    70d6:	4c10      	ldr	r4, [pc, #64]	; (7118 <__aeabi_i2d+0x80>)
    70d8:	051b      	lsls	r3, r3, #20
    70da:	4022      	ands	r2, r4
    70dc:	4313      	orrs	r3, r2
    70de:	005b      	lsls	r3, r3, #1
    70e0:	07ed      	lsls	r5, r5, #31
    70e2:	085b      	lsrs	r3, r3, #1
    70e4:	432b      	orrs	r3, r5
    70e6:	0019      	movs	r1, r3
    70e8:	bd70      	pop	{r4, r5, r6, pc}
    70ea:	0021      	movs	r1, r4
    70ec:	4091      	lsls	r1, r2
    70ee:	000a      	movs	r2, r1
    70f0:	210b      	movs	r1, #11
    70f2:	1a08      	subs	r0, r1, r0
    70f4:	40c4      	lsrs	r4, r0
    70f6:	055b      	lsls	r3, r3, #21
    70f8:	0324      	lsls	r4, r4, #12
    70fa:	0b24      	lsrs	r4, r4, #12
    70fc:	0d5b      	lsrs	r3, r3, #21
    70fe:	e7e3      	b.n	70c8 <__aeabi_i2d+0x30>
    7100:	2500      	movs	r5, #0
    7102:	2300      	movs	r3, #0
    7104:	2400      	movs	r4, #0
    7106:	2200      	movs	r2, #0
    7108:	e7de      	b.n	70c8 <__aeabi_i2d+0x30>
    710a:	46c0      	nop			; (mov r8, r8)
    710c:	0000041e 	.word	0x0000041e
    7110:	00000433 	.word	0x00000433
    7114:	00000413 	.word	0x00000413
    7118:	800fffff 	.word	0x800fffff

0000711c <__aeabi_ui2d>:
    711c:	b510      	push	{r4, lr}
    711e:	1e04      	subs	r4, r0, #0
    7120:	d028      	beq.n	7174 <__aeabi_ui2d+0x58>
    7122:	f000 f90f 	bl	7344 <__clzsi2>
    7126:	4b15      	ldr	r3, [pc, #84]	; (717c <__aeabi_ui2d+0x60>)
    7128:	4a15      	ldr	r2, [pc, #84]	; (7180 <__aeabi_ui2d+0x64>)
    712a:	1a1b      	subs	r3, r3, r0
    712c:	1ad2      	subs	r2, r2, r3
    712e:	2a1f      	cmp	r2, #31
    7130:	dd15      	ble.n	715e <__aeabi_ui2d+0x42>
    7132:	4a14      	ldr	r2, [pc, #80]	; (7184 <__aeabi_ui2d+0x68>)
    7134:	1ad2      	subs	r2, r2, r3
    7136:	4094      	lsls	r4, r2
    7138:	2200      	movs	r2, #0
    713a:	0324      	lsls	r4, r4, #12
    713c:	055b      	lsls	r3, r3, #21
    713e:	0b24      	lsrs	r4, r4, #12
    7140:	0d5b      	lsrs	r3, r3, #21
    7142:	2100      	movs	r1, #0
    7144:	0010      	movs	r0, r2
    7146:	0324      	lsls	r4, r4, #12
    7148:	0d0a      	lsrs	r2, r1, #20
    714a:	0b24      	lsrs	r4, r4, #12
    714c:	0512      	lsls	r2, r2, #20
    714e:	4322      	orrs	r2, r4
    7150:	4c0d      	ldr	r4, [pc, #52]	; (7188 <__aeabi_ui2d+0x6c>)
    7152:	051b      	lsls	r3, r3, #20
    7154:	4022      	ands	r2, r4
    7156:	4313      	orrs	r3, r2
    7158:	005b      	lsls	r3, r3, #1
    715a:	0859      	lsrs	r1, r3, #1
    715c:	bd10      	pop	{r4, pc}
    715e:	0021      	movs	r1, r4
    7160:	4091      	lsls	r1, r2
    7162:	000a      	movs	r2, r1
    7164:	210b      	movs	r1, #11
    7166:	1a08      	subs	r0, r1, r0
    7168:	40c4      	lsrs	r4, r0
    716a:	055b      	lsls	r3, r3, #21
    716c:	0324      	lsls	r4, r4, #12
    716e:	0b24      	lsrs	r4, r4, #12
    7170:	0d5b      	lsrs	r3, r3, #21
    7172:	e7e6      	b.n	7142 <__aeabi_ui2d+0x26>
    7174:	2300      	movs	r3, #0
    7176:	2400      	movs	r4, #0
    7178:	2200      	movs	r2, #0
    717a:	e7e2      	b.n	7142 <__aeabi_ui2d+0x26>
    717c:	0000041e 	.word	0x0000041e
    7180:	00000433 	.word	0x00000433
    7184:	00000413 	.word	0x00000413
    7188:	800fffff 	.word	0x800fffff

0000718c <__aeabi_f2d>:
    718c:	0041      	lsls	r1, r0, #1
    718e:	0e09      	lsrs	r1, r1, #24
    7190:	1c4b      	adds	r3, r1, #1
    7192:	b570      	push	{r4, r5, r6, lr}
    7194:	b2db      	uxtb	r3, r3
    7196:	0246      	lsls	r6, r0, #9
    7198:	0a75      	lsrs	r5, r6, #9
    719a:	0fc4      	lsrs	r4, r0, #31
    719c:	2b01      	cmp	r3, #1
    719e:	dd14      	ble.n	71ca <__aeabi_f2d+0x3e>
    71a0:	23e0      	movs	r3, #224	; 0xe0
    71a2:	009b      	lsls	r3, r3, #2
    71a4:	076d      	lsls	r5, r5, #29
    71a6:	0b36      	lsrs	r6, r6, #12
    71a8:	18cb      	adds	r3, r1, r3
    71aa:	2100      	movs	r1, #0
    71ac:	0d0a      	lsrs	r2, r1, #20
    71ae:	0028      	movs	r0, r5
    71b0:	0512      	lsls	r2, r2, #20
    71b2:	4d1c      	ldr	r5, [pc, #112]	; (7224 <__aeabi_f2d+0x98>)
    71b4:	4332      	orrs	r2, r6
    71b6:	055b      	lsls	r3, r3, #21
    71b8:	402a      	ands	r2, r5
    71ba:	085b      	lsrs	r3, r3, #1
    71bc:	4313      	orrs	r3, r2
    71be:	005b      	lsls	r3, r3, #1
    71c0:	07e4      	lsls	r4, r4, #31
    71c2:	085b      	lsrs	r3, r3, #1
    71c4:	4323      	orrs	r3, r4
    71c6:	0019      	movs	r1, r3
    71c8:	bd70      	pop	{r4, r5, r6, pc}
    71ca:	2900      	cmp	r1, #0
    71cc:	d114      	bne.n	71f8 <__aeabi_f2d+0x6c>
    71ce:	2d00      	cmp	r5, #0
    71d0:	d01e      	beq.n	7210 <__aeabi_f2d+0x84>
    71d2:	0028      	movs	r0, r5
    71d4:	f000 f8b6 	bl	7344 <__clzsi2>
    71d8:	280a      	cmp	r0, #10
    71da:	dc1c      	bgt.n	7216 <__aeabi_f2d+0x8a>
    71dc:	230b      	movs	r3, #11
    71de:	002a      	movs	r2, r5
    71e0:	1a1b      	subs	r3, r3, r0
    71e2:	40da      	lsrs	r2, r3
    71e4:	0003      	movs	r3, r0
    71e6:	3315      	adds	r3, #21
    71e8:	409d      	lsls	r5, r3
    71ea:	4b0f      	ldr	r3, [pc, #60]	; (7228 <__aeabi_f2d+0x9c>)
    71ec:	0312      	lsls	r2, r2, #12
    71ee:	1a1b      	subs	r3, r3, r0
    71f0:	055b      	lsls	r3, r3, #21
    71f2:	0b16      	lsrs	r6, r2, #12
    71f4:	0d5b      	lsrs	r3, r3, #21
    71f6:	e7d8      	b.n	71aa <__aeabi_f2d+0x1e>
    71f8:	2d00      	cmp	r5, #0
    71fa:	d006      	beq.n	720a <__aeabi_f2d+0x7e>
    71fc:	0b32      	lsrs	r2, r6, #12
    71fe:	2680      	movs	r6, #128	; 0x80
    7200:	0336      	lsls	r6, r6, #12
    7202:	076d      	lsls	r5, r5, #29
    7204:	4316      	orrs	r6, r2
    7206:	4b09      	ldr	r3, [pc, #36]	; (722c <__aeabi_f2d+0xa0>)
    7208:	e7cf      	b.n	71aa <__aeabi_f2d+0x1e>
    720a:	4b08      	ldr	r3, [pc, #32]	; (722c <__aeabi_f2d+0xa0>)
    720c:	2600      	movs	r6, #0
    720e:	e7cc      	b.n	71aa <__aeabi_f2d+0x1e>
    7210:	2300      	movs	r3, #0
    7212:	2600      	movs	r6, #0
    7214:	e7c9      	b.n	71aa <__aeabi_f2d+0x1e>
    7216:	0003      	movs	r3, r0
    7218:	002a      	movs	r2, r5
    721a:	3b0b      	subs	r3, #11
    721c:	409a      	lsls	r2, r3
    721e:	2500      	movs	r5, #0
    7220:	e7e3      	b.n	71ea <__aeabi_f2d+0x5e>
    7222:	46c0      	nop			; (mov r8, r8)
    7224:	800fffff 	.word	0x800fffff
    7228:	00000389 	.word	0x00000389
    722c:	000007ff 	.word	0x000007ff

00007230 <__aeabi_d2f>:
    7230:	b5f0      	push	{r4, r5, r6, r7, lr}
    7232:	004c      	lsls	r4, r1, #1
    7234:	0d64      	lsrs	r4, r4, #21
    7236:	030b      	lsls	r3, r1, #12
    7238:	1c62      	adds	r2, r4, #1
    723a:	0f45      	lsrs	r5, r0, #29
    723c:	0a5b      	lsrs	r3, r3, #9
    723e:	0552      	lsls	r2, r2, #21
    7240:	432b      	orrs	r3, r5
    7242:	0fc9      	lsrs	r1, r1, #31
    7244:	00c5      	lsls	r5, r0, #3
    7246:	0d52      	lsrs	r2, r2, #21
    7248:	2a01      	cmp	r2, #1
    724a:	dd28      	ble.n	729e <__aeabi_d2f+0x6e>
    724c:	4a3a      	ldr	r2, [pc, #232]	; (7338 <__aeabi_d2f+0x108>)
    724e:	18a6      	adds	r6, r4, r2
    7250:	2efe      	cmp	r6, #254	; 0xfe
    7252:	dc1b      	bgt.n	728c <__aeabi_d2f+0x5c>
    7254:	2e00      	cmp	r6, #0
    7256:	dd3e      	ble.n	72d6 <__aeabi_d2f+0xa6>
    7258:	0180      	lsls	r0, r0, #6
    725a:	0002      	movs	r2, r0
    725c:	1e50      	subs	r0, r2, #1
    725e:	4182      	sbcs	r2, r0
    7260:	0f6d      	lsrs	r5, r5, #29
    7262:	432a      	orrs	r2, r5
    7264:	00db      	lsls	r3, r3, #3
    7266:	4313      	orrs	r3, r2
    7268:	075a      	lsls	r2, r3, #29
    726a:	d004      	beq.n	7276 <__aeabi_d2f+0x46>
    726c:	220f      	movs	r2, #15
    726e:	401a      	ands	r2, r3
    7270:	2a04      	cmp	r2, #4
    7272:	d000      	beq.n	7276 <__aeabi_d2f+0x46>
    7274:	3304      	adds	r3, #4
    7276:	2280      	movs	r2, #128	; 0x80
    7278:	04d2      	lsls	r2, r2, #19
    727a:	401a      	ands	r2, r3
    727c:	d05a      	beq.n	7334 <__aeabi_d2f+0x104>
    727e:	3601      	adds	r6, #1
    7280:	2eff      	cmp	r6, #255	; 0xff
    7282:	d003      	beq.n	728c <__aeabi_d2f+0x5c>
    7284:	019b      	lsls	r3, r3, #6
    7286:	0a5b      	lsrs	r3, r3, #9
    7288:	b2f4      	uxtb	r4, r6
    728a:	e001      	b.n	7290 <__aeabi_d2f+0x60>
    728c:	24ff      	movs	r4, #255	; 0xff
    728e:	2300      	movs	r3, #0
    7290:	0258      	lsls	r0, r3, #9
    7292:	05e4      	lsls	r4, r4, #23
    7294:	0a40      	lsrs	r0, r0, #9
    7296:	07c9      	lsls	r1, r1, #31
    7298:	4320      	orrs	r0, r4
    729a:	4308      	orrs	r0, r1
    729c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    729e:	2c00      	cmp	r4, #0
    72a0:	d007      	beq.n	72b2 <__aeabi_d2f+0x82>
    72a2:	431d      	orrs	r5, r3
    72a4:	d0f2      	beq.n	728c <__aeabi_d2f+0x5c>
    72a6:	2080      	movs	r0, #128	; 0x80
    72a8:	00db      	lsls	r3, r3, #3
    72aa:	0480      	lsls	r0, r0, #18
    72ac:	4303      	orrs	r3, r0
    72ae:	26ff      	movs	r6, #255	; 0xff
    72b0:	e7da      	b.n	7268 <__aeabi_d2f+0x38>
    72b2:	432b      	orrs	r3, r5
    72b4:	d003      	beq.n	72be <__aeabi_d2f+0x8e>
    72b6:	2305      	movs	r3, #5
    72b8:	08db      	lsrs	r3, r3, #3
    72ba:	2cff      	cmp	r4, #255	; 0xff
    72bc:	d003      	beq.n	72c6 <__aeabi_d2f+0x96>
    72be:	025b      	lsls	r3, r3, #9
    72c0:	0a5b      	lsrs	r3, r3, #9
    72c2:	b2e4      	uxtb	r4, r4
    72c4:	e7e4      	b.n	7290 <__aeabi_d2f+0x60>
    72c6:	2b00      	cmp	r3, #0
    72c8:	d032      	beq.n	7330 <__aeabi_d2f+0x100>
    72ca:	2080      	movs	r0, #128	; 0x80
    72cc:	03c0      	lsls	r0, r0, #15
    72ce:	4303      	orrs	r3, r0
    72d0:	025b      	lsls	r3, r3, #9
    72d2:	0a5b      	lsrs	r3, r3, #9
    72d4:	e7dc      	b.n	7290 <__aeabi_d2f+0x60>
    72d6:	0032      	movs	r2, r6
    72d8:	3217      	adds	r2, #23
    72da:	db14      	blt.n	7306 <__aeabi_d2f+0xd6>
    72dc:	2280      	movs	r2, #128	; 0x80
    72de:	271e      	movs	r7, #30
    72e0:	0412      	lsls	r2, r2, #16
    72e2:	4313      	orrs	r3, r2
    72e4:	1bbf      	subs	r7, r7, r6
    72e6:	2f1f      	cmp	r7, #31
    72e8:	dc0f      	bgt.n	730a <__aeabi_d2f+0xda>
    72ea:	4a14      	ldr	r2, [pc, #80]	; (733c <__aeabi_d2f+0x10c>)
    72ec:	4694      	mov	ip, r2
    72ee:	4464      	add	r4, ip
    72f0:	002a      	movs	r2, r5
    72f2:	40a5      	lsls	r5, r4
    72f4:	002e      	movs	r6, r5
    72f6:	40a3      	lsls	r3, r4
    72f8:	1e75      	subs	r5, r6, #1
    72fa:	41ae      	sbcs	r6, r5
    72fc:	40fa      	lsrs	r2, r7
    72fe:	4333      	orrs	r3, r6
    7300:	4313      	orrs	r3, r2
    7302:	2600      	movs	r6, #0
    7304:	e7b0      	b.n	7268 <__aeabi_d2f+0x38>
    7306:	2400      	movs	r4, #0
    7308:	e7d5      	b.n	72b6 <__aeabi_d2f+0x86>
    730a:	2202      	movs	r2, #2
    730c:	4252      	negs	r2, r2
    730e:	1b96      	subs	r6, r2, r6
    7310:	001a      	movs	r2, r3
    7312:	40f2      	lsrs	r2, r6
    7314:	2f20      	cmp	r7, #32
    7316:	d009      	beq.n	732c <__aeabi_d2f+0xfc>
    7318:	4809      	ldr	r0, [pc, #36]	; (7340 <__aeabi_d2f+0x110>)
    731a:	4684      	mov	ip, r0
    731c:	4464      	add	r4, ip
    731e:	40a3      	lsls	r3, r4
    7320:	432b      	orrs	r3, r5
    7322:	1e5d      	subs	r5, r3, #1
    7324:	41ab      	sbcs	r3, r5
    7326:	2600      	movs	r6, #0
    7328:	4313      	orrs	r3, r2
    732a:	e79d      	b.n	7268 <__aeabi_d2f+0x38>
    732c:	2300      	movs	r3, #0
    732e:	e7f7      	b.n	7320 <__aeabi_d2f+0xf0>
    7330:	2300      	movs	r3, #0
    7332:	e7ad      	b.n	7290 <__aeabi_d2f+0x60>
    7334:	0034      	movs	r4, r6
    7336:	e7bf      	b.n	72b8 <__aeabi_d2f+0x88>
    7338:	fffffc80 	.word	0xfffffc80
    733c:	fffffc82 	.word	0xfffffc82
    7340:	fffffca2 	.word	0xfffffca2

00007344 <__clzsi2>:
    7344:	211c      	movs	r1, #28
    7346:	2301      	movs	r3, #1
    7348:	041b      	lsls	r3, r3, #16
    734a:	4298      	cmp	r0, r3
    734c:	d301      	bcc.n	7352 <__clzsi2+0xe>
    734e:	0c00      	lsrs	r0, r0, #16
    7350:	3910      	subs	r1, #16
    7352:	0a1b      	lsrs	r3, r3, #8
    7354:	4298      	cmp	r0, r3
    7356:	d301      	bcc.n	735c <__clzsi2+0x18>
    7358:	0a00      	lsrs	r0, r0, #8
    735a:	3908      	subs	r1, #8
    735c:	091b      	lsrs	r3, r3, #4
    735e:	4298      	cmp	r0, r3
    7360:	d301      	bcc.n	7366 <__clzsi2+0x22>
    7362:	0900      	lsrs	r0, r0, #4
    7364:	3904      	subs	r1, #4
    7366:	a202      	add	r2, pc, #8	; (adr r2, 7370 <__clzsi2+0x2c>)
    7368:	5c10      	ldrb	r0, [r2, r0]
    736a:	1840      	adds	r0, r0, r1
    736c:	4770      	bx	lr
    736e:	46c0      	nop			; (mov r8, r8)
    7370:	02020304 	.word	0x02020304
    7374:	01010101 	.word	0x01010101
	...

00007380 <__errno>:
    7380:	4b01      	ldr	r3, [pc, #4]	; (7388 <__errno+0x8>)
    7382:	6818      	ldr	r0, [r3, #0]
    7384:	4770      	bx	lr
    7386:	46c0      	nop			; (mov r8, r8)
    7388:	20000020 	.word	0x20000020

0000738c <__libc_init_array>:
    738c:	b570      	push	{r4, r5, r6, lr}
    738e:	2600      	movs	r6, #0
    7390:	4d0c      	ldr	r5, [pc, #48]	; (73c4 <__libc_init_array+0x38>)
    7392:	4c0d      	ldr	r4, [pc, #52]	; (73c8 <__libc_init_array+0x3c>)
    7394:	1b64      	subs	r4, r4, r5
    7396:	10a4      	asrs	r4, r4, #2
    7398:	42a6      	cmp	r6, r4
    739a:	d109      	bne.n	73b0 <__libc_init_array+0x24>
    739c:	2600      	movs	r6, #0
    739e:	f000 f8a3 	bl	74e8 <_init>
    73a2:	4d0a      	ldr	r5, [pc, #40]	; (73cc <__libc_init_array+0x40>)
    73a4:	4c0a      	ldr	r4, [pc, #40]	; (73d0 <__libc_init_array+0x44>)
    73a6:	1b64      	subs	r4, r4, r5
    73a8:	10a4      	asrs	r4, r4, #2
    73aa:	42a6      	cmp	r6, r4
    73ac:	d105      	bne.n	73ba <__libc_init_array+0x2e>
    73ae:	bd70      	pop	{r4, r5, r6, pc}
    73b0:	00b3      	lsls	r3, r6, #2
    73b2:	58eb      	ldr	r3, [r5, r3]
    73b4:	4798      	blx	r3
    73b6:	3601      	adds	r6, #1
    73b8:	e7ee      	b.n	7398 <__libc_init_array+0xc>
    73ba:	00b3      	lsls	r3, r6, #2
    73bc:	58eb      	ldr	r3, [r5, r3]
    73be:	4798      	blx	r3
    73c0:	3601      	adds	r6, #1
    73c2:	e7f2      	b.n	73aa <__libc_init_array+0x1e>
    73c4:	000074f4 	.word	0x000074f4
    73c8:	000074f4 	.word	0x000074f4
    73cc:	000074f4 	.word	0x000074f4
    73d0:	000074f8 	.word	0x000074f8

000073d4 <memset>:
    73d4:	0003      	movs	r3, r0
    73d6:	1882      	adds	r2, r0, r2
    73d8:	4293      	cmp	r3, r2
    73da:	d100      	bne.n	73de <memset+0xa>
    73dc:	4770      	bx	lr
    73de:	7019      	strb	r1, [r3, #0]
    73e0:	3301      	adds	r3, #1
    73e2:	e7f9      	b.n	73d8 <memset+0x4>
    73e4:	42000800 	.word	0x42000800
    73e8:	42000c00 	.word	0x42000c00
    73ec:	42001000 	.word	0x42001000
    73f0:	42001400 	.word	0x42001400
    73f4:	42001800 	.word	0x42001800
    73f8:	42001c00 	.word	0x42001c00
    73fc:	00002f16 	.word	0x00002f16
    7400:	00002f90 	.word	0x00002f90
    7404:	00002f90 	.word	0x00002f90
    7408:	00002f34 	.word	0x00002f34
    740c:	00002f2e 	.word	0x00002f2e
    7410:	00002f3a 	.word	0x00002f3a
    7414:	00002f1c 	.word	0x00002f1c
    7418:	00002f40 	.word	0x00002f40
    741c:	00002f76 	.word	0x00002f76
    7420:	0000306c 	.word	0x0000306c
    7424:	000030bc 	.word	0x000030bc
    7428:	000030bc 	.word	0x000030bc
    742c:	000030b8 	.word	0x000030b8
    7430:	0000305e 	.word	0x0000305e
    7434:	0000307e 	.word	0x0000307e
    7438:	0000304e 	.word	0x0000304e
    743c:	00003090 	.word	0x00003090
    7440:	000030a2 	.word	0x000030a2
    7444:	00676f6c 	.word	0x00676f6c
    7448:	00000000 	.word	0x00000000
    744c:	31676f6c 	.word	0x31676f6c
    7450:	00000030 	.word	0x00000030
    7454:	00776f70 	.word	0x00776f70

00007458 <TWO52>:
    7458:	00000000 43300000 00000000 c3300000     ......0C......0.
    7468:	00005ebc 00005e9e 00005e58 00005d76     .^...^..X^..v]..
    7478:	00005e58 00005e90 00005e58 00005d76     X^...^..X^..v]..
    7488:	00005e9e 00005e9e 00005e90 00005d76     .^...^...^..v]..
    7498:	00005d6e 00005d6e 00005d6e 000060d4     n]..n]..n]...`..
    74a8:	0000671c 000065dc 000065dc 000065d8     .g...e...e...e..
    74b8:	000066f4 000066f4 000066e6 000065d8     .f...f...f...e..
    74c8:	000066f4 000066e6 000066f4 000065d8     .f...f...f...e..
    74d8:	000066fc 000066fc 000066fc 00006900     .f...f...f...i..

000074e8 <_init>:
    74e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    74ea:	46c0      	nop			; (mov r8, r8)
    74ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
    74ee:	bc08      	pop	{r3}
    74f0:	469e      	mov	lr, r3
    74f2:	4770      	bx	lr

000074f4 <__init_array_start>:
    74f4:	000000dd 	.word	0x000000dd

000074f8 <_fini>:
    74f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    74fa:	46c0      	nop			; (mov r8, r8)
    74fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    74fe:	bc08      	pop	{r3}
    7500:	469e      	mov	lr, r3
    7502:	4770      	bx	lr

00007504 <__fini_array_start>:
    7504:	000000b5 	.word	0x000000b5
