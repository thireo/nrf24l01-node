
nrf24l01-node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000830c  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000078  20000000  0000830c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000016c  20000078  00008384  00020078  2**2
                  ALLOC
  3 .stack        00002004  200001e4  000084f0  00020078  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
  6 .debug_info   0002c805  00000000  00000000  000200f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000383a  00000000  00000000  0004c8fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000252c  00000000  00000000  00050138  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000758  00000000  00000000  00052664  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000610  00000000  00000000  00052dbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001b45b  00000000  00000000  000533cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000e858  00000000  00000000  0006e827  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00089dbf  00000000  00000000  0007d07f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001f74  00000000  00000000  00106e40  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	e8 21 00 20 d9 3a 00 00 d1 3b 00 00 d1 3b 00 00     .!. .:...;...;..
	...
      2c:	d1 3b 00 00 00 00 00 00 00 00 00 00 d1 3b 00 00     .;...........;..
      3c:	d1 3b 00 00 d1 3b 00 00 d1 3b 00 00 d1 3b 00 00     .;...;...;...;..
      4c:	d1 3b 00 00 8d 02 00 00 d1 3b 00 00 d1 3b 00 00     .;.......;...;..
      5c:	d1 3b 00 00 d1 3b 00 00 d1 3b 00 00 d1 3b 00 00     .;...;...;...;..
      6c:	d1 3b 00 00 d1 3b 00 00 d1 3b 00 00 d1 3b 00 00     .;...;...;...;..
      7c:	d1 3b 00 00 d1 3b 00 00 d1 3b 00 00 d1 3b 00 00     .;...;...;...;..
      8c:	d1 3b 00 00 d1 3b 00 00 00 00 00 00 00 00 00 00     .;...;..........
      9c:	d1 3b 00 00 d1 3b 00 00 d1 3b 00 00 d1 3b 00 00     .;...;...;...;..
      ac:	d1 3b 00 00 00 00 00 00                             .;......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000078 	.word	0x20000078
      d4:	00000000 	.word	0x00000000
      d8:	0000830c 	.word	0x0000830c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	2000007c 	.word	0x2000007c
     108:	0000830c 	.word	0x0000830c
     10c:	0000830c 	.word	0x0000830c
     110:	00000000 	.word	0x00000000

00000114 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
     114:	b580      	push	{r7, lr}
     116:	b084      	sub	sp, #16
     118:	af00      	add	r7, sp, #0
     11a:	0002      	movs	r2, r0
     11c:	1dfb      	adds	r3, r7, #7
     11e:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
     120:	230f      	movs	r3, #15
     122:	18fb      	adds	r3, r7, r3
     124:	1dfa      	adds	r2, r7, #7
     126:	7812      	ldrb	r2, [r2, #0]
     128:	0952      	lsrs	r2, r2, #5
     12a:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
     12c:	230f      	movs	r3, #15
     12e:	18fb      	adds	r3, r7, r3
     130:	781b      	ldrb	r3, [r3, #0]
     132:	2b00      	cmp	r3, #0
     134:	d10c      	bne.n	150 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     136:	4b09      	ldr	r3, [pc, #36]	; (15c <_extint_get_eic_from_channel+0x48>)
     138:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
     13a:	230f      	movs	r3, #15
     13c:	18fb      	adds	r3, r7, r3
     13e:	781b      	ldrb	r3, [r3, #0]
     140:	009b      	lsls	r3, r3, #2
     142:	2210      	movs	r2, #16
     144:	4694      	mov	ip, r2
     146:	44bc      	add	ip, r7
     148:	4463      	add	r3, ip
     14a:	3b08      	subs	r3, #8
     14c:	681b      	ldr	r3, [r3, #0]
     14e:	e000      	b.n	152 <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
     150:	2300      	movs	r3, #0
	}
}
     152:	0018      	movs	r0, r3
     154:	46bd      	mov	sp, r7
     156:	b004      	add	sp, #16
     158:	bd80      	pop	{r7, pc}
     15a:	46c0      	nop			; (mov r8, r8)
     15c:	40001800 	.word	0x40001800

00000160 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
     160:	b580      	push	{r7, lr}
     162:	b084      	sub	sp, #16
     164:	af00      	add	r7, sp, #0
     166:	0002      	movs	r2, r0
     168:	1dfb      	adds	r3, r7, #7
     16a:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
     16c:	1dfb      	adds	r3, r7, #7
     16e:	781b      	ldrb	r3, [r3, #0]
     170:	0018      	movs	r0, r3
     172:	4b0b      	ldr	r3, [pc, #44]	; (1a0 <extint_chan_is_detected+0x40>)
     174:	4798      	blx	r3
     176:	0003      	movs	r3, r0
     178:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
     17a:	1dfb      	adds	r3, r7, #7
     17c:	781b      	ldrb	r3, [r3, #0]
     17e:	221f      	movs	r2, #31
     180:	4013      	ands	r3, r2
     182:	2201      	movs	r2, #1
     184:	409a      	lsls	r2, r3
     186:	0013      	movs	r3, r2
     188:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
     18a:	68fb      	ldr	r3, [r7, #12]
     18c:	691b      	ldr	r3, [r3, #16]
     18e:	68ba      	ldr	r2, [r7, #8]
     190:	4013      	ands	r3, r2
     192:	1e5a      	subs	r2, r3, #1
     194:	4193      	sbcs	r3, r2
     196:	b2db      	uxtb	r3, r3
}
     198:	0018      	movs	r0, r3
     19a:	46bd      	mov	sp, r7
     19c:	b004      	add	sp, #16
     19e:	bd80      	pop	{r7, pc}
     1a0:	00000115 	.word	0x00000115

000001a4 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
     1a4:	b580      	push	{r7, lr}
     1a6:	b084      	sub	sp, #16
     1a8:	af00      	add	r7, sp, #0
     1aa:	0002      	movs	r2, r0
     1ac:	1dfb      	adds	r3, r7, #7
     1ae:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
     1b0:	1dfb      	adds	r3, r7, #7
     1b2:	781b      	ldrb	r3, [r3, #0]
     1b4:	0018      	movs	r0, r3
     1b6:	4b09      	ldr	r3, [pc, #36]	; (1dc <extint_chan_clear_detected+0x38>)
     1b8:	4798      	blx	r3
     1ba:	0003      	movs	r3, r0
     1bc:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
     1be:	1dfb      	adds	r3, r7, #7
     1c0:	781b      	ldrb	r3, [r3, #0]
     1c2:	221f      	movs	r2, #31
     1c4:	4013      	ands	r3, r2
     1c6:	2201      	movs	r2, #1
     1c8:	409a      	lsls	r2, r3
     1ca:	0013      	movs	r3, r2
     1cc:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
     1ce:	68fb      	ldr	r3, [r7, #12]
     1d0:	68ba      	ldr	r2, [r7, #8]
     1d2:	611a      	str	r2, [r3, #16]
}
     1d4:	46c0      	nop			; (mov r8, r8)
     1d6:	46bd      	mov	sp, r7
     1d8:	b004      	add	sp, #16
     1da:	bd80      	pop	{r7, pc}
     1dc:	00000115 	.word	0x00000115

000001e0 <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
     1e0:	b580      	push	{r7, lr}
     1e2:	b082      	sub	sp, #8
     1e4:	af00      	add	r7, sp, #0
     1e6:	6078      	str	r0, [r7, #4]
     1e8:	0008      	movs	r0, r1
     1ea:	0011      	movs	r1, r2
     1ec:	1cfb      	adds	r3, r7, #3
     1ee:	1c02      	adds	r2, r0, #0
     1f0:	701a      	strb	r2, [r3, #0]
     1f2:	1cbb      	adds	r3, r7, #2
     1f4:	1c0a      	adds	r2, r1, #0
     1f6:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
     1f8:	1cbb      	adds	r3, r7, #2
     1fa:	781b      	ldrb	r3, [r3, #0]
     1fc:	2b00      	cmp	r3, #0
     1fe:	d001      	beq.n	204 <extint_register_callback+0x24>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     200:	2317      	movs	r3, #23
     202:	e019      	b.n	238 <extint_register_callback+0x58>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
     204:	1cfb      	adds	r3, r7, #3
     206:	781a      	ldrb	r2, [r3, #0]
     208:	4b0d      	ldr	r3, [pc, #52]	; (240 <extint_register_callback+0x60>)
     20a:	0092      	lsls	r2, r2, #2
     20c:	58d3      	ldr	r3, [r2, r3]
     20e:	2b00      	cmp	r3, #0
     210:	d107      	bne.n	222 <extint_register_callback+0x42>
		_extint_dev.callbacks[channel] = callback;
     212:	1cfb      	adds	r3, r7, #3
     214:	781a      	ldrb	r2, [r3, #0]
     216:	4b0a      	ldr	r3, [pc, #40]	; (240 <extint_register_callback+0x60>)
     218:	0092      	lsls	r2, r2, #2
     21a:	6879      	ldr	r1, [r7, #4]
     21c:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
     21e:	2300      	movs	r3, #0
     220:	e00a      	b.n	238 <extint_register_callback+0x58>
	} else if (_extint_dev.callbacks[channel] == callback) {
     222:	1cfb      	adds	r3, r7, #3
     224:	781a      	ldrb	r2, [r3, #0]
     226:	4b06      	ldr	r3, [pc, #24]	; (240 <extint_register_callback+0x60>)
     228:	0092      	lsls	r2, r2, #2
     22a:	58d2      	ldr	r2, [r2, r3]
     22c:	687b      	ldr	r3, [r7, #4]
     22e:	429a      	cmp	r2, r3
     230:	d101      	bne.n	236 <extint_register_callback+0x56>
		return STATUS_OK;
     232:	2300      	movs	r3, #0
     234:	e000      	b.n	238 <extint_register_callback+0x58>
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
     236:	231d      	movs	r3, #29
}
     238:	0018      	movs	r0, r3
     23a:	46bd      	mov	sp, r7
     23c:	b002      	add	sp, #8
     23e:	bd80      	pop	{r7, pc}
     240:	200000c8 	.word	0x200000c8

00000244 <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
     244:	b580      	push	{r7, lr}
     246:	b084      	sub	sp, #16
     248:	af00      	add	r7, sp, #0
     24a:	0002      	movs	r2, r0
     24c:	1dfb      	adds	r3, r7, #7
     24e:	701a      	strb	r2, [r3, #0]
     250:	1dbb      	adds	r3, r7, #6
     252:	1c0a      	adds	r2, r1, #0
     254:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
     256:	1dbb      	adds	r3, r7, #6
     258:	781b      	ldrb	r3, [r3, #0]
     25a:	2b00      	cmp	r3, #0
     25c:	d10e      	bne.n	27c <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
     25e:	1dfb      	adds	r3, r7, #7
     260:	781b      	ldrb	r3, [r3, #0]
     262:	0018      	movs	r0, r3
     264:	4b08      	ldr	r3, [pc, #32]	; (288 <extint_chan_enable_callback+0x44>)
     266:	4798      	blx	r3
     268:	0003      	movs	r3, r0
     26a:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
     26c:	1dfb      	adds	r3, r7, #7
     26e:	781b      	ldrb	r3, [r3, #0]
     270:	2201      	movs	r2, #1
     272:	409a      	lsls	r2, r3
     274:	68fb      	ldr	r3, [r7, #12]
     276:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     278:	2300      	movs	r3, #0
     27a:	e000      	b.n	27e <extint_chan_enable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
     27c:	2317      	movs	r3, #23
}
     27e:	0018      	movs	r0, r3
     280:	46bd      	mov	sp, r7
     282:	b004      	add	sp, #16
     284:	bd80      	pop	{r7, pc}
     286:	46c0      	nop			; (mov r8, r8)
     288:	00000115 	.word	0x00000115

0000028c <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     28c:	b580      	push	{r7, lr}
     28e:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     290:	4b15      	ldr	r3, [pc, #84]	; (2e8 <EIC_Handler+0x5c>)
     292:	2200      	movs	r2, #0
     294:	701a      	strb	r2, [r3, #0]
     296:	e020      	b.n	2da <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
     298:	4b13      	ldr	r3, [pc, #76]	; (2e8 <EIC_Handler+0x5c>)
     29a:	781b      	ldrb	r3, [r3, #0]
     29c:	0018      	movs	r0, r3
     29e:	4b13      	ldr	r3, [pc, #76]	; (2ec <EIC_Handler+0x60>)
     2a0:	4798      	blx	r3
     2a2:	1e03      	subs	r3, r0, #0
     2a4:	d013      	beq.n	2ce <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
     2a6:	4b10      	ldr	r3, [pc, #64]	; (2e8 <EIC_Handler+0x5c>)
     2a8:	781b      	ldrb	r3, [r3, #0]
     2aa:	0018      	movs	r0, r3
     2ac:	4b10      	ldr	r3, [pc, #64]	; (2f0 <EIC_Handler+0x64>)
     2ae:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     2b0:	4b0d      	ldr	r3, [pc, #52]	; (2e8 <EIC_Handler+0x5c>)
     2b2:	781b      	ldrb	r3, [r3, #0]
     2b4:	001a      	movs	r2, r3
     2b6:	4b0f      	ldr	r3, [pc, #60]	; (2f4 <EIC_Handler+0x68>)
     2b8:	0092      	lsls	r2, r2, #2
     2ba:	58d3      	ldr	r3, [r2, r3]
     2bc:	2b00      	cmp	r3, #0
     2be:	d006      	beq.n	2ce <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     2c0:	4b09      	ldr	r3, [pc, #36]	; (2e8 <EIC_Handler+0x5c>)
     2c2:	781b      	ldrb	r3, [r3, #0]
     2c4:	001a      	movs	r2, r3
     2c6:	4b0b      	ldr	r3, [pc, #44]	; (2f4 <EIC_Handler+0x68>)
     2c8:	0092      	lsls	r2, r2, #2
     2ca:	58d3      	ldr	r3, [r2, r3]
     2cc:	4798      	blx	r3
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     2ce:	4b06      	ldr	r3, [pc, #24]	; (2e8 <EIC_Handler+0x5c>)
     2d0:	781b      	ldrb	r3, [r3, #0]
     2d2:	3301      	adds	r3, #1
     2d4:	b2da      	uxtb	r2, r3
     2d6:	4b04      	ldr	r3, [pc, #16]	; (2e8 <EIC_Handler+0x5c>)
     2d8:	701a      	strb	r2, [r3, #0]
     2da:	4b03      	ldr	r3, [pc, #12]	; (2e8 <EIC_Handler+0x5c>)
     2dc:	781b      	ldrb	r3, [r3, #0]
     2de:	2b0f      	cmp	r3, #15
     2e0:	d9da      	bls.n	298 <EIC_Handler+0xc>
			}
		}
	}
}
     2e2:	46c0      	nop			; (mov r8, r8)
     2e4:	46bd      	mov	sp, r7
     2e6:	bd80      	pop	{r7, pc}
     2e8:	200000c4 	.word	0x200000c4
     2ec:	00000161 	.word	0x00000161
     2f0:	000001a5 	.word	0x000001a5
     2f4:	200000c8 	.word	0x200000c8

000002f8 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     2f8:	b580      	push	{r7, lr}
     2fa:	b082      	sub	sp, #8
     2fc:	af00      	add	r7, sp, #0
     2fe:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     300:	687b      	ldr	r3, [r7, #4]
     302:	2200      	movs	r2, #0
     304:	701a      	strb	r2, [r3, #0]
}
     306:	46c0      	nop			; (mov r8, r8)
     308:	46bd      	mov	sp, r7
     30a:	b002      	add	sp, #8
     30c:	bd80      	pop	{r7, pc}
	...

00000310 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     310:	b580      	push	{r7, lr}
     312:	b082      	sub	sp, #8
     314:	af00      	add	r7, sp, #0
     316:	0002      	movs	r2, r0
     318:	6039      	str	r1, [r7, #0]
     31a:	1dfb      	adds	r3, r7, #7
     31c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     31e:	1dfb      	adds	r3, r7, #7
     320:	781b      	ldrb	r3, [r3, #0]
     322:	2b01      	cmp	r3, #1
     324:	d00a      	beq.n	33c <system_apb_clock_set_mask+0x2c>
     326:	2b02      	cmp	r3, #2
     328:	d00f      	beq.n	34a <system_apb_clock_set_mask+0x3a>
     32a:	2b00      	cmp	r3, #0
     32c:	d114      	bne.n	358 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     32e:	4b0e      	ldr	r3, [pc, #56]	; (368 <system_apb_clock_set_mask+0x58>)
     330:	4a0d      	ldr	r2, [pc, #52]	; (368 <system_apb_clock_set_mask+0x58>)
     332:	6991      	ldr	r1, [r2, #24]
     334:	683a      	ldr	r2, [r7, #0]
     336:	430a      	orrs	r2, r1
     338:	619a      	str	r2, [r3, #24]
			break;
     33a:	e00f      	b.n	35c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     33c:	4b0a      	ldr	r3, [pc, #40]	; (368 <system_apb_clock_set_mask+0x58>)
     33e:	4a0a      	ldr	r2, [pc, #40]	; (368 <system_apb_clock_set_mask+0x58>)
     340:	69d1      	ldr	r1, [r2, #28]
     342:	683a      	ldr	r2, [r7, #0]
     344:	430a      	orrs	r2, r1
     346:	61da      	str	r2, [r3, #28]
			break;
     348:	e008      	b.n	35c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     34a:	4b07      	ldr	r3, [pc, #28]	; (368 <system_apb_clock_set_mask+0x58>)
     34c:	4a06      	ldr	r2, [pc, #24]	; (368 <system_apb_clock_set_mask+0x58>)
     34e:	6a11      	ldr	r1, [r2, #32]
     350:	683a      	ldr	r2, [r7, #0]
     352:	430a      	orrs	r2, r1
     354:	621a      	str	r2, [r3, #32]
			break;
     356:	e001      	b.n	35c <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     358:	2317      	movs	r3, #23
     35a:	e000      	b.n	35e <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     35c:	2300      	movs	r3, #0
}
     35e:	0018      	movs	r0, r3
     360:	46bd      	mov	sp, r7
     362:	b002      	add	sp, #8
     364:	bd80      	pop	{r7, pc}
     366:	46c0      	nop			; (mov r8, r8)
     368:	40000400 	.word	0x40000400

0000036c <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
     36c:	b580      	push	{r7, lr}
     36e:	b082      	sub	sp, #8
     370:	af00      	add	r7, sp, #0
     372:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     374:	687b      	ldr	r3, [r7, #4]
     376:	2280      	movs	r2, #128	; 0x80
     378:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     37a:	687b      	ldr	r3, [r7, #4]
     37c:	2200      	movs	r2, #0
     37e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     380:	687b      	ldr	r3, [r7, #4]
     382:	2201      	movs	r2, #1
     384:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     386:	687b      	ldr	r3, [r7, #4]
     388:	2200      	movs	r2, #0
     38a:	70da      	strb	r2, [r3, #3]
}
     38c:	46c0      	nop			; (mov r8, r8)
     38e:	46bd      	mov	sp, r7
     390:	b002      	add	sp, #8
     392:	bd80      	pop	{r7, pc}

00000394 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
     394:	b580      	push	{r7, lr}
     396:	b082      	sub	sp, #8
     398:	af00      	add	r7, sp, #0
     39a:	0002      	movs	r2, r0
     39c:	1dfb      	adds	r3, r7, #7
     39e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     3a0:	4b06      	ldr	r3, [pc, #24]	; (3bc <system_interrupt_enable+0x28>)
     3a2:	1dfa      	adds	r2, r7, #7
     3a4:	7812      	ldrb	r2, [r2, #0]
     3a6:	0011      	movs	r1, r2
     3a8:	221f      	movs	r2, #31
     3aa:	400a      	ands	r2, r1
     3ac:	2101      	movs	r1, #1
     3ae:	4091      	lsls	r1, r2
     3b0:	000a      	movs	r2, r1
     3b2:	601a      	str	r2, [r3, #0]
}
     3b4:	46c0      	nop			; (mov r8, r8)
     3b6:	46bd      	mov	sp, r7
     3b8:	b002      	add	sp, #8
     3ba:	bd80      	pop	{r7, pc}
     3bc:	e000e100 	.word	0xe000e100

000003c0 <_extint_get_eic_from_channel>:
{
     3c0:	b580      	push	{r7, lr}
     3c2:	b084      	sub	sp, #16
     3c4:	af00      	add	r7, sp, #0
     3c6:	0002      	movs	r2, r0
     3c8:	1dfb      	adds	r3, r7, #7
     3ca:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
     3cc:	230f      	movs	r3, #15
     3ce:	18fb      	adds	r3, r7, r3
     3d0:	1dfa      	adds	r2, r7, #7
     3d2:	7812      	ldrb	r2, [r2, #0]
     3d4:	0952      	lsrs	r2, r2, #5
     3d6:	701a      	strb	r2, [r3, #0]
	if (eic_index < EIC_INST_NUM) {
     3d8:	230f      	movs	r3, #15
     3da:	18fb      	adds	r3, r7, r3
     3dc:	781b      	ldrb	r3, [r3, #0]
     3de:	2b00      	cmp	r3, #0
     3e0:	d10c      	bne.n	3fc <_extint_get_eic_from_channel+0x3c>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     3e2:	4b09      	ldr	r3, [pc, #36]	; (408 <_extint_get_eic_from_channel+0x48>)
     3e4:	60bb      	str	r3, [r7, #8]
		return eics[eic_index];
     3e6:	230f      	movs	r3, #15
     3e8:	18fb      	adds	r3, r7, r3
     3ea:	781b      	ldrb	r3, [r3, #0]
     3ec:	009b      	lsls	r3, r3, #2
     3ee:	2210      	movs	r2, #16
     3f0:	4694      	mov	ip, r2
     3f2:	44bc      	add	ip, r7
     3f4:	4463      	add	r3, ip
     3f6:	3b08      	subs	r3, #8
     3f8:	681b      	ldr	r3, [r3, #0]
     3fa:	e000      	b.n	3fe <_extint_get_eic_from_channel+0x3e>
		return NULL;
     3fc:	2300      	movs	r3, #0
}
     3fe:	0018      	movs	r0, r3
     400:	46bd      	mov	sp, r7
     402:	b004      	add	sp, #16
     404:	bd80      	pop	{r7, pc}
     406:	46c0      	nop			; (mov r8, r8)
     408:	40001800 	.word	0x40001800

0000040c <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
     40c:	b580      	push	{r7, lr}
     40e:	b082      	sub	sp, #8
     410:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     412:	4b0f      	ldr	r3, [pc, #60]	; (450 <extint_is_syncing+0x44>)
     414:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     416:	2300      	movs	r3, #0
     418:	607b      	str	r3, [r7, #4]
     41a:	e011      	b.n	440 <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     41c:	687b      	ldr	r3, [r7, #4]
     41e:	009b      	lsls	r3, r3, #2
     420:	2208      	movs	r2, #8
     422:	4694      	mov	ip, r2
     424:	44bc      	add	ip, r7
     426:	4463      	add	r3, ip
     428:	3b08      	subs	r3, #8
     42a:	681b      	ldr	r3, [r3, #0]
     42c:	785b      	ldrb	r3, [r3, #1]
     42e:	b2db      	uxtb	r3, r3
     430:	b25b      	sxtb	r3, r3
     432:	2b00      	cmp	r3, #0
     434:	da01      	bge.n	43a <extint_is_syncing+0x2e>
			return true;
     436:	2301      	movs	r3, #1
     438:	e006      	b.n	448 <extint_is_syncing+0x3c>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     43a:	687b      	ldr	r3, [r7, #4]
     43c:	3301      	adds	r3, #1
     43e:	607b      	str	r3, [r7, #4]
     440:	687b      	ldr	r3, [r7, #4]
     442:	2b00      	cmp	r3, #0
     444:	d0ea      	beq.n	41c <extint_is_syncing+0x10>
		}
	}
	return false;
     446:	2300      	movs	r3, #0
}
     448:	0018      	movs	r0, r3
     44a:	46bd      	mov	sp, r7
     44c:	b002      	add	sp, #8
     44e:	bd80      	pop	{r7, pc}
     450:	40001800 	.word	0x40001800

00000454 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
     454:	b580      	push	{r7, lr}
     456:	b084      	sub	sp, #16
     458:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     45a:	4b2d      	ldr	r3, [pc, #180]	; (510 <_system_extint_init+0xbc>)
     45c:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
     45e:	2140      	movs	r1, #64	; 0x40
     460:	2000      	movs	r0, #0
     462:	4b2c      	ldr	r3, [pc, #176]	; (514 <_system_extint_init+0xc0>)
     464:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     466:	003b      	movs	r3, r7
     468:	0018      	movs	r0, r3
     46a:	4b2b      	ldr	r3, [pc, #172]	; (518 <_system_extint_init+0xc4>)
     46c:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
     46e:	003b      	movs	r3, r7
     470:	2200      	movs	r2, #0
     472:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     474:	003b      	movs	r3, r7
     476:	0019      	movs	r1, r3
     478:	2005      	movs	r0, #5
     47a:	4b28      	ldr	r3, [pc, #160]	; (51c <_system_extint_init+0xc8>)
     47c:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
     47e:	2005      	movs	r0, #5
     480:	4b27      	ldr	r3, [pc, #156]	; (520 <_system_extint_init+0xcc>)
     482:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     484:	2300      	movs	r3, #0
     486:	60fb      	str	r3, [r7, #12]
     488:	e018      	b.n	4bc <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     48a:	68fb      	ldr	r3, [r7, #12]
     48c:	009b      	lsls	r3, r3, #2
     48e:	2210      	movs	r2, #16
     490:	4694      	mov	ip, r2
     492:	44bc      	add	ip, r7
     494:	4463      	add	r3, ip
     496:	3b0c      	subs	r3, #12
     498:	681a      	ldr	r2, [r3, #0]
     49a:	68fb      	ldr	r3, [r7, #12]
     49c:	009b      	lsls	r3, r3, #2
     49e:	2110      	movs	r1, #16
     4a0:	468c      	mov	ip, r1
     4a2:	44bc      	add	ip, r7
     4a4:	4463      	add	r3, ip
     4a6:	3b0c      	subs	r3, #12
     4a8:	681b      	ldr	r3, [r3, #0]
     4aa:	781b      	ldrb	r3, [r3, #0]
     4ac:	b2db      	uxtb	r3, r3
     4ae:	2101      	movs	r1, #1
     4b0:	430b      	orrs	r3, r1
     4b2:	b2db      	uxtb	r3, r3
     4b4:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     4b6:	68fb      	ldr	r3, [r7, #12]
     4b8:	3301      	adds	r3, #1
     4ba:	60fb      	str	r3, [r7, #12]
     4bc:	68fb      	ldr	r3, [r7, #12]
     4be:	2b00      	cmp	r3, #0
     4c0:	d0e3      	beq.n	48a <_system_extint_init+0x36>
	}

	while (extint_is_syncing()) {
     4c2:	46c0      	nop			; (mov r8, r8)
     4c4:	4b17      	ldr	r3, [pc, #92]	; (524 <_system_extint_init+0xd0>)
     4c6:	4798      	blx	r3
     4c8:	1e03      	subs	r3, r0, #0
     4ca:	d1fb      	bne.n	4c4 <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     4cc:	230b      	movs	r3, #11
     4ce:	18fb      	adds	r3, r7, r3
     4d0:	2200      	movs	r2, #0
     4d2:	701a      	strb	r2, [r3, #0]
     4d4:	e00d      	b.n	4f2 <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
     4d6:	230b      	movs	r3, #11
     4d8:	18fb      	adds	r3, r7, r3
     4da:	781a      	ldrb	r2, [r3, #0]
     4dc:	4b12      	ldr	r3, [pc, #72]	; (528 <_system_extint_init+0xd4>)
     4de:	0092      	lsls	r2, r2, #2
     4e0:	2100      	movs	r1, #0
     4e2:	50d1      	str	r1, [r2, r3]
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     4e4:	230b      	movs	r3, #11
     4e6:	18fb      	adds	r3, r7, r3
     4e8:	781a      	ldrb	r2, [r3, #0]
     4ea:	230b      	movs	r3, #11
     4ec:	18fb      	adds	r3, r7, r3
     4ee:	3201      	adds	r2, #1
     4f0:	701a      	strb	r2, [r3, #0]
     4f2:	230b      	movs	r3, #11
     4f4:	18fb      	adds	r3, r7, r3
     4f6:	781b      	ldrb	r3, [r3, #0]
     4f8:	2b0f      	cmp	r3, #15
     4fa:	d9ec      	bls.n	4d6 <_system_extint_init+0x82>
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
     4fc:	2004      	movs	r0, #4
     4fe:	4b0b      	ldr	r3, [pc, #44]	; (52c <_system_extint_init+0xd8>)
     500:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
     502:	4b0b      	ldr	r3, [pc, #44]	; (530 <_system_extint_init+0xdc>)
     504:	4798      	blx	r3
}
     506:	46c0      	nop			; (mov r8, r8)
     508:	46bd      	mov	sp, r7
     50a:	b004      	add	sp, #16
     50c:	bd80      	pop	{r7, pc}
     50e:	46c0      	nop			; (mov r8, r8)
     510:	40001800 	.word	0x40001800
     514:	00000311 	.word	0x00000311
     518:	000002f9 	.word	0x000002f9
     51c:	00003765 	.word	0x00003765
     520:	000037a9 	.word	0x000037a9
     524:	0000040d 	.word	0x0000040d
     528:	200000c8 	.word	0x200000c8
     52c:	00000395 	.word	0x00000395
     530:	00000535 	.word	0x00000535

00000534 <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
     534:	b580      	push	{r7, lr}
     536:	b082      	sub	sp, #8
     538:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
     53a:	4b15      	ldr	r3, [pc, #84]	; (590 <_extint_enable+0x5c>)
     53c:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     53e:	2300      	movs	r3, #0
     540:	607b      	str	r3, [r7, #4]
     542:	e018      	b.n	576 <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     544:	687b      	ldr	r3, [r7, #4]
     546:	009b      	lsls	r3, r3, #2
     548:	2208      	movs	r2, #8
     54a:	4694      	mov	ip, r2
     54c:	44bc      	add	ip, r7
     54e:	4463      	add	r3, ip
     550:	3b08      	subs	r3, #8
     552:	681a      	ldr	r2, [r3, #0]
     554:	687b      	ldr	r3, [r7, #4]
     556:	009b      	lsls	r3, r3, #2
     558:	2108      	movs	r1, #8
     55a:	468c      	mov	ip, r1
     55c:	44bc      	add	ip, r7
     55e:	4463      	add	r3, ip
     560:	3b08      	subs	r3, #8
     562:	681b      	ldr	r3, [r3, #0]
     564:	781b      	ldrb	r3, [r3, #0]
     566:	b2db      	uxtb	r3, r3
     568:	2102      	movs	r1, #2
     56a:	430b      	orrs	r3, r1
     56c:	b2db      	uxtb	r3, r3
     56e:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     570:	687b      	ldr	r3, [r7, #4]
     572:	3301      	adds	r3, #1
     574:	607b      	str	r3, [r7, #4]
     576:	687b      	ldr	r3, [r7, #4]
     578:	2b00      	cmp	r3, #0
     57a:	d0e3      	beq.n	544 <_extint_enable+0x10>
	}

	while (extint_is_syncing()) {
     57c:	46c0      	nop			; (mov r8, r8)
     57e:	4b05      	ldr	r3, [pc, #20]	; (594 <_extint_enable+0x60>)
     580:	4798      	blx	r3
     582:	1e03      	subs	r3, r0, #0
     584:	d1fb      	bne.n	57e <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
     586:	46c0      	nop			; (mov r8, r8)
     588:	46bd      	mov	sp, r7
     58a:	b002      	add	sp, #8
     58c:	bd80      	pop	{r7, pc}
     58e:	46c0      	nop			; (mov r8, r8)
     590:	40001800 	.word	0x40001800
     594:	0000040d 	.word	0x0000040d

00000598 <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
     598:	b580      	push	{r7, lr}
     59a:	b082      	sub	sp, #8
     59c:	af00      	add	r7, sp, #0
     59e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
     5a0:	687b      	ldr	r3, [r7, #4]
     5a2:	2200      	movs	r2, #0
     5a4:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
     5a6:	687b      	ldr	r3, [r7, #4]
     5a8:	2200      	movs	r2, #0
     5aa:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
     5ac:	687b      	ldr	r3, [r7, #4]
     5ae:	2201      	movs	r2, #1
     5b0:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
     5b2:	687b      	ldr	r3, [r7, #4]
     5b4:	2201      	movs	r2, #1
     5b6:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
     5b8:	687b      	ldr	r3, [r7, #4]
     5ba:	2200      	movs	r2, #0
     5bc:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
     5be:	687b      	ldr	r3, [r7, #4]
     5c0:	2202      	movs	r2, #2
     5c2:	72da      	strb	r2, [r3, #11]
}
     5c4:	46c0      	nop			; (mov r8, r8)
     5c6:	46bd      	mov	sp, r7
     5c8:	b002      	add	sp, #8
     5ca:	bd80      	pop	{r7, pc}

000005cc <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
     5cc:	b580      	push	{r7, lr}
     5ce:	b086      	sub	sp, #24
     5d0:	af00      	add	r7, sp, #0
     5d2:	0002      	movs	r2, r0
     5d4:	6039      	str	r1, [r7, #0]
     5d6:	1dfb      	adds	r3, r7, #7
     5d8:	701a      	strb	r2, [r3, #0]
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
     5da:	2308      	movs	r3, #8
     5dc:	18fb      	adds	r3, r7, r3
     5de:	0018      	movs	r0, r3
     5e0:	4b36      	ldr	r3, [pc, #216]	; (6bc <extint_chan_set_config+0xf0>)
     5e2:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
     5e4:	683b      	ldr	r3, [r7, #0]
     5e6:	685b      	ldr	r3, [r3, #4]
     5e8:	b2da      	uxtb	r2, r3
     5ea:	2308      	movs	r3, #8
     5ec:	18fb      	adds	r3, r7, r3
     5ee:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     5f0:	2308      	movs	r3, #8
     5f2:	18fb      	adds	r3, r7, r3
     5f4:	2200      	movs	r2, #0
     5f6:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
     5f8:	683b      	ldr	r3, [r7, #0]
     5fa:	7a1a      	ldrb	r2, [r3, #8]
     5fc:	2308      	movs	r3, #8
     5fe:	18fb      	adds	r3, r7, r3
     600:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
     602:	683b      	ldr	r3, [r7, #0]
     604:	681b      	ldr	r3, [r3, #0]
     606:	b2db      	uxtb	r3, r3
     608:	2208      	movs	r2, #8
     60a:	18ba      	adds	r2, r7, r2
     60c:	0011      	movs	r1, r2
     60e:	0018      	movs	r0, r3
     610:	4b2b      	ldr	r3, [pc, #172]	; (6c0 <extint_chan_set_config+0xf4>)
     612:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
     614:	1dfb      	adds	r3, r7, #7
     616:	781b      	ldrb	r3, [r3, #0]
     618:	0018      	movs	r0, r3
     61a:	4b2a      	ldr	r3, [pc, #168]	; (6c4 <extint_chan_set_config+0xf8>)
     61c:	4798      	blx	r3
     61e:	0003      	movs	r3, r0
     620:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
     622:	1dfb      	adds	r3, r7, #7
     624:	781b      	ldrb	r3, [r3, #0]
     626:	2207      	movs	r2, #7
     628:	4013      	ands	r3, r2
     62a:	009b      	lsls	r3, r3, #2
     62c:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
     62e:	683b      	ldr	r3, [r7, #0]
     630:	7adb      	ldrb	r3, [r3, #11]
     632:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
     634:	683b      	ldr	r3, [r7, #0]
     636:	7a9b      	ldrb	r3, [r3, #10]
     638:	2b00      	cmp	r3, #0
     63a:	d003      	beq.n	644 <extint_chan_set_config+0x78>
		new_config |= EIC_CONFIG_FILTEN0;
     63c:	697b      	ldr	r3, [r7, #20]
     63e:	2208      	movs	r2, #8
     640:	4313      	orrs	r3, r2
     642:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
     644:	1dfb      	adds	r3, r7, #7
     646:	781b      	ldrb	r3, [r3, #0]
     648:	08db      	lsrs	r3, r3, #3
     64a:	b2db      	uxtb	r3, r3
     64c:	0018      	movs	r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
     64e:	1dfb      	adds	r3, r7, #7
     650:	781b      	ldrb	r3, [r3, #0]
     652:	08db      	lsrs	r3, r3, #3
     654:	b2db      	uxtb	r3, r3
     656:	001a      	movs	r2, r3
     658:	693b      	ldr	r3, [r7, #16]
     65a:	3206      	adds	r2, #6
     65c:	0092      	lsls	r2, r2, #2
     65e:	58d3      	ldr	r3, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     660:	210f      	movs	r1, #15
     662:	68fa      	ldr	r2, [r7, #12]
     664:	4091      	lsls	r1, r2
     666:	000a      	movs	r2, r1
     668:	43d2      	mvns	r2, r2
		= (EIC_module->CONFIG[channel / 8].reg &
     66a:	401a      	ands	r2, r3
			(new_config << config_pos);
     66c:	6979      	ldr	r1, [r7, #20]
     66e:	68fb      	ldr	r3, [r7, #12]
     670:	4099      	lsls	r1, r3
     672:	000b      	movs	r3, r1
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     674:	431a      	orrs	r2, r3
     676:	0011      	movs	r1, r2
		= (EIC_module->CONFIG[channel / 8].reg &
     678:	693b      	ldr	r3, [r7, #16]
     67a:	1d82      	adds	r2, r0, #6
     67c:	0092      	lsls	r2, r2, #2
     67e:	50d1      	str	r1, [r2, r3]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
     680:	683b      	ldr	r3, [r7, #0]
     682:	7a5b      	ldrb	r3, [r3, #9]
     684:	2b00      	cmp	r3, #0
     686:	d00a      	beq.n	69e <extint_chan_set_config+0xd2>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
     688:	693b      	ldr	r3, [r7, #16]
     68a:	695a      	ldr	r2, [r3, #20]
     68c:	1dfb      	adds	r3, r7, #7
     68e:	781b      	ldrb	r3, [r3, #0]
     690:	2101      	movs	r1, #1
     692:	4099      	lsls	r1, r3
     694:	000b      	movs	r3, r1
     696:	431a      	orrs	r2, r3
     698:	693b      	ldr	r3, [r7, #16]
     69a:	615a      	str	r2, [r3, #20]
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
	}
}
     69c:	e00a      	b.n	6b4 <extint_chan_set_config+0xe8>
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
     69e:	693b      	ldr	r3, [r7, #16]
     6a0:	695b      	ldr	r3, [r3, #20]
     6a2:	1dfa      	adds	r2, r7, #7
     6a4:	7812      	ldrb	r2, [r2, #0]
     6a6:	2101      	movs	r1, #1
     6a8:	4091      	lsls	r1, r2
     6aa:	000a      	movs	r2, r1
     6ac:	43d2      	mvns	r2, r2
     6ae:	401a      	ands	r2, r3
     6b0:	693b      	ldr	r3, [r7, #16]
     6b2:	615a      	str	r2, [r3, #20]
}
     6b4:	46c0      	nop			; (mov r8, r8)
     6b6:	46bd      	mov	sp, r7
     6b8:	b006      	add	sp, #24
     6ba:	bd80      	pop	{r7, pc}
     6bc:	0000036d 	.word	0x0000036d
     6c0:	00003a51 	.word	0x00003a51
     6c4:	000003c1 	.word	0x000003c1

000006c8 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     6c8:	b580      	push	{r7, lr}
     6ca:	b084      	sub	sp, #16
     6cc:	af00      	add	r7, sp, #0
     6ce:	0002      	movs	r2, r0
     6d0:	1dfb      	adds	r3, r7, #7
     6d2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     6d4:	230f      	movs	r3, #15
     6d6:	18fb      	adds	r3, r7, r3
     6d8:	1dfa      	adds	r2, r7, #7
     6da:	7812      	ldrb	r2, [r2, #0]
     6dc:	09d2      	lsrs	r2, r2, #7
     6de:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     6e0:	230e      	movs	r3, #14
     6e2:	18fb      	adds	r3, r7, r3
     6e4:	1dfa      	adds	r2, r7, #7
     6e6:	7812      	ldrb	r2, [r2, #0]
     6e8:	0952      	lsrs	r2, r2, #5
     6ea:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     6ec:	4b0d      	ldr	r3, [pc, #52]	; (724 <system_pinmux_get_group_from_gpio_pin+0x5c>)
     6ee:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
     6f0:	230f      	movs	r3, #15
     6f2:	18fb      	adds	r3, r7, r3
     6f4:	781b      	ldrb	r3, [r3, #0]
     6f6:	2b00      	cmp	r3, #0
     6f8:	d10f      	bne.n	71a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     6fa:	230f      	movs	r3, #15
     6fc:	18fb      	adds	r3, r7, r3
     6fe:	781b      	ldrb	r3, [r3, #0]
     700:	009b      	lsls	r3, r3, #2
     702:	2210      	movs	r2, #16
     704:	4694      	mov	ip, r2
     706:	44bc      	add	ip, r7
     708:	4463      	add	r3, ip
     70a:	3b08      	subs	r3, #8
     70c:	681a      	ldr	r2, [r3, #0]
     70e:	230e      	movs	r3, #14
     710:	18fb      	adds	r3, r7, r3
     712:	781b      	ldrb	r3, [r3, #0]
     714:	01db      	lsls	r3, r3, #7
     716:	18d3      	adds	r3, r2, r3
     718:	e000      	b.n	71c <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
     71a:	2300      	movs	r3, #0
	}
}
     71c:	0018      	movs	r0, r3
     71e:	46bd      	mov	sp, r7
     720:	b004      	add	sp, #16
     722:	bd80      	pop	{r7, pc}
     724:	41004400 	.word	0x41004400

00000728 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     728:	b580      	push	{r7, lr}
     72a:	b082      	sub	sp, #8
     72c:	af00      	add	r7, sp, #0
     72e:	0002      	movs	r2, r0
     730:	1dfb      	adds	r3, r7, #7
     732:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     734:	1dfb      	adds	r3, r7, #7
     736:	781b      	ldrb	r3, [r3, #0]
     738:	0018      	movs	r0, r3
     73a:	4b03      	ldr	r3, [pc, #12]	; (748 <port_get_group_from_gpio_pin+0x20>)
     73c:	4798      	blx	r3
     73e:	0003      	movs	r3, r0
}
     740:	0018      	movs	r0, r3
     742:	46bd      	mov	sp, r7
     744:	b002      	add	sp, #8
     746:	bd80      	pop	{r7, pc}
     748:	000006c9 	.word	0x000006c9

0000074c <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
     74c:	b580      	push	{r7, lr}
     74e:	b082      	sub	sp, #8
     750:	af00      	add	r7, sp, #0
     752:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
     754:	687b      	ldr	r3, [r7, #4]
     756:	2200      	movs	r2, #0
     758:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     75a:	687b      	ldr	r3, [r7, #4]
     75c:	2201      	movs	r2, #1
     75e:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
     760:	687b      	ldr	r3, [r7, #4]
     762:	2200      	movs	r2, #0
     764:	709a      	strb	r2, [r3, #2]
}
     766:	46c0      	nop			; (mov r8, r8)
     768:	46bd      	mov	sp, r7
     76a:	b002      	add	sp, #8
     76c:	bd80      	pop	{r7, pc}
	...

00000770 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
     770:	b580      	push	{r7, lr}
     772:	b084      	sub	sp, #16
     774:	af00      	add	r7, sp, #0
     776:	0002      	movs	r2, r0
     778:	1dfb      	adds	r3, r7, #7
     77a:	701a      	strb	r2, [r3, #0]
     77c:	1dbb      	adds	r3, r7, #6
     77e:	1c0a      	adds	r2, r1, #0
     780:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     782:	1dfb      	adds	r3, r7, #7
     784:	781b      	ldrb	r3, [r3, #0]
     786:	0018      	movs	r0, r3
     788:	4b0d      	ldr	r3, [pc, #52]	; (7c0 <port_pin_set_output_level+0x50>)
     78a:	4798      	blx	r3
     78c:	0003      	movs	r3, r0
     78e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     790:	1dfb      	adds	r3, r7, #7
     792:	781b      	ldrb	r3, [r3, #0]
     794:	221f      	movs	r2, #31
     796:	4013      	ands	r3, r2
     798:	2201      	movs	r2, #1
     79a:	409a      	lsls	r2, r3
     79c:	0013      	movs	r3, r2
     79e:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
     7a0:	1dbb      	adds	r3, r7, #6
     7a2:	781b      	ldrb	r3, [r3, #0]
     7a4:	2b00      	cmp	r3, #0
     7a6:	d003      	beq.n	7b0 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
     7a8:	68fb      	ldr	r3, [r7, #12]
     7aa:	68ba      	ldr	r2, [r7, #8]
     7ac:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
     7ae:	e002      	b.n	7b6 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
     7b0:	68fb      	ldr	r3, [r7, #12]
     7b2:	68ba      	ldr	r2, [r7, #8]
     7b4:	615a      	str	r2, [r3, #20]
}
     7b6:	46c0      	nop			; (mov r8, r8)
     7b8:	46bd      	mov	sp, r7
     7ba:	b004      	add	sp, #16
     7bc:	bd80      	pop	{r7, pc}
     7be:	46c0      	nop			; (mov r8, r8)
     7c0:	00000729 	.word	0x00000729

000007c4 <system_interrupt_enable_global>:
{
     7c4:	b580      	push	{r7, lr}
     7c6:	af00      	add	r7, sp, #0
	cpu_irq_enable();
     7c8:	4b04      	ldr	r3, [pc, #16]	; (7dc <system_interrupt_enable_global+0x18>)
     7ca:	2201      	movs	r2, #1
     7cc:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     7ce:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     7d2:	b662      	cpsie	i
}
     7d4:	46c0      	nop			; (mov r8, r8)
     7d6:	46bd      	mov	sp, r7
     7d8:	bd80      	pop	{r7, pc}
     7da:	46c0      	nop			; (mov r8, r8)
     7dc:	20000008 	.word	0x20000008

000007e0 <rotenc_init>:
 */ 

#include "wakeup.h"

void rotenc_init(void)
{
     7e0:	b580      	push	{r7, lr}
     7e2:	b082      	sub	sp, #8
     7e4:	af00      	add	r7, sp, #0
	configure_extint_channel_a();
     7e6:	4b15      	ldr	r3, [pc, #84]	; (83c <rotenc_init+0x5c>)
     7e8:	4798      	blx	r3
	//configure_extint_channel_b();
	configure_extint_callbacks_A();
     7ea:	4b15      	ldr	r3, [pc, #84]	; (840 <rotenc_init+0x60>)
     7ec:	4798      	blx	r3
	//configure_extint_callbacks_B();
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
     7ee:	1d3b      	adds	r3, r7, #4
     7f0:	0018      	movs	r0, r3
     7f2:	4b14      	ldr	r3, [pc, #80]	; (844 <rotenc_init+0x64>)
     7f4:	4798      	blx	r3
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
     7f6:	1d3b      	adds	r3, r7, #4
     7f8:	2201      	movs	r2, #1
     7fa:	701a      	strb	r2, [r3, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;
     7fc:	1d3b      	adds	r3, r7, #4
     7fe:	2202      	movs	r2, #2
     800:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(SIG_DONE_PIN, &config_port_pin);
     802:	1d3b      	adds	r3, r7, #4
     804:	0019      	movs	r1, r3
     806:	200f      	movs	r0, #15
     808:	4b0f      	ldr	r3, [pc, #60]	; (848 <rotenc_init+0x68>)
     80a:	4798      	blx	r3
	port_pin_set_output_level(SIG_DONE_PIN,0);
     80c:	2100      	movs	r1, #0
     80e:	200f      	movs	r0, #15
     810:	4b0e      	ldr	r3, [pc, #56]	; (84c <rotenc_init+0x6c>)
     812:	4798      	blx	r3
	delay_ms(10);
     814:	200a      	movs	r0, #10
     816:	4b0e      	ldr	r3, [pc, #56]	; (850 <rotenc_init+0x70>)
     818:	4798      	blx	r3
	port_pin_set_output_level(SIG_DONE_PIN,1);
     81a:	2101      	movs	r1, #1
     81c:	200f      	movs	r0, #15
     81e:	4b0b      	ldr	r3, [pc, #44]	; (84c <rotenc_init+0x6c>)
     820:	4798      	blx	r3
	delay_ms(10);
     822:	200a      	movs	r0, #10
     824:	4b0a      	ldr	r3, [pc, #40]	; (850 <rotenc_init+0x70>)
     826:	4798      	blx	r3
	port_pin_set_output_level(SIG_DONE_PIN,0);	
     828:	2100      	movs	r1, #0
     82a:	200f      	movs	r0, #15
     82c:	4b07      	ldr	r3, [pc, #28]	; (84c <rotenc_init+0x6c>)
     82e:	4798      	blx	r3
	system_interrupt_enable_global();
     830:	4b08      	ldr	r3, [pc, #32]	; (854 <rotenc_init+0x74>)
     832:	4798      	blx	r3
}
     834:	46c0      	nop			; (mov r8, r8)
     836:	46bd      	mov	sp, r7
     838:	b002      	add	sp, #8
     83a:	bd80      	pop	{r7, pc}
     83c:	00000859 	.word	0x00000859
     840:	000008a9 	.word	0x000008a9
     844:	0000074d 	.word	0x0000074d
     848:	00002ef1 	.word	0x00002ef1
     84c:	00000771 	.word	0x00000771
     850:	00000c4d 	.word	0x00000c4d
     854:	000007c5 	.word	0x000007c5

00000858 <configure_extint_channel_a>:


void configure_extint_channel_a(void)
{
     858:	b580      	push	{r7, lr}
     85a:	b084      	sub	sp, #16
     85c:	af00      	add	r7, sp, #0
	struct extint_chan_conf config_extint_chan;
	extint_chan_get_config_defaults(&config_extint_chan);
     85e:	1d3b      	adds	r3, r7, #4
     860:	0018      	movs	r0, r3
     862:	4b0f      	ldr	r3, [pc, #60]	; (8a0 <configure_extint_channel_a+0x48>)
     864:	4798      	blx	r3
	config_extint_chan.gpio_pin           = SIG_WAKE;
     866:	1d3b      	adds	r3, r7, #4
     868:	220e      	movs	r2, #14
     86a:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux       = SIG_WAKE_MUX;
     86c:	1d3b      	adds	r3, r7, #4
     86e:	22e0      	movs	r2, #224	; 0xe0
     870:	0312      	lsls	r2, r2, #12
     872:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_DOWN;
     874:	1d3b      	adds	r3, r7, #4
     876:	2202      	movs	r2, #2
     878:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
     87a:	1d3b      	adds	r3, r7, #4
     87c:	2201      	movs	r2, #1
     87e:	72da      	strb	r2, [r3, #11]
	config_extint_chan.filter_input_signal = false;
     880:	1d3b      	adds	r3, r7, #4
     882:	2200      	movs	r2, #0
     884:	729a      	strb	r2, [r3, #10]
	config_extint_chan.wake_if_sleeping = true;
     886:	1d3b      	adds	r3, r7, #4
     888:	2201      	movs	r2, #1
     88a:	725a      	strb	r2, [r3, #9]
	extint_chan_set_config(14, &config_extint_chan);
     88c:	1d3b      	adds	r3, r7, #4
     88e:	0019      	movs	r1, r3
     890:	200e      	movs	r0, #14
     892:	4b04      	ldr	r3, [pc, #16]	; (8a4 <configure_extint_channel_a+0x4c>)
     894:	4798      	blx	r3
}
     896:	46c0      	nop			; (mov r8, r8)
     898:	46bd      	mov	sp, r7
     89a:	b004      	add	sp, #16
     89c:	bd80      	pop	{r7, pc}
     89e:	46c0      	nop			; (mov r8, r8)
     8a0:	00000599 	.word	0x00000599
     8a4:	000005cd 	.word	0x000005cd

000008a8 <configure_extint_callbacks_A>:

void configure_extint_callbacks_A(void)
{
     8a8:	b580      	push	{r7, lr}
     8aa:	af00      	add	r7, sp, #0
	extint_register_callback(callback_a,14,	EXTINT_CALLBACK_TYPE_DETECT);
     8ac:	4b06      	ldr	r3, [pc, #24]	; (8c8 <configure_extint_callbacks_A+0x20>)
     8ae:	2200      	movs	r2, #0
     8b0:	210e      	movs	r1, #14
     8b2:	0018      	movs	r0, r3
     8b4:	4b05      	ldr	r3, [pc, #20]	; (8cc <configure_extint_callbacks_A+0x24>)
     8b6:	4798      	blx	r3
	extint_chan_enable_callback(14,	EXTINT_CALLBACK_TYPE_DETECT);
     8b8:	2100      	movs	r1, #0
     8ba:	200e      	movs	r0, #14
     8bc:	4b04      	ldr	r3, [pc, #16]	; (8d0 <configure_extint_callbacks_A+0x28>)
     8be:	4798      	blx	r3
}
     8c0:	46c0      	nop			; (mov r8, r8)
     8c2:	46bd      	mov	sp, r7
     8c4:	bd80      	pop	{r7, pc}
     8c6:	46c0      	nop			; (mov r8, r8)
     8c8:	000008d5 	.word	0x000008d5
     8cc:	000001e1 	.word	0x000001e1
     8d0:	00000245 	.word	0x00000245

000008d4 <callback_a>:

void callback_a(void)
{
     8d4:	b580      	push	{r7, lr}
     8d6:	af00      	add	r7, sp, #0
	uart_write("WAKEUP\r\n");
     8d8:	4b0a      	ldr	r3, [pc, #40]	; (904 <callback_a+0x30>)
     8da:	0018      	movs	r0, r3
     8dc:	4b0a      	ldr	r3, [pc, #40]	; (908 <callback_a+0x34>)
     8de:	4798      	blx	r3
	port_pin_set_output_level(SIG_DONE_PIN,1);
     8e0:	2101      	movs	r1, #1
     8e2:	200f      	movs	r0, #15
     8e4:	4b09      	ldr	r3, [pc, #36]	; (90c <callback_a+0x38>)
     8e6:	4798      	blx	r3
	delay_ms(10);
     8e8:	200a      	movs	r0, #10
     8ea:	4b09      	ldr	r3, [pc, #36]	; (910 <callback_a+0x3c>)
     8ec:	4798      	blx	r3
	port_pin_set_output_level(SIG_DONE_PIN,0);	
     8ee:	2100      	movs	r1, #0
     8f0:	200f      	movs	r0, #15
     8f2:	4b06      	ldr	r3, [pc, #24]	; (90c <callback_a+0x38>)
     8f4:	4798      	blx	r3
	woke = true;
     8f6:	4b07      	ldr	r3, [pc, #28]	; (914 <callback_a+0x40>)
     8f8:	2201      	movs	r2, #1
     8fa:	701a      	strb	r2, [r3, #0]
}
     8fc:	46c0      	nop			; (mov r8, r8)
     8fe:	46bd      	mov	sp, r7
     900:	bd80      	pop	{r7, pc}
     902:	46c0      	nop			; (mov r8, r8)
     904:	0000813c 	.word	0x0000813c
     908:	00000b79 	.word	0x00000b79
     90c:	00000771 	.word	0x00000771
     910:	00000c4d 	.word	0x00000c4d
     914:	20000108 	.word	0x20000108

00000918 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
     918:	b580      	push	{r7, lr}
     91a:	b082      	sub	sp, #8
     91c:	af00      	add	r7, sp, #0
     91e:	0002      	movs	r2, r0
     920:	1dfb      	adds	r3, r7, #7
     922:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     924:	4b06      	ldr	r3, [pc, #24]	; (940 <NVIC_EnableIRQ+0x28>)
     926:	1dfa      	adds	r2, r7, #7
     928:	7812      	ldrb	r2, [r2, #0]
     92a:	0011      	movs	r1, r2
     92c:	221f      	movs	r2, #31
     92e:	400a      	ands	r2, r1
     930:	2101      	movs	r1, #1
     932:	4091      	lsls	r1, r2
     934:	000a      	movs	r2, r1
     936:	601a      	str	r2, [r3, #0]
}
     938:	46c0      	nop			; (mov r8, r8)
     93a:	46bd      	mov	sp, r7
     93c:	b002      	add	sp, #8
     93e:	bd80      	pop	{r7, pc}
     940:	e000e100 	.word	0xe000e100

00000944 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
     944:	b5b0      	push	{r4, r5, r7, lr}
     946:	b082      	sub	sp, #8
     948:	af00      	add	r7, sp, #0
     94a:	0002      	movs	r2, r0
     94c:	6039      	str	r1, [r7, #0]
     94e:	1dfb      	adds	r3, r7, #7
     950:	701a      	strb	r2, [r3, #0]
  if(IRQn < 0) {
     952:	1dfb      	adds	r3, r7, #7
     954:	781b      	ldrb	r3, [r3, #0]
     956:	2b7f      	cmp	r3, #127	; 0x7f
     958:	d932      	bls.n	9c0 <NVIC_SetPriority+0x7c>
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     95a:	4c2f      	ldr	r4, [pc, #188]	; (a18 <NVIC_SetPriority+0xd4>)
     95c:	1dfb      	adds	r3, r7, #7
     95e:	781b      	ldrb	r3, [r3, #0]
     960:	001a      	movs	r2, r3
     962:	230f      	movs	r3, #15
     964:	4013      	ands	r3, r2
     966:	3b08      	subs	r3, #8
     968:	0899      	lsrs	r1, r3, #2
     96a:	4a2b      	ldr	r2, [pc, #172]	; (a18 <NVIC_SetPriority+0xd4>)
     96c:	1dfb      	adds	r3, r7, #7
     96e:	781b      	ldrb	r3, [r3, #0]
     970:	0018      	movs	r0, r3
     972:	230f      	movs	r3, #15
     974:	4003      	ands	r3, r0
     976:	3b08      	subs	r3, #8
     978:	089b      	lsrs	r3, r3, #2
     97a:	3306      	adds	r3, #6
     97c:	009b      	lsls	r3, r3, #2
     97e:	18d3      	adds	r3, r2, r3
     980:	3304      	adds	r3, #4
     982:	681b      	ldr	r3, [r3, #0]
     984:	1dfa      	adds	r2, r7, #7
     986:	7812      	ldrb	r2, [r2, #0]
     988:	0010      	movs	r0, r2
     98a:	2203      	movs	r2, #3
     98c:	4002      	ands	r2, r0
     98e:	00d2      	lsls	r2, r2, #3
     990:	20ff      	movs	r0, #255	; 0xff
     992:	4090      	lsls	r0, r2
     994:	0002      	movs	r2, r0
     996:	43d2      	mvns	r2, r2
     998:	401a      	ands	r2, r3
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
     99a:	683b      	ldr	r3, [r7, #0]
     99c:	019b      	lsls	r3, r3, #6
     99e:	20ff      	movs	r0, #255	; 0xff
     9a0:	4018      	ands	r0, r3
     9a2:	1dfb      	adds	r3, r7, #7
     9a4:	781b      	ldrb	r3, [r3, #0]
     9a6:	001d      	movs	r5, r3
     9a8:	2303      	movs	r3, #3
     9aa:	402b      	ands	r3, r5
     9ac:	00db      	lsls	r3, r3, #3
     9ae:	4098      	lsls	r0, r3
     9b0:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     9b2:	431a      	orrs	r2, r3
     9b4:	1d8b      	adds	r3, r1, #6
     9b6:	009b      	lsls	r3, r3, #2
     9b8:	18e3      	adds	r3, r4, r3
     9ba:	3304      	adds	r3, #4
     9bc:	601a      	str	r2, [r3, #0]
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
}
     9be:	e027      	b.n	a10 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     9c0:	4c16      	ldr	r4, [pc, #88]	; (a1c <NVIC_SetPriority+0xd8>)
     9c2:	1dfb      	adds	r3, r7, #7
     9c4:	781b      	ldrb	r3, [r3, #0]
     9c6:	b25b      	sxtb	r3, r3
     9c8:	089b      	lsrs	r3, r3, #2
     9ca:	4914      	ldr	r1, [pc, #80]	; (a1c <NVIC_SetPriority+0xd8>)
     9cc:	1dfa      	adds	r2, r7, #7
     9ce:	7812      	ldrb	r2, [r2, #0]
     9d0:	b252      	sxtb	r2, r2
     9d2:	0892      	lsrs	r2, r2, #2
     9d4:	32c0      	adds	r2, #192	; 0xc0
     9d6:	0092      	lsls	r2, r2, #2
     9d8:	5852      	ldr	r2, [r2, r1]
     9da:	1df9      	adds	r1, r7, #7
     9dc:	7809      	ldrb	r1, [r1, #0]
     9de:	0008      	movs	r0, r1
     9e0:	2103      	movs	r1, #3
     9e2:	4001      	ands	r1, r0
     9e4:	00c9      	lsls	r1, r1, #3
     9e6:	20ff      	movs	r0, #255	; 0xff
     9e8:	4088      	lsls	r0, r1
     9ea:	0001      	movs	r1, r0
     9ec:	43c9      	mvns	r1, r1
     9ee:	4011      	ands	r1, r2
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
     9f0:	683a      	ldr	r2, [r7, #0]
     9f2:	0192      	lsls	r2, r2, #6
     9f4:	20ff      	movs	r0, #255	; 0xff
     9f6:	4010      	ands	r0, r2
     9f8:	1dfa      	adds	r2, r7, #7
     9fa:	7812      	ldrb	r2, [r2, #0]
     9fc:	0015      	movs	r5, r2
     9fe:	2203      	movs	r2, #3
     a00:	402a      	ands	r2, r5
     a02:	00d2      	lsls	r2, r2, #3
     a04:	4090      	lsls	r0, r2
     a06:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     a08:	430a      	orrs	r2, r1
     a0a:	33c0      	adds	r3, #192	; 0xc0
     a0c:	009b      	lsls	r3, r3, #2
     a0e:	511a      	str	r2, [r3, r4]
}
     a10:	46c0      	nop			; (mov r8, r8)
     a12:	46bd      	mov	sp, r7
     a14:	b002      	add	sp, #8
     a16:	bdb0      	pop	{r4, r5, r7, pc}
     a18:	e000ed00 	.word	0xe000ed00
     a1c:	e000e100 	.word	0xe000e100

00000a20 <uart_clk_init>:

#include "uart.h"


void uart_clk_init(void)
{
     a20:	b580      	push	{r7, lr}
     a22:	af00      	add	r7, sp, #0
	// Start the Software Reset and wait for it to finish
	UART_MODULE->USART.CTRLA.bit.SWRST = 1 ;
     a24:	4a13      	ldr	r2, [pc, #76]	; (a74 <uart_clk_init+0x54>)
     a26:	6813      	ldr	r3, [r2, #0]
     a28:	2101      	movs	r1, #1
     a2a:	430b      	orrs	r3, r1
     a2c:	6013      	str	r3, [r2, #0]
	while ( UART_MODULE->USART.CTRLA.bit.SWRST || UART_MODULE->USART.SYNCBUSY.bit.SWRST );
     a2e:	46c0      	nop			; (mov r8, r8)
     a30:	4b10      	ldr	r3, [pc, #64]	; (a74 <uart_clk_init+0x54>)
     a32:	681b      	ldr	r3, [r3, #0]
     a34:	07db      	lsls	r3, r3, #31
     a36:	0fdb      	lsrs	r3, r3, #31
     a38:	b2db      	uxtb	r3, r3
     a3a:	2b00      	cmp	r3, #0
     a3c:	d1f8      	bne.n	a30 <uart_clk_init+0x10>
     a3e:	4b0d      	ldr	r3, [pc, #52]	; (a74 <uart_clk_init+0x54>)
     a40:	69db      	ldr	r3, [r3, #28]
     a42:	07db      	lsls	r3, r3, #31
     a44:	0fdb      	lsrs	r3, r3, #31
     a46:	b2db      	uxtb	r3, r3
     a48:	2b00      	cmp	r3, #0
     a4a:	d1f1      	bne.n	a30 <uart_clk_init+0x10>
	
	// Turn on peripheral clock for SERCOM being used
	PM->APBCMASK.reg |= PM_APBCMASK_SERCOM5;
     a4c:	4b0a      	ldr	r3, [pc, #40]	; (a78 <uart_clk_init+0x58>)
     a4e:	4a0a      	ldr	r2, [pc, #40]	; (a78 <uart_clk_init+0x58>)
     a50:	6a12      	ldr	r2, [r2, #32]
     a52:	2180      	movs	r1, #128	; 0x80
     a54:	430a      	orrs	r2, r1
     a56:	621a      	str	r2, [r3, #32]

	//Setting clock
	GCLK->CLKCTRL.reg =
     a58:	4b08      	ldr	r3, [pc, #32]	; (a7c <uart_clk_init+0x5c>)
     a5a:	4a09      	ldr	r2, [pc, #36]	; (a80 <uart_clk_init+0x60>)
     a5c:	805a      	strh	r2, [r3, #2]
	GCLK_CLKCTRL_ID( GCM_SERCOM5_CORE )	|	// connected  SERCOMx to
	GCLK_CLKCTRL_GEN_GCLK0		|	// generic Clock Generator 0
	GCLK_CLKCTRL_CLKEN;			// and enable it

	while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY ); // Wait for synchronization
     a5e:	46c0      	nop			; (mov r8, r8)
     a60:	4b06      	ldr	r3, [pc, #24]	; (a7c <uart_clk_init+0x5c>)
     a62:	785b      	ldrb	r3, [r3, #1]
     a64:	b2db      	uxtb	r3, r3
     a66:	b25b      	sxtb	r3, r3
     a68:	2b00      	cmp	r3, #0
     a6a:	dbf9      	blt.n	a60 <uart_clk_init+0x40>
}
     a6c:	46c0      	nop			; (mov r8, r8)
     a6e:	46bd      	mov	sp, r7
     a70:	bd80      	pop	{r7, pc}
     a72:	46c0      	nop			; (mov r8, r8)
     a74:	42001c00 	.word	0x42001c00
     a78:	40000400 	.word	0x40000400
     a7c:	40000c00 	.word	0x40000c00
     a80:	00004019 	.word	0x00004019

00000a84 <uart_pin_init>:

void uart_pin_init(void)
{
     a84:	b580      	push	{r7, lr}
     a86:	b082      	sub	sp, #8
     a88:	af00      	add	r7, sp, #0
	//PORT->Group[PORTGROUP_A].DIRCLR.reg = PORT_PA05;	// RX as input
	
	PORT->Group[PORTGROUP_B].DIRSET.reg = PORT_PB02;	// TX as output
     a8a:	4a1a      	ldr	r2, [pc, #104]	; (af4 <uart_pin_init+0x70>)
     a8c:	2388      	movs	r3, #136	; 0x88
     a8e:	2104      	movs	r1, #4
     a90:	50d1      	str	r1, [r2, r3]
	PORT->Group[PORTGROUP_B].OUTSET.reg = PORT_PB02;	// TX idle state is high
     a92:	4a18      	ldr	r2, [pc, #96]	; (af4 <uart_pin_init+0x70>)
     a94:	2398      	movs	r3, #152	; 0x98
     a96:	2104      	movs	r1, #4
     a98:	50d1      	str	r1, [r2, r3]

	// set port multiplexer for peripheral TX
	// =======================================
	uint32_t temp = (PORT->Group[PORTGROUP_B].PMUX[UART_TX_PIN>>1].reg) & PORT_PMUX_PMUXO( PORT_PMUX_PMUXO_D_Val );
     a9a:	4a16      	ldr	r2, [pc, #88]	; (af4 <uart_pin_init+0x70>)
     a9c:	23b1      	movs	r3, #177	; 0xb1
     a9e:	5cd3      	ldrb	r3, [r2, r3]
     aa0:	b2db      	uxtb	r3, r3
     aa2:	001a      	movs	r2, r3
     aa4:	2330      	movs	r3, #48	; 0x30
     aa6:	4013      	ands	r3, r2
     aa8:	607b      	str	r3, [r7, #4]
	PORT->Group[PORTGROUP_B].PMUX[UART_TX_PIN>>1].reg = temp | PORT_PMUX_PMUXE( PORT_PMUX_PMUXE_D_Val );
     aaa:	4a12      	ldr	r2, [pc, #72]	; (af4 <uart_pin_init+0x70>)
     aac:	687b      	ldr	r3, [r7, #4]
     aae:	b2db      	uxtb	r3, r3
     ab0:	2103      	movs	r1, #3
     ab2:	430b      	orrs	r3, r1
     ab4:	b2d9      	uxtb	r1, r3
     ab6:	23b1      	movs	r3, #177	; 0xb1
     ab8:	54d1      	strb	r1, [r2, r3]
	
	PORT->Group[PORTGROUP_B].PINCFG[UART_TX_PIN].reg = PORT_PINCFG_PMUXEN ; // Enable port mux
     aba:	4a0e      	ldr	r2, [pc, #56]	; (af4 <uart_pin_init+0x70>)
     abc:	23c2      	movs	r3, #194	; 0xc2
     abe:	2101      	movs	r1, #1
     ac0:	54d1      	strb	r1, [r2, r3]
	temp = (PORT->Group[PORTGROUP_B].PMUX[UART_RX_PIN>>1].reg) & PORT_PMUX_PMUXO( PORT_PMUX_PMUXO_D_Val );
     ac2:	4a0c      	ldr	r2, [pc, #48]	; (af4 <uart_pin_init+0x70>)
     ac4:	23b2      	movs	r3, #178	; 0xb2
     ac6:	5cd3      	ldrb	r3, [r2, r3]
     ac8:	b2db      	uxtb	r3, r3
     aca:	001a      	movs	r2, r3
     acc:	2330      	movs	r3, #48	; 0x30
     ace:	4013      	ands	r3, r2
     ad0:	607b      	str	r3, [r7, #4]
	PORT->Group[PORTGROUP_B].PMUX[UART_RX_PIN>>1].reg = temp | PORT_PMUX_PMUXE( PORT_PMUX_PMUXE_D_Val );
     ad2:	4a08      	ldr	r2, [pc, #32]	; (af4 <uart_pin_init+0x70>)
     ad4:	687b      	ldr	r3, [r7, #4]
     ad6:	b2db      	uxtb	r3, r3
     ad8:	2103      	movs	r1, #3
     ada:	430b      	orrs	r3, r1
     adc:	b2d9      	uxtb	r1, r3
     ade:	23b2      	movs	r3, #178	; 0xb2
     ae0:	54d1      	strb	r1, [r2, r3]
	PORT->Group[PORTGROUP_B].PINCFG[UART_RX_PIN].reg = PORT_PINCFG_PMUXEN | PORT_PINCFG_INEN; // Enable port mux
     ae2:	4a04      	ldr	r2, [pc, #16]	; (af4 <uart_pin_init+0x70>)
     ae4:	23c5      	movs	r3, #197	; 0xc5
     ae6:	2103      	movs	r1, #3
     ae8:	54d1      	strb	r1, [r2, r3]
}
     aea:	46c0      	nop			; (mov r8, r8)
     aec:	46bd      	mov	sp, r7
     aee:	b002      	add	sp, #8
     af0:	bd80      	pop	{r7, pc}
     af2:	46c0      	nop			; (mov r8, r8)
     af4:	41004400 	.word	0x41004400

00000af8 <uart_init>:

void uart_init(void)
{
     af8:	b580      	push	{r7, lr}
     afa:	af00      	add	r7, sp, #0
	uart_clk_init();
     afc:	4b17      	ldr	r3, [pc, #92]	; (b5c <uart_init+0x64>)
     afe:	4798      	blx	r3
	uart_pin_init();
     b00:	4b17      	ldr	r3, [pc, #92]	; (b60 <uart_init+0x68>)
     b02:	4798      	blx	r3
	
	UART_MODULE->USART.CTRLA.reg =
     b04:	4b17      	ldr	r3, [pc, #92]	; (b64 <uart_init+0x6c>)
     b06:	4a18      	ldr	r2, [pc, #96]	; (b68 <uart_init+0x70>)
     b08:	601a      	str	r2, [r3, #0]
	SERCOM_USART_CTRLA_MODE_USART_INT_CLK;			// Use internal clock
	
	// Asynchronous arithmetic mode
	// 65535 * ( 1 - sampleRateValue * baudrate / SystemCoreClock);
	// 65535 - 65535 * (sampleRateValue * baudrate / SystemCoreClock));
	UART_MODULE->USART.BAUD.reg = 65535.0f * ( 1.0f - (16.0 * (float)(UART_BAUDRATE)) / (float)(SYSTEM_CLK));
     b0a:	4b16      	ldr	r3, [pc, #88]	; (b64 <uart_init+0x6c>)
     b0c:	4a17      	ldr	r2, [pc, #92]	; (b6c <uart_init+0x74>)
     b0e:	819a      	strh	r2, [r3, #12]
	//BLE_UART_SERCOM->USART.BAUD.bit.BAUD = 9600;
	
	UART_MODULE->USART.CTRLB.reg =
     b10:	4b14      	ldr	r3, [pc, #80]	; (b64 <uart_init+0x6c>)
     b12:	2280      	movs	r2, #128	; 0x80
     b14:	0252      	lsls	r2, r2, #9
     b16:	605a      	str	r2, [r3, #4]
	SERCOM_USART_CTRLB_CHSIZE(0)	|	// 8 bit character size
	SERCOM_USART_CTRLB_TXEN;			//|	// Enable Transmit
	//SERCOM_USART_CTRLB_RXEN;			// Enable Receive

	// Get Synced
	while (UART_MODULE->USART.SYNCBUSY.bit.CTRLB);
     b18:	46c0      	nop			; (mov r8, r8)
     b1a:	4b12      	ldr	r3, [pc, #72]	; (b64 <uart_init+0x6c>)
     b1c:	69db      	ldr	r3, [r3, #28]
     b1e:	075b      	lsls	r3, r3, #29
     b20:	0fdb      	lsrs	r3, r3, #31
     b22:	b2db      	uxtb	r3, r3
     b24:	2b00      	cmp	r3, #0
     b26:	d1f8      	bne.n	b1a <uart_init+0x22>

	//Set the Interrupt to use
	UART_MODULE->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;	// Interrupt on received complete
     b28:	4b0e      	ldr	r3, [pc, #56]	; (b64 <uart_init+0x6c>)
     b2a:	2204      	movs	r2, #4
     b2c:	759a      	strb	r2, [r3, #22]
	
	// Enable interrupts
	NVIC_EnableIRQ(SERCOM5_IRQn);
     b2e:	200e      	movs	r0, #14
     b30:	4b0f      	ldr	r3, [pc, #60]	; (b70 <uart_init+0x78>)
     b32:	4798      	blx	r3
	NVIC_SetPriority(SERCOM5_IRQn,1);
     b34:	2101      	movs	r1, #1
     b36:	200e      	movs	r0, #14
     b38:	4b0e      	ldr	r3, [pc, #56]	; (b74 <uart_init+0x7c>)
     b3a:	4798      	blx	r3
	
	// enable the peripheral block
	UART_MODULE->USART.CTRLA.bit.ENABLE = 0x1u;
     b3c:	4a09      	ldr	r2, [pc, #36]	; (b64 <uart_init+0x6c>)
     b3e:	6813      	ldr	r3, [r2, #0]
     b40:	2102      	movs	r1, #2
     b42:	430b      	orrs	r3, r1
     b44:	6013      	str	r3, [r2, #0]
	
	// Wait for sercom to enable
	while(UART_MODULE->USART.SYNCBUSY.bit.ENABLE);
     b46:	46c0      	nop			; (mov r8, r8)
     b48:	4b06      	ldr	r3, [pc, #24]	; (b64 <uart_init+0x6c>)
     b4a:	69db      	ldr	r3, [r3, #28]
     b4c:	079b      	lsls	r3, r3, #30
     b4e:	0fdb      	lsrs	r3, r3, #31
     b50:	b2db      	uxtb	r3, r3
     b52:	2b00      	cmp	r3, #0
     b54:	d1f8      	bne.n	b48 <uart_init+0x50>
}
     b56:	46c0      	nop			; (mov r8, r8)
     b58:	46bd      	mov	sp, r7
     b5a:	bd80      	pop	{r7, pc}
     b5c:	00000a21 	.word	0x00000a21
     b60:	00000a85 	.word	0x00000a85
     b64:	42001c00 	.word	0x42001c00
     b68:	40200084 	.word	0x40200084
     b6c:	ffffc503 	.word	0xffffc503
     b70:	00000919 	.word	0x00000919
     b74:	00000945 	.word	0x00000945

00000b78 <uart_write>:

enum status_code uart_write(uint8_t *data)
{
     b78:	b580      	push	{r7, lr}
     b7a:	b084      	sub	sp, #16
     b7c:	af00      	add	r7, sp, #0
     b7e:	6078      	str	r0, [r7, #4]
	uint32_t i = 0;
     b80:	2300      	movs	r3, #0
     b82:	60fb      	str	r3, [r7, #12]
	while(data[i] != '\0')
     b84:	e00f      	b.n	ba6 <uart_write+0x2e>
	{
		
		if(UART_MODULE->USART.INTFLAG.bit.DRE == 1)
     b86:	4b0d      	ldr	r3, [pc, #52]	; (bbc <uart_write+0x44>)
     b88:	7e1b      	ldrb	r3, [r3, #24]
     b8a:	07db      	lsls	r3, r3, #31
     b8c:	0fdb      	lsrs	r3, r3, #31
     b8e:	b2db      	uxtb	r3, r3
     b90:	2b01      	cmp	r3, #1
     b92:	d108      	bne.n	ba6 <uart_write+0x2e>
		{
			UART_MODULE->USART.DATA.reg = (uint16_t)data[i++];
     b94:	4909      	ldr	r1, [pc, #36]	; (bbc <uart_write+0x44>)
     b96:	68fb      	ldr	r3, [r7, #12]
     b98:	1c5a      	adds	r2, r3, #1
     b9a:	60fa      	str	r2, [r7, #12]
     b9c:	687a      	ldr	r2, [r7, #4]
     b9e:	18d3      	adds	r3, r2, r3
     ba0:	781b      	ldrb	r3, [r3, #0]
     ba2:	b29b      	uxth	r3, r3
     ba4:	850b      	strh	r3, [r1, #40]	; 0x28
	while(data[i] != '\0')
     ba6:	687a      	ldr	r2, [r7, #4]
     ba8:	68fb      	ldr	r3, [r7, #12]
     baa:	18d3      	adds	r3, r2, r3
     bac:	781b      	ldrb	r3, [r3, #0]
     bae:	2b00      	cmp	r3, #0
     bb0:	d1e9      	bne.n	b86 <uart_write+0xe>
		}
	}
	return STATUS_OK;
     bb2:	2300      	movs	r3, #0
}
     bb4:	0018      	movs	r0, r3
     bb6:	46bd      	mov	sp, r7
     bb8:	b004      	add	sp, #16
     bba:	bd80      	pop	{r7, pc}
     bbc:	42001c00 	.word	0x42001c00

00000bc0 <delay_cycles>:
 *
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
     bc0:	b580      	push	{r7, lr}
     bc2:	b082      	sub	sp, #8
     bc4:	af00      	add	r7, sp, #0
     bc6:	6078      	str	r0, [r7, #4]
	if (n > 0) {
     bc8:	687b      	ldr	r3, [r7, #4]
     bca:	2b00      	cmp	r3, #0
     bcc:	d00c      	beq.n	be8 <delay_cycles+0x28>
		SysTick->LOAD = n;
     bce:	4b08      	ldr	r3, [pc, #32]	; (bf0 <delay_cycles+0x30>)
     bd0:	687a      	ldr	r2, [r7, #4]
     bd2:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
     bd4:	4b06      	ldr	r3, [pc, #24]	; (bf0 <delay_cycles+0x30>)
     bd6:	2200      	movs	r2, #0
     bd8:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     bda:	46c0      	nop			; (mov r8, r8)
     bdc:	4b04      	ldr	r3, [pc, #16]	; (bf0 <delay_cycles+0x30>)
     bde:	681a      	ldr	r2, [r3, #0]
     be0:	2380      	movs	r3, #128	; 0x80
     be2:	025b      	lsls	r3, r3, #9
     be4:	4013      	ands	r3, r2
     be6:	d0f9      	beq.n	bdc <delay_cycles+0x1c>
		};
	}
}
     be8:	46c0      	nop			; (mov r8, r8)
     bea:	46bd      	mov	sp, r7
     bec:	b002      	add	sp, #8
     bee:	bd80      	pop	{r7, pc}
     bf0:	e000e010 	.word	0xe000e010

00000bf4 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     bf4:	b580      	push	{r7, lr}
     bf6:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
     bf8:	2000      	movs	r0, #0
     bfa:	4b0f      	ldr	r3, [pc, #60]	; (c38 <delay_init+0x44>)
     bfc:	4798      	blx	r3
     bfe:	0002      	movs	r2, r0
     c00:	4b0e      	ldr	r3, [pc, #56]	; (c3c <delay_init+0x48>)
     c02:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
     c04:	4b0d      	ldr	r3, [pc, #52]	; (c3c <delay_init+0x48>)
     c06:	6818      	ldr	r0, [r3, #0]
     c08:	4b0d      	ldr	r3, [pc, #52]	; (c40 <delay_init+0x4c>)
     c0a:	22fa      	movs	r2, #250	; 0xfa
     c0c:	0091      	lsls	r1, r2, #2
     c0e:	4798      	blx	r3
     c10:	0003      	movs	r3, r0
     c12:	001a      	movs	r2, r3
     c14:	4b09      	ldr	r3, [pc, #36]	; (c3c <delay_init+0x48>)
     c16:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     c18:	4b08      	ldr	r3, [pc, #32]	; (c3c <delay_init+0x48>)
     c1a:	6818      	ldr	r0, [r3, #0]
     c1c:	4b08      	ldr	r3, [pc, #32]	; (c40 <delay_init+0x4c>)
     c1e:	22fa      	movs	r2, #250	; 0xfa
     c20:	0091      	lsls	r1, r2, #2
     c22:	4798      	blx	r3
     c24:	0003      	movs	r3, r0
     c26:	001a      	movs	r2, r3
     c28:	4b06      	ldr	r3, [pc, #24]	; (c44 <delay_init+0x50>)
     c2a:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     c2c:	4b06      	ldr	r3, [pc, #24]	; (c48 <delay_init+0x54>)
     c2e:	2205      	movs	r2, #5
     c30:	601a      	str	r2, [r3, #0]
}
     c32:	46c0      	nop			; (mov r8, r8)
     c34:	46bd      	mov	sp, r7
     c36:	bd80      	pop	{r7, pc}
     c38:	0000368d 	.word	0x0000368d
     c3c:	20000000 	.word	0x20000000
     c40:	00005811 	.word	0x00005811
     c44:	20000004 	.word	0x20000004
     c48:	e000e010 	.word	0xe000e010

00000c4c <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     c4c:	b580      	push	{r7, lr}
     c4e:	b082      	sub	sp, #8
     c50:	af00      	add	r7, sp, #0
     c52:	6078      	str	r0, [r7, #4]
	while (n--) {
     c54:	e004      	b.n	c60 <delay_cycles_ms+0x14>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     c56:	4b07      	ldr	r3, [pc, #28]	; (c74 <delay_cycles_ms+0x28>)
     c58:	681b      	ldr	r3, [r3, #0]
     c5a:	0018      	movs	r0, r3
     c5c:	4b06      	ldr	r3, [pc, #24]	; (c78 <delay_cycles_ms+0x2c>)
     c5e:	4798      	blx	r3
	while (n--) {
     c60:	687b      	ldr	r3, [r7, #4]
     c62:	1e5a      	subs	r2, r3, #1
     c64:	607a      	str	r2, [r7, #4]
     c66:	2b00      	cmp	r3, #0
     c68:	d1f5      	bne.n	c56 <delay_cycles_ms+0xa>
	}
}
     c6a:	46c0      	nop			; (mov r8, r8)
     c6c:	46bd      	mov	sp, r7
     c6e:	b002      	add	sp, #8
     c70:	bd80      	pop	{r7, pc}
     c72:	46c0      	nop			; (mov r8, r8)
     c74:	20000000 	.word	0x20000000
     c78:	00000bc1 	.word	0x00000bc1

00000c7c <system_gclk_chan_get_config_defaults>:
{
     c7c:	b580      	push	{r7, lr}
     c7e:	b082      	sub	sp, #8
     c80:	af00      	add	r7, sp, #0
     c82:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
     c84:	687b      	ldr	r3, [r7, #4]
     c86:	2200      	movs	r2, #0
     c88:	701a      	strb	r2, [r3, #0]
}
     c8a:	46c0      	nop			; (mov r8, r8)
     c8c:	46bd      	mov	sp, r7
     c8e:	b002      	add	sp, #8
     c90:	bd80      	pop	{r7, pc}

00000c92 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     c92:	b580      	push	{r7, lr}
     c94:	b086      	sub	sp, #24
     c96:	af00      	add	r7, sp, #0
     c98:	60f8      	str	r0, [r7, #12]
     c9a:	60b9      	str	r1, [r7, #8]
     c9c:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
     c9e:	2316      	movs	r3, #22
     ca0:	18fb      	adds	r3, r7, r3
     ca2:	2200      	movs	r2, #0
     ca4:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
     ca6:	68bb      	ldr	r3, [r7, #8]
     ca8:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     caa:	68bb      	ldr	r3, [r7, #8]
     cac:	085a      	lsrs	r2, r3, #1
     cae:	68fb      	ldr	r3, [r7, #12]
     cb0:	429a      	cmp	r2, r3
     cb2:	d201      	bcs.n	cb8 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     cb4:	2340      	movs	r3, #64	; 0x40
     cb6:	e026      	b.n	d06 <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
     cb8:	68bb      	ldr	r3, [r7, #8]
     cba:	085b      	lsrs	r3, r3, #1
     cbc:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
     cbe:	e00a      	b.n	cd6 <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
     cc0:	693a      	ldr	r2, [r7, #16]
     cc2:	68fb      	ldr	r3, [r7, #12]
     cc4:	1ad3      	subs	r3, r2, r3
     cc6:	613b      	str	r3, [r7, #16]
		baud_calculated++;
     cc8:	2316      	movs	r3, #22
     cca:	18fb      	adds	r3, r7, r3
     ccc:	881a      	ldrh	r2, [r3, #0]
     cce:	2316      	movs	r3, #22
     cd0:	18fb      	adds	r3, r7, r3
     cd2:	3201      	adds	r2, #1
     cd4:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
     cd6:	693a      	ldr	r2, [r7, #16]
     cd8:	68fb      	ldr	r3, [r7, #12]
     cda:	429a      	cmp	r2, r3
     cdc:	d2f0      	bcs.n	cc0 <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
     cde:	2316      	movs	r3, #22
     ce0:	18fb      	adds	r3, r7, r3
     ce2:	2216      	movs	r2, #22
     ce4:	18ba      	adds	r2, r7, r2
     ce6:	8812      	ldrh	r2, [r2, #0]
     ce8:	3a01      	subs	r2, #1
     cea:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
     cec:	2316      	movs	r3, #22
     cee:	18fb      	adds	r3, r7, r3
     cf0:	881b      	ldrh	r3, [r3, #0]
     cf2:	2bff      	cmp	r3, #255	; 0xff
     cf4:	d901      	bls.n	cfa <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     cf6:	2340      	movs	r3, #64	; 0x40
     cf8:	e005      	b.n	d06 <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
     cfa:	687b      	ldr	r3, [r7, #4]
     cfc:	2216      	movs	r2, #22
     cfe:	18ba      	adds	r2, r7, r2
     d00:	8812      	ldrh	r2, [r2, #0]
     d02:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
     d04:	2300      	movs	r3, #0
	}
}
     d06:	0018      	movs	r0, r3
     d08:	46bd      	mov	sp, r7
     d0a:	b006      	add	sp, #24
     d0c:	bd80      	pop	{r7, pc}
	...

00000d10 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     d10:	b580      	push	{r7, lr}
     d12:	b084      	sub	sp, #16
     d14:	af00      	add	r7, sp, #0
     d16:	0002      	movs	r2, r0
     d18:	1dfb      	adds	r3, r7, #7
     d1a:	701a      	strb	r2, [r3, #0]
     d1c:	1dbb      	adds	r3, r7, #6
     d1e:	1c0a      	adds	r2, r1, #0
     d20:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     d22:	4b1a      	ldr	r3, [pc, #104]	; (d8c <sercom_set_gclk_generator+0x7c>)
     d24:	781b      	ldrb	r3, [r3, #0]
     d26:	2201      	movs	r2, #1
     d28:	4053      	eors	r3, r2
     d2a:	b2db      	uxtb	r3, r3
     d2c:	2b00      	cmp	r3, #0
     d2e:	d103      	bne.n	d38 <sercom_set_gclk_generator+0x28>
     d30:	1dbb      	adds	r3, r7, #6
     d32:	781b      	ldrb	r3, [r3, #0]
     d34:	2b00      	cmp	r3, #0
     d36:	d01b      	beq.n	d70 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     d38:	230c      	movs	r3, #12
     d3a:	18fb      	adds	r3, r7, r3
     d3c:	0018      	movs	r0, r3
     d3e:	4b14      	ldr	r3, [pc, #80]	; (d90 <sercom_set_gclk_generator+0x80>)
     d40:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
     d42:	230c      	movs	r3, #12
     d44:	18fb      	adds	r3, r7, r3
     d46:	1dfa      	adds	r2, r7, #7
     d48:	7812      	ldrb	r2, [r2, #0]
     d4a:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     d4c:	230c      	movs	r3, #12
     d4e:	18fb      	adds	r3, r7, r3
     d50:	0019      	movs	r1, r3
     d52:	2013      	movs	r0, #19
     d54:	4b0f      	ldr	r3, [pc, #60]	; (d94 <sercom_set_gclk_generator+0x84>)
     d56:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     d58:	2013      	movs	r0, #19
     d5a:	4b0f      	ldr	r3, [pc, #60]	; (d98 <sercom_set_gclk_generator+0x88>)
     d5c:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
     d5e:	4b0b      	ldr	r3, [pc, #44]	; (d8c <sercom_set_gclk_generator+0x7c>)
     d60:	1dfa      	adds	r2, r7, #7
     d62:	7812      	ldrb	r2, [r2, #0]
     d64:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
     d66:	4b09      	ldr	r3, [pc, #36]	; (d8c <sercom_set_gclk_generator+0x7c>)
     d68:	2201      	movs	r2, #1
     d6a:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
     d6c:	2300      	movs	r3, #0
     d6e:	e008      	b.n	d82 <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
     d70:	4b06      	ldr	r3, [pc, #24]	; (d8c <sercom_set_gclk_generator+0x7c>)
     d72:	785b      	ldrb	r3, [r3, #1]
     d74:	1dfa      	adds	r2, r7, #7
     d76:	7812      	ldrb	r2, [r2, #0]
     d78:	429a      	cmp	r2, r3
     d7a:	d101      	bne.n	d80 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
     d7c:	2300      	movs	r3, #0
     d7e:	e000      	b.n	d82 <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     d80:	231d      	movs	r3, #29
}
     d82:	0018      	movs	r0, r3
     d84:	46bd      	mov	sp, r7
     d86:	b004      	add	sp, #16
     d88:	bd80      	pop	{r7, pc}
     d8a:	46c0      	nop			; (mov r8, r8)
     d8c:	20000094 	.word	0x20000094
     d90:	00000c7d 	.word	0x00000c7d
     d94:	00003765 	.word	0x00003765
     d98:	000037a9 	.word	0x000037a9

00000d9c <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
     d9c:	b580      	push	{r7, lr}
     d9e:	b082      	sub	sp, #8
     da0:	af00      	add	r7, sp, #0
     da2:	6078      	str	r0, [r7, #4]
     da4:	000a      	movs	r2, r1
     da6:	1cfb      	adds	r3, r7, #3
     da8:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
     daa:	687b      	ldr	r3, [r7, #4]
     dac:	4a4d      	ldr	r2, [pc, #308]	; (ee4 <_sercom_get_default_pad+0x148>)
     dae:	4293      	cmp	r3, r2
     db0:	d03f      	beq.n	e32 <_sercom_get_default_pad+0x96>
     db2:	4a4c      	ldr	r2, [pc, #304]	; (ee4 <_sercom_get_default_pad+0x148>)
     db4:	4293      	cmp	r3, r2
     db6:	d806      	bhi.n	dc6 <_sercom_get_default_pad+0x2a>
     db8:	4a4b      	ldr	r2, [pc, #300]	; (ee8 <_sercom_get_default_pad+0x14c>)
     dba:	4293      	cmp	r3, r2
     dbc:	d00f      	beq.n	dde <_sercom_get_default_pad+0x42>
     dbe:	4a4b      	ldr	r2, [pc, #300]	; (eec <_sercom_get_default_pad+0x150>)
     dc0:	4293      	cmp	r3, r2
     dc2:	d021      	beq.n	e08 <_sercom_get_default_pad+0x6c>
     dc4:	e089      	b.n	eda <_sercom_get_default_pad+0x13e>
     dc6:	4a4a      	ldr	r2, [pc, #296]	; (ef0 <_sercom_get_default_pad+0x154>)
     dc8:	4293      	cmp	r3, r2
     dca:	d100      	bne.n	dce <_sercom_get_default_pad+0x32>
     dcc:	e05b      	b.n	e86 <_sercom_get_default_pad+0xea>
     dce:	4a49      	ldr	r2, [pc, #292]	; (ef4 <_sercom_get_default_pad+0x158>)
     dd0:	4293      	cmp	r3, r2
     dd2:	d100      	bne.n	dd6 <_sercom_get_default_pad+0x3a>
     dd4:	e06c      	b.n	eb0 <_sercom_get_default_pad+0x114>
     dd6:	4a48      	ldr	r2, [pc, #288]	; (ef8 <_sercom_get_default_pad+0x15c>)
     dd8:	4293      	cmp	r3, r2
     dda:	d03f      	beq.n	e5c <_sercom_get_default_pad+0xc0>
     ddc:	e07d      	b.n	eda <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     dde:	1cfb      	adds	r3, r7, #3
     de0:	781b      	ldrb	r3, [r3, #0]
     de2:	2b01      	cmp	r3, #1
     de4:	d00a      	beq.n	dfc <_sercom_get_default_pad+0x60>
     de6:	dc02      	bgt.n	dee <_sercom_get_default_pad+0x52>
     de8:	2b00      	cmp	r3, #0
     dea:	d005      	beq.n	df8 <_sercom_get_default_pad+0x5c>
     dec:	e075      	b.n	eda <_sercom_get_default_pad+0x13e>
     dee:	2b02      	cmp	r3, #2
     df0:	d006      	beq.n	e00 <_sercom_get_default_pad+0x64>
     df2:	2b03      	cmp	r3, #3
     df4:	d006      	beq.n	e04 <_sercom_get_default_pad+0x68>
     df6:	e070      	b.n	eda <_sercom_get_default_pad+0x13e>
     df8:	4b40      	ldr	r3, [pc, #256]	; (efc <_sercom_get_default_pad+0x160>)
     dfa:	e06f      	b.n	edc <_sercom_get_default_pad+0x140>
     dfc:	4b40      	ldr	r3, [pc, #256]	; (f00 <_sercom_get_default_pad+0x164>)
     dfe:	e06d      	b.n	edc <_sercom_get_default_pad+0x140>
     e00:	4b40      	ldr	r3, [pc, #256]	; (f04 <_sercom_get_default_pad+0x168>)
     e02:	e06b      	b.n	edc <_sercom_get_default_pad+0x140>
     e04:	4b40      	ldr	r3, [pc, #256]	; (f08 <_sercom_get_default_pad+0x16c>)
     e06:	e069      	b.n	edc <_sercom_get_default_pad+0x140>
     e08:	1cfb      	adds	r3, r7, #3
     e0a:	781b      	ldrb	r3, [r3, #0]
     e0c:	2b01      	cmp	r3, #1
     e0e:	d00a      	beq.n	e26 <_sercom_get_default_pad+0x8a>
     e10:	dc02      	bgt.n	e18 <_sercom_get_default_pad+0x7c>
     e12:	2b00      	cmp	r3, #0
     e14:	d005      	beq.n	e22 <_sercom_get_default_pad+0x86>
     e16:	e060      	b.n	eda <_sercom_get_default_pad+0x13e>
     e18:	2b02      	cmp	r3, #2
     e1a:	d006      	beq.n	e2a <_sercom_get_default_pad+0x8e>
     e1c:	2b03      	cmp	r3, #3
     e1e:	d006      	beq.n	e2e <_sercom_get_default_pad+0x92>
     e20:	e05b      	b.n	eda <_sercom_get_default_pad+0x13e>
     e22:	2303      	movs	r3, #3
     e24:	e05a      	b.n	edc <_sercom_get_default_pad+0x140>
     e26:	4b39      	ldr	r3, [pc, #228]	; (f0c <_sercom_get_default_pad+0x170>)
     e28:	e058      	b.n	edc <_sercom_get_default_pad+0x140>
     e2a:	4b39      	ldr	r3, [pc, #228]	; (f10 <_sercom_get_default_pad+0x174>)
     e2c:	e056      	b.n	edc <_sercom_get_default_pad+0x140>
     e2e:	4b39      	ldr	r3, [pc, #228]	; (f14 <_sercom_get_default_pad+0x178>)
     e30:	e054      	b.n	edc <_sercom_get_default_pad+0x140>
     e32:	1cfb      	adds	r3, r7, #3
     e34:	781b      	ldrb	r3, [r3, #0]
     e36:	2b01      	cmp	r3, #1
     e38:	d00a      	beq.n	e50 <_sercom_get_default_pad+0xb4>
     e3a:	dc02      	bgt.n	e42 <_sercom_get_default_pad+0xa6>
     e3c:	2b00      	cmp	r3, #0
     e3e:	d005      	beq.n	e4c <_sercom_get_default_pad+0xb0>
     e40:	e04b      	b.n	eda <_sercom_get_default_pad+0x13e>
     e42:	2b02      	cmp	r3, #2
     e44:	d006      	beq.n	e54 <_sercom_get_default_pad+0xb8>
     e46:	2b03      	cmp	r3, #3
     e48:	d006      	beq.n	e58 <_sercom_get_default_pad+0xbc>
     e4a:	e046      	b.n	eda <_sercom_get_default_pad+0x13e>
     e4c:	4b32      	ldr	r3, [pc, #200]	; (f18 <_sercom_get_default_pad+0x17c>)
     e4e:	e045      	b.n	edc <_sercom_get_default_pad+0x140>
     e50:	4b32      	ldr	r3, [pc, #200]	; (f1c <_sercom_get_default_pad+0x180>)
     e52:	e043      	b.n	edc <_sercom_get_default_pad+0x140>
     e54:	4b32      	ldr	r3, [pc, #200]	; (f20 <_sercom_get_default_pad+0x184>)
     e56:	e041      	b.n	edc <_sercom_get_default_pad+0x140>
     e58:	4b32      	ldr	r3, [pc, #200]	; (f24 <_sercom_get_default_pad+0x188>)
     e5a:	e03f      	b.n	edc <_sercom_get_default_pad+0x140>
     e5c:	1cfb      	adds	r3, r7, #3
     e5e:	781b      	ldrb	r3, [r3, #0]
     e60:	2b01      	cmp	r3, #1
     e62:	d00a      	beq.n	e7a <_sercom_get_default_pad+0xde>
     e64:	dc02      	bgt.n	e6c <_sercom_get_default_pad+0xd0>
     e66:	2b00      	cmp	r3, #0
     e68:	d005      	beq.n	e76 <_sercom_get_default_pad+0xda>
     e6a:	e036      	b.n	eda <_sercom_get_default_pad+0x13e>
     e6c:	2b02      	cmp	r3, #2
     e6e:	d006      	beq.n	e7e <_sercom_get_default_pad+0xe2>
     e70:	2b03      	cmp	r3, #3
     e72:	d006      	beq.n	e82 <_sercom_get_default_pad+0xe6>
     e74:	e031      	b.n	eda <_sercom_get_default_pad+0x13e>
     e76:	4b2c      	ldr	r3, [pc, #176]	; (f28 <_sercom_get_default_pad+0x18c>)
     e78:	e030      	b.n	edc <_sercom_get_default_pad+0x140>
     e7a:	4b2c      	ldr	r3, [pc, #176]	; (f2c <_sercom_get_default_pad+0x190>)
     e7c:	e02e      	b.n	edc <_sercom_get_default_pad+0x140>
     e7e:	4b2c      	ldr	r3, [pc, #176]	; (f30 <_sercom_get_default_pad+0x194>)
     e80:	e02c      	b.n	edc <_sercom_get_default_pad+0x140>
     e82:	4b2c      	ldr	r3, [pc, #176]	; (f34 <_sercom_get_default_pad+0x198>)
     e84:	e02a      	b.n	edc <_sercom_get_default_pad+0x140>
     e86:	1cfb      	adds	r3, r7, #3
     e88:	781b      	ldrb	r3, [r3, #0]
     e8a:	2b01      	cmp	r3, #1
     e8c:	d00a      	beq.n	ea4 <_sercom_get_default_pad+0x108>
     e8e:	dc02      	bgt.n	e96 <_sercom_get_default_pad+0xfa>
     e90:	2b00      	cmp	r3, #0
     e92:	d005      	beq.n	ea0 <_sercom_get_default_pad+0x104>
     e94:	e021      	b.n	eda <_sercom_get_default_pad+0x13e>
     e96:	2b02      	cmp	r3, #2
     e98:	d006      	beq.n	ea8 <_sercom_get_default_pad+0x10c>
     e9a:	2b03      	cmp	r3, #3
     e9c:	d006      	beq.n	eac <_sercom_get_default_pad+0x110>
     e9e:	e01c      	b.n	eda <_sercom_get_default_pad+0x13e>
     ea0:	4b25      	ldr	r3, [pc, #148]	; (f38 <_sercom_get_default_pad+0x19c>)
     ea2:	e01b      	b.n	edc <_sercom_get_default_pad+0x140>
     ea4:	4b25      	ldr	r3, [pc, #148]	; (f3c <_sercom_get_default_pad+0x1a0>)
     ea6:	e019      	b.n	edc <_sercom_get_default_pad+0x140>
     ea8:	4b25      	ldr	r3, [pc, #148]	; (f40 <_sercom_get_default_pad+0x1a4>)
     eaa:	e017      	b.n	edc <_sercom_get_default_pad+0x140>
     eac:	4b25      	ldr	r3, [pc, #148]	; (f44 <_sercom_get_default_pad+0x1a8>)
     eae:	e015      	b.n	edc <_sercom_get_default_pad+0x140>
     eb0:	1cfb      	adds	r3, r7, #3
     eb2:	781b      	ldrb	r3, [r3, #0]
     eb4:	2b01      	cmp	r3, #1
     eb6:	d00a      	beq.n	ece <_sercom_get_default_pad+0x132>
     eb8:	dc02      	bgt.n	ec0 <_sercom_get_default_pad+0x124>
     eba:	2b00      	cmp	r3, #0
     ebc:	d005      	beq.n	eca <_sercom_get_default_pad+0x12e>
     ebe:	e00c      	b.n	eda <_sercom_get_default_pad+0x13e>
     ec0:	2b02      	cmp	r3, #2
     ec2:	d006      	beq.n	ed2 <_sercom_get_default_pad+0x136>
     ec4:	2b03      	cmp	r3, #3
     ec6:	d006      	beq.n	ed6 <_sercom_get_default_pad+0x13a>
     ec8:	e007      	b.n	eda <_sercom_get_default_pad+0x13e>
     eca:	4b1f      	ldr	r3, [pc, #124]	; (f48 <_sercom_get_default_pad+0x1ac>)
     ecc:	e006      	b.n	edc <_sercom_get_default_pad+0x140>
     ece:	4b1f      	ldr	r3, [pc, #124]	; (f4c <_sercom_get_default_pad+0x1b0>)
     ed0:	e004      	b.n	edc <_sercom_get_default_pad+0x140>
     ed2:	4b1f      	ldr	r3, [pc, #124]	; (f50 <_sercom_get_default_pad+0x1b4>)
     ed4:	e002      	b.n	edc <_sercom_get_default_pad+0x140>
     ed6:	4b1f      	ldr	r3, [pc, #124]	; (f54 <_sercom_get_default_pad+0x1b8>)
     ed8:	e000      	b.n	edc <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
     eda:	2300      	movs	r3, #0
}
     edc:	0018      	movs	r0, r3
     ede:	46bd      	mov	sp, r7
     ee0:	b002      	add	sp, #8
     ee2:	bd80      	pop	{r7, pc}
     ee4:	42001000 	.word	0x42001000
     ee8:	42000800 	.word	0x42000800
     eec:	42000c00 	.word	0x42000c00
     ef0:	42001800 	.word	0x42001800
     ef4:	42001c00 	.word	0x42001c00
     ef8:	42001400 	.word	0x42001400
     efc:	00040003 	.word	0x00040003
     f00:	00050003 	.word	0x00050003
     f04:	00060003 	.word	0x00060003
     f08:	00070003 	.word	0x00070003
     f0c:	00010003 	.word	0x00010003
     f10:	001e0003 	.word	0x001e0003
     f14:	001f0003 	.word	0x001f0003
     f18:	00080003 	.word	0x00080003
     f1c:	00090003 	.word	0x00090003
     f20:	000a0003 	.word	0x000a0003
     f24:	000b0003 	.word	0x000b0003
     f28:	00100003 	.word	0x00100003
     f2c:	00110003 	.word	0x00110003
     f30:	00120003 	.word	0x00120003
     f34:	00130003 	.word	0x00130003
     f38:	000c0003 	.word	0x000c0003
     f3c:	000d0003 	.word	0x000d0003
     f40:	000e0003 	.word	0x000e0003
     f44:	000f0003 	.word	0x000f0003
     f48:	00160003 	.word	0x00160003
     f4c:	00170003 	.word	0x00170003
     f50:	00180003 	.word	0x00180003
     f54:	00190003 	.word	0x00190003

00000f58 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     f58:	b590      	push	{r4, r7, lr}
     f5a:	b08b      	sub	sp, #44	; 0x2c
     f5c:	af00      	add	r7, sp, #0
     f5e:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     f60:	230c      	movs	r3, #12
     f62:	18fb      	adds	r3, r7, r3
     f64:	4a0f      	ldr	r2, [pc, #60]	; (fa4 <_sercom_get_sercom_inst_index+0x4c>)
     f66:	ca13      	ldmia	r2!, {r0, r1, r4}
     f68:	c313      	stmia	r3!, {r0, r1, r4}
     f6a:	ca13      	ldmia	r2!, {r0, r1, r4}
     f6c:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     f6e:	2300      	movs	r3, #0
     f70:	627b      	str	r3, [r7, #36]	; 0x24
     f72:	e00e      	b.n	f92 <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     f74:	230c      	movs	r3, #12
     f76:	18fb      	adds	r3, r7, r3
     f78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     f7a:	0092      	lsls	r2, r2, #2
     f7c:	58d3      	ldr	r3, [r2, r3]
     f7e:	001a      	movs	r2, r3
     f80:	687b      	ldr	r3, [r7, #4]
     f82:	429a      	cmp	r2, r3
     f84:	d102      	bne.n	f8c <_sercom_get_sercom_inst_index+0x34>
			return i;
     f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     f88:	b2db      	uxtb	r3, r3
     f8a:	e006      	b.n	f9a <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     f8e:	3301      	adds	r3, #1
     f90:	627b      	str	r3, [r7, #36]	; 0x24
     f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     f94:	2b05      	cmp	r3, #5
     f96:	d9ed      	bls.n	f74 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     f98:	2300      	movs	r3, #0
}
     f9a:	0018      	movs	r0, r3
     f9c:	46bd      	mov	sp, r7
     f9e:	b00b      	add	sp, #44	; 0x2c
     fa0:	bd90      	pop	{r4, r7, pc}
     fa2:	46c0      	nop			; (mov r8, r8)
     fa4:	00008150 	.word	0x00008150

00000fa8 <bme280_spi_write>:



//enum status_code bme280_spi_send(uint8_t *data)
void bme280_spi_write(uint8_t *data,uint16_t length)
{
     fa8:	b580      	push	{r7, lr}
     faa:	b082      	sub	sp, #8
     fac:	af00      	add	r7, sp, #0
     fae:	6078      	str	r0, [r7, #4]
     fb0:	000a      	movs	r2, r1
     fb2:	1cbb      	adds	r3, r7, #2
     fb4:	801a      	strh	r2, [r3, #0]
	data[0] &= 0x7F;
     fb6:	687b      	ldr	r3, [r7, #4]
     fb8:	781b      	ldrb	r3, [r3, #0]
     fba:	227f      	movs	r2, #127	; 0x7f
     fbc:	4013      	ands	r3, r2
     fbe:	b2da      	uxtb	r2, r3
     fc0:	687b      	ldr	r3, [r7, #4]
     fc2:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&spi_master_instance,&bme280_slave_instance,true);
     fc4:	490b      	ldr	r1, [pc, #44]	; (ff4 <bme280_spi_write+0x4c>)
     fc6:	4b0c      	ldr	r3, [pc, #48]	; (ff8 <bme280_spi_write+0x50>)
     fc8:	2201      	movs	r2, #1
     fca:	0018      	movs	r0, r3
     fcc:	4b0b      	ldr	r3, [pc, #44]	; (ffc <bme280_spi_write+0x54>)
     fce:	4798      	blx	r3
	spi_write_buffer_wait(&spi_master_instance,data,length);
     fd0:	1cbb      	adds	r3, r7, #2
     fd2:	881a      	ldrh	r2, [r3, #0]
     fd4:	6879      	ldr	r1, [r7, #4]
     fd6:	4b08      	ldr	r3, [pc, #32]	; (ff8 <bme280_spi_write+0x50>)
     fd8:	0018      	movs	r0, r3
     fda:	4b09      	ldr	r3, [pc, #36]	; (1000 <bme280_spi_write+0x58>)
     fdc:	4798      	blx	r3
	spi_select_slave(&spi_master_instance,&bme280_slave_instance,false);
     fde:	4905      	ldr	r1, [pc, #20]	; (ff4 <bme280_spi_write+0x4c>)
     fe0:	4b05      	ldr	r3, [pc, #20]	; (ff8 <bme280_spi_write+0x50>)
     fe2:	2200      	movs	r2, #0
     fe4:	0018      	movs	r0, r3
     fe6:	4b05      	ldr	r3, [pc, #20]	; (ffc <bme280_spi_write+0x54>)
     fe8:	4798      	blx	r3
}
     fea:	46c0      	nop			; (mov r8, r8)
     fec:	46bd      	mov	sp, r7
     fee:	b002      	add	sp, #8
     ff0:	bd80      	pop	{r7, pc}
     ff2:	46c0      	nop			; (mov r8, r8)
     ff4:	20000164 	.word	0x20000164
     ff8:	20000168 	.word	0x20000168
     ffc:	00002ac5 	.word	0x00002ac5
    1000:	00002bb5 	.word	0x00002bb5

00001004 <bme280_spi_read>:

void bme280_spi_read(uint8_t *data,uint16_t length,uint8_t reg)
{
    1004:	b590      	push	{r4, r7, lr}
    1006:	b085      	sub	sp, #20
    1008:	af00      	add	r7, sp, #0
    100a:	6078      	str	r0, [r7, #4]
    100c:	0008      	movs	r0, r1
    100e:	0011      	movs	r1, r2
    1010:	1cbb      	adds	r3, r7, #2
    1012:	1c02      	adds	r2, r0, #0
    1014:	801a      	strh	r2, [r3, #0]
    1016:	1c7b      	adds	r3, r7, #1
    1018:	1c0a      	adds	r2, r1, #0
    101a:	701a      	strb	r2, [r3, #0]
	uint16_t dummy = reg | 0x80;
    101c:	1c7b      	adds	r3, r7, #1
    101e:	781b      	ldrb	r3, [r3, #0]
    1020:	2280      	movs	r2, #128	; 0x80
    1022:	4252      	negs	r2, r2
    1024:	4313      	orrs	r3, r2
    1026:	b2db      	uxtb	r3, r3
    1028:	b29a      	uxth	r2, r3
    102a:	230e      	movs	r3, #14
    102c:	18fb      	adds	r3, r7, r3
    102e:	801a      	strh	r2, [r3, #0]
	spi_select_slave(&spi_master_instance,&bme280_slave_instance,true);
    1030:	4910      	ldr	r1, [pc, #64]	; (1074 <bme280_spi_read+0x70>)
    1032:	4b11      	ldr	r3, [pc, #68]	; (1078 <bme280_spi_read+0x74>)
    1034:	2201      	movs	r2, #1
    1036:	0018      	movs	r0, r3
    1038:	4b10      	ldr	r3, [pc, #64]	; (107c <bme280_spi_read+0x78>)
    103a:	4798      	blx	r3
	spi_write_buffer_wait(&spi_master_instance,&dummy,1);
    103c:	230e      	movs	r3, #14
    103e:	18f9      	adds	r1, r7, r3
    1040:	4b0d      	ldr	r3, [pc, #52]	; (1078 <bme280_spi_read+0x74>)
    1042:	2201      	movs	r2, #1
    1044:	0018      	movs	r0, r3
    1046:	4b0e      	ldr	r3, [pc, #56]	; (1080 <bme280_spi_read+0x7c>)
    1048:	4798      	blx	r3
	spi_read_buffer_wait(&spi_master_instance,data,length,dummy);
    104a:	230e      	movs	r3, #14
    104c:	18fb      	adds	r3, r7, r3
    104e:	881c      	ldrh	r4, [r3, #0]
    1050:	1cbb      	adds	r3, r7, #2
    1052:	881a      	ldrh	r2, [r3, #0]
    1054:	6879      	ldr	r1, [r7, #4]
    1056:	4808      	ldr	r0, [pc, #32]	; (1078 <bme280_spi_read+0x74>)
    1058:	0023      	movs	r3, r4
    105a:	4c0a      	ldr	r4, [pc, #40]	; (1084 <bme280_spi_read+0x80>)
    105c:	47a0      	blx	r4
	//spi_transceive_wait(&spi_master_instance,reg,data);
	spi_select_slave(&spi_master_instance,&bme280_slave_instance,false);
    105e:	4905      	ldr	r1, [pc, #20]	; (1074 <bme280_spi_read+0x70>)
    1060:	4b05      	ldr	r3, [pc, #20]	; (1078 <bme280_spi_read+0x74>)
    1062:	2200      	movs	r2, #0
    1064:	0018      	movs	r0, r3
    1066:	4b05      	ldr	r3, [pc, #20]	; (107c <bme280_spi_read+0x78>)
    1068:	4798      	blx	r3
}
    106a:	46c0      	nop			; (mov r8, r8)
    106c:	46bd      	mov	sp, r7
    106e:	b005      	add	sp, #20
    1070:	bd90      	pop	{r4, r7, pc}
    1072:	46c0      	nop			; (mov r8, r8)
    1074:	20000164 	.word	0x20000164
    1078:	20000168 	.word	0x20000168
    107c:	00002ac5 	.word	0x00002ac5
    1080:	00002bb5 	.word	0x00002bb5
    1084:	00002919 	.word	0x00002919

00001088 <bme280_read_temp>:

void bme280_read_temp(uint8_t *data)
{
    1088:	b590      	push	{r4, r7, lr}
    108a:	b085      	sub	sp, #20
    108c:	af00      	add	r7, sp, #0
    108e:	6078      	str	r0, [r7, #4]
	uint16_t dummy = 0xFA | 0x80;
    1090:	230e      	movs	r3, #14
    1092:	18fb      	adds	r3, r7, r3
    1094:	22fa      	movs	r2, #250	; 0xfa
    1096:	801a      	strh	r2, [r3, #0]
	spi_select_slave(&spi_master_instance,&bme280_slave_instance,true);
    1098:	490e      	ldr	r1, [pc, #56]	; (10d4 <bme280_read_temp+0x4c>)
    109a:	4b0f      	ldr	r3, [pc, #60]	; (10d8 <bme280_read_temp+0x50>)
    109c:	2201      	movs	r2, #1
    109e:	0018      	movs	r0, r3
    10a0:	4b0e      	ldr	r3, [pc, #56]	; (10dc <bme280_read_temp+0x54>)
    10a2:	4798      	blx	r3
	spi_write_buffer_wait(&spi_master_instance,&dummy,1);
    10a4:	230e      	movs	r3, #14
    10a6:	18f9      	adds	r1, r7, r3
    10a8:	4b0b      	ldr	r3, [pc, #44]	; (10d8 <bme280_read_temp+0x50>)
    10aa:	2201      	movs	r2, #1
    10ac:	0018      	movs	r0, r3
    10ae:	4b0c      	ldr	r3, [pc, #48]	; (10e0 <bme280_read_temp+0x58>)
    10b0:	4798      	blx	r3
	spi_read_buffer_wait(&spi_master_instance,data,3,0x00);
    10b2:	6879      	ldr	r1, [r7, #4]
    10b4:	4808      	ldr	r0, [pc, #32]	; (10d8 <bme280_read_temp+0x50>)
    10b6:	2300      	movs	r3, #0
    10b8:	2203      	movs	r2, #3
    10ba:	4c0a      	ldr	r4, [pc, #40]	; (10e4 <bme280_read_temp+0x5c>)
    10bc:	47a0      	blx	r4
	//spi_transceive_wait(&spi_master_instance,reg,data);
	spi_select_slave(&spi_master_instance,&bme280_slave_instance,false);
    10be:	4905      	ldr	r1, [pc, #20]	; (10d4 <bme280_read_temp+0x4c>)
    10c0:	4b05      	ldr	r3, [pc, #20]	; (10d8 <bme280_read_temp+0x50>)
    10c2:	2200      	movs	r2, #0
    10c4:	0018      	movs	r0, r3
    10c6:	4b05      	ldr	r3, [pc, #20]	; (10dc <bme280_read_temp+0x54>)
    10c8:	4798      	blx	r3
}
    10ca:	46c0      	nop			; (mov r8, r8)
    10cc:	46bd      	mov	sp, r7
    10ce:	b005      	add	sp, #20
    10d0:	bd90      	pop	{r4, r7, pc}
    10d2:	46c0      	nop			; (mov r8, r8)
    10d4:	20000164 	.word	0x20000164
    10d8:	20000168 	.word	0x20000168
    10dc:	00002ac5 	.word	0x00002ac5
    10e0:	00002bb5 	.word	0x00002bb5
    10e4:	00002919 	.word	0x00002919

000010e8 <bme280_read_pres>:

void bme280_read_pres(uint8_t *data)
{
    10e8:	b590      	push	{r4, r7, lr}
    10ea:	b085      	sub	sp, #20
    10ec:	af00      	add	r7, sp, #0
    10ee:	6078      	str	r0, [r7, #4]
	uint16_t dummy = 0xF7 | 0x80;
    10f0:	230e      	movs	r3, #14
    10f2:	18fb      	adds	r3, r7, r3
    10f4:	22f7      	movs	r2, #247	; 0xf7
    10f6:	801a      	strh	r2, [r3, #0]
	spi_select_slave(&spi_master_instance,&bme280_slave_instance,true);
    10f8:	490e      	ldr	r1, [pc, #56]	; (1134 <bme280_read_pres+0x4c>)
    10fa:	4b0f      	ldr	r3, [pc, #60]	; (1138 <bme280_read_pres+0x50>)
    10fc:	2201      	movs	r2, #1
    10fe:	0018      	movs	r0, r3
    1100:	4b0e      	ldr	r3, [pc, #56]	; (113c <bme280_read_pres+0x54>)
    1102:	4798      	blx	r3
	spi_write_buffer_wait(&spi_master_instance,&dummy,1);
    1104:	230e      	movs	r3, #14
    1106:	18f9      	adds	r1, r7, r3
    1108:	4b0b      	ldr	r3, [pc, #44]	; (1138 <bme280_read_pres+0x50>)
    110a:	2201      	movs	r2, #1
    110c:	0018      	movs	r0, r3
    110e:	4b0c      	ldr	r3, [pc, #48]	; (1140 <bme280_read_pres+0x58>)
    1110:	4798      	blx	r3
	spi_read_buffer_wait(&spi_master_instance,data,3,0x00);
    1112:	6879      	ldr	r1, [r7, #4]
    1114:	4808      	ldr	r0, [pc, #32]	; (1138 <bme280_read_pres+0x50>)
    1116:	2300      	movs	r3, #0
    1118:	2203      	movs	r2, #3
    111a:	4c0a      	ldr	r4, [pc, #40]	; (1144 <bme280_read_pres+0x5c>)
    111c:	47a0      	blx	r4
	//spi_transceive_wait(&spi_master_instance,reg,data);
	spi_select_slave(&spi_master_instance,&bme280_slave_instance,false);
    111e:	4905      	ldr	r1, [pc, #20]	; (1134 <bme280_read_pres+0x4c>)
    1120:	4b05      	ldr	r3, [pc, #20]	; (1138 <bme280_read_pres+0x50>)
    1122:	2200      	movs	r2, #0
    1124:	0018      	movs	r0, r3
    1126:	4b05      	ldr	r3, [pc, #20]	; (113c <bme280_read_pres+0x54>)
    1128:	4798      	blx	r3
}
    112a:	46c0      	nop			; (mov r8, r8)
    112c:	46bd      	mov	sp, r7
    112e:	b005      	add	sp, #20
    1130:	bd90      	pop	{r4, r7, pc}
    1132:	46c0      	nop			; (mov r8, r8)
    1134:	20000164 	.word	0x20000164
    1138:	20000168 	.word	0x20000168
    113c:	00002ac5 	.word	0x00002ac5
    1140:	00002bb5 	.word	0x00002bb5
    1144:	00002919 	.word	0x00002919

00001148 <bme280_read_hum>:

void bme280_read_hum(uint8_t *data)
{
    1148:	b590      	push	{r4, r7, lr}
    114a:	b085      	sub	sp, #20
    114c:	af00      	add	r7, sp, #0
    114e:	6078      	str	r0, [r7, #4]
	uint16_t dummy = 0xFD | 0x80;
    1150:	230e      	movs	r3, #14
    1152:	18fb      	adds	r3, r7, r3
    1154:	22fd      	movs	r2, #253	; 0xfd
    1156:	801a      	strh	r2, [r3, #0]
	spi_select_slave(&spi_master_instance,&bme280_slave_instance,true);
    1158:	490e      	ldr	r1, [pc, #56]	; (1194 <bme280_read_hum+0x4c>)
    115a:	4b0f      	ldr	r3, [pc, #60]	; (1198 <bme280_read_hum+0x50>)
    115c:	2201      	movs	r2, #1
    115e:	0018      	movs	r0, r3
    1160:	4b0e      	ldr	r3, [pc, #56]	; (119c <bme280_read_hum+0x54>)
    1162:	4798      	blx	r3
	spi_write_buffer_wait(&spi_master_instance,&dummy,1);
    1164:	230e      	movs	r3, #14
    1166:	18f9      	adds	r1, r7, r3
    1168:	4b0b      	ldr	r3, [pc, #44]	; (1198 <bme280_read_hum+0x50>)
    116a:	2201      	movs	r2, #1
    116c:	0018      	movs	r0, r3
    116e:	4b0c      	ldr	r3, [pc, #48]	; (11a0 <bme280_read_hum+0x58>)
    1170:	4798      	blx	r3
	spi_read_buffer_wait(&spi_master_instance,data,2,0x00);
    1172:	6879      	ldr	r1, [r7, #4]
    1174:	4808      	ldr	r0, [pc, #32]	; (1198 <bme280_read_hum+0x50>)
    1176:	2300      	movs	r3, #0
    1178:	2202      	movs	r2, #2
    117a:	4c0a      	ldr	r4, [pc, #40]	; (11a4 <bme280_read_hum+0x5c>)
    117c:	47a0      	blx	r4
	//spi_transceive_wait(&spi_master_instance,reg,data);
	spi_select_slave(&spi_master_instance,&bme280_slave_instance,false);
    117e:	4905      	ldr	r1, [pc, #20]	; (1194 <bme280_read_hum+0x4c>)
    1180:	4b05      	ldr	r3, [pc, #20]	; (1198 <bme280_read_hum+0x50>)
    1182:	2200      	movs	r2, #0
    1184:	0018      	movs	r0, r3
    1186:	4b05      	ldr	r3, [pc, #20]	; (119c <bme280_read_hum+0x54>)
    1188:	4798      	blx	r3
}
    118a:	46c0      	nop			; (mov r8, r8)
    118c:	46bd      	mov	sp, r7
    118e:	b005      	add	sp, #20
    1190:	bd90      	pop	{r4, r7, pc}
    1192:	46c0      	nop			; (mov r8, r8)
    1194:	20000164 	.word	0x20000164
    1198:	20000168 	.word	0x20000168
    119c:	00002ac5 	.word	0x00002ac5
    11a0:	00002bb5 	.word	0x00002bb5
    11a4:	00002919 	.word	0x00002919

000011a8 <bme280_get_cal_data>:

void bme280_get_cal_data(void)
{
    11a8:	b590      	push	{r4, r7, lr}
    11aa:	b083      	sub	sp, #12
    11ac:	af00      	add	r7, sp, #0
	//uint8_t cal_data[42];
	uint16_t reg = 0x88;
    11ae:	1dbb      	adds	r3, r7, #6
    11b0:	2288      	movs	r2, #136	; 0x88
    11b2:	801a      	strh	r2, [r3, #0]
	spi_select_slave(&spi_master_instance,&bme280_slave_instance,true);
    11b4:	4915      	ldr	r1, [pc, #84]	; (120c <bme280_get_cal_data+0x64>)
    11b6:	4b16      	ldr	r3, [pc, #88]	; (1210 <bme280_get_cal_data+0x68>)
    11b8:	2201      	movs	r2, #1
    11ba:	0018      	movs	r0, r3
    11bc:	4b15      	ldr	r3, [pc, #84]	; (1214 <bme280_get_cal_data+0x6c>)
    11be:	4798      	blx	r3
	spi_write_buffer_wait(&spi_master_instance,&reg,1);
    11c0:	1db9      	adds	r1, r7, #6
    11c2:	4b13      	ldr	r3, [pc, #76]	; (1210 <bme280_get_cal_data+0x68>)
    11c4:	2201      	movs	r2, #1
    11c6:	0018      	movs	r0, r3
    11c8:	4b13      	ldr	r3, [pc, #76]	; (1218 <bme280_get_cal_data+0x70>)
    11ca:	4798      	blx	r3
	spi_read_buffer_wait(&spi_master_instance,&cal_data,26,0x00);
    11cc:	4913      	ldr	r1, [pc, #76]	; (121c <bme280_get_cal_data+0x74>)
    11ce:	4810      	ldr	r0, [pc, #64]	; (1210 <bme280_get_cal_data+0x68>)
    11d0:	2300      	movs	r3, #0
    11d2:	221a      	movs	r2, #26
    11d4:	4c12      	ldr	r4, [pc, #72]	; (1220 <bme280_get_cal_data+0x78>)
    11d6:	47a0      	blx	r4
	reg = 0xE1;
    11d8:	1dbb      	adds	r3, r7, #6
    11da:	22e1      	movs	r2, #225	; 0xe1
    11dc:	801a      	strh	r2, [r3, #0]
	spi_write_buffer_wait(&spi_master_instance,&reg,1);
    11de:	1db9      	adds	r1, r7, #6
    11e0:	4b0b      	ldr	r3, [pc, #44]	; (1210 <bme280_get_cal_data+0x68>)
    11e2:	2201      	movs	r2, #1
    11e4:	0018      	movs	r0, r3
    11e6:	4b0c      	ldr	r3, [pc, #48]	; (1218 <bme280_get_cal_data+0x70>)
    11e8:	4798      	blx	r3
	spi_read_buffer_wait(&spi_master_instance,&cal_data[26],7,0x00);
    11ea:	490e      	ldr	r1, [pc, #56]	; (1224 <bme280_get_cal_data+0x7c>)
    11ec:	4808      	ldr	r0, [pc, #32]	; (1210 <bme280_get_cal_data+0x68>)
    11ee:	2300      	movs	r3, #0
    11f0:	2207      	movs	r2, #7
    11f2:	4c0b      	ldr	r4, [pc, #44]	; (1220 <bme280_get_cal_data+0x78>)
    11f4:	47a0      	blx	r4
	spi_select_slave(&spi_master_instance,&bme280_slave_instance,false);
    11f6:	4905      	ldr	r1, [pc, #20]	; (120c <bme280_get_cal_data+0x64>)
    11f8:	4b05      	ldr	r3, [pc, #20]	; (1210 <bme280_get_cal_data+0x68>)
    11fa:	2200      	movs	r2, #0
    11fc:	0018      	movs	r0, r3
    11fe:	4b05      	ldr	r3, [pc, #20]	; (1214 <bme280_get_cal_data+0x6c>)
    1200:	4798      	blx	r3
}
    1202:	46c0      	nop			; (mov r8, r8)
    1204:	46bd      	mov	sp, r7
    1206:	b003      	add	sp, #12
    1208:	bd90      	pop	{r4, r7, pc}
    120a:	46c0      	nop			; (mov r8, r8)
    120c:	20000164 	.word	0x20000164
    1210:	20000168 	.word	0x20000168
    1214:	00002ac5 	.word	0x00002ac5
    1218:	00002bb5 	.word	0x00002bb5
    121c:	20000118 	.word	0x20000118
    1220:	00002919 	.word	0x00002919
    1224:	20000132 	.word	0x20000132

00001228 <bme280_calc_cal>:

void bme280_calc_cal(void)
{
    1228:	b580      	push	{r7, lr}
    122a:	af00      	add	r7, sp, #0
	T1 = (cal_data[1] << 8)+cal_data[0];
    122c:	4b6c      	ldr	r3, [pc, #432]	; (13e0 <bme280_calc_cal+0x1b8>)
    122e:	785b      	ldrb	r3, [r3, #1]
    1230:	b29b      	uxth	r3, r3
    1232:	021b      	lsls	r3, r3, #8
    1234:	b29a      	uxth	r2, r3
    1236:	4b6a      	ldr	r3, [pc, #424]	; (13e0 <bme280_calc_cal+0x1b8>)
    1238:	781b      	ldrb	r3, [r3, #0]
    123a:	b29b      	uxth	r3, r3
    123c:	18d3      	adds	r3, r2, r3
    123e:	b29a      	uxth	r2, r3
    1240:	4b68      	ldr	r3, [pc, #416]	; (13e4 <bme280_calc_cal+0x1bc>)
    1242:	801a      	strh	r2, [r3, #0]
	T2 = (cal_data[3] << 8)+cal_data[2];
    1244:	4b66      	ldr	r3, [pc, #408]	; (13e0 <bme280_calc_cal+0x1b8>)
    1246:	78db      	ldrb	r3, [r3, #3]
    1248:	b29b      	uxth	r3, r3
    124a:	021b      	lsls	r3, r3, #8
    124c:	b29a      	uxth	r2, r3
    124e:	4b64      	ldr	r3, [pc, #400]	; (13e0 <bme280_calc_cal+0x1b8>)
    1250:	789b      	ldrb	r3, [r3, #2]
    1252:	b29b      	uxth	r3, r3
    1254:	18d3      	adds	r3, r2, r3
    1256:	b29b      	uxth	r3, r3
    1258:	b21a      	sxth	r2, r3
    125a:	4b63      	ldr	r3, [pc, #396]	; (13e8 <bme280_calc_cal+0x1c0>)
    125c:	801a      	strh	r2, [r3, #0]
	T3 = (cal_data[5] << 8)+cal_data[4];
    125e:	4b60      	ldr	r3, [pc, #384]	; (13e0 <bme280_calc_cal+0x1b8>)
    1260:	795b      	ldrb	r3, [r3, #5]
    1262:	b29b      	uxth	r3, r3
    1264:	021b      	lsls	r3, r3, #8
    1266:	b29a      	uxth	r2, r3
    1268:	4b5d      	ldr	r3, [pc, #372]	; (13e0 <bme280_calc_cal+0x1b8>)
    126a:	791b      	ldrb	r3, [r3, #4]
    126c:	b29b      	uxth	r3, r3
    126e:	18d3      	adds	r3, r2, r3
    1270:	b29b      	uxth	r3, r3
    1272:	b21a      	sxth	r2, r3
    1274:	4b5d      	ldr	r3, [pc, #372]	; (13ec <bme280_calc_cal+0x1c4>)
    1276:	801a      	strh	r2, [r3, #0]
	
	P1 = (cal_data[7] << 8)+cal_data[6];
    1278:	4b59      	ldr	r3, [pc, #356]	; (13e0 <bme280_calc_cal+0x1b8>)
    127a:	79db      	ldrb	r3, [r3, #7]
    127c:	b29b      	uxth	r3, r3
    127e:	021b      	lsls	r3, r3, #8
    1280:	b29a      	uxth	r2, r3
    1282:	4b57      	ldr	r3, [pc, #348]	; (13e0 <bme280_calc_cal+0x1b8>)
    1284:	799b      	ldrb	r3, [r3, #6]
    1286:	b29b      	uxth	r3, r3
    1288:	18d3      	adds	r3, r2, r3
    128a:	b29a      	uxth	r2, r3
    128c:	4b58      	ldr	r3, [pc, #352]	; (13f0 <bme280_calc_cal+0x1c8>)
    128e:	801a      	strh	r2, [r3, #0]
	P2 = (cal_data[9] << 8)+cal_data[8];
    1290:	4b53      	ldr	r3, [pc, #332]	; (13e0 <bme280_calc_cal+0x1b8>)
    1292:	7a5b      	ldrb	r3, [r3, #9]
    1294:	b29b      	uxth	r3, r3
    1296:	021b      	lsls	r3, r3, #8
    1298:	b29a      	uxth	r2, r3
    129a:	4b51      	ldr	r3, [pc, #324]	; (13e0 <bme280_calc_cal+0x1b8>)
    129c:	7a1b      	ldrb	r3, [r3, #8]
    129e:	b29b      	uxth	r3, r3
    12a0:	18d3      	adds	r3, r2, r3
    12a2:	b29b      	uxth	r3, r3
    12a4:	b21a      	sxth	r2, r3
    12a6:	4b53      	ldr	r3, [pc, #332]	; (13f4 <bme280_calc_cal+0x1cc>)
    12a8:	801a      	strh	r2, [r3, #0]
	P3 = (cal_data[11] << 8)+cal_data[10];
    12aa:	4b4d      	ldr	r3, [pc, #308]	; (13e0 <bme280_calc_cal+0x1b8>)
    12ac:	7adb      	ldrb	r3, [r3, #11]
    12ae:	b29b      	uxth	r3, r3
    12b0:	021b      	lsls	r3, r3, #8
    12b2:	b29a      	uxth	r2, r3
    12b4:	4b4a      	ldr	r3, [pc, #296]	; (13e0 <bme280_calc_cal+0x1b8>)
    12b6:	7a9b      	ldrb	r3, [r3, #10]
    12b8:	b29b      	uxth	r3, r3
    12ba:	18d3      	adds	r3, r2, r3
    12bc:	b29b      	uxth	r3, r3
    12be:	b21a      	sxth	r2, r3
    12c0:	4b4d      	ldr	r3, [pc, #308]	; (13f8 <bme280_calc_cal+0x1d0>)
    12c2:	801a      	strh	r2, [r3, #0]
	P4 = (cal_data[13] << 8)+cal_data[12];
    12c4:	4b46      	ldr	r3, [pc, #280]	; (13e0 <bme280_calc_cal+0x1b8>)
    12c6:	7b5b      	ldrb	r3, [r3, #13]
    12c8:	b29b      	uxth	r3, r3
    12ca:	021b      	lsls	r3, r3, #8
    12cc:	b29a      	uxth	r2, r3
    12ce:	4b44      	ldr	r3, [pc, #272]	; (13e0 <bme280_calc_cal+0x1b8>)
    12d0:	7b1b      	ldrb	r3, [r3, #12]
    12d2:	b29b      	uxth	r3, r3
    12d4:	18d3      	adds	r3, r2, r3
    12d6:	b29b      	uxth	r3, r3
    12d8:	b21a      	sxth	r2, r3
    12da:	4b48      	ldr	r3, [pc, #288]	; (13fc <bme280_calc_cal+0x1d4>)
    12dc:	801a      	strh	r2, [r3, #0]
	P5 = (cal_data[15] << 8)+cal_data[14];
    12de:	4b40      	ldr	r3, [pc, #256]	; (13e0 <bme280_calc_cal+0x1b8>)
    12e0:	7bdb      	ldrb	r3, [r3, #15]
    12e2:	b29b      	uxth	r3, r3
    12e4:	021b      	lsls	r3, r3, #8
    12e6:	b29a      	uxth	r2, r3
    12e8:	4b3d      	ldr	r3, [pc, #244]	; (13e0 <bme280_calc_cal+0x1b8>)
    12ea:	7b9b      	ldrb	r3, [r3, #14]
    12ec:	b29b      	uxth	r3, r3
    12ee:	18d3      	adds	r3, r2, r3
    12f0:	b29b      	uxth	r3, r3
    12f2:	b21a      	sxth	r2, r3
    12f4:	4b42      	ldr	r3, [pc, #264]	; (1400 <bme280_calc_cal+0x1d8>)
    12f6:	801a      	strh	r2, [r3, #0]
	P6 = (cal_data[17] << 8)+cal_data[16];
    12f8:	4b39      	ldr	r3, [pc, #228]	; (13e0 <bme280_calc_cal+0x1b8>)
    12fa:	7c5b      	ldrb	r3, [r3, #17]
    12fc:	b29b      	uxth	r3, r3
    12fe:	021b      	lsls	r3, r3, #8
    1300:	b29a      	uxth	r2, r3
    1302:	4b37      	ldr	r3, [pc, #220]	; (13e0 <bme280_calc_cal+0x1b8>)
    1304:	7c1b      	ldrb	r3, [r3, #16]
    1306:	b29b      	uxth	r3, r3
    1308:	18d3      	adds	r3, r2, r3
    130a:	b29b      	uxth	r3, r3
    130c:	b21a      	sxth	r2, r3
    130e:	4b3d      	ldr	r3, [pc, #244]	; (1404 <bme280_calc_cal+0x1dc>)
    1310:	801a      	strh	r2, [r3, #0]
	P7 = (cal_data[19] << 8)+cal_data[18];
    1312:	4b33      	ldr	r3, [pc, #204]	; (13e0 <bme280_calc_cal+0x1b8>)
    1314:	7cdb      	ldrb	r3, [r3, #19]
    1316:	b29b      	uxth	r3, r3
    1318:	021b      	lsls	r3, r3, #8
    131a:	b29a      	uxth	r2, r3
    131c:	4b30      	ldr	r3, [pc, #192]	; (13e0 <bme280_calc_cal+0x1b8>)
    131e:	7c9b      	ldrb	r3, [r3, #18]
    1320:	b29b      	uxth	r3, r3
    1322:	18d3      	adds	r3, r2, r3
    1324:	b29b      	uxth	r3, r3
    1326:	b21a      	sxth	r2, r3
    1328:	4b37      	ldr	r3, [pc, #220]	; (1408 <bme280_calc_cal+0x1e0>)
    132a:	801a      	strh	r2, [r3, #0]
	P8 = (cal_data[21] << 8)+cal_data[20];
    132c:	4b2c      	ldr	r3, [pc, #176]	; (13e0 <bme280_calc_cal+0x1b8>)
    132e:	7d5b      	ldrb	r3, [r3, #21]
    1330:	b29b      	uxth	r3, r3
    1332:	021b      	lsls	r3, r3, #8
    1334:	b29a      	uxth	r2, r3
    1336:	4b2a      	ldr	r3, [pc, #168]	; (13e0 <bme280_calc_cal+0x1b8>)
    1338:	7d1b      	ldrb	r3, [r3, #20]
    133a:	b29b      	uxth	r3, r3
    133c:	18d3      	adds	r3, r2, r3
    133e:	b29b      	uxth	r3, r3
    1340:	b21a      	sxth	r2, r3
    1342:	4b32      	ldr	r3, [pc, #200]	; (140c <bme280_calc_cal+0x1e4>)
    1344:	801a      	strh	r2, [r3, #0]
	P9 = (cal_data[23] << 8)+cal_data[22];
    1346:	4b26      	ldr	r3, [pc, #152]	; (13e0 <bme280_calc_cal+0x1b8>)
    1348:	7ddb      	ldrb	r3, [r3, #23]
    134a:	b29b      	uxth	r3, r3
    134c:	021b      	lsls	r3, r3, #8
    134e:	b29a      	uxth	r2, r3
    1350:	4b23      	ldr	r3, [pc, #140]	; (13e0 <bme280_calc_cal+0x1b8>)
    1352:	7d9b      	ldrb	r3, [r3, #22]
    1354:	b29b      	uxth	r3, r3
    1356:	18d3      	adds	r3, r2, r3
    1358:	b29b      	uxth	r3, r3
    135a:	b21a      	sxth	r2, r3
    135c:	4b2c      	ldr	r3, [pc, #176]	; (1410 <bme280_calc_cal+0x1e8>)
    135e:	801a      	strh	r2, [r3, #0]
	
	H1 = cal_data[24];
    1360:	4b1f      	ldr	r3, [pc, #124]	; (13e0 <bme280_calc_cal+0x1b8>)
    1362:	7e1a      	ldrb	r2, [r3, #24]
    1364:	4b2b      	ldr	r3, [pc, #172]	; (1414 <bme280_calc_cal+0x1ec>)
    1366:	701a      	strb	r2, [r3, #0]
	H2 = (cal_data[26] << 8)+cal_data[25];
    1368:	4b1d      	ldr	r3, [pc, #116]	; (13e0 <bme280_calc_cal+0x1b8>)
    136a:	7e9b      	ldrb	r3, [r3, #26]
    136c:	b29b      	uxth	r3, r3
    136e:	021b      	lsls	r3, r3, #8
    1370:	b29a      	uxth	r2, r3
    1372:	4b1b      	ldr	r3, [pc, #108]	; (13e0 <bme280_calc_cal+0x1b8>)
    1374:	7e5b      	ldrb	r3, [r3, #25]
    1376:	b29b      	uxth	r3, r3
    1378:	18d3      	adds	r3, r2, r3
    137a:	b29b      	uxth	r3, r3
    137c:	b21a      	sxth	r2, r3
    137e:	4b26      	ldr	r3, [pc, #152]	; (1418 <bme280_calc_cal+0x1f0>)
    1380:	801a      	strh	r2, [r3, #0]
	H3 = cal_data[27];
    1382:	4b17      	ldr	r3, [pc, #92]	; (13e0 <bme280_calc_cal+0x1b8>)
    1384:	7eda      	ldrb	r2, [r3, #27]
    1386:	4b25      	ldr	r3, [pc, #148]	; (141c <bme280_calc_cal+0x1f4>)
    1388:	701a      	strb	r2, [r3, #0]
	H4 = (cal_data[29] << 4)+(cal_data[28] & 0x0F);
    138a:	4b15      	ldr	r3, [pc, #84]	; (13e0 <bme280_calc_cal+0x1b8>)
    138c:	7f5b      	ldrb	r3, [r3, #29]
    138e:	b29b      	uxth	r3, r3
    1390:	011b      	lsls	r3, r3, #4
    1392:	b29a      	uxth	r2, r3
    1394:	4b12      	ldr	r3, [pc, #72]	; (13e0 <bme280_calc_cal+0x1b8>)
    1396:	7f1b      	ldrb	r3, [r3, #28]
    1398:	b29b      	uxth	r3, r3
    139a:	210f      	movs	r1, #15
    139c:	400b      	ands	r3, r1
    139e:	b29b      	uxth	r3, r3
    13a0:	18d3      	adds	r3, r2, r3
    13a2:	b29b      	uxth	r3, r3
    13a4:	b21a      	sxth	r2, r3
    13a6:	4b1e      	ldr	r3, [pc, #120]	; (1420 <bme280_calc_cal+0x1f8>)
    13a8:	801a      	strh	r2, [r3, #0]
	H5 = (cal_data[31] << 4)+((cal_data[30] >> 4) & 0x0F);
    13aa:	4b0d      	ldr	r3, [pc, #52]	; (13e0 <bme280_calc_cal+0x1b8>)
    13ac:	7fdb      	ldrb	r3, [r3, #31]
    13ae:	b29b      	uxth	r3, r3
    13b0:	011b      	lsls	r3, r3, #4
    13b2:	b29a      	uxth	r2, r3
    13b4:	4b0a      	ldr	r3, [pc, #40]	; (13e0 <bme280_calc_cal+0x1b8>)
    13b6:	7f9b      	ldrb	r3, [r3, #30]
    13b8:	091b      	lsrs	r3, r3, #4
    13ba:	b2db      	uxtb	r3, r3
    13bc:	b29b      	uxth	r3, r3
    13be:	210f      	movs	r1, #15
    13c0:	400b      	ands	r3, r1
    13c2:	b29b      	uxth	r3, r3
    13c4:	18d3      	adds	r3, r2, r3
    13c6:	b29b      	uxth	r3, r3
    13c8:	b21a      	sxth	r2, r3
    13ca:	4b16      	ldr	r3, [pc, #88]	; (1424 <bme280_calc_cal+0x1fc>)
    13cc:	801a      	strh	r2, [r3, #0]
	H6 = cal_data[32];
    13ce:	4b04      	ldr	r3, [pc, #16]	; (13e0 <bme280_calc_cal+0x1b8>)
    13d0:	2220      	movs	r2, #32
    13d2:	5c9b      	ldrb	r3, [r3, r2]
    13d4:	b25a      	sxtb	r2, r3
    13d6:	4b14      	ldr	r3, [pc, #80]	; (1428 <bme280_calc_cal+0x200>)
    13d8:	701a      	strb	r2, [r3, #0]
}
    13da:	46c0      	nop			; (mov r8, r8)
    13dc:	46bd      	mov	sp, r7
    13de:	bd80      	pop	{r7, pc}
    13e0:	20000118 	.word	0x20000118
    13e4:	20000160 	.word	0x20000160
    13e8:	20000114 	.word	0x20000114
    13ec:	20000152 	.word	0x20000152
    13f0:	20000142 	.word	0x20000142
    13f4:	2000014e 	.word	0x2000014e
    13f8:	20000162 	.word	0x20000162
    13fc:	20000156 	.word	0x20000156
    1400:	20000176 	.word	0x20000176
    1404:	2000014a 	.word	0x2000014a
    1408:	20000174 	.word	0x20000174
    140c:	20000148 	.word	0x20000148
    1410:	20000158 	.word	0x20000158
    1414:	2000017a 	.word	0x2000017a
    1418:	20000178 	.word	0x20000178
    141c:	2000015a 	.word	0x2000015a
    1420:	20000116 	.word	0x20000116
    1424:	20000154 	.word	0x20000154
    1428:	20000150 	.word	0x20000150

0000142c <bme280_calc_temp>:

int32_t bme280_calc_temp(int32_t read_temp)
{
    142c:	b580      	push	{r7, lr}
    142e:	b086      	sub	sp, #24
    1430:	af00      	add	r7, sp, #0
    1432:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 = ((((read_temp>>3) - ((int32_t)T1<<1))) * ((int32_t)T2)) >> 11;
    1434:	687b      	ldr	r3, [r7, #4]
    1436:	10da      	asrs	r2, r3, #3
    1438:	4b16      	ldr	r3, [pc, #88]	; (1494 <bme280_calc_temp+0x68>)
    143a:	881b      	ldrh	r3, [r3, #0]
    143c:	005b      	lsls	r3, r3, #1
    143e:	1ad3      	subs	r3, r2, r3
    1440:	4a15      	ldr	r2, [pc, #84]	; (1498 <bme280_calc_temp+0x6c>)
    1442:	2100      	movs	r1, #0
    1444:	5e52      	ldrsh	r2, [r2, r1]
    1446:	4353      	muls	r3, r2
    1448:	12db      	asrs	r3, r3, #11
    144a:	617b      	str	r3, [r7, #20]
	var2 = (((((read_temp>>4) - ((int32_t)T1)) * ((read_temp>>4) - ((int32_t)T1))) >> 12) *	((int32_t)T3)) >> 14;
    144c:	687b      	ldr	r3, [r7, #4]
    144e:	111b      	asrs	r3, r3, #4
    1450:	4a10      	ldr	r2, [pc, #64]	; (1494 <bme280_calc_temp+0x68>)
    1452:	8812      	ldrh	r2, [r2, #0]
    1454:	1a9b      	subs	r3, r3, r2
    1456:	687a      	ldr	r2, [r7, #4]
    1458:	1112      	asrs	r2, r2, #4
    145a:	490e      	ldr	r1, [pc, #56]	; (1494 <bme280_calc_temp+0x68>)
    145c:	8809      	ldrh	r1, [r1, #0]
    145e:	1a52      	subs	r2, r2, r1
    1460:	4353      	muls	r3, r2
    1462:	131b      	asrs	r3, r3, #12
    1464:	4a0d      	ldr	r2, [pc, #52]	; (149c <bme280_calc_temp+0x70>)
    1466:	2100      	movs	r1, #0
    1468:	5e52      	ldrsh	r2, [r2, r1]
    146a:	4353      	muls	r3, r2
    146c:	139b      	asrs	r3, r3, #14
    146e:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
    1470:	697a      	ldr	r2, [r7, #20]
    1472:	693b      	ldr	r3, [r7, #16]
    1474:	18d2      	adds	r2, r2, r3
    1476:	4b0a      	ldr	r3, [pc, #40]	; (14a0 <bme280_calc_temp+0x74>)
    1478:	601a      	str	r2, [r3, #0]
	T = (t_fine * 5 + 128) >> 8;
    147a:	4b09      	ldr	r3, [pc, #36]	; (14a0 <bme280_calc_temp+0x74>)
    147c:	681a      	ldr	r2, [r3, #0]
    147e:	0013      	movs	r3, r2
    1480:	009b      	lsls	r3, r3, #2
    1482:	189b      	adds	r3, r3, r2
    1484:	3380      	adds	r3, #128	; 0x80
    1486:	121b      	asrs	r3, r3, #8
    1488:	60fb      	str	r3, [r7, #12]
	return T;
    148a:	68fb      	ldr	r3, [r7, #12]
}
    148c:	0018      	movs	r0, r3
    148e:	46bd      	mov	sp, r7
    1490:	b006      	add	sp, #24
    1492:	bd80      	pop	{r7, pc}
    1494:	20000160 	.word	0x20000160
    1498:	20000114 	.word	0x20000114
    149c:	20000152 	.word	0x20000152
    14a0:	2000017c 	.word	0x2000017c

000014a4 <bme280_calc_pres>:

int32_t bme280_calc_pres(int32_t read_pres)
{
    14a4:	b580      	push	{r7, lr}
    14a6:	b086      	sub	sp, #24
    14a8:	af00      	add	r7, sp, #0
    14aa:	6078      	str	r0, [r7, #4]
	int32_t var1, var2;
	uint32_t p;
	var1 = (((int32_t)t_fine)>>1) - (int32_t)64000;
    14ac:	4b46      	ldr	r3, [pc, #280]	; (15c8 <bme280_calc_pres+0x124>)
    14ae:	681b      	ldr	r3, [r3, #0]
    14b0:	105b      	asrs	r3, r3, #1
    14b2:	4a46      	ldr	r2, [pc, #280]	; (15cc <bme280_calc_pres+0x128>)
    14b4:	4694      	mov	ip, r2
    14b6:	4463      	add	r3, ip
    14b8:	613b      	str	r3, [r7, #16]
	var2 = (((var1>>2) * (var1>>2)) >> 11 ) * ((int32_t)P6);
    14ba:	693b      	ldr	r3, [r7, #16]
    14bc:	109b      	asrs	r3, r3, #2
    14be:	693a      	ldr	r2, [r7, #16]
    14c0:	1092      	asrs	r2, r2, #2
    14c2:	4353      	muls	r3, r2
    14c4:	12db      	asrs	r3, r3, #11
    14c6:	4a42      	ldr	r2, [pc, #264]	; (15d0 <bme280_calc_pres+0x12c>)
    14c8:	2100      	movs	r1, #0
    14ca:	5e52      	ldrsh	r2, [r2, r1]
    14cc:	4353      	muls	r3, r2
    14ce:	60fb      	str	r3, [r7, #12]
	var2 = var2 + ((var1*((int32_t)P5))<<1);
    14d0:	4b40      	ldr	r3, [pc, #256]	; (15d4 <bme280_calc_pres+0x130>)
    14d2:	2200      	movs	r2, #0
    14d4:	5e9b      	ldrsh	r3, [r3, r2]
    14d6:	001a      	movs	r2, r3
    14d8:	693b      	ldr	r3, [r7, #16]
    14da:	4353      	muls	r3, r2
    14dc:	005b      	lsls	r3, r3, #1
    14de:	68fa      	ldr	r2, [r7, #12]
    14e0:	18d3      	adds	r3, r2, r3
    14e2:	60fb      	str	r3, [r7, #12]
	var2 = (var2>>2)+(((int32_t)P4)<<16);
    14e4:	68fb      	ldr	r3, [r7, #12]
    14e6:	109a      	asrs	r2, r3, #2
    14e8:	4b3b      	ldr	r3, [pc, #236]	; (15d8 <bme280_calc_pres+0x134>)
    14ea:	2100      	movs	r1, #0
    14ec:	5e5b      	ldrsh	r3, [r3, r1]
    14ee:	041b      	lsls	r3, r3, #16
    14f0:	18d3      	adds	r3, r2, r3
    14f2:	60fb      	str	r3, [r7, #12]
	var1 = (((P3 * (((var1>>2) * (var1>>2)) >> 13 )) >> 3) + ((((int32_t)P2) * var1)>>1))>>18;
    14f4:	4b39      	ldr	r3, [pc, #228]	; (15dc <bme280_calc_pres+0x138>)
    14f6:	2200      	movs	r2, #0
    14f8:	5e9b      	ldrsh	r3, [r3, r2]
    14fa:	0019      	movs	r1, r3
    14fc:	693b      	ldr	r3, [r7, #16]
    14fe:	109b      	asrs	r3, r3, #2
    1500:	693a      	ldr	r2, [r7, #16]
    1502:	1092      	asrs	r2, r2, #2
    1504:	4353      	muls	r3, r2
    1506:	135b      	asrs	r3, r3, #13
    1508:	434b      	muls	r3, r1
    150a:	10da      	asrs	r2, r3, #3
    150c:	4b34      	ldr	r3, [pc, #208]	; (15e0 <bme280_calc_pres+0x13c>)
    150e:	2100      	movs	r1, #0
    1510:	5e5b      	ldrsh	r3, [r3, r1]
    1512:	0019      	movs	r1, r3
    1514:	693b      	ldr	r3, [r7, #16]
    1516:	434b      	muls	r3, r1
    1518:	105b      	asrs	r3, r3, #1
    151a:	18d3      	adds	r3, r2, r3
    151c:	149b      	asrs	r3, r3, #18
    151e:	613b      	str	r3, [r7, #16]
	var1 =((((32768+var1))*((int32_t)P1))>>15);
    1520:	693b      	ldr	r3, [r7, #16]
    1522:	2280      	movs	r2, #128	; 0x80
    1524:	0212      	lsls	r2, r2, #8
    1526:	4694      	mov	ip, r2
    1528:	4463      	add	r3, ip
    152a:	4a2e      	ldr	r2, [pc, #184]	; (15e4 <bme280_calc_pres+0x140>)
    152c:	8812      	ldrh	r2, [r2, #0]
    152e:	4353      	muls	r3, r2
    1530:	13db      	asrs	r3, r3, #15
    1532:	613b      	str	r3, [r7, #16]
	if (var1 == 0)
    1534:	693b      	ldr	r3, [r7, #16]
    1536:	2b00      	cmp	r3, #0
    1538:	d101      	bne.n	153e <bme280_calc_pres+0x9a>
	{
		return 0; // avoid exception caused by division by zero
    153a:	2300      	movs	r3, #0
    153c:	e040      	b.n	15c0 <bme280_calc_pres+0x11c>
	}
	p = (((uint32_t)(((int32_t)1048576)-read_pres)-(var2>>12)))*3125;
    153e:	687b      	ldr	r3, [r7, #4]
    1540:	425b      	negs	r3, r3
    1542:	68fa      	ldr	r2, [r7, #12]
    1544:	1312      	asrs	r2, r2, #12
    1546:	1a9b      	subs	r3, r3, r2
    1548:	4a27      	ldr	r2, [pc, #156]	; (15e8 <bme280_calc_pres+0x144>)
    154a:	4353      	muls	r3, r2
    154c:	4a27      	ldr	r2, [pc, #156]	; (15ec <bme280_calc_pres+0x148>)
    154e:	4694      	mov	ip, r2
    1550:	4463      	add	r3, ip
    1552:	617b      	str	r3, [r7, #20]
	if (p < 0x80000000)
    1554:	697b      	ldr	r3, [r7, #20]
    1556:	2b00      	cmp	r3, #0
    1558:	db08      	blt.n	156c <bme280_calc_pres+0xc8>
	{
		p = (p << 1) / ((uint32_t)var1);
    155a:	697b      	ldr	r3, [r7, #20]
    155c:	005a      	lsls	r2, r3, #1
    155e:	6939      	ldr	r1, [r7, #16]
    1560:	4b23      	ldr	r3, [pc, #140]	; (15f0 <bme280_calc_pres+0x14c>)
    1562:	0010      	movs	r0, r2
    1564:	4798      	blx	r3
    1566:	0003      	movs	r3, r0
    1568:	617b      	str	r3, [r7, #20]
    156a:	e007      	b.n	157c <bme280_calc_pres+0xd8>
	}
	else
	{
		p = (p / (uint32_t)var1) * 2;
    156c:	693a      	ldr	r2, [r7, #16]
    156e:	4b20      	ldr	r3, [pc, #128]	; (15f0 <bme280_calc_pres+0x14c>)
    1570:	0011      	movs	r1, r2
    1572:	6978      	ldr	r0, [r7, #20]
    1574:	4798      	blx	r3
    1576:	0003      	movs	r3, r0
    1578:	005b      	lsls	r3, r3, #1
    157a:	617b      	str	r3, [r7, #20]
	}
	var1 = (((int32_t)P9) * ((int32_t)(((p>>3) * (p>>3))>>13)))>>12;
    157c:	4b1d      	ldr	r3, [pc, #116]	; (15f4 <bme280_calc_pres+0x150>)
    157e:	2200      	movs	r2, #0
    1580:	5e9b      	ldrsh	r3, [r3, r2]
    1582:	0019      	movs	r1, r3
    1584:	697b      	ldr	r3, [r7, #20]
    1586:	08db      	lsrs	r3, r3, #3
    1588:	697a      	ldr	r2, [r7, #20]
    158a:	08d2      	lsrs	r2, r2, #3
    158c:	4353      	muls	r3, r2
    158e:	0b5b      	lsrs	r3, r3, #13
    1590:	434b      	muls	r3, r1
    1592:	131b      	asrs	r3, r3, #12
    1594:	613b      	str	r3, [r7, #16]
	var2 = (((int32_t)(p>>2)) * ((int32_t)P8))>>13;
    1596:	697b      	ldr	r3, [r7, #20]
    1598:	089b      	lsrs	r3, r3, #2
    159a:	001a      	movs	r2, r3
    159c:	4b16      	ldr	r3, [pc, #88]	; (15f8 <bme280_calc_pres+0x154>)
    159e:	2100      	movs	r1, #0
    15a0:	5e5b      	ldrsh	r3, [r3, r1]
    15a2:	4353      	muls	r3, r2
    15a4:	135b      	asrs	r3, r3, #13
    15a6:	60fb      	str	r3, [r7, #12]
	p = (uint32_t)((int32_t)p + ((var1 + var2 + P7) >> 4));
    15a8:	693a      	ldr	r2, [r7, #16]
    15aa:	68fb      	ldr	r3, [r7, #12]
    15ac:	18d3      	adds	r3, r2, r3
    15ae:	4a13      	ldr	r2, [pc, #76]	; (15fc <bme280_calc_pres+0x158>)
    15b0:	2100      	movs	r1, #0
    15b2:	5e52      	ldrsh	r2, [r2, r1]
    15b4:	189b      	adds	r3, r3, r2
    15b6:	111a      	asrs	r2, r3, #4
    15b8:	697b      	ldr	r3, [r7, #20]
    15ba:	18d3      	adds	r3, r2, r3
    15bc:	617b      	str	r3, [r7, #20]
	return p;
    15be:	697b      	ldr	r3, [r7, #20]
}
    15c0:	0018      	movs	r0, r3
    15c2:	46bd      	mov	sp, r7
    15c4:	b006      	add	sp, #24
    15c6:	bd80      	pop	{r7, pc}
    15c8:	2000017c 	.word	0x2000017c
    15cc:	ffff0600 	.word	0xffff0600
    15d0:	2000014a 	.word	0x2000014a
    15d4:	20000176 	.word	0x20000176
    15d8:	20000156 	.word	0x20000156
    15dc:	20000162 	.word	0x20000162
    15e0:	2000014e 	.word	0x2000014e
    15e4:	20000142 	.word	0x20000142
    15e8:	00000c35 	.word	0x00000c35
    15ec:	c3500000 	.word	0xc3500000
    15f0:	00005811 	.word	0x00005811
    15f4:	20000158 	.word	0x20000158
    15f8:	20000148 	.word	0x20000148
    15fc:	20000174 	.word	0x20000174

00001600 <bme280_calc_hum>:

double bme280_calc_hum(int32_t read_hum)
{
    1600:	b5f0      	push	{r4, r5, r6, r7, lr}
    1602:	b089      	sub	sp, #36	; 0x24
    1604:	af00      	add	r7, sp, #0
    1606:	6178      	str	r0, [r7, #20]
	double var_H;
	var_H = (((double)t_fine) - 76800.0);
    1608:	4b75      	ldr	r3, [pc, #468]	; (17e0 <bme280_calc_hum+0x1e0>)
    160a:	681a      	ldr	r2, [r3, #0]
    160c:	4b75      	ldr	r3, [pc, #468]	; (17e4 <bme280_calc_hum+0x1e4>)
    160e:	0010      	movs	r0, r2
    1610:	4798      	blx	r3
    1612:	4c75      	ldr	r4, [pc, #468]	; (17e8 <bme280_calc_hum+0x1e8>)
    1614:	2200      	movs	r2, #0
    1616:	4b75      	ldr	r3, [pc, #468]	; (17ec <bme280_calc_hum+0x1ec>)
    1618:	47a0      	blx	r4
    161a:	0003      	movs	r3, r0
    161c:	000c      	movs	r4, r1
    161e:	61bb      	str	r3, [r7, #24]
    1620:	61fc      	str	r4, [r7, #28]
	var_H = (read_hum - (((double)H4) * 64.0 + ((double)H5) / 16384.0 * var_H)) * (((double)H2) / 65536.0 * (1.0 + ((double)H6) / 67108864.0 * var_H * (1.0 + ((double)H3) / 67108864.0 * var_H)));
    1622:	4b70      	ldr	r3, [pc, #448]	; (17e4 <bme280_calc_hum+0x1e4>)
    1624:	6978      	ldr	r0, [r7, #20]
    1626:	4798      	blx	r3
    1628:	0005      	movs	r5, r0
    162a:	000e      	movs	r6, r1
    162c:	4b70      	ldr	r3, [pc, #448]	; (17f0 <bme280_calc_hum+0x1f0>)
    162e:	2200      	movs	r2, #0
    1630:	5e9a      	ldrsh	r2, [r3, r2]
    1632:	4b6c      	ldr	r3, [pc, #432]	; (17e4 <bme280_calc_hum+0x1e4>)
    1634:	0010      	movs	r0, r2
    1636:	4798      	blx	r3
    1638:	4c6e      	ldr	r4, [pc, #440]	; (17f4 <bme280_calc_hum+0x1f4>)
    163a:	2200      	movs	r2, #0
    163c:	4b6e      	ldr	r3, [pc, #440]	; (17f8 <bme280_calc_hum+0x1f8>)
    163e:	47a0      	blx	r4
    1640:	0003      	movs	r3, r0
    1642:	000c      	movs	r4, r1
    1644:	60bb      	str	r3, [r7, #8]
    1646:	60fc      	str	r4, [r7, #12]
    1648:	4b6c      	ldr	r3, [pc, #432]	; (17fc <bme280_calc_hum+0x1fc>)
    164a:	2100      	movs	r1, #0
    164c:	5e5a      	ldrsh	r2, [r3, r1]
    164e:	4b65      	ldr	r3, [pc, #404]	; (17e4 <bme280_calc_hum+0x1e4>)
    1650:	0010      	movs	r0, r2
    1652:	4798      	blx	r3
    1654:	4c6a      	ldr	r4, [pc, #424]	; (1800 <bme280_calc_hum+0x200>)
    1656:	2200      	movs	r2, #0
    1658:	4b6a      	ldr	r3, [pc, #424]	; (1804 <bme280_calc_hum+0x204>)
    165a:	47a0      	blx	r4
    165c:	0003      	movs	r3, r0
    165e:	000c      	movs	r4, r1
    1660:	0018      	movs	r0, r3
    1662:	0021      	movs	r1, r4
    1664:	4c63      	ldr	r4, [pc, #396]	; (17f4 <bme280_calc_hum+0x1f4>)
    1666:	69ba      	ldr	r2, [r7, #24]
    1668:	69fb      	ldr	r3, [r7, #28]
    166a:	47a0      	blx	r4
    166c:	0003      	movs	r3, r0
    166e:	000c      	movs	r4, r1
    1670:	001a      	movs	r2, r3
    1672:	0023      	movs	r3, r4
    1674:	4c64      	ldr	r4, [pc, #400]	; (1808 <bme280_calc_hum+0x208>)
    1676:	68b8      	ldr	r0, [r7, #8]
    1678:	68f9      	ldr	r1, [r7, #12]
    167a:	47a0      	blx	r4
    167c:	0003      	movs	r3, r0
    167e:	000c      	movs	r4, r1
    1680:	001a      	movs	r2, r3
    1682:	0023      	movs	r3, r4
    1684:	4c58      	ldr	r4, [pc, #352]	; (17e8 <bme280_calc_hum+0x1e8>)
    1686:	0028      	movs	r0, r5
    1688:	0031      	movs	r1, r6
    168a:	47a0      	blx	r4
    168c:	0003      	movs	r3, r0
    168e:	000c      	movs	r4, r1
    1690:	001d      	movs	r5, r3
    1692:	0026      	movs	r6, r4
    1694:	4b5d      	ldr	r3, [pc, #372]	; (180c <bme280_calc_hum+0x20c>)
    1696:	2200      	movs	r2, #0
    1698:	5e9a      	ldrsh	r2, [r3, r2]
    169a:	4b52      	ldr	r3, [pc, #328]	; (17e4 <bme280_calc_hum+0x1e4>)
    169c:	0010      	movs	r0, r2
    169e:	4798      	blx	r3
    16a0:	4c57      	ldr	r4, [pc, #348]	; (1800 <bme280_calc_hum+0x200>)
    16a2:	2200      	movs	r2, #0
    16a4:	4b5a      	ldr	r3, [pc, #360]	; (1810 <bme280_calc_hum+0x210>)
    16a6:	47a0      	blx	r4
    16a8:	0003      	movs	r3, r0
    16aa:	000c      	movs	r4, r1
    16ac:	60bb      	str	r3, [r7, #8]
    16ae:	60fc      	str	r4, [r7, #12]
    16b0:	4b58      	ldr	r3, [pc, #352]	; (1814 <bme280_calc_hum+0x214>)
    16b2:	2200      	movs	r2, #0
    16b4:	569a      	ldrsb	r2, [r3, r2]
    16b6:	4b4b      	ldr	r3, [pc, #300]	; (17e4 <bme280_calc_hum+0x1e4>)
    16b8:	0010      	movs	r0, r2
    16ba:	4798      	blx	r3
    16bc:	4c50      	ldr	r4, [pc, #320]	; (1800 <bme280_calc_hum+0x200>)
    16be:	2200      	movs	r2, #0
    16c0:	4b55      	ldr	r3, [pc, #340]	; (1818 <bme280_calc_hum+0x218>)
    16c2:	47a0      	blx	r4
    16c4:	0003      	movs	r3, r0
    16c6:	000c      	movs	r4, r1
    16c8:	0018      	movs	r0, r3
    16ca:	0021      	movs	r1, r4
    16cc:	4c49      	ldr	r4, [pc, #292]	; (17f4 <bme280_calc_hum+0x1f4>)
    16ce:	69ba      	ldr	r2, [r7, #24]
    16d0:	69fb      	ldr	r3, [r7, #28]
    16d2:	47a0      	blx	r4
    16d4:	0003      	movs	r3, r0
    16d6:	000c      	movs	r4, r1
    16d8:	603b      	str	r3, [r7, #0]
    16da:	607c      	str	r4, [r7, #4]
    16dc:	4b4f      	ldr	r3, [pc, #316]	; (181c <bme280_calc_hum+0x21c>)
    16de:	781a      	ldrb	r2, [r3, #0]
    16e0:	4b4f      	ldr	r3, [pc, #316]	; (1820 <bme280_calc_hum+0x220>)
    16e2:	0010      	movs	r0, r2
    16e4:	4798      	blx	r3
    16e6:	4c46      	ldr	r4, [pc, #280]	; (1800 <bme280_calc_hum+0x200>)
    16e8:	2200      	movs	r2, #0
    16ea:	4b4b      	ldr	r3, [pc, #300]	; (1818 <bme280_calc_hum+0x218>)
    16ec:	47a0      	blx	r4
    16ee:	0003      	movs	r3, r0
    16f0:	000c      	movs	r4, r1
    16f2:	0018      	movs	r0, r3
    16f4:	0021      	movs	r1, r4
    16f6:	4c3f      	ldr	r4, [pc, #252]	; (17f4 <bme280_calc_hum+0x1f4>)
    16f8:	69ba      	ldr	r2, [r7, #24]
    16fa:	69fb      	ldr	r3, [r7, #28]
    16fc:	47a0      	blx	r4
    16fe:	0003      	movs	r3, r0
    1700:	000c      	movs	r4, r1
    1702:	0018      	movs	r0, r3
    1704:	0021      	movs	r1, r4
    1706:	4c40      	ldr	r4, [pc, #256]	; (1808 <bme280_calc_hum+0x208>)
    1708:	2200      	movs	r2, #0
    170a:	4b46      	ldr	r3, [pc, #280]	; (1824 <bme280_calc_hum+0x224>)
    170c:	47a0      	blx	r4
    170e:	0003      	movs	r3, r0
    1710:	000c      	movs	r4, r1
    1712:	001a      	movs	r2, r3
    1714:	0023      	movs	r3, r4
    1716:	4c37      	ldr	r4, [pc, #220]	; (17f4 <bme280_calc_hum+0x1f4>)
    1718:	6838      	ldr	r0, [r7, #0]
    171a:	6879      	ldr	r1, [r7, #4]
    171c:	47a0      	blx	r4
    171e:	0003      	movs	r3, r0
    1720:	000c      	movs	r4, r1
    1722:	0018      	movs	r0, r3
    1724:	0021      	movs	r1, r4
    1726:	4c38      	ldr	r4, [pc, #224]	; (1808 <bme280_calc_hum+0x208>)
    1728:	2200      	movs	r2, #0
    172a:	4b3e      	ldr	r3, [pc, #248]	; (1824 <bme280_calc_hum+0x224>)
    172c:	47a0      	blx	r4
    172e:	0003      	movs	r3, r0
    1730:	000c      	movs	r4, r1
    1732:	001a      	movs	r2, r3
    1734:	0023      	movs	r3, r4
    1736:	4c2f      	ldr	r4, [pc, #188]	; (17f4 <bme280_calc_hum+0x1f4>)
    1738:	68b8      	ldr	r0, [r7, #8]
    173a:	68f9      	ldr	r1, [r7, #12]
    173c:	47a0      	blx	r4
    173e:	0003      	movs	r3, r0
    1740:	000c      	movs	r4, r1
    1742:	001a      	movs	r2, r3
    1744:	0023      	movs	r3, r4
    1746:	4c2b      	ldr	r4, [pc, #172]	; (17f4 <bme280_calc_hum+0x1f4>)
    1748:	0028      	movs	r0, r5
    174a:	0031      	movs	r1, r6
    174c:	47a0      	blx	r4
    174e:	0003      	movs	r3, r0
    1750:	000c      	movs	r4, r1
    1752:	61bb      	str	r3, [r7, #24]
    1754:	61fc      	str	r4, [r7, #28]
	var_H = var_H * (1.0 - ((double)H1) * var_H / 524288.0);
    1756:	4b34      	ldr	r3, [pc, #208]	; (1828 <bme280_calc_hum+0x228>)
    1758:	781a      	ldrb	r2, [r3, #0]
    175a:	4b31      	ldr	r3, [pc, #196]	; (1820 <bme280_calc_hum+0x220>)
    175c:	0010      	movs	r0, r2
    175e:	4798      	blx	r3
    1760:	4c24      	ldr	r4, [pc, #144]	; (17f4 <bme280_calc_hum+0x1f4>)
    1762:	69ba      	ldr	r2, [r7, #24]
    1764:	69fb      	ldr	r3, [r7, #28]
    1766:	47a0      	blx	r4
    1768:	0003      	movs	r3, r0
    176a:	000c      	movs	r4, r1
    176c:	0018      	movs	r0, r3
    176e:	0021      	movs	r1, r4
    1770:	4c23      	ldr	r4, [pc, #140]	; (1800 <bme280_calc_hum+0x200>)
    1772:	2200      	movs	r2, #0
    1774:	4b2d      	ldr	r3, [pc, #180]	; (182c <bme280_calc_hum+0x22c>)
    1776:	47a0      	blx	r4
    1778:	0003      	movs	r3, r0
    177a:	000c      	movs	r4, r1
    177c:	001a      	movs	r2, r3
    177e:	0023      	movs	r3, r4
    1780:	4c19      	ldr	r4, [pc, #100]	; (17e8 <bme280_calc_hum+0x1e8>)
    1782:	2000      	movs	r0, #0
    1784:	4927      	ldr	r1, [pc, #156]	; (1824 <bme280_calc_hum+0x224>)
    1786:	47a0      	blx	r4
    1788:	0003      	movs	r3, r0
    178a:	000c      	movs	r4, r1
    178c:	001a      	movs	r2, r3
    178e:	0023      	movs	r3, r4
    1790:	4c18      	ldr	r4, [pc, #96]	; (17f4 <bme280_calc_hum+0x1f4>)
    1792:	69b8      	ldr	r0, [r7, #24]
    1794:	69f9      	ldr	r1, [r7, #28]
    1796:	47a0      	blx	r4
    1798:	0003      	movs	r3, r0
    179a:	000c      	movs	r4, r1
    179c:	61bb      	str	r3, [r7, #24]
    179e:	61fc      	str	r4, [r7, #28]
	if (var_H > 100.0)
    17a0:	4c23      	ldr	r4, [pc, #140]	; (1830 <bme280_calc_hum+0x230>)
    17a2:	2200      	movs	r2, #0
    17a4:	4b23      	ldr	r3, [pc, #140]	; (1834 <bme280_calc_hum+0x234>)
    17a6:	69b8      	ldr	r0, [r7, #24]
    17a8:	69f9      	ldr	r1, [r7, #28]
    17aa:	47a0      	blx	r4
    17ac:	1e03      	subs	r3, r0, #0
    17ae:	d004      	beq.n	17ba <bme280_calc_hum+0x1ba>
		var_H = 100.0;
    17b0:	2300      	movs	r3, #0
    17b2:	4c20      	ldr	r4, [pc, #128]	; (1834 <bme280_calc_hum+0x234>)
    17b4:	61bb      	str	r3, [r7, #24]
    17b6:	61fc      	str	r4, [r7, #28]
    17b8:	e00b      	b.n	17d2 <bme280_calc_hum+0x1d2>
	else if (var_H < 0.0)
    17ba:	4c1f      	ldr	r4, [pc, #124]	; (1838 <bme280_calc_hum+0x238>)
    17bc:	2200      	movs	r2, #0
    17be:	2300      	movs	r3, #0
    17c0:	69b8      	ldr	r0, [r7, #24]
    17c2:	69f9      	ldr	r1, [r7, #28]
    17c4:	47a0      	blx	r4
    17c6:	1e03      	subs	r3, r0, #0
    17c8:	d003      	beq.n	17d2 <bme280_calc_hum+0x1d2>
		var_H = 0.0;
    17ca:	2300      	movs	r3, #0
    17cc:	2400      	movs	r4, #0
    17ce:	61bb      	str	r3, [r7, #24]
    17d0:	61fc      	str	r4, [r7, #28]
	return var_H;
    17d2:	69bb      	ldr	r3, [r7, #24]
    17d4:	69fc      	ldr	r4, [r7, #28]
}
    17d6:	0018      	movs	r0, r3
    17d8:	0021      	movs	r1, r4
    17da:	46bd      	mov	sp, r7
    17dc:	b009      	add	sp, #36	; 0x24
    17de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    17e0:	2000017c 	.word	0x2000017c
    17e4:	000075ad 	.word	0x000075ad
    17e8:	00006f41 	.word	0x00006f41
    17ec:	40f2c000 	.word	0x40f2c000
    17f0:	20000116 	.word	0x20000116
    17f4:	00006a41 	.word	0x00006a41
    17f8:	40500000 	.word	0x40500000
    17fc:	20000154 	.word	0x20000154
    1800:	000061d9 	.word	0x000061d9
    1804:	40d00000 	.word	0x40d00000
    1808:	00005bb9 	.word	0x00005bb9
    180c:	20000178 	.word	0x20000178
    1810:	40f00000 	.word	0x40f00000
    1814:	20000150 	.word	0x20000150
    1818:	41900000 	.word	0x41900000
    181c:	2000015a 	.word	0x2000015a
    1820:	00007631 	.word	0x00007631
    1824:	3ff00000 	.word	0x3ff00000
    1828:	2000017a 	.word	0x2000017a
    182c:	41200000 	.word	0x41200000
    1830:	00005b51 	.word	0x00005b51
    1834:	40590000 	.word	0x40590000
    1838:	00005b29 	.word	0x00005b29

0000183c <bme280_calc_dew>:

double bme280_calc_dew(int32_t temp, double hum)
{
    183c:	b5f0      	push	{r4, r5, r6, r7, lr}
    183e:	b08f      	sub	sp, #60	; 0x3c
    1840:	af00      	add	r7, sp, #0
    1842:	60f8      	str	r0, [r7, #12]
    1844:	603a      	str	r2, [r7, #0]
    1846:	607b      	str	r3, [r7, #4]
	double celsius = (double)temp/100;
    1848:	4b7b      	ldr	r3, [pc, #492]	; (1a38 <bme280_calc_dew+0x1fc>)
    184a:	68f8      	ldr	r0, [r7, #12]
    184c:	4798      	blx	r3
    184e:	4c7b      	ldr	r4, [pc, #492]	; (1a3c <bme280_calc_dew+0x200>)
    1850:	2200      	movs	r2, #0
    1852:	4b7b      	ldr	r3, [pc, #492]	; (1a40 <bme280_calc_dew+0x204>)
    1854:	47a0      	blx	r4
    1856:	0003      	movs	r3, r0
    1858:	000c      	movs	r4, r1
    185a:	633b      	str	r3, [r7, #48]	; 0x30
    185c:	637c      	str	r4, [r7, #52]	; 0x34
	double RATIO = 373.15 / (273.15 + celsius);
    185e:	4c79      	ldr	r4, [pc, #484]	; (1a44 <bme280_calc_dew+0x208>)
    1860:	4a79      	ldr	r2, [pc, #484]	; (1a48 <bme280_calc_dew+0x20c>)
    1862:	4b7a      	ldr	r3, [pc, #488]	; (1a4c <bme280_calc_dew+0x210>)
    1864:	6b38      	ldr	r0, [r7, #48]	; 0x30
    1866:	6b79      	ldr	r1, [r7, #52]	; 0x34
    1868:	47a0      	blx	r4
    186a:	0003      	movs	r3, r0
    186c:	000c      	movs	r4, r1
    186e:	001a      	movs	r2, r3
    1870:	0023      	movs	r3, r4
    1872:	4c72      	ldr	r4, [pc, #456]	; (1a3c <bme280_calc_dew+0x200>)
    1874:	4874      	ldr	r0, [pc, #464]	; (1a48 <bme280_calc_dew+0x20c>)
    1876:	4976      	ldr	r1, [pc, #472]	; (1a50 <bme280_calc_dew+0x214>)
    1878:	47a0      	blx	r4
    187a:	0003      	movs	r3, r0
    187c:	000c      	movs	r4, r1
    187e:	62bb      	str	r3, [r7, #40]	; 0x28
    1880:	62fc      	str	r4, [r7, #44]	; 0x2c
	double RHS = -7.90298 * (RATIO - 1);
    1882:	4c74      	ldr	r4, [pc, #464]	; (1a54 <bme280_calc_dew+0x218>)
    1884:	2200      	movs	r2, #0
    1886:	4b74      	ldr	r3, [pc, #464]	; (1a58 <bme280_calc_dew+0x21c>)
    1888:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    188a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    188c:	47a0      	blx	r4
    188e:	0003      	movs	r3, r0
    1890:	000c      	movs	r4, r1
    1892:	0018      	movs	r0, r3
    1894:	0021      	movs	r1, r4
    1896:	4c71      	ldr	r4, [pc, #452]	; (1a5c <bme280_calc_dew+0x220>)
    1898:	4a71      	ldr	r2, [pc, #452]	; (1a60 <bme280_calc_dew+0x224>)
    189a:	4b72      	ldr	r3, [pc, #456]	; (1a64 <bme280_calc_dew+0x228>)
    189c:	47a0      	blx	r4
    189e:	0003      	movs	r3, r0
    18a0:	000c      	movs	r4, r1
    18a2:	623b      	str	r3, [r7, #32]
    18a4:	627c      	str	r4, [r7, #36]	; 0x24
	RHS += 5.02808 * log10(RATIO);
    18a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    18a8:	6afc      	ldr	r4, [r7, #44]	; 0x2c
    18aa:	0018      	movs	r0, r3
    18ac:	0021      	movs	r1, r4
    18ae:	4b6e      	ldr	r3, [pc, #440]	; (1a68 <bme280_calc_dew+0x22c>)
    18b0:	4798      	blx	r3
    18b2:	4c6a      	ldr	r4, [pc, #424]	; (1a5c <bme280_calc_dew+0x220>)
    18b4:	4a6d      	ldr	r2, [pc, #436]	; (1a6c <bme280_calc_dew+0x230>)
    18b6:	4b6e      	ldr	r3, [pc, #440]	; (1a70 <bme280_calc_dew+0x234>)
    18b8:	47a0      	blx	r4
    18ba:	0003      	movs	r3, r0
    18bc:	000c      	movs	r4, r1
    18be:	001a      	movs	r2, r3
    18c0:	0023      	movs	r3, r4
    18c2:	4c60      	ldr	r4, [pc, #384]	; (1a44 <bme280_calc_dew+0x208>)
    18c4:	6a38      	ldr	r0, [r7, #32]
    18c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
    18c8:	47a0      	blx	r4
    18ca:	0003      	movs	r3, r0
    18cc:	000c      	movs	r4, r1
    18ce:	623b      	str	r3, [r7, #32]
    18d0:	627c      	str	r4, [r7, #36]	; 0x24
	RHS += -1.3816e-7 * (pow(10, (11.344 * (1 - 1/RATIO ))) - 1) ;
    18d2:	4c5a      	ldr	r4, [pc, #360]	; (1a3c <bme280_calc_dew+0x200>)
    18d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
    18d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    18d8:	2000      	movs	r0, #0
    18da:	495f      	ldr	r1, [pc, #380]	; (1a58 <bme280_calc_dew+0x21c>)
    18dc:	47a0      	blx	r4
    18de:	0003      	movs	r3, r0
    18e0:	000c      	movs	r4, r1
    18e2:	001a      	movs	r2, r3
    18e4:	0023      	movs	r3, r4
    18e6:	4c5b      	ldr	r4, [pc, #364]	; (1a54 <bme280_calc_dew+0x218>)
    18e8:	2000      	movs	r0, #0
    18ea:	495b      	ldr	r1, [pc, #364]	; (1a58 <bme280_calc_dew+0x21c>)
    18ec:	47a0      	blx	r4
    18ee:	0003      	movs	r3, r0
    18f0:	000c      	movs	r4, r1
    18f2:	0018      	movs	r0, r3
    18f4:	0021      	movs	r1, r4
    18f6:	4c59      	ldr	r4, [pc, #356]	; (1a5c <bme280_calc_dew+0x220>)
    18f8:	4a5e      	ldr	r2, [pc, #376]	; (1a74 <bme280_calc_dew+0x238>)
    18fa:	4b5f      	ldr	r3, [pc, #380]	; (1a78 <bme280_calc_dew+0x23c>)
    18fc:	47a0      	blx	r4
    18fe:	0003      	movs	r3, r0
    1900:	000c      	movs	r4, r1
    1902:	2000      	movs	r0, #0
    1904:	495d      	ldr	r1, [pc, #372]	; (1a7c <bme280_calc_dew+0x240>)
    1906:	001a      	movs	r2, r3
    1908:	0023      	movs	r3, r4
    190a:	4c5d      	ldr	r4, [pc, #372]	; (1a80 <bme280_calc_dew+0x244>)
    190c:	47a0      	blx	r4
    190e:	4c51      	ldr	r4, [pc, #324]	; (1a54 <bme280_calc_dew+0x218>)
    1910:	2200      	movs	r2, #0
    1912:	4b51      	ldr	r3, [pc, #324]	; (1a58 <bme280_calc_dew+0x21c>)
    1914:	47a0      	blx	r4
    1916:	0003      	movs	r3, r0
    1918:	000c      	movs	r4, r1
    191a:	0018      	movs	r0, r3
    191c:	0021      	movs	r1, r4
    191e:	4c4f      	ldr	r4, [pc, #316]	; (1a5c <bme280_calc_dew+0x220>)
    1920:	4a58      	ldr	r2, [pc, #352]	; (1a84 <bme280_calc_dew+0x248>)
    1922:	4b59      	ldr	r3, [pc, #356]	; (1a88 <bme280_calc_dew+0x24c>)
    1924:	47a0      	blx	r4
    1926:	0003      	movs	r3, r0
    1928:	000c      	movs	r4, r1
    192a:	001a      	movs	r2, r3
    192c:	0023      	movs	r3, r4
    192e:	4c45      	ldr	r4, [pc, #276]	; (1a44 <bme280_calc_dew+0x208>)
    1930:	6a38      	ldr	r0, [r7, #32]
    1932:	6a79      	ldr	r1, [r7, #36]	; 0x24
    1934:	47a0      	blx	r4
    1936:	0003      	movs	r3, r0
    1938:	000c      	movs	r4, r1
    193a:	623b      	str	r3, [r7, #32]
    193c:	627c      	str	r4, [r7, #36]	; 0x24
	RHS += 8.1328e-3 * (pow(10, (-3.49149 * (RATIO - 1))) - 1) ;
    193e:	4c45      	ldr	r4, [pc, #276]	; (1a54 <bme280_calc_dew+0x218>)
    1940:	2200      	movs	r2, #0
    1942:	4b45      	ldr	r3, [pc, #276]	; (1a58 <bme280_calc_dew+0x21c>)
    1944:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    1946:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    1948:	47a0      	blx	r4
    194a:	0003      	movs	r3, r0
    194c:	000c      	movs	r4, r1
    194e:	0018      	movs	r0, r3
    1950:	0021      	movs	r1, r4
    1952:	4c42      	ldr	r4, [pc, #264]	; (1a5c <bme280_calc_dew+0x220>)
    1954:	4a4d      	ldr	r2, [pc, #308]	; (1a8c <bme280_calc_dew+0x250>)
    1956:	4b4e      	ldr	r3, [pc, #312]	; (1a90 <bme280_calc_dew+0x254>)
    1958:	47a0      	blx	r4
    195a:	0003      	movs	r3, r0
    195c:	000c      	movs	r4, r1
    195e:	2000      	movs	r0, #0
    1960:	4946      	ldr	r1, [pc, #280]	; (1a7c <bme280_calc_dew+0x240>)
    1962:	001a      	movs	r2, r3
    1964:	0023      	movs	r3, r4
    1966:	4c46      	ldr	r4, [pc, #280]	; (1a80 <bme280_calc_dew+0x244>)
    1968:	47a0      	blx	r4
    196a:	4c3a      	ldr	r4, [pc, #232]	; (1a54 <bme280_calc_dew+0x218>)
    196c:	2200      	movs	r2, #0
    196e:	4b3a      	ldr	r3, [pc, #232]	; (1a58 <bme280_calc_dew+0x21c>)
    1970:	47a0      	blx	r4
    1972:	0003      	movs	r3, r0
    1974:	000c      	movs	r4, r1
    1976:	0018      	movs	r0, r3
    1978:	0021      	movs	r1, r4
    197a:	4c38      	ldr	r4, [pc, #224]	; (1a5c <bme280_calc_dew+0x220>)
    197c:	4a45      	ldr	r2, [pc, #276]	; (1a94 <bme280_calc_dew+0x258>)
    197e:	4b46      	ldr	r3, [pc, #280]	; (1a98 <bme280_calc_dew+0x25c>)
    1980:	47a0      	blx	r4
    1982:	0003      	movs	r3, r0
    1984:	000c      	movs	r4, r1
    1986:	001a      	movs	r2, r3
    1988:	0023      	movs	r3, r4
    198a:	4c2e      	ldr	r4, [pc, #184]	; (1a44 <bme280_calc_dew+0x208>)
    198c:	6a38      	ldr	r0, [r7, #32]
    198e:	6a79      	ldr	r1, [r7, #36]	; 0x24
    1990:	47a0      	blx	r4
    1992:	0003      	movs	r3, r0
    1994:	000c      	movs	r4, r1
    1996:	623b      	str	r3, [r7, #32]
    1998:	627c      	str	r4, [r7, #36]	; 0x24
	RHS += log10(1013.246);
    199a:	4c2a      	ldr	r4, [pc, #168]	; (1a44 <bme280_calc_dew+0x208>)
    199c:	4a3f      	ldr	r2, [pc, #252]	; (1a9c <bme280_calc_dew+0x260>)
    199e:	4b40      	ldr	r3, [pc, #256]	; (1aa0 <bme280_calc_dew+0x264>)
    19a0:	6a38      	ldr	r0, [r7, #32]
    19a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
    19a4:	47a0      	blx	r4
    19a6:	0003      	movs	r3, r0
    19a8:	000c      	movs	r4, r1
    19aa:	623b      	str	r3, [r7, #32]
    19ac:	627c      	str	r4, [r7, #36]	; 0x24
	// factor -3 is to adjust units - Vapor Pressure SVP * humidity
	double VP = pow(10, RHS - 3) * hum;
    19ae:	4c29      	ldr	r4, [pc, #164]	; (1a54 <bme280_calc_dew+0x218>)
    19b0:	2200      	movs	r2, #0
    19b2:	4b3c      	ldr	r3, [pc, #240]	; (1aa4 <bme280_calc_dew+0x268>)
    19b4:	6a38      	ldr	r0, [r7, #32]
    19b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
    19b8:	47a0      	blx	r4
    19ba:	0003      	movs	r3, r0
    19bc:	000c      	movs	r4, r1
    19be:	2000      	movs	r0, #0
    19c0:	492e      	ldr	r1, [pc, #184]	; (1a7c <bme280_calc_dew+0x240>)
    19c2:	001a      	movs	r2, r3
    19c4:	0023      	movs	r3, r4
    19c6:	4c2e      	ldr	r4, [pc, #184]	; (1a80 <bme280_calc_dew+0x244>)
    19c8:	47a0      	blx	r4
    19ca:	4c24      	ldr	r4, [pc, #144]	; (1a5c <bme280_calc_dew+0x220>)
    19cc:	683a      	ldr	r2, [r7, #0]
    19ce:	687b      	ldr	r3, [r7, #4]
    19d0:	47a0      	blx	r4
    19d2:	0003      	movs	r3, r0
    19d4:	000c      	movs	r4, r1
    19d6:	61bb      	str	r3, [r7, #24]
    19d8:	61fc      	str	r4, [r7, #28]
	// (2) DEWPOINT = F(Vapor Pressure)
	double T = log(VP/0.61078);   // temp var
    19da:	4c18      	ldr	r4, [pc, #96]	; (1a3c <bme280_calc_dew+0x200>)
    19dc:	4a32      	ldr	r2, [pc, #200]	; (1aa8 <bme280_calc_dew+0x26c>)
    19de:	4b33      	ldr	r3, [pc, #204]	; (1aac <bme280_calc_dew+0x270>)
    19e0:	69b8      	ldr	r0, [r7, #24]
    19e2:	69f9      	ldr	r1, [r7, #28]
    19e4:	47a0      	blx	r4
    19e6:	0003      	movs	r3, r0
    19e8:	000c      	movs	r4, r1
    19ea:	0018      	movs	r0, r3
    19ec:	0021      	movs	r1, r4
    19ee:	4b30      	ldr	r3, [pc, #192]	; (1ab0 <bme280_calc_dew+0x274>)
    19f0:	4798      	blx	r3
    19f2:	0003      	movs	r3, r0
    19f4:	000c      	movs	r4, r1
    19f6:	613b      	str	r3, [r7, #16]
    19f8:	617c      	str	r4, [r7, #20]
	return (241.88 * T) / (17.558 - T);
    19fa:	4c18      	ldr	r4, [pc, #96]	; (1a5c <bme280_calc_dew+0x220>)
    19fc:	4a2d      	ldr	r2, [pc, #180]	; (1ab4 <bme280_calc_dew+0x278>)
    19fe:	4b2e      	ldr	r3, [pc, #184]	; (1ab8 <bme280_calc_dew+0x27c>)
    1a00:	6938      	ldr	r0, [r7, #16]
    1a02:	6979      	ldr	r1, [r7, #20]
    1a04:	47a0      	blx	r4
    1a06:	0003      	movs	r3, r0
    1a08:	000c      	movs	r4, r1
    1a0a:	001d      	movs	r5, r3
    1a0c:	0026      	movs	r6, r4
    1a0e:	4c11      	ldr	r4, [pc, #68]	; (1a54 <bme280_calc_dew+0x218>)
    1a10:	693a      	ldr	r2, [r7, #16]
    1a12:	697b      	ldr	r3, [r7, #20]
    1a14:	4829      	ldr	r0, [pc, #164]	; (1abc <bme280_calc_dew+0x280>)
    1a16:	492a      	ldr	r1, [pc, #168]	; (1ac0 <bme280_calc_dew+0x284>)
    1a18:	47a0      	blx	r4
    1a1a:	0003      	movs	r3, r0
    1a1c:	000c      	movs	r4, r1
    1a1e:	001a      	movs	r2, r3
    1a20:	0023      	movs	r3, r4
    1a22:	4c06      	ldr	r4, [pc, #24]	; (1a3c <bme280_calc_dew+0x200>)
    1a24:	0028      	movs	r0, r5
    1a26:	0031      	movs	r1, r6
    1a28:	47a0      	blx	r4
    1a2a:	0003      	movs	r3, r0
    1a2c:	000c      	movs	r4, r1
}
    1a2e:	0018      	movs	r0, r3
    1a30:	0021      	movs	r1, r4
    1a32:	46bd      	mov	sp, r7
    1a34:	b00f      	add	sp, #60	; 0x3c
    1a36:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1a38:	000075ad 	.word	0x000075ad
    1a3c:	000061d9 	.word	0x000061d9
    1a40:	40590000 	.word	0x40590000
    1a44:	00005bb9 	.word	0x00005bb9
    1a48:	66666666 	.word	0x66666666
    1a4c:	40711266 	.word	0x40711266
    1a50:	40775266 	.word	0x40775266
    1a54:	00006f41 	.word	0x00006f41
    1a58:	3ff00000 	.word	0x3ff00000
    1a5c:	00006a41 	.word	0x00006a41
    1a60:	ca03c4b1 	.word	0xca03c4b1
    1a64:	c01f9ca6 	.word	0xc01f9ca6
    1a68:	00003ffd 	.word	0x00003ffd
    1a6c:	00e6afcd 	.word	0x00e6afcd
    1a70:	40141cc1 	.word	0x40141cc1
    1a74:	c49ba5e3 	.word	0xc49ba5e3
    1a78:	4026b020 	.word	0x4026b020
    1a7c:	40240000 	.word	0x40240000
    1a80:	00004115 	.word	0x00004115
    1a84:	36423db1 	.word	0x36423db1
    1a88:	be828b24 	.word	0xbe828b24
    1a8c:	4f227d03 	.word	0x4f227d03
    1a90:	c00bee92 	.word	0xc00bee92
    1a94:	f0330363 	.word	0xf0330363
    1a98:	3f80a7ed 	.word	0x3f80a7ed
    1a9c:	409e541b 	.word	0x409e541b
    1aa0:	40080bb4 	.word	0x40080bb4
    1aa4:	40080000 	.word	0x40080000
    1aa8:	7fa1a0cf 	.word	0x7fa1a0cf
    1aac:	3fe38b82 	.word	0x3fe38b82
    1ab0:	00003eed 	.word	0x00003eed
    1ab4:	f5c28f5c 	.word	0xf5c28f5c
    1ab8:	406e3c28 	.word	0x406e3c28
    1abc:	16872b02 	.word	0x16872b02
    1ac0:	40318ed9 	.word	0x40318ed9

00001ac4 <bme280_get_all_calced>:

void bme280_get_all_calced(struct bme280_data *bme280_data_object)
{
    1ac4:	b590      	push	{r4, r7, lr}
    1ac6:	b087      	sub	sp, #28
    1ac8:	af00      	add	r7, sp, #0
    1aca:	6078      	str	r0, [r7, #4]
	uint8_t temps[3];
	uint8_t pres[3];
	uint8_t hum[2];
	
	bme280_force_update();
    1acc:	4b36      	ldr	r3, [pc, #216]	; (1ba8 <bme280_get_all_calced+0xe4>)
    1ace:	4798      	blx	r3
		
	bme280_read_temp(&temps);
    1ad0:	2314      	movs	r3, #20
    1ad2:	18fb      	adds	r3, r7, r3
    1ad4:	0018      	movs	r0, r3
    1ad6:	4b35      	ldr	r3, [pc, #212]	; (1bac <bme280_get_all_calced+0xe8>)
    1ad8:	4798      	blx	r3
	bme280_read_pres(&pres);
    1ada:	2310      	movs	r3, #16
    1adc:	18fb      	adds	r3, r7, r3
    1ade:	0018      	movs	r0, r3
    1ae0:	4b33      	ldr	r3, [pc, #204]	; (1bb0 <bme280_get_all_calced+0xec>)
    1ae2:	4798      	blx	r3
	bme280_read_hum(&hum);
    1ae4:	230c      	movs	r3, #12
    1ae6:	18fb      	adds	r3, r7, r3
    1ae8:	0018      	movs	r0, r3
    1aea:	4b32      	ldr	r3, [pc, #200]	; (1bb4 <bme280_get_all_calced+0xf0>)
    1aec:	4798      	blx	r3
	
	bme280_data_object->temperature = bme280_calc_temp((int32_t)(temps[0]<<12)+(temps[1] << 4)+(temps[2] >> 4));
    1aee:	2314      	movs	r3, #20
    1af0:	18fb      	adds	r3, r7, r3
    1af2:	781b      	ldrb	r3, [r3, #0]
    1af4:	031a      	lsls	r2, r3, #12
    1af6:	2314      	movs	r3, #20
    1af8:	18fb      	adds	r3, r7, r3
    1afa:	785b      	ldrb	r3, [r3, #1]
    1afc:	011b      	lsls	r3, r3, #4
    1afe:	18d3      	adds	r3, r2, r3
    1b00:	2214      	movs	r2, #20
    1b02:	18ba      	adds	r2, r7, r2
    1b04:	7892      	ldrb	r2, [r2, #2]
    1b06:	0912      	lsrs	r2, r2, #4
    1b08:	b2d2      	uxtb	r2, r2
    1b0a:	189b      	adds	r3, r3, r2
    1b0c:	0018      	movs	r0, r3
    1b0e:	4b2a      	ldr	r3, [pc, #168]	; (1bb8 <bme280_get_all_calced+0xf4>)
    1b10:	4798      	blx	r3
    1b12:	0002      	movs	r2, r0
    1b14:	687b      	ldr	r3, [r7, #4]
    1b16:	601a      	str	r2, [r3, #0]
	bme280_data_object->pressure = bme280_calc_pres((int32_t)(pres[0]<<12)+(pres[1] << 4)+(pres[2] >> 4))/100;
    1b18:	2310      	movs	r3, #16
    1b1a:	18fb      	adds	r3, r7, r3
    1b1c:	781b      	ldrb	r3, [r3, #0]
    1b1e:	031a      	lsls	r2, r3, #12
    1b20:	2310      	movs	r3, #16
    1b22:	18fb      	adds	r3, r7, r3
    1b24:	785b      	ldrb	r3, [r3, #1]
    1b26:	011b      	lsls	r3, r3, #4
    1b28:	18d3      	adds	r3, r2, r3
    1b2a:	2210      	movs	r2, #16
    1b2c:	18ba      	adds	r2, r7, r2
    1b2e:	7892      	ldrb	r2, [r2, #2]
    1b30:	0912      	lsrs	r2, r2, #4
    1b32:	b2d2      	uxtb	r2, r2
    1b34:	189b      	adds	r3, r3, r2
    1b36:	0018      	movs	r0, r3
    1b38:	4b20      	ldr	r3, [pc, #128]	; (1bbc <bme280_get_all_calced+0xf8>)
    1b3a:	4798      	blx	r3
    1b3c:	0002      	movs	r2, r0
    1b3e:	4b20      	ldr	r3, [pc, #128]	; (1bc0 <bme280_get_all_calced+0xfc>)
    1b40:	2164      	movs	r1, #100	; 0x64
    1b42:	0010      	movs	r0, r2
    1b44:	4798      	blx	r3
    1b46:	0003      	movs	r3, r0
    1b48:	001a      	movs	r2, r3
    1b4a:	687b      	ldr	r3, [r7, #4]
    1b4c:	605a      	str	r2, [r3, #4]
	bme280_data_object->humidity = (float)bme280_calc_hum((hum[0]<<8)+hum[1]);
    1b4e:	230c      	movs	r3, #12
    1b50:	18fb      	adds	r3, r7, r3
    1b52:	781b      	ldrb	r3, [r3, #0]
    1b54:	021b      	lsls	r3, r3, #8
    1b56:	220c      	movs	r2, #12
    1b58:	18ba      	adds	r2, r7, r2
    1b5a:	7852      	ldrb	r2, [r2, #1]
    1b5c:	189b      	adds	r3, r3, r2
    1b5e:	0018      	movs	r0, r3
    1b60:	4b18      	ldr	r3, [pc, #96]	; (1bc4 <bme280_get_all_calced+0x100>)
    1b62:	4798      	blx	r3
    1b64:	000a      	movs	r2, r1
    1b66:	0001      	movs	r1, r0
    1b68:	4b17      	ldr	r3, [pc, #92]	; (1bc8 <bme280_get_all_calced+0x104>)
    1b6a:	0008      	movs	r0, r1
    1b6c:	0011      	movs	r1, r2
    1b6e:	4798      	blx	r3
    1b70:	1c02      	adds	r2, r0, #0
    1b72:	687b      	ldr	r3, [r7, #4]
    1b74:	609a      	str	r2, [r3, #8]
	bme280_data_object->dew_point = (float)bme280_calc_dew(bme280_data_object->temperature, bme280_data_object->humidity);
    1b76:	687b      	ldr	r3, [r7, #4]
    1b78:	681c      	ldr	r4, [r3, #0]
    1b7a:	687b      	ldr	r3, [r7, #4]
    1b7c:	689a      	ldr	r2, [r3, #8]
    1b7e:	4b13      	ldr	r3, [pc, #76]	; (1bcc <bme280_get_all_calced+0x108>)
    1b80:	1c10      	adds	r0, r2, #0
    1b82:	4798      	blx	r3
    1b84:	0002      	movs	r2, r0
    1b86:	000b      	movs	r3, r1
    1b88:	0020      	movs	r0, r4
    1b8a:	4911      	ldr	r1, [pc, #68]	; (1bd0 <bme280_get_all_calced+0x10c>)
    1b8c:	4788      	blx	r1
    1b8e:	000a      	movs	r2, r1
    1b90:	0001      	movs	r1, r0
    1b92:	4b0d      	ldr	r3, [pc, #52]	; (1bc8 <bme280_get_all_calced+0x104>)
    1b94:	0008      	movs	r0, r1
    1b96:	0011      	movs	r1, r2
    1b98:	4798      	blx	r3
    1b9a:	1c02      	adds	r2, r0, #0
    1b9c:	687b      	ldr	r3, [r7, #4]
    1b9e:	60da      	str	r2, [r3, #12]
}
    1ba0:	46c0      	nop			; (mov r8, r8)
    1ba2:	46bd      	mov	sp, r7
    1ba4:	b007      	add	sp, #28
    1ba6:	bd90      	pop	{r4, r7, pc}
    1ba8:	00001bd5 	.word	0x00001bd5
    1bac:	00001089 	.word	0x00001089
    1bb0:	000010e9 	.word	0x000010e9
    1bb4:	00001149 	.word	0x00001149
    1bb8:	0000142d 	.word	0x0000142d
    1bbc:	000014a5 	.word	0x000014a5
    1bc0:	00005925 	.word	0x00005925
    1bc4:	00001601 	.word	0x00001601
    1bc8:	00007745 	.word	0x00007745
    1bcc:	000076a1 	.word	0x000076a1
    1bd0:	0000183d 	.word	0x0000183d

00001bd4 <bme280_force_update>:

void bme280_force_update(void)
{
    1bd4:	b580      	push	{r7, lr}
    1bd6:	b082      	sub	sp, #8
    1bd8:	af00      	add	r7, sp, #0
	uint8_t data[2];
	data[0] = 0xF4;
    1bda:	1d3b      	adds	r3, r7, #4
    1bdc:	22f4      	movs	r2, #244	; 0xf4
    1bde:	701a      	strb	r2, [r3, #0]
	data[1] = 0x26;
    1be0:	1d3b      	adds	r3, r7, #4
    1be2:	2226      	movs	r2, #38	; 0x26
    1be4:	705a      	strb	r2, [r3, #1]
	bme280_spi_write(&data,2);
    1be6:	1d3b      	adds	r3, r7, #4
    1be8:	2102      	movs	r1, #2
    1bea:	0018      	movs	r0, r3
    1bec:	4b04      	ldr	r3, [pc, #16]	; (1c00 <bme280_force_update+0x2c>)
    1bee:	4798      	blx	r3
	delay_ms(15);
    1bf0:	200f      	movs	r0, #15
    1bf2:	4b04      	ldr	r3, [pc, #16]	; (1c04 <bme280_force_update+0x30>)
    1bf4:	4798      	blx	r3
}
    1bf6:	46c0      	nop			; (mov r8, r8)
    1bf8:	46bd      	mov	sp, r7
    1bfa:	b002      	add	sp, #8
    1bfc:	bd80      	pop	{r7, pc}
    1bfe:	46c0      	nop			; (mov r8, r8)
    1c00:	00000fa9 	.word	0x00000fa9
    1c04:	00000c4d 	.word	0x00000c4d

00001c08 <bme280_init>:

void bme280_init(void)
{
    1c08:	b580      	push	{r7, lr}
    1c0a:	b082      	sub	sp, #8
    1c0c:	af00      	add	r7, sp, #0
	bme280_get_cal_data();
    1c0e:	4b1c      	ldr	r3, [pc, #112]	; (1c80 <bme280_init+0x78>)
    1c10:	4798      	blx	r3
	bme280_calc_cal();
    1c12:	4b1c      	ldr	r3, [pc, #112]	; (1c84 <bme280_init+0x7c>)
    1c14:	4798      	blx	r3
	bme280_spi_read(&device_id,1,0xD0);
    1c16:	4b1c      	ldr	r3, [pc, #112]	; (1c88 <bme280_init+0x80>)
    1c18:	22d0      	movs	r2, #208	; 0xd0
    1c1a:	2101      	movs	r1, #1
    1c1c:	0018      	movs	r0, r3
    1c1e:	4b1b      	ldr	r3, [pc, #108]	; (1c8c <bme280_init+0x84>)
    1c20:	4798      	blx	r3
	uint8_t data[2];
	
	uint8_t temp =  0;
    1c22:	1cfb      	adds	r3, r7, #3
    1c24:	2200      	movs	r2, #0
    1c26:	701a      	strb	r2, [r3, #0]
	bme280_spi_read(&temp,1,0xF2);
    1c28:	1cfb      	adds	r3, r7, #3
    1c2a:	22f2      	movs	r2, #242	; 0xf2
    1c2c:	2101      	movs	r1, #1
    1c2e:	0018      	movs	r0, r3
    1c30:	4b16      	ldr	r3, [pc, #88]	; (1c8c <bme280_init+0x84>)
    1c32:	4798      	blx	r3
	
	data[0] = 0xF2;
    1c34:	1d3b      	adds	r3, r7, #4
    1c36:	22f2      	movs	r2, #242	; 0xf2
    1c38:	701a      	strb	r2, [r3, #0]
	data[1] = 0x01;
    1c3a:	1d3b      	adds	r3, r7, #4
    1c3c:	2201      	movs	r2, #1
    1c3e:	705a      	strb	r2, [r3, #1]
	bme280_spi_write(&data,2);
    1c40:	1d3b      	adds	r3, r7, #4
    1c42:	2102      	movs	r1, #2
    1c44:	0018      	movs	r0, r3
    1c46:	4b12      	ldr	r3, [pc, #72]	; (1c90 <bme280_init+0x88>)
    1c48:	4798      	blx	r3
	data[0] = 0xF4;
    1c4a:	1d3b      	adds	r3, r7, #4
    1c4c:	22f4      	movs	r2, #244	; 0xf4
    1c4e:	701a      	strb	r2, [r3, #0]
	data[1] = 0x26;
    1c50:	1d3b      	adds	r3, r7, #4
    1c52:	2226      	movs	r2, #38	; 0x26
    1c54:	705a      	strb	r2, [r3, #1]
	bme280_spi_write(&data,2);
    1c56:	1d3b      	adds	r3, r7, #4
    1c58:	2102      	movs	r1, #2
    1c5a:	0018      	movs	r0, r3
    1c5c:	4b0c      	ldr	r3, [pc, #48]	; (1c90 <bme280_init+0x88>)
    1c5e:	4798      	blx	r3
	
	data[0] = 0xF5;
    1c60:	1d3b      	adds	r3, r7, #4
    1c62:	22f5      	movs	r2, #245	; 0xf5
    1c64:	701a      	strb	r2, [r3, #0]
	data[1] = 0xC0;
    1c66:	1d3b      	adds	r3, r7, #4
    1c68:	22c0      	movs	r2, #192	; 0xc0
    1c6a:	705a      	strb	r2, [r3, #1]
	bme280_spi_write(&data,2);
    1c6c:	1d3b      	adds	r3, r7, #4
    1c6e:	2102      	movs	r1, #2
    1c70:	0018      	movs	r0, r3
    1c72:	4b07      	ldr	r3, [pc, #28]	; (1c90 <bme280_init+0x88>)
    1c74:	4798      	blx	r3
}
    1c76:	46c0      	nop			; (mov r8, r8)
    1c78:	46bd      	mov	sp, r7
    1c7a:	b002      	add	sp, #8
    1c7c:	bd80      	pop	{r7, pc}
    1c7e:	46c0      	nop			; (mov r8, r8)
    1c80:	000011a9 	.word	0x000011a9
    1c84:	00001229 	.word	0x00001229
    1c88:	2000014c 	.word	0x2000014c
    1c8c:	00001005 	.word	0x00001005
    1c90:	00000fa9 	.word	0x00000fa9

00001c94 <bme280_data_compress>:
		}hestestruct;
		uint8_t bytes[16];
	}testheste;

void bme280_data_compress(struct bme280_data *bme280_data_object, uint8_t *data_array)
{
    1c94:	b580      	push	{r7, lr}
    1c96:	b088      	sub	sp, #32
    1c98:	af00      	add	r7, sp, #0
    1c9a:	6078      	str	r0, [r7, #4]
    1c9c:	6039      	str	r1, [r7, #0]
	testheste testhest;
	testhest.hestestruct.temperature = bme280_data_object->temperature;
    1c9e:	687b      	ldr	r3, [r7, #4]
    1ca0:	681a      	ldr	r2, [r3, #0]
    1ca2:	230c      	movs	r3, #12
    1ca4:	18fb      	adds	r3, r7, r3
    1ca6:	601a      	str	r2, [r3, #0]
	testhest.hestestruct.pressure = bme280_data_object->pressure;
    1ca8:	687b      	ldr	r3, [r7, #4]
    1caa:	685a      	ldr	r2, [r3, #4]
    1cac:	230c      	movs	r3, #12
    1cae:	18fb      	adds	r3, r7, r3
    1cb0:	605a      	str	r2, [r3, #4]
	testhest.hestestruct.dew_point = bme280_data_object->dew_point;
    1cb2:	687b      	ldr	r3, [r7, #4]
    1cb4:	68da      	ldr	r2, [r3, #12]
    1cb6:	230c      	movs	r3, #12
    1cb8:	18fb      	adds	r3, r7, r3
    1cba:	60da      	str	r2, [r3, #12]
	testhest.hestestruct.humidity = bme280_data_object->humidity;
    1cbc:	687b      	ldr	r3, [r7, #4]
    1cbe:	689a      	ldr	r2, [r3, #8]
    1cc0:	230c      	movs	r3, #12
    1cc2:	18fb      	adds	r3, r7, r3
    1cc4:	609a      	str	r2, [r3, #8]
	
	for (int i=0;i<16;i++)
    1cc6:	2300      	movs	r3, #0
    1cc8:	61fb      	str	r3, [r7, #28]
    1cca:	e00b      	b.n	1ce4 <bme280_data_compress+0x50>
	{
		data_array[i] = testhest.bytes[i];
    1ccc:	69fb      	ldr	r3, [r7, #28]
    1cce:	683a      	ldr	r2, [r7, #0]
    1cd0:	18d3      	adds	r3, r2, r3
    1cd2:	220c      	movs	r2, #12
    1cd4:	18b9      	adds	r1, r7, r2
    1cd6:	69fa      	ldr	r2, [r7, #28]
    1cd8:	188a      	adds	r2, r1, r2
    1cda:	7812      	ldrb	r2, [r2, #0]
    1cdc:	701a      	strb	r2, [r3, #0]
	for (int i=0;i<16;i++)
    1cde:	69fb      	ldr	r3, [r7, #28]
    1ce0:	3301      	adds	r3, #1
    1ce2:	61fb      	str	r3, [r7, #28]
    1ce4:	69fb      	ldr	r3, [r7, #28]
    1ce6:	2b0f      	cmp	r3, #15
    1ce8:	ddf0      	ble.n	1ccc <bme280_data_compress+0x38>
	
	data_array[12] = tobytearray.bytes[0];
	data_array[13] = tobytearray.bytes[1];
	data_array[14] = tobytearray.bytes[2];
	data_array[15] = tobytearray.bytes[3];*/
    1cea:	46c0      	nop			; (mov r8, r8)
    1cec:	46bd      	mov	sp, r7
    1cee:	b008      	add	sp, #32
    1cf0:	bd80      	pop	{r7, pc}
	...

00001cf4 <system_pinmux_get_group_from_gpio_pin>:
{
    1cf4:	b580      	push	{r7, lr}
    1cf6:	b084      	sub	sp, #16
    1cf8:	af00      	add	r7, sp, #0
    1cfa:	0002      	movs	r2, r0
    1cfc:	1dfb      	adds	r3, r7, #7
    1cfe:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    1d00:	230f      	movs	r3, #15
    1d02:	18fb      	adds	r3, r7, r3
    1d04:	1dfa      	adds	r2, r7, #7
    1d06:	7812      	ldrb	r2, [r2, #0]
    1d08:	09d2      	lsrs	r2, r2, #7
    1d0a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    1d0c:	230e      	movs	r3, #14
    1d0e:	18fb      	adds	r3, r7, r3
    1d10:	1dfa      	adds	r2, r7, #7
    1d12:	7812      	ldrb	r2, [r2, #0]
    1d14:	0952      	lsrs	r2, r2, #5
    1d16:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    1d18:	4b0d      	ldr	r3, [pc, #52]	; (1d50 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    1d1a:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    1d1c:	230f      	movs	r3, #15
    1d1e:	18fb      	adds	r3, r7, r3
    1d20:	781b      	ldrb	r3, [r3, #0]
    1d22:	2b00      	cmp	r3, #0
    1d24:	d10f      	bne.n	1d46 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    1d26:	230f      	movs	r3, #15
    1d28:	18fb      	adds	r3, r7, r3
    1d2a:	781b      	ldrb	r3, [r3, #0]
    1d2c:	009b      	lsls	r3, r3, #2
    1d2e:	2210      	movs	r2, #16
    1d30:	4694      	mov	ip, r2
    1d32:	44bc      	add	ip, r7
    1d34:	4463      	add	r3, ip
    1d36:	3b08      	subs	r3, #8
    1d38:	681a      	ldr	r2, [r3, #0]
    1d3a:	230e      	movs	r3, #14
    1d3c:	18fb      	adds	r3, r7, r3
    1d3e:	781b      	ldrb	r3, [r3, #0]
    1d40:	01db      	lsls	r3, r3, #7
    1d42:	18d3      	adds	r3, r2, r3
    1d44:	e000      	b.n	1d48 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    1d46:	2300      	movs	r3, #0
}
    1d48:	0018      	movs	r0, r3
    1d4a:	46bd      	mov	sp, r7
    1d4c:	b004      	add	sp, #16
    1d4e:	bd80      	pop	{r7, pc}
    1d50:	41004400 	.word	0x41004400

00001d54 <port_get_group_from_gpio_pin>:
{
    1d54:	b580      	push	{r7, lr}
    1d56:	b082      	sub	sp, #8
    1d58:	af00      	add	r7, sp, #0
    1d5a:	0002      	movs	r2, r0
    1d5c:	1dfb      	adds	r3, r7, #7
    1d5e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    1d60:	1dfb      	adds	r3, r7, #7
    1d62:	781b      	ldrb	r3, [r3, #0]
    1d64:	0018      	movs	r0, r3
    1d66:	4b03      	ldr	r3, [pc, #12]	; (1d74 <port_get_group_from_gpio_pin+0x20>)
    1d68:	4798      	blx	r3
    1d6a:	0003      	movs	r3, r0
}
    1d6c:	0018      	movs	r0, r3
    1d6e:	46bd      	mov	sp, r7
    1d70:	b002      	add	sp, #8
    1d72:	bd80      	pop	{r7, pc}
    1d74:	00001cf5 	.word	0x00001cf5

00001d78 <port_get_config_defaults>:
{
    1d78:	b580      	push	{r7, lr}
    1d7a:	b082      	sub	sp, #8
    1d7c:	af00      	add	r7, sp, #0
    1d7e:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
    1d80:	687b      	ldr	r3, [r7, #4]
    1d82:	2200      	movs	r2, #0
    1d84:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    1d86:	687b      	ldr	r3, [r7, #4]
    1d88:	2201      	movs	r2, #1
    1d8a:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    1d8c:	687b      	ldr	r3, [r7, #4]
    1d8e:	2200      	movs	r2, #0
    1d90:	709a      	strb	r2, [r3, #2]
}
    1d92:	46c0      	nop			; (mov r8, r8)
    1d94:	46bd      	mov	sp, r7
    1d96:	b002      	add	sp, #8
    1d98:	bd80      	pop	{r7, pc}
	...

00001d9c <port_pin_set_output_level>:
{
    1d9c:	b580      	push	{r7, lr}
    1d9e:	b084      	sub	sp, #16
    1da0:	af00      	add	r7, sp, #0
    1da2:	0002      	movs	r2, r0
    1da4:	1dfb      	adds	r3, r7, #7
    1da6:	701a      	strb	r2, [r3, #0]
    1da8:	1dbb      	adds	r3, r7, #6
    1daa:	1c0a      	adds	r2, r1, #0
    1dac:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    1dae:	1dfb      	adds	r3, r7, #7
    1db0:	781b      	ldrb	r3, [r3, #0]
    1db2:	0018      	movs	r0, r3
    1db4:	4b0d      	ldr	r3, [pc, #52]	; (1dec <port_pin_set_output_level+0x50>)
    1db6:	4798      	blx	r3
    1db8:	0003      	movs	r3, r0
    1dba:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1dbc:	1dfb      	adds	r3, r7, #7
    1dbe:	781b      	ldrb	r3, [r3, #0]
    1dc0:	221f      	movs	r2, #31
    1dc2:	4013      	ands	r3, r2
    1dc4:	2201      	movs	r2, #1
    1dc6:	409a      	lsls	r2, r3
    1dc8:	0013      	movs	r3, r2
    1dca:	60bb      	str	r3, [r7, #8]
	if (level) {
    1dcc:	1dbb      	adds	r3, r7, #6
    1dce:	781b      	ldrb	r3, [r3, #0]
    1dd0:	2b00      	cmp	r3, #0
    1dd2:	d003      	beq.n	1ddc <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    1dd4:	68fb      	ldr	r3, [r7, #12]
    1dd6:	68ba      	ldr	r2, [r7, #8]
    1dd8:	619a      	str	r2, [r3, #24]
}
    1dda:	e002      	b.n	1de2 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    1ddc:	68fb      	ldr	r3, [r7, #12]
    1dde:	68ba      	ldr	r2, [r7, #8]
    1de0:	615a      	str	r2, [r3, #20]
}
    1de2:	46c0      	nop			; (mov r8, r8)
    1de4:	46bd      	mov	sp, r7
    1de6:	b004      	add	sp, #16
    1de8:	bd80      	pop	{r7, pc}
    1dea:	46c0      	nop			; (mov r8, r8)
    1dec:	00001d55 	.word	0x00001d55

00001df0 <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
    1df0:	b580      	push	{r7, lr}
    1df2:	b084      	sub	sp, #16
    1df4:	af00      	add	r7, sp, #0
    1df6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1df8:	687b      	ldr	r3, [r7, #4]
    1dfa:	681b      	ldr	r3, [r3, #0]
    1dfc:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    1dfe:	68fb      	ldr	r3, [r7, #12]
    1e00:	69db      	ldr	r3, [r3, #28]
    1e02:	1e5a      	subs	r2, r3, #1
    1e04:	4193      	sbcs	r3, r2
    1e06:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
    1e08:	0018      	movs	r0, r3
    1e0a:	46bd      	mov	sp, r7
    1e0c:	b004      	add	sp, #16
    1e0e:	bd80      	pop	{r7, pc}

00001e10 <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
    1e10:	b580      	push	{r7, lr}
    1e12:	b082      	sub	sp, #8
    1e14:	af00      	add	r7, sp, #0
    1e16:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    1e18:	687b      	ldr	r3, [r7, #4]
    1e1a:	2201      	movs	r2, #1
    1e1c:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    1e1e:	687b      	ldr	r3, [r7, #4]
    1e20:	2200      	movs	r2, #0
    1e22:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    1e24:	687b      	ldr	r3, [r7, #4]
    1e26:	2200      	movs	r2, #0
    1e28:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    1e2a:	687b      	ldr	r3, [r7, #4]
    1e2c:	22c0      	movs	r2, #192	; 0xc0
    1e2e:	0392      	lsls	r2, r2, #14
    1e30:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    1e32:	687b      	ldr	r3, [r7, #4]
    1e34:	2200      	movs	r2, #0
    1e36:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
    1e38:	687b      	ldr	r3, [r7, #4]
    1e3a:	2200      	movs	r2, #0
    1e3c:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
    1e3e:	687b      	ldr	r3, [r7, #4]
    1e40:	2201      	movs	r2, #1
    1e42:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    1e44:	687b      	ldr	r3, [r7, #4]
    1e46:	2201      	movs	r2, #1
    1e48:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    1e4a:	687b      	ldr	r3, [r7, #4]
    1e4c:	2200      	movs	r2, #0
    1e4e:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    1e50:	687b      	ldr	r3, [r7, #4]
    1e52:	2224      	movs	r2, #36	; 0x24
    1e54:	2100      	movs	r1, #0
    1e56:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    1e58:	687b      	ldr	r3, [r7, #4]
    1e5a:	3318      	adds	r3, #24
    1e5c:	220c      	movs	r2, #12
    1e5e:	2100      	movs	r1, #0
    1e60:	0018      	movs	r0, r3
    1e62:	4b0a      	ldr	r3, [pc, #40]	; (1e8c <spi_get_config_defaults+0x7c>)
    1e64:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
    1e66:	687b      	ldr	r3, [r7, #4]
    1e68:	4a09      	ldr	r2, [pc, #36]	; (1e90 <spi_get_config_defaults+0x80>)
    1e6a:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
    1e6c:	687b      	ldr	r3, [r7, #4]
    1e6e:	2200      	movs	r2, #0
    1e70:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
    1e72:	687b      	ldr	r3, [r7, #4]
    1e74:	2200      	movs	r2, #0
    1e76:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
    1e78:	687b      	ldr	r3, [r7, #4]
    1e7a:	2200      	movs	r2, #0
    1e7c:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
    1e7e:	687b      	ldr	r3, [r7, #4]
    1e80:	2200      	movs	r2, #0
    1e82:	635a      	str	r2, [r3, #52]	; 0x34

};
    1e84:	46c0      	nop			; (mov r8, r8)
    1e86:	46bd      	mov	sp, r7
    1e88:	b002      	add	sp, #8
    1e8a:	bd80      	pop	{r7, pc}
    1e8c:	000078fb 	.word	0x000078fb
    1e90:	000186a0 	.word	0x000186a0

00001e94 <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
    1e94:	b580      	push	{r7, lr}
    1e96:	b082      	sub	sp, #8
    1e98:	af00      	add	r7, sp, #0
    1e9a:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
    1e9c:	687b      	ldr	r3, [r7, #4]
    1e9e:	220a      	movs	r2, #10
    1ea0:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
    1ea2:	687b      	ldr	r3, [r7, #4]
    1ea4:	2200      	movs	r2, #0
    1ea6:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
    1ea8:	687b      	ldr	r3, [r7, #4]
    1eaa:	2200      	movs	r2, #0
    1eac:	709a      	strb	r2, [r3, #2]
}
    1eae:	46c0      	nop			; (mov r8, r8)
    1eb0:	46bd      	mov	sp, r7
    1eb2:	b002      	add	sp, #8
    1eb4:	bd80      	pop	{r7, pc}
	...

00001eb8 <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		const struct spi_slave_inst_config *const config)
{
    1eb8:	b580      	push	{r7, lr}
    1eba:	b084      	sub	sp, #16
    1ebc:	af00      	add	r7, sp, #0
    1ebe:	6078      	str	r0, [r7, #4]
    1ec0:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    1ec2:	683b      	ldr	r3, [r7, #0]
    1ec4:	781a      	ldrb	r2, [r3, #0]
    1ec6:	687b      	ldr	r3, [r7, #4]
    1ec8:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
    1eca:	683b      	ldr	r3, [r7, #0]
    1ecc:	785a      	ldrb	r2, [r3, #1]
    1ece:	687b      	ldr	r3, [r7, #4]
    1ed0:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
    1ed2:	683b      	ldr	r3, [r7, #0]
    1ed4:	789a      	ldrb	r2, [r3, #2]
    1ed6:	687b      	ldr	r3, [r7, #4]
    1ed8:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    1eda:	230c      	movs	r3, #12
    1edc:	18fb      	adds	r3, r7, r3
    1ede:	0018      	movs	r0, r3
    1ee0:	4b0b      	ldr	r3, [pc, #44]	; (1f10 <spi_attach_slave+0x58>)
    1ee2:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    1ee4:	230c      	movs	r3, #12
    1ee6:	18fb      	adds	r3, r7, r3
    1ee8:	2201      	movs	r2, #1
    1eea:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    1eec:	687b      	ldr	r3, [r7, #4]
    1eee:	781b      	ldrb	r3, [r3, #0]
    1ef0:	220c      	movs	r2, #12
    1ef2:	18ba      	adds	r2, r7, r2
    1ef4:	0011      	movs	r1, r2
    1ef6:	0018      	movs	r0, r3
    1ef8:	4b06      	ldr	r3, [pc, #24]	; (1f14 <spi_attach_slave+0x5c>)
    1efa:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    1efc:	687b      	ldr	r3, [r7, #4]
    1efe:	781b      	ldrb	r3, [r3, #0]
    1f00:	2101      	movs	r1, #1
    1f02:	0018      	movs	r0, r3
    1f04:	4b04      	ldr	r3, [pc, #16]	; (1f18 <spi_attach_slave+0x60>)
    1f06:	4798      	blx	r3
}
    1f08:	46c0      	nop			; (mov r8, r8)
    1f0a:	46bd      	mov	sp, r7
    1f0c:	b004      	add	sp, #16
    1f0e:	bd80      	pop	{r7, pc}
    1f10:	00001d79 	.word	0x00001d79
    1f14:	00002ef1 	.word	0x00002ef1
    1f18:	00001d9d 	.word	0x00001d9d

00001f1c <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
    1f1c:	b580      	push	{r7, lr}
    1f1e:	b084      	sub	sp, #16
    1f20:	af00      	add	r7, sp, #0
    1f22:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1f24:	687b      	ldr	r3, [r7, #4]
    1f26:	681b      	ldr	r3, [r3, #0]
    1f28:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
    1f2a:	46c0      	nop			; (mov r8, r8)
    1f2c:	687b      	ldr	r3, [r7, #4]
    1f2e:	0018      	movs	r0, r3
    1f30:	4b06      	ldr	r3, [pc, #24]	; (1f4c <spi_enable+0x30>)
    1f32:	4798      	blx	r3
    1f34:	1e03      	subs	r3, r0, #0
    1f36:	d1f9      	bne.n	1f2c <spi_enable+0x10>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    1f38:	68fb      	ldr	r3, [r7, #12]
    1f3a:	681b      	ldr	r3, [r3, #0]
    1f3c:	2202      	movs	r2, #2
    1f3e:	431a      	orrs	r2, r3
    1f40:	68fb      	ldr	r3, [r7, #12]
    1f42:	601a      	str	r2, [r3, #0]
}
    1f44:	46c0      	nop			; (mov r8, r8)
    1f46:	46bd      	mov	sp, r7
    1f48:	b004      	add	sp, #16
    1f4a:	bd80      	pop	{r7, pc}
    1f4c:	00001df1 	.word	0x00001df1

00001f50 <spi_master_init>:
 */ 

#include "spi_master.h"

void spi_master_init(void)
{
    1f50:	b580      	push	{r7, lr}
    1f52:	b090      	sub	sp, #64	; 0x40
    1f54:	af00      	add	r7, sp, #0
	struct spi_config config_spi;
	struct spi_slave_inst_config bme280_slave_config;
	struct spi_slave_inst_config nrf24l01_slave_config;
	
	spi_slave_inst_get_config_defaults(&bme280_slave_config);
    1f56:	1d3b      	adds	r3, r7, #4
    1f58:	0018      	movs	r0, r3
    1f5a:	4b23      	ldr	r3, [pc, #140]	; (1fe8 <spi_master_init+0x98>)
    1f5c:	4798      	blx	r3
	bme280_slave_config.ss_pin = BME280_CE;
    1f5e:	1d3b      	adds	r3, r7, #4
    1f60:	2210      	movs	r2, #16
    1f62:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&bme280_slave_instance, &bme280_slave_config);
    1f64:	1d3a      	adds	r2, r7, #4
    1f66:	4b21      	ldr	r3, [pc, #132]	; (1fec <spi_master_init+0x9c>)
    1f68:	0011      	movs	r1, r2
    1f6a:	0018      	movs	r0, r3
    1f6c:	4b20      	ldr	r3, [pc, #128]	; (1ff0 <spi_master_init+0xa0>)
    1f6e:	4798      	blx	r3
	
	spi_slave_inst_get_config_defaults(&nrf24l01_slave_config);
    1f70:	003b      	movs	r3, r7
    1f72:	0018      	movs	r0, r3
    1f74:	4b1c      	ldr	r3, [pc, #112]	; (1fe8 <spi_master_init+0x98>)
    1f76:	4798      	blx	r3
	nrf24l01_slave_config.ss_pin = NRF24L01_SS;
    1f78:	003b      	movs	r3, r7
    1f7a:	220c      	movs	r2, #12
    1f7c:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&nrf24l01_slave_instance, &nrf24l01_slave_config);
    1f7e:	003a      	movs	r2, r7
    1f80:	4b1c      	ldr	r3, [pc, #112]	; (1ff4 <spi_master_init+0xa4>)
    1f82:	0011      	movs	r1, r2
    1f84:	0018      	movs	r0, r3
    1f86:	4b1a      	ldr	r3, [pc, #104]	; (1ff0 <spi_master_init+0xa0>)
    1f88:	4798      	blx	r3
	
	
	/* Configure, initialize and enable SERCOM SPI module */
	spi_get_config_defaults(&config_spi);
    1f8a:	2308      	movs	r3, #8
    1f8c:	18fb      	adds	r3, r7, r3
    1f8e:	0018      	movs	r0, r3
    1f90:	4b19      	ldr	r3, [pc, #100]	; (1ff8 <spi_master_init+0xa8>)
    1f92:	4798      	blx	r3
	config_spi.mux_setting = SPI_MUX_SETTING;
    1f94:	2308      	movs	r3, #8
    1f96:	18fb      	adds	r3, r7, r3
    1f98:	22c0      	movs	r2, #192	; 0xc0
    1f9a:	0392      	lsls	r2, r2, #14
    1f9c:	60da      	str	r2, [r3, #12]
	/* Configure pad 0 for data in */
	config_spi.pinmux_pad0 = SPI_MOSI;
    1f9e:	2308      	movs	r3, #8
    1fa0:	18fb      	adds	r3, r7, r3
    1fa2:	4a16      	ldr	r2, [pc, #88]	; (1ffc <spi_master_init+0xac>)
    1fa4:	629a      	str	r2, [r3, #40]	; 0x28
	/* Configure pad 1 as unused */
	config_spi.pinmux_pad1 = SPI_SCK;
    1fa6:	2308      	movs	r3, #8
    1fa8:	18fb      	adds	r3, r7, r3
    1faa:	4a15      	ldr	r2, [pc, #84]	; (2000 <STACK_SIZE>)
    1fac:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Configure pad 2 for data out */
	config_spi.pinmux_pad2 = PINMUX_UNUSED;
    1fae:	2308      	movs	r3, #8
    1fb0:	18fb      	adds	r3, r7, r3
    1fb2:	2201      	movs	r2, #1
    1fb4:	4252      	negs	r2, r2
    1fb6:	631a      	str	r2, [r3, #48]	; 0x30
	/* Configure pad 3 for SCK */
	config_spi.pinmux_pad3 = SPI_MISO;
    1fb8:	2308      	movs	r3, #8
    1fba:	18fb      	adds	r3, r7, r3
    1fbc:	4a11      	ldr	r2, [pc, #68]	; (2004 <STACK_SIZE+0x4>)
    1fbe:	635a      	str	r2, [r3, #52]	; 0x34
	config_spi.receiver_enable = true;
    1fc0:	2308      	movs	r3, #8
    1fc2:	18fb      	adds	r3, r7, r3
    1fc4:	2201      	movs	r2, #1
    1fc6:	749a      	strb	r2, [r3, #18]
	spi_init(&spi_master_instance, SPI_MODULE, &config_spi); 
    1fc8:	2308      	movs	r3, #8
    1fca:	18fa      	adds	r2, r7, r3
    1fcc:	490e      	ldr	r1, [pc, #56]	; (2008 <STACK_SIZE+0x8>)
    1fce:	4b0f      	ldr	r3, [pc, #60]	; (200c <STACK_SIZE+0xc>)
    1fd0:	0018      	movs	r0, r3
    1fd2:	4b0f      	ldr	r3, [pc, #60]	; (2010 <STACK_SIZE+0x10>)
    1fd4:	4798      	blx	r3
	spi_enable(&spi_master_instance);
    1fd6:	4b0d      	ldr	r3, [pc, #52]	; (200c <STACK_SIZE+0xc>)
    1fd8:	0018      	movs	r0, r3
    1fda:	4b0e      	ldr	r3, [pc, #56]	; (2014 <STACK_SIZE+0x14>)
    1fdc:	4798      	blx	r3
}
    1fde:	46c0      	nop			; (mov r8, r8)
    1fe0:	46bd      	mov	sp, r7
    1fe2:	b010      	add	sp, #64	; 0x40
    1fe4:	bd80      	pop	{r7, pc}
    1fe6:	46c0      	nop			; (mov r8, r8)
    1fe8:	00001e95 	.word	0x00001e95
    1fec:	20000164 	.word	0x20000164
    1ff0:	00001eb9 	.word	0x00001eb9
    1ff4:	2000015c 	.word	0x2000015c
    1ff8:	00001e11 	.word	0x00001e11
    1ffc:	00080002 	.word	0x00080002
    2000:	00090002 	.word	0x00090002
    2004:	000b0002 	.word	0x000b0002
    2008:	42000800 	.word	0x42000800
    200c:	20000168 	.word	0x20000168
    2010:	00002811 	.word	0x00002811
    2014:	00001f1d 	.word	0x00001f1d

00002018 <system_pinmux_get_config_defaults>:
{
    2018:	b580      	push	{r7, lr}
    201a:	b082      	sub	sp, #8
    201c:	af00      	add	r7, sp, #0
    201e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    2020:	687b      	ldr	r3, [r7, #4]
    2022:	2280      	movs	r2, #128	; 0x80
    2024:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2026:	687b      	ldr	r3, [r7, #4]
    2028:	2200      	movs	r2, #0
    202a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    202c:	687b      	ldr	r3, [r7, #4]
    202e:	2201      	movs	r2, #1
    2030:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    2032:	687b      	ldr	r3, [r7, #4]
    2034:	2200      	movs	r2, #0
    2036:	70da      	strb	r2, [r3, #3]
}
    2038:	46c0      	nop			; (mov r8, r8)
    203a:	46bd      	mov	sp, r7
    203c:	b002      	add	sp, #8
    203e:	bd80      	pop	{r7, pc}

00002040 <system_pinmux_get_group_from_gpio_pin>:
{
    2040:	b580      	push	{r7, lr}
    2042:	b084      	sub	sp, #16
    2044:	af00      	add	r7, sp, #0
    2046:	0002      	movs	r2, r0
    2048:	1dfb      	adds	r3, r7, #7
    204a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    204c:	230f      	movs	r3, #15
    204e:	18fb      	adds	r3, r7, r3
    2050:	1dfa      	adds	r2, r7, #7
    2052:	7812      	ldrb	r2, [r2, #0]
    2054:	09d2      	lsrs	r2, r2, #7
    2056:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    2058:	230e      	movs	r3, #14
    205a:	18fb      	adds	r3, r7, r3
    205c:	1dfa      	adds	r2, r7, #7
    205e:	7812      	ldrb	r2, [r2, #0]
    2060:	0952      	lsrs	r2, r2, #5
    2062:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    2064:	4b0d      	ldr	r3, [pc, #52]	; (209c <system_pinmux_get_group_from_gpio_pin+0x5c>)
    2066:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    2068:	230f      	movs	r3, #15
    206a:	18fb      	adds	r3, r7, r3
    206c:	781b      	ldrb	r3, [r3, #0]
    206e:	2b00      	cmp	r3, #0
    2070:	d10f      	bne.n	2092 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    2072:	230f      	movs	r3, #15
    2074:	18fb      	adds	r3, r7, r3
    2076:	781b      	ldrb	r3, [r3, #0]
    2078:	009b      	lsls	r3, r3, #2
    207a:	2210      	movs	r2, #16
    207c:	4694      	mov	ip, r2
    207e:	44bc      	add	ip, r7
    2080:	4463      	add	r3, ip
    2082:	3b08      	subs	r3, #8
    2084:	681a      	ldr	r2, [r3, #0]
    2086:	230e      	movs	r3, #14
    2088:	18fb      	adds	r3, r7, r3
    208a:	781b      	ldrb	r3, [r3, #0]
    208c:	01db      	lsls	r3, r3, #7
    208e:	18d3      	adds	r3, r2, r3
    2090:	e000      	b.n	2094 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    2092:	2300      	movs	r3, #0
}
    2094:	0018      	movs	r0, r3
    2096:	46bd      	mov	sp, r7
    2098:	b004      	add	sp, #16
    209a:	bd80      	pop	{r7, pc}
    209c:	41004400 	.word	0x41004400

000020a0 <system_pinmux_pin_get_mux_position>:
 *
 * \return Currently selected peripheral index on the specified pin.
 */
static inline uint8_t system_pinmux_pin_get_mux_position(
		const uint8_t gpio_pin)
{
    20a0:	b580      	push	{r7, lr}
    20a2:	b086      	sub	sp, #24
    20a4:	af00      	add	r7, sp, #0
    20a6:	0002      	movs	r2, r0
    20a8:	1dfb      	adds	r3, r7, #7
    20aa:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    20ac:	1dfb      	adds	r3, r7, #7
    20ae:	781b      	ldrb	r3, [r3, #0]
    20b0:	0018      	movs	r0, r3
    20b2:	4b19      	ldr	r3, [pc, #100]	; (2118 <system_pinmux_pin_get_mux_position+0x78>)
    20b4:	4798      	blx	r3
    20b6:	0003      	movs	r3, r0
    20b8:	617b      	str	r3, [r7, #20]
	uint32_t pin_index = (gpio_pin % 32);
    20ba:	1dfb      	adds	r3, r7, #7
    20bc:	781b      	ldrb	r3, [r3, #0]
    20be:	221f      	movs	r2, #31
    20c0:	4013      	ands	r3, r2
    20c2:	613b      	str	r3, [r7, #16]

	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    20c4:	697a      	ldr	r2, [r7, #20]
    20c6:	2140      	movs	r1, #64	; 0x40
    20c8:	693b      	ldr	r3, [r7, #16]
    20ca:	18d3      	adds	r3, r2, r3
    20cc:	185b      	adds	r3, r3, r1
    20ce:	781b      	ldrb	r3, [r3, #0]
    20d0:	b2db      	uxtb	r3, r3
    20d2:	001a      	movs	r2, r3
    20d4:	2301      	movs	r3, #1
    20d6:	4013      	ands	r3, r2
    20d8:	d101      	bne.n	20de <system_pinmux_pin_get_mux_position+0x3e>
		return SYSTEM_PINMUX_GPIO;
    20da:	2380      	movs	r3, #128	; 0x80
    20dc:	e018      	b.n	2110 <system_pinmux_pin_get_mux_position+0x70>
	}

	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
    20de:	693b      	ldr	r3, [r7, #16]
    20e0:	085b      	lsrs	r3, r3, #1
    20e2:	697a      	ldr	r2, [r7, #20]
    20e4:	2130      	movs	r1, #48	; 0x30
    20e6:	18d3      	adds	r3, r2, r3
    20e8:	185b      	adds	r3, r3, r1
    20ea:	781b      	ldrb	r3, [r3, #0]
    20ec:	b2db      	uxtb	r3, r3
    20ee:	60fb      	str	r3, [r7, #12]

	if (pin_index & 1) {
    20f0:	693b      	ldr	r3, [r7, #16]
    20f2:	2201      	movs	r2, #1
    20f4:	4013      	ands	r3, r2
    20f6:	d006      	beq.n	2106 <system_pinmux_pin_get_mux_position+0x66>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
    20f8:	68fb      	ldr	r3, [r7, #12]
    20fa:	091b      	lsrs	r3, r3, #4
    20fc:	b2db      	uxtb	r3, r3
    20fe:	220f      	movs	r2, #15
    2100:	4013      	ands	r3, r2
    2102:	b2db      	uxtb	r3, r3
    2104:	e004      	b.n	2110 <system_pinmux_pin_get_mux_position+0x70>
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
    2106:	68fb      	ldr	r3, [r7, #12]
    2108:	b2db      	uxtb	r3, r3
    210a:	220f      	movs	r2, #15
    210c:	4013      	ands	r3, r2
    210e:	b2db      	uxtb	r3, r3
	}
}
    2110:	0018      	movs	r0, r3
    2112:	46bd      	mov	sp, r7
    2114:	b006      	add	sp, #24
    2116:	bd80      	pop	{r7, pc}
    2118:	00002041 	.word	0x00002041

0000211c <port_get_group_from_gpio_pin>:
{
    211c:	b580      	push	{r7, lr}
    211e:	b082      	sub	sp, #8
    2120:	af00      	add	r7, sp, #0
    2122:	0002      	movs	r2, r0
    2124:	1dfb      	adds	r3, r7, #7
    2126:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    2128:	1dfb      	adds	r3, r7, #7
    212a:	781b      	ldrb	r3, [r3, #0]
    212c:	0018      	movs	r0, r3
    212e:	4b03      	ldr	r3, [pc, #12]	; (213c <port_get_group_from_gpio_pin+0x20>)
    2130:	4798      	blx	r3
    2132:	0003      	movs	r3, r0
}
    2134:	0018      	movs	r0, r3
    2136:	46bd      	mov	sp, r7
    2138:	b002      	add	sp, #8
    213a:	bd80      	pop	{r7, pc}
    213c:	00002041 	.word	0x00002041

00002140 <port_pin_set_output_level>:
{
    2140:	b580      	push	{r7, lr}
    2142:	b084      	sub	sp, #16
    2144:	af00      	add	r7, sp, #0
    2146:	0002      	movs	r2, r0
    2148:	1dfb      	adds	r3, r7, #7
    214a:	701a      	strb	r2, [r3, #0]
    214c:	1dbb      	adds	r3, r7, #6
    214e:	1c0a      	adds	r2, r1, #0
    2150:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    2152:	1dfb      	adds	r3, r7, #7
    2154:	781b      	ldrb	r3, [r3, #0]
    2156:	0018      	movs	r0, r3
    2158:	4b0d      	ldr	r3, [pc, #52]	; (2190 <port_pin_set_output_level+0x50>)
    215a:	4798      	blx	r3
    215c:	0003      	movs	r3, r0
    215e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    2160:	1dfb      	adds	r3, r7, #7
    2162:	781b      	ldrb	r3, [r3, #0]
    2164:	221f      	movs	r2, #31
    2166:	4013      	ands	r3, r2
    2168:	2201      	movs	r2, #1
    216a:	409a      	lsls	r2, r3
    216c:	0013      	movs	r3, r2
    216e:	60bb      	str	r3, [r7, #8]
	if (level) {
    2170:	1dbb      	adds	r3, r7, #6
    2172:	781b      	ldrb	r3, [r3, #0]
    2174:	2b00      	cmp	r3, #0
    2176:	d003      	beq.n	2180 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    2178:	68fb      	ldr	r3, [r7, #12]
    217a:	68ba      	ldr	r2, [r7, #8]
    217c:	619a      	str	r2, [r3, #24]
}
    217e:	e002      	b.n	2186 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    2180:	68fb      	ldr	r3, [r7, #12]
    2182:	68ba      	ldr	r2, [r7, #8]
    2184:	615a      	str	r2, [r3, #20]
}
    2186:	46c0      	nop			; (mov r8, r8)
    2188:	46bd      	mov	sp, r7
    218a:	b004      	add	sp, #16
    218c:	bd80      	pop	{r7, pc}
    218e:	46c0      	nop			; (mov r8, r8)
    2190:	0000211d 	.word	0x0000211d

00002194 <system_gclk_chan_get_config_defaults>:
{
    2194:	b580      	push	{r7, lr}
    2196:	b082      	sub	sp, #8
    2198:	af00      	add	r7, sp, #0
    219a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    219c:	687b      	ldr	r3, [r7, #4]
    219e:	2200      	movs	r2, #0
    21a0:	701a      	strb	r2, [r3, #0]
}
    21a2:	46c0      	nop			; (mov r8, r8)
    21a4:	46bd      	mov	sp, r7
    21a6:	b002      	add	sp, #8
    21a8:	bd80      	pop	{r7, pc}
	...

000021ac <system_apb_clock_set_mask>:
{
    21ac:	b580      	push	{r7, lr}
    21ae:	b082      	sub	sp, #8
    21b0:	af00      	add	r7, sp, #0
    21b2:	0002      	movs	r2, r0
    21b4:	6039      	str	r1, [r7, #0]
    21b6:	1dfb      	adds	r3, r7, #7
    21b8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    21ba:	1dfb      	adds	r3, r7, #7
    21bc:	781b      	ldrb	r3, [r3, #0]
    21be:	2b01      	cmp	r3, #1
    21c0:	d00a      	beq.n	21d8 <system_apb_clock_set_mask+0x2c>
    21c2:	2b02      	cmp	r3, #2
    21c4:	d00f      	beq.n	21e6 <system_apb_clock_set_mask+0x3a>
    21c6:	2b00      	cmp	r3, #0
    21c8:	d114      	bne.n	21f4 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    21ca:	4b0e      	ldr	r3, [pc, #56]	; (2204 <system_apb_clock_set_mask+0x58>)
    21cc:	4a0d      	ldr	r2, [pc, #52]	; (2204 <system_apb_clock_set_mask+0x58>)
    21ce:	6991      	ldr	r1, [r2, #24]
    21d0:	683a      	ldr	r2, [r7, #0]
    21d2:	430a      	orrs	r2, r1
    21d4:	619a      	str	r2, [r3, #24]
			break;
    21d6:	e00f      	b.n	21f8 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    21d8:	4b0a      	ldr	r3, [pc, #40]	; (2204 <system_apb_clock_set_mask+0x58>)
    21da:	4a0a      	ldr	r2, [pc, #40]	; (2204 <system_apb_clock_set_mask+0x58>)
    21dc:	69d1      	ldr	r1, [r2, #28]
    21de:	683a      	ldr	r2, [r7, #0]
    21e0:	430a      	orrs	r2, r1
    21e2:	61da      	str	r2, [r3, #28]
			break;
    21e4:	e008      	b.n	21f8 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    21e6:	4b07      	ldr	r3, [pc, #28]	; (2204 <system_apb_clock_set_mask+0x58>)
    21e8:	4a06      	ldr	r2, [pc, #24]	; (2204 <system_apb_clock_set_mask+0x58>)
    21ea:	6a11      	ldr	r1, [r2, #32]
    21ec:	683a      	ldr	r2, [r7, #0]
    21ee:	430a      	orrs	r2, r1
    21f0:	621a      	str	r2, [r3, #32]
			break;
    21f2:	e001      	b.n	21f8 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    21f4:	2317      	movs	r3, #23
    21f6:	e000      	b.n	21fa <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    21f8:	2300      	movs	r3, #0
}
    21fa:	0018      	movs	r0, r3
    21fc:	46bd      	mov	sp, r7
    21fe:	b002      	add	sp, #8
    2200:	bd80      	pop	{r7, pc}
    2202:	46c0      	nop			; (mov r8, r8)
    2204:	40000400 	.word	0x40000400

00002208 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    2208:	b580      	push	{r7, lr}
    220a:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    220c:	4b05      	ldr	r3, [pc, #20]	; (2224 <system_is_debugger_present+0x1c>)
    220e:	789b      	ldrb	r3, [r3, #2]
    2210:	b2db      	uxtb	r3, r3
    2212:	001a      	movs	r2, r3
    2214:	2302      	movs	r3, #2
    2216:	4013      	ands	r3, r2
    2218:	1e5a      	subs	r2, r3, #1
    221a:	4193      	sbcs	r3, r2
    221c:	b2db      	uxtb	r3, r3
}
    221e:	0018      	movs	r0, r3
    2220:	46bd      	mov	sp, r7
    2222:	bd80      	pop	{r7, pc}
    2224:	41002000 	.word	0x41002000

00002228 <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
    2228:	b580      	push	{r7, lr}
    222a:	b084      	sub	sp, #16
    222c:	af00      	add	r7, sp, #0
    222e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2230:	687b      	ldr	r3, [r7, #4]
    2232:	681b      	ldr	r3, [r3, #0]
    2234:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    2236:	68fb      	ldr	r3, [r7, #12]
    2238:	7e1b      	ldrb	r3, [r3, #24]
    223a:	b2db      	uxtb	r3, r3
    223c:	001a      	movs	r2, r3
    223e:	2302      	movs	r3, #2
    2240:	4013      	ands	r3, r2
    2242:	1e5a      	subs	r2, r3, #1
    2244:	4193      	sbcs	r3, r2
    2246:	b2db      	uxtb	r3, r3
}
    2248:	0018      	movs	r0, r3
    224a:	46bd      	mov	sp, r7
    224c:	b004      	add	sp, #16
    224e:	bd80      	pop	{r7, pc}

00002250 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
    2250:	b580      	push	{r7, lr}
    2252:	b084      	sub	sp, #16
    2254:	af00      	add	r7, sp, #0
    2256:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2258:	687b      	ldr	r3, [r7, #4]
    225a:	681b      	ldr	r3, [r3, #0]
    225c:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    225e:	68fb      	ldr	r3, [r7, #12]
    2260:	7e1b      	ldrb	r3, [r3, #24]
    2262:	b2db      	uxtb	r3, r3
    2264:	001a      	movs	r2, r3
    2266:	2301      	movs	r3, #1
    2268:	4013      	ands	r3, r2
    226a:	1e5a      	subs	r2, r3, #1
    226c:	4193      	sbcs	r3, r2
    226e:	b2db      	uxtb	r3, r3
}
    2270:	0018      	movs	r0, r3
    2272:	46bd      	mov	sp, r7
    2274:	b004      	add	sp, #16
    2276:	bd80      	pop	{r7, pc}

00002278 <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
    2278:	b580      	push	{r7, lr}
    227a:	b084      	sub	sp, #16
    227c:	af00      	add	r7, sp, #0
    227e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2280:	687b      	ldr	r3, [r7, #4]
    2282:	681b      	ldr	r3, [r3, #0]
    2284:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    2286:	68fb      	ldr	r3, [r7, #12]
    2288:	7e1b      	ldrb	r3, [r3, #24]
    228a:	b2db      	uxtb	r3, r3
    228c:	001a      	movs	r2, r3
    228e:	2304      	movs	r3, #4
    2290:	4013      	ands	r3, r2
    2292:	1e5a      	subs	r2, r3, #1
    2294:	4193      	sbcs	r3, r2
    2296:	b2db      	uxtb	r3, r3
}
    2298:	0018      	movs	r0, r3
    229a:	46bd      	mov	sp, r7
    229c:	b004      	add	sp, #16
    229e:	bd80      	pop	{r7, pc}

000022a0 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
    22a0:	b580      	push	{r7, lr}
    22a2:	b084      	sub	sp, #16
    22a4:	af00      	add	r7, sp, #0
    22a6:	6078      	str	r0, [r7, #4]
    22a8:	000a      	movs	r2, r1
    22aa:	1cbb      	adds	r3, r7, #2
    22ac:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    22ae:	687b      	ldr	r3, [r7, #4]
    22b0:	681b      	ldr	r3, [r3, #0]
    22b2:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    22b4:	687b      	ldr	r3, [r7, #4]
    22b6:	0018      	movs	r0, r3
    22b8:	4b0a      	ldr	r3, [pc, #40]	; (22e4 <spi_write+0x44>)
    22ba:	4798      	blx	r3
    22bc:	0003      	movs	r3, r0
    22be:	001a      	movs	r2, r3
    22c0:	2301      	movs	r3, #1
    22c2:	4053      	eors	r3, r2
    22c4:	b2db      	uxtb	r3, r3
    22c6:	2b00      	cmp	r3, #0
    22c8:	d001      	beq.n	22ce <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
    22ca:	2305      	movs	r3, #5
    22cc:	e006      	b.n	22dc <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    22ce:	1cbb      	adds	r3, r7, #2
    22d0:	881b      	ldrh	r3, [r3, #0]
    22d2:	05db      	lsls	r3, r3, #23
    22d4:	0dda      	lsrs	r2, r3, #23
    22d6:	68fb      	ldr	r3, [r7, #12]
    22d8:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
    22da:	2300      	movs	r3, #0
}
    22dc:	0018      	movs	r0, r3
    22de:	46bd      	mov	sp, r7
    22e0:	b004      	add	sp, #16
    22e2:	bd80      	pop	{r7, pc}
    22e4:	00002251 	.word	0x00002251

000022e8 <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
    22e8:	b580      	push	{r7, lr}
    22ea:	b084      	sub	sp, #16
    22ec:	af00      	add	r7, sp, #0
    22ee:	6078      	str	r0, [r7, #4]
    22f0:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    22f2:	687b      	ldr	r3, [r7, #4]
    22f4:	681b      	ldr	r3, [r3, #0]
    22f6:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    22f8:	687b      	ldr	r3, [r7, #4]
    22fa:	0018      	movs	r0, r3
    22fc:	4b1b      	ldr	r3, [pc, #108]	; (236c <spi_read+0x84>)
    22fe:	4798      	blx	r3
    2300:	0003      	movs	r3, r0
    2302:	001a      	movs	r2, r3
    2304:	2301      	movs	r3, #1
    2306:	4053      	eors	r3, r2
    2308:	b2db      	uxtb	r3, r3
    230a:	2b00      	cmp	r3, #0
    230c:	d001      	beq.n	2312 <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
    230e:	2310      	movs	r3, #16
    2310:	e027      	b.n	2362 <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
    2312:	230f      	movs	r3, #15
    2314:	18fb      	adds	r3, r7, r3
    2316:	2200      	movs	r2, #0
    2318:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    231a:	68bb      	ldr	r3, [r7, #8]
    231c:	8b5b      	ldrh	r3, [r3, #26]
    231e:	b29b      	uxth	r3, r3
    2320:	001a      	movs	r2, r3
    2322:	2304      	movs	r3, #4
    2324:	4013      	ands	r3, r2
    2326:	d006      	beq.n	2336 <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
    2328:	230f      	movs	r3, #15
    232a:	18fb      	adds	r3, r7, r3
    232c:	221e      	movs	r2, #30
    232e:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    2330:	68bb      	ldr	r3, [r7, #8]
    2332:	2204      	movs	r2, #4
    2334:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2336:	687b      	ldr	r3, [r7, #4]
    2338:	799b      	ldrb	r3, [r3, #6]
    233a:	2b01      	cmp	r3, #1
    233c:	d108      	bne.n	2350 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    233e:	68bb      	ldr	r3, [r7, #8]
    2340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2342:	b29b      	uxth	r3, r3
    2344:	05db      	lsls	r3, r3, #23
    2346:	0ddb      	lsrs	r3, r3, #23
    2348:	b29a      	uxth	r2, r3
    234a:	683b      	ldr	r3, [r7, #0]
    234c:	801a      	strh	r2, [r3, #0]
    234e:	e005      	b.n	235c <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    2350:	68bb      	ldr	r3, [r7, #8]
    2352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2354:	b2db      	uxtb	r3, r3
    2356:	b29a      	uxth	r2, r3
    2358:	683b      	ldr	r3, [r7, #0]
    235a:	801a      	strh	r2, [r3, #0]
	}

	return retval;
    235c:	230f      	movs	r3, #15
    235e:	18fb      	adds	r3, r7, r3
    2360:	781b      	ldrb	r3, [r3, #0]
}
    2362:	0018      	movs	r0, r3
    2364:	46bd      	mov	sp, r7
    2366:	b004      	add	sp, #16
    2368:	bd80      	pop	{r7, pc}
    236a:	46c0      	nop			; (mov r8, r8)
    236c:	00002279 	.word	0x00002279

00002370 <_spi_clear_tx_complete_flag>:
 *
 * \param[in]  module  Pointer to the software instance struct
 */
static void _spi_clear_tx_complete_flag(
		struct spi_module *const module)
{
    2370:	b580      	push	{r7, lr}
    2372:	b084      	sub	sp, #16
    2374:	af00      	add	r7, sp, #0
    2376:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2378:	687b      	ldr	r3, [r7, #4]
    237a:	681b      	ldr	r3, [r3, #0]
    237c:	60fb      	str	r3, [r7, #12]

	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    237e:	68fb      	ldr	r3, [r7, #12]
    2380:	2202      	movs	r2, #2
    2382:	761a      	strb	r2, [r3, #24]
}
    2384:	46c0      	nop			; (mov r8, r8)
    2386:	46bd      	mov	sp, r7
    2388:	b004      	add	sp, #16
    238a:	bd80      	pop	{r7, pc}

0000238c <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
    238c:	b590      	push	{r4, r7, lr}
    238e:	b093      	sub	sp, #76	; 0x4c
    2390:	af00      	add	r7, sp, #0
    2392:	6078      	str	r0, [r7, #4]
    2394:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2396:	687b      	ldr	r3, [r7, #4]
    2398:	681b      	ldr	r3, [r3, #0]
    239a:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
    239c:	687b      	ldr	r3, [r7, #4]
    239e:	681b      	ldr	r3, [r3, #0]
    23a0:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    23a2:	231c      	movs	r3, #28
    23a4:	18fb      	adds	r3, r7, r3
    23a6:	0018      	movs	r0, r3
    23a8:	4b85      	ldr	r3, [pc, #532]	; (25c0 <_spi_set_config+0x234>)
    23aa:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    23ac:	231c      	movs	r3, #28
    23ae:	18fb      	adds	r3, r7, r3
    23b0:	2200      	movs	r2, #0
    23b2:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
    23b4:	683b      	ldr	r3, [r7, #0]
    23b6:	781b      	ldrb	r3, [r3, #0]
    23b8:	2b00      	cmp	r3, #0
    23ba:	d103      	bne.n	23c4 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    23bc:	231c      	movs	r3, #28
    23be:	18fb      	adds	r3, r7, r3
    23c0:	2200      	movs	r2, #0
    23c2:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    23c4:	683b      	ldr	r3, [r7, #0]
    23c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
    23c8:	230c      	movs	r3, #12
    23ca:	18fb      	adds	r3, r7, r3
    23cc:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    23ce:	683b      	ldr	r3, [r7, #0]
    23d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
    23d2:	230c      	movs	r3, #12
    23d4:	18fb      	adds	r3, r7, r3
    23d6:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
    23d8:	683b      	ldr	r3, [r7, #0]
    23da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
    23dc:	230c      	movs	r3, #12
    23de:	18fb      	adds	r3, r7, r3
    23e0:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
    23e2:	683b      	ldr	r3, [r7, #0]
    23e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
    23e6:	230c      	movs	r3, #12
    23e8:	18fb      	adds	r3, r7, r3
    23ea:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    23ec:	2347      	movs	r3, #71	; 0x47
    23ee:	18fb      	adds	r3, r7, r3
    23f0:	2200      	movs	r2, #0
    23f2:	701a      	strb	r2, [r3, #0]
    23f4:	e02c      	b.n	2450 <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    23f6:	2347      	movs	r3, #71	; 0x47
    23f8:	18fb      	adds	r3, r7, r3
    23fa:	781a      	ldrb	r2, [r3, #0]
    23fc:	230c      	movs	r3, #12
    23fe:	18fb      	adds	r3, r7, r3
    2400:	0092      	lsls	r2, r2, #2
    2402:	58d3      	ldr	r3, [r2, r3]
    2404:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    2406:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    2408:	2b00      	cmp	r3, #0
    240a:	d109      	bne.n	2420 <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    240c:	2347      	movs	r3, #71	; 0x47
    240e:	18fb      	adds	r3, r7, r3
    2410:	781a      	ldrb	r2, [r3, #0]
    2412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2414:	0011      	movs	r1, r2
    2416:	0018      	movs	r0, r3
    2418:	4b6a      	ldr	r3, [pc, #424]	; (25c4 <_spi_set_config+0x238>)
    241a:	4798      	blx	r3
    241c:	0003      	movs	r3, r0
    241e:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    2420:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    2422:	3301      	adds	r3, #1
    2424:	d00d      	beq.n	2442 <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    2426:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    2428:	b2da      	uxtb	r2, r3
    242a:	231c      	movs	r3, #28
    242c:	18fb      	adds	r3, r7, r3
    242e:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    2430:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    2432:	0c1b      	lsrs	r3, r3, #16
    2434:	b2db      	uxtb	r3, r3
    2436:	221c      	movs	r2, #28
    2438:	18ba      	adds	r2, r7, r2
    243a:	0011      	movs	r1, r2
    243c:	0018      	movs	r0, r3
    243e:	4b62      	ldr	r3, [pc, #392]	; (25c8 <_spi_set_config+0x23c>)
    2440:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
    2442:	2347      	movs	r3, #71	; 0x47
    2444:	18fb      	adds	r3, r7, r3
    2446:	781a      	ldrb	r2, [r3, #0]
    2448:	2347      	movs	r3, #71	; 0x47
    244a:	18fb      	adds	r3, r7, r3
    244c:	3201      	adds	r2, #1
    244e:	701a      	strb	r2, [r3, #0]
    2450:	2347      	movs	r3, #71	; 0x47
    2452:	18fb      	adds	r3, r7, r3
    2454:	781b      	ldrb	r3, [r3, #0]
    2456:	2b03      	cmp	r3, #3
    2458:	d9cd      	bls.n	23f6 <_spi_set_config+0x6a>
		}
	}

	module->mode             = config->mode;
    245a:	683b      	ldr	r3, [r7, #0]
    245c:	781a      	ldrb	r2, [r3, #0]
    245e:	687b      	ldr	r3, [r7, #4]
    2460:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
    2462:	683b      	ldr	r3, [r7, #0]
    2464:	7c1a      	ldrb	r2, [r3, #16]
    2466:	687b      	ldr	r3, [r7, #4]
    2468:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
    246a:	683b      	ldr	r3, [r7, #0]
    246c:	7c9a      	ldrb	r2, [r3, #18]
    246e:	687b      	ldr	r3, [r7, #4]
    2470:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
    2472:	683b      	ldr	r3, [r7, #0]
    2474:	7d1a      	ldrb	r2, [r3, #20]
    2476:	687b      	ldr	r3, [r7, #4]
    2478:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
    247a:	230a      	movs	r3, #10
    247c:	18fb      	adds	r3, r7, r3
    247e:	2200      	movs	r2, #0
    2480:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
    2482:	2300      	movs	r3, #0
    2484:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
    2486:	2300      	movs	r3, #0
    2488:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
    248a:	683b      	ldr	r3, [r7, #0]
    248c:	781b      	ldrb	r3, [r3, #0]
    248e:	2b01      	cmp	r3, #1
    2490:	d129      	bne.n	24e6 <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    2492:	687b      	ldr	r3, [r7, #4]
    2494:	681b      	ldr	r3, [r3, #0]
    2496:	0018      	movs	r0, r3
    2498:	4b4c      	ldr	r3, [pc, #304]	; (25cc <_spi_set_config+0x240>)
    249a:	4798      	blx	r3
    249c:	0003      	movs	r3, r0
    249e:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    24a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    24a2:	3314      	adds	r3, #20
    24a4:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    24a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    24a8:	b2db      	uxtb	r3, r3
    24aa:	0018      	movs	r0, r3
    24ac:	4b48      	ldr	r3, [pc, #288]	; (25d0 <_spi_set_config+0x244>)
    24ae:	4798      	blx	r3
    24b0:	0003      	movs	r3, r0
    24b2:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
    24b4:	683b      	ldr	r3, [r7, #0]
    24b6:	699b      	ldr	r3, [r3, #24]
    24b8:	2223      	movs	r2, #35	; 0x23
    24ba:	18bc      	adds	r4, r7, r2
    24bc:	220a      	movs	r2, #10
    24be:	18ba      	adds	r2, r7, r2
    24c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
    24c2:	0018      	movs	r0, r3
    24c4:	4b43      	ldr	r3, [pc, #268]	; (25d4 <_spi_set_config+0x248>)
    24c6:	4798      	blx	r3
    24c8:	0003      	movs	r3, r0
    24ca:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
    24cc:	2323      	movs	r3, #35	; 0x23
    24ce:	18fb      	adds	r3, r7, r3
    24d0:	781b      	ldrb	r3, [r3, #0]
    24d2:	2b00      	cmp	r3, #0
    24d4:	d001      	beq.n	24da <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    24d6:	2317      	movs	r3, #23
    24d8:	e06d      	b.n	25b6 <_spi_set_config+0x22a>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
    24da:	230a      	movs	r3, #10
    24dc:	18fb      	adds	r3, r7, r3
    24de:	881b      	ldrh	r3, [r3, #0]
    24e0:	b2da      	uxtb	r2, r3
    24e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    24e4:	731a      	strb	r2, [r3, #12]
	}
# endif
# if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    24e6:	683b      	ldr	r3, [r7, #0]
    24e8:	781b      	ldrb	r3, [r3, #0]
    24ea:	2b00      	cmp	r3, #0
    24ec:	d11a      	bne.n	2524 <_spi_set_config+0x198>
		/* Set frame format */
		ctrla = config->mode_specific.slave.frame_format;
    24ee:	683b      	ldr	r3, [r7, #0]
    24f0:	699b      	ldr	r3, [r3, #24]
    24f2:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;
    24f4:	683b      	ldr	r3, [r7, #0]
    24f6:	8b9b      	ldrh	r3, [r3, #28]
    24f8:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
    24fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    24fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    24fe:	683a      	ldr	r2, [r7, #0]
    2500:	7f92      	ldrb	r2, [r2, #30]
    2502:	0011      	movs	r1, r2
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    2504:	683a      	ldr	r2, [r7, #0]
    2506:	7fd2      	ldrb	r2, [r2, #31]
    2508:	0412      	lsls	r2, r2, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    250a:	430a      	orrs	r2, r1
		spi_module->ADDR.reg |=
    250c:	431a      	orrs	r2, r3
    250e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2510:	625a      	str	r2, [r3, #36]	; 0x24

		if (config->mode_specific.slave.preload_enable) {
    2512:	683b      	ldr	r3, [r7, #0]
    2514:	2220      	movs	r2, #32
    2516:	5c9b      	ldrb	r3, [r3, r2]
    2518:	2b00      	cmp	r3, #0
    251a:	d003      	beq.n	2524 <_spi_set_config+0x198>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    251c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    251e:	2240      	movs	r2, #64	; 0x40
    2520:	4313      	orrs	r3, r2
    2522:	63bb      	str	r3, [r7, #56]	; 0x38
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
    2524:	683b      	ldr	r3, [r7, #0]
    2526:	685b      	ldr	r3, [r3, #4]
    2528:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    252a:	4313      	orrs	r3, r2
    252c:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    252e:	683b      	ldr	r3, [r7, #0]
    2530:	689b      	ldr	r3, [r3, #8]
    2532:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    2534:	4313      	orrs	r3, r2
    2536:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    2538:	683b      	ldr	r3, [r7, #0]
    253a:	68db      	ldr	r3, [r3, #12]
    253c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    253e:	4313      	orrs	r3, r2
    2540:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
    2542:	683b      	ldr	r3, [r7, #0]
    2544:	7c1b      	ldrb	r3, [r3, #16]
    2546:	001a      	movs	r2, r3
    2548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    254a:	4313      	orrs	r3, r2
    254c:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    254e:	683b      	ldr	r3, [r7, #0]
    2550:	7c5b      	ldrb	r3, [r3, #17]
    2552:	2b00      	cmp	r3, #0
    2554:	d103      	bne.n	255e <_spi_set_config+0x1d2>
    2556:	4b20      	ldr	r3, [pc, #128]	; (25d8 <_spi_set_config+0x24c>)
    2558:	4798      	blx	r3
    255a:	1e03      	subs	r3, r0, #0
    255c:	d003      	beq.n	2566 <_spi_set_config+0x1da>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    255e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2560:	2280      	movs	r2, #128	; 0x80
    2562:	4313      	orrs	r3, r2
    2564:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
    2566:	683b      	ldr	r3, [r7, #0]
    2568:	7c9b      	ldrb	r3, [r3, #18]
    256a:	2b00      	cmp	r3, #0
    256c:	d004      	beq.n	2578 <_spi_set_config+0x1ec>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    256e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2570:	2280      	movs	r2, #128	; 0x80
    2572:	0292      	lsls	r2, r2, #10
    2574:	4313      	orrs	r3, r2
    2576:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    2578:	683b      	ldr	r3, [r7, #0]
    257a:	7cdb      	ldrb	r3, [r3, #19]
    257c:	2b00      	cmp	r3, #0
    257e:	d004      	beq.n	258a <_spi_set_config+0x1fe>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    2580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2582:	2280      	movs	r2, #128	; 0x80
    2584:	0092      	lsls	r2, r2, #2
    2586:	4313      	orrs	r3, r2
    2588:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    258a:	683b      	ldr	r3, [r7, #0]
    258c:	7d1b      	ldrb	r3, [r3, #20]
    258e:	2b00      	cmp	r3, #0
    2590:	d004      	beq.n	259c <_spi_set_config+0x210>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    2592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2594:	2280      	movs	r2, #128	; 0x80
    2596:	0192      	lsls	r2, r2, #6
    2598:	4313      	orrs	r3, r2
    259a:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
    259c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    259e:	681a      	ldr	r2, [r3, #0]
    25a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    25a2:	431a      	orrs	r2, r3
    25a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    25a6:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
    25a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    25aa:	685a      	ldr	r2, [r3, #4]
    25ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    25ae:	431a      	orrs	r2, r3
    25b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    25b2:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
    25b4:	2300      	movs	r3, #0
}
    25b6:	0018      	movs	r0, r3
    25b8:	46bd      	mov	sp, r7
    25ba:	b013      	add	sp, #76	; 0x4c
    25bc:	bd90      	pop	{r4, r7, pc}
    25be:	46c0      	nop			; (mov r8, r8)
    25c0:	00002019 	.word	0x00002019
    25c4:	00000d9d 	.word	0x00000d9d
    25c8:	00003a51 	.word	0x00003a51
    25cc:	00000f59 	.word	0x00000f59
    25d0:	00003889 	.word	0x00003889
    25d4:	00000c93 	.word	0x00000c93
    25d8:	00002209 	.word	0x00002209

000025dc <_spi_check_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_check_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
    25dc:	b590      	push	{r4, r7, lr}
    25de:	b091      	sub	sp, #68	; 0x44
    25e0:	af00      	add	r7, sp, #0
    25e2:	6078      	str	r0, [r7, #4]
    25e4:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    25e6:	687b      	ldr	r3, [r7, #4]
    25e8:	681b      	ldr	r3, [r3, #0]
    25ea:	62fb      	str	r3, [r7, #44]	; 0x2c
	Sercom *const hw = module->hw;
    25ec:	687b      	ldr	r3, [r7, #4]
    25ee:	681b      	ldr	r3, [r3, #0]
    25f0:	62bb      	str	r3, [r7, #40]	; 0x28

	uint32_t pad_pinmuxes[] = {
		config->pinmux_pad0, config->pinmux_pad1,
    25f2:	683b      	ldr	r3, [r7, #0]
    25f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
    25f6:	230c      	movs	r3, #12
    25f8:	18fb      	adds	r3, r7, r3
    25fa:	601a      	str	r2, [r3, #0]
		config->pinmux_pad0, config->pinmux_pad1,
    25fc:	683b      	ldr	r3, [r7, #0]
    25fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
    2600:	230c      	movs	r3, #12
    2602:	18fb      	adds	r3, r7, r3
    2604:	605a      	str	r2, [r3, #4]
		config->pinmux_pad2, config->pinmux_pad3
    2606:	683b      	ldr	r3, [r7, #0]
    2608:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
    260a:	230c      	movs	r3, #12
    260c:	18fb      	adds	r3, r7, r3
    260e:	609a      	str	r2, [r3, #8]
		config->pinmux_pad2, config->pinmux_pad3
    2610:	683b      	ldr	r3, [r7, #0]
    2612:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
    2614:	230c      	movs	r3, #12
    2616:	18fb      	adds	r3, r7, r3
    2618:	60da      	str	r2, [r3, #12]
	};

	/* Compare the current SERCOM pins against the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    261a:	233f      	movs	r3, #63	; 0x3f
    261c:	18fb      	adds	r3, r7, r3
    261e:	2200      	movs	r2, #0
    2620:	701a      	strb	r2, [r3, #0]
    2622:	e030      	b.n	2686 <_spi_check_config+0xaa>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    2624:	233f      	movs	r3, #63	; 0x3f
    2626:	18fb      	adds	r3, r7, r3
    2628:	781a      	ldrb	r2, [r3, #0]
    262a:	230c      	movs	r3, #12
    262c:	18fb      	adds	r3, r7, r3
    262e:	0092      	lsls	r2, r2, #2
    2630:	58d3      	ldr	r3, [r2, r3]
    2632:	63bb      	str	r3, [r7, #56]	; 0x38

		if (current_pinmux == PINMUX_DEFAULT) {
    2634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2636:	2b00      	cmp	r3, #0
    2638:	d109      	bne.n	264e <_spi_check_config+0x72>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    263a:	233f      	movs	r3, #63	; 0x3f
    263c:	18fb      	adds	r3, r7, r3
    263e:	781a      	ldrb	r2, [r3, #0]
    2640:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2642:	0011      	movs	r1, r2
    2644:	0018      	movs	r0, r3
    2646:	4b6e      	ldr	r3, [pc, #440]	; (2800 <_spi_check_config+0x224>)
    2648:	4798      	blx	r3
    264a:	0003      	movs	r3, r0
    264c:	63bb      	str	r3, [r7, #56]	; 0x38
		}

		if (current_pinmux == PINMUX_UNUSED) {
    264e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2650:	3301      	adds	r3, #1
    2652:	d010      	beq.n	2676 <_spi_check_config+0x9a>
			continue;
		}

		if ((current_pinmux & 0xFFFF) !=
    2654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2656:	041b      	lsls	r3, r3, #16
    2658:	0c1c      	lsrs	r4, r3, #16
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
    265a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    265c:	0c1b      	lsrs	r3, r3, #16
    265e:	b2db      	uxtb	r3, r3
    2660:	0018      	movs	r0, r3
    2662:	4b68      	ldr	r3, [pc, #416]	; (2804 <_spi_check_config+0x228>)
    2664:	4798      	blx	r3
    2666:	0003      	movs	r3, r0
		if ((current_pinmux & 0xFFFF) !=
    2668:	429c      	cmp	r4, r3
    266a:	d005      	beq.n	2678 <_spi_check_config+0x9c>
			module->hw = NULL;
    266c:	687b      	ldr	r3, [r7, #4]
    266e:	2200      	movs	r2, #0
    2670:	601a      	str	r2, [r3, #0]
			return STATUS_ERR_DENIED;
    2672:	231c      	movs	r3, #28
    2674:	e0bf      	b.n	27f6 <_spi_check_config+0x21a>
			continue;
    2676:	46c0      	nop			; (mov r8, r8)
	for (uint8_t pad = 0; pad < 4; pad++) {
    2678:	233f      	movs	r3, #63	; 0x3f
    267a:	18fb      	adds	r3, r7, r3
    267c:	781a      	ldrb	r2, [r3, #0]
    267e:	233f      	movs	r3, #63	; 0x3f
    2680:	18fb      	adds	r3, r7, r3
    2682:	3201      	adds	r2, #1
    2684:	701a      	strb	r2, [r3, #0]
    2686:	233f      	movs	r3, #63	; 0x3f
    2688:	18fb      	adds	r3, r7, r3
    268a:	781b      	ldrb	r3, [r3, #0]
    268c:	2b03      	cmp	r3, #3
    268e:	d9c9      	bls.n	2624 <_spi_check_config+0x48>
	}

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to read BAUD register */
	uint16_t baud;
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
    2690:	2013      	movs	r0, #19
    2692:	4b5d      	ldr	r3, [pc, #372]	; (2808 <_spi_check_config+0x22c>)
    2694:	4798      	blx	r3
    2696:	0003      	movs	r3, r0
    2698:	627b      	str	r3, [r7, #36]	; 0x24
#  endif
	/* Value to read CTRLA, CTRLB and ADDR register */
	uint32_t ctrla = 0;
    269a:	2300      	movs	r3, #0
    269c:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t ctrlb = 0;
    269e:	2300      	movs	r3, #0
    26a0:	633b      	str	r3, [r7, #48]	; 0x30
#  if CONF_SPI_SLAVE_ENABLE == true
	uint32_t addr = 0;
    26a2:	2300      	movs	r3, #0
    26a4:	623b      	str	r3, [r7, #32]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and compare it */
	if (config->mode == SPI_MODE_MASTER) {
    26a6:	683b      	ldr	r3, [r7, #0]
    26a8:	781b      	ldrb	r3, [r3, #0]
    26aa:	2b01      	cmp	r3, #1
    26ac:	d121      	bne.n	26f2 <_spi_check_config+0x116>
		enum status_code error_code = _sercom_get_sync_baud_val(
    26ae:	683b      	ldr	r3, [r7, #0]
    26b0:	699b      	ldr	r3, [r3, #24]
    26b2:	221f      	movs	r2, #31
    26b4:	18bc      	adds	r4, r7, r2
    26b6:	220a      	movs	r2, #10
    26b8:	18ba      	adds	r2, r7, r2
    26ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
    26bc:	0018      	movs	r0, r3
    26be:	4b53      	ldr	r3, [pc, #332]	; (280c <_spi_check_config+0x230>)
    26c0:	4798      	blx	r3
    26c2:	0003      	movs	r3, r0
    26c4:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				external_clock, &baud);

		if (error_code != STATUS_OK) {
    26c6:	231f      	movs	r3, #31
    26c8:	18fb      	adds	r3, r7, r3
    26ca:	781b      	ldrb	r3, [r3, #0]
    26cc:	2b00      	cmp	r3, #0
    26ce:	d001      	beq.n	26d4 <_spi_check_config+0xf8>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    26d0:	2317      	movs	r3, #23
    26d2:	e090      	b.n	27f6 <_spi_check_config+0x21a>
		}

		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    26d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    26d6:	7b1b      	ldrb	r3, [r3, #12]
    26d8:	b2da      	uxtb	r2, r3
    26da:	230a      	movs	r3, #10
    26dc:	18fb      	adds	r3, r7, r3
    26de:	881b      	ldrh	r3, [r3, #0]
    26e0:	b2db      	uxtb	r3, r3
    26e2:	429a      	cmp	r2, r3
    26e4:	d001      	beq.n	26ea <_spi_check_config+0x10e>
			return STATUS_ERR_DENIED;
    26e6:	231c      	movs	r3, #28
    26e8:	e085      	b.n	27f6 <_spi_check_config+0x21a>
		}

		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
    26ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    26ec:	220c      	movs	r2, #12
    26ee:	4313      	orrs	r3, r2
    26f0:	637b      	str	r3, [r7, #52]	; 0x34
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    26f2:	683b      	ldr	r3, [r7, #0]
    26f4:	781b      	ldrb	r3, [r3, #0]
    26f6:	2b00      	cmp	r3, #0
    26f8:	d129      	bne.n	274e <_spi_check_config+0x172>

		/* Set frame format */
		ctrla |= config->mode_specific.slave.frame_format;
    26fa:	683b      	ldr	r3, [r7, #0]
    26fc:	699b      	ldr	r3, [r3, #24]
    26fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    2700:	4313      	orrs	r3, r2
    2702:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set address mode */
		ctrlb |= config->mode_specific.slave.address_mode;
    2704:	683b      	ldr	r3, [r7, #0]
    2706:	8b9b      	ldrh	r3, [r3, #28]
    2708:	001a      	movs	r2, r3
    270a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    270c:	4313      	orrs	r3, r2
    270e:	633b      	str	r3, [r7, #48]	; 0x30

		/* Set address and address mask*/
		addr |= (config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    2710:	683b      	ldr	r3, [r7, #0]
    2712:	7f9b      	ldrb	r3, [r3, #30]
    2714:	001a      	movs	r2, r3
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    2716:	683b      	ldr	r3, [r7, #0]
    2718:	7fdb      	ldrb	r3, [r3, #31]
    271a:	041b      	lsls	r3, r3, #16
		addr |= (config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    271c:	4313      	orrs	r3, r2
    271e:	001a      	movs	r2, r3
    2720:	6a3b      	ldr	r3, [r7, #32]
    2722:	4313      	orrs	r3, r2
    2724:	623b      	str	r3, [r7, #32]
		if (spi_module->CTRLA.reg != addr) {
    2726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2728:	681a      	ldr	r2, [r3, #0]
    272a:	6a3b      	ldr	r3, [r7, #32]
    272c:	429a      	cmp	r2, r3
    272e:	d001      	beq.n	2734 <_spi_check_config+0x158>
			return STATUS_ERR_DENIED;
    2730:	231c      	movs	r3, #28
    2732:	e060      	b.n	27f6 <_spi_check_config+0x21a>
		}

		if (config->mode_specific.slave.preload_enable) {
    2734:	683b      	ldr	r3, [r7, #0]
    2736:	2220      	movs	r2, #32
    2738:	5c9b      	ldrb	r3, [r3, r2]
    273a:	2b00      	cmp	r3, #0
    273c:	d003      	beq.n	2746 <_spi_check_config+0x16a>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    273e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2740:	2240      	movs	r2, #64	; 0x40
    2742:	4313      	orrs	r3, r2
    2744:	633b      	str	r3, [r7, #48]	; 0x30
		}
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x2);
    2746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2748:	2208      	movs	r2, #8
    274a:	4313      	orrs	r3, r2
    274c:	637b      	str	r3, [r7, #52]	; 0x34
	}
#  endif
	/* Set data order */
	ctrla |= config->data_order;
    274e:	683b      	ldr	r3, [r7, #0]
    2750:	685b      	ldr	r3, [r3, #4]
    2752:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    2754:	4313      	orrs	r3, r2
    2756:	637b      	str	r3, [r7, #52]	; 0x34

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    2758:	683b      	ldr	r3, [r7, #0]
    275a:	689b      	ldr	r3, [r3, #8]
    275c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    275e:	4313      	orrs	r3, r2
    2760:	637b      	str	r3, [r7, #52]	; 0x34

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    2762:	683b      	ldr	r3, [r7, #0]
    2764:	68db      	ldr	r3, [r3, #12]
    2766:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    2768:	4313      	orrs	r3, r2
    276a:	637b      	str	r3, [r7, #52]	; 0x34

	/* Set SPI character size */
	ctrlb |= config->character_size;
    276c:	683b      	ldr	r3, [r7, #0]
    276e:	7c1b      	ldrb	r3, [r3, #16]
    2770:	001a      	movs	r2, r3
    2772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2774:	4313      	orrs	r3, r2
    2776:	633b      	str	r3, [r7, #48]	; 0x30

	if (config->run_in_standby) {
    2778:	683b      	ldr	r3, [r7, #0]
    277a:	7c5b      	ldrb	r3, [r3, #17]
    277c:	2b00      	cmp	r3, #0
    277e:	d003      	beq.n	2788 <_spi_check_config+0x1ac>
		/* Enable in sleep mode */
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    2780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2782:	2280      	movs	r2, #128	; 0x80
    2784:	4313      	orrs	r3, r2
    2786:	637b      	str	r3, [r7, #52]	; 0x34
	}

	if (config->receiver_enable) {
    2788:	683b      	ldr	r3, [r7, #0]
    278a:	7c9b      	ldrb	r3, [r3, #18]
    278c:	2b00      	cmp	r3, #0
    278e:	d004      	beq.n	279a <_spi_check_config+0x1be>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    2790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2792:	2280      	movs	r2, #128	; 0x80
    2794:	0292      	lsls	r2, r2, #10
    2796:	4313      	orrs	r3, r2
    2798:	633b      	str	r3, [r7, #48]	; 0x30
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    279a:	683b      	ldr	r3, [r7, #0]
    279c:	7cdb      	ldrb	r3, [r3, #19]
    279e:	2b00      	cmp	r3, #0
    27a0:	d004      	beq.n	27ac <_spi_check_config+0x1d0>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    27a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    27a4:	2280      	movs	r2, #128	; 0x80
    27a6:	0092      	lsls	r2, r2, #2
    27a8:	4313      	orrs	r3, r2
    27aa:	633b      	str	r3, [r7, #48]	; 0x30
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    27ac:	683b      	ldr	r3, [r7, #0]
    27ae:	7d1b      	ldrb	r3, [r3, #20]
    27b0:	2b00      	cmp	r3, #0
    27b2:	d004      	beq.n	27be <_spi_check_config+0x1e2>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    27b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    27b6:	2280      	movs	r2, #128	; 0x80
    27b8:	0192      	lsls	r2, r2, #6
    27ba:	4313      	orrs	r3, r2
    27bc:	633b      	str	r3, [r7, #48]	; 0x30
	}
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
    27be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    27c0:	2202      	movs	r2, #2
    27c2:	4313      	orrs	r3, r2
    27c4:	637b      	str	r3, [r7, #52]	; 0x34

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
    27c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    27c8:	681a      	ldr	r2, [r3, #0]
    27ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    27cc:	429a      	cmp	r2, r3
    27ce:	d10e      	bne.n	27ee <_spi_check_config+0x212>
			spi_module->CTRLB.reg == ctrlb) {
    27d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    27d2:	685a      	ldr	r2, [r3, #4]
	if (spi_module->CTRLA.reg == ctrla &&
    27d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    27d6:	429a      	cmp	r2, r3
    27d8:	d109      	bne.n	27ee <_spi_check_config+0x212>
		module->mode           = config->mode;
    27da:	683b      	ldr	r3, [r7, #0]
    27dc:	781a      	ldrb	r2, [r3, #0]
    27de:	687b      	ldr	r3, [r7, #4]
    27e0:	715a      	strb	r2, [r3, #5]
		module->character_size = config->character_size;
    27e2:	683b      	ldr	r3, [r7, #0]
    27e4:	7c1a      	ldrb	r2, [r3, #16]
    27e6:	687b      	ldr	r3, [r7, #4]
    27e8:	719a      	strb	r2, [r3, #6]
		return STATUS_OK;
    27ea:	2300      	movs	r3, #0
    27ec:	e003      	b.n	27f6 <_spi_check_config+0x21a>
	}

	/* Not same config, wipe module pointer and return */
	module->hw = NULL;
    27ee:	687b      	ldr	r3, [r7, #4]
    27f0:	2200      	movs	r2, #0
    27f2:	601a      	str	r2, [r3, #0]

	return STATUS_ERR_DENIED;
    27f4:	231c      	movs	r3, #28
}
    27f6:	0018      	movs	r0, r3
    27f8:	46bd      	mov	sp, r7
    27fa:	b011      	add	sp, #68	; 0x44
    27fc:	bd90      	pop	{r4, r7, pc}
    27fe:	46c0      	nop			; (mov r8, r8)
    2800:	00000d9d 	.word	0x00000d9d
    2804:	000020a1 	.word	0x000020a1
    2808:	00003889 	.word	0x00003889
    280c:	00000c93 	.word	0x00000c93

00002810 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    2810:	b580      	push	{r7, lr}
    2812:	b08a      	sub	sp, #40	; 0x28
    2814:	af00      	add	r7, sp, #0
    2816:	60f8      	str	r0, [r7, #12]
    2818:	60b9      	str	r1, [r7, #8]
    281a:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    281c:	68fb      	ldr	r3, [r7, #12]
    281e:	68ba      	ldr	r2, [r7, #8]
    2820:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
    2822:	68fb      	ldr	r3, [r7, #12]
    2824:	681b      	ldr	r3, [r3, #0]
    2826:	627b      	str	r3, [r7, #36]	; 0x24

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    2828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    282a:	681b      	ldr	r3, [r3, #0]
    282c:	2202      	movs	r2, #2
    282e:	4013      	ands	r3, r2
    2830:	d007      	beq.n	2842 <spi_init+0x32>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
    2832:	687a      	ldr	r2, [r7, #4]
    2834:	68fb      	ldr	r3, [r7, #12]
    2836:	0011      	movs	r1, r2
    2838:	0018      	movs	r0, r3
    283a:	4b2f      	ldr	r3, [pc, #188]	; (28f8 <spi_init+0xe8>)
    283c:	4798      	blx	r3
    283e:	0003      	movs	r3, r0
    2840:	e055      	b.n	28ee <spi_init+0xde>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    2842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2844:	681b      	ldr	r3, [r3, #0]
    2846:	2201      	movs	r2, #1
    2848:	4013      	ands	r3, r2
    284a:	d001      	beq.n	2850 <spi_init+0x40>
		return STATUS_BUSY;
    284c:	2305      	movs	r3, #5
    284e:	e04e      	b.n	28ee <spi_init+0xde>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    2850:	68fb      	ldr	r3, [r7, #12]
    2852:	681b      	ldr	r3, [r3, #0]
    2854:	0018      	movs	r0, r3
    2856:	4b29      	ldr	r3, [pc, #164]	; (28fc <spi_init+0xec>)
    2858:	4798      	blx	r3
    285a:	0003      	movs	r3, r0
    285c:	623b      	str	r3, [r7, #32]
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    285e:	6a3b      	ldr	r3, [r7, #32]
    2860:	3302      	adds	r3, #2
    2862:	61fb      	str	r3, [r7, #28]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    2864:	6a3b      	ldr	r3, [r7, #32]
    2866:	3314      	adds	r3, #20
    2868:	61bb      	str	r3, [r7, #24]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    286a:	2201      	movs	r2, #1
    286c:	69fb      	ldr	r3, [r7, #28]
    286e:	409a      	lsls	r2, r3
    2870:	0013      	movs	r3, r2
    2872:	0019      	movs	r1, r3
    2874:	2002      	movs	r0, #2
    2876:	4b22      	ldr	r3, [pc, #136]	; (2900 <spi_init+0xf0>)
    2878:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    287a:	2314      	movs	r3, #20
    287c:	18fb      	adds	r3, r7, r3
    287e:	0018      	movs	r0, r3
    2880:	4b20      	ldr	r3, [pc, #128]	; (2904 <spi_init+0xf4>)
    2882:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    2884:	687b      	ldr	r3, [r7, #4]
    2886:	2224      	movs	r2, #36	; 0x24
    2888:	5c9a      	ldrb	r2, [r3, r2]
    288a:	2314      	movs	r3, #20
    288c:	18fb      	adds	r3, r7, r3
    288e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    2890:	69bb      	ldr	r3, [r7, #24]
    2892:	b2db      	uxtb	r3, r3
    2894:	2214      	movs	r2, #20
    2896:	18ba      	adds	r2, r7, r2
    2898:	0011      	movs	r1, r2
    289a:	0018      	movs	r0, r3
    289c:	4b1a      	ldr	r3, [pc, #104]	; (2908 <spi_init+0xf8>)
    289e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    28a0:	69bb      	ldr	r3, [r7, #24]
    28a2:	b2db      	uxtb	r3, r3
    28a4:	0018      	movs	r0, r3
    28a6:	4b19      	ldr	r3, [pc, #100]	; (290c <spi_init+0xfc>)
    28a8:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    28aa:	687b      	ldr	r3, [r7, #4]
    28ac:	2224      	movs	r2, #36	; 0x24
    28ae:	5c9b      	ldrb	r3, [r3, r2]
    28b0:	2100      	movs	r1, #0
    28b2:	0018      	movs	r0, r3
    28b4:	4b16      	ldr	r3, [pc, #88]	; (2910 <spi_init+0x100>)
    28b6:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    28b8:	687b      	ldr	r3, [r7, #4]
    28ba:	781b      	ldrb	r3, [r3, #0]
    28bc:	2b01      	cmp	r3, #1
    28be:	d105      	bne.n	28cc <spi_init+0xbc>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    28c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    28c2:	681b      	ldr	r3, [r3, #0]
    28c4:	220c      	movs	r2, #12
    28c6:	431a      	orrs	r2, r3
    28c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    28ca:	601a      	str	r2, [r3, #0]
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    28cc:	687b      	ldr	r3, [r7, #4]
    28ce:	781b      	ldrb	r3, [r3, #0]
    28d0:	2b00      	cmp	r3, #0
    28d2:	d105      	bne.n	28e0 <spi_init+0xd0>
		/* Set the SERCOM in SPI slave mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    28d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    28d6:	681b      	ldr	r3, [r3, #0]
    28d8:	2208      	movs	r2, #8
    28da:	431a      	orrs	r2, r3
    28dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    28de:	601a      	str	r2, [r3, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
    28e0:	687a      	ldr	r2, [r7, #4]
    28e2:	68fb      	ldr	r3, [r7, #12]
    28e4:	0011      	movs	r1, r2
    28e6:	0018      	movs	r0, r3
    28e8:	4b0a      	ldr	r3, [pc, #40]	; (2914 <spi_init+0x104>)
    28ea:	4798      	blx	r3
    28ec:	0003      	movs	r3, r0
}
    28ee:	0018      	movs	r0, r3
    28f0:	46bd      	mov	sp, r7
    28f2:	b00a      	add	sp, #40	; 0x28
    28f4:	bd80      	pop	{r7, pc}
    28f6:	46c0      	nop			; (mov r8, r8)
    28f8:	000025dd 	.word	0x000025dd
    28fc:	00000f59 	.word	0x00000f59
    2900:	000021ad 	.word	0x000021ad
    2904:	00002195 	.word	0x00002195
    2908:	00003765 	.word	0x00003765
    290c:	000037a9 	.word	0x000037a9
    2910:	00000d11 	.word	0x00000d11
    2914:	0000238d 	.word	0x0000238d

00002918 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    2918:	b590      	push	{r4, r7, lr}
    291a:	b089      	sub	sp, #36	; 0x24
    291c:	af00      	add	r7, sp, #0
    291e:	60f8      	str	r0, [r7, #12]
    2920:	60b9      	str	r1, [r7, #8]
    2922:	0019      	movs	r1, r3
    2924:	1dbb      	adds	r3, r7, #6
    2926:	801a      	strh	r2, [r3, #0]
    2928:	1d3b      	adds	r3, r7, #4
    292a:	1c0a      	adds	r2, r1, #0
    292c:	801a      	strh	r2, [r3, #0]
		return STATUS_BUSY;
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
    292e:	1dbb      	adds	r3, r7, #6
    2930:	881b      	ldrh	r3, [r3, #0]
    2932:	2b00      	cmp	r3, #0
    2934:	d101      	bne.n	293a <spi_read_buffer_wait+0x22>
		return STATUS_ERR_INVALID_ARG;
    2936:	2317      	movs	r3, #23
    2938:	e0b2      	b.n	2aa0 <spi_read_buffer_wait+0x188>
	}

	if (!(module->receiver_enabled)) {
    293a:	68fb      	ldr	r3, [r7, #12]
    293c:	79db      	ldrb	r3, [r3, #7]
    293e:	2201      	movs	r2, #1
    2940:	4053      	eors	r3, r2
    2942:	b2db      	uxtb	r3, r3
    2944:	2b00      	cmp	r3, #0
    2946:	d001      	beq.n	294c <spi_read_buffer_wait+0x34>
		return STATUS_ERR_DENIED;
    2948:	231c      	movs	r3, #28
    294a:	e0a9      	b.n	2aa0 <spi_read_buffer_wait+0x188>
	}
#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    294c:	68fb      	ldr	r3, [r7, #12]
    294e:	795b      	ldrb	r3, [r3, #5]
    2950:	2b00      	cmp	r3, #0
    2952:	d109      	bne.n	2968 <spi_read_buffer_wait+0x50>
    2954:	68fb      	ldr	r3, [r7, #12]
    2956:	0018      	movs	r0, r3
    2958:	4b53      	ldr	r3, [pc, #332]	; (2aa8 <spi_read_buffer_wait+0x190>)
    295a:	4798      	blx	r3
    295c:	1e03      	subs	r3, r0, #0
    295e:	d003      	beq.n	2968 <spi_read_buffer_wait+0x50>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
    2960:	68fb      	ldr	r3, [r7, #12]
    2962:	0018      	movs	r0, r3
    2964:	4b51      	ldr	r3, [pc, #324]	; (2aac <spi_read_buffer_wait+0x194>)
    2966:	4798      	blx	r3
	}
#  endif
	uint16_t rx_pos = 0;
    2968:	231e      	movs	r3, #30
    296a:	18fb      	adds	r3, r7, r3
    296c:	2200      	movs	r2, #0
    296e:	801a      	strh	r2, [r3, #0]

	while (length--) {
    2970:	e08d      	b.n	2a8e <spi_read_buffer_wait+0x176>
#  if CONF_SPI_MASTER_ENABLE == true
		if (module->mode == SPI_MODE_MASTER) {
    2972:	68fb      	ldr	r3, [r7, #12]
    2974:	795b      	ldrb	r3, [r3, #5]
    2976:	2b01      	cmp	r3, #1
    2978:	d112      	bne.n	29a0 <spi_read_buffer_wait+0x88>
			/* Wait until the module is ready to write a character */
			while (!spi_is_ready_to_write(module)) {
    297a:	46c0      	nop			; (mov r8, r8)
    297c:	68fb      	ldr	r3, [r7, #12]
    297e:	0018      	movs	r0, r3
    2980:	4b4b      	ldr	r3, [pc, #300]	; (2ab0 <spi_read_buffer_wait+0x198>)
    2982:	4798      	blx	r3
    2984:	0003      	movs	r3, r0
    2986:	001a      	movs	r2, r3
    2988:	2301      	movs	r3, #1
    298a:	4053      	eors	r3, r2
    298c:	b2db      	uxtb	r3, r3
    298e:	2b00      	cmp	r3, #0
    2990:	d1f4      	bne.n	297c <spi_read_buffer_wait+0x64>
			}

			/* Send dummy SPI character to read in master mode */
			spi_write(module, dummy);
    2992:	1d3b      	adds	r3, r7, #4
    2994:	881a      	ldrh	r2, [r3, #0]
    2996:	68fb      	ldr	r3, [r7, #12]
    2998:	0011      	movs	r1, r2
    299a:	0018      	movs	r0, r3
    299c:	4b45      	ldr	r3, [pc, #276]	; (2ab4 <spi_read_buffer_wait+0x19c>)
    299e:	4798      	blx	r3
		}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
    29a0:	68fb      	ldr	r3, [r7, #12]
    29a2:	795b      	ldrb	r3, [r3, #5]
    29a4:	2b00      	cmp	r3, #0
    29a6:	d12a      	bne.n	29fe <spi_read_buffer_wait+0xe6>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    29a8:	2300      	movs	r3, #0
    29aa:	61bb      	str	r3, [r7, #24]
    29ac:	e008      	b.n	29c0 <spi_read_buffer_wait+0xa8>
				if (spi_is_ready_to_read(module)) {
    29ae:	68fb      	ldr	r3, [r7, #12]
    29b0:	0018      	movs	r0, r3
    29b2:	4b41      	ldr	r3, [pc, #260]	; (2ab8 <spi_read_buffer_wait+0x1a0>)
    29b4:	4798      	blx	r3
    29b6:	1e03      	subs	r3, r0, #0
    29b8:	d107      	bne.n	29ca <spi_read_buffer_wait+0xb2>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    29ba:	69bb      	ldr	r3, [r7, #24]
    29bc:	3301      	adds	r3, #1
    29be:	61bb      	str	r3, [r7, #24]
    29c0:	69bb      	ldr	r3, [r7, #24]
    29c2:	4a3e      	ldr	r2, [pc, #248]	; (2abc <spi_read_buffer_wait+0x1a4>)
    29c4:	4293      	cmp	r3, r2
    29c6:	d9f2      	bls.n	29ae <spi_read_buffer_wait+0x96>
    29c8:	e000      	b.n	29cc <spi_read_buffer_wait+0xb4>
					break;
    29ca:	46c0      	nop			; (mov r8, r8)
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
    29cc:	68fb      	ldr	r3, [r7, #12]
    29ce:	0018      	movs	r0, r3
    29d0:	4b35      	ldr	r3, [pc, #212]	; (2aa8 <spi_read_buffer_wait+0x190>)
    29d2:	4798      	blx	r3
    29d4:	1e03      	subs	r3, r0, #0
    29d6:	d005      	beq.n	29e4 <spi_read_buffer_wait+0xcc>
				_spi_clear_tx_complete_flag(module);
    29d8:	68fb      	ldr	r3, [r7, #12]
    29da:	0018      	movs	r0, r3
    29dc:	4b33      	ldr	r3, [pc, #204]	; (2aac <spi_read_buffer_wait+0x194>)
    29de:	4798      	blx	r3
				return STATUS_ABORTED;
    29e0:	2304      	movs	r3, #4
    29e2:	e05d      	b.n	2aa0 <spi_read_buffer_wait+0x188>
			}

			if (!spi_is_ready_to_read(module)) {
    29e4:	68fb      	ldr	r3, [r7, #12]
    29e6:	0018      	movs	r0, r3
    29e8:	4b33      	ldr	r3, [pc, #204]	; (2ab8 <spi_read_buffer_wait+0x1a0>)
    29ea:	4798      	blx	r3
    29ec:	0003      	movs	r3, r0
    29ee:	001a      	movs	r2, r3
    29f0:	2301      	movs	r3, #1
    29f2:	4053      	eors	r3, r2
    29f4:	b2db      	uxtb	r3, r3
    29f6:	2b00      	cmp	r3, #0
    29f8:	d001      	beq.n	29fe <spi_read_buffer_wait+0xe6>
				/* Not ready to read data within timeout period */
				return STATUS_ERR_TIMEOUT;
    29fa:	2312      	movs	r3, #18
    29fc:	e050      	b.n	2aa0 <spi_read_buffer_wait+0x188>
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
    29fe:	46c0      	nop			; (mov r8, r8)
    2a00:	68fb      	ldr	r3, [r7, #12]
    2a02:	0018      	movs	r0, r3
    2a04:	4b2c      	ldr	r3, [pc, #176]	; (2ab8 <spi_read_buffer_wait+0x1a0>)
    2a06:	4798      	blx	r3
    2a08:	0003      	movs	r3, r0
    2a0a:	001a      	movs	r2, r3
    2a0c:	2301      	movs	r3, #1
    2a0e:	4053      	eors	r3, r2
    2a10:	b2db      	uxtb	r3, r3
    2a12:	2b00      	cmp	r3, #0
    2a14:	d1f4      	bne.n	2a00 <spi_read_buffer_wait+0xe8>
		}

		uint16_t received_data = 0;
    2a16:	2314      	movs	r3, #20
    2a18:	18fb      	adds	r3, r7, r3
    2a1a:	2200      	movs	r2, #0
    2a1c:	801a      	strh	r2, [r3, #0]
		enum status_code retval = spi_read(module, &received_data);
    2a1e:	2317      	movs	r3, #23
    2a20:	18fc      	adds	r4, r7, r3
    2a22:	2314      	movs	r3, #20
    2a24:	18fa      	adds	r2, r7, r3
    2a26:	68fb      	ldr	r3, [r7, #12]
    2a28:	0011      	movs	r1, r2
    2a2a:	0018      	movs	r0, r3
    2a2c:	4b24      	ldr	r3, [pc, #144]	; (2ac0 <spi_read_buffer_wait+0x1a8>)
    2a2e:	4798      	blx	r3
    2a30:	0003      	movs	r3, r0
    2a32:	7023      	strb	r3, [r4, #0]

		if (retval != STATUS_OK) {
    2a34:	2317      	movs	r3, #23
    2a36:	18fb      	adds	r3, r7, r3
    2a38:	781b      	ldrb	r3, [r3, #0]
    2a3a:	2b00      	cmp	r3, #0
    2a3c:	d003      	beq.n	2a46 <spi_read_buffer_wait+0x12e>
			/* Overflow, abort */
			return retval;
    2a3e:	2317      	movs	r3, #23
    2a40:	18fb      	adds	r3, r7, r3
    2a42:	781b      	ldrb	r3, [r3, #0]
    2a44:	e02c      	b.n	2aa0 <spi_read_buffer_wait+0x188>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    2a46:	231e      	movs	r3, #30
    2a48:	18fb      	adds	r3, r7, r3
    2a4a:	881b      	ldrh	r3, [r3, #0]
    2a4c:	221e      	movs	r2, #30
    2a4e:	18ba      	adds	r2, r7, r2
    2a50:	1c59      	adds	r1, r3, #1
    2a52:	8011      	strh	r1, [r2, #0]
    2a54:	001a      	movs	r2, r3
    2a56:	68bb      	ldr	r3, [r7, #8]
    2a58:	189b      	adds	r3, r3, r2
    2a5a:	2214      	movs	r2, #20
    2a5c:	18ba      	adds	r2, r7, r2
    2a5e:	8812      	ldrh	r2, [r2, #0]
    2a60:	b2d2      	uxtb	r2, r2
    2a62:	701a      	strb	r2, [r3, #0]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2a64:	68fb      	ldr	r3, [r7, #12]
    2a66:	799b      	ldrb	r3, [r3, #6]
    2a68:	2b01      	cmp	r3, #1
    2a6a:	d110      	bne.n	2a8e <spi_read_buffer_wait+0x176>
			rx_data[rx_pos++] = (received_data >> 8);
    2a6c:	231e      	movs	r3, #30
    2a6e:	18fb      	adds	r3, r7, r3
    2a70:	881b      	ldrh	r3, [r3, #0]
    2a72:	221e      	movs	r2, #30
    2a74:	18ba      	adds	r2, r7, r2
    2a76:	1c59      	adds	r1, r3, #1
    2a78:	8011      	strh	r1, [r2, #0]
    2a7a:	001a      	movs	r2, r3
    2a7c:	68bb      	ldr	r3, [r7, #8]
    2a7e:	189b      	adds	r3, r3, r2
    2a80:	2214      	movs	r2, #20
    2a82:	18ba      	adds	r2, r7, r2
    2a84:	8812      	ldrh	r2, [r2, #0]
    2a86:	0a12      	lsrs	r2, r2, #8
    2a88:	b292      	uxth	r2, r2
    2a8a:	b2d2      	uxtb	r2, r2
    2a8c:	701a      	strb	r2, [r3, #0]
	while (length--) {
    2a8e:	1dbb      	adds	r3, r7, #6
    2a90:	881b      	ldrh	r3, [r3, #0]
    2a92:	1dba      	adds	r2, r7, #6
    2a94:	1e59      	subs	r1, r3, #1
    2a96:	8011      	strh	r1, [r2, #0]
    2a98:	2b00      	cmp	r3, #0
    2a9a:	d000      	beq.n	2a9e <spi_read_buffer_wait+0x186>
    2a9c:	e769      	b.n	2972 <spi_read_buffer_wait+0x5a>
		}
	}

	return STATUS_OK;
    2a9e:	2300      	movs	r3, #0
}
    2aa0:	0018      	movs	r0, r3
    2aa2:	46bd      	mov	sp, r7
    2aa4:	b009      	add	sp, #36	; 0x24
    2aa6:	bd90      	pop	{r4, r7, pc}
    2aa8:	00002229 	.word	0x00002229
    2aac:	00002371 	.word	0x00002371
    2ab0:	00002251 	.word	0x00002251
    2ab4:	000022a1 	.word	0x000022a1
    2ab8:	00002279 	.word	0x00002279
    2abc:	00002710 	.word	0x00002710
    2ac0:	000022e9 	.word	0x000022e9

00002ac4 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    2ac4:	b580      	push	{r7, lr}
    2ac6:	b086      	sub	sp, #24
    2ac8:	af00      	add	r7, sp, #0
    2aca:	60f8      	str	r0, [r7, #12]
    2acc:	60b9      	str	r1, [r7, #8]
    2ace:	1dfb      	adds	r3, r7, #7
    2ad0:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    2ad2:	68fb      	ldr	r3, [r7, #12]
    2ad4:	795b      	ldrb	r3, [r3, #5]
    2ad6:	2b01      	cmp	r3, #1
    2ad8:	d001      	beq.n	2ade <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
    2ada:	2315      	movs	r3, #21
    2adc:	e05c      	b.n	2b98 <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    2ade:	68fb      	ldr	r3, [r7, #12]
    2ae0:	7a1b      	ldrb	r3, [r3, #8]
    2ae2:	2201      	movs	r2, #1
    2ae4:	4053      	eors	r3, r2
    2ae6:	b2db      	uxtb	r3, r3
    2ae8:	2b00      	cmp	r3, #0
    2aea:	d054      	beq.n	2b96 <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
    2aec:	1dfb      	adds	r3, r7, #7
    2aee:	781b      	ldrb	r3, [r3, #0]
    2af0:	2b00      	cmp	r3, #0
    2af2:	d04a      	beq.n	2b8a <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
    2af4:	68bb      	ldr	r3, [r7, #8]
    2af6:	785b      	ldrb	r3, [r3, #1]
    2af8:	2b00      	cmp	r3, #0
    2afa:	d03f      	beq.n	2b7c <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
    2afc:	68fb      	ldr	r3, [r7, #12]
    2afe:	0018      	movs	r0, r3
    2b00:	4b27      	ldr	r3, [pc, #156]	; (2ba0 <spi_select_slave+0xdc>)
    2b02:	4798      	blx	r3
    2b04:	0003      	movs	r3, r0
    2b06:	001a      	movs	r2, r3
    2b08:	2301      	movs	r3, #1
    2b0a:	4053      	eors	r3, r2
    2b0c:	b2db      	uxtb	r3, r3
    2b0e:	2b00      	cmp	r3, #0
    2b10:	d007      	beq.n	2b22 <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
    2b12:	68bb      	ldr	r3, [r7, #8]
    2b14:	781b      	ldrb	r3, [r3, #0]
    2b16:	2101      	movs	r1, #1
    2b18:	0018      	movs	r0, r3
    2b1a:	4b22      	ldr	r3, [pc, #136]	; (2ba4 <spi_select_slave+0xe0>)
    2b1c:	4798      	blx	r3
					return STATUS_BUSY;
    2b1e:	2305      	movs	r3, #5
    2b20:	e03a      	b.n	2b98 <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    2b22:	68bb      	ldr	r3, [r7, #8]
    2b24:	781b      	ldrb	r3, [r3, #0]
    2b26:	2100      	movs	r1, #0
    2b28:	0018      	movs	r0, r3
    2b2a:	4b1e      	ldr	r3, [pc, #120]	; (2ba4 <spi_select_slave+0xe0>)
    2b2c:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
    2b2e:	68bb      	ldr	r3, [r7, #8]
    2b30:	789b      	ldrb	r3, [r3, #2]
    2b32:	b29a      	uxth	r2, r3
    2b34:	68fb      	ldr	r3, [r7, #12]
    2b36:	0011      	movs	r1, r2
    2b38:	0018      	movs	r0, r3
    2b3a:	4b1b      	ldr	r3, [pc, #108]	; (2ba8 <spi_select_slave+0xe4>)
    2b3c:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
    2b3e:	68fb      	ldr	r3, [r7, #12]
    2b40:	79db      	ldrb	r3, [r3, #7]
    2b42:	2201      	movs	r2, #1
    2b44:	4053      	eors	r3, r2
    2b46:	b2db      	uxtb	r3, r3
    2b48:	2b00      	cmp	r3, #0
    2b4a:	d024      	beq.n	2b96 <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
    2b4c:	46c0      	nop			; (mov r8, r8)
    2b4e:	68fb      	ldr	r3, [r7, #12]
    2b50:	0018      	movs	r0, r3
    2b52:	4b16      	ldr	r3, [pc, #88]	; (2bac <spi_select_slave+0xe8>)
    2b54:	4798      	blx	r3
    2b56:	0003      	movs	r3, r0
    2b58:	001a      	movs	r2, r3
    2b5a:	2301      	movs	r3, #1
    2b5c:	4053      	eors	r3, r2
    2b5e:	b2db      	uxtb	r3, r3
    2b60:	2b00      	cmp	r3, #0
    2b62:	d1f4      	bne.n	2b4e <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
    2b64:	2316      	movs	r3, #22
    2b66:	18fb      	adds	r3, r7, r3
    2b68:	2200      	movs	r2, #0
    2b6a:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
    2b6c:	2316      	movs	r3, #22
    2b6e:	18fa      	adds	r2, r7, r3
    2b70:	68fb      	ldr	r3, [r7, #12]
    2b72:	0011      	movs	r1, r2
    2b74:	0018      	movs	r0, r3
    2b76:	4b0e      	ldr	r3, [pc, #56]	; (2bb0 <spi_select_slave+0xec>)
    2b78:	4798      	blx	r3
    2b7a:	e00c      	b.n	2b96 <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    2b7c:	68bb      	ldr	r3, [r7, #8]
    2b7e:	781b      	ldrb	r3, [r3, #0]
    2b80:	2100      	movs	r1, #0
    2b82:	0018      	movs	r0, r3
    2b84:	4b07      	ldr	r3, [pc, #28]	; (2ba4 <spi_select_slave+0xe0>)
    2b86:	4798      	blx	r3
    2b88:	e005      	b.n	2b96 <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
    2b8a:	68bb      	ldr	r3, [r7, #8]
    2b8c:	781b      	ldrb	r3, [r3, #0]
    2b8e:	2101      	movs	r1, #1
    2b90:	0018      	movs	r0, r3
    2b92:	4b04      	ldr	r3, [pc, #16]	; (2ba4 <spi_select_slave+0xe0>)
    2b94:	4798      	blx	r3
		}
	}
	return STATUS_OK;
    2b96:	2300      	movs	r3, #0
}
    2b98:	0018      	movs	r0, r3
    2b9a:	46bd      	mov	sp, r7
    2b9c:	b006      	add	sp, #24
    2b9e:	bd80      	pop	{r7, pc}
    2ba0:	00002251 	.word	0x00002251
    2ba4:	00002141 	.word	0x00002141
    2ba8:	000022a1 	.word	0x000022a1
    2bac:	00002279 	.word	0x00002279
    2bb0:	000022e9 	.word	0x000022e9

00002bb4 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    2bb4:	b580      	push	{r7, lr}
    2bb6:	b08a      	sub	sp, #40	; 0x28
    2bb8:	af00      	add	r7, sp, #0
    2bba:	60f8      	str	r0, [r7, #12]
    2bbc:	60b9      	str	r1, [r7, #8]
    2bbe:	1dbb      	adds	r3, r7, #6
    2bc0:	801a      	strh	r2, [r3, #0]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
	}
#  endif

	if (length == 0) {
    2bc2:	1dbb      	adds	r3, r7, #6
    2bc4:	881b      	ldrh	r3, [r3, #0]
    2bc6:	2b00      	cmp	r3, #0
    2bc8:	d101      	bne.n	2bce <spi_write_buffer_wait+0x1a>
		return STATUS_ERR_INVALID_ARG;
    2bca:	2317      	movs	r3, #23
    2bcc:	e16a      	b.n	2ea4 <spi_write_buffer_wait+0x2f0>
	}

#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    2bce:	68fb      	ldr	r3, [r7, #12]
    2bd0:	795b      	ldrb	r3, [r3, #5]
    2bd2:	2b00      	cmp	r3, #0
    2bd4:	d109      	bne.n	2bea <spi_write_buffer_wait+0x36>
    2bd6:	68fb      	ldr	r3, [r7, #12]
    2bd8:	0018      	movs	r0, r3
    2bda:	4bb4      	ldr	r3, [pc, #720]	; (2eac <spi_write_buffer_wait+0x2f8>)
    2bdc:	4798      	blx	r3
    2bde:	1e03      	subs	r3, r0, #0
    2be0:	d003      	beq.n	2bea <spi_write_buffer_wait+0x36>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
    2be2:	68fb      	ldr	r3, [r7, #12]
    2be4:	0018      	movs	r0, r3
    2be6:	4bb2      	ldr	r3, [pc, #712]	; (2eb0 <spi_write_buffer_wait+0x2fc>)
    2be8:	4798      	blx	r3
	}
#  endif

	uint16_t tx_pos = 0;
    2bea:	2326      	movs	r3, #38	; 0x26
    2bec:	18fb      	adds	r3, r7, r3
    2bee:	2200      	movs	r2, #0
    2bf0:	801a      	strh	r2, [r3, #0]
	uint16_t flush_length = length;
    2bf2:	2324      	movs	r3, #36	; 0x24
    2bf4:	18fb      	adds	r3, r7, r3
    2bf6:	1dba      	adds	r2, r7, #6
    2bf8:	8812      	ldrh	r2, [r2, #0]
    2bfa:	801a      	strh	r2, [r3, #0]

	/* Write block */
	while (length--) {
    2bfc:	e0fe      	b.n	2dfc <spi_write_buffer_wait+0x248>
#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
    2bfe:	68fb      	ldr	r3, [r7, #12]
    2c00:	795b      	ldrb	r3, [r3, #5]
    2c02:	2b00      	cmp	r3, #0
    2c04:	d12a      	bne.n	2c5c <spi_write_buffer_wait+0xa8>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    2c06:	2300      	movs	r3, #0
    2c08:	623b      	str	r3, [r7, #32]
    2c0a:	e008      	b.n	2c1e <spi_write_buffer_wait+0x6a>
				if (spi_is_ready_to_write(module)) {
    2c0c:	68fb      	ldr	r3, [r7, #12]
    2c0e:	0018      	movs	r0, r3
    2c10:	4ba8      	ldr	r3, [pc, #672]	; (2eb4 <spi_write_buffer_wait+0x300>)
    2c12:	4798      	blx	r3
    2c14:	1e03      	subs	r3, r0, #0
    2c16:	d107      	bne.n	2c28 <spi_write_buffer_wait+0x74>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    2c18:	6a3b      	ldr	r3, [r7, #32]
    2c1a:	3301      	adds	r3, #1
    2c1c:	623b      	str	r3, [r7, #32]
    2c1e:	6a3b      	ldr	r3, [r7, #32]
    2c20:	4aa5      	ldr	r2, [pc, #660]	; (2eb8 <spi_write_buffer_wait+0x304>)
    2c22:	4293      	cmp	r3, r2
    2c24:	d9f2      	bls.n	2c0c <spi_write_buffer_wait+0x58>
    2c26:	e000      	b.n	2c2a <spi_write_buffer_wait+0x76>
					break;
    2c28:	46c0      	nop			; (mov r8, r8)
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
    2c2a:	68fb      	ldr	r3, [r7, #12]
    2c2c:	0018      	movs	r0, r3
    2c2e:	4b9f      	ldr	r3, [pc, #636]	; (2eac <spi_write_buffer_wait+0x2f8>)
    2c30:	4798      	blx	r3
    2c32:	1e03      	subs	r3, r0, #0
    2c34:	d005      	beq.n	2c42 <spi_write_buffer_wait+0x8e>
				_spi_clear_tx_complete_flag(module);
    2c36:	68fb      	ldr	r3, [r7, #12]
    2c38:	0018      	movs	r0, r3
    2c3a:	4b9d      	ldr	r3, [pc, #628]	; (2eb0 <spi_write_buffer_wait+0x2fc>)
    2c3c:	4798      	blx	r3
				return STATUS_ABORTED;
    2c3e:	2304      	movs	r3, #4
    2c40:	e130      	b.n	2ea4 <spi_write_buffer_wait+0x2f0>
			}

			if (!spi_is_ready_to_write(module)) {
    2c42:	68fb      	ldr	r3, [r7, #12]
    2c44:	0018      	movs	r0, r3
    2c46:	4b9b      	ldr	r3, [pc, #620]	; (2eb4 <spi_write_buffer_wait+0x300>)
    2c48:	4798      	blx	r3
    2c4a:	0003      	movs	r3, r0
    2c4c:	001a      	movs	r2, r3
    2c4e:	2301      	movs	r3, #1
    2c50:	4053      	eors	r3, r2
    2c52:	b2db      	uxtb	r3, r3
    2c54:	2b00      	cmp	r3, #0
    2c56:	d001      	beq.n	2c5c <spi_write_buffer_wait+0xa8>
				/* Not ready to write data within timeout period */
				return STATUS_ERR_TIMEOUT;
    2c58:	2312      	movs	r3, #18
    2c5a:	e123      	b.n	2ea4 <spi_write_buffer_wait+0x2f0>
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
    2c5c:	46c0      	nop			; (mov r8, r8)
    2c5e:	68fb      	ldr	r3, [r7, #12]
    2c60:	0018      	movs	r0, r3
    2c62:	4b94      	ldr	r3, [pc, #592]	; (2eb4 <spi_write_buffer_wait+0x300>)
    2c64:	4798      	blx	r3
    2c66:	0003      	movs	r3, r0
    2c68:	001a      	movs	r2, r3
    2c6a:	2301      	movs	r3, #1
    2c6c:	4053      	eors	r3, r2
    2c6e:	b2db      	uxtb	r3, r3
    2c70:	2b00      	cmp	r3, #0
    2c72:	d1f4      	bne.n	2c5e <spi_write_buffer_wait+0xaa>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
    2c74:	2326      	movs	r3, #38	; 0x26
    2c76:	18fb      	adds	r3, r7, r3
    2c78:	881b      	ldrh	r3, [r3, #0]
    2c7a:	2226      	movs	r2, #38	; 0x26
    2c7c:	18ba      	adds	r2, r7, r2
    2c7e:	1c59      	adds	r1, r3, #1
    2c80:	8011      	strh	r1, [r2, #0]
    2c82:	001a      	movs	r2, r3
    2c84:	68bb      	ldr	r3, [r7, #8]
    2c86:	189b      	adds	r3, r3, r2
    2c88:	781a      	ldrb	r2, [r3, #0]
    2c8a:	231e      	movs	r3, #30
    2c8c:	18fb      	adds	r3, r7, r3
    2c8e:	801a      	strh	r2, [r3, #0]

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2c90:	68fb      	ldr	r3, [r7, #12]
    2c92:	799b      	ldrb	r3, [r3, #6]
    2c94:	2b01      	cmp	r3, #1
    2c96:	d115      	bne.n	2cc4 <spi_write_buffer_wait+0x110>
			data_to_send |= (tx_data[tx_pos++] << 8);
    2c98:	2326      	movs	r3, #38	; 0x26
    2c9a:	18fb      	adds	r3, r7, r3
    2c9c:	881b      	ldrh	r3, [r3, #0]
    2c9e:	2226      	movs	r2, #38	; 0x26
    2ca0:	18ba      	adds	r2, r7, r2
    2ca2:	1c59      	adds	r1, r3, #1
    2ca4:	8011      	strh	r1, [r2, #0]
    2ca6:	001a      	movs	r2, r3
    2ca8:	68bb      	ldr	r3, [r7, #8]
    2caa:	189b      	adds	r3, r3, r2
    2cac:	781b      	ldrb	r3, [r3, #0]
    2cae:	021b      	lsls	r3, r3, #8
    2cb0:	b21a      	sxth	r2, r3
    2cb2:	231e      	movs	r3, #30
    2cb4:	18fb      	adds	r3, r7, r3
    2cb6:	2100      	movs	r1, #0
    2cb8:	5e5b      	ldrsh	r3, [r3, r1]
    2cba:	4313      	orrs	r3, r2
    2cbc:	b21a      	sxth	r2, r3
    2cbe:	231e      	movs	r3, #30
    2cc0:	18fb      	adds	r3, r7, r3
    2cc2:	801a      	strh	r2, [r3, #0]
		}

		/* Write the data to send */
		spi_write(module, data_to_send);
    2cc4:	231e      	movs	r3, #30
    2cc6:	18fb      	adds	r3, r7, r3
    2cc8:	881a      	ldrh	r2, [r3, #0]
    2cca:	68fb      	ldr	r3, [r7, #12]
    2ccc:	0011      	movs	r1, r2
    2cce:	0018      	movs	r0, r3
    2cd0:	4b7a      	ldr	r3, [pc, #488]	; (2ebc <spi_write_buffer_wait+0x308>)
    2cd2:	4798      	blx	r3

		if (module->receiver_enabled) {
    2cd4:	68fb      	ldr	r3, [r7, #12]
    2cd6:	79db      	ldrb	r3, [r3, #7]
    2cd8:	2224      	movs	r2, #36	; 0x24
    2cda:	18ba      	adds	r2, r7, r2
    2cdc:	2124      	movs	r1, #36	; 0x24
    2cde:	1879      	adds	r1, r7, r1
    2ce0:	8809      	ldrh	r1, [r1, #0]
    2ce2:	8011      	strh	r1, [r2, #0]
    2ce4:	2b00      	cmp	r3, #0
    2ce6:	d100      	bne.n	2cea <spi_write_buffer_wait+0x136>
    2ce8:	e088      	b.n	2dfc <spi_write_buffer_wait+0x248>
#  if CONF_SPI_SLAVE_ENABLE == true
			/* Start timeout period for slave */
			if (module->mode == SPI_MODE_SLAVE) {
    2cea:	68fb      	ldr	r3, [r7, #12]
    2cec:	795b      	ldrb	r3, [r3, #5]
    2cee:	2b00      	cmp	r3, #0
    2cf0:	d000      	beq.n	2cf4 <spi_write_buffer_wait+0x140>
    2cf2:	e069      	b.n	2dc8 <spi_write_buffer_wait+0x214>
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    2cf4:	2300      	movs	r3, #0
    2cf6:	61bb      	str	r3, [r7, #24]
    2cf8:	e047      	b.n	2d8a <spi_write_buffer_wait+0x1d6>
					if (length && spi_is_ready_to_write(module)) {
    2cfa:	1dbb      	adds	r3, r7, #6
    2cfc:	881b      	ldrh	r3, [r3, #0]
    2cfe:	2b00      	cmp	r3, #0
    2d00:	d03a      	beq.n	2d78 <spi_write_buffer_wait+0x1c4>
    2d02:	68fb      	ldr	r3, [r7, #12]
    2d04:	0018      	movs	r0, r3
    2d06:	4b6b      	ldr	r3, [pc, #428]	; (2eb4 <spi_write_buffer_wait+0x300>)
    2d08:	4798      	blx	r3
    2d0a:	1e03      	subs	r3, r0, #0
    2d0c:	d034      	beq.n	2d78 <spi_write_buffer_wait+0x1c4>
						data_to_send = tx_data[tx_pos++];
    2d0e:	2326      	movs	r3, #38	; 0x26
    2d10:	18fb      	adds	r3, r7, r3
    2d12:	881b      	ldrh	r3, [r3, #0]
    2d14:	2226      	movs	r2, #38	; 0x26
    2d16:	18ba      	adds	r2, r7, r2
    2d18:	1c59      	adds	r1, r3, #1
    2d1a:	8011      	strh	r1, [r2, #0]
    2d1c:	001a      	movs	r2, r3
    2d1e:	68bb      	ldr	r3, [r7, #8]
    2d20:	189b      	adds	r3, r3, r2
    2d22:	781a      	ldrb	r2, [r3, #0]
    2d24:	231e      	movs	r3, #30
    2d26:	18fb      	adds	r3, r7, r3
    2d28:	801a      	strh	r2, [r3, #0]
						/* If 9-bit data, get next byte to send from the buffer */
						if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2d2a:	68fb      	ldr	r3, [r7, #12]
    2d2c:	799b      	ldrb	r3, [r3, #6]
    2d2e:	2b01      	cmp	r3, #1
    2d30:	d115      	bne.n	2d5e <spi_write_buffer_wait+0x1aa>
							data_to_send |= (tx_data[tx_pos++] << 8);
    2d32:	2326      	movs	r3, #38	; 0x26
    2d34:	18fb      	adds	r3, r7, r3
    2d36:	881b      	ldrh	r3, [r3, #0]
    2d38:	2226      	movs	r2, #38	; 0x26
    2d3a:	18ba      	adds	r2, r7, r2
    2d3c:	1c59      	adds	r1, r3, #1
    2d3e:	8011      	strh	r1, [r2, #0]
    2d40:	001a      	movs	r2, r3
    2d42:	68bb      	ldr	r3, [r7, #8]
    2d44:	189b      	adds	r3, r3, r2
    2d46:	781b      	ldrb	r3, [r3, #0]
    2d48:	021b      	lsls	r3, r3, #8
    2d4a:	b21a      	sxth	r2, r3
    2d4c:	231e      	movs	r3, #30
    2d4e:	18fb      	adds	r3, r7, r3
    2d50:	2100      	movs	r1, #0
    2d52:	5e5b      	ldrsh	r3, [r3, r1]
    2d54:	4313      	orrs	r3, r2
    2d56:	b21a      	sxth	r2, r3
    2d58:	231e      	movs	r3, #30
    2d5a:	18fb      	adds	r3, r7, r3
    2d5c:	801a      	strh	r2, [r3, #0]
						}

						/* Write the data to send */
						spi_write(module, data_to_send);
    2d5e:	231e      	movs	r3, #30
    2d60:	18fb      	adds	r3, r7, r3
    2d62:	881a      	ldrh	r2, [r3, #0]
    2d64:	68fb      	ldr	r3, [r7, #12]
    2d66:	0011      	movs	r1, r2
    2d68:	0018      	movs	r0, r3
    2d6a:	4b54      	ldr	r3, [pc, #336]	; (2ebc <spi_write_buffer_wait+0x308>)
    2d6c:	4798      	blx	r3
						length--;
    2d6e:	1dbb      	adds	r3, r7, #6
    2d70:	881a      	ldrh	r2, [r3, #0]
    2d72:	1dbb      	adds	r3, r7, #6
    2d74:	3a01      	subs	r2, #1
    2d76:	801a      	strh	r2, [r3, #0]
					}
					if (spi_is_ready_to_read(module)) {
    2d78:	68fb      	ldr	r3, [r7, #12]
    2d7a:	0018      	movs	r0, r3
    2d7c:	4b50      	ldr	r3, [pc, #320]	; (2ec0 <spi_write_buffer_wait+0x30c>)
    2d7e:	4798      	blx	r3
    2d80:	1e03      	subs	r3, r0, #0
    2d82:	d107      	bne.n	2d94 <spi_write_buffer_wait+0x1e0>
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    2d84:	69bb      	ldr	r3, [r7, #24]
    2d86:	3301      	adds	r3, #1
    2d88:	61bb      	str	r3, [r7, #24]
    2d8a:	69bb      	ldr	r3, [r7, #24]
    2d8c:	4a4a      	ldr	r2, [pc, #296]	; (2eb8 <spi_write_buffer_wait+0x304>)
    2d8e:	4293      	cmp	r3, r2
    2d90:	d9b3      	bls.n	2cfa <spi_write_buffer_wait+0x146>
    2d92:	e000      	b.n	2d96 <spi_write_buffer_wait+0x1e2>
						break;
    2d94:	46c0      	nop			; (mov r8, r8)
					}
				}

				/* Check if master has ended the transaction */
				if (spi_is_write_complete(module)) {
    2d96:	68fb      	ldr	r3, [r7, #12]
    2d98:	0018      	movs	r0, r3
    2d9a:	4b44      	ldr	r3, [pc, #272]	; (2eac <spi_write_buffer_wait+0x2f8>)
    2d9c:	4798      	blx	r3
    2d9e:	1e03      	subs	r3, r0, #0
    2da0:	d005      	beq.n	2dae <spi_write_buffer_wait+0x1fa>
					_spi_clear_tx_complete_flag(module);
    2da2:	68fb      	ldr	r3, [r7, #12]
    2da4:	0018      	movs	r0, r3
    2da6:	4b42      	ldr	r3, [pc, #264]	; (2eb0 <spi_write_buffer_wait+0x2fc>)
    2da8:	4798      	blx	r3
					return STATUS_ABORTED;
    2daa:	2304      	movs	r3, #4
    2dac:	e07a      	b.n	2ea4 <spi_write_buffer_wait+0x2f0>
				}

				if (!spi_is_ready_to_read(module)) {
    2dae:	68fb      	ldr	r3, [r7, #12]
    2db0:	0018      	movs	r0, r3
    2db2:	4b43      	ldr	r3, [pc, #268]	; (2ec0 <spi_write_buffer_wait+0x30c>)
    2db4:	4798      	blx	r3
    2db6:	0003      	movs	r3, r0
    2db8:	001a      	movs	r2, r3
    2dba:	2301      	movs	r3, #1
    2dbc:	4053      	eors	r3, r2
    2dbe:	b2db      	uxtb	r3, r3
    2dc0:	2b00      	cmp	r3, #0
    2dc2:	d001      	beq.n	2dc8 <spi_write_buffer_wait+0x214>
					/* Not ready to read data within timeout period */
					return STATUS_ERR_TIMEOUT;
    2dc4:	2312      	movs	r3, #18
    2dc6:	e06d      	b.n	2ea4 <spi_write_buffer_wait+0x2f0>
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
    2dc8:	46c0      	nop			; (mov r8, r8)
    2dca:	68fb      	ldr	r3, [r7, #12]
    2dcc:	0018      	movs	r0, r3
    2dce:	4b3c      	ldr	r3, [pc, #240]	; (2ec0 <spi_write_buffer_wait+0x30c>)
    2dd0:	4798      	blx	r3
    2dd2:	0003      	movs	r3, r0
    2dd4:	001a      	movs	r2, r3
    2dd6:	2301      	movs	r3, #1
    2dd8:	4053      	eors	r3, r2
    2dda:	b2db      	uxtb	r3, r3
    2ddc:	2b00      	cmp	r3, #0
    2dde:	d1f4      	bne.n	2dca <spi_write_buffer_wait+0x216>
			}

			/* Flush read buffer */
			uint16_t flush;
			spi_read(module, &flush);
    2de0:	2312      	movs	r3, #18
    2de2:	18fa      	adds	r2, r7, r3
    2de4:	68fb      	ldr	r3, [r7, #12]
    2de6:	0011      	movs	r1, r2
    2de8:	0018      	movs	r0, r3
    2dea:	4b36      	ldr	r3, [pc, #216]	; (2ec4 <spi_write_buffer_wait+0x310>)
    2dec:	4798      	blx	r3
			flush_length--;
    2dee:	2324      	movs	r3, #36	; 0x24
    2df0:	18fb      	adds	r3, r7, r3
    2df2:	881a      	ldrh	r2, [r3, #0]
    2df4:	2324      	movs	r3, #36	; 0x24
    2df6:	18fb      	adds	r3, r7, r3
    2df8:	3a01      	subs	r2, #1
    2dfa:	801a      	strh	r2, [r3, #0]
	while (length--) {
    2dfc:	1dbb      	adds	r3, r7, #6
    2dfe:	881b      	ldrh	r3, [r3, #0]
    2e00:	1dba      	adds	r2, r7, #6
    2e02:	1e59      	subs	r1, r3, #1
    2e04:	8011      	strh	r1, [r2, #0]
    2e06:	2b00      	cmp	r3, #0
    2e08:	d000      	beq.n	2e0c <spi_write_buffer_wait+0x258>
    2e0a:	e6f8      	b.n	2bfe <spi_write_buffer_wait+0x4a>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
    2e0c:	68fb      	ldr	r3, [r7, #12]
    2e0e:	795b      	ldrb	r3, [r3, #5]
    2e10:	2b01      	cmp	r3, #1
    2e12:	d10b      	bne.n	2e2c <spi_write_buffer_wait+0x278>
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
    2e14:	46c0      	nop			; (mov r8, r8)
    2e16:	68fb      	ldr	r3, [r7, #12]
    2e18:	0018      	movs	r0, r3
    2e1a:	4b24      	ldr	r3, [pc, #144]	; (2eac <spi_write_buffer_wait+0x2f8>)
    2e1c:	4798      	blx	r3
    2e1e:	0003      	movs	r3, r0
    2e20:	001a      	movs	r2, r3
    2e22:	2301      	movs	r3, #1
    2e24:	4053      	eors	r3, r2
    2e26:	b2db      	uxtb	r3, r3
    2e28:	2b00      	cmp	r3, #0
    2e2a:	d1f4      	bne.n	2e16 <spi_write_buffer_wait+0x262>
		}
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
    2e2c:	68fb      	ldr	r3, [r7, #12]
    2e2e:	795b      	ldrb	r3, [r3, #5]
    2e30:	2b00      	cmp	r3, #0
    2e32:	d136      	bne.n	2ea2 <spi_write_buffer_wait+0x2ee>
		if (module->receiver_enabled) {
    2e34:	68fb      	ldr	r3, [r7, #12]
    2e36:	79db      	ldrb	r3, [r3, #7]
    2e38:	2b00      	cmp	r3, #0
    2e3a:	d032      	beq.n	2ea2 <spi_write_buffer_wait+0x2ee>
			while (flush_length) {
    2e3c:	e02c      	b.n	2e98 <spi_write_buffer_wait+0x2e4>
				/* Start timeout period for slave */
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    2e3e:	2300      	movs	r3, #0
    2e40:	617b      	str	r3, [r7, #20]
    2e42:	e008      	b.n	2e56 <spi_write_buffer_wait+0x2a2>
					if (spi_is_ready_to_read(module)) {
    2e44:	68fb      	ldr	r3, [r7, #12]
    2e46:	0018      	movs	r0, r3
    2e48:	4b1d      	ldr	r3, [pc, #116]	; (2ec0 <spi_write_buffer_wait+0x30c>)
    2e4a:	4798      	blx	r3
    2e4c:	1e03      	subs	r3, r0, #0
    2e4e:	d107      	bne.n	2e60 <spi_write_buffer_wait+0x2ac>
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    2e50:	697b      	ldr	r3, [r7, #20]
    2e52:	3301      	adds	r3, #1
    2e54:	617b      	str	r3, [r7, #20]
    2e56:	697b      	ldr	r3, [r7, #20]
    2e58:	4a17      	ldr	r2, [pc, #92]	; (2eb8 <spi_write_buffer_wait+0x304>)
    2e5a:	4293      	cmp	r3, r2
    2e5c:	d9f2      	bls.n	2e44 <spi_write_buffer_wait+0x290>
    2e5e:	e000      	b.n	2e62 <spi_write_buffer_wait+0x2ae>
						break;
    2e60:	46c0      	nop			; (mov r8, r8)
					}
				}
				if (!spi_is_ready_to_read(module)) {
    2e62:	68fb      	ldr	r3, [r7, #12]
    2e64:	0018      	movs	r0, r3
    2e66:	4b16      	ldr	r3, [pc, #88]	; (2ec0 <spi_write_buffer_wait+0x30c>)
    2e68:	4798      	blx	r3
    2e6a:	0003      	movs	r3, r0
    2e6c:	001a      	movs	r2, r3
    2e6e:	2301      	movs	r3, #1
    2e70:	4053      	eors	r3, r2
    2e72:	b2db      	uxtb	r3, r3
    2e74:	2b00      	cmp	r3, #0
    2e76:	d001      	beq.n	2e7c <spi_write_buffer_wait+0x2c8>
					/* Not ready to read data within timeout period */
					return STATUS_ERR_TIMEOUT;
    2e78:	2312      	movs	r3, #18
    2e7a:	e013      	b.n	2ea4 <spi_write_buffer_wait+0x2f0>
				}
				/* Flush read buffer */
				uint16_t flush;
				spi_read(module, &flush);
    2e7c:	2310      	movs	r3, #16
    2e7e:	18fa      	adds	r2, r7, r3
    2e80:	68fb      	ldr	r3, [r7, #12]
    2e82:	0011      	movs	r1, r2
    2e84:	0018      	movs	r0, r3
    2e86:	4b0f      	ldr	r3, [pc, #60]	; (2ec4 <spi_write_buffer_wait+0x310>)
    2e88:	4798      	blx	r3
				flush_length--;
    2e8a:	2324      	movs	r3, #36	; 0x24
    2e8c:	18fb      	adds	r3, r7, r3
    2e8e:	881a      	ldrh	r2, [r3, #0]
    2e90:	2324      	movs	r3, #36	; 0x24
    2e92:	18fb      	adds	r3, r7, r3
    2e94:	3a01      	subs	r2, #1
    2e96:	801a      	strh	r2, [r3, #0]
			while (flush_length) {
    2e98:	2324      	movs	r3, #36	; 0x24
    2e9a:	18fb      	adds	r3, r7, r3
    2e9c:	881b      	ldrh	r3, [r3, #0]
    2e9e:	2b00      	cmp	r3, #0
    2ea0:	d1cd      	bne.n	2e3e <spi_write_buffer_wait+0x28a>
			}
		}
	}
#  endif
	return STATUS_OK;
    2ea2:	2300      	movs	r3, #0
}
    2ea4:	0018      	movs	r0, r3
    2ea6:	46bd      	mov	sp, r7
    2ea8:	b00a      	add	sp, #40	; 0x28
    2eaa:	bd80      	pop	{r7, pc}
    2eac:	00002229 	.word	0x00002229
    2eb0:	00002371 	.word	0x00002371
    2eb4:	00002251 	.word	0x00002251
    2eb8:	00002710 	.word	0x00002710
    2ebc:	000022a1 	.word	0x000022a1
    2ec0:	00002279 	.word	0x00002279
    2ec4:	000022e9 	.word	0x000022e9

00002ec8 <system_pinmux_get_config_defaults>:
{
    2ec8:	b580      	push	{r7, lr}
    2eca:	b082      	sub	sp, #8
    2ecc:	af00      	add	r7, sp, #0
    2ece:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    2ed0:	687b      	ldr	r3, [r7, #4]
    2ed2:	2280      	movs	r2, #128	; 0x80
    2ed4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2ed6:	687b      	ldr	r3, [r7, #4]
    2ed8:	2200      	movs	r2, #0
    2eda:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    2edc:	687b      	ldr	r3, [r7, #4]
    2ede:	2201      	movs	r2, #1
    2ee0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    2ee2:	687b      	ldr	r3, [r7, #4]
    2ee4:	2200      	movs	r2, #0
    2ee6:	70da      	strb	r2, [r3, #3]
}
    2ee8:	46c0      	nop			; (mov r8, r8)
    2eea:	46bd      	mov	sp, r7
    2eec:	b002      	add	sp, #8
    2eee:	bd80      	pop	{r7, pc}

00002ef0 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    2ef0:	b580      	push	{r7, lr}
    2ef2:	b084      	sub	sp, #16
    2ef4:	af00      	add	r7, sp, #0
    2ef6:	0002      	movs	r2, r0
    2ef8:	6039      	str	r1, [r7, #0]
    2efa:	1dfb      	adds	r3, r7, #7
    2efc:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    2efe:	230c      	movs	r3, #12
    2f00:	18fb      	adds	r3, r7, r3
    2f02:	0018      	movs	r0, r3
    2f04:	4b10      	ldr	r3, [pc, #64]	; (2f48 <port_pin_set_config+0x58>)
    2f06:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
    2f08:	230c      	movs	r3, #12
    2f0a:	18fb      	adds	r3, r7, r3
    2f0c:	2280      	movs	r2, #128	; 0x80
    2f0e:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    2f10:	683b      	ldr	r3, [r7, #0]
    2f12:	781a      	ldrb	r2, [r3, #0]
    2f14:	230c      	movs	r3, #12
    2f16:	18fb      	adds	r3, r7, r3
    2f18:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    2f1a:	683b      	ldr	r3, [r7, #0]
    2f1c:	785a      	ldrb	r2, [r3, #1]
    2f1e:	230c      	movs	r3, #12
    2f20:	18fb      	adds	r3, r7, r3
    2f22:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    2f24:	683b      	ldr	r3, [r7, #0]
    2f26:	789a      	ldrb	r2, [r3, #2]
    2f28:	230c      	movs	r3, #12
    2f2a:	18fb      	adds	r3, r7, r3
    2f2c:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    2f2e:	230c      	movs	r3, #12
    2f30:	18fa      	adds	r2, r7, r3
    2f32:	1dfb      	adds	r3, r7, #7
    2f34:	781b      	ldrb	r3, [r3, #0]
    2f36:	0011      	movs	r1, r2
    2f38:	0018      	movs	r0, r3
    2f3a:	4b04      	ldr	r3, [pc, #16]	; (2f4c <port_pin_set_config+0x5c>)
    2f3c:	4798      	blx	r3
}
    2f3e:	46c0      	nop			; (mov r8, r8)
    2f40:	46bd      	mov	sp, r7
    2f42:	b004      	add	sp, #16
    2f44:	bd80      	pop	{r7, pc}
    2f46:	46c0      	nop			; (mov r8, r8)
    2f48:	00002ec9 	.word	0x00002ec9
    2f4c:	00003a51 	.word	0x00003a51

00002f50 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    2f50:	b580      	push	{r7, lr}
    2f52:	af00      	add	r7, sp, #0
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    2f54:	46c0      	nop			; (mov r8, r8)
    2f56:	46bd      	mov	sp, r7
    2f58:	bd80      	pop	{r7, pc}
	...

00002f5c <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    2f5c:	b580      	push	{r7, lr}
    2f5e:	b082      	sub	sp, #8
    2f60:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    2f62:	4b10      	ldr	r3, [pc, #64]	; (2fa4 <cpu_irq_enter_critical+0x48>)
    2f64:	681b      	ldr	r3, [r3, #0]
    2f66:	2b00      	cmp	r3, #0
    2f68:	d112      	bne.n	2f90 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2f6a:	f3ef 8310 	mrs	r3, PRIMASK
    2f6e:	607b      	str	r3, [r7, #4]
  return(result);
    2f70:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    2f72:	2b00      	cmp	r3, #0
    2f74:	d109      	bne.n	2f8a <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
    2f76:	b672      	cpsid	i
    2f78:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    2f7c:	4b0a      	ldr	r3, [pc, #40]	; (2fa8 <cpu_irq_enter_critical+0x4c>)
    2f7e:	2200      	movs	r2, #0
    2f80:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    2f82:	4b0a      	ldr	r3, [pc, #40]	; (2fac <cpu_irq_enter_critical+0x50>)
    2f84:	2201      	movs	r2, #1
    2f86:	701a      	strb	r2, [r3, #0]
    2f88:	e002      	b.n	2f90 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    2f8a:	4b08      	ldr	r3, [pc, #32]	; (2fac <cpu_irq_enter_critical+0x50>)
    2f8c:	2200      	movs	r2, #0
    2f8e:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    2f90:	4b04      	ldr	r3, [pc, #16]	; (2fa4 <cpu_irq_enter_critical+0x48>)
    2f92:	681b      	ldr	r3, [r3, #0]
    2f94:	1c5a      	adds	r2, r3, #1
    2f96:	4b03      	ldr	r3, [pc, #12]	; (2fa4 <cpu_irq_enter_critical+0x48>)
    2f98:	601a      	str	r2, [r3, #0]
}
    2f9a:	46c0      	nop			; (mov r8, r8)
    2f9c:	46bd      	mov	sp, r7
    2f9e:	b002      	add	sp, #8
    2fa0:	bd80      	pop	{r7, pc}
    2fa2:	46c0      	nop			; (mov r8, r8)
    2fa4:	20000098 	.word	0x20000098
    2fa8:	20000008 	.word	0x20000008
    2fac:	2000009c 	.word	0x2000009c

00002fb0 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    2fb0:	b580      	push	{r7, lr}
    2fb2:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    2fb4:	4b0b      	ldr	r3, [pc, #44]	; (2fe4 <cpu_irq_leave_critical+0x34>)
    2fb6:	681b      	ldr	r3, [r3, #0]
    2fb8:	1e5a      	subs	r2, r3, #1
    2fba:	4b0a      	ldr	r3, [pc, #40]	; (2fe4 <cpu_irq_leave_critical+0x34>)
    2fbc:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    2fbe:	4b09      	ldr	r3, [pc, #36]	; (2fe4 <cpu_irq_leave_critical+0x34>)
    2fc0:	681b      	ldr	r3, [r3, #0]
    2fc2:	2b00      	cmp	r3, #0
    2fc4:	d10a      	bne.n	2fdc <cpu_irq_leave_critical+0x2c>
    2fc6:	4b08      	ldr	r3, [pc, #32]	; (2fe8 <cpu_irq_leave_critical+0x38>)
    2fc8:	781b      	ldrb	r3, [r3, #0]
    2fca:	b2db      	uxtb	r3, r3
    2fcc:	2b00      	cmp	r3, #0
    2fce:	d005      	beq.n	2fdc <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    2fd0:	4b06      	ldr	r3, [pc, #24]	; (2fec <cpu_irq_leave_critical+0x3c>)
    2fd2:	2201      	movs	r2, #1
    2fd4:	701a      	strb	r2, [r3, #0]
    2fd6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2fda:	b662      	cpsie	i
	}
}
    2fdc:	46c0      	nop			; (mov r8, r8)
    2fde:	46bd      	mov	sp, r7
    2fe0:	bd80      	pop	{r7, pc}
    2fe2:	46c0      	nop			; (mov r8, r8)
    2fe4:	20000098 	.word	0x20000098
    2fe8:	2000009c 	.word	0x2000009c
    2fec:	20000008 	.word	0x20000008

00002ff0 <system_gclk_gen_get_config_defaults>:
{
    2ff0:	b580      	push	{r7, lr}
    2ff2:	b082      	sub	sp, #8
    2ff4:	af00      	add	r7, sp, #0
    2ff6:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
    2ff8:	687b      	ldr	r3, [r7, #4]
    2ffa:	2201      	movs	r2, #1
    2ffc:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    2ffe:	687b      	ldr	r3, [r7, #4]
    3000:	2200      	movs	r2, #0
    3002:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    3004:	687b      	ldr	r3, [r7, #4]
    3006:	2206      	movs	r2, #6
    3008:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
    300a:	687b      	ldr	r3, [r7, #4]
    300c:	2200      	movs	r2, #0
    300e:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    3010:	687b      	ldr	r3, [r7, #4]
    3012:	2200      	movs	r2, #0
    3014:	725a      	strb	r2, [r3, #9]
}
    3016:	46c0      	nop			; (mov r8, r8)
    3018:	46bd      	mov	sp, r7
    301a:	b002      	add	sp, #8
    301c:	bd80      	pop	{r7, pc}

0000301e <system_clock_source_osc8m_get_config_defaults>:
{
    301e:	b580      	push	{r7, lr}
    3020:	b082      	sub	sp, #8
    3022:	af00      	add	r7, sp, #0
    3024:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    3026:	687b      	ldr	r3, [r7, #4]
    3028:	2203      	movs	r2, #3
    302a:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    302c:	687b      	ldr	r3, [r7, #4]
    302e:	2200      	movs	r2, #0
    3030:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    3032:	687b      	ldr	r3, [r7, #4]
    3034:	2201      	movs	r2, #1
    3036:	709a      	strb	r2, [r3, #2]
}
    3038:	46c0      	nop			; (mov r8, r8)
    303a:	46bd      	mov	sp, r7
    303c:	b002      	add	sp, #8
    303e:	bd80      	pop	{r7, pc}

00003040 <system_cpu_clock_set_divider>:
{
    3040:	b580      	push	{r7, lr}
    3042:	b082      	sub	sp, #8
    3044:	af00      	add	r7, sp, #0
    3046:	0002      	movs	r2, r0
    3048:	1dfb      	adds	r3, r7, #7
    304a:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
    304c:	4a03      	ldr	r2, [pc, #12]	; (305c <system_cpu_clock_set_divider+0x1c>)
    304e:	1dfb      	adds	r3, r7, #7
    3050:	781b      	ldrb	r3, [r3, #0]
    3052:	7213      	strb	r3, [r2, #8]
}
    3054:	46c0      	nop			; (mov r8, r8)
    3056:	46bd      	mov	sp, r7
    3058:	b002      	add	sp, #8
    305a:	bd80      	pop	{r7, pc}
    305c:	40000400 	.word	0x40000400

00003060 <system_apb_clock_set_divider>:
{
    3060:	b580      	push	{r7, lr}
    3062:	b082      	sub	sp, #8
    3064:	af00      	add	r7, sp, #0
    3066:	0002      	movs	r2, r0
    3068:	1dfb      	adds	r3, r7, #7
    306a:	701a      	strb	r2, [r3, #0]
    306c:	1dbb      	adds	r3, r7, #6
    306e:	1c0a      	adds	r2, r1, #0
    3070:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    3072:	1dfb      	adds	r3, r7, #7
    3074:	781b      	ldrb	r3, [r3, #0]
    3076:	2b01      	cmp	r3, #1
    3078:	d008      	beq.n	308c <system_apb_clock_set_divider+0x2c>
    307a:	2b02      	cmp	r3, #2
    307c:	d00b      	beq.n	3096 <system_apb_clock_set_divider+0x36>
    307e:	2b00      	cmp	r3, #0
    3080:	d10e      	bne.n	30a0 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
    3082:	4a0b      	ldr	r2, [pc, #44]	; (30b0 <system_apb_clock_set_divider+0x50>)
    3084:	1dbb      	adds	r3, r7, #6
    3086:	781b      	ldrb	r3, [r3, #0]
    3088:	7253      	strb	r3, [r2, #9]
			break;
    308a:	e00b      	b.n	30a4 <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
    308c:	4a08      	ldr	r2, [pc, #32]	; (30b0 <system_apb_clock_set_divider+0x50>)
    308e:	1dbb      	adds	r3, r7, #6
    3090:	781b      	ldrb	r3, [r3, #0]
    3092:	7293      	strb	r3, [r2, #10]
			break;
    3094:	e006      	b.n	30a4 <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
    3096:	4a06      	ldr	r2, [pc, #24]	; (30b0 <system_apb_clock_set_divider+0x50>)
    3098:	1dbb      	adds	r3, r7, #6
    309a:	781b      	ldrb	r3, [r3, #0]
    309c:	72d3      	strb	r3, [r2, #11]
			break;
    309e:	e001      	b.n	30a4 <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
    30a0:	2317      	movs	r3, #23
    30a2:	e000      	b.n	30a6 <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
    30a4:	2300      	movs	r3, #0
}
    30a6:	0018      	movs	r0, r3
    30a8:	46bd      	mov	sp, r7
    30aa:	b002      	add	sp, #8
    30ac:	bd80      	pop	{r7, pc}
    30ae:	46c0      	nop			; (mov r8, r8)
    30b0:	40000400 	.word	0x40000400

000030b4 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    30b4:	b580      	push	{r7, lr}
    30b6:	b082      	sub	sp, #8
    30b8:	af00      	add	r7, sp, #0
    30ba:	0002      	movs	r2, r0
    30bc:	1dfb      	adds	r3, r7, #7
    30be:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    30c0:	4a08      	ldr	r2, [pc, #32]	; (30e4 <system_flash_set_waitstates+0x30>)
    30c2:	1dfb      	adds	r3, r7, #7
    30c4:	781b      	ldrb	r3, [r3, #0]
    30c6:	210f      	movs	r1, #15
    30c8:	400b      	ands	r3, r1
    30ca:	b2d9      	uxtb	r1, r3
    30cc:	6853      	ldr	r3, [r2, #4]
    30ce:	200f      	movs	r0, #15
    30d0:	4001      	ands	r1, r0
    30d2:	0049      	lsls	r1, r1, #1
    30d4:	201e      	movs	r0, #30
    30d6:	4383      	bics	r3, r0
    30d8:	430b      	orrs	r3, r1
    30da:	6053      	str	r3, [r2, #4]
}
    30dc:	46c0      	nop			; (mov r8, r8)
    30de:	46bd      	mov	sp, r7
    30e0:	b002      	add	sp, #8
    30e2:	bd80      	pop	{r7, pc}
    30e4:	41004000 	.word	0x41004000

000030e8 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    30e8:	b580      	push	{r7, lr}
    30ea:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    30ec:	46c0      	nop			; (mov r8, r8)
    30ee:	4b04      	ldr	r3, [pc, #16]	; (3100 <_system_dfll_wait_for_sync+0x18>)
    30f0:	68db      	ldr	r3, [r3, #12]
    30f2:	2210      	movs	r2, #16
    30f4:	4013      	ands	r3, r2
    30f6:	d0fa      	beq.n	30ee <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    30f8:	46c0      	nop			; (mov r8, r8)
    30fa:	46bd      	mov	sp, r7
    30fc:	bd80      	pop	{r7, pc}
    30fe:	46c0      	nop			; (mov r8, r8)
    3100:	40000800 	.word	0x40000800

00003104 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    3104:	b580      	push	{r7, lr}
    3106:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    3108:	4b0c      	ldr	r3, [pc, #48]	; (313c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    310a:	2202      	movs	r2, #2
    310c:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    310e:	4b0c      	ldr	r3, [pc, #48]	; (3140 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    3110:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    3112:	4a0a      	ldr	r2, [pc, #40]	; (313c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    3114:	4b0b      	ldr	r3, [pc, #44]	; (3144 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    3116:	689b      	ldr	r3, [r3, #8]
    3118:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    311a:	4a08      	ldr	r2, [pc, #32]	; (313c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    311c:	4b09      	ldr	r3, [pc, #36]	; (3144 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    311e:	685b      	ldr	r3, [r3, #4]
    3120:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    3122:	4b06      	ldr	r3, [pc, #24]	; (313c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    3124:	2200      	movs	r2, #0
    3126:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    3128:	4b05      	ldr	r3, [pc, #20]	; (3140 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    312a:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    312c:	4a03      	ldr	r2, [pc, #12]	; (313c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    312e:	4b05      	ldr	r3, [pc, #20]	; (3144 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    3130:	681b      	ldr	r3, [r3, #0]
    3132:	b29b      	uxth	r3, r3
    3134:	8493      	strh	r3, [r2, #36]	; 0x24
}
    3136:	46c0      	nop			; (mov r8, r8)
    3138:	46bd      	mov	sp, r7
    313a:	bd80      	pop	{r7, pc}
    313c:	40000800 	.word	0x40000800
    3140:	000030e9 	.word	0x000030e9
    3144:	200000a0 	.word	0x200000a0

00003148 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    3148:	b580      	push	{r7, lr}
    314a:	b082      	sub	sp, #8
    314c:	af00      	add	r7, sp, #0
    314e:	0002      	movs	r2, r0
    3150:	1dfb      	adds	r3, r7, #7
    3152:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    3154:	1dfb      	adds	r3, r7, #7
    3156:	781b      	ldrb	r3, [r3, #0]
    3158:	2b08      	cmp	r3, #8
    315a:	d841      	bhi.n	31e0 <system_clock_source_get_hz+0x98>
    315c:	009a      	lsls	r2, r3, #2
    315e:	4b23      	ldr	r3, [pc, #140]	; (31ec <system_clock_source_get_hz+0xa4>)
    3160:	18d3      	adds	r3, r2, r3
    3162:	681b      	ldr	r3, [r3, #0]
    3164:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    3166:	4b22      	ldr	r3, [pc, #136]	; (31f0 <system_clock_source_get_hz+0xa8>)
    3168:	691b      	ldr	r3, [r3, #16]
    316a:	e03a      	b.n	31e2 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    316c:	4b21      	ldr	r3, [pc, #132]	; (31f4 <system_clock_source_get_hz+0xac>)
    316e:	6a1b      	ldr	r3, [r3, #32]
    3170:	059b      	lsls	r3, r3, #22
    3172:	0f9b      	lsrs	r3, r3, #30
    3174:	b2db      	uxtb	r3, r3
    3176:	001a      	movs	r2, r3
    3178:	4b1f      	ldr	r3, [pc, #124]	; (31f8 <system_clock_source_get_hz+0xb0>)
    317a:	40d3      	lsrs	r3, r2
    317c:	e031      	b.n	31e2 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    317e:	2380      	movs	r3, #128	; 0x80
    3180:	021b      	lsls	r3, r3, #8
    3182:	e02e      	b.n	31e2 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    3184:	2380      	movs	r3, #128	; 0x80
    3186:	021b      	lsls	r3, r3, #8
    3188:	e02b      	b.n	31e2 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    318a:	4b19      	ldr	r3, [pc, #100]	; (31f0 <system_clock_source_get_hz+0xa8>)
    318c:	695b      	ldr	r3, [r3, #20]
    318e:	e028      	b.n	31e2 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    3190:	4b17      	ldr	r3, [pc, #92]	; (31f0 <system_clock_source_get_hz+0xa8>)
    3192:	681b      	ldr	r3, [r3, #0]
    3194:	2202      	movs	r2, #2
    3196:	4013      	ands	r3, r2
    3198:	d101      	bne.n	319e <system_clock_source_get_hz+0x56>
			return 0;
    319a:	2300      	movs	r3, #0
    319c:	e021      	b.n	31e2 <system_clock_source_get_hz+0x9a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    319e:	4b17      	ldr	r3, [pc, #92]	; (31fc <system_clock_source_get_hz+0xb4>)
    31a0:	4798      	blx	r3

		/* Check if operating in closed loop (USB) mode */
		switch(_system_clock_inst.dfll.control &
    31a2:	4b13      	ldr	r3, [pc, #76]	; (31f0 <system_clock_source_get_hz+0xa8>)
    31a4:	681b      	ldr	r3, [r3, #0]
    31a6:	2224      	movs	r2, #36	; 0x24
    31a8:	4013      	ands	r3, r2
    31aa:	2b04      	cmp	r3, #4
    31ac:	d109      	bne.n	31c2 <system_clock_source_get_hz+0x7a>
				(SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_USBCRM)) {
		case SYSCTRL_DFLLCTRL_MODE:
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    31ae:	2000      	movs	r0, #0
    31b0:	4b13      	ldr	r3, [pc, #76]	; (3200 <system_clock_source_get_hz+0xb8>)
    31b2:	4798      	blx	r3
    31b4:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    31b6:	4b0e      	ldr	r3, [pc, #56]	; (31f0 <system_clock_source_get_hz+0xa8>)
    31b8:	689b      	ldr	r3, [r3, #8]
    31ba:	041b      	lsls	r3, r3, #16
    31bc:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    31be:	4353      	muls	r3, r2
    31c0:	e00f      	b.n	31e2 <system_clock_source_get_hz+0x9a>
		default:
			return 48000000UL;
    31c2:	4b10      	ldr	r3, [pc, #64]	; (3204 <system_clock_source_get_hz+0xbc>)
    31c4:	e00d      	b.n	31e2 <system_clock_source_get_hz+0x9a>
		}

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    31c6:	4a0b      	ldr	r2, [pc, #44]	; (31f4 <system_clock_source_get_hz+0xac>)
    31c8:	2350      	movs	r3, #80	; 0x50
    31ca:	5cd3      	ldrb	r3, [r2, r3]
    31cc:	b2db      	uxtb	r3, r3
    31ce:	001a      	movs	r2, r3
    31d0:	2304      	movs	r3, #4
    31d2:	4013      	ands	r3, r2
    31d4:	d101      	bne.n	31da <system_clock_source_get_hz+0x92>
			return 0;
    31d6:	2300      	movs	r3, #0
    31d8:	e003      	b.n	31e2 <system_clock_source_get_hz+0x9a>
		}

		return _system_clock_inst.dpll.frequency;
    31da:	4b05      	ldr	r3, [pc, #20]	; (31f0 <system_clock_source_get_hz+0xa8>)
    31dc:	68db      	ldr	r3, [r3, #12]
    31de:	e000      	b.n	31e2 <system_clock_source_get_hz+0x9a>
#endif

	default:
		return 0;
    31e0:	2300      	movs	r3, #0
	}
}
    31e2:	0018      	movs	r0, r3
    31e4:	46bd      	mov	sp, r7
    31e6:	b002      	add	sp, #8
    31e8:	bd80      	pop	{r7, pc}
    31ea:	46c0      	nop			; (mov r8, r8)
    31ec:	00008168 	.word	0x00008168
    31f0:	200000a0 	.word	0x200000a0
    31f4:	40000800 	.word	0x40000800
    31f8:	007a1200 	.word	0x007a1200
    31fc:	000030e9 	.word	0x000030e9
    3200:	00003889 	.word	0x00003889
    3204:	02dc6c00 	.word	0x02dc6c00

00003208 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    3208:	b580      	push	{r7, lr}
    320a:	b084      	sub	sp, #16
    320c:	af00      	add	r7, sp, #0
    320e:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    3210:	4b1a      	ldr	r3, [pc, #104]	; (327c <system_clock_source_osc8m_set_config+0x74>)
    3212:	6a1b      	ldr	r3, [r3, #32]
    3214:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    3216:	687b      	ldr	r3, [r7, #4]
    3218:	781b      	ldrb	r3, [r3, #0]
    321a:	1c1a      	adds	r2, r3, #0
    321c:	2303      	movs	r3, #3
    321e:	4013      	ands	r3, r2
    3220:	b2da      	uxtb	r2, r3
    3222:	230d      	movs	r3, #13
    3224:	18fb      	adds	r3, r7, r3
    3226:	2103      	movs	r1, #3
    3228:	400a      	ands	r2, r1
    322a:	0010      	movs	r0, r2
    322c:	781a      	ldrb	r2, [r3, #0]
    322e:	2103      	movs	r1, #3
    3230:	438a      	bics	r2, r1
    3232:	1c11      	adds	r1, r2, #0
    3234:	1c02      	adds	r2, r0, #0
    3236:	430a      	orrs	r2, r1
    3238:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    323a:	687b      	ldr	r3, [r7, #4]
    323c:	789a      	ldrb	r2, [r3, #2]
    323e:	230c      	movs	r3, #12
    3240:	18fb      	adds	r3, r7, r3
    3242:	01d0      	lsls	r0, r2, #7
    3244:	781a      	ldrb	r2, [r3, #0]
    3246:	217f      	movs	r1, #127	; 0x7f
    3248:	400a      	ands	r2, r1
    324a:	1c11      	adds	r1, r2, #0
    324c:	1c02      	adds	r2, r0, #0
    324e:	430a      	orrs	r2, r1
    3250:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    3252:	687b      	ldr	r3, [r7, #4]
    3254:	785a      	ldrb	r2, [r3, #1]
    3256:	230c      	movs	r3, #12
    3258:	18fb      	adds	r3, r7, r3
    325a:	2101      	movs	r1, #1
    325c:	400a      	ands	r2, r1
    325e:	0190      	lsls	r0, r2, #6
    3260:	781a      	ldrb	r2, [r3, #0]
    3262:	2140      	movs	r1, #64	; 0x40
    3264:	438a      	bics	r2, r1
    3266:	1c11      	adds	r1, r2, #0
    3268:	1c02      	adds	r2, r0, #0
    326a:	430a      	orrs	r2, r1
    326c:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    326e:	4b03      	ldr	r3, [pc, #12]	; (327c <system_clock_source_osc8m_set_config+0x74>)
    3270:	68fa      	ldr	r2, [r7, #12]
    3272:	621a      	str	r2, [r3, #32]
}
    3274:	46c0      	nop			; (mov r8, r8)
    3276:	46bd      	mov	sp, r7
    3278:	b004      	add	sp, #16
    327a:	bd80      	pop	{r7, pc}
    327c:	40000800 	.word	0x40000800

00003280 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    3280:	b580      	push	{r7, lr}
    3282:	b082      	sub	sp, #8
    3284:	af00      	add	r7, sp, #0
    3286:	0002      	movs	r2, r0
    3288:	1dfb      	adds	r3, r7, #7
    328a:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    328c:	1dfb      	adds	r3, r7, #7
    328e:	781b      	ldrb	r3, [r3, #0]
    3290:	2b08      	cmp	r3, #8
    3292:	d83b      	bhi.n	330c <system_clock_source_enable+0x8c>
    3294:	009a      	lsls	r2, r3, #2
    3296:	4b21      	ldr	r3, [pc, #132]	; (331c <system_clock_source_enable+0x9c>)
    3298:	18d3      	adds	r3, r2, r3
    329a:	681b      	ldr	r3, [r3, #0]
    329c:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    329e:	4b20      	ldr	r3, [pc, #128]	; (3320 <system_clock_source_enable+0xa0>)
    32a0:	4a1f      	ldr	r2, [pc, #124]	; (3320 <system_clock_source_enable+0xa0>)
    32a2:	6a12      	ldr	r2, [r2, #32]
    32a4:	2102      	movs	r1, #2
    32a6:	430a      	orrs	r2, r1
    32a8:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    32aa:	2300      	movs	r3, #0
    32ac:	e031      	b.n	3312 <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    32ae:	4b1c      	ldr	r3, [pc, #112]	; (3320 <system_clock_source_enable+0xa0>)
    32b0:	4a1b      	ldr	r2, [pc, #108]	; (3320 <system_clock_source_enable+0xa0>)
    32b2:	6992      	ldr	r2, [r2, #24]
    32b4:	2102      	movs	r1, #2
    32b6:	430a      	orrs	r2, r1
    32b8:	619a      	str	r2, [r3, #24]
		break;
    32ba:	e029      	b.n	3310 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    32bc:	4a18      	ldr	r2, [pc, #96]	; (3320 <system_clock_source_enable+0xa0>)
    32be:	4b18      	ldr	r3, [pc, #96]	; (3320 <system_clock_source_enable+0xa0>)
    32c0:	8a1b      	ldrh	r3, [r3, #16]
    32c2:	b29b      	uxth	r3, r3
    32c4:	2102      	movs	r1, #2
    32c6:	430b      	orrs	r3, r1
    32c8:	b29b      	uxth	r3, r3
    32ca:	8213      	strh	r3, [r2, #16]
		break;
    32cc:	e020      	b.n	3310 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    32ce:	4a14      	ldr	r2, [pc, #80]	; (3320 <system_clock_source_enable+0xa0>)
    32d0:	4b13      	ldr	r3, [pc, #76]	; (3320 <system_clock_source_enable+0xa0>)
    32d2:	8a9b      	ldrh	r3, [r3, #20]
    32d4:	b29b      	uxth	r3, r3
    32d6:	2102      	movs	r1, #2
    32d8:	430b      	orrs	r3, r1
    32da:	b29b      	uxth	r3, r3
    32dc:	8293      	strh	r3, [r2, #20]
		break;
    32de:	e017      	b.n	3310 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    32e0:	4b10      	ldr	r3, [pc, #64]	; (3324 <system_clock_source_enable+0xa4>)
    32e2:	681b      	ldr	r3, [r3, #0]
    32e4:	2202      	movs	r2, #2
    32e6:	431a      	orrs	r2, r3
    32e8:	4b0e      	ldr	r3, [pc, #56]	; (3324 <system_clock_source_enable+0xa4>)
    32ea:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    32ec:	4b0e      	ldr	r3, [pc, #56]	; (3328 <system_clock_source_enable+0xa8>)
    32ee:	4798      	blx	r3
		break;
    32f0:	e00e      	b.n	3310 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    32f2:	4a0b      	ldr	r2, [pc, #44]	; (3320 <system_clock_source_enable+0xa0>)
    32f4:	490a      	ldr	r1, [pc, #40]	; (3320 <system_clock_source_enable+0xa0>)
    32f6:	2344      	movs	r3, #68	; 0x44
    32f8:	5ccb      	ldrb	r3, [r1, r3]
    32fa:	b2db      	uxtb	r3, r3
    32fc:	2102      	movs	r1, #2
    32fe:	430b      	orrs	r3, r1
    3300:	b2d9      	uxtb	r1, r3
    3302:	2344      	movs	r3, #68	; 0x44
    3304:	54d1      	strb	r1, [r2, r3]
		break;
    3306:	e003      	b.n	3310 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    3308:	2300      	movs	r3, #0
    330a:	e002      	b.n	3312 <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    330c:	2317      	movs	r3, #23
    330e:	e000      	b.n	3312 <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    3310:	2300      	movs	r3, #0
}
    3312:	0018      	movs	r0, r3
    3314:	46bd      	mov	sp, r7
    3316:	b002      	add	sp, #8
    3318:	bd80      	pop	{r7, pc}
    331a:	46c0      	nop			; (mov r8, r8)
    331c:	0000818c 	.word	0x0000818c
    3320:	40000800 	.word	0x40000800
    3324:	200000a0 	.word	0x200000a0
    3328:	00003105 	.word	0x00003105

0000332c <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    332c:	b580      	push	{r7, lr}
    332e:	b082      	sub	sp, #8
    3330:	af00      	add	r7, sp, #0
	uint32_t gclk_id;
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    3332:	003b      	movs	r3, r7
    3334:	2201      	movs	r2, #1
    3336:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    3338:	2300      	movs	r3, #0
    333a:	607b      	str	r3, [r7, #4]
    333c:	e009      	b.n	3352 <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    333e:	687b      	ldr	r3, [r7, #4]
    3340:	b2db      	uxtb	r3, r3
    3342:	003a      	movs	r2, r7
    3344:	0011      	movs	r1, r2
    3346:	0018      	movs	r0, r3
    3348:	4b05      	ldr	r3, [pc, #20]	; (3360 <_switch_peripheral_gclk+0x34>)
    334a:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    334c:	687b      	ldr	r3, [r7, #4]
    334e:	3301      	adds	r3, #1
    3350:	607b      	str	r3, [r7, #4]
    3352:	687b      	ldr	r3, [r7, #4]
    3354:	2b24      	cmp	r3, #36	; 0x24
    3356:	d9f2      	bls.n	333e <_switch_peripheral_gclk+0x12>
	}
}
    3358:	46c0      	nop			; (mov r8, r8)
    335a:	46bd      	mov	sp, r7
    335c:	b002      	add	sp, #8
    335e:	bd80      	pop	{r7, pc}
    3360:	00003765 	.word	0x00003765

00003364 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    3364:	b580      	push	{r7, lr}
    3366:	b0a0      	sub	sp, #128	; 0x80
    3368:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    336a:	4b27      	ldr	r3, [pc, #156]	; (3408 <system_clock_init+0xa4>)
    336c:	22c2      	movs	r2, #194	; 0xc2
    336e:	00d2      	lsls	r2, r2, #3
    3370:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    3372:	2000      	movs	r0, #0
    3374:	4b25      	ldr	r3, [pc, #148]	; (340c <system_clock_init+0xa8>)
    3376:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    3378:	4b25      	ldr	r3, [pc, #148]	; (3410 <system_clock_init+0xac>)
    337a:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    337c:	237c      	movs	r3, #124	; 0x7c
    337e:	18fb      	adds	r3, r7, r3
    3380:	0018      	movs	r0, r3
    3382:	4b24      	ldr	r3, [pc, #144]	; (3414 <system_clock_init+0xb0>)
    3384:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    3386:	237c      	movs	r3, #124	; 0x7c
    3388:	18fb      	adds	r3, r7, r3
    338a:	2200      	movs	r2, #0
    338c:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    338e:	237c      	movs	r3, #124	; 0x7c
    3390:	18fb      	adds	r3, r7, r3
    3392:	2201      	movs	r2, #1
    3394:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    3396:	237c      	movs	r3, #124	; 0x7c
    3398:	18fb      	adds	r3, r7, r3
    339a:	2200      	movs	r2, #0
    339c:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    339e:	237c      	movs	r3, #124	; 0x7c
    33a0:	18fb      	adds	r3, r7, r3
    33a2:	0018      	movs	r0, r3
    33a4:	4b1c      	ldr	r3, [pc, #112]	; (3418 <system_clock_init+0xb4>)
    33a6:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    33a8:	2006      	movs	r0, #6
    33aa:	4b1c      	ldr	r3, [pc, #112]	; (341c <system_clock_init+0xb8>)
    33ac:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    33ae:	4b1c      	ldr	r3, [pc, #112]	; (3420 <system_clock_init+0xbc>)
    33b0:	4798      	blx	r3

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    33b2:	2000      	movs	r0, #0
    33b4:	4b1b      	ldr	r3, [pc, #108]	; (3424 <system_clock_init+0xc0>)
    33b6:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    33b8:	2100      	movs	r1, #0
    33ba:	2000      	movs	r0, #0
    33bc:	4b1a      	ldr	r3, [pc, #104]	; (3428 <system_clock_init+0xc4>)
    33be:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    33c0:	2100      	movs	r1, #0
    33c2:	2001      	movs	r0, #1
    33c4:	4b18      	ldr	r3, [pc, #96]	; (3428 <system_clock_init+0xc4>)
    33c6:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    33c8:	2100      	movs	r1, #0
    33ca:	2002      	movs	r0, #2
    33cc:	4b16      	ldr	r3, [pc, #88]	; (3428 <system_clock_init+0xc4>)
    33ce:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    33d0:	1d3b      	adds	r3, r7, #4
    33d2:	0018      	movs	r0, r3
    33d4:	4b15      	ldr	r3, [pc, #84]	; (342c <system_clock_init+0xc8>)
    33d6:	4798      	blx	r3
    33d8:	1d3b      	adds	r3, r7, #4
    33da:	2206      	movs	r2, #6
    33dc:	701a      	strb	r2, [r3, #0]
    33de:	1d3b      	adds	r3, r7, #4
    33e0:	2201      	movs	r2, #1
    33e2:	605a      	str	r2, [r3, #4]
    33e4:	1d3b      	adds	r3, r7, #4
    33e6:	2200      	movs	r2, #0
    33e8:	721a      	strb	r2, [r3, #8]
    33ea:	1d3b      	adds	r3, r7, #4
    33ec:	2200      	movs	r2, #0
    33ee:	725a      	strb	r2, [r3, #9]
    33f0:	1d3b      	adds	r3, r7, #4
    33f2:	0019      	movs	r1, r3
    33f4:	2000      	movs	r0, #0
    33f6:	4b0e      	ldr	r3, [pc, #56]	; (3430 <system_clock_init+0xcc>)
    33f8:	4798      	blx	r3
    33fa:	2000      	movs	r0, #0
    33fc:	4b0d      	ldr	r3, [pc, #52]	; (3434 <system_clock_init+0xd0>)
    33fe:	4798      	blx	r3
#endif
}
    3400:	46c0      	nop			; (mov r8, r8)
    3402:	46bd      	mov	sp, r7
    3404:	b020      	add	sp, #128	; 0x80
    3406:	bd80      	pop	{r7, pc}
    3408:	40000800 	.word	0x40000800
    340c:	000030b5 	.word	0x000030b5
    3410:	0000332d 	.word	0x0000332d
    3414:	0000301f 	.word	0x0000301f
    3418:	00003209 	.word	0x00003209
    341c:	00003281 	.word	0x00003281
    3420:	000034dd 	.word	0x000034dd
    3424:	00003041 	.word	0x00003041
    3428:	00003061 	.word	0x00003061
    342c:	00002ff1 	.word	0x00002ff1
    3430:	0000350d 	.word	0x0000350d
    3434:	00003631 	.word	0x00003631

00003438 <system_apb_clock_set_mask>:
{
    3438:	b580      	push	{r7, lr}
    343a:	b082      	sub	sp, #8
    343c:	af00      	add	r7, sp, #0
    343e:	0002      	movs	r2, r0
    3440:	6039      	str	r1, [r7, #0]
    3442:	1dfb      	adds	r3, r7, #7
    3444:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    3446:	1dfb      	adds	r3, r7, #7
    3448:	781b      	ldrb	r3, [r3, #0]
    344a:	2b01      	cmp	r3, #1
    344c:	d00a      	beq.n	3464 <system_apb_clock_set_mask+0x2c>
    344e:	2b02      	cmp	r3, #2
    3450:	d00f      	beq.n	3472 <system_apb_clock_set_mask+0x3a>
    3452:	2b00      	cmp	r3, #0
    3454:	d114      	bne.n	3480 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    3456:	4b0e      	ldr	r3, [pc, #56]	; (3490 <system_apb_clock_set_mask+0x58>)
    3458:	4a0d      	ldr	r2, [pc, #52]	; (3490 <system_apb_clock_set_mask+0x58>)
    345a:	6991      	ldr	r1, [r2, #24]
    345c:	683a      	ldr	r2, [r7, #0]
    345e:	430a      	orrs	r2, r1
    3460:	619a      	str	r2, [r3, #24]
			break;
    3462:	e00f      	b.n	3484 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    3464:	4b0a      	ldr	r3, [pc, #40]	; (3490 <system_apb_clock_set_mask+0x58>)
    3466:	4a0a      	ldr	r2, [pc, #40]	; (3490 <system_apb_clock_set_mask+0x58>)
    3468:	69d1      	ldr	r1, [r2, #28]
    346a:	683a      	ldr	r2, [r7, #0]
    346c:	430a      	orrs	r2, r1
    346e:	61da      	str	r2, [r3, #28]
			break;
    3470:	e008      	b.n	3484 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    3472:	4b07      	ldr	r3, [pc, #28]	; (3490 <system_apb_clock_set_mask+0x58>)
    3474:	4a06      	ldr	r2, [pc, #24]	; (3490 <system_apb_clock_set_mask+0x58>)
    3476:	6a11      	ldr	r1, [r2, #32]
    3478:	683a      	ldr	r2, [r7, #0]
    347a:	430a      	orrs	r2, r1
    347c:	621a      	str	r2, [r3, #32]
			break;
    347e:	e001      	b.n	3484 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    3480:	2317      	movs	r3, #23
    3482:	e000      	b.n	3486 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    3484:	2300      	movs	r3, #0
}
    3486:	0018      	movs	r0, r3
    3488:	46bd      	mov	sp, r7
    348a:	b002      	add	sp, #8
    348c:	bd80      	pop	{r7, pc}
    348e:	46c0      	nop			; (mov r8, r8)
    3490:	40000400 	.word	0x40000400

00003494 <system_interrupt_enter_critical_section>:
{
    3494:	b580      	push	{r7, lr}
    3496:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    3498:	4b02      	ldr	r3, [pc, #8]	; (34a4 <system_interrupt_enter_critical_section+0x10>)
    349a:	4798      	blx	r3
}
    349c:	46c0      	nop			; (mov r8, r8)
    349e:	46bd      	mov	sp, r7
    34a0:	bd80      	pop	{r7, pc}
    34a2:	46c0      	nop			; (mov r8, r8)
    34a4:	00002f5d 	.word	0x00002f5d

000034a8 <system_interrupt_leave_critical_section>:
{
    34a8:	b580      	push	{r7, lr}
    34aa:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    34ac:	4b02      	ldr	r3, [pc, #8]	; (34b8 <system_interrupt_leave_critical_section+0x10>)
    34ae:	4798      	blx	r3
}
    34b0:	46c0      	nop			; (mov r8, r8)
    34b2:	46bd      	mov	sp, r7
    34b4:	bd80      	pop	{r7, pc}
    34b6:	46c0      	nop			; (mov r8, r8)
    34b8:	00002fb1 	.word	0x00002fb1

000034bc <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    34bc:	b580      	push	{r7, lr}
    34be:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    34c0:	4b05      	ldr	r3, [pc, #20]	; (34d8 <system_gclk_is_syncing+0x1c>)
    34c2:	785b      	ldrb	r3, [r3, #1]
    34c4:	b2db      	uxtb	r3, r3
    34c6:	b25b      	sxtb	r3, r3
    34c8:	2b00      	cmp	r3, #0
    34ca:	da01      	bge.n	34d0 <system_gclk_is_syncing+0x14>
		return true;
    34cc:	2301      	movs	r3, #1
    34ce:	e000      	b.n	34d2 <system_gclk_is_syncing+0x16>
	}

	return false;
    34d0:	2300      	movs	r3, #0
}
    34d2:	0018      	movs	r0, r3
    34d4:	46bd      	mov	sp, r7
    34d6:	bd80      	pop	{r7, pc}
    34d8:	40000c00 	.word	0x40000c00

000034dc <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    34dc:	b580      	push	{r7, lr}
    34de:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    34e0:	2108      	movs	r1, #8
    34e2:	2000      	movs	r0, #0
    34e4:	4b07      	ldr	r3, [pc, #28]	; (3504 <system_gclk_init+0x28>)
    34e6:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    34e8:	4b07      	ldr	r3, [pc, #28]	; (3508 <system_gclk_init+0x2c>)
    34ea:	2201      	movs	r2, #1
    34ec:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    34ee:	46c0      	nop			; (mov r8, r8)
    34f0:	4b05      	ldr	r3, [pc, #20]	; (3508 <system_gclk_init+0x2c>)
    34f2:	781b      	ldrb	r3, [r3, #0]
    34f4:	b2db      	uxtb	r3, r3
    34f6:	001a      	movs	r2, r3
    34f8:	2301      	movs	r3, #1
    34fa:	4013      	ands	r3, r2
    34fc:	d1f8      	bne.n	34f0 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    34fe:	46c0      	nop			; (mov r8, r8)
    3500:	46bd      	mov	sp, r7
    3502:	bd80      	pop	{r7, pc}
    3504:	00003439 	.word	0x00003439
    3508:	40000c00 	.word	0x40000c00

0000350c <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    350c:	b580      	push	{r7, lr}
    350e:	b086      	sub	sp, #24
    3510:	af00      	add	r7, sp, #0
    3512:	0002      	movs	r2, r0
    3514:	6039      	str	r1, [r7, #0]
    3516:	1dfb      	adds	r3, r7, #7
    3518:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    351a:	1dfb      	adds	r3, r7, #7
    351c:	781b      	ldrb	r3, [r3, #0]
    351e:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    3520:	1dfb      	adds	r3, r7, #7
    3522:	781b      	ldrb	r3, [r3, #0]
    3524:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    3526:	683b      	ldr	r3, [r7, #0]
    3528:	781b      	ldrb	r3, [r3, #0]
    352a:	021b      	lsls	r3, r3, #8
    352c:	001a      	movs	r2, r3
    352e:	697b      	ldr	r3, [r7, #20]
    3530:	4313      	orrs	r3, r2
    3532:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    3534:	683b      	ldr	r3, [r7, #0]
    3536:	785b      	ldrb	r3, [r3, #1]
    3538:	2b00      	cmp	r3, #0
    353a:	d004      	beq.n	3546 <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    353c:	697b      	ldr	r3, [r7, #20]
    353e:	2280      	movs	r2, #128	; 0x80
    3540:	02d2      	lsls	r2, r2, #11
    3542:	4313      	orrs	r3, r2
    3544:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    3546:	683b      	ldr	r3, [r7, #0]
    3548:	7a5b      	ldrb	r3, [r3, #9]
    354a:	2b00      	cmp	r3, #0
    354c:	d004      	beq.n	3558 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    354e:	697b      	ldr	r3, [r7, #20]
    3550:	2280      	movs	r2, #128	; 0x80
    3552:	0312      	lsls	r2, r2, #12
    3554:	4313      	orrs	r3, r2
    3556:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    3558:	683b      	ldr	r3, [r7, #0]
    355a:	685b      	ldr	r3, [r3, #4]
    355c:	2b01      	cmp	r3, #1
    355e:	d92c      	bls.n	35ba <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    3560:	683b      	ldr	r3, [r7, #0]
    3562:	685a      	ldr	r2, [r3, #4]
    3564:	683b      	ldr	r3, [r7, #0]
    3566:	685b      	ldr	r3, [r3, #4]
    3568:	3b01      	subs	r3, #1
    356a:	4013      	ands	r3, r2
    356c:	d11a      	bne.n	35a4 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    356e:	2300      	movs	r3, #0
    3570:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    3572:	2302      	movs	r3, #2
    3574:	60bb      	str	r3, [r7, #8]
    3576:	e005      	b.n	3584 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    3578:	68fb      	ldr	r3, [r7, #12]
    357a:	3301      	adds	r3, #1
    357c:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
    357e:	68bb      	ldr	r3, [r7, #8]
    3580:	005b      	lsls	r3, r3, #1
    3582:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
    3584:	683b      	ldr	r3, [r7, #0]
    3586:	685a      	ldr	r2, [r3, #4]
    3588:	68bb      	ldr	r3, [r7, #8]
    358a:	429a      	cmp	r2, r3
    358c:	d8f4      	bhi.n	3578 <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    358e:	68fb      	ldr	r3, [r7, #12]
    3590:	021b      	lsls	r3, r3, #8
    3592:	693a      	ldr	r2, [r7, #16]
    3594:	4313      	orrs	r3, r2
    3596:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    3598:	697b      	ldr	r3, [r7, #20]
    359a:	2280      	movs	r2, #128	; 0x80
    359c:	0352      	lsls	r2, r2, #13
    359e:	4313      	orrs	r3, r2
    35a0:	617b      	str	r3, [r7, #20]
    35a2:	e00a      	b.n	35ba <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    35a4:	683b      	ldr	r3, [r7, #0]
    35a6:	685b      	ldr	r3, [r3, #4]
    35a8:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
    35aa:	693a      	ldr	r2, [r7, #16]
    35ac:	4313      	orrs	r3, r2
    35ae:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    35b0:	697b      	ldr	r3, [r7, #20]
    35b2:	2280      	movs	r2, #128	; 0x80
    35b4:	0292      	lsls	r2, r2, #10
    35b6:	4313      	orrs	r3, r2
    35b8:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    35ba:	683b      	ldr	r3, [r7, #0]
    35bc:	7a1b      	ldrb	r3, [r3, #8]
    35be:	2b00      	cmp	r3, #0
    35c0:	d004      	beq.n	35cc <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    35c2:	697b      	ldr	r3, [r7, #20]
    35c4:	2280      	movs	r2, #128	; 0x80
    35c6:	0392      	lsls	r2, r2, #14
    35c8:	4313      	orrs	r3, r2
    35ca:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    35cc:	46c0      	nop			; (mov r8, r8)
    35ce:	4b13      	ldr	r3, [pc, #76]	; (361c <system_gclk_gen_set_config+0x110>)
    35d0:	4798      	blx	r3
    35d2:	1e03      	subs	r3, r0, #0
    35d4:	d1fb      	bne.n	35ce <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    35d6:	4b12      	ldr	r3, [pc, #72]	; (3620 <system_gclk_gen_set_config+0x114>)
    35d8:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    35da:	4a12      	ldr	r2, [pc, #72]	; (3624 <system_gclk_gen_set_config+0x118>)
    35dc:	1dfb      	adds	r3, r7, #7
    35de:	781b      	ldrb	r3, [r3, #0]
    35e0:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    35e2:	46c0      	nop			; (mov r8, r8)
    35e4:	4b0d      	ldr	r3, [pc, #52]	; (361c <system_gclk_gen_set_config+0x110>)
    35e6:	4798      	blx	r3
    35e8:	1e03      	subs	r3, r0, #0
    35ea:	d1fb      	bne.n	35e4 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    35ec:	4b0e      	ldr	r3, [pc, #56]	; (3628 <system_gclk_gen_set_config+0x11c>)
    35ee:	693a      	ldr	r2, [r7, #16]
    35f0:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    35f2:	46c0      	nop			; (mov r8, r8)
    35f4:	4b09      	ldr	r3, [pc, #36]	; (361c <system_gclk_gen_set_config+0x110>)
    35f6:	4798      	blx	r3
    35f8:	1e03      	subs	r3, r0, #0
    35fa:	d1fb      	bne.n	35f4 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    35fc:	4b0a      	ldr	r3, [pc, #40]	; (3628 <system_gclk_gen_set_config+0x11c>)
    35fe:	4a0a      	ldr	r2, [pc, #40]	; (3628 <system_gclk_gen_set_config+0x11c>)
    3600:	6851      	ldr	r1, [r2, #4]
    3602:	2280      	movs	r2, #128	; 0x80
    3604:	0252      	lsls	r2, r2, #9
    3606:	4011      	ands	r1, r2
    3608:	697a      	ldr	r2, [r7, #20]
    360a:	430a      	orrs	r2, r1
    360c:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    360e:	4b07      	ldr	r3, [pc, #28]	; (362c <system_gclk_gen_set_config+0x120>)
    3610:	4798      	blx	r3
}
    3612:	46c0      	nop			; (mov r8, r8)
    3614:	46bd      	mov	sp, r7
    3616:	b006      	add	sp, #24
    3618:	bd80      	pop	{r7, pc}
    361a:	46c0      	nop			; (mov r8, r8)
    361c:	000034bd 	.word	0x000034bd
    3620:	00003495 	.word	0x00003495
    3624:	40000c08 	.word	0x40000c08
    3628:	40000c00 	.word	0x40000c00
    362c:	000034a9 	.word	0x000034a9

00003630 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    3630:	b580      	push	{r7, lr}
    3632:	b082      	sub	sp, #8
    3634:	af00      	add	r7, sp, #0
    3636:	0002      	movs	r2, r0
    3638:	1dfb      	adds	r3, r7, #7
    363a:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    363c:	46c0      	nop			; (mov r8, r8)
    363e:	4b0e      	ldr	r3, [pc, #56]	; (3678 <system_gclk_gen_enable+0x48>)
    3640:	4798      	blx	r3
    3642:	1e03      	subs	r3, r0, #0
    3644:	d1fb      	bne.n	363e <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    3646:	4b0d      	ldr	r3, [pc, #52]	; (367c <system_gclk_gen_enable+0x4c>)
    3648:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    364a:	4a0d      	ldr	r2, [pc, #52]	; (3680 <system_gclk_gen_enable+0x50>)
    364c:	1dfb      	adds	r3, r7, #7
    364e:	781b      	ldrb	r3, [r3, #0]
    3650:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    3652:	46c0      	nop			; (mov r8, r8)
    3654:	4b08      	ldr	r3, [pc, #32]	; (3678 <system_gclk_gen_enable+0x48>)
    3656:	4798      	blx	r3
    3658:	1e03      	subs	r3, r0, #0
    365a:	d1fb      	bne.n	3654 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    365c:	4b09      	ldr	r3, [pc, #36]	; (3684 <system_gclk_gen_enable+0x54>)
    365e:	4a09      	ldr	r2, [pc, #36]	; (3684 <system_gclk_gen_enable+0x54>)
    3660:	6852      	ldr	r2, [r2, #4]
    3662:	2180      	movs	r1, #128	; 0x80
    3664:	0249      	lsls	r1, r1, #9
    3666:	430a      	orrs	r2, r1
    3668:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    366a:	4b07      	ldr	r3, [pc, #28]	; (3688 <system_gclk_gen_enable+0x58>)
    366c:	4798      	blx	r3
}
    366e:	46c0      	nop			; (mov r8, r8)
    3670:	46bd      	mov	sp, r7
    3672:	b002      	add	sp, #8
    3674:	bd80      	pop	{r7, pc}
    3676:	46c0      	nop			; (mov r8, r8)
    3678:	000034bd 	.word	0x000034bd
    367c:	00003495 	.word	0x00003495
    3680:	40000c04 	.word	0x40000c04
    3684:	40000c00 	.word	0x40000c00
    3688:	000034a9 	.word	0x000034a9

0000368c <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    368c:	b580      	push	{r7, lr}
    368e:	b086      	sub	sp, #24
    3690:	af00      	add	r7, sp, #0
    3692:	0002      	movs	r2, r0
    3694:	1dfb      	adds	r3, r7, #7
    3696:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    3698:	46c0      	nop			; (mov r8, r8)
    369a:	4b2a      	ldr	r3, [pc, #168]	; (3744 <system_gclk_gen_get_hz+0xb8>)
    369c:	4798      	blx	r3
    369e:	1e03      	subs	r3, r0, #0
    36a0:	d1fb      	bne.n	369a <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    36a2:	4b29      	ldr	r3, [pc, #164]	; (3748 <system_gclk_gen_get_hz+0xbc>)
    36a4:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    36a6:	4a29      	ldr	r2, [pc, #164]	; (374c <system_gclk_gen_get_hz+0xc0>)
    36a8:	1dfb      	adds	r3, r7, #7
    36aa:	781b      	ldrb	r3, [r3, #0]
    36ac:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    36ae:	46c0      	nop			; (mov r8, r8)
    36b0:	4b24      	ldr	r3, [pc, #144]	; (3744 <system_gclk_gen_get_hz+0xb8>)
    36b2:	4798      	blx	r3
    36b4:	1e03      	subs	r3, r0, #0
    36b6:	d1fb      	bne.n	36b0 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    36b8:	4b25      	ldr	r3, [pc, #148]	; (3750 <system_gclk_gen_get_hz+0xc4>)
    36ba:	685b      	ldr	r3, [r3, #4]
    36bc:	04db      	lsls	r3, r3, #19
    36be:	0edb      	lsrs	r3, r3, #27
    36c0:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
    36c2:	0018      	movs	r0, r3
    36c4:	4b23      	ldr	r3, [pc, #140]	; (3754 <system_gclk_gen_get_hz+0xc8>)
    36c6:	4798      	blx	r3
    36c8:	0003      	movs	r3, r0
    36ca:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    36cc:	4a1f      	ldr	r2, [pc, #124]	; (374c <system_gclk_gen_get_hz+0xc0>)
    36ce:	1dfb      	adds	r3, r7, #7
    36d0:	781b      	ldrb	r3, [r3, #0]
    36d2:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    36d4:	4b1e      	ldr	r3, [pc, #120]	; (3750 <system_gclk_gen_get_hz+0xc4>)
    36d6:	685b      	ldr	r3, [r3, #4]
    36d8:	02db      	lsls	r3, r3, #11
    36da:	0fdb      	lsrs	r3, r3, #31
    36dc:	b2da      	uxtb	r2, r3
    36de:	2313      	movs	r3, #19
    36e0:	18fb      	adds	r3, r7, r3
    36e2:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    36e4:	4a1c      	ldr	r2, [pc, #112]	; (3758 <system_gclk_gen_get_hz+0xcc>)
    36e6:	1dfb      	adds	r3, r7, #7
    36e8:	781b      	ldrb	r3, [r3, #0]
    36ea:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    36ec:	46c0      	nop			; (mov r8, r8)
    36ee:	4b15      	ldr	r3, [pc, #84]	; (3744 <system_gclk_gen_get_hz+0xb8>)
    36f0:	4798      	blx	r3
    36f2:	1e03      	subs	r3, r0, #0
    36f4:	d1fb      	bne.n	36ee <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    36f6:	4b16      	ldr	r3, [pc, #88]	; (3750 <system_gclk_gen_get_hz+0xc4>)
    36f8:	689b      	ldr	r3, [r3, #8]
    36fa:	021b      	lsls	r3, r3, #8
    36fc:	0c1b      	lsrs	r3, r3, #16
    36fe:	b29b      	uxth	r3, r3
    3700:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    3702:	4b16      	ldr	r3, [pc, #88]	; (375c <system_gclk_gen_get_hz+0xd0>)
    3704:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    3706:	2313      	movs	r3, #19
    3708:	18fb      	adds	r3, r7, r3
    370a:	781b      	ldrb	r3, [r3, #0]
    370c:	2b00      	cmp	r3, #0
    370e:	d109      	bne.n	3724 <system_gclk_gen_get_hz+0x98>
    3710:	68fb      	ldr	r3, [r7, #12]
    3712:	2b01      	cmp	r3, #1
    3714:	d906      	bls.n	3724 <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
    3716:	4b12      	ldr	r3, [pc, #72]	; (3760 <system_gclk_gen_get_hz+0xd4>)
    3718:	68f9      	ldr	r1, [r7, #12]
    371a:	6978      	ldr	r0, [r7, #20]
    371c:	4798      	blx	r3
    371e:	0003      	movs	r3, r0
    3720:	617b      	str	r3, [r7, #20]
    3722:	e00a      	b.n	373a <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
    3724:	2313      	movs	r3, #19
    3726:	18fb      	adds	r3, r7, r3
    3728:	781b      	ldrb	r3, [r3, #0]
    372a:	2b00      	cmp	r3, #0
    372c:	d005      	beq.n	373a <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
    372e:	68fb      	ldr	r3, [r7, #12]
    3730:	3301      	adds	r3, #1
    3732:	697a      	ldr	r2, [r7, #20]
    3734:	40da      	lsrs	r2, r3
    3736:	0013      	movs	r3, r2
    3738:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    373a:	697b      	ldr	r3, [r7, #20]
}
    373c:	0018      	movs	r0, r3
    373e:	46bd      	mov	sp, r7
    3740:	b006      	add	sp, #24
    3742:	bd80      	pop	{r7, pc}
    3744:	000034bd 	.word	0x000034bd
    3748:	00003495 	.word	0x00003495
    374c:	40000c04 	.word	0x40000c04
    3750:	40000c00 	.word	0x40000c00
    3754:	00003149 	.word	0x00003149
    3758:	40000c08 	.word	0x40000c08
    375c:	000034a9 	.word	0x000034a9
    3760:	00005811 	.word	0x00005811

00003764 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    3764:	b580      	push	{r7, lr}
    3766:	b084      	sub	sp, #16
    3768:	af00      	add	r7, sp, #0
    376a:	0002      	movs	r2, r0
    376c:	6039      	str	r1, [r7, #0]
    376e:	1dfb      	adds	r3, r7, #7
    3770:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    3772:	1dfb      	adds	r3, r7, #7
    3774:	781b      	ldrb	r3, [r3, #0]
    3776:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    3778:	683b      	ldr	r3, [r7, #0]
    377a:	781b      	ldrb	r3, [r3, #0]
    377c:	021b      	lsls	r3, r3, #8
    377e:	001a      	movs	r2, r3
    3780:	68fb      	ldr	r3, [r7, #12]
    3782:	4313      	orrs	r3, r2
    3784:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    3786:	1dfb      	adds	r3, r7, #7
    3788:	781b      	ldrb	r3, [r3, #0]
    378a:	0018      	movs	r0, r3
    378c:	4b04      	ldr	r3, [pc, #16]	; (37a0 <system_gclk_chan_set_config+0x3c>)
    378e:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    3790:	4b04      	ldr	r3, [pc, #16]	; (37a4 <system_gclk_chan_set_config+0x40>)
    3792:	68fa      	ldr	r2, [r7, #12]
    3794:	b292      	uxth	r2, r2
    3796:	805a      	strh	r2, [r3, #2]
}
    3798:	46c0      	nop			; (mov r8, r8)
    379a:	46bd      	mov	sp, r7
    379c:	b004      	add	sp, #16
    379e:	bd80      	pop	{r7, pc}
    37a0:	000037f1 	.word	0x000037f1
    37a4:	40000c00 	.word	0x40000c00

000037a8 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    37a8:	b580      	push	{r7, lr}
    37aa:	b082      	sub	sp, #8
    37ac:	af00      	add	r7, sp, #0
    37ae:	0002      	movs	r2, r0
    37b0:	1dfb      	adds	r3, r7, #7
    37b2:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    37b4:	4b0a      	ldr	r3, [pc, #40]	; (37e0 <system_gclk_chan_enable+0x38>)
    37b6:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    37b8:	4a0a      	ldr	r2, [pc, #40]	; (37e4 <system_gclk_chan_enable+0x3c>)
    37ba:	1dfb      	adds	r3, r7, #7
    37bc:	781b      	ldrb	r3, [r3, #0]
    37be:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    37c0:	4909      	ldr	r1, [pc, #36]	; (37e8 <system_gclk_chan_enable+0x40>)
    37c2:	4b09      	ldr	r3, [pc, #36]	; (37e8 <system_gclk_chan_enable+0x40>)
    37c4:	885b      	ldrh	r3, [r3, #2]
    37c6:	b29b      	uxth	r3, r3
    37c8:	2280      	movs	r2, #128	; 0x80
    37ca:	01d2      	lsls	r2, r2, #7
    37cc:	4313      	orrs	r3, r2
    37ce:	b29b      	uxth	r3, r3
    37d0:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    37d2:	4b06      	ldr	r3, [pc, #24]	; (37ec <system_gclk_chan_enable+0x44>)
    37d4:	4798      	blx	r3
}
    37d6:	46c0      	nop			; (mov r8, r8)
    37d8:	46bd      	mov	sp, r7
    37da:	b002      	add	sp, #8
    37dc:	bd80      	pop	{r7, pc}
    37de:	46c0      	nop			; (mov r8, r8)
    37e0:	00003495 	.word	0x00003495
    37e4:	40000c02 	.word	0x40000c02
    37e8:	40000c00 	.word	0x40000c00
    37ec:	000034a9 	.word	0x000034a9

000037f0 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    37f0:	b580      	push	{r7, lr}
    37f2:	b084      	sub	sp, #16
    37f4:	af00      	add	r7, sp, #0
    37f6:	0002      	movs	r2, r0
    37f8:	1dfb      	adds	r3, r7, #7
    37fa:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    37fc:	4b1c      	ldr	r3, [pc, #112]	; (3870 <system_gclk_chan_disable+0x80>)
    37fe:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    3800:	4a1c      	ldr	r2, [pc, #112]	; (3874 <system_gclk_chan_disable+0x84>)
    3802:	1dfb      	adds	r3, r7, #7
    3804:	781b      	ldrb	r3, [r3, #0]
    3806:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    3808:	4b1b      	ldr	r3, [pc, #108]	; (3878 <system_gclk_chan_disable+0x88>)
    380a:	885b      	ldrh	r3, [r3, #2]
    380c:	051b      	lsls	r3, r3, #20
    380e:	0f1b      	lsrs	r3, r3, #28
    3810:	b2db      	uxtb	r3, r3
    3812:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    3814:	4a18      	ldr	r2, [pc, #96]	; (3878 <system_gclk_chan_disable+0x88>)
    3816:	8853      	ldrh	r3, [r2, #2]
    3818:	4918      	ldr	r1, [pc, #96]	; (387c <system_gclk_chan_disable+0x8c>)
    381a:	400b      	ands	r3, r1
    381c:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    381e:	4a16      	ldr	r2, [pc, #88]	; (3878 <system_gclk_chan_disable+0x88>)
    3820:	4b15      	ldr	r3, [pc, #84]	; (3878 <system_gclk_chan_disable+0x88>)
    3822:	885b      	ldrh	r3, [r3, #2]
    3824:	b29b      	uxth	r3, r3
    3826:	4916      	ldr	r1, [pc, #88]	; (3880 <system_gclk_chan_disable+0x90>)
    3828:	400b      	ands	r3, r1
    382a:	b29b      	uxth	r3, r3
    382c:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    382e:	46c0      	nop			; (mov r8, r8)
    3830:	4b11      	ldr	r3, [pc, #68]	; (3878 <system_gclk_chan_disable+0x88>)
    3832:	885b      	ldrh	r3, [r3, #2]
    3834:	b29b      	uxth	r3, r3
    3836:	001a      	movs	r2, r3
    3838:	2380      	movs	r3, #128	; 0x80
    383a:	01db      	lsls	r3, r3, #7
    383c:	4013      	ands	r3, r2
    383e:	d1f7      	bne.n	3830 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    3840:	4a0d      	ldr	r2, [pc, #52]	; (3878 <system_gclk_chan_disable+0x88>)
    3842:	68fb      	ldr	r3, [r7, #12]
    3844:	b2db      	uxtb	r3, r3
    3846:	1c19      	adds	r1, r3, #0
    3848:	230f      	movs	r3, #15
    384a:	400b      	ands	r3, r1
    384c:	b2d9      	uxtb	r1, r3
    384e:	8853      	ldrh	r3, [r2, #2]
    3850:	1c08      	adds	r0, r1, #0
    3852:	210f      	movs	r1, #15
    3854:	4001      	ands	r1, r0
    3856:	0208      	lsls	r0, r1, #8
    3858:	4908      	ldr	r1, [pc, #32]	; (387c <system_gclk_chan_disable+0x8c>)
    385a:	400b      	ands	r3, r1
    385c:	1c19      	adds	r1, r3, #0
    385e:	1c03      	adds	r3, r0, #0
    3860:	430b      	orrs	r3, r1
    3862:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    3864:	4b07      	ldr	r3, [pc, #28]	; (3884 <system_gclk_chan_disable+0x94>)
    3866:	4798      	blx	r3
}
    3868:	46c0      	nop			; (mov r8, r8)
    386a:	46bd      	mov	sp, r7
    386c:	b004      	add	sp, #16
    386e:	bd80      	pop	{r7, pc}
    3870:	00003495 	.word	0x00003495
    3874:	40000c02 	.word	0x40000c02
    3878:	40000c00 	.word	0x40000c00
    387c:	fffff0ff 	.word	0xfffff0ff
    3880:	ffffbfff 	.word	0xffffbfff
    3884:	000034a9 	.word	0x000034a9

00003888 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    3888:	b580      	push	{r7, lr}
    388a:	b084      	sub	sp, #16
    388c:	af00      	add	r7, sp, #0
    388e:	0002      	movs	r2, r0
    3890:	1dfb      	adds	r3, r7, #7
    3892:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    3894:	4b0d      	ldr	r3, [pc, #52]	; (38cc <system_gclk_chan_get_hz+0x44>)
    3896:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    3898:	4a0d      	ldr	r2, [pc, #52]	; (38d0 <system_gclk_chan_get_hz+0x48>)
    389a:	1dfb      	adds	r3, r7, #7
    389c:	781b      	ldrb	r3, [r3, #0]
    389e:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    38a0:	4b0c      	ldr	r3, [pc, #48]	; (38d4 <system_gclk_chan_get_hz+0x4c>)
    38a2:	885b      	ldrh	r3, [r3, #2]
    38a4:	051b      	lsls	r3, r3, #20
    38a6:	0f1b      	lsrs	r3, r3, #28
    38a8:	b2da      	uxtb	r2, r3
    38aa:	230f      	movs	r3, #15
    38ac:	18fb      	adds	r3, r7, r3
    38ae:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    38b0:	4b09      	ldr	r3, [pc, #36]	; (38d8 <system_gclk_chan_get_hz+0x50>)
    38b2:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    38b4:	230f      	movs	r3, #15
    38b6:	18fb      	adds	r3, r7, r3
    38b8:	781b      	ldrb	r3, [r3, #0]
    38ba:	0018      	movs	r0, r3
    38bc:	4b07      	ldr	r3, [pc, #28]	; (38dc <system_gclk_chan_get_hz+0x54>)
    38be:	4798      	blx	r3
    38c0:	0003      	movs	r3, r0
}
    38c2:	0018      	movs	r0, r3
    38c4:	46bd      	mov	sp, r7
    38c6:	b004      	add	sp, #16
    38c8:	bd80      	pop	{r7, pc}
    38ca:	46c0      	nop			; (mov r8, r8)
    38cc:	00003495 	.word	0x00003495
    38d0:	40000c02 	.word	0x40000c02
    38d4:	40000c00 	.word	0x40000c00
    38d8:	000034a9 	.word	0x000034a9
    38dc:	0000368d 	.word	0x0000368d

000038e0 <system_pinmux_get_group_from_gpio_pin>:
{
    38e0:	b580      	push	{r7, lr}
    38e2:	b084      	sub	sp, #16
    38e4:	af00      	add	r7, sp, #0
    38e6:	0002      	movs	r2, r0
    38e8:	1dfb      	adds	r3, r7, #7
    38ea:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    38ec:	230f      	movs	r3, #15
    38ee:	18fb      	adds	r3, r7, r3
    38f0:	1dfa      	adds	r2, r7, #7
    38f2:	7812      	ldrb	r2, [r2, #0]
    38f4:	09d2      	lsrs	r2, r2, #7
    38f6:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    38f8:	230e      	movs	r3, #14
    38fa:	18fb      	adds	r3, r7, r3
    38fc:	1dfa      	adds	r2, r7, #7
    38fe:	7812      	ldrb	r2, [r2, #0]
    3900:	0952      	lsrs	r2, r2, #5
    3902:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    3904:	4b0d      	ldr	r3, [pc, #52]	; (393c <system_pinmux_get_group_from_gpio_pin+0x5c>)
    3906:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    3908:	230f      	movs	r3, #15
    390a:	18fb      	adds	r3, r7, r3
    390c:	781b      	ldrb	r3, [r3, #0]
    390e:	2b00      	cmp	r3, #0
    3910:	d10f      	bne.n	3932 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    3912:	230f      	movs	r3, #15
    3914:	18fb      	adds	r3, r7, r3
    3916:	781b      	ldrb	r3, [r3, #0]
    3918:	009b      	lsls	r3, r3, #2
    391a:	2210      	movs	r2, #16
    391c:	4694      	mov	ip, r2
    391e:	44bc      	add	ip, r7
    3920:	4463      	add	r3, ip
    3922:	3b08      	subs	r3, #8
    3924:	681a      	ldr	r2, [r3, #0]
    3926:	230e      	movs	r3, #14
    3928:	18fb      	adds	r3, r7, r3
    392a:	781b      	ldrb	r3, [r3, #0]
    392c:	01db      	lsls	r3, r3, #7
    392e:	18d3      	adds	r3, r2, r3
    3930:	e000      	b.n	3934 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    3932:	2300      	movs	r3, #0
}
    3934:	0018      	movs	r0, r3
    3936:	46bd      	mov	sp, r7
    3938:	b004      	add	sp, #16
    393a:	bd80      	pop	{r7, pc}
    393c:	41004400 	.word	0x41004400

00003940 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    3940:	b580      	push	{r7, lr}
    3942:	b088      	sub	sp, #32
    3944:	af00      	add	r7, sp, #0
    3946:	60f8      	str	r0, [r7, #12]
    3948:	60b9      	str	r1, [r7, #8]
    394a:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    394c:	2300      	movs	r3, #0
    394e:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    3950:	687b      	ldr	r3, [r7, #4]
    3952:	78db      	ldrb	r3, [r3, #3]
    3954:	2201      	movs	r2, #1
    3956:	4053      	eors	r3, r2
    3958:	b2db      	uxtb	r3, r3
    395a:	2b00      	cmp	r3, #0
    395c:	d035      	beq.n	39ca <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    395e:	687b      	ldr	r3, [r7, #4]
    3960:	781b      	ldrb	r3, [r3, #0]
    3962:	2b80      	cmp	r3, #128	; 0x80
    3964:	d00b      	beq.n	397e <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    3966:	69fb      	ldr	r3, [r7, #28]
    3968:	2280      	movs	r2, #128	; 0x80
    396a:	0252      	lsls	r2, r2, #9
    396c:	4313      	orrs	r3, r2
    396e:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    3970:	687b      	ldr	r3, [r7, #4]
    3972:	781b      	ldrb	r3, [r3, #0]
    3974:	061b      	lsls	r3, r3, #24
    3976:	001a      	movs	r2, r3
    3978:	69fb      	ldr	r3, [r7, #28]
    397a:	4313      	orrs	r3, r2
    397c:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    397e:	687b      	ldr	r3, [r7, #4]
    3980:	785b      	ldrb	r3, [r3, #1]
    3982:	2b00      	cmp	r3, #0
    3984:	d003      	beq.n	398e <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    3986:	687b      	ldr	r3, [r7, #4]
    3988:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    398a:	2b02      	cmp	r3, #2
    398c:	d110      	bne.n	39b0 <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    398e:	69fb      	ldr	r3, [r7, #28]
    3990:	2280      	movs	r2, #128	; 0x80
    3992:	0292      	lsls	r2, r2, #10
    3994:	4313      	orrs	r3, r2
    3996:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    3998:	687b      	ldr	r3, [r7, #4]
    399a:	789b      	ldrb	r3, [r3, #2]
    399c:	2b00      	cmp	r3, #0
    399e:	d004      	beq.n	39aa <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    39a0:	69fb      	ldr	r3, [r7, #28]
    39a2:	2280      	movs	r2, #128	; 0x80
    39a4:	02d2      	lsls	r2, r2, #11
    39a6:	4313      	orrs	r3, r2
    39a8:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    39aa:	68fb      	ldr	r3, [r7, #12]
    39ac:	68ba      	ldr	r2, [r7, #8]
    39ae:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    39b0:	687b      	ldr	r3, [r7, #4]
    39b2:	785b      	ldrb	r3, [r3, #1]
    39b4:	2b01      	cmp	r3, #1
    39b6:	d003      	beq.n	39c0 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    39b8:	687b      	ldr	r3, [r7, #4]
    39ba:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    39bc:	2b02      	cmp	r3, #2
    39be:	d107      	bne.n	39d0 <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    39c0:	69fb      	ldr	r3, [r7, #28]
    39c2:	4a22      	ldr	r2, [pc, #136]	; (3a4c <_system_pinmux_config+0x10c>)
    39c4:	4013      	ands	r3, r2
    39c6:	61fb      	str	r3, [r7, #28]
    39c8:	e002      	b.n	39d0 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    39ca:	68fb      	ldr	r3, [r7, #12]
    39cc:	68ba      	ldr	r2, [r7, #8]
    39ce:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    39d0:	68bb      	ldr	r3, [r7, #8]
    39d2:	041b      	lsls	r3, r3, #16
    39d4:	0c1b      	lsrs	r3, r3, #16
    39d6:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    39d8:	68bb      	ldr	r3, [r7, #8]
    39da:	0c1b      	lsrs	r3, r3, #16
    39dc:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    39de:	69ba      	ldr	r2, [r7, #24]
    39e0:	69fb      	ldr	r3, [r7, #28]
    39e2:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    39e4:	22a0      	movs	r2, #160	; 0xa0
    39e6:	05d2      	lsls	r2, r2, #23
    39e8:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    39ea:	68fb      	ldr	r3, [r7, #12]
    39ec:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    39ee:	697a      	ldr	r2, [r7, #20]
    39f0:	69fb      	ldr	r3, [r7, #28]
    39f2:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    39f4:	22d0      	movs	r2, #208	; 0xd0
    39f6:	0612      	lsls	r2, r2, #24
    39f8:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    39fa:	68fb      	ldr	r3, [r7, #12]
    39fc:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    39fe:	687b      	ldr	r3, [r7, #4]
    3a00:	78db      	ldrb	r3, [r3, #3]
    3a02:	2201      	movs	r2, #1
    3a04:	4053      	eors	r3, r2
    3a06:	b2db      	uxtb	r3, r3
    3a08:	2b00      	cmp	r3, #0
    3a0a:	d01a      	beq.n	3a42 <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    3a0c:	69fa      	ldr	r2, [r7, #28]
    3a0e:	2380      	movs	r3, #128	; 0x80
    3a10:	02db      	lsls	r3, r3, #11
    3a12:	4013      	ands	r3, r2
    3a14:	d00a      	beq.n	3a2c <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    3a16:	687b      	ldr	r3, [r7, #4]
    3a18:	789b      	ldrb	r3, [r3, #2]
    3a1a:	2b01      	cmp	r3, #1
    3a1c:	d103      	bne.n	3a26 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    3a1e:	68fb      	ldr	r3, [r7, #12]
    3a20:	68ba      	ldr	r2, [r7, #8]
    3a22:	619a      	str	r2, [r3, #24]
    3a24:	e002      	b.n	3a2c <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    3a26:	68fb      	ldr	r3, [r7, #12]
    3a28:	68ba      	ldr	r2, [r7, #8]
    3a2a:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    3a2c:	687b      	ldr	r3, [r7, #4]
    3a2e:	785b      	ldrb	r3, [r3, #1]
    3a30:	2b01      	cmp	r3, #1
    3a32:	d003      	beq.n	3a3c <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    3a34:	687b      	ldr	r3, [r7, #4]
    3a36:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    3a38:	2b02      	cmp	r3, #2
    3a3a:	d102      	bne.n	3a42 <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    3a3c:	68fb      	ldr	r3, [r7, #12]
    3a3e:	68ba      	ldr	r2, [r7, #8]
    3a40:	609a      	str	r2, [r3, #8]
		}
	}
}
    3a42:	46c0      	nop			; (mov r8, r8)
    3a44:	46bd      	mov	sp, r7
    3a46:	b008      	add	sp, #32
    3a48:	bd80      	pop	{r7, pc}
    3a4a:	46c0      	nop			; (mov r8, r8)
    3a4c:	fffbffff 	.word	0xfffbffff

00003a50 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    3a50:	b580      	push	{r7, lr}
    3a52:	b084      	sub	sp, #16
    3a54:	af00      	add	r7, sp, #0
    3a56:	0002      	movs	r2, r0
    3a58:	6039      	str	r1, [r7, #0]
    3a5a:	1dfb      	adds	r3, r7, #7
    3a5c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    3a5e:	1dfb      	adds	r3, r7, #7
    3a60:	781b      	ldrb	r3, [r3, #0]
    3a62:	0018      	movs	r0, r3
    3a64:	4b0a      	ldr	r3, [pc, #40]	; (3a90 <system_pinmux_pin_set_config+0x40>)
    3a66:	4798      	blx	r3
    3a68:	0003      	movs	r3, r0
    3a6a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    3a6c:	1dfb      	adds	r3, r7, #7
    3a6e:	781b      	ldrb	r3, [r3, #0]
    3a70:	221f      	movs	r2, #31
    3a72:	4013      	ands	r3, r2
    3a74:	2201      	movs	r2, #1
    3a76:	409a      	lsls	r2, r3
    3a78:	0013      	movs	r3, r2
    3a7a:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    3a7c:	683a      	ldr	r2, [r7, #0]
    3a7e:	68b9      	ldr	r1, [r7, #8]
    3a80:	68fb      	ldr	r3, [r7, #12]
    3a82:	0018      	movs	r0, r3
    3a84:	4b03      	ldr	r3, [pc, #12]	; (3a94 <system_pinmux_pin_set_config+0x44>)
    3a86:	4798      	blx	r3
}
    3a88:	46c0      	nop			; (mov r8, r8)
    3a8a:	46bd      	mov	sp, r7
    3a8c:	b004      	add	sp, #16
    3a8e:	bd80      	pop	{r7, pc}
    3a90:	000038e1 	.word	0x000038e1
    3a94:	00003941 	.word	0x00003941

00003a98 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    3a98:	b580      	push	{r7, lr}
    3a9a:	af00      	add	r7, sp, #0
	return;
    3a9c:	46c0      	nop			; (mov r8, r8)
}
    3a9e:	46bd      	mov	sp, r7
    3aa0:	bd80      	pop	{r7, pc}
	...

00003aa4 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    3aa4:	b580      	push	{r7, lr}
    3aa6:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    3aa8:	4b06      	ldr	r3, [pc, #24]	; (3ac4 <system_init+0x20>)
    3aaa:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    3aac:	4b06      	ldr	r3, [pc, #24]	; (3ac8 <system_init+0x24>)
    3aae:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    3ab0:	4b06      	ldr	r3, [pc, #24]	; (3acc <system_init+0x28>)
    3ab2:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    3ab4:	4b06      	ldr	r3, [pc, #24]	; (3ad0 <system_init+0x2c>)
    3ab6:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    3ab8:	4b06      	ldr	r3, [pc, #24]	; (3ad4 <system_init+0x30>)
    3aba:	4798      	blx	r3
}
    3abc:	46c0      	nop			; (mov r8, r8)
    3abe:	46bd      	mov	sp, r7
    3ac0:	bd80      	pop	{r7, pc}
    3ac2:	46c0      	nop			; (mov r8, r8)
    3ac4:	00003365 	.word	0x00003365
    3ac8:	00002f51 	.word	0x00002f51
    3acc:	00003a99 	.word	0x00003a99
    3ad0:	00000455 	.word	0x00000455
    3ad4:	00003a99 	.word	0x00003a99

00003ad8 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    3ad8:	b580      	push	{r7, lr}
    3ada:	b082      	sub	sp, #8
    3adc:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    3ade:	4b2f      	ldr	r3, [pc, #188]	; (3b9c <Reset_Handler+0xc4>)
    3ae0:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    3ae2:	4b2f      	ldr	r3, [pc, #188]	; (3ba0 <Reset_Handler+0xc8>)
    3ae4:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    3ae6:	687a      	ldr	r2, [r7, #4]
    3ae8:	683b      	ldr	r3, [r7, #0]
    3aea:	429a      	cmp	r2, r3
    3aec:	d00c      	beq.n	3b08 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    3aee:	e007      	b.n	3b00 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    3af0:	683b      	ldr	r3, [r7, #0]
    3af2:	1d1a      	adds	r2, r3, #4
    3af4:	603a      	str	r2, [r7, #0]
    3af6:	687a      	ldr	r2, [r7, #4]
    3af8:	1d11      	adds	r1, r2, #4
    3afa:	6079      	str	r1, [r7, #4]
    3afc:	6812      	ldr	r2, [r2, #0]
    3afe:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
    3b00:	683a      	ldr	r2, [r7, #0]
    3b02:	4b28      	ldr	r3, [pc, #160]	; (3ba4 <Reset_Handler+0xcc>)
    3b04:	429a      	cmp	r2, r3
    3b06:	d3f3      	bcc.n	3af0 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    3b08:	4b27      	ldr	r3, [pc, #156]	; (3ba8 <Reset_Handler+0xd0>)
    3b0a:	603b      	str	r3, [r7, #0]
    3b0c:	e004      	b.n	3b18 <Reset_Handler+0x40>
                *pDest++ = 0;
    3b0e:	683b      	ldr	r3, [r7, #0]
    3b10:	1d1a      	adds	r2, r3, #4
    3b12:	603a      	str	r2, [r7, #0]
    3b14:	2200      	movs	r2, #0
    3b16:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
    3b18:	683a      	ldr	r2, [r7, #0]
    3b1a:	4b24      	ldr	r3, [pc, #144]	; (3bac <Reset_Handler+0xd4>)
    3b1c:	429a      	cmp	r2, r3
    3b1e:	d3f6      	bcc.n	3b0e <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    3b20:	4b23      	ldr	r3, [pc, #140]	; (3bb0 <Reset_Handler+0xd8>)
    3b22:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    3b24:	4b23      	ldr	r3, [pc, #140]	; (3bb4 <Reset_Handler+0xdc>)
    3b26:	687a      	ldr	r2, [r7, #4]
    3b28:	21ff      	movs	r1, #255	; 0xff
    3b2a:	438a      	bics	r2, r1
    3b2c:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    3b2e:	4a22      	ldr	r2, [pc, #136]	; (3bb8 <Reset_Handler+0xe0>)
    3b30:	2390      	movs	r3, #144	; 0x90
    3b32:	005b      	lsls	r3, r3, #1
    3b34:	2102      	movs	r1, #2
    3b36:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    3b38:	4a20      	ldr	r2, [pc, #128]	; (3bbc <Reset_Handler+0xe4>)
    3b3a:	78d3      	ldrb	r3, [r2, #3]
    3b3c:	2103      	movs	r1, #3
    3b3e:	438b      	bics	r3, r1
    3b40:	1c19      	adds	r1, r3, #0
    3b42:	2302      	movs	r3, #2
    3b44:	430b      	orrs	r3, r1
    3b46:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    3b48:	4a1c      	ldr	r2, [pc, #112]	; (3bbc <Reset_Handler+0xe4>)
    3b4a:	78d3      	ldrb	r3, [r2, #3]
    3b4c:	210c      	movs	r1, #12
    3b4e:	438b      	bics	r3, r1
    3b50:	1c19      	adds	r1, r3, #0
    3b52:	2308      	movs	r3, #8
    3b54:	430b      	orrs	r3, r1
    3b56:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    3b58:	4a19      	ldr	r2, [pc, #100]	; (3bc0 <Reset_Handler+0xe8>)
    3b5a:	7b93      	ldrb	r3, [r2, #14]
    3b5c:	2130      	movs	r1, #48	; 0x30
    3b5e:	438b      	bics	r3, r1
    3b60:	1c19      	adds	r1, r3, #0
    3b62:	2320      	movs	r3, #32
    3b64:	430b      	orrs	r3, r1
    3b66:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    3b68:	4a15      	ldr	r2, [pc, #84]	; (3bc0 <Reset_Handler+0xe8>)
    3b6a:	7b93      	ldrb	r3, [r2, #14]
    3b6c:	210c      	movs	r1, #12
    3b6e:	438b      	bics	r3, r1
    3b70:	1c19      	adds	r1, r3, #0
    3b72:	2308      	movs	r3, #8
    3b74:	430b      	orrs	r3, r1
    3b76:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    3b78:	4a11      	ldr	r2, [pc, #68]	; (3bc0 <Reset_Handler+0xe8>)
    3b7a:	7b93      	ldrb	r3, [r2, #14]
    3b7c:	2103      	movs	r1, #3
    3b7e:	438b      	bics	r3, r1
    3b80:	1c19      	adds	r1, r3, #0
    3b82:	2302      	movs	r3, #2
    3b84:	430b      	orrs	r3, r1
    3b86:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    3b88:	4a0e      	ldr	r2, [pc, #56]	; (3bc4 <Reset_Handler+0xec>)
    3b8a:	6853      	ldr	r3, [r2, #4]
    3b8c:	2180      	movs	r1, #128	; 0x80
    3b8e:	430b      	orrs	r3, r1
    3b90:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    3b92:	4b0d      	ldr	r3, [pc, #52]	; (3bc8 <Reset_Handler+0xf0>)
    3b94:	4798      	blx	r3

        /* Branch to main function */
        main();
    3b96:	4b0d      	ldr	r3, [pc, #52]	; (3bcc <Reset_Handler+0xf4>)
    3b98:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    3b9a:	e7fe      	b.n	3b9a <Reset_Handler+0xc2>
    3b9c:	0000830c 	.word	0x0000830c
    3ba0:	20000000 	.word	0x20000000
    3ba4:	20000078 	.word	0x20000078
    3ba8:	20000078 	.word	0x20000078
    3bac:	200001e4 	.word	0x200001e4
    3bb0:	00000000 	.word	0x00000000
    3bb4:	e000ed00 	.word	0xe000ed00
    3bb8:	41007000 	.word	0x41007000
    3bbc:	41005000 	.word	0x41005000
    3bc0:	41004800 	.word	0x41004800
    3bc4:	41004000 	.word	0x41004000
    3bc8:	000078a1 	.word	0x000078a1
    3bcc:	00003dd1 	.word	0x00003dd1

00003bd0 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
uint32_t phantomISR = 9999;

void Dummy_Handler(void)
{
    3bd0:	b580      	push	{r7, lr}
    3bd2:	b082      	sub	sp, #8
    3bd4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    3bd6:	f3ef 8305 	mrs	r3, IPSR
    3bda:	607b      	str	r3, [r7, #4]
  return(result);
    3bdc:	687a      	ldr	r2, [r7, #4]
        while (1) {
			phantomISR = __get_IPSR();
    3bde:	4b01      	ldr	r3, [pc, #4]	; (3be4 <Dummy_Handler+0x14>)
    3be0:	601a      	str	r2, [r3, #0]
    3be2:	e7f8      	b.n	3bd6 <Dummy_Handler+0x6>
    3be4:	2000000c 	.word	0x2000000c

00003be8 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    3be8:	b580      	push	{r7, lr}
    3bea:	b084      	sub	sp, #16
    3bec:	af00      	add	r7, sp, #0
    3bee:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    3bf0:	4b0a      	ldr	r3, [pc, #40]	; (3c1c <_sbrk+0x34>)
    3bf2:	681b      	ldr	r3, [r3, #0]
    3bf4:	2b00      	cmp	r3, #0
    3bf6:	d102      	bne.n	3bfe <_sbrk+0x16>
		heap = (unsigned char *)&_end;
    3bf8:	4b08      	ldr	r3, [pc, #32]	; (3c1c <_sbrk+0x34>)
    3bfa:	4a09      	ldr	r2, [pc, #36]	; (3c20 <_sbrk+0x38>)
    3bfc:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    3bfe:	4b07      	ldr	r3, [pc, #28]	; (3c1c <_sbrk+0x34>)
    3c00:	681b      	ldr	r3, [r3, #0]
    3c02:	60fb      	str	r3, [r7, #12]

	heap += incr;
    3c04:	4b05      	ldr	r3, [pc, #20]	; (3c1c <_sbrk+0x34>)
    3c06:	681a      	ldr	r2, [r3, #0]
    3c08:	687b      	ldr	r3, [r7, #4]
    3c0a:	18d2      	adds	r2, r2, r3
    3c0c:	4b03      	ldr	r3, [pc, #12]	; (3c1c <_sbrk+0x34>)
    3c0e:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
    3c10:	68fb      	ldr	r3, [r7, #12]
}
    3c12:	0018      	movs	r0, r3
    3c14:	46bd      	mov	sp, r7
    3c16:	b004      	add	sp, #16
    3c18:	bd80      	pop	{r7, pc}
    3c1a:	46c0      	nop			; (mov r8, r8)
    3c1c:	200000b8 	.word	0x200000b8
    3c20:	200021e8 	.word	0x200021e8

00003c24 <system_set_sleepmode>:
 * \retval STATUS_ERR_INVALID_ARG  The requested sleep mode was invalid or not
 *                                 available
 */
static inline enum status_code system_set_sleepmode(
	const enum system_sleepmode sleep_mode)
{
    3c24:	b580      	push	{r7, lr}
    3c26:	b084      	sub	sp, #16
    3c28:	af00      	add	r7, sp, #0
    3c2a:	0002      	movs	r2, r0
    3c2c:	1dfb      	adds	r3, r7, #7
    3c2e:	701a      	strb	r2, [r3, #0]

#if (SAMD20 || SAMD21 || SAMR21)

	/* Get MCU revision */
	uint32_t rev = DSU->DID.reg;
    3c30:	4b1a      	ldr	r3, [pc, #104]	; (3c9c <system_set_sleepmode+0x78>)
    3c32:	699b      	ldr	r3, [r3, #24]
    3c34:	60fb      	str	r3, [r7, #12]

	rev &= DSU_DID_REVISION_Msk;
    3c36:	68fa      	ldr	r2, [r7, #12]
    3c38:	23f0      	movs	r3, #240	; 0xf0
    3c3a:	011b      	lsls	r3, r3, #4
    3c3c:	4013      	ands	r3, r2
    3c3e:	60fb      	str	r3, [r7, #12]
	rev = rev >> DSU_DID_REVISION_Pos;
    3c40:	68fb      	ldr	r3, [r7, #12]
    3c42:	0a1b      	lsrs	r3, r3, #8
    3c44:	60fb      	str	r3, [r7, #12]
		NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
	}
#endif

#if (SAMD21 || SAMR21)
	if (rev < _SYSTEM_MCU_REVISION_D) {
    3c46:	68fb      	ldr	r3, [r7, #12]
    3c48:	2b02      	cmp	r3, #2
    3c4a:	d805      	bhi.n	3c58 <system_set_sleepmode+0x34>
		/* Errata 13140: Make sure that the Flash does not power all the way down
		 * when in sleep mode. */
		NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
    3c4c:	4a14      	ldr	r2, [pc, #80]	; (3ca0 <system_set_sleepmode+0x7c>)
    3c4e:	6853      	ldr	r3, [r2, #4]
    3c50:	21c0      	movs	r1, #192	; 0xc0
    3c52:	0089      	lsls	r1, r1, #2
    3c54:	430b      	orrs	r3, r1
    3c56:	6053      	str	r3, [r2, #4]
	}
#endif

#endif

	switch (sleep_mode) {
    3c58:	1dfb      	adds	r3, r7, #7
    3c5a:	781b      	ldrb	r3, [r3, #0]
    3c5c:	2b00      	cmp	r3, #0
    3c5e:	db16      	blt.n	3c8e <system_set_sleepmode+0x6a>
    3c60:	2b02      	cmp	r3, #2
    3c62:	dd02      	ble.n	3c6a <system_set_sleepmode+0x46>
    3c64:	2b03      	cmp	r3, #3
    3c66:	d00b      	beq.n	3c80 <system_set_sleepmode+0x5c>
    3c68:	e011      	b.n	3c8e <system_set_sleepmode+0x6a>
		case SYSTEM_SLEEPMODE_IDLE_0:
		case SYSTEM_SLEEPMODE_IDLE_1:
		case SYSTEM_SLEEPMODE_IDLE_2:
			SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
    3c6a:	4b0e      	ldr	r3, [pc, #56]	; (3ca4 <system_set_sleepmode+0x80>)
    3c6c:	4a0d      	ldr	r2, [pc, #52]	; (3ca4 <system_set_sleepmode+0x80>)
    3c6e:	6912      	ldr	r2, [r2, #16]
    3c70:	2104      	movs	r1, #4
    3c72:	438a      	bics	r2, r1
    3c74:	611a      	str	r2, [r3, #16]
			PM->SLEEP.reg = sleep_mode;
    3c76:	4a0c      	ldr	r2, [pc, #48]	; (3ca8 <system_set_sleepmode+0x84>)
    3c78:	1dfb      	adds	r3, r7, #7
    3c7a:	781b      	ldrb	r3, [r3, #0]
    3c7c:	7053      	strb	r3, [r2, #1]
			break;
    3c7e:	e008      	b.n	3c92 <system_set_sleepmode+0x6e>

		case SYSTEM_SLEEPMODE_STANDBY:
			SCB->SCR |=  SCB_SCR_SLEEPDEEP_Msk;
    3c80:	4b08      	ldr	r3, [pc, #32]	; (3ca4 <system_set_sleepmode+0x80>)
    3c82:	4a08      	ldr	r2, [pc, #32]	; (3ca4 <system_set_sleepmode+0x80>)
    3c84:	6912      	ldr	r2, [r2, #16]
    3c86:	2104      	movs	r1, #4
    3c88:	430a      	orrs	r2, r1
    3c8a:	611a      	str	r2, [r3, #16]
			break;
    3c8c:	e001      	b.n	3c92 <system_set_sleepmode+0x6e>

		default:
			return STATUS_ERR_INVALID_ARG;
    3c8e:	2317      	movs	r3, #23
    3c90:	e000      	b.n	3c94 <system_set_sleepmode+0x70>
	}

	return STATUS_OK;
    3c92:	2300      	movs	r3, #0
}
    3c94:	0018      	movs	r0, r3
    3c96:	46bd      	mov	sp, r7
    3c98:	b004      	add	sp, #16
    3c9a:	bd80      	pop	{r7, pc}
    3c9c:	41002000 	.word	0x41002000
    3ca0:	41004000 	.word	0x41004000
    3ca4:	e000ed00 	.word	0xe000ed00
    3ca8:	40000400 	.word	0x40000400

00003cac <system_sleep>:
 * all ongoing memory accesses have completed, then a WFI (Wait For Interrupt)
 * instruction to place the device into the sleep mode specified by
 * \ref system_set_sleepmode until woken by an interrupt.
 */
static inline void system_sleep(void)
{
    3cac:	b580      	push	{r7, lr}
    3cae:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb");
    3cb0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("wfi");
    3cb4:	bf30      	wfi
	__DSB();
	__WFI();
}
    3cb6:	46c0      	nop			; (mov r8, r8)
    3cb8:	46bd      	mov	sp, r7
    3cba:	bd80      	pop	{r7, pc}

00003cbc <sleepmgr_sleep>:
extern uint8_t sleepmgr_locks[];
#endif /* CONFIG_SLEEPMGR_ENABLE */
/** @} */

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
    3cbc:	b580      	push	{r7, lr}
    3cbe:	b082      	sub	sp, #8
    3cc0:	af00      	add	r7, sp, #0
    3cc2:	0002      	movs	r2, r0
    3cc4:	1dfb      	adds	r3, r7, #7
    3cc6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    3cc8:	b672      	cpsid	i
  __ASM volatile ("dmb");
    3cca:	f3bf 8f5f 	dmb	sy
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	cpu_irq_disable();
    3cce:	4b0b      	ldr	r3, [pc, #44]	; (3cfc <sleepmgr_sleep+0x40>)
    3cd0:	2200      	movs	r2, #0
    3cd2:	701a      	strb	r2, [r3, #0]

	/* Enter the sleep mode. */
	system_set_sleepmode((enum system_sleepmode)(sleep_mode - 1));
    3cd4:	1dfb      	adds	r3, r7, #7
    3cd6:	781b      	ldrb	r3, [r3, #0]
    3cd8:	3b01      	subs	r3, #1
    3cda:	b2db      	uxtb	r3, r3
    3cdc:	0018      	movs	r0, r3
    3cde:	4b08      	ldr	r3, [pc, #32]	; (3d00 <sleepmgr_sleep+0x44>)
    3ce0:	4798      	blx	r3
	cpu_irq_enable();
    3ce2:	4b06      	ldr	r3, [pc, #24]	; (3cfc <sleepmgr_sleep+0x40>)
    3ce4:	2201      	movs	r2, #1
    3ce6:	701a      	strb	r2, [r3, #0]
    3ce8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3cec:	b662      	cpsie	i
	system_sleep();
    3cee:	4b05      	ldr	r3, [pc, #20]	; (3d04 <sleepmgr_sleep+0x48>)
    3cf0:	4798      	blx	r3
#else
	UNUSED(sleep_mode);
	cpu_irq_enable();
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
    3cf2:	46c0      	nop			; (mov r8, r8)
    3cf4:	46bd      	mov	sp, r7
    3cf6:	b002      	add	sp, #8
    3cf8:	bd80      	pop	{r7, pc}
    3cfa:	46c0      	nop			; (mov r8, r8)
    3cfc:	20000008 	.word	0x20000008
    3d00:	00003c25 	.word	0x00003c25
    3d04:	00003cad 	.word	0x00003cad

00003d08 <sleepmgr_init>:
 * Sets all lock counts to 0, except the very last one, which is set to 1. This
 * is done to simplify the algorithm for finding the deepest allowable sleep
 * mode in \ref sleepmgr_enter_sleep.
 */
static inline void sleepmgr_init(void)
{
    3d08:	b580      	push	{r7, lr}
    3d0a:	b082      	sub	sp, #8
    3d0c:	af00      	add	r7, sp, #0
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
    3d0e:	1dfb      	adds	r3, r7, #7
    3d10:	2200      	movs	r2, #0
    3d12:	701a      	strb	r2, [r3, #0]
    3d14:	e009      	b.n	3d2a <sleepmgr_init+0x22>
		sleepmgr_locks[i] = 0;
    3d16:	1dfb      	adds	r3, r7, #7
    3d18:	781b      	ldrb	r3, [r3, #0]
    3d1a:	4a09      	ldr	r2, [pc, #36]	; (3d40 <sleepmgr_init+0x38>)
    3d1c:	2100      	movs	r1, #0
    3d1e:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
    3d20:	1dfb      	adds	r3, r7, #7
    3d22:	781a      	ldrb	r2, [r3, #0]
    3d24:	1dfb      	adds	r3, r7, #7
    3d26:	3201      	adds	r2, #1
    3d28:	701a      	strb	r2, [r3, #0]
    3d2a:	1dfb      	adds	r3, r7, #7
    3d2c:	781b      	ldrb	r3, [r3, #0]
    3d2e:	2b03      	cmp	r3, #3
    3d30:	d9f1      	bls.n	3d16 <sleepmgr_init+0xe>
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    3d32:	4b03      	ldr	r3, [pc, #12]	; (3d40 <sleepmgr_init+0x38>)
    3d34:	2201      	movs	r2, #1
    3d36:	711a      	strb	r2, [r3, #4]
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
    3d38:	46c0      	nop			; (mov r8, r8)
    3d3a:	46bd      	mov	sp, r7
    3d3c:	b002      	add	sp, #8
    3d3e:	bd80      	pop	{r7, pc}
    3d40:	2000010c 	.word	0x2000010c

00003d44 <sleepmgr_get_sleep_mode>:
 * Searches through the sleep mode lock counts, starting at the shallowest sleep
 * mode, until the first non-zero lock count is found. The deepest allowable
 * sleep mode is then returned.
 */
static inline enum sleepmgr_mode sleepmgr_get_sleep_mode(void)
{
    3d44:	b580      	push	{r7, lr}
    3d46:	b082      	sub	sp, #8
    3d48:	af00      	add	r7, sp, #0
	enum sleepmgr_mode sleep_mode = SLEEPMGR_ACTIVE;
    3d4a:	1dfb      	adds	r3, r7, #7
    3d4c:	2200      	movs	r2, #0
    3d4e:	701a      	strb	r2, [r3, #0]

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;
    3d50:	4b0a      	ldr	r3, [pc, #40]	; (3d7c <sleepmgr_get_sleep_mode+0x38>)
    3d52:	603b      	str	r3, [r7, #0]

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    3d54:	e007      	b.n	3d66 <sleepmgr_get_sleep_mode+0x22>
		lock_ptr++;
    3d56:	683b      	ldr	r3, [r7, #0]
    3d58:	3301      	adds	r3, #1
    3d5a:	603b      	str	r3, [r7, #0]
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
    3d5c:	1dfb      	adds	r3, r7, #7
    3d5e:	1dfa      	adds	r2, r7, #7
    3d60:	7812      	ldrb	r2, [r2, #0]
    3d62:	3201      	adds	r2, #1
    3d64:	701a      	strb	r2, [r3, #0]
	while (!(*lock_ptr)) {
    3d66:	683b      	ldr	r3, [r7, #0]
    3d68:	781b      	ldrb	r3, [r3, #0]
    3d6a:	2b00      	cmp	r3, #0
    3d6c:	d0f3      	beq.n	3d56 <sleepmgr_get_sleep_mode+0x12>
	// performed on the deepest sleep mode.
	Assert((uintptr_t)(lock_ptr - sleepmgr_locks) < SLEEPMGR_NR_OF_MODES);

#endif /* CONFIG_SLEEPMGR_ENABLE */

	return sleep_mode;
    3d6e:	1dfb      	adds	r3, r7, #7
    3d70:	781b      	ldrb	r3, [r3, #0]
}
    3d72:	0018      	movs	r0, r3
    3d74:	46bd      	mov	sp, r7
    3d76:	b002      	add	sp, #8
    3d78:	bd80      	pop	{r7, pc}
    3d7a:	46c0      	nop			; (mov r8, r8)
    3d7c:	2000010c 	.word	0x2000010c

00003d80 <sleepmgr_enter_sleep>:
 * them enabled upon return. This also applies if sleep is skipped due to ACTIVE
 * mode being locked.
 */

static inline void sleepmgr_enter_sleep(void)
{
    3d80:	b590      	push	{r4, r7, lr}
    3d82:	b083      	sub	sp, #12
    3d84:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
    3d86:	b672      	cpsid	i
    3d88:	f3bf 8f5f 	dmb	sy
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
    3d8c:	4b0d      	ldr	r3, [pc, #52]	; (3dc4 <sleepmgr_enter_sleep+0x44>)
    3d8e:	2200      	movs	r2, #0
    3d90:	701a      	strb	r2, [r3, #0]

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
    3d92:	1dfc      	adds	r4, r7, #7
    3d94:	4b0c      	ldr	r3, [pc, #48]	; (3dc8 <sleepmgr_enter_sleep+0x48>)
    3d96:	4798      	blx	r3
    3d98:	0003      	movs	r3, r0
    3d9a:	7023      	strb	r3, [r4, #0]
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
    3d9c:	1dfb      	adds	r3, r7, #7
    3d9e:	781b      	ldrb	r3, [r3, #0]
    3da0:	2b00      	cmp	r3, #0
    3da2:	d106      	bne.n	3db2 <sleepmgr_enter_sleep+0x32>
		cpu_irq_enable();
    3da4:	4b07      	ldr	r3, [pc, #28]	; (3dc4 <sleepmgr_enter_sleep+0x44>)
    3da6:	2201      	movs	r2, #1
    3da8:	701a      	strb	r2, [r3, #0]
    3daa:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3dae:	b662      	cpsie	i
		return;
    3db0:	e004      	b.n	3dbc <sleepmgr_enter_sleep+0x3c>
	}
	// Enter the deepest allowable sleep mode with interrupts enabled
	sleepmgr_sleep(sleep_mode);
    3db2:	1dfb      	adds	r3, r7, #7
    3db4:	781b      	ldrb	r3, [r3, #0]
    3db6:	0018      	movs	r0, r3
    3db8:	4b04      	ldr	r3, [pc, #16]	; (3dcc <sleepmgr_enter_sleep+0x4c>)
    3dba:	4798      	blx	r3
#else
	cpu_irq_enable();
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
    3dbc:	46bd      	mov	sp, r7
    3dbe:	b003      	add	sp, #12
    3dc0:	bd90      	pop	{r4, r7, pc}
    3dc2:	46c0      	nop			; (mov r8, r8)
    3dc4:	20000008 	.word	0x20000008
    3dc8:	00003d45 	.word	0x00003d45
    3dcc:	00003cbd 	.word	0x00003cbd

00003dd0 <main>:
	
uint8_t data_array[16];
char str_buf[64];

int main (void)
{
    3dd0:	b590      	push	{r4, r7, lr}
    3dd2:	b083      	sub	sp, #12
    3dd4:	af02      	add	r7, sp, #8
	system_init();
    3dd6:	4b2e      	ldr	r3, [pc, #184]	; (3e90 <main+0xc0>)
    3dd8:	4798      	blx	r3
	delay_init();
    3dda:	4b2e      	ldr	r3, [pc, #184]	; (3e94 <main+0xc4>)
    3ddc:	4798      	blx	r3
	spi_master_init();
    3dde:	4b2e      	ldr	r3, [pc, #184]	; (3e98 <main+0xc8>)
    3de0:	4798      	blx	r3
	uart_init();
    3de2:	4b2e      	ldr	r3, [pc, #184]	; (3e9c <main+0xcc>)
    3de4:	4798      	blx	r3
	bme280_init();
    3de6:	4b2e      	ldr	r3, [pc, #184]	; (3ea0 <main+0xd0>)
    3de8:	4798      	blx	r3
	rotenc_init();
    3dea:	4b2e      	ldr	r3, [pc, #184]	; (3ea4 <main+0xd4>)
    3dec:	4798      	blx	r3
	sleepmgr_init();
    3dee:	4b2e      	ldr	r3, [pc, #184]	; (3ea8 <main+0xd8>)
    3df0:	4798      	blx	r3
	
	//vbat_init();
	//nrf24l01_init();
	
	sprintf(str_buf,"\r\nBooting nrf24l01-node - app\r\n");
    3df2:	4a2e      	ldr	r2, [pc, #184]	; (3eac <main+0xdc>)
    3df4:	4b2e      	ldr	r3, [pc, #184]	; (3eb0 <main+0xe0>)
    3df6:	0010      	movs	r0, r2
    3df8:	0019      	movs	r1, r3
    3dfa:	2320      	movs	r3, #32
    3dfc:	001a      	movs	r2, r3
    3dfe:	4b2d      	ldr	r3, [pc, #180]	; (3eb4 <main+0xe4>)
    3e00:	4798      	blx	r3
	uart_write(str_buf);
    3e02:	4b2a      	ldr	r3, [pc, #168]	; (3eac <main+0xdc>)
    3e04:	0018      	movs	r0, r3
    3e06:	4b2c      	ldr	r3, [pc, #176]	; (3eb8 <main+0xe8>)
    3e08:	4798      	blx	r3
	sprintf(str_buf,"SW version: %d\r\n",SOFTWARE_VERSION);
    3e0a:	492c      	ldr	r1, [pc, #176]	; (3ebc <main+0xec>)
    3e0c:	4b27      	ldr	r3, [pc, #156]	; (3eac <main+0xdc>)
    3e0e:	222a      	movs	r2, #42	; 0x2a
    3e10:	0018      	movs	r0, r3
    3e12:	4b2b      	ldr	r3, [pc, #172]	; (3ec0 <main+0xf0>)
    3e14:	4798      	blx	r3
	uart_write(str_buf);
    3e16:	4b25      	ldr	r3, [pc, #148]	; (3eac <main+0xdc>)
    3e18:	0018      	movs	r0, r3
    3e1a:	4b27      	ldr	r3, [pc, #156]	; (3eb8 <main+0xe8>)
    3e1c:	4798      	blx	r3
	//delay_ms(10);
	
	//NRF_Enter_TX_Mode(TX_ADDR,RX_ADDR);
	
	//uint16_t temp = vbat_read();
	sleepmgr_enter_sleep();
    3e1e:	4b29      	ldr	r3, [pc, #164]	; (3ec4 <main+0xf4>)
    3e20:	4798      	blx	r3
	woke = true;
    3e22:	4b29      	ldr	r3, [pc, #164]	; (3ec8 <main+0xf8>)
    3e24:	2201      	movs	r2, #1
    3e26:	701a      	strb	r2, [r3, #0]
	while (1)
	{
		if(woke)
    3e28:	4b27      	ldr	r3, [pc, #156]	; (3ec8 <main+0xf8>)
    3e2a:	781b      	ldrb	r3, [r3, #0]
    3e2c:	2b00      	cmp	r3, #0
    3e2e:	d0fb      	beq.n	3e28 <main+0x58>
		{
			bme280_get_all_calced(&bme280_data_object);
    3e30:	4b26      	ldr	r3, [pc, #152]	; (3ecc <main+0xfc>)
    3e32:	0018      	movs	r0, r3
    3e34:	4b26      	ldr	r3, [pc, #152]	; (3ed0 <main+0x100>)
    3e36:	4798      	blx	r3
			bme280_data_compress(&bme280_data_object,&data_array);
    3e38:	4a26      	ldr	r2, [pc, #152]	; (3ed4 <main+0x104>)
    3e3a:	4b24      	ldr	r3, [pc, #144]	; (3ecc <main+0xfc>)
    3e3c:	0011      	movs	r1, r2
    3e3e:	0018      	movs	r0, r3
    3e40:	4b25      	ldr	r3, [pc, #148]	; (3ed8 <main+0x108>)
    3e42:	4798      	blx	r3
			//uint32_t status = NRF_TX_data(&data_array,16);
			//uint32_t status = NRF_TX(NRF_CONTACT_2BTN_V1,NRF_CMD_OFF);
			uart_write("----------------\r\n");
    3e44:	4b25      	ldr	r3, [pc, #148]	; (3edc <main+0x10c>)
    3e46:	0018      	movs	r0, r3
    3e48:	4b1b      	ldr	r3, [pc, #108]	; (3eb8 <main+0xe8>)
    3e4a:	4798      	blx	r3
			sprintf(str_buf,"T:\t%d\r\nH:\t%d\r\nP:\t%ld\r\n\r\n",bme280_data_object.temperature/100,(int)bme280_data_object.humidity,(int)bme280_data_object.pressure);
    3e4c:	4b1f      	ldr	r3, [pc, #124]	; (3ecc <main+0xfc>)
    3e4e:	681a      	ldr	r2, [r3, #0]
    3e50:	4b23      	ldr	r3, [pc, #140]	; (3ee0 <main+0x110>)
    3e52:	2164      	movs	r1, #100	; 0x64
    3e54:	0010      	movs	r0, r2
    3e56:	4798      	blx	r3
    3e58:	0003      	movs	r3, r0
    3e5a:	001c      	movs	r4, r3
    3e5c:	4b1b      	ldr	r3, [pc, #108]	; (3ecc <main+0xfc>)
    3e5e:	689a      	ldr	r2, [r3, #8]
    3e60:	4b20      	ldr	r3, [pc, #128]	; (3ee4 <main+0x114>)
    3e62:	1c10      	adds	r0, r2, #0
    3e64:	4798      	blx	r3
    3e66:	0002      	movs	r2, r0
    3e68:	4b18      	ldr	r3, [pc, #96]	; (3ecc <main+0xfc>)
    3e6a:	685b      	ldr	r3, [r3, #4]
    3e6c:	491e      	ldr	r1, [pc, #120]	; (3ee8 <main+0x118>)
    3e6e:	480f      	ldr	r0, [pc, #60]	; (3eac <main+0xdc>)
    3e70:	9300      	str	r3, [sp, #0]
    3e72:	0013      	movs	r3, r2
    3e74:	0022      	movs	r2, r4
    3e76:	4c12      	ldr	r4, [pc, #72]	; (3ec0 <main+0xf0>)
    3e78:	47a0      	blx	r4
			uart_write(str_buf);
    3e7a:	4b0c      	ldr	r3, [pc, #48]	; (3eac <main+0xdc>)
    3e7c:	0018      	movs	r0, r3
    3e7e:	4b0e      	ldr	r3, [pc, #56]	; (3eb8 <main+0xe8>)
    3e80:	4798      	blx	r3
			woke = false;
    3e82:	4b11      	ldr	r3, [pc, #68]	; (3ec8 <main+0xf8>)
    3e84:	2200      	movs	r2, #0
    3e86:	701a      	strb	r2, [r3, #0]
			sleepmgr_enter_sleep();
    3e88:	4b0e      	ldr	r3, [pc, #56]	; (3ec4 <main+0xf4>)
    3e8a:	4798      	blx	r3
		if(woke)
    3e8c:	e7cc      	b.n	3e28 <main+0x58>
    3e8e:	46c0      	nop			; (mov r8, r8)
    3e90:	00003aa5 	.word	0x00003aa5
    3e94:	00000bf5 	.word	0x00000bf5
    3e98:	00001f51 	.word	0x00001f51
    3e9c:	00000af9 	.word	0x00000af9
    3ea0:	00001c09 	.word	0x00001c09
    3ea4:	000007e1 	.word	0x000007e1
    3ea8:	00003d09 	.word	0x00003d09
    3eac:	20000180 	.word	0x20000180
    3eb0:	000081b0 	.word	0x000081b0
    3eb4:	000078e9 	.word	0x000078e9
    3eb8:	00000b79 	.word	0x00000b79
    3ebc:	000081d0 	.word	0x000081d0
    3ec0:	0000790d 	.word	0x0000790d
    3ec4:	00003d81 	.word	0x00003d81
    3ec8:	20000108 	.word	0x20000108
    3ecc:	200001c0 	.word	0x200001c0
    3ed0:	00001ac5 	.word	0x00001ac5
    3ed4:	200001d0 	.word	0x200001d0
    3ed8:	00001c95 	.word	0x00001c95
    3edc:	000081e4 	.word	0x000081e4
    3ee0:	00005925 	.word	0x00005925
    3ee4:	00005b79 	.word	0x00005b79
    3ee8:	000081f8 	.word	0x000081f8

00003eec <log>:
    3eec:	b5f0      	push	{r4, r5, r6, r7, lr}
    3eee:	46c6      	mov	lr, r8
    3ef0:	b500      	push	{lr}
    3ef2:	b08c      	sub	sp, #48	; 0x30
    3ef4:	0004      	movs	r4, r0
    3ef6:	000d      	movs	r5, r1
    3ef8:	f000 fab8 	bl	446c <__ieee754_log>
    3efc:	4b3a      	ldr	r3, [pc, #232]	; (3fe8 <log+0xfc>)
    3efe:	0006      	movs	r6, r0
    3f00:	781b      	ldrb	r3, [r3, #0]
    3f02:	000f      	movs	r7, r1
    3f04:	b25b      	sxtb	r3, r3
    3f06:	4698      	mov	r8, r3
    3f08:	3301      	adds	r3, #1
    3f0a:	d00f      	beq.n	3f2c <log+0x40>
    3f0c:	0022      	movs	r2, r4
    3f0e:	002b      	movs	r3, r5
    3f10:	0020      	movs	r0, r4
    3f12:	0029      	movs	r1, r5
    3f14:	f003 fb2a 	bl	756c <__aeabi_dcmpun>
    3f18:	2800      	cmp	r0, #0
    3f1a:	d107      	bne.n	3f2c <log+0x40>
    3f1c:	2200      	movs	r2, #0
    3f1e:	2300      	movs	r3, #0
    3f20:	0020      	movs	r0, r4
    3f22:	0029      	movs	r1, r5
    3f24:	f001 fe14 	bl	5b50 <__aeabi_dcmpgt>
    3f28:	2800      	cmp	r0, #0
    3f2a:	d005      	beq.n	3f38 <log+0x4c>
    3f2c:	0030      	movs	r0, r6
    3f2e:	0039      	movs	r1, r7
    3f30:	b00c      	add	sp, #48	; 0x30
    3f32:	bc04      	pop	{r2}
    3f34:	4690      	mov	r8, r2
    3f36:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3f38:	4b2c      	ldr	r3, [pc, #176]	; (3fec <log+0x100>)
    3f3a:	900a      	str	r0, [sp, #40]	; 0x28
    3f3c:	9303      	str	r3, [sp, #12]
    3f3e:	4643      	mov	r3, r8
    3f40:	9404      	str	r4, [sp, #16]
    3f42:	9505      	str	r5, [sp, #20]
    3f44:	9406      	str	r4, [sp, #24]
    3f46:	9507      	str	r5, [sp, #28]
    3f48:	2b00      	cmp	r3, #0
    3f4a:	d11a      	bne.n	3f82 <log+0x96>
    3f4c:	22e0      	movs	r2, #224	; 0xe0
    3f4e:	4b28      	ldr	r3, [pc, #160]	; (3ff0 <log+0x104>)
    3f50:	0612      	lsls	r2, r2, #24
    3f52:	9208      	str	r2, [sp, #32]
    3f54:	9309      	str	r3, [sp, #36]	; 0x24
    3f56:	0020      	movs	r0, r4
    3f58:	2200      	movs	r2, #0
    3f5a:	2300      	movs	r3, #0
    3f5c:	0029      	movs	r1, r5
    3f5e:	f001 fddd 	bl	5b1c <__aeabi_dcmpeq>
    3f62:	2800      	cmp	r0, #0
    3f64:	d038      	beq.n	3fd8 <log+0xec>
    3f66:	2302      	movs	r3, #2
    3f68:	9302      	str	r3, [sp, #8]
    3f6a:	a802      	add	r0, sp, #8
    3f6c:	f001 fb36 	bl	55dc <matherr>
    3f70:	2800      	cmp	r0, #0
    3f72:	d017      	beq.n	3fa4 <log+0xb8>
    3f74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3f76:	9301      	str	r3, [sp, #4]
    3f78:	2b00      	cmp	r3, #0
    3f7a:	d118      	bne.n	3fae <log+0xc2>
    3f7c:	9e08      	ldr	r6, [sp, #32]
    3f7e:	9f09      	ldr	r7, [sp, #36]	; 0x24
    3f80:	e7d4      	b.n	3f2c <log+0x40>
    3f82:	2200      	movs	r2, #0
    3f84:	4b1b      	ldr	r3, [pc, #108]	; (3ff4 <log+0x108>)
    3f86:	0020      	movs	r0, r4
    3f88:	9208      	str	r2, [sp, #32]
    3f8a:	9309      	str	r3, [sp, #36]	; 0x24
    3f8c:	0029      	movs	r1, r5
    3f8e:	2200      	movs	r2, #0
    3f90:	2300      	movs	r3, #0
    3f92:	f001 fdc3 	bl	5b1c <__aeabi_dcmpeq>
    3f96:	2800      	cmp	r0, #0
    3f98:	d00f      	beq.n	3fba <log+0xce>
    3f9a:	2302      	movs	r3, #2
    3f9c:	9302      	str	r3, [sp, #8]
    3f9e:	4643      	mov	r3, r8
    3fa0:	2b02      	cmp	r3, #2
    3fa2:	d1e2      	bne.n	3f6a <log+0x7e>
    3fa4:	f003 fc76 	bl	7894 <__errno>
    3fa8:	2322      	movs	r3, #34	; 0x22
    3faa:	6003      	str	r3, [r0, #0]
    3fac:	e7e2      	b.n	3f74 <log+0x88>
    3fae:	f003 fc71 	bl	7894 <__errno>
    3fb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3fb4:	9301      	str	r3, [sp, #4]
    3fb6:	6003      	str	r3, [r0, #0]
    3fb8:	e7e0      	b.n	3f7c <log+0x90>
    3fba:	2301      	movs	r3, #1
    3fbc:	9302      	str	r3, [sp, #8]
    3fbe:	4643      	mov	r3, r8
    3fc0:	2b02      	cmp	r3, #2
    3fc2:	d10b      	bne.n	3fdc <log+0xf0>
    3fc4:	f003 fc66 	bl	7894 <__errno>
    3fc8:	2321      	movs	r3, #33	; 0x21
    3fca:	6003      	str	r3, [r0, #0]
    3fcc:	480a      	ldr	r0, [pc, #40]	; (3ff8 <log+0x10c>)
    3fce:	f001 fb07 	bl	55e0 <nan>
    3fd2:	9008      	str	r0, [sp, #32]
    3fd4:	9109      	str	r1, [sp, #36]	; 0x24
    3fd6:	e7cd      	b.n	3f74 <log+0x88>
    3fd8:	2301      	movs	r3, #1
    3fda:	9302      	str	r3, [sp, #8]
    3fdc:	a802      	add	r0, sp, #8
    3fde:	f001 fafd 	bl	55dc <matherr>
    3fe2:	2800      	cmp	r0, #0
    3fe4:	d1f2      	bne.n	3fcc <log+0xe0>
    3fe6:	e7ed      	b.n	3fc4 <log+0xd8>
    3fe8:	20000010 	.word	0x20000010
    3fec:	00008214 	.word	0x00008214
    3ff0:	c7efffff 	.word	0xc7efffff
    3ff4:	fff00000 	.word	0xfff00000
    3ff8:	00008218 	.word	0x00008218

00003ffc <log10>:
    3ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
    3ffe:	4647      	mov	r7, r8
    4000:	46ce      	mov	lr, r9
    4002:	b580      	push	{r7, lr}
    4004:	b08d      	sub	sp, #52	; 0x34
    4006:	0004      	movs	r4, r0
    4008:	000d      	movs	r5, r1
    400a:	f000 fc31 	bl	4870 <__ieee754_log10>
    400e:	4b3c      	ldr	r3, [pc, #240]	; (4100 <log10+0x104>)
    4010:	0006      	movs	r6, r0
    4012:	781b      	ldrb	r3, [r3, #0]
    4014:	000f      	movs	r7, r1
    4016:	b25b      	sxtb	r3, r3
    4018:	4698      	mov	r8, r3
    401a:	3301      	adds	r3, #1
    401c:	d010      	beq.n	4040 <log10+0x44>
    401e:	0022      	movs	r2, r4
    4020:	002b      	movs	r3, r5
    4022:	0020      	movs	r0, r4
    4024:	0029      	movs	r1, r5
    4026:	f003 faa1 	bl	756c <__aeabi_dcmpun>
    402a:	4681      	mov	r9, r0
    402c:	2800      	cmp	r0, #0
    402e:	d107      	bne.n	4040 <log10+0x44>
    4030:	2200      	movs	r2, #0
    4032:	2300      	movs	r3, #0
    4034:	0020      	movs	r0, r4
    4036:	0029      	movs	r1, r5
    4038:	f001 fd80 	bl	5b3c <__aeabi_dcmple>
    403c:	2800      	cmp	r0, #0
    403e:	d106      	bne.n	404e <log10+0x52>
    4040:	0030      	movs	r0, r6
    4042:	0039      	movs	r1, r7
    4044:	b00d      	add	sp, #52	; 0x34
    4046:	bc0c      	pop	{r2, r3}
    4048:	4690      	mov	r8, r2
    404a:	4699      	mov	r9, r3
    404c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    404e:	4b2d      	ldr	r3, [pc, #180]	; (4104 <log10+0x108>)
    4050:	9404      	str	r4, [sp, #16]
    4052:	9505      	str	r5, [sp, #20]
    4054:	9303      	str	r3, [sp, #12]
    4056:	464b      	mov	r3, r9
    4058:	930a      	str	r3, [sp, #40]	; 0x28
    405a:	4643      	mov	r3, r8
    405c:	9406      	str	r4, [sp, #24]
    405e:	9507      	str	r5, [sp, #28]
    4060:	2b00      	cmp	r3, #0
    4062:	d11a      	bne.n	409a <log10+0x9e>
    4064:	22e0      	movs	r2, #224	; 0xe0
    4066:	4b28      	ldr	r3, [pc, #160]	; (4108 <log10+0x10c>)
    4068:	0612      	lsls	r2, r2, #24
    406a:	9208      	str	r2, [sp, #32]
    406c:	9309      	str	r3, [sp, #36]	; 0x24
    406e:	0020      	movs	r0, r4
    4070:	2200      	movs	r2, #0
    4072:	2300      	movs	r3, #0
    4074:	0029      	movs	r1, r5
    4076:	f001 fd51 	bl	5b1c <__aeabi_dcmpeq>
    407a:	2800      	cmp	r0, #0
    407c:	d038      	beq.n	40f0 <log10+0xf4>
    407e:	2302      	movs	r3, #2
    4080:	9302      	str	r3, [sp, #8]
    4082:	a802      	add	r0, sp, #8
    4084:	f001 faaa 	bl	55dc <matherr>
    4088:	2800      	cmp	r0, #0
    408a:	d017      	beq.n	40bc <log10+0xc0>
    408c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    408e:	9301      	str	r3, [sp, #4]
    4090:	2b00      	cmp	r3, #0
    4092:	d118      	bne.n	40c6 <log10+0xca>
    4094:	9e08      	ldr	r6, [sp, #32]
    4096:	9f09      	ldr	r7, [sp, #36]	; 0x24
    4098:	e7d2      	b.n	4040 <log10+0x44>
    409a:	2200      	movs	r2, #0
    409c:	4b1b      	ldr	r3, [pc, #108]	; (410c <log10+0x110>)
    409e:	0020      	movs	r0, r4
    40a0:	9208      	str	r2, [sp, #32]
    40a2:	9309      	str	r3, [sp, #36]	; 0x24
    40a4:	0029      	movs	r1, r5
    40a6:	2200      	movs	r2, #0
    40a8:	2300      	movs	r3, #0
    40aa:	f001 fd37 	bl	5b1c <__aeabi_dcmpeq>
    40ae:	2800      	cmp	r0, #0
    40b0:	d00f      	beq.n	40d2 <log10+0xd6>
    40b2:	2302      	movs	r3, #2
    40b4:	9302      	str	r3, [sp, #8]
    40b6:	4643      	mov	r3, r8
    40b8:	2b02      	cmp	r3, #2
    40ba:	d1e2      	bne.n	4082 <log10+0x86>
    40bc:	f003 fbea 	bl	7894 <__errno>
    40c0:	2322      	movs	r3, #34	; 0x22
    40c2:	6003      	str	r3, [r0, #0]
    40c4:	e7e2      	b.n	408c <log10+0x90>
    40c6:	f003 fbe5 	bl	7894 <__errno>
    40ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    40cc:	9301      	str	r3, [sp, #4]
    40ce:	6003      	str	r3, [r0, #0]
    40d0:	e7e0      	b.n	4094 <log10+0x98>
    40d2:	2301      	movs	r3, #1
    40d4:	9302      	str	r3, [sp, #8]
    40d6:	4643      	mov	r3, r8
    40d8:	2b02      	cmp	r3, #2
    40da:	d10b      	bne.n	40f4 <log10+0xf8>
    40dc:	f003 fbda 	bl	7894 <__errno>
    40e0:	2321      	movs	r3, #33	; 0x21
    40e2:	6003      	str	r3, [r0, #0]
    40e4:	480a      	ldr	r0, [pc, #40]	; (4110 <log10+0x114>)
    40e6:	f001 fa7b 	bl	55e0 <nan>
    40ea:	9008      	str	r0, [sp, #32]
    40ec:	9109      	str	r1, [sp, #36]	; 0x24
    40ee:	e7cd      	b.n	408c <log10+0x90>
    40f0:	2301      	movs	r3, #1
    40f2:	9302      	str	r3, [sp, #8]
    40f4:	a802      	add	r0, sp, #8
    40f6:	f001 fa71 	bl	55dc <matherr>
    40fa:	2800      	cmp	r0, #0
    40fc:	d1f2      	bne.n	40e4 <log10+0xe8>
    40fe:	e7ed      	b.n	40dc <log10+0xe0>
    4100:	20000010 	.word	0x20000010
    4104:	0000821c 	.word	0x0000821c
    4108:	c7efffff 	.word	0xc7efffff
    410c:	fff00000 	.word	0xfff00000
    4110:	00008218 	.word	0x00008218

00004114 <pow>:
    4114:	b5f0      	push	{r4, r5, r6, r7, lr}
    4116:	4657      	mov	r7, sl
    4118:	464e      	mov	r6, r9
    411a:	46de      	mov	lr, fp
    411c:	4645      	mov	r5, r8
    411e:	b5e0      	push	{r5, r6, r7, lr}
    4120:	b08f      	sub	sp, #60	; 0x3c
    4122:	001d      	movs	r5, r3
    4124:	0006      	movs	r6, r0
    4126:	000f      	movs	r7, r1
    4128:	0014      	movs	r4, r2
    412a:	f000 fc33 	bl	4994 <__ieee754_pow>
    412e:	4bc7      	ldr	r3, [pc, #796]	; (444c <pow+0x338>)
    4130:	9000      	str	r0, [sp, #0]
    4132:	9101      	str	r1, [sp, #4]
    4134:	469a      	mov	sl, r3
    4136:	781b      	ldrb	r3, [r3, #0]
    4138:	b25b      	sxtb	r3, r3
    413a:	4699      	mov	r9, r3
    413c:	3301      	adds	r3, #1
    413e:	d03e      	beq.n	41be <pow+0xaa>
    4140:	0022      	movs	r2, r4
    4142:	002b      	movs	r3, r5
    4144:	0020      	movs	r0, r4
    4146:	0029      	movs	r1, r5
    4148:	f003 fa10 	bl	756c <__aeabi_dcmpun>
    414c:	4683      	mov	fp, r0
    414e:	2800      	cmp	r0, #0
    4150:	d135      	bne.n	41be <pow+0xaa>
    4152:	0032      	movs	r2, r6
    4154:	003b      	movs	r3, r7
    4156:	0030      	movs	r0, r6
    4158:	0039      	movs	r1, r7
    415a:	f003 fa07 	bl	756c <__aeabi_dcmpun>
    415e:	2200      	movs	r2, #0
    4160:	9003      	str	r0, [sp, #12]
    4162:	2800      	cmp	r0, #0
    4164:	d000      	beq.n	4168 <pow+0x54>
    4166:	e0b6      	b.n	42d6 <pow+0x1c2>
    4168:	2300      	movs	r3, #0
    416a:	0030      	movs	r0, r6
    416c:	0039      	movs	r1, r7
    416e:	f001 fcd5 	bl	5b1c <__aeabi_dcmpeq>
    4172:	2800      	cmp	r0, #0
    4174:	d02c      	beq.n	41d0 <pow+0xbc>
    4176:	2200      	movs	r2, #0
    4178:	2300      	movs	r3, #0
    417a:	0020      	movs	r0, r4
    417c:	0029      	movs	r1, r5
    417e:	f001 fccd 	bl	5b1c <__aeabi_dcmpeq>
    4182:	4683      	mov	fp, r0
    4184:	2800      	cmp	r0, #0
    4186:	d100      	bne.n	418a <pow+0x76>
    4188:	e077      	b.n	427a <pow+0x166>
    418a:	ab04      	add	r3, sp, #16
    418c:	4698      	mov	r8, r3
    418e:	2301      	movs	r3, #1
    4190:	4642      	mov	r2, r8
    4192:	9304      	str	r3, [sp, #16]
    4194:	4bae      	ldr	r3, [pc, #696]	; (4450 <pow+0x33c>)
    4196:	6053      	str	r3, [r2, #4]
    4198:	4643      	mov	r3, r8
    419a:	9a03      	ldr	r2, [sp, #12]
    419c:	611c      	str	r4, [r3, #16]
    419e:	615d      	str	r5, [r3, #20]
    41a0:	621a      	str	r2, [r3, #32]
    41a2:	609e      	str	r6, [r3, #8]
    41a4:	60df      	str	r7, [r3, #12]
    41a6:	4642      	mov	r2, r8
    41a8:	2300      	movs	r3, #0
    41aa:	2400      	movs	r4, #0
    41ac:	6193      	str	r3, [r2, #24]
    41ae:	61d4      	str	r4, [r2, #28]
    41b0:	464b      	mov	r3, r9
    41b2:	2b00      	cmp	r3, #0
    41b4:	d04d      	beq.n	4252 <pow+0x13e>
    41b6:	2300      	movs	r3, #0
    41b8:	4ca6      	ldr	r4, [pc, #664]	; (4454 <pow+0x340>)
    41ba:	9300      	str	r3, [sp, #0]
    41bc:	9401      	str	r4, [sp, #4]
    41be:	9800      	ldr	r0, [sp, #0]
    41c0:	9901      	ldr	r1, [sp, #4]
    41c2:	b00f      	add	sp, #60	; 0x3c
    41c4:	bc3c      	pop	{r2, r3, r4, r5}
    41c6:	4690      	mov	r8, r2
    41c8:	4699      	mov	r9, r3
    41ca:	46a2      	mov	sl, r4
    41cc:	46ab      	mov	fp, r5
    41ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    41d0:	9800      	ldr	r0, [sp, #0]
    41d2:	9901      	ldr	r1, [sp, #4]
    41d4:	f001 f9f8 	bl	55c8 <finite>
    41d8:	4681      	mov	r9, r0
    41da:	2800      	cmp	r0, #0
    41dc:	d100      	bne.n	41e0 <pow+0xcc>
    41de:	e09b      	b.n	4318 <pow+0x204>
    41e0:	9800      	ldr	r0, [sp, #0]
    41e2:	9901      	ldr	r1, [sp, #4]
    41e4:	2200      	movs	r2, #0
    41e6:	2300      	movs	r3, #0
    41e8:	f001 fc98 	bl	5b1c <__aeabi_dcmpeq>
    41ec:	2800      	cmp	r0, #0
    41ee:	d0e6      	beq.n	41be <pow+0xaa>
    41f0:	0030      	movs	r0, r6
    41f2:	0039      	movs	r1, r7
    41f4:	f001 f9e8 	bl	55c8 <finite>
    41f8:	2800      	cmp	r0, #0
    41fa:	d0e0      	beq.n	41be <pow+0xaa>
    41fc:	0020      	movs	r0, r4
    41fe:	0029      	movs	r1, r5
    4200:	f001 f9e2 	bl	55c8 <finite>
    4204:	2800      	cmp	r0, #0
    4206:	d0da      	beq.n	41be <pow+0xaa>
    4208:	ab04      	add	r3, sp, #16
    420a:	4698      	mov	r8, r3
    420c:	2304      	movs	r3, #4
    420e:	4642      	mov	r2, r8
    4210:	9304      	str	r3, [sp, #16]
    4212:	4b8f      	ldr	r3, [pc, #572]	; (4450 <pow+0x33c>)
    4214:	6114      	str	r4, [r2, #16]
    4216:	6155      	str	r5, [r2, #20]
    4218:	6053      	str	r3, [r2, #4]
    421a:	2300      	movs	r3, #0
    421c:	2400      	movs	r4, #0
    421e:	6213      	str	r3, [r2, #32]
    4220:	2300      	movs	r3, #0
    4222:	6193      	str	r3, [r2, #24]
    4224:	61d4      	str	r4, [r2, #28]
    4226:	4653      	mov	r3, sl
    4228:	781b      	ldrb	r3, [r3, #0]
    422a:	6096      	str	r6, [r2, #8]
    422c:	60d7      	str	r7, [r2, #12]
    422e:	b25b      	sxtb	r3, r3
    4230:	2b02      	cmp	r3, #2
    4232:	d004      	beq.n	423e <pow+0x12a>
    4234:	4640      	mov	r0, r8
    4236:	f001 f9d1 	bl	55dc <matherr>
    423a:	2800      	cmp	r0, #0
    423c:	d10e      	bne.n	425c <pow+0x148>
    423e:	f003 fb29 	bl	7894 <__errno>
    4242:	2322      	movs	r3, #34	; 0x22
    4244:	6003      	str	r3, [r0, #0]
    4246:	e009      	b.n	425c <pow+0x148>
    4248:	4642      	mov	r2, r8
    424a:	2300      	movs	r3, #0
    424c:	2400      	movs	r4, #0
    424e:	6193      	str	r3, [r2, #24]
    4250:	61d4      	str	r4, [r2, #28]
    4252:	4640      	mov	r0, r8
    4254:	f001 f9c2 	bl	55dc <matherr>
    4258:	2800      	cmp	r0, #0
    425a:	d037      	beq.n	42cc <pow+0x1b8>
    425c:	4643      	mov	r3, r8
    425e:	6a1b      	ldr	r3, [r3, #32]
    4260:	2b00      	cmp	r3, #0
    4262:	d004      	beq.n	426e <pow+0x15a>
    4264:	f003 fb16 	bl	7894 <__errno>
    4268:	4643      	mov	r3, r8
    426a:	6a1b      	ldr	r3, [r3, #32]
    426c:	6003      	str	r3, [r0, #0]
    426e:	4643      	mov	r3, r8
    4270:	69dc      	ldr	r4, [r3, #28]
    4272:	699b      	ldr	r3, [r3, #24]
    4274:	9300      	str	r3, [sp, #0]
    4276:	9401      	str	r4, [sp, #4]
    4278:	e7a1      	b.n	41be <pow+0xaa>
    427a:	0020      	movs	r0, r4
    427c:	0029      	movs	r1, r5
    427e:	f001 f9a3 	bl	55c8 <finite>
    4282:	2800      	cmp	r0, #0
    4284:	d09b      	beq.n	41be <pow+0xaa>
    4286:	2200      	movs	r2, #0
    4288:	2300      	movs	r3, #0
    428a:	0020      	movs	r0, r4
    428c:	0029      	movs	r1, r5
    428e:	f001 fc4b 	bl	5b28 <__aeabi_dcmplt>
    4292:	2800      	cmp	r0, #0
    4294:	d100      	bne.n	4298 <pow+0x184>
    4296:	e792      	b.n	41be <pow+0xaa>
    4298:	ab04      	add	r3, sp, #16
    429a:	4698      	mov	r8, r3
    429c:	2301      	movs	r3, #1
    429e:	4642      	mov	r2, r8
    42a0:	9304      	str	r3, [sp, #16]
    42a2:	4b6b      	ldr	r3, [pc, #428]	; (4450 <pow+0x33c>)
    42a4:	6053      	str	r3, [r2, #4]
    42a6:	4643      	mov	r3, r8
    42a8:	465a      	mov	r2, fp
    42aa:	609e      	str	r6, [r3, #8]
    42ac:	60df      	str	r7, [r3, #12]
    42ae:	621a      	str	r2, [r3, #32]
    42b0:	611c      	str	r4, [r3, #16]
    42b2:	615d      	str	r5, [r3, #20]
    42b4:	4653      	mov	r3, sl
    42b6:	781b      	ldrb	r3, [r3, #0]
    42b8:	b25b      	sxtb	r3, r3
    42ba:	2b00      	cmp	r3, #0
    42bc:	d0c4      	beq.n	4248 <pow+0x134>
    42be:	2000      	movs	r0, #0
    42c0:	4642      	mov	r2, r8
    42c2:	4965      	ldr	r1, [pc, #404]	; (4458 <pow+0x344>)
    42c4:	6190      	str	r0, [r2, #24]
    42c6:	61d1      	str	r1, [r2, #28]
    42c8:	2b02      	cmp	r3, #2
    42ca:	d1c2      	bne.n	4252 <pow+0x13e>
    42cc:	f003 fae2 	bl	7894 <__errno>
    42d0:	2321      	movs	r3, #33	; 0x21
    42d2:	6003      	str	r3, [r0, #0]
    42d4:	e7c2      	b.n	425c <pow+0x148>
    42d6:	2300      	movs	r3, #0
    42d8:	0020      	movs	r0, r4
    42da:	0029      	movs	r1, r5
    42dc:	f001 fc1e 	bl	5b1c <__aeabi_dcmpeq>
    42e0:	2800      	cmp	r0, #0
    42e2:	d100      	bne.n	42e6 <pow+0x1d2>
    42e4:	e76b      	b.n	41be <pow+0xaa>
    42e6:	ab04      	add	r3, sp, #16
    42e8:	4698      	mov	r8, r3
    42ea:	2301      	movs	r3, #1
    42ec:	4642      	mov	r2, r8
    42ee:	9304      	str	r3, [sp, #16]
    42f0:	4b57      	ldr	r3, [pc, #348]	; (4450 <pow+0x33c>)
    42f2:	4641      	mov	r1, r8
    42f4:	6053      	str	r3, [r2, #4]
    42f6:	4643      	mov	r3, r8
    42f8:	465a      	mov	r2, fp
    42fa:	621a      	str	r2, [r3, #32]
    42fc:	2200      	movs	r2, #0
    42fe:	609e      	str	r6, [r3, #8]
    4300:	60df      	str	r7, [r3, #12]
    4302:	611c      	str	r4, [r3, #16]
    4304:	615d      	str	r5, [r3, #20]
    4306:	4b53      	ldr	r3, [pc, #332]	; (4454 <pow+0x340>)
    4308:	618a      	str	r2, [r1, #24]
    430a:	61cb      	str	r3, [r1, #28]
    430c:	9200      	str	r2, [sp, #0]
    430e:	9301      	str	r3, [sp, #4]
    4310:	464b      	mov	r3, r9
    4312:	2b02      	cmp	r3, #2
    4314:	d19d      	bne.n	4252 <pow+0x13e>
    4316:	e752      	b.n	41be <pow+0xaa>
    4318:	0030      	movs	r0, r6
    431a:	0039      	movs	r1, r7
    431c:	f001 f954 	bl	55c8 <finite>
    4320:	2800      	cmp	r0, #0
    4322:	d100      	bne.n	4326 <pow+0x212>
    4324:	e75c      	b.n	41e0 <pow+0xcc>
    4326:	0020      	movs	r0, r4
    4328:	0029      	movs	r1, r5
    432a:	f001 f94d 	bl	55c8 <finite>
    432e:	2800      	cmp	r0, #0
    4330:	d100      	bne.n	4334 <pow+0x220>
    4332:	e755      	b.n	41e0 <pow+0xcc>
    4334:	9800      	ldr	r0, [sp, #0]
    4336:	9901      	ldr	r1, [sp, #4]
    4338:	000b      	movs	r3, r1
    433a:	0002      	movs	r2, r0
    433c:	f003 f916 	bl	756c <__aeabi_dcmpun>
    4340:	ab04      	add	r3, sp, #16
    4342:	4698      	mov	r8, r3
    4344:	2800      	cmp	r0, #0
    4346:	d161      	bne.n	440c <pow+0x2f8>
    4348:	2303      	movs	r3, #3
    434a:	4642      	mov	r2, r8
    434c:	9304      	str	r3, [sp, #16]
    434e:	4b40      	ldr	r3, [pc, #256]	; (4450 <pow+0x33c>)
    4350:	6210      	str	r0, [r2, #32]
    4352:	6053      	str	r3, [r2, #4]
    4354:	4653      	mov	r3, sl
    4356:	781b      	ldrb	r3, [r3, #0]
    4358:	6096      	str	r6, [r2, #8]
    435a:	60d7      	str	r7, [r2, #12]
    435c:	b25b      	sxtb	r3, r3
    435e:	6114      	str	r4, [r2, #16]
    4360:	6155      	str	r5, [r2, #20]
    4362:	4699      	mov	r9, r3
    4364:	2b00      	cmp	r3, #0
    4366:	d12f      	bne.n	43c8 <pow+0x2b4>
    4368:	22e0      	movs	r2, #224	; 0xe0
    436a:	4641      	mov	r1, r8
    436c:	4b3b      	ldr	r3, [pc, #236]	; (445c <pow+0x348>)
    436e:	0612      	lsls	r2, r2, #24
    4370:	618a      	str	r2, [r1, #24]
    4372:	61cb      	str	r3, [r1, #28]
    4374:	0030      	movs	r0, r6
    4376:	2200      	movs	r2, #0
    4378:	2300      	movs	r3, #0
    437a:	0039      	movs	r1, r7
    437c:	f001 fbd4 	bl	5b28 <__aeabi_dcmplt>
    4380:	2800      	cmp	r0, #0
    4382:	d100      	bne.n	4386 <pow+0x272>
    4384:	e756      	b.n	4234 <pow+0x120>
    4386:	2200      	movs	r2, #0
    4388:	4b35      	ldr	r3, [pc, #212]	; (4460 <pow+0x34c>)
    438a:	0020      	movs	r0, r4
    438c:	0029      	movs	r1, r5
    438e:	f002 fb57 	bl	6a40 <__aeabi_dmul>
    4392:	0004      	movs	r4, r0
    4394:	000d      	movs	r5, r1
    4396:	f001 f929 	bl	55ec <rint>
    439a:	0002      	movs	r2, r0
    439c:	000b      	movs	r3, r1
    439e:	0020      	movs	r0, r4
    43a0:	0029      	movs	r1, r5
    43a2:	f001 fbbb 	bl	5b1c <__aeabi_dcmpeq>
    43a6:	2800      	cmp	r0, #0
    43a8:	d105      	bne.n	43b6 <pow+0x2a2>
    43aa:	22e0      	movs	r2, #224	; 0xe0
    43ac:	4b2d      	ldr	r3, [pc, #180]	; (4464 <pow+0x350>)
    43ae:	0612      	lsls	r2, r2, #24
    43b0:	4641      	mov	r1, r8
    43b2:	618a      	str	r2, [r1, #24]
    43b4:	61cb      	str	r3, [r1, #28]
    43b6:	4653      	mov	r3, sl
    43b8:	781b      	ldrb	r3, [r3, #0]
    43ba:	b25b      	sxtb	r3, r3
    43bc:	4699      	mov	r9, r3
    43be:	464b      	mov	r3, r9
    43c0:	2b02      	cmp	r3, #2
    43c2:	d000      	beq.n	43c6 <pow+0x2b2>
    43c4:	e736      	b.n	4234 <pow+0x120>
    43c6:	e73a      	b.n	423e <pow+0x12a>
    43c8:	2200      	movs	r2, #0
    43ca:	4641      	mov	r1, r8
    43cc:	4b26      	ldr	r3, [pc, #152]	; (4468 <pow+0x354>)
    43ce:	0030      	movs	r0, r6
    43d0:	618a      	str	r2, [r1, #24]
    43d2:	61cb      	str	r3, [r1, #28]
    43d4:	2200      	movs	r2, #0
    43d6:	2300      	movs	r3, #0
    43d8:	0039      	movs	r1, r7
    43da:	f001 fba5 	bl	5b28 <__aeabi_dcmplt>
    43de:	2800      	cmp	r0, #0
    43e0:	d0ed      	beq.n	43be <pow+0x2aa>
    43e2:	2200      	movs	r2, #0
    43e4:	4b1e      	ldr	r3, [pc, #120]	; (4460 <pow+0x34c>)
    43e6:	0020      	movs	r0, r4
    43e8:	0029      	movs	r1, r5
    43ea:	f002 fb29 	bl	6a40 <__aeabi_dmul>
    43ee:	0004      	movs	r4, r0
    43f0:	000d      	movs	r5, r1
    43f2:	f001 f8fb 	bl	55ec <rint>
    43f6:	0002      	movs	r2, r0
    43f8:	000b      	movs	r3, r1
    43fa:	0020      	movs	r0, r4
    43fc:	0029      	movs	r1, r5
    43fe:	f001 fb8d 	bl	5b1c <__aeabi_dcmpeq>
    4402:	2800      	cmp	r0, #0
    4404:	d1d7      	bne.n	43b6 <pow+0x2a2>
    4406:	2200      	movs	r2, #0
    4408:	4b13      	ldr	r3, [pc, #76]	; (4458 <pow+0x344>)
    440a:	e7d1      	b.n	43b0 <pow+0x29c>
    440c:	2301      	movs	r3, #1
    440e:	4642      	mov	r2, r8
    4410:	9304      	str	r3, [sp, #16]
    4412:	4b0f      	ldr	r3, [pc, #60]	; (4450 <pow+0x33c>)
    4414:	6053      	str	r3, [r2, #4]
    4416:	4643      	mov	r3, r8
    4418:	464a      	mov	r2, r9
    441a:	611c      	str	r4, [r3, #16]
    441c:	615d      	str	r5, [r3, #20]
    441e:	621a      	str	r2, [r3, #32]
    4420:	609e      	str	r6, [r3, #8]
    4422:	60df      	str	r7, [r3, #12]
    4424:	2400      	movs	r4, #0
    4426:	4653      	mov	r3, sl
    4428:	571c      	ldrsb	r4, [r3, r4]
    442a:	2c00      	cmp	r4, #0
    442c:	d100      	bne.n	4430 <pow+0x31c>
    442e:	e70b      	b.n	4248 <pow+0x134>
    4430:	2300      	movs	r3, #0
    4432:	2200      	movs	r2, #0
    4434:	0019      	movs	r1, r3
    4436:	0010      	movs	r0, r2
    4438:	f001 fece 	bl	61d8 <__aeabi_ddiv>
    443c:	4643      	mov	r3, r8
    443e:	6198      	str	r0, [r3, #24]
    4440:	61d9      	str	r1, [r3, #28]
    4442:	2c02      	cmp	r4, #2
    4444:	d100      	bne.n	4448 <pow+0x334>
    4446:	e741      	b.n	42cc <pow+0x1b8>
    4448:	e703      	b.n	4252 <pow+0x13e>
    444a:	46c0      	nop			; (mov r8, r8)
    444c:	20000010 	.word	0x20000010
    4450:	00008224 	.word	0x00008224
    4454:	3ff00000 	.word	0x3ff00000
    4458:	fff00000 	.word	0xfff00000
    445c:	47efffff 	.word	0x47efffff
    4460:	3fe00000 	.word	0x3fe00000
    4464:	c7efffff 	.word	0xc7efffff
    4468:	7ff00000 	.word	0x7ff00000

0000446c <__ieee754_log>:
    446c:	b5f0      	push	{r4, r5, r6, r7, lr}
    446e:	46d6      	mov	lr, sl
    4470:	464f      	mov	r7, r9
    4472:	4646      	mov	r6, r8
    4474:	b5c0      	push	{r6, r7, lr}
    4476:	4ada      	ldr	r2, [pc, #872]	; (47e0 <__ieee754_log+0x374>)
    4478:	b088      	sub	sp, #32
    447a:	000b      	movs	r3, r1
    447c:	4291      	cmp	r1, r2
    447e:	dc55      	bgt.n	452c <__ieee754_log+0xc0>
    4480:	004a      	lsls	r2, r1, #1
    4482:	0852      	lsrs	r2, r2, #1
    4484:	4302      	orrs	r2, r0
    4486:	d100      	bne.n	448a <__ieee754_log+0x1e>
    4488:	e0ef      	b.n	466a <__ieee754_log+0x1fe>
    448a:	2900      	cmp	r1, #0
    448c:	da00      	bge.n	4490 <__ieee754_log+0x24>
    448e:	e179      	b.n	4784 <__ieee754_log+0x318>
    4490:	4bd4      	ldr	r3, [pc, #848]	; (47e4 <__ieee754_log+0x378>)
    4492:	2200      	movs	r2, #0
    4494:	f002 fad4 	bl	6a40 <__aeabi_dmul>
    4498:	2536      	movs	r5, #54	; 0x36
    449a:	4cd3      	ldr	r4, [pc, #844]	; (47e8 <__ieee754_log+0x37c>)
    449c:	000b      	movs	r3, r1
    449e:	426d      	negs	r5, r5
    44a0:	42a3      	cmp	r3, r4
    44a2:	dc47      	bgt.n	4534 <__ieee754_log+0xc8>
    44a4:	151a      	asrs	r2, r3, #20
    44a6:	4cd1      	ldr	r4, [pc, #836]	; (47ec <__ieee754_log+0x380>)
    44a8:	031b      	lsls	r3, r3, #12
    44aa:	0b1b      	lsrs	r3, r3, #12
    44ac:	4698      	mov	r8, r3
    44ae:	46a4      	mov	ip, r4
    44b0:	2480      	movs	r4, #128	; 0x80
    44b2:	4bcf      	ldr	r3, [pc, #828]	; (47f0 <__ieee754_log+0x384>)
    44b4:	0364      	lsls	r4, r4, #13
    44b6:	4443      	add	r3, r8
    44b8:	4023      	ands	r3, r4
    44ba:	4cce      	ldr	r4, [pc, #824]	; (47f4 <__ieee754_log+0x388>)
    44bc:	4462      	add	r2, ip
    44be:	1952      	adds	r2, r2, r5
    44c0:	405c      	eors	r4, r3
    44c2:	4645      	mov	r5, r8
    44c4:	151b      	asrs	r3, r3, #20
    44c6:	4699      	mov	r9, r3
    44c8:	4325      	orrs	r5, r4
    44ca:	4bca      	ldr	r3, [pc, #808]	; (47f4 <__ieee754_log+0x388>)
    44cc:	0029      	movs	r1, r5
    44ce:	4491      	add	r9, r2
    44d0:	2200      	movs	r2, #0
    44d2:	f002 fd35 	bl	6f40 <__aeabi_dsub>
    44d6:	4643      	mov	r3, r8
    44d8:	3302      	adds	r3, #2
    44da:	031b      	lsls	r3, r3, #12
    44dc:	0006      	movs	r6, r0
    44de:	000f      	movs	r7, r1
    44e0:	0b1b      	lsrs	r3, r3, #12
    44e2:	2200      	movs	r2, #0
    44e4:	2b02      	cmp	r3, #2
    44e6:	dc2f      	bgt.n	4548 <__ieee754_log+0xdc>
    44e8:	2300      	movs	r3, #0
    44ea:	f001 fb17 	bl	5b1c <__aeabi_dcmpeq>
    44ee:	2800      	cmp	r0, #0
    44f0:	d100      	bne.n	44f4 <__ieee754_log+0x88>
    44f2:	e0c1      	b.n	4678 <__ieee754_log+0x20c>
    44f4:	464b      	mov	r3, r9
    44f6:	2b00      	cmp	r3, #0
    44f8:	d100      	bne.n	44fc <__ieee754_log+0x90>
    44fa:	e14c      	b.n	4796 <__ieee754_log+0x32a>
    44fc:	4648      	mov	r0, r9
    44fe:	f003 f855 	bl	75ac <__aeabi_i2d>
    4502:	4abd      	ldr	r2, [pc, #756]	; (47f8 <__ieee754_log+0x38c>)
    4504:	4bbd      	ldr	r3, [pc, #756]	; (47fc <__ieee754_log+0x390>)
    4506:	0004      	movs	r4, r0
    4508:	000d      	movs	r5, r1
    450a:	f002 fa99 	bl	6a40 <__aeabi_dmul>
    450e:	4abc      	ldr	r2, [pc, #752]	; (4800 <__ieee754_log+0x394>)
    4510:	0006      	movs	r6, r0
    4512:	000f      	movs	r7, r1
    4514:	4bbb      	ldr	r3, [pc, #748]	; (4804 <__ieee754_log+0x398>)
    4516:	0020      	movs	r0, r4
    4518:	0029      	movs	r1, r5
    451a:	f002 fa91 	bl	6a40 <__aeabi_dmul>
    451e:	0002      	movs	r2, r0
    4520:	000b      	movs	r3, r1
    4522:	0030      	movs	r0, r6
    4524:	0039      	movs	r1, r7
    4526:	f001 fb47 	bl	5bb8 <__aeabi_dadd>
    452a:	e007      	b.n	453c <__ieee754_log+0xd0>
    452c:	4cae      	ldr	r4, [pc, #696]	; (47e8 <__ieee754_log+0x37c>)
    452e:	2500      	movs	r5, #0
    4530:	42a3      	cmp	r3, r4
    4532:	ddb7      	ble.n	44a4 <__ieee754_log+0x38>
    4534:	0002      	movs	r2, r0
    4536:	000b      	movs	r3, r1
    4538:	f001 fb3e 	bl	5bb8 <__aeabi_dadd>
    453c:	b008      	add	sp, #32
    453e:	bc1c      	pop	{r2, r3, r4}
    4540:	4690      	mov	r8, r2
    4542:	4699      	mov	r9, r3
    4544:	46a2      	mov	sl, r4
    4546:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4548:	2380      	movs	r3, #128	; 0x80
    454a:	05db      	lsls	r3, r3, #23
    454c:	f001 fb34 	bl	5bb8 <__aeabi_dadd>
    4550:	0002      	movs	r2, r0
    4552:	000b      	movs	r3, r1
    4554:	0030      	movs	r0, r6
    4556:	0039      	movs	r1, r7
    4558:	f001 fe3e 	bl	61d8 <__aeabi_ddiv>
    455c:	0004      	movs	r4, r0
    455e:	4648      	mov	r0, r9
    4560:	000d      	movs	r5, r1
    4562:	f003 f823 	bl	75ac <__aeabi_i2d>
    4566:	0022      	movs	r2, r4
    4568:	9002      	str	r0, [sp, #8]
    456a:	9103      	str	r1, [sp, #12]
    456c:	002b      	movs	r3, r5
    456e:	0020      	movs	r0, r4
    4570:	0029      	movs	r1, r5
    4572:	9404      	str	r4, [sp, #16]
    4574:	9505      	str	r5, [sp, #20]
    4576:	f002 fa63 	bl	6a40 <__aeabi_dmul>
    457a:	0004      	movs	r4, r0
    457c:	000d      	movs	r5, r1
    457e:	4ba2      	ldr	r3, [pc, #648]	; (4808 <__ieee754_log+0x39c>)
    4580:	0002      	movs	r2, r0
    4582:	4443      	add	r3, r8
    4584:	469a      	mov	sl, r3
    4586:	000b      	movs	r3, r1
    4588:	9400      	str	r4, [sp, #0]
    458a:	9501      	str	r5, [sp, #4]
    458c:	f002 fa58 	bl	6a40 <__aeabi_dmul>
    4590:	0004      	movs	r4, r0
    4592:	000d      	movs	r5, r1
    4594:	4a9d      	ldr	r2, [pc, #628]	; (480c <__ieee754_log+0x3a0>)
    4596:	4b9e      	ldr	r3, [pc, #632]	; (4810 <__ieee754_log+0x3a4>)
    4598:	f002 fa52 	bl	6a40 <__aeabi_dmul>
    459c:	4a9d      	ldr	r2, [pc, #628]	; (4814 <__ieee754_log+0x3a8>)
    459e:	4b9e      	ldr	r3, [pc, #632]	; (4818 <__ieee754_log+0x3ac>)
    45a0:	f001 fb0a 	bl	5bb8 <__aeabi_dadd>
    45a4:	0022      	movs	r2, r4
    45a6:	002b      	movs	r3, r5
    45a8:	f002 fa4a 	bl	6a40 <__aeabi_dmul>
    45ac:	4a9b      	ldr	r2, [pc, #620]	; (481c <__ieee754_log+0x3b0>)
    45ae:	4b9c      	ldr	r3, [pc, #624]	; (4820 <__ieee754_log+0x3b4>)
    45b0:	f001 fb02 	bl	5bb8 <__aeabi_dadd>
    45b4:	0022      	movs	r2, r4
    45b6:	002b      	movs	r3, r5
    45b8:	f002 fa42 	bl	6a40 <__aeabi_dmul>
    45bc:	4a99      	ldr	r2, [pc, #612]	; (4824 <__ieee754_log+0x3b8>)
    45be:	4b9a      	ldr	r3, [pc, #616]	; (4828 <__ieee754_log+0x3bc>)
    45c0:	f001 fafa 	bl	5bb8 <__aeabi_dadd>
    45c4:	9a00      	ldr	r2, [sp, #0]
    45c6:	9b01      	ldr	r3, [sp, #4]
    45c8:	f002 fa3a 	bl	6a40 <__aeabi_dmul>
    45cc:	4a97      	ldr	r2, [pc, #604]	; (482c <__ieee754_log+0x3c0>)
    45ce:	9000      	str	r0, [sp, #0]
    45d0:	9101      	str	r1, [sp, #4]
    45d2:	4b97      	ldr	r3, [pc, #604]	; (4830 <__ieee754_log+0x3c4>)
    45d4:	0020      	movs	r0, r4
    45d6:	0029      	movs	r1, r5
    45d8:	f002 fa32 	bl	6a40 <__aeabi_dmul>
    45dc:	4a95      	ldr	r2, [pc, #596]	; (4834 <__ieee754_log+0x3c8>)
    45de:	4b96      	ldr	r3, [pc, #600]	; (4838 <__ieee754_log+0x3cc>)
    45e0:	f001 faea 	bl	5bb8 <__aeabi_dadd>
    45e4:	0022      	movs	r2, r4
    45e6:	002b      	movs	r3, r5
    45e8:	f002 fa2a 	bl	6a40 <__aeabi_dmul>
    45ec:	4a93      	ldr	r2, [pc, #588]	; (483c <__ieee754_log+0x3d0>)
    45ee:	4b94      	ldr	r3, [pc, #592]	; (4840 <__ieee754_log+0x3d4>)
    45f0:	f001 fae2 	bl	5bb8 <__aeabi_dadd>
    45f4:	0022      	movs	r2, r4
    45f6:	002b      	movs	r3, r5
    45f8:	f002 fa22 	bl	6a40 <__aeabi_dmul>
    45fc:	000b      	movs	r3, r1
    45fe:	0002      	movs	r2, r0
    4600:	9800      	ldr	r0, [sp, #0]
    4602:	9901      	ldr	r1, [sp, #4]
    4604:	f001 fad8 	bl	5bb8 <__aeabi_dadd>
    4608:	000d      	movs	r5, r1
    460a:	4641      	mov	r1, r8
    460c:	4b8d      	ldr	r3, [pc, #564]	; (4844 <__ieee754_log+0x3d8>)
    460e:	0004      	movs	r4, r0
    4610:	1a5b      	subs	r3, r3, r1
    4612:	4651      	mov	r1, sl
    4614:	430b      	orrs	r3, r1
    4616:	2b00      	cmp	r3, #0
    4618:	dd54      	ble.n	46c4 <__ieee754_log+0x258>
    461a:	2200      	movs	r2, #0
    461c:	4b8a      	ldr	r3, [pc, #552]	; (4848 <__ieee754_log+0x3dc>)
    461e:	0030      	movs	r0, r6
    4620:	0039      	movs	r1, r7
    4622:	f002 fa0d 	bl	6a40 <__aeabi_dmul>
    4626:	0032      	movs	r2, r6
    4628:	003b      	movs	r3, r7
    462a:	f002 fa09 	bl	6a40 <__aeabi_dmul>
    462e:	464b      	mov	r3, r9
    4630:	000a      	movs	r2, r1
    4632:	0001      	movs	r1, r0
    4634:	9100      	str	r1, [sp, #0]
    4636:	9201      	str	r2, [sp, #4]
    4638:	2b00      	cmp	r3, #0
    463a:	d172      	bne.n	4722 <__ieee754_log+0x2b6>
    463c:	0013      	movs	r3, r2
    463e:	0029      	movs	r1, r5
    4640:	0002      	movs	r2, r0
    4642:	0020      	movs	r0, r4
    4644:	f001 fab8 	bl	5bb8 <__aeabi_dadd>
    4648:	9a04      	ldr	r2, [sp, #16]
    464a:	9b05      	ldr	r3, [sp, #20]
    464c:	f002 f9f8 	bl	6a40 <__aeabi_dmul>
    4650:	0002      	movs	r2, r0
    4652:	000b      	movs	r3, r1
    4654:	9800      	ldr	r0, [sp, #0]
    4656:	9901      	ldr	r1, [sp, #4]
    4658:	f002 fc72 	bl	6f40 <__aeabi_dsub>
    465c:	0002      	movs	r2, r0
    465e:	000b      	movs	r3, r1
    4660:	0030      	movs	r0, r6
    4662:	0039      	movs	r1, r7
    4664:	f002 fc6c 	bl	6f40 <__aeabi_dsub>
    4668:	e768      	b.n	453c <__ieee754_log+0xd0>
    466a:	2200      	movs	r2, #0
    466c:	2300      	movs	r3, #0
    466e:	2000      	movs	r0, #0
    4670:	4976      	ldr	r1, [pc, #472]	; (484c <__ieee754_log+0x3e0>)
    4672:	f001 fdb1 	bl	61d8 <__aeabi_ddiv>
    4676:	e761      	b.n	453c <__ieee754_log+0xd0>
    4678:	4a75      	ldr	r2, [pc, #468]	; (4850 <__ieee754_log+0x3e4>)
    467a:	4b76      	ldr	r3, [pc, #472]	; (4854 <__ieee754_log+0x3e8>)
    467c:	0030      	movs	r0, r6
    467e:	0039      	movs	r1, r7
    4680:	f002 f9de 	bl	6a40 <__aeabi_dmul>
    4684:	0002      	movs	r2, r0
    4686:	000b      	movs	r3, r1
    4688:	2000      	movs	r0, #0
    468a:	496f      	ldr	r1, [pc, #444]	; (4848 <__ieee754_log+0x3dc>)
    468c:	f002 fc58 	bl	6f40 <__aeabi_dsub>
    4690:	0032      	movs	r2, r6
    4692:	0004      	movs	r4, r0
    4694:	000d      	movs	r5, r1
    4696:	003b      	movs	r3, r7
    4698:	0030      	movs	r0, r6
    469a:	0039      	movs	r1, r7
    469c:	f002 f9d0 	bl	6a40 <__aeabi_dmul>
    46a0:	000b      	movs	r3, r1
    46a2:	0002      	movs	r2, r0
    46a4:	0029      	movs	r1, r5
    46a6:	0020      	movs	r0, r4
    46a8:	f002 f9ca 	bl	6a40 <__aeabi_dmul>
    46ac:	464b      	mov	r3, r9
    46ae:	0004      	movs	r4, r0
    46b0:	000d      	movs	r5, r1
    46b2:	2b00      	cmp	r3, #0
    46b4:	d172      	bne.n	479c <__ieee754_log+0x330>
    46b6:	0002      	movs	r2, r0
    46b8:	000b      	movs	r3, r1
    46ba:	0030      	movs	r0, r6
    46bc:	0039      	movs	r1, r7
    46be:	f002 fc3f 	bl	6f40 <__aeabi_dsub>
    46c2:	e73b      	b.n	453c <__ieee754_log+0xd0>
    46c4:	464b      	mov	r3, r9
    46c6:	2b00      	cmp	r3, #0
    46c8:	d100      	bne.n	46cc <__ieee754_log+0x260>
    46ca:	e0c5      	b.n	4858 <__ieee754_log+0x3ec>
    46cc:	9802      	ldr	r0, [sp, #8]
    46ce:	9903      	ldr	r1, [sp, #12]
    46d0:	4a49      	ldr	r2, [pc, #292]	; (47f8 <__ieee754_log+0x38c>)
    46d2:	4b4a      	ldr	r3, [pc, #296]	; (47fc <__ieee754_log+0x390>)
    46d4:	f002 f9b4 	bl	6a40 <__aeabi_dmul>
    46d8:	0022      	movs	r2, r4
    46da:	9000      	str	r0, [sp, #0]
    46dc:	9101      	str	r1, [sp, #4]
    46de:	002b      	movs	r3, r5
    46e0:	0030      	movs	r0, r6
    46e2:	0039      	movs	r1, r7
    46e4:	f002 fc2c 	bl	6f40 <__aeabi_dsub>
    46e8:	9a04      	ldr	r2, [sp, #16]
    46ea:	9b05      	ldr	r3, [sp, #20]
    46ec:	f002 f9a8 	bl	6a40 <__aeabi_dmul>
    46f0:	4a43      	ldr	r2, [pc, #268]	; (4800 <__ieee754_log+0x394>)
    46f2:	0004      	movs	r4, r0
    46f4:	000d      	movs	r5, r1
    46f6:	9802      	ldr	r0, [sp, #8]
    46f8:	9903      	ldr	r1, [sp, #12]
    46fa:	4b42      	ldr	r3, [pc, #264]	; (4804 <__ieee754_log+0x398>)
    46fc:	f002 f9a0 	bl	6a40 <__aeabi_dmul>
    4700:	0002      	movs	r2, r0
    4702:	000b      	movs	r3, r1
    4704:	0020      	movs	r0, r4
    4706:	0029      	movs	r1, r5
    4708:	f002 fc1a 	bl	6f40 <__aeabi_dsub>
    470c:	0032      	movs	r2, r6
    470e:	003b      	movs	r3, r7
    4710:	f002 fc16 	bl	6f40 <__aeabi_dsub>
    4714:	0002      	movs	r2, r0
    4716:	000b      	movs	r3, r1
    4718:	9800      	ldr	r0, [sp, #0]
    471a:	9901      	ldr	r1, [sp, #4]
    471c:	f002 fc10 	bl	6f40 <__aeabi_dsub>
    4720:	e70c      	b.n	453c <__ieee754_log+0xd0>
    4722:	4a35      	ldr	r2, [pc, #212]	; (47f8 <__ieee754_log+0x38c>)
    4724:	4b35      	ldr	r3, [pc, #212]	; (47fc <__ieee754_log+0x390>)
    4726:	9802      	ldr	r0, [sp, #8]
    4728:	9903      	ldr	r1, [sp, #12]
    472a:	f002 f989 	bl	6a40 <__aeabi_dmul>
    472e:	9a00      	ldr	r2, [sp, #0]
    4730:	9b01      	ldr	r3, [sp, #4]
    4732:	9006      	str	r0, [sp, #24]
    4734:	9107      	str	r1, [sp, #28]
    4736:	0020      	movs	r0, r4
    4738:	0029      	movs	r1, r5
    473a:	f001 fa3d 	bl	5bb8 <__aeabi_dadd>
    473e:	9a04      	ldr	r2, [sp, #16]
    4740:	9b05      	ldr	r3, [sp, #20]
    4742:	f002 f97d 	bl	6a40 <__aeabi_dmul>
    4746:	4a2e      	ldr	r2, [pc, #184]	; (4800 <__ieee754_log+0x394>)
    4748:	0004      	movs	r4, r0
    474a:	000d      	movs	r5, r1
    474c:	9802      	ldr	r0, [sp, #8]
    474e:	9903      	ldr	r1, [sp, #12]
    4750:	4b2c      	ldr	r3, [pc, #176]	; (4804 <__ieee754_log+0x398>)
    4752:	f002 f975 	bl	6a40 <__aeabi_dmul>
    4756:	0002      	movs	r2, r0
    4758:	000b      	movs	r3, r1
    475a:	0020      	movs	r0, r4
    475c:	0029      	movs	r1, r5
    475e:	f001 fa2b 	bl	5bb8 <__aeabi_dadd>
    4762:	0002      	movs	r2, r0
    4764:	000b      	movs	r3, r1
    4766:	9800      	ldr	r0, [sp, #0]
    4768:	9901      	ldr	r1, [sp, #4]
    476a:	f002 fbe9 	bl	6f40 <__aeabi_dsub>
    476e:	0032      	movs	r2, r6
    4770:	003b      	movs	r3, r7
    4772:	f002 fbe5 	bl	6f40 <__aeabi_dsub>
    4776:	0002      	movs	r2, r0
    4778:	000b      	movs	r3, r1
    477a:	9806      	ldr	r0, [sp, #24]
    477c:	9907      	ldr	r1, [sp, #28]
    477e:	f002 fbdf 	bl	6f40 <__aeabi_dsub>
    4782:	e6db      	b.n	453c <__ieee754_log+0xd0>
    4784:	0002      	movs	r2, r0
    4786:	000b      	movs	r3, r1
    4788:	f002 fbda 	bl	6f40 <__aeabi_dsub>
    478c:	2200      	movs	r2, #0
    478e:	2300      	movs	r3, #0
    4790:	f001 fd22 	bl	61d8 <__aeabi_ddiv>
    4794:	e6d2      	b.n	453c <__ieee754_log+0xd0>
    4796:	2000      	movs	r0, #0
    4798:	2100      	movs	r1, #0
    479a:	e6cf      	b.n	453c <__ieee754_log+0xd0>
    479c:	4648      	mov	r0, r9
    479e:	f002 ff05 	bl	75ac <__aeabi_i2d>
    47a2:	4a15      	ldr	r2, [pc, #84]	; (47f8 <__ieee754_log+0x38c>)
    47a4:	4b15      	ldr	r3, [pc, #84]	; (47fc <__ieee754_log+0x390>)
    47a6:	9000      	str	r0, [sp, #0]
    47a8:	9101      	str	r1, [sp, #4]
    47aa:	f002 f949 	bl	6a40 <__aeabi_dmul>
    47ae:	4a14      	ldr	r2, [pc, #80]	; (4800 <__ieee754_log+0x394>)
    47b0:	9002      	str	r0, [sp, #8]
    47b2:	9103      	str	r1, [sp, #12]
    47b4:	9800      	ldr	r0, [sp, #0]
    47b6:	9901      	ldr	r1, [sp, #4]
    47b8:	4b12      	ldr	r3, [pc, #72]	; (4804 <__ieee754_log+0x398>)
    47ba:	f002 f941 	bl	6a40 <__aeabi_dmul>
    47be:	0002      	movs	r2, r0
    47c0:	000b      	movs	r3, r1
    47c2:	0020      	movs	r0, r4
    47c4:	0029      	movs	r1, r5
    47c6:	f002 fbbb 	bl	6f40 <__aeabi_dsub>
    47ca:	0032      	movs	r2, r6
    47cc:	003b      	movs	r3, r7
    47ce:	f002 fbb7 	bl	6f40 <__aeabi_dsub>
    47d2:	0002      	movs	r2, r0
    47d4:	000b      	movs	r3, r1
    47d6:	9802      	ldr	r0, [sp, #8]
    47d8:	9903      	ldr	r1, [sp, #12]
    47da:	f002 fbb1 	bl	6f40 <__aeabi_dsub>
    47de:	e6ad      	b.n	453c <__ieee754_log+0xd0>
    47e0:	000fffff 	.word	0x000fffff
    47e4:	43500000 	.word	0x43500000
    47e8:	7fefffff 	.word	0x7fefffff
    47ec:	fffffc01 	.word	0xfffffc01
    47f0:	00095f64 	.word	0x00095f64
    47f4:	3ff00000 	.word	0x3ff00000
    47f8:	fee00000 	.word	0xfee00000
    47fc:	3fe62e42 	.word	0x3fe62e42
    4800:	35793c76 	.word	0x35793c76
    4804:	3dea39ef 	.word	0x3dea39ef
    4808:	fff9eb86 	.word	0xfff9eb86
    480c:	df3e5244 	.word	0xdf3e5244
    4810:	3fc2f112 	.word	0x3fc2f112
    4814:	96cb03de 	.word	0x96cb03de
    4818:	3fc74664 	.word	0x3fc74664
    481c:	94229359 	.word	0x94229359
    4820:	3fd24924 	.word	0x3fd24924
    4824:	55555593 	.word	0x55555593
    4828:	3fe55555 	.word	0x3fe55555
    482c:	d078c69f 	.word	0xd078c69f
    4830:	3fc39a09 	.word	0x3fc39a09
    4834:	1d8e78af 	.word	0x1d8e78af
    4838:	3fcc71c5 	.word	0x3fcc71c5
    483c:	9997fa04 	.word	0x9997fa04
    4840:	3fd99999 	.word	0x3fd99999
    4844:	0006b851 	.word	0x0006b851
    4848:	3fe00000 	.word	0x3fe00000
    484c:	c3500000 	.word	0xc3500000
    4850:	55555555 	.word	0x55555555
    4854:	3fd55555 	.word	0x3fd55555
    4858:	0022      	movs	r2, r4
    485a:	002b      	movs	r3, r5
    485c:	0030      	movs	r0, r6
    485e:	0039      	movs	r1, r7
    4860:	f002 fb6e 	bl	6f40 <__aeabi_dsub>
    4864:	9a04      	ldr	r2, [sp, #16]
    4866:	9b05      	ldr	r3, [sp, #20]
    4868:	f002 f8ea 	bl	6a40 <__aeabi_dmul>
    486c:	e6f6      	b.n	465c <__ieee754_log+0x1f0>
    486e:	46c0      	nop			; (mov r8, r8)

00004870 <__ieee754_log10>:
    4870:	b5f0      	push	{r4, r5, r6, r7, lr}
    4872:	46ce      	mov	lr, r9
    4874:	4647      	mov	r7, r8
    4876:	b580      	push	{r7, lr}
    4878:	4a3a      	ldr	r2, [pc, #232]	; (4964 <__ieee754_log10+0xf4>)
    487a:	b083      	sub	sp, #12
    487c:	0004      	movs	r4, r0
    487e:	000d      	movs	r5, r1
    4880:	000b      	movs	r3, r1
    4882:	4291      	cmp	r1, r2
    4884:	dc1c      	bgt.n	48c0 <__ieee754_log10+0x50>
    4886:	004a      	lsls	r2, r1, #1
    4888:	0852      	lsrs	r2, r2, #1
    488a:	4302      	orrs	r2, r0
    488c:	d05a      	beq.n	4944 <__ieee754_log10+0xd4>
    488e:	2900      	cmp	r1, #0
    4890:	db5f      	blt.n	4952 <__ieee754_log10+0xe2>
    4892:	2200      	movs	r2, #0
    4894:	4b34      	ldr	r3, [pc, #208]	; (4968 <__ieee754_log10+0xf8>)
    4896:	f002 f8d3 	bl	6a40 <__aeabi_dmul>
    489a:	000d      	movs	r5, r1
    489c:	000b      	movs	r3, r1
    489e:	2136      	movs	r1, #54	; 0x36
    48a0:	4a32      	ldr	r2, [pc, #200]	; (496c <__ieee754_log10+0xfc>)
    48a2:	0004      	movs	r4, r0
    48a4:	4249      	negs	r1, r1
    48a6:	4293      	cmp	r3, r2
    48a8:	dd0e      	ble.n	48c8 <__ieee754_log10+0x58>
    48aa:	0022      	movs	r2, r4
    48ac:	002b      	movs	r3, r5
    48ae:	0020      	movs	r0, r4
    48b0:	0029      	movs	r1, r5
    48b2:	f001 f981 	bl	5bb8 <__aeabi_dadd>
    48b6:	b003      	add	sp, #12
    48b8:	bc0c      	pop	{r2, r3}
    48ba:	4690      	mov	r8, r2
    48bc:	4699      	mov	r9, r3
    48be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    48c0:	4a2a      	ldr	r2, [pc, #168]	; (496c <__ieee754_log10+0xfc>)
    48c2:	2100      	movs	r1, #0
    48c4:	4293      	cmp	r3, r2
    48c6:	dcf0      	bgt.n	48aa <__ieee754_log10+0x3a>
    48c8:	4a29      	ldr	r2, [pc, #164]	; (4970 <__ieee754_log10+0x100>)
    48ca:	1518      	asrs	r0, r3, #20
    48cc:	4694      	mov	ip, r2
    48ce:	4460      	add	r0, ip
    48d0:	1840      	adds	r0, r0, r1
    48d2:	0fc2      	lsrs	r2, r0, #31
    48d4:	4691      	mov	r9, r2
    48d6:	031b      	lsls	r3, r3, #12
    48d8:	0b1b      	lsrs	r3, r3, #12
    48da:	4448      	add	r0, r9
    48dc:	4698      	mov	r8, r3
    48de:	f002 fe65 	bl	75ac <__aeabi_i2d>
    48e2:	464a      	mov	r2, r9
    48e4:	4b23      	ldr	r3, [pc, #140]	; (4974 <__ieee754_log10+0x104>)
    48e6:	0006      	movs	r6, r0
    48e8:	1a9b      	subs	r3, r3, r2
    48ea:	4642      	mov	r2, r8
    48ec:	051b      	lsls	r3, r3, #20
    48ee:	431a      	orrs	r2, r3
    48f0:	000f      	movs	r7, r1
    48f2:	0020      	movs	r0, r4
    48f4:	0011      	movs	r1, r2
    48f6:	f7ff fdb9 	bl	446c <__ieee754_log>
    48fa:	4a1f      	ldr	r2, [pc, #124]	; (4978 <__ieee754_log10+0x108>)
    48fc:	0004      	movs	r4, r0
    48fe:	000d      	movs	r5, r1
    4900:	4b1e      	ldr	r3, [pc, #120]	; (497c <__ieee754_log10+0x10c>)
    4902:	0030      	movs	r0, r6
    4904:	0039      	movs	r1, r7
    4906:	f002 f89b 	bl	6a40 <__aeabi_dmul>
    490a:	4a1d      	ldr	r2, [pc, #116]	; (4980 <__ieee754_log10+0x110>)
    490c:	9000      	str	r0, [sp, #0]
    490e:	9101      	str	r1, [sp, #4]
    4910:	4b1c      	ldr	r3, [pc, #112]	; (4984 <__ieee754_log10+0x114>)
    4912:	0020      	movs	r0, r4
    4914:	0029      	movs	r1, r5
    4916:	f002 f893 	bl	6a40 <__aeabi_dmul>
    491a:	0002      	movs	r2, r0
    491c:	000b      	movs	r3, r1
    491e:	9800      	ldr	r0, [sp, #0]
    4920:	9901      	ldr	r1, [sp, #4]
    4922:	f001 f949 	bl	5bb8 <__aeabi_dadd>
    4926:	4a18      	ldr	r2, [pc, #96]	; (4988 <__ieee754_log10+0x118>)
    4928:	0004      	movs	r4, r0
    492a:	000d      	movs	r5, r1
    492c:	4b17      	ldr	r3, [pc, #92]	; (498c <__ieee754_log10+0x11c>)
    492e:	0030      	movs	r0, r6
    4930:	0039      	movs	r1, r7
    4932:	f002 f885 	bl	6a40 <__aeabi_dmul>
    4936:	0002      	movs	r2, r0
    4938:	000b      	movs	r3, r1
    493a:	0020      	movs	r0, r4
    493c:	0029      	movs	r1, r5
    493e:	f001 f93b 	bl	5bb8 <__aeabi_dadd>
    4942:	e7b8      	b.n	48b6 <__ieee754_log10+0x46>
    4944:	2200      	movs	r2, #0
    4946:	2300      	movs	r3, #0
    4948:	2000      	movs	r0, #0
    494a:	4911      	ldr	r1, [pc, #68]	; (4990 <__ieee754_log10+0x120>)
    494c:	f001 fc44 	bl	61d8 <__aeabi_ddiv>
    4950:	e7b1      	b.n	48b6 <__ieee754_log10+0x46>
    4952:	0002      	movs	r2, r0
    4954:	000b      	movs	r3, r1
    4956:	f002 faf3 	bl	6f40 <__aeabi_dsub>
    495a:	2200      	movs	r2, #0
    495c:	2300      	movs	r3, #0
    495e:	f001 fc3b 	bl	61d8 <__aeabi_ddiv>
    4962:	e7a8      	b.n	48b6 <__ieee754_log10+0x46>
    4964:	000fffff 	.word	0x000fffff
    4968:	43500000 	.word	0x43500000
    496c:	7fefffff 	.word	0x7fefffff
    4970:	fffffc01 	.word	0xfffffc01
    4974:	000003ff 	.word	0x000003ff
    4978:	11f12b36 	.word	0x11f12b36
    497c:	3d59fef3 	.word	0x3d59fef3
    4980:	1526e50e 	.word	0x1526e50e
    4984:	3fdbcb7b 	.word	0x3fdbcb7b
    4988:	509f6000 	.word	0x509f6000
    498c:	3fd34413 	.word	0x3fd34413
    4990:	c3500000 	.word	0xc3500000

00004994 <__ieee754_pow>:
    4994:	b5f0      	push	{r4, r5, r6, r7, lr}
    4996:	4657      	mov	r7, sl
    4998:	464e      	mov	r6, r9
    499a:	4645      	mov	r5, r8
    499c:	46de      	mov	lr, fp
    499e:	001c      	movs	r4, r3
    49a0:	0013      	movs	r3, r2
    49a2:	b5e0      	push	{r5, r6, r7, lr}
    49a4:	0065      	lsls	r5, r4, #1
    49a6:	b091      	sub	sp, #68	; 0x44
    49a8:	086d      	lsrs	r5, r5, #1
    49aa:	9300      	str	r3, [sp, #0]
    49ac:	9401      	str	r4, [sp, #4]
    49ae:	0007      	movs	r7, r0
    49b0:	000e      	movs	r6, r1
    49b2:	4680      	mov	r8, r0
    49b4:	4689      	mov	r9, r1
    49b6:	46a2      	mov	sl, r4
    49b8:	432b      	orrs	r3, r5
    49ba:	d031      	beq.n	4a20 <__ieee754_pow+0x8c>
    49bc:	4b67      	ldr	r3, [pc, #412]	; (4b5c <__ieee754_pow+0x1c8>)
    49be:	0074      	lsls	r4, r6, #1
    49c0:	0864      	lsrs	r4, r4, #1
    49c2:	429c      	cmp	r4, r3
    49c4:	dc27      	bgt.n	4a16 <__ieee754_pow+0x82>
    49c6:	d024      	beq.n	4a12 <__ieee754_pow+0x7e>
    49c8:	429d      	cmp	r5, r3
    49ca:	dc24      	bgt.n	4a16 <__ieee754_pow+0x82>
    49cc:	4b63      	ldr	r3, [pc, #396]	; (4b5c <__ieee754_pow+0x1c8>)
    49ce:	429d      	cmp	r5, r3
    49d0:	d100      	bne.n	49d4 <__ieee754_pow+0x40>
    49d2:	e081      	b.n	4ad8 <__ieee754_pow+0x144>
    49d4:	2300      	movs	r3, #0
    49d6:	469b      	mov	fp, r3
    49d8:	464b      	mov	r3, r9
    49da:	2b00      	cmp	r3, #0
    49dc:	da00      	bge.n	49e0 <__ieee754_pow+0x4c>
    49de:	e07f      	b.n	4ae0 <__ieee754_pow+0x14c>
    49e0:	2a00      	cmp	r2, #0
    49e2:	d12c      	bne.n	4a3e <__ieee754_pow+0xaa>
    49e4:	4b5d      	ldr	r3, [pc, #372]	; (4b5c <__ieee754_pow+0x1c8>)
    49e6:	429d      	cmp	r5, r3
    49e8:	d100      	bne.n	49ec <__ieee754_pow+0x58>
    49ea:	e097      	b.n	4b1c <__ieee754_pow+0x188>
    49ec:	4b5c      	ldr	r3, [pc, #368]	; (4b60 <__ieee754_pow+0x1cc>)
    49ee:	429d      	cmp	r5, r3
    49f0:	d066      	beq.n	4ac0 <__ieee754_pow+0x12c>
    49f2:	2380      	movs	r3, #128	; 0x80
    49f4:	05db      	lsls	r3, r3, #23
    49f6:	459a      	cmp	sl, r3
    49f8:	d100      	bne.n	49fc <__ieee754_pow+0x68>
    49fa:	e3b9      	b.n	5170 <__ieee754_pow+0x7dc>
    49fc:	4b59      	ldr	r3, [pc, #356]	; (4b64 <__ieee754_pow+0x1d0>)
    49fe:	459a      	cmp	sl, r3
    4a00:	d11d      	bne.n	4a3e <__ieee754_pow+0xaa>
    4a02:	464b      	mov	r3, r9
    4a04:	2b00      	cmp	r3, #0
    4a06:	db1a      	blt.n	4a3e <__ieee754_pow+0xaa>
    4a08:	0038      	movs	r0, r7
    4a0a:	0031      	movs	r1, r6
    4a0c:	f000 fcf8 	bl	5400 <__ieee754_sqrt>
    4a10:	e008      	b.n	4a24 <__ieee754_pow+0x90>
    4a12:	2800      	cmp	r0, #0
    4a14:	d00d      	beq.n	4a32 <__ieee754_pow+0x9e>
    4a16:	4b54      	ldr	r3, [pc, #336]	; (4b68 <__ieee754_pow+0x1d4>)
    4a18:	469c      	mov	ip, r3
    4a1a:	4464      	add	r4, ip
    4a1c:	4327      	orrs	r7, r4
    4a1e:	d10a      	bne.n	4a36 <__ieee754_pow+0xa2>
    4a20:	2000      	movs	r0, #0
    4a22:	494f      	ldr	r1, [pc, #316]	; (4b60 <__ieee754_pow+0x1cc>)
    4a24:	b011      	add	sp, #68	; 0x44
    4a26:	bc3c      	pop	{r2, r3, r4, r5}
    4a28:	4690      	mov	r8, r2
    4a2a:	4699      	mov	r9, r3
    4a2c:	46a2      	mov	sl, r4
    4a2e:	46ab      	mov	fp, r5
    4a30:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4a32:	42a5      	cmp	r5, r4
    4a34:	ddca      	ble.n	49cc <__ieee754_pow+0x38>
    4a36:	484d      	ldr	r0, [pc, #308]	; (4b6c <__ieee754_pow+0x1d8>)
    4a38:	f000 fdd2 	bl	55e0 <nan>
    4a3c:	e7f2      	b.n	4a24 <__ieee754_pow+0x90>
    4a3e:	0038      	movs	r0, r7
    4a40:	0031      	movs	r1, r6
    4a42:	f000 fdbd 	bl	55c0 <fabs>
    4a46:	4643      	mov	r3, r8
    4a48:	2b00      	cmp	r3, #0
    4a4a:	d11d      	bne.n	4a88 <__ieee754_pow+0xf4>
    4a4c:	2c00      	cmp	r4, #0
    4a4e:	d004      	beq.n	4a5a <__ieee754_pow+0xc6>
    4a50:	4a43      	ldr	r2, [pc, #268]	; (4b60 <__ieee754_pow+0x1cc>)
    4a52:	00b3      	lsls	r3, r6, #2
    4a54:	089b      	lsrs	r3, r3, #2
    4a56:	4293      	cmp	r3, r2
    4a58:	d116      	bne.n	4a88 <__ieee754_pow+0xf4>
    4a5a:	4653      	mov	r3, sl
    4a5c:	2b00      	cmp	r3, #0
    4a5e:	da00      	bge.n	4a62 <__ieee754_pow+0xce>
    4a60:	e3c5      	b.n	51ee <__ieee754_pow+0x85a>
    4a62:	464b      	mov	r3, r9
    4a64:	2b00      	cmp	r3, #0
    4a66:	dadd      	bge.n	4a24 <__ieee754_pow+0x90>
    4a68:	4b3f      	ldr	r3, [pc, #252]	; (4b68 <__ieee754_pow+0x1d4>)
    4a6a:	469c      	mov	ip, r3
    4a6c:	465b      	mov	r3, fp
    4a6e:	4464      	add	r4, ip
    4a70:	431c      	orrs	r4, r3
    4a72:	d101      	bne.n	4a78 <__ieee754_pow+0xe4>
    4a74:	f000 fc53 	bl	531e <__ieee754_pow+0x98a>
    4a78:	465b      	mov	r3, fp
    4a7a:	2b01      	cmp	r3, #1
    4a7c:	d1d2      	bne.n	4a24 <__ieee754_pow+0x90>
    4a7e:	2480      	movs	r4, #128	; 0x80
    4a80:	0624      	lsls	r4, r4, #24
    4a82:	190b      	adds	r3, r1, r4
    4a84:	0019      	movs	r1, r3
    4a86:	e7cd      	b.n	4a24 <__ieee754_pow+0x90>
    4a88:	0ff3      	lsrs	r3, r6, #31
    4a8a:	3b01      	subs	r3, #1
    4a8c:	4698      	mov	r8, r3
    4a8e:	465b      	mov	r3, fp
    4a90:	4642      	mov	r2, r8
    4a92:	4313      	orrs	r3, r2
    4a94:	d057      	beq.n	4b46 <__ieee754_pow+0x1b2>
    4a96:	4b36      	ldr	r3, [pc, #216]	; (4b70 <__ieee754_pow+0x1dc>)
    4a98:	429d      	cmp	r5, r3
    4a9a:	dd77      	ble.n	4b8c <__ieee754_pow+0x1f8>
    4a9c:	4b35      	ldr	r3, [pc, #212]	; (4b74 <__ieee754_pow+0x1e0>)
    4a9e:	429d      	cmp	r5, r3
    4aa0:	dc00      	bgt.n	4aa4 <__ieee754_pow+0x110>
    4aa2:	e3b1      	b.n	5208 <__ieee754_pow+0x874>
    4aa4:	4b34      	ldr	r3, [pc, #208]	; (4b78 <__ieee754_pow+0x1e4>)
    4aa6:	429c      	cmp	r4, r3
    4aa8:	dc00      	bgt.n	4aac <__ieee754_pow+0x118>
    4aaa:	e3a8      	b.n	51fe <__ieee754_pow+0x86a>
    4aac:	4653      	mov	r3, sl
    4aae:	2b00      	cmp	r3, #0
    4ab0:	dd43      	ble.n	4b3a <__ieee754_pow+0x1a6>
    4ab2:	4a32      	ldr	r2, [pc, #200]	; (4b7c <__ieee754_pow+0x1e8>)
    4ab4:	4b32      	ldr	r3, [pc, #200]	; (4b80 <__ieee754_pow+0x1ec>)
    4ab6:	0010      	movs	r0, r2
    4ab8:	0019      	movs	r1, r3
    4aba:	f001 ffc1 	bl	6a40 <__aeabi_dmul>
    4abe:	e7b1      	b.n	4a24 <__ieee754_pow+0x90>
    4ac0:	4653      	mov	r3, sl
    4ac2:	0038      	movs	r0, r7
    4ac4:	0031      	movs	r1, r6
    4ac6:	2b00      	cmp	r3, #0
    4ac8:	daac      	bge.n	4a24 <__ieee754_pow+0x90>
    4aca:	003a      	movs	r2, r7
    4acc:	0033      	movs	r3, r6
    4ace:	2000      	movs	r0, #0
    4ad0:	4923      	ldr	r1, [pc, #140]	; (4b60 <__ieee754_pow+0x1cc>)
    4ad2:	f001 fb81 	bl	61d8 <__aeabi_ddiv>
    4ad6:	e7a5      	b.n	4a24 <__ieee754_pow+0x90>
    4ad8:	2a00      	cmp	r2, #0
    4ada:	d100      	bne.n	4ade <__ieee754_pow+0x14a>
    4adc:	e77a      	b.n	49d4 <__ieee754_pow+0x40>
    4ade:	e79a      	b.n	4a16 <__ieee754_pow+0x82>
    4ae0:	4b28      	ldr	r3, [pc, #160]	; (4b84 <__ieee754_pow+0x1f0>)
    4ae2:	429d      	cmp	r5, r3
    4ae4:	dc2c      	bgt.n	4b40 <__ieee754_pow+0x1ac>
    4ae6:	4b24      	ldr	r3, [pc, #144]	; (4b78 <__ieee754_pow+0x1e4>)
    4ae8:	429d      	cmp	r5, r3
    4aea:	dc00      	bgt.n	4aee <__ieee754_pow+0x15a>
    4aec:	e778      	b.n	49e0 <__ieee754_pow+0x4c>
    4aee:	4926      	ldr	r1, [pc, #152]	; (4b88 <__ieee754_pow+0x1f4>)
    4af0:	152b      	asrs	r3, r5, #20
    4af2:	468c      	mov	ip, r1
    4af4:	4463      	add	r3, ip
    4af6:	2b14      	cmp	r3, #20
    4af8:	dc01      	bgt.n	4afe <__ieee754_pow+0x16a>
    4afa:	f000 fbf3 	bl	52e4 <__ieee754_pow+0x950>
    4afe:	2134      	movs	r1, #52	; 0x34
    4b00:	1acb      	subs	r3, r1, r3
    4b02:	9900      	ldr	r1, [sp, #0]
    4b04:	40d9      	lsrs	r1, r3
    4b06:	0008      	movs	r0, r1
    4b08:	4098      	lsls	r0, r3
    4b0a:	4282      	cmp	r2, r0
    4b0c:	d000      	beq.n	4b10 <__ieee754_pow+0x17c>
    4b0e:	e767      	b.n	49e0 <__ieee754_pow+0x4c>
    4b10:	2301      	movs	r3, #1
    4b12:	4019      	ands	r1, r3
    4b14:	3301      	adds	r3, #1
    4b16:	1a5b      	subs	r3, r3, r1
    4b18:	469b      	mov	fp, r3
    4b1a:	e761      	b.n	49e0 <__ieee754_pow+0x4c>
    4b1c:	4b12      	ldr	r3, [pc, #72]	; (4b68 <__ieee754_pow+0x1d4>)
    4b1e:	18e3      	adds	r3, r4, r3
    4b20:	431f      	orrs	r7, r3
    4b22:	d100      	bne.n	4b26 <__ieee754_pow+0x192>
    4b24:	e77c      	b.n	4a20 <__ieee754_pow+0x8c>
    4b26:	4b14      	ldr	r3, [pc, #80]	; (4b78 <__ieee754_pow+0x1e4>)
    4b28:	429c      	cmp	r4, r3
    4b2a:	dc00      	bgt.n	4b2e <__ieee754_pow+0x19a>
    4b2c:	e327      	b.n	517e <__ieee754_pow+0x7ea>
    4b2e:	9800      	ldr	r0, [sp, #0]
    4b30:	9901      	ldr	r1, [sp, #4]
    4b32:	4653      	mov	r3, sl
    4b34:	2b00      	cmp	r3, #0
    4b36:	db00      	blt.n	4b3a <__ieee754_pow+0x1a6>
    4b38:	e774      	b.n	4a24 <__ieee754_pow+0x90>
    4b3a:	2000      	movs	r0, #0
    4b3c:	2100      	movs	r1, #0
    4b3e:	e771      	b.n	4a24 <__ieee754_pow+0x90>
    4b40:	2302      	movs	r3, #2
    4b42:	469b      	mov	fp, r3
    4b44:	e74c      	b.n	49e0 <__ieee754_pow+0x4c>
    4b46:	003a      	movs	r2, r7
    4b48:	0033      	movs	r3, r6
    4b4a:	0038      	movs	r0, r7
    4b4c:	0031      	movs	r1, r6
    4b4e:	f002 f9f7 	bl	6f40 <__aeabi_dsub>
    4b52:	0002      	movs	r2, r0
    4b54:	000b      	movs	r3, r1
    4b56:	f001 fb3f 	bl	61d8 <__aeabi_ddiv>
    4b5a:	e763      	b.n	4a24 <__ieee754_pow+0x90>
    4b5c:	7ff00000 	.word	0x7ff00000
    4b60:	3ff00000 	.word	0x3ff00000
    4b64:	3fe00000 	.word	0x3fe00000
    4b68:	c0100000 	.word	0xc0100000
    4b6c:	00008218 	.word	0x00008218
    4b70:	41e00000 	.word	0x41e00000
    4b74:	43f00000 	.word	0x43f00000
    4b78:	3fefffff 	.word	0x3fefffff
    4b7c:	8800759c 	.word	0x8800759c
    4b80:	7e37e43c 	.word	0x7e37e43c
    4b84:	433fffff 	.word	0x433fffff
    4b88:	fffffc01 	.word	0xfffffc01
    4b8c:	4be9      	ldr	r3, [pc, #932]	; (4f34 <__ieee754_pow+0x5a0>)
    4b8e:	2200      	movs	r2, #0
    4b90:	429c      	cmp	r4, r3
    4b92:	dc06      	bgt.n	4ba2 <__ieee754_pow+0x20e>
    4b94:	2200      	movs	r2, #0
    4b96:	4be8      	ldr	r3, [pc, #928]	; (4f38 <__ieee754_pow+0x5a4>)
    4b98:	f001 ff52 	bl	6a40 <__aeabi_dmul>
    4b9c:	2235      	movs	r2, #53	; 0x35
    4b9e:	000c      	movs	r4, r1
    4ba0:	4252      	negs	r2, r2
    4ba2:	4de6      	ldr	r5, [pc, #920]	; (4f3c <__ieee754_pow+0x5a8>)
    4ba4:	1523      	asrs	r3, r4, #20
    4ba6:	46ac      	mov	ip, r5
    4ba8:	4463      	add	r3, ip
    4baa:	4699      	mov	r9, r3
    4bac:	0324      	lsls	r4, r4, #12
    4bae:	4de4      	ldr	r5, [pc, #912]	; (4f40 <__ieee754_pow+0x5ac>)
    4bb0:	4be4      	ldr	r3, [pc, #912]	; (4f44 <__ieee754_pow+0x5b0>)
    4bb2:	0b24      	lsrs	r4, r4, #12
    4bb4:	4491      	add	r9, r2
    4bb6:	4325      	orrs	r5, r4
    4bb8:	429c      	cmp	r4, r3
    4bba:	dd09      	ble.n	4bd0 <__ieee754_pow+0x23c>
    4bbc:	4be2      	ldr	r3, [pc, #904]	; (4f48 <__ieee754_pow+0x5b4>)
    4bbe:	429c      	cmp	r4, r3
    4bc0:	dc00      	bgt.n	4bc4 <__ieee754_pow+0x230>
    4bc2:	e3b6      	b.n	5332 <__ieee754_pow+0x99e>
    4bc4:	2301      	movs	r3, #1
    4bc6:	469c      	mov	ip, r3
    4bc8:	4be0      	ldr	r3, [pc, #896]	; (4f4c <__ieee754_pow+0x5b8>)
    4bca:	44e1      	add	r9, ip
    4bcc:	469c      	mov	ip, r3
    4bce:	4465      	add	r5, ip
    4bd0:	2300      	movs	r3, #0
    4bd2:	2400      	movs	r4, #0
    4bd4:	2200      	movs	r2, #0
    4bd6:	9308      	str	r3, [sp, #32]
    4bd8:	9409      	str	r4, [sp, #36]	; 0x24
    4bda:	930c      	str	r3, [sp, #48]	; 0x30
    4bdc:	940d      	str	r4, [sp, #52]	; 0x34
    4bde:	2400      	movs	r4, #0
    4be0:	4bd7      	ldr	r3, [pc, #860]	; (4f40 <__ieee754_pow+0x5ac>)
    4be2:	9206      	str	r2, [sp, #24]
    4be4:	9307      	str	r3, [sp, #28]
    4be6:	9a06      	ldr	r2, [sp, #24]
    4be8:	9b07      	ldr	r3, [sp, #28]
    4bea:	0029      	movs	r1, r5
    4bec:	900a      	str	r0, [sp, #40]	; 0x28
    4bee:	910b      	str	r1, [sp, #44]	; 0x2c
    4bf0:	f002 f9a6 	bl	6f40 <__aeabi_dsub>
    4bf4:	9a06      	ldr	r2, [sp, #24]
    4bf6:	9b07      	ldr	r3, [sp, #28]
    4bf8:	0006      	movs	r6, r0
    4bfa:	000f      	movs	r7, r1
    4bfc:	980a      	ldr	r0, [sp, #40]	; 0x28
    4bfe:	990b      	ldr	r1, [sp, #44]	; 0x2c
    4c00:	f000 ffda 	bl	5bb8 <__aeabi_dadd>
    4c04:	0002      	movs	r2, r0
    4c06:	000b      	movs	r3, r1
    4c08:	2000      	movs	r0, #0
    4c0a:	49cd      	ldr	r1, [pc, #820]	; (4f40 <__ieee754_pow+0x5ac>)
    4c0c:	f001 fae4 	bl	61d8 <__aeabi_ddiv>
    4c10:	000a      	movs	r2, r1
    4c12:	0001      	movs	r1, r0
    4c14:	0013      	movs	r3, r2
    4c16:	910e      	str	r1, [sp, #56]	; 0x38
    4c18:	920f      	str	r2, [sp, #60]	; 0x3c
    4c1a:	0002      	movs	r2, r0
    4c1c:	0039      	movs	r1, r7
    4c1e:	0030      	movs	r0, r6
    4c20:	f001 ff0e 	bl	6a40 <__aeabi_dmul>
    4c24:	000a      	movs	r2, r1
    4c26:	0001      	movs	r1, r0
    4c28:	2080      	movs	r0, #128	; 0x80
    4c2a:	9104      	str	r1, [sp, #16]
    4c2c:	9205      	str	r2, [sp, #20]
    4c2e:	0013      	movs	r3, r2
    4c30:	2200      	movs	r2, #0
    4c32:	1069      	asrs	r1, r5, #1
    4c34:	2580      	movs	r5, #128	; 0x80
    4c36:	0300      	lsls	r0, r0, #12
    4c38:	4684      	mov	ip, r0
    4c3a:	9202      	str	r2, [sp, #8]
    4c3c:	9303      	str	r3, [sp, #12]
    4c3e:	2200      	movs	r2, #0
    4c40:	05ad      	lsls	r5, r5, #22
    4c42:	430d      	orrs	r5, r1
    4c44:	4465      	add	r5, ip
    4c46:	192b      	adds	r3, r5, r4
    4c48:	9802      	ldr	r0, [sp, #8]
    4c4a:	9903      	ldr	r1, [sp, #12]
    4c4c:	0014      	movs	r4, r2
    4c4e:	001d      	movs	r5, r3
    4c50:	f001 fef6 	bl	6a40 <__aeabi_dmul>
    4c54:	0002      	movs	r2, r0
    4c56:	000b      	movs	r3, r1
    4c58:	0030      	movs	r0, r6
    4c5a:	0039      	movs	r1, r7
    4c5c:	f002 f970 	bl	6f40 <__aeabi_dsub>
    4c60:	9a06      	ldr	r2, [sp, #24]
    4c62:	9b07      	ldr	r3, [sp, #28]
    4c64:	0006      	movs	r6, r0
    4c66:	000f      	movs	r7, r1
    4c68:	0020      	movs	r0, r4
    4c6a:	0029      	movs	r1, r5
    4c6c:	f002 f968 	bl	6f40 <__aeabi_dsub>
    4c70:	0002      	movs	r2, r0
    4c72:	000b      	movs	r3, r1
    4c74:	980a      	ldr	r0, [sp, #40]	; 0x28
    4c76:	990b      	ldr	r1, [sp, #44]	; 0x2c
    4c78:	f002 f962 	bl	6f40 <__aeabi_dsub>
    4c7c:	9a02      	ldr	r2, [sp, #8]
    4c7e:	9b03      	ldr	r3, [sp, #12]
    4c80:	f001 fede 	bl	6a40 <__aeabi_dmul>
    4c84:	0002      	movs	r2, r0
    4c86:	000b      	movs	r3, r1
    4c88:	0030      	movs	r0, r6
    4c8a:	0039      	movs	r1, r7
    4c8c:	f002 f958 	bl	6f40 <__aeabi_dsub>
    4c90:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    4c92:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    4c94:	f001 fed4 	bl	6a40 <__aeabi_dmul>
    4c98:	9d04      	ldr	r5, [sp, #16]
    4c9a:	9e05      	ldr	r6, [sp, #20]
    4c9c:	9006      	str	r0, [sp, #24]
    4c9e:	9107      	str	r1, [sp, #28]
    4ca0:	002a      	movs	r2, r5
    4ca2:	0033      	movs	r3, r6
    4ca4:	0028      	movs	r0, r5
    4ca6:	0031      	movs	r1, r6
    4ca8:	f001 feca 	bl	6a40 <__aeabi_dmul>
    4cac:	0006      	movs	r6, r0
    4cae:	000f      	movs	r7, r1
    4cb0:	4aa7      	ldr	r2, [pc, #668]	; (4f50 <__ieee754_pow+0x5bc>)
    4cb2:	4ba8      	ldr	r3, [pc, #672]	; (4f54 <__ieee754_pow+0x5c0>)
    4cb4:	f001 fec4 	bl	6a40 <__aeabi_dmul>
    4cb8:	4aa7      	ldr	r2, [pc, #668]	; (4f58 <__ieee754_pow+0x5c4>)
    4cba:	4ba8      	ldr	r3, [pc, #672]	; (4f5c <__ieee754_pow+0x5c8>)
    4cbc:	f000 ff7c 	bl	5bb8 <__aeabi_dadd>
    4cc0:	0032      	movs	r2, r6
    4cc2:	003b      	movs	r3, r7
    4cc4:	f001 febc 	bl	6a40 <__aeabi_dmul>
    4cc8:	4aa5      	ldr	r2, [pc, #660]	; (4f60 <__ieee754_pow+0x5cc>)
    4cca:	4ba6      	ldr	r3, [pc, #664]	; (4f64 <__ieee754_pow+0x5d0>)
    4ccc:	f000 ff74 	bl	5bb8 <__aeabi_dadd>
    4cd0:	0032      	movs	r2, r6
    4cd2:	003b      	movs	r3, r7
    4cd4:	f001 feb4 	bl	6a40 <__aeabi_dmul>
    4cd8:	4aa3      	ldr	r2, [pc, #652]	; (4f68 <__ieee754_pow+0x5d4>)
    4cda:	4ba4      	ldr	r3, [pc, #656]	; (4f6c <__ieee754_pow+0x5d8>)
    4cdc:	f000 ff6c 	bl	5bb8 <__aeabi_dadd>
    4ce0:	0032      	movs	r2, r6
    4ce2:	003b      	movs	r3, r7
    4ce4:	f001 feac 	bl	6a40 <__aeabi_dmul>
    4ce8:	4aa1      	ldr	r2, [pc, #644]	; (4f70 <__ieee754_pow+0x5dc>)
    4cea:	4ba2      	ldr	r3, [pc, #648]	; (4f74 <__ieee754_pow+0x5e0>)
    4cec:	f000 ff64 	bl	5bb8 <__aeabi_dadd>
    4cf0:	0032      	movs	r2, r6
    4cf2:	003b      	movs	r3, r7
    4cf4:	f001 fea4 	bl	6a40 <__aeabi_dmul>
    4cf8:	4a9f      	ldr	r2, [pc, #636]	; (4f78 <__ieee754_pow+0x5e4>)
    4cfa:	4ba0      	ldr	r3, [pc, #640]	; (4f7c <__ieee754_pow+0x5e8>)
    4cfc:	f000 ff5c 	bl	5bb8 <__aeabi_dadd>
    4d00:	0032      	movs	r2, r6
    4d02:	0004      	movs	r4, r0
    4d04:	000d      	movs	r5, r1
    4d06:	003b      	movs	r3, r7
    4d08:	0030      	movs	r0, r6
    4d0a:	0039      	movs	r1, r7
    4d0c:	f001 fe98 	bl	6a40 <__aeabi_dmul>
    4d10:	0002      	movs	r2, r0
    4d12:	000b      	movs	r3, r1
    4d14:	0020      	movs	r0, r4
    4d16:	0029      	movs	r1, r5
    4d18:	f001 fe92 	bl	6a40 <__aeabi_dmul>
    4d1c:	9e02      	ldr	r6, [sp, #8]
    4d1e:	9f03      	ldr	r7, [sp, #12]
    4d20:	0004      	movs	r4, r0
    4d22:	000d      	movs	r5, r1
    4d24:	9804      	ldr	r0, [sp, #16]
    4d26:	9905      	ldr	r1, [sp, #20]
    4d28:	0032      	movs	r2, r6
    4d2a:	003b      	movs	r3, r7
    4d2c:	f000 ff44 	bl	5bb8 <__aeabi_dadd>
    4d30:	9a06      	ldr	r2, [sp, #24]
    4d32:	9b07      	ldr	r3, [sp, #28]
    4d34:	f001 fe84 	bl	6a40 <__aeabi_dmul>
    4d38:	0022      	movs	r2, r4
    4d3a:	002b      	movs	r3, r5
    4d3c:	f000 ff3c 	bl	5bb8 <__aeabi_dadd>
    4d40:	0032      	movs	r2, r6
    4d42:	900a      	str	r0, [sp, #40]	; 0x28
    4d44:	910b      	str	r1, [sp, #44]	; 0x2c
    4d46:	003b      	movs	r3, r7
    4d48:	0030      	movs	r0, r6
    4d4a:	0039      	movs	r1, r7
    4d4c:	9602      	str	r6, [sp, #8]
    4d4e:	9703      	str	r7, [sp, #12]
    4d50:	f001 fe76 	bl	6a40 <__aeabi_dmul>
    4d54:	2200      	movs	r2, #0
    4d56:	4b8a      	ldr	r3, [pc, #552]	; (4f80 <__ieee754_pow+0x5ec>)
    4d58:	0004      	movs	r4, r0
    4d5a:	000d      	movs	r5, r1
    4d5c:	f000 ff2c 	bl	5bb8 <__aeabi_dadd>
    4d60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    4d62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4d64:	f000 ff28 	bl	5bb8 <__aeabi_dadd>
    4d68:	2600      	movs	r6, #0
    4d6a:	000f      	movs	r7, r1
    4d6c:	0032      	movs	r2, r6
    4d6e:	000b      	movs	r3, r1
    4d70:	9802      	ldr	r0, [sp, #8]
    4d72:	9903      	ldr	r1, [sp, #12]
    4d74:	f001 fe64 	bl	6a40 <__aeabi_dmul>
    4d78:	2200      	movs	r2, #0
    4d7a:	9002      	str	r0, [sp, #8]
    4d7c:	9103      	str	r1, [sp, #12]
    4d7e:	4b80      	ldr	r3, [pc, #512]	; (4f80 <__ieee754_pow+0x5ec>)
    4d80:	0030      	movs	r0, r6
    4d82:	0039      	movs	r1, r7
    4d84:	f002 f8dc 	bl	6f40 <__aeabi_dsub>
    4d88:	0022      	movs	r2, r4
    4d8a:	002b      	movs	r3, r5
    4d8c:	f002 f8d8 	bl	6f40 <__aeabi_dsub>
    4d90:	0002      	movs	r2, r0
    4d92:	000b      	movs	r3, r1
    4d94:	980a      	ldr	r0, [sp, #40]	; 0x28
    4d96:	990b      	ldr	r1, [sp, #44]	; 0x2c
    4d98:	f002 f8d2 	bl	6f40 <__aeabi_dsub>
    4d9c:	9a04      	ldr	r2, [sp, #16]
    4d9e:	9b05      	ldr	r3, [sp, #20]
    4da0:	f001 fe4e 	bl	6a40 <__aeabi_dmul>
    4da4:	0032      	movs	r2, r6
    4da6:	0004      	movs	r4, r0
    4da8:	000d      	movs	r5, r1
    4daa:	9806      	ldr	r0, [sp, #24]
    4dac:	9907      	ldr	r1, [sp, #28]
    4dae:	003b      	movs	r3, r7
    4db0:	f001 fe46 	bl	6a40 <__aeabi_dmul>
    4db4:	0002      	movs	r2, r0
    4db6:	000b      	movs	r3, r1
    4db8:	0020      	movs	r0, r4
    4dba:	0029      	movs	r1, r5
    4dbc:	f000 fefc 	bl	5bb8 <__aeabi_dadd>
    4dc0:	0004      	movs	r4, r0
    4dc2:	000d      	movs	r5, r1
    4dc4:	0002      	movs	r2, r0
    4dc6:	000b      	movs	r3, r1
    4dc8:	9802      	ldr	r0, [sp, #8]
    4dca:	9903      	ldr	r1, [sp, #12]
    4dcc:	f000 fef4 	bl	5bb8 <__aeabi_dadd>
    4dd0:	2600      	movs	r6, #0
    4dd2:	22e0      	movs	r2, #224	; 0xe0
    4dd4:	4b6b      	ldr	r3, [pc, #428]	; (4f84 <__ieee754_pow+0x5f0>)
    4dd6:	0612      	lsls	r2, r2, #24
    4dd8:	0030      	movs	r0, r6
    4dda:	000f      	movs	r7, r1
    4ddc:	f001 fe30 	bl	6a40 <__aeabi_dmul>
    4de0:	9a02      	ldr	r2, [sp, #8]
    4de2:	9b03      	ldr	r3, [sp, #12]
    4de4:	9004      	str	r0, [sp, #16]
    4de6:	9105      	str	r1, [sp, #20]
    4de8:	0030      	movs	r0, r6
    4dea:	0039      	movs	r1, r7
    4dec:	f002 f8a8 	bl	6f40 <__aeabi_dsub>
    4df0:	0002      	movs	r2, r0
    4df2:	000b      	movs	r3, r1
    4df4:	0020      	movs	r0, r4
    4df6:	0029      	movs	r1, r5
    4df8:	f002 f8a2 	bl	6f40 <__aeabi_dsub>
    4dfc:	4a62      	ldr	r2, [pc, #392]	; (4f88 <__ieee754_pow+0x5f4>)
    4dfe:	4b61      	ldr	r3, [pc, #388]	; (4f84 <__ieee754_pow+0x5f0>)
    4e00:	f001 fe1e 	bl	6a40 <__aeabi_dmul>
    4e04:	4a61      	ldr	r2, [pc, #388]	; (4f8c <__ieee754_pow+0x5f8>)
    4e06:	0004      	movs	r4, r0
    4e08:	000d      	movs	r5, r1
    4e0a:	4b61      	ldr	r3, [pc, #388]	; (4f90 <__ieee754_pow+0x5fc>)
    4e0c:	0030      	movs	r0, r6
    4e0e:	0039      	movs	r1, r7
    4e10:	f001 fe16 	bl	6a40 <__aeabi_dmul>
    4e14:	0002      	movs	r2, r0
    4e16:	000b      	movs	r3, r1
    4e18:	0020      	movs	r0, r4
    4e1a:	0029      	movs	r1, r5
    4e1c:	f000 fecc 	bl	5bb8 <__aeabi_dadd>
    4e20:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    4e22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4e24:	f000 fec8 	bl	5bb8 <__aeabi_dadd>
    4e28:	0006      	movs	r6, r0
    4e2a:	4648      	mov	r0, r9
    4e2c:	000f      	movs	r7, r1
    4e2e:	f002 fbbd 	bl	75ac <__aeabi_i2d>
    4e32:	0004      	movs	r4, r0
    4e34:	000d      	movs	r5, r1
    4e36:	9804      	ldr	r0, [sp, #16]
    4e38:	9905      	ldr	r1, [sp, #20]
    4e3a:	0032      	movs	r2, r6
    4e3c:	003b      	movs	r3, r7
    4e3e:	f000 febb 	bl	5bb8 <__aeabi_dadd>
    4e42:	9a08      	ldr	r2, [sp, #32]
    4e44:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4e46:	f000 feb7 	bl	5bb8 <__aeabi_dadd>
    4e4a:	0022      	movs	r2, r4
    4e4c:	002b      	movs	r3, r5
    4e4e:	f000 feb3 	bl	5bb8 <__aeabi_dadd>
    4e52:	2000      	movs	r0, #0
    4e54:	0022      	movs	r2, r4
    4e56:	002b      	movs	r3, r5
    4e58:	9002      	str	r0, [sp, #8]
    4e5a:	9103      	str	r1, [sp, #12]
    4e5c:	f002 f870 	bl	6f40 <__aeabi_dsub>
    4e60:	9a08      	ldr	r2, [sp, #32]
    4e62:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4e64:	f002 f86c 	bl	6f40 <__aeabi_dsub>
    4e68:	9a04      	ldr	r2, [sp, #16]
    4e6a:	9b05      	ldr	r3, [sp, #20]
    4e6c:	f002 f868 	bl	6f40 <__aeabi_dsub>
    4e70:	0002      	movs	r2, r0
    4e72:	000b      	movs	r3, r1
    4e74:	0030      	movs	r0, r6
    4e76:	0039      	movs	r1, r7
    4e78:	f002 f862 	bl	6f40 <__aeabi_dsub>
    4e7c:	9004      	str	r0, [sp, #16]
    4e7e:	9105      	str	r1, [sp, #20]
    4e80:	465b      	mov	r3, fp
    4e82:	4642      	mov	r2, r8
    4e84:	3b01      	subs	r3, #1
    4e86:	4313      	orrs	r3, r2
    4e88:	d100      	bne.n	4e8c <__ieee754_pow+0x4f8>
    4e8a:	e1ab      	b.n	51e4 <__ieee754_pow+0x850>
    4e8c:	2300      	movs	r3, #0
    4e8e:	4c2c      	ldr	r4, [pc, #176]	; (4f40 <__ieee754_pow+0x5ac>)
    4e90:	9306      	str	r3, [sp, #24]
    4e92:	9407      	str	r4, [sp, #28]
    4e94:	9800      	ldr	r0, [sp, #0]
    4e96:	9901      	ldr	r1, [sp, #4]
    4e98:	2600      	movs	r6, #0
    4e9a:	000b      	movs	r3, r1
    4e9c:	0032      	movs	r2, r6
    4e9e:	000f      	movs	r7, r1
    4ea0:	f002 f84e 	bl	6f40 <__aeabi_dsub>
    4ea4:	9a02      	ldr	r2, [sp, #8]
    4ea6:	9b03      	ldr	r3, [sp, #12]
    4ea8:	f001 fdca 	bl	6a40 <__aeabi_dmul>
    4eac:	9a00      	ldr	r2, [sp, #0]
    4eae:	9b01      	ldr	r3, [sp, #4]
    4eb0:	0004      	movs	r4, r0
    4eb2:	000d      	movs	r5, r1
    4eb4:	9804      	ldr	r0, [sp, #16]
    4eb6:	9905      	ldr	r1, [sp, #20]
    4eb8:	f001 fdc2 	bl	6a40 <__aeabi_dmul>
    4ebc:	0002      	movs	r2, r0
    4ebe:	000b      	movs	r3, r1
    4ec0:	0020      	movs	r0, r4
    4ec2:	0029      	movs	r1, r5
    4ec4:	f000 fe78 	bl	5bb8 <__aeabi_dadd>
    4ec8:	0004      	movs	r4, r0
    4eca:	000d      	movs	r5, r1
    4ecc:	9802      	ldr	r0, [sp, #8]
    4ece:	9903      	ldr	r1, [sp, #12]
    4ed0:	0032      	movs	r2, r6
    4ed2:	003b      	movs	r3, r7
    4ed4:	9400      	str	r4, [sp, #0]
    4ed6:	9501      	str	r5, [sp, #4]
    4ed8:	f001 fdb2 	bl	6a40 <__aeabi_dmul>
    4edc:	0002      	movs	r2, r0
    4ede:	000b      	movs	r3, r1
    4ee0:	0006      	movs	r6, r0
    4ee2:	000f      	movs	r7, r1
    4ee4:	0020      	movs	r0, r4
    4ee6:	0029      	movs	r1, r5
    4ee8:	f000 fe66 	bl	5bb8 <__aeabi_dadd>
    4eec:	4b29      	ldr	r3, [pc, #164]	; (4f94 <__ieee754_pow+0x600>)
    4eee:	0004      	movs	r4, r0
    4ef0:	000d      	movs	r5, r1
    4ef2:	0002      	movs	r2, r0
    4ef4:	468b      	mov	fp, r1
    4ef6:	4299      	cmp	r1, r3
    4ef8:	dc00      	bgt.n	4efc <__ieee754_pow+0x568>
    4efa:	e14f      	b.n	519c <__ieee754_pow+0x808>
    4efc:	4b26      	ldr	r3, [pc, #152]	; (4f98 <__ieee754_pow+0x604>)
    4efe:	18cb      	adds	r3, r1, r3
    4f00:	4303      	orrs	r3, r0
    4f02:	d000      	beq.n	4f06 <__ieee754_pow+0x572>
    4f04:	e1e2      	b.n	52cc <__ieee754_pow+0x938>
    4f06:	9800      	ldr	r0, [sp, #0]
    4f08:	9901      	ldr	r1, [sp, #4]
    4f0a:	4a24      	ldr	r2, [pc, #144]	; (4f9c <__ieee754_pow+0x608>)
    4f0c:	4b24      	ldr	r3, [pc, #144]	; (4fa0 <__ieee754_pow+0x60c>)
    4f0e:	f000 fe53 	bl	5bb8 <__aeabi_dadd>
    4f12:	0032      	movs	r2, r6
    4f14:	9002      	str	r0, [sp, #8]
    4f16:	9103      	str	r1, [sp, #12]
    4f18:	003b      	movs	r3, r7
    4f1a:	0020      	movs	r0, r4
    4f1c:	0029      	movs	r1, r5
    4f1e:	f002 f80f 	bl	6f40 <__aeabi_dsub>
    4f22:	0002      	movs	r2, r0
    4f24:	000b      	movs	r3, r1
    4f26:	9802      	ldr	r0, [sp, #8]
    4f28:	9903      	ldr	r1, [sp, #12]
    4f2a:	f000 fe11 	bl	5b50 <__aeabi_dcmpgt>
    4f2e:	46aa      	mov	sl, r5
    4f30:	e038      	b.n	4fa4 <__ieee754_pow+0x610>
    4f32:	46c0      	nop			; (mov r8, r8)
    4f34:	000fffff 	.word	0x000fffff
    4f38:	43400000 	.word	0x43400000
    4f3c:	fffffc01 	.word	0xfffffc01
    4f40:	3ff00000 	.word	0x3ff00000
    4f44:	0003988e 	.word	0x0003988e
    4f48:	000bb679 	.word	0x000bb679
    4f4c:	fff00000 	.word	0xfff00000
    4f50:	4a454eef 	.word	0x4a454eef
    4f54:	3fca7e28 	.word	0x3fca7e28
    4f58:	93c9db65 	.word	0x93c9db65
    4f5c:	3fcd864a 	.word	0x3fcd864a
    4f60:	a91d4101 	.word	0xa91d4101
    4f64:	3fd17460 	.word	0x3fd17460
    4f68:	518f264d 	.word	0x518f264d
    4f6c:	3fd55555 	.word	0x3fd55555
    4f70:	db6fabff 	.word	0xdb6fabff
    4f74:	3fdb6db6 	.word	0x3fdb6db6
    4f78:	33333303 	.word	0x33333303
    4f7c:	3fe33333 	.word	0x3fe33333
    4f80:	40080000 	.word	0x40080000
    4f84:	3feec709 	.word	0x3feec709
    4f88:	dc3a03fd 	.word	0xdc3a03fd
    4f8c:	145b01f5 	.word	0x145b01f5
    4f90:	be3e2fe0 	.word	0xbe3e2fe0
    4f94:	408fffff 	.word	0x408fffff
    4f98:	bf700000 	.word	0xbf700000
    4f9c:	652b82fe 	.word	0x652b82fe
    4fa0:	3c971547 	.word	0x3c971547
    4fa4:	2800      	cmp	r0, #0
    4fa6:	d000      	beq.n	4faa <__ieee754_pow+0x616>
    4fa8:	e190      	b.n	52cc <__ieee754_pow+0x938>
    4faa:	4aec      	ldr	r2, [pc, #944]	; (535c <__ieee754_pow+0x9c8>)
    4fac:	4653      	mov	r3, sl
    4fae:	4694      	mov	ip, r2
    4fb0:	2280      	movs	r2, #128	; 0x80
    4fb2:	0352      	lsls	r2, r2, #13
    4fb4:	0011      	movs	r1, r2
    4fb6:	151b      	asrs	r3, r3, #20
    4fb8:	4463      	add	r3, ip
    4fba:	4119      	asrs	r1, r3
    4fbc:	000b      	movs	r3, r1
    4fbe:	4690      	mov	r8, r2
    4fc0:	4ae7      	ldr	r2, [pc, #924]	; (5360 <__ieee754_pow+0x9cc>)
    4fc2:	445b      	add	r3, fp
    4fc4:	4694      	mov	ip, r2
    4fc6:	005c      	lsls	r4, r3, #1
    4fc8:	0d64      	lsrs	r4, r4, #21
    4fca:	4de6      	ldr	r5, [pc, #920]	; (5364 <__ieee754_pow+0x9d0>)
    4fcc:	4464      	add	r4, ip
    4fce:	4125      	asrs	r5, r4
    4fd0:	001a      	movs	r2, r3
    4fd2:	43aa      	bics	r2, r5
    4fd4:	0011      	movs	r1, r2
    4fd6:	4642      	mov	r2, r8
    4fd8:	031b      	lsls	r3, r3, #12
    4fda:	0b1b      	lsrs	r3, r3, #12
    4fdc:	4313      	orrs	r3, r2
    4fde:	2214      	movs	r2, #20
    4fe0:	1b14      	subs	r4, r2, r4
    4fe2:	4123      	asrs	r3, r4
    4fe4:	4699      	mov	r9, r3
    4fe6:	465b      	mov	r3, fp
    4fe8:	2000      	movs	r0, #0
    4fea:	2b00      	cmp	r3, #0
    4fec:	da00      	bge.n	4ff0 <__ieee754_pow+0x65c>
    4fee:	e1b0      	b.n	5352 <__ieee754_pow+0x9be>
    4ff0:	0002      	movs	r2, r0
    4ff2:	000b      	movs	r3, r1
    4ff4:	0030      	movs	r0, r6
    4ff6:	0039      	movs	r1, r7
    4ff8:	f001 ffa2 	bl	6f40 <__aeabi_dsub>
    4ffc:	000b      	movs	r3, r1
    4ffe:	0002      	movs	r2, r0
    5000:	0006      	movs	r6, r0
    5002:	000f      	movs	r7, r1
    5004:	9800      	ldr	r0, [sp, #0]
    5006:	9901      	ldr	r1, [sp, #4]
    5008:	f000 fdd6 	bl	5bb8 <__aeabi_dadd>
    500c:	464b      	mov	r3, r9
    500e:	051b      	lsls	r3, r3, #20
    5010:	000d      	movs	r5, r1
    5012:	4698      	mov	r8, r3
    5014:	2400      	movs	r4, #0
    5016:	2200      	movs	r2, #0
    5018:	4bd3      	ldr	r3, [pc, #844]	; (5368 <__ieee754_pow+0x9d4>)
    501a:	0020      	movs	r0, r4
    501c:	0029      	movs	r1, r5
    501e:	f001 fd0f 	bl	6a40 <__aeabi_dmul>
    5022:	0032      	movs	r2, r6
    5024:	9002      	str	r0, [sp, #8]
    5026:	9103      	str	r1, [sp, #12]
    5028:	003b      	movs	r3, r7
    502a:	0020      	movs	r0, r4
    502c:	0029      	movs	r1, r5
    502e:	f001 ff87 	bl	6f40 <__aeabi_dsub>
    5032:	0002      	movs	r2, r0
    5034:	000b      	movs	r3, r1
    5036:	9800      	ldr	r0, [sp, #0]
    5038:	9901      	ldr	r1, [sp, #4]
    503a:	f001 ff81 	bl	6f40 <__aeabi_dsub>
    503e:	4acb      	ldr	r2, [pc, #812]	; (536c <__ieee754_pow+0x9d8>)
    5040:	4bcb      	ldr	r3, [pc, #812]	; (5370 <__ieee754_pow+0x9dc>)
    5042:	f001 fcfd 	bl	6a40 <__aeabi_dmul>
    5046:	4acb      	ldr	r2, [pc, #812]	; (5374 <__ieee754_pow+0x9e0>)
    5048:	0006      	movs	r6, r0
    504a:	000f      	movs	r7, r1
    504c:	4bca      	ldr	r3, [pc, #808]	; (5378 <__ieee754_pow+0x9e4>)
    504e:	0020      	movs	r0, r4
    5050:	0029      	movs	r1, r5
    5052:	f001 fcf5 	bl	6a40 <__aeabi_dmul>
    5056:	0002      	movs	r2, r0
    5058:	000b      	movs	r3, r1
    505a:	0030      	movs	r0, r6
    505c:	0039      	movs	r1, r7
    505e:	f000 fdab 	bl	5bb8 <__aeabi_dadd>
    5062:	0004      	movs	r4, r0
    5064:	000d      	movs	r5, r1
    5066:	0002      	movs	r2, r0
    5068:	000b      	movs	r3, r1
    506a:	9802      	ldr	r0, [sp, #8]
    506c:	9903      	ldr	r1, [sp, #12]
    506e:	f000 fda3 	bl	5bb8 <__aeabi_dadd>
    5072:	9a02      	ldr	r2, [sp, #8]
    5074:	9b03      	ldr	r3, [sp, #12]
    5076:	0006      	movs	r6, r0
    5078:	000f      	movs	r7, r1
    507a:	f001 ff61 	bl	6f40 <__aeabi_dsub>
    507e:	0002      	movs	r2, r0
    5080:	000b      	movs	r3, r1
    5082:	0020      	movs	r0, r4
    5084:	0029      	movs	r1, r5
    5086:	f001 ff5b 	bl	6f40 <__aeabi_dsub>
    508a:	0032      	movs	r2, r6
    508c:	9000      	str	r0, [sp, #0]
    508e:	9101      	str	r1, [sp, #4]
    5090:	003b      	movs	r3, r7
    5092:	0030      	movs	r0, r6
    5094:	0039      	movs	r1, r7
    5096:	f001 fcd3 	bl	6a40 <__aeabi_dmul>
    509a:	0004      	movs	r4, r0
    509c:	000d      	movs	r5, r1
    509e:	4ab7      	ldr	r2, [pc, #732]	; (537c <__ieee754_pow+0x9e8>)
    50a0:	4bb7      	ldr	r3, [pc, #732]	; (5380 <__ieee754_pow+0x9ec>)
    50a2:	f001 fccd 	bl	6a40 <__aeabi_dmul>
    50a6:	4ab7      	ldr	r2, [pc, #732]	; (5384 <__ieee754_pow+0x9f0>)
    50a8:	4bb7      	ldr	r3, [pc, #732]	; (5388 <__ieee754_pow+0x9f4>)
    50aa:	f001 ff49 	bl	6f40 <__aeabi_dsub>
    50ae:	0022      	movs	r2, r4
    50b0:	002b      	movs	r3, r5
    50b2:	f001 fcc5 	bl	6a40 <__aeabi_dmul>
    50b6:	4ab5      	ldr	r2, [pc, #724]	; (538c <__ieee754_pow+0x9f8>)
    50b8:	4bb5      	ldr	r3, [pc, #724]	; (5390 <__ieee754_pow+0x9fc>)
    50ba:	f000 fd7d 	bl	5bb8 <__aeabi_dadd>
    50be:	0022      	movs	r2, r4
    50c0:	002b      	movs	r3, r5
    50c2:	f001 fcbd 	bl	6a40 <__aeabi_dmul>
    50c6:	4ab3      	ldr	r2, [pc, #716]	; (5394 <__ieee754_pow+0xa00>)
    50c8:	4bb3      	ldr	r3, [pc, #716]	; (5398 <__ieee754_pow+0xa04>)
    50ca:	f001 ff39 	bl	6f40 <__aeabi_dsub>
    50ce:	0022      	movs	r2, r4
    50d0:	002b      	movs	r3, r5
    50d2:	f001 fcb5 	bl	6a40 <__aeabi_dmul>
    50d6:	4ab1      	ldr	r2, [pc, #708]	; (539c <__ieee754_pow+0xa08>)
    50d8:	4bb1      	ldr	r3, [pc, #708]	; (53a0 <__ieee754_pow+0xa0c>)
    50da:	f000 fd6d 	bl	5bb8 <__aeabi_dadd>
    50de:	0022      	movs	r2, r4
    50e0:	002b      	movs	r3, r5
    50e2:	f001 fcad 	bl	6a40 <__aeabi_dmul>
    50e6:	0002      	movs	r2, r0
    50e8:	000b      	movs	r3, r1
    50ea:	0030      	movs	r0, r6
    50ec:	0039      	movs	r1, r7
    50ee:	f001 ff27 	bl	6f40 <__aeabi_dsub>
    50f2:	0004      	movs	r4, r0
    50f4:	000d      	movs	r5, r1
    50f6:	0002      	movs	r2, r0
    50f8:	000b      	movs	r3, r1
    50fa:	0030      	movs	r0, r6
    50fc:	0039      	movs	r1, r7
    50fe:	f001 fc9f 	bl	6a40 <__aeabi_dmul>
    5102:	2380      	movs	r3, #128	; 0x80
    5104:	9002      	str	r0, [sp, #8]
    5106:	9103      	str	r1, [sp, #12]
    5108:	2200      	movs	r2, #0
    510a:	05db      	lsls	r3, r3, #23
    510c:	0020      	movs	r0, r4
    510e:	0029      	movs	r1, r5
    5110:	f001 ff16 	bl	6f40 <__aeabi_dsub>
    5114:	0002      	movs	r2, r0
    5116:	000b      	movs	r3, r1
    5118:	9802      	ldr	r0, [sp, #8]
    511a:	9903      	ldr	r1, [sp, #12]
    511c:	f001 f85c 	bl	61d8 <__aeabi_ddiv>
    5120:	9a00      	ldr	r2, [sp, #0]
    5122:	9b01      	ldr	r3, [sp, #4]
    5124:	0004      	movs	r4, r0
    5126:	000d      	movs	r5, r1
    5128:	0030      	movs	r0, r6
    512a:	0039      	movs	r1, r7
    512c:	f001 fc88 	bl	6a40 <__aeabi_dmul>
    5130:	9a00      	ldr	r2, [sp, #0]
    5132:	9b01      	ldr	r3, [sp, #4]
    5134:	f000 fd40 	bl	5bb8 <__aeabi_dadd>
    5138:	0002      	movs	r2, r0
    513a:	000b      	movs	r3, r1
    513c:	0020      	movs	r0, r4
    513e:	0029      	movs	r1, r5
    5140:	f001 fefe 	bl	6f40 <__aeabi_dsub>
    5144:	0032      	movs	r2, r6
    5146:	003b      	movs	r3, r7
    5148:	f001 fefa 	bl	6f40 <__aeabi_dsub>
    514c:	0002      	movs	r2, r0
    514e:	000b      	movs	r3, r1
    5150:	2000      	movs	r0, #0
    5152:	4994      	ldr	r1, [pc, #592]	; (53a4 <__ieee754_pow+0xa10>)
    5154:	f001 fef4 	bl	6f40 <__aeabi_dsub>
    5158:	4643      	mov	r3, r8
    515a:	185b      	adds	r3, r3, r1
    515c:	151a      	asrs	r2, r3, #20
    515e:	2a00      	cmp	r2, #0
    5160:	dc00      	bgt.n	5164 <__ieee754_pow+0x7d0>
    5162:	e149      	b.n	53f8 <__ieee754_pow+0xa64>
    5164:	0019      	movs	r1, r3
    5166:	9a06      	ldr	r2, [sp, #24]
    5168:	9b07      	ldr	r3, [sp, #28]
    516a:	f001 fc69 	bl	6a40 <__aeabi_dmul>
    516e:	e459      	b.n	4a24 <__ieee754_pow+0x90>
    5170:	003a      	movs	r2, r7
    5172:	0033      	movs	r3, r6
    5174:	0038      	movs	r0, r7
    5176:	0031      	movs	r1, r6
    5178:	f001 fc62 	bl	6a40 <__aeabi_dmul>
    517c:	e452      	b.n	4a24 <__ieee754_pow+0x90>
    517e:	4653      	mov	r3, sl
    5180:	2b00      	cmp	r3, #0
    5182:	db00      	blt.n	5186 <__ieee754_pow+0x7f2>
    5184:	e4d9      	b.n	4b3a <__ieee754_pow+0x1a6>
    5186:	9c00      	ldr	r4, [sp, #0]
    5188:	9d01      	ldr	r5, [sp, #4]
    518a:	2280      	movs	r2, #128	; 0x80
    518c:	0612      	lsls	r2, r2, #24
    518e:	002b      	movs	r3, r5
    5190:	4694      	mov	ip, r2
    5192:	4463      	add	r3, ip
    5194:	0020      	movs	r0, r4
    5196:	0019      	movs	r1, r3
    5198:	f7ff fc44 	bl	4a24 <__ieee754_pow+0x90>
    519c:	004b      	lsls	r3, r1, #1
    519e:	085b      	lsrs	r3, r3, #1
    51a0:	469a      	mov	sl, r3
    51a2:	4b81      	ldr	r3, [pc, #516]	; (53a8 <__ieee754_pow+0xa14>)
    51a4:	459a      	cmp	sl, r3
    51a6:	dc00      	bgt.n	51aa <__ieee754_pow+0x816>
    51a8:	e0b1      	b.n	530e <__ieee754_pow+0x97a>
    51aa:	4b80      	ldr	r3, [pc, #512]	; (53ac <__ieee754_pow+0xa18>)
    51ac:	445b      	add	r3, fp
    51ae:	431a      	orrs	r2, r3
    51b0:	d10c      	bne.n	51cc <__ieee754_pow+0x838>
    51b2:	0032      	movs	r2, r6
    51b4:	003b      	movs	r3, r7
    51b6:	f001 fec3 	bl	6f40 <__aeabi_dsub>
    51ba:	0002      	movs	r2, r0
    51bc:	000b      	movs	r3, r1
    51be:	9800      	ldr	r0, [sp, #0]
    51c0:	9901      	ldr	r1, [sp, #4]
    51c2:	f000 fcbb 	bl	5b3c <__aeabi_dcmple>
    51c6:	2800      	cmp	r0, #0
    51c8:	d100      	bne.n	51cc <__ieee754_pow+0x838>
    51ca:	e6ee      	b.n	4faa <__ieee754_pow+0x616>
    51cc:	9806      	ldr	r0, [sp, #24]
    51ce:	9907      	ldr	r1, [sp, #28]
    51d0:	4a77      	ldr	r2, [pc, #476]	; (53b0 <__ieee754_pow+0xa1c>)
    51d2:	4b78      	ldr	r3, [pc, #480]	; (53b4 <__ieee754_pow+0xa20>)
    51d4:	f001 fc34 	bl	6a40 <__aeabi_dmul>
    51d8:	4a75      	ldr	r2, [pc, #468]	; (53b0 <__ieee754_pow+0xa1c>)
    51da:	4b76      	ldr	r3, [pc, #472]	; (53b4 <__ieee754_pow+0xa20>)
    51dc:	f001 fc30 	bl	6a40 <__aeabi_dmul>
    51e0:	f7ff fc20 	bl	4a24 <__ieee754_pow+0x90>
    51e4:	2300      	movs	r3, #0
    51e6:	4c74      	ldr	r4, [pc, #464]	; (53b8 <__ieee754_pow+0xa24>)
    51e8:	9306      	str	r3, [sp, #24]
    51ea:	9407      	str	r4, [sp, #28]
    51ec:	e652      	b.n	4e94 <__ieee754_pow+0x500>
    51ee:	0002      	movs	r2, r0
    51f0:	000b      	movs	r3, r1
    51f2:	2000      	movs	r0, #0
    51f4:	496b      	ldr	r1, [pc, #428]	; (53a4 <__ieee754_pow+0xa10>)
    51f6:	f000 ffef 	bl	61d8 <__aeabi_ddiv>
    51fa:	f7ff fc32 	bl	4a62 <__ieee754_pow+0xce>
    51fe:	4653      	mov	r3, sl
    5200:	2b00      	cmp	r3, #0
    5202:	db00      	blt.n	5206 <__ieee754_pow+0x872>
    5204:	e499      	b.n	4b3a <__ieee754_pow+0x1a6>
    5206:	e454      	b.n	4ab2 <__ieee754_pow+0x11e>
    5208:	4b6c      	ldr	r3, [pc, #432]	; (53bc <__ieee754_pow+0xa28>)
    520a:	429c      	cmp	r4, r3
    520c:	ddf7      	ble.n	51fe <__ieee754_pow+0x86a>
    520e:	4b65      	ldr	r3, [pc, #404]	; (53a4 <__ieee754_pow+0xa10>)
    5210:	429c      	cmp	r4, r3
    5212:	dd00      	ble.n	5216 <__ieee754_pow+0x882>
    5214:	e44a      	b.n	4aac <__ieee754_pow+0x118>
    5216:	2200      	movs	r2, #0
    5218:	4b62      	ldr	r3, [pc, #392]	; (53a4 <__ieee754_pow+0xa10>)
    521a:	f001 fe91 	bl	6f40 <__aeabi_dsub>
    521e:	22c0      	movs	r2, #192	; 0xc0
    5220:	4b67      	ldr	r3, [pc, #412]	; (53c0 <__ieee754_pow+0xa2c>)
    5222:	05d2      	lsls	r2, r2, #23
    5224:	0004      	movs	r4, r0
    5226:	000d      	movs	r5, r1
    5228:	f001 fc0a 	bl	6a40 <__aeabi_dmul>
    522c:	4a65      	ldr	r2, [pc, #404]	; (53c4 <__ieee754_pow+0xa30>)
    522e:	0006      	movs	r6, r0
    5230:	000f      	movs	r7, r1
    5232:	4b65      	ldr	r3, [pc, #404]	; (53c8 <__ieee754_pow+0xa34>)
    5234:	0020      	movs	r0, r4
    5236:	0029      	movs	r1, r5
    5238:	f001 fc02 	bl	6a40 <__aeabi_dmul>
    523c:	2200      	movs	r2, #0
    523e:	9002      	str	r0, [sp, #8]
    5240:	9103      	str	r1, [sp, #12]
    5242:	4b62      	ldr	r3, [pc, #392]	; (53cc <__ieee754_pow+0xa38>)
    5244:	0020      	movs	r0, r4
    5246:	0029      	movs	r1, r5
    5248:	f001 fbfa 	bl	6a40 <__aeabi_dmul>
    524c:	0002      	movs	r2, r0
    524e:	000b      	movs	r3, r1
    5250:	485f      	ldr	r0, [pc, #380]	; (53d0 <__ieee754_pow+0xa3c>)
    5252:	4960      	ldr	r1, [pc, #384]	; (53d4 <__ieee754_pow+0xa40>)
    5254:	f001 fe74 	bl	6f40 <__aeabi_dsub>
    5258:	0022      	movs	r2, r4
    525a:	002b      	movs	r3, r5
    525c:	f001 fbf0 	bl	6a40 <__aeabi_dmul>
    5260:	0002      	movs	r2, r0
    5262:	000b      	movs	r3, r1
    5264:	2000      	movs	r0, #0
    5266:	495c      	ldr	r1, [pc, #368]	; (53d8 <__ieee754_pow+0xa44>)
    5268:	f001 fe6a 	bl	6f40 <__aeabi_dsub>
    526c:	0022      	movs	r2, r4
    526e:	9004      	str	r0, [sp, #16]
    5270:	9105      	str	r1, [sp, #20]
    5272:	002b      	movs	r3, r5
    5274:	0020      	movs	r0, r4
    5276:	0029      	movs	r1, r5
    5278:	f001 fbe2 	bl	6a40 <__aeabi_dmul>
    527c:	0002      	movs	r2, r0
    527e:	000b      	movs	r3, r1
    5280:	9804      	ldr	r0, [sp, #16]
    5282:	9905      	ldr	r1, [sp, #20]
    5284:	f001 fbdc 	bl	6a40 <__aeabi_dmul>
    5288:	4a54      	ldr	r2, [pc, #336]	; (53dc <__ieee754_pow+0xa48>)
    528a:	4b4d      	ldr	r3, [pc, #308]	; (53c0 <__ieee754_pow+0xa2c>)
    528c:	f001 fbd8 	bl	6a40 <__aeabi_dmul>
    5290:	0002      	movs	r2, r0
    5292:	000b      	movs	r3, r1
    5294:	9802      	ldr	r0, [sp, #8]
    5296:	9903      	ldr	r1, [sp, #12]
    5298:	f001 fe52 	bl	6f40 <__aeabi_dsub>
    529c:	0002      	movs	r2, r0
    529e:	000b      	movs	r3, r1
    52a0:	0004      	movs	r4, r0
    52a2:	000d      	movs	r5, r1
    52a4:	0030      	movs	r0, r6
    52a6:	0039      	movs	r1, r7
    52a8:	f000 fc86 	bl	5bb8 <__aeabi_dadd>
    52ac:	2000      	movs	r0, #0
    52ae:	0032      	movs	r2, r6
    52b0:	003b      	movs	r3, r7
    52b2:	9002      	str	r0, [sp, #8]
    52b4:	9103      	str	r1, [sp, #12]
    52b6:	f001 fe43 	bl	6f40 <__aeabi_dsub>
    52ba:	0002      	movs	r2, r0
    52bc:	000b      	movs	r3, r1
    52be:	0020      	movs	r0, r4
    52c0:	0029      	movs	r1, r5
    52c2:	f001 fe3d 	bl	6f40 <__aeabi_dsub>
    52c6:	9004      	str	r0, [sp, #16]
    52c8:	9105      	str	r1, [sp, #20]
    52ca:	e5d9      	b.n	4e80 <__ieee754_pow+0x4ec>
    52cc:	4a44      	ldr	r2, [pc, #272]	; (53e0 <__ieee754_pow+0xa4c>)
    52ce:	4b45      	ldr	r3, [pc, #276]	; (53e4 <__ieee754_pow+0xa50>)
    52d0:	9806      	ldr	r0, [sp, #24]
    52d2:	9907      	ldr	r1, [sp, #28]
    52d4:	f001 fbb4 	bl	6a40 <__aeabi_dmul>
    52d8:	4a41      	ldr	r2, [pc, #260]	; (53e0 <__ieee754_pow+0xa4c>)
    52da:	4b42      	ldr	r3, [pc, #264]	; (53e4 <__ieee754_pow+0xa50>)
    52dc:	f001 fbb0 	bl	6a40 <__aeabi_dmul>
    52e0:	f7ff fba0 	bl	4a24 <__ieee754_pow+0x90>
    52e4:	2a00      	cmp	r2, #0
    52e6:	d001      	beq.n	52ec <__ieee754_pow+0x958>
    52e8:	f7ff fba9 	bl	4a3e <__ieee754_pow+0xaa>
    52ec:	3214      	adds	r2, #20
    52ee:	1ad3      	subs	r3, r2, r3
    52f0:	002a      	movs	r2, r5
    52f2:	411a      	asrs	r2, r3
    52f4:	0011      	movs	r1, r2
    52f6:	4099      	lsls	r1, r3
    52f8:	428d      	cmp	r5, r1
    52fa:	d001      	beq.n	5300 <__ieee754_pow+0x96c>
    52fc:	f7ff fb76 	bl	49ec <__ieee754_pow+0x58>
    5300:	2301      	movs	r3, #1
    5302:	401a      	ands	r2, r3
    5304:	18db      	adds	r3, r3, r3
    5306:	1a9b      	subs	r3, r3, r2
    5308:	469b      	mov	fp, r3
    530a:	f7ff fb6f 	bl	49ec <__ieee754_pow+0x58>
    530e:	2200      	movs	r2, #0
    5310:	4b31      	ldr	r3, [pc, #196]	; (53d8 <__ieee754_pow+0xa44>)
    5312:	4690      	mov	r8, r2
    5314:	4691      	mov	r9, r2
    5316:	459a      	cmp	sl, r3
    5318:	dc00      	bgt.n	531c <__ieee754_pow+0x988>
    531a:	e67b      	b.n	5014 <__ieee754_pow+0x680>
    531c:	e645      	b.n	4faa <__ieee754_pow+0x616>
    531e:	0002      	movs	r2, r0
    5320:	000b      	movs	r3, r1
    5322:	f001 fe0d 	bl	6f40 <__aeabi_dsub>
    5326:	0002      	movs	r2, r0
    5328:	000b      	movs	r3, r1
    532a:	f000 ff55 	bl	61d8 <__aeabi_ddiv>
    532e:	f7ff fb79 	bl	4a24 <__ieee754_pow+0x90>
    5332:	2380      	movs	r3, #128	; 0x80
    5334:	4c2c      	ldr	r4, [pc, #176]	; (53e8 <__ieee754_pow+0xa54>)
    5336:	05db      	lsls	r3, r3, #23
    5338:	9308      	str	r3, [sp, #32]
    533a:	9409      	str	r4, [sp, #36]	; 0x24
    533c:	4b2b      	ldr	r3, [pc, #172]	; (53ec <__ieee754_pow+0xa58>)
    533e:	4c2c      	ldr	r4, [pc, #176]	; (53f0 <__ieee754_pow+0xa5c>)
    5340:	2200      	movs	r2, #0
    5342:	930c      	str	r3, [sp, #48]	; 0x30
    5344:	940d      	str	r4, [sp, #52]	; 0x34
    5346:	2480      	movs	r4, #128	; 0x80
    5348:	4b2a      	ldr	r3, [pc, #168]	; (53f4 <__ieee754_pow+0xa60>)
    534a:	02e4      	lsls	r4, r4, #11
    534c:	9206      	str	r2, [sp, #24]
    534e:	9307      	str	r3, [sp, #28]
    5350:	e449      	b.n	4be6 <__ieee754_pow+0x252>
    5352:	464b      	mov	r3, r9
    5354:	425b      	negs	r3, r3
    5356:	4699      	mov	r9, r3
    5358:	e64a      	b.n	4ff0 <__ieee754_pow+0x65c>
    535a:	46c0      	nop			; (mov r8, r8)
    535c:	fffffc02 	.word	0xfffffc02
    5360:	fffffc01 	.word	0xfffffc01
    5364:	000fffff 	.word	0x000fffff
    5368:	3fe62e43 	.word	0x3fe62e43
    536c:	fefa39ef 	.word	0xfefa39ef
    5370:	3fe62e42 	.word	0x3fe62e42
    5374:	0ca86c39 	.word	0x0ca86c39
    5378:	be205c61 	.word	0xbe205c61
    537c:	72bea4d0 	.word	0x72bea4d0
    5380:	3e663769 	.word	0x3e663769
    5384:	c5d26bf1 	.word	0xc5d26bf1
    5388:	3ebbbd41 	.word	0x3ebbbd41
    538c:	af25de2c 	.word	0xaf25de2c
    5390:	3f11566a 	.word	0x3f11566a
    5394:	16bebd93 	.word	0x16bebd93
    5398:	3f66c16c 	.word	0x3f66c16c
    539c:	5555553e 	.word	0x5555553e
    53a0:	3fc55555 	.word	0x3fc55555
    53a4:	3ff00000 	.word	0x3ff00000
    53a8:	4090cbff 	.word	0x4090cbff
    53ac:	3f6f3400 	.word	0x3f6f3400
    53b0:	c2f8f359 	.word	0xc2f8f359
    53b4:	01a56e1f 	.word	0x01a56e1f
    53b8:	bff00000 	.word	0xbff00000
    53bc:	3feffffe 	.word	0x3feffffe
    53c0:	3ff71547 	.word	0x3ff71547
    53c4:	f85ddf44 	.word	0xf85ddf44
    53c8:	3e54ae0b 	.word	0x3e54ae0b
    53cc:	3fd00000 	.word	0x3fd00000
    53d0:	55555555 	.word	0x55555555
    53d4:	3fd55555 	.word	0x3fd55555
    53d8:	3fe00000 	.word	0x3fe00000
    53dc:	652b82fe 	.word	0x652b82fe
    53e0:	8800759c 	.word	0x8800759c
    53e4:	7e37e43c 	.word	0x7e37e43c
    53e8:	3fe2b803 	.word	0x3fe2b803
    53ec:	43cfd006 	.word	0x43cfd006
    53f0:	3e4cfdeb 	.word	0x3e4cfdeb
    53f4:	3ff80000 	.word	0x3ff80000
    53f8:	464a      	mov	r2, r9
    53fa:	f000 f999 	bl	5730 <scalbn>
    53fe:	e6b2      	b.n	5166 <__ieee754_pow+0x7d2>

00005400 <__ieee754_sqrt>:
    5400:	4b6c      	ldr	r3, [pc, #432]	; (55b4 <__ieee754_sqrt+0x1b4>)
    5402:	b5f0      	push	{r4, r5, r6, r7, lr}
    5404:	000a      	movs	r2, r1
    5406:	4646      	mov	r6, r8
    5408:	000d      	movs	r5, r1
    540a:	46d6      	mov	lr, sl
    540c:	464f      	mov	r7, r9
    540e:	0019      	movs	r1, r3
    5410:	b5c0      	push	{r6, r7, lr}
    5412:	0004      	movs	r4, r0
    5414:	0006      	movs	r6, r0
    5416:	4029      	ands	r1, r5
    5418:	4299      	cmp	r1, r3
    541a:	d100      	bne.n	541e <__ieee754_sqrt+0x1e>
    541c:	e0a7      	b.n	556e <__ieee754_sqrt+0x16e>
    541e:	2d00      	cmp	r5, #0
    5420:	dc00      	bgt.n	5424 <__ieee754_sqrt+0x24>
    5422:	e081      	b.n	5528 <__ieee754_sqrt+0x128>
    5424:	152f      	asrs	r7, r5, #20
    5426:	d100      	bne.n	542a <__ieee754_sqrt+0x2a>
    5428:	e08e      	b.n	5548 <__ieee754_sqrt+0x148>
    542a:	4b63      	ldr	r3, [pc, #396]	; (55b8 <__ieee754_sqrt+0x1b8>)
    542c:	0312      	lsls	r2, r2, #12
    542e:	469c      	mov	ip, r3
    5430:	2380      	movs	r3, #128	; 0x80
    5432:	0b12      	lsrs	r2, r2, #12
    5434:	035b      	lsls	r3, r3, #13
    5436:	4467      	add	r7, ip
    5438:	431a      	orrs	r2, r3
    543a:	07fb      	lsls	r3, r7, #31
    543c:	d468      	bmi.n	5510 <__ieee754_sqrt+0x110>
    543e:	107b      	asrs	r3, r7, #1
    5440:	469c      	mov	ip, r3
    5442:	0fe3      	lsrs	r3, r4, #31
    5444:	189b      	adds	r3, r3, r2
    5446:	189b      	adds	r3, r3, r2
    5448:	2280      	movs	r2, #128	; 0x80
    544a:	2116      	movs	r1, #22
    544c:	2600      	movs	r6, #0
    544e:	2500      	movs	r5, #0
    5450:	0064      	lsls	r4, r4, #1
    5452:	0392      	lsls	r2, r2, #14
    5454:	18a8      	adds	r0, r5, r2
    5456:	4298      	cmp	r0, r3
    5458:	dc02      	bgt.n	5460 <__ieee754_sqrt+0x60>
    545a:	1885      	adds	r5, r0, r2
    545c:	1a1b      	subs	r3, r3, r0
    545e:	18b6      	adds	r6, r6, r2
    5460:	0fe0      	lsrs	r0, r4, #31
    5462:	005b      	lsls	r3, r3, #1
    5464:	3901      	subs	r1, #1
    5466:	181b      	adds	r3, r3, r0
    5468:	0064      	lsls	r4, r4, #1
    546a:	0852      	lsrs	r2, r2, #1
    546c:	2900      	cmp	r1, #0
    546e:	d1f1      	bne.n	5454 <__ieee754_sqrt+0x54>
    5470:	2200      	movs	r2, #0
    5472:	4692      	mov	sl, r2
    5474:	4690      	mov	r8, r2
    5476:	2280      	movs	r2, #128	; 0x80
    5478:	2020      	movs	r0, #32
    547a:	0612      	lsls	r2, r2, #24
    547c:	e009      	b.n	5492 <__ieee754_sqrt+0x92>
    547e:	42ab      	cmp	r3, r5
    5480:	d038      	beq.n	54f4 <__ieee754_sqrt+0xf4>
    5482:	0fe1      	lsrs	r1, r4, #31
    5484:	18c9      	adds	r1, r1, r3
    5486:	3801      	subs	r0, #1
    5488:	18cb      	adds	r3, r1, r3
    548a:	0064      	lsls	r4, r4, #1
    548c:	0852      	lsrs	r2, r2, #1
    548e:	2800      	cmp	r0, #0
    5490:	d018      	beq.n	54c4 <__ieee754_sqrt+0xc4>
    5492:	4641      	mov	r1, r8
    5494:	1851      	adds	r1, r2, r1
    5496:	42ab      	cmp	r3, r5
    5498:	ddf1      	ble.n	547e <__ieee754_sqrt+0x7e>
    549a:	188f      	adds	r7, r1, r2
    549c:	46b8      	mov	r8, r7
    549e:	46a9      	mov	r9, r5
    54a0:	2900      	cmp	r1, #0
    54a2:	db30      	blt.n	5506 <__ieee754_sqrt+0x106>
    54a4:	1b5b      	subs	r3, r3, r5
    54a6:	428c      	cmp	r4, r1
    54a8:	41ad      	sbcs	r5, r5
    54aa:	426d      	negs	r5, r5
    54ac:	1b5b      	subs	r3, r3, r5
    54ae:	1a64      	subs	r4, r4, r1
    54b0:	0fe1      	lsrs	r1, r4, #31
    54b2:	18c9      	adds	r1, r1, r3
    54b4:	3801      	subs	r0, #1
    54b6:	4492      	add	sl, r2
    54b8:	464d      	mov	r5, r9
    54ba:	18cb      	adds	r3, r1, r3
    54bc:	0064      	lsls	r4, r4, #1
    54be:	0852      	lsrs	r2, r2, #1
    54c0:	2800      	cmp	r0, #0
    54c2:	d1e6      	bne.n	5492 <__ieee754_sqrt+0x92>
    54c4:	4323      	orrs	r3, r4
    54c6:	d128      	bne.n	551a <__ieee754_sqrt+0x11a>
    54c8:	4653      	mov	r3, sl
    54ca:	085b      	lsrs	r3, r3, #1
    54cc:	493b      	ldr	r1, [pc, #236]	; (55bc <__ieee754_sqrt+0x1bc>)
    54ce:	1072      	asrs	r2, r6, #1
    54d0:	4688      	mov	r8, r1
    54d2:	4442      	add	r2, r8
    54d4:	07f1      	lsls	r1, r6, #31
    54d6:	d502      	bpl.n	54de <__ieee754_sqrt+0xde>
    54d8:	2180      	movs	r1, #128	; 0x80
    54da:	0609      	lsls	r1, r1, #24
    54dc:	430b      	orrs	r3, r1
    54de:	4661      	mov	r1, ip
    54e0:	001e      	movs	r6, r3
    54e2:	050f      	lsls	r7, r1, #20
    54e4:	18bd      	adds	r5, r7, r2
    54e6:	0030      	movs	r0, r6
    54e8:	0029      	movs	r1, r5
    54ea:	bc1c      	pop	{r2, r3, r4}
    54ec:	4690      	mov	r8, r2
    54ee:	4699      	mov	r9, r3
    54f0:	46a2      	mov	sl, r4
    54f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    54f4:	42a1      	cmp	r1, r4
    54f6:	d8c4      	bhi.n	5482 <__ieee754_sqrt+0x82>
    54f8:	188f      	adds	r7, r1, r2
    54fa:	46b8      	mov	r8, r7
    54fc:	2900      	cmp	r1, #0
    54fe:	db42      	blt.n	5586 <__ieee754_sqrt+0x186>
    5500:	4699      	mov	r9, r3
    5502:	2300      	movs	r3, #0
    5504:	e7d3      	b.n	54ae <__ieee754_sqrt+0xae>
    5506:	2f00      	cmp	r7, #0
    5508:	db2f      	blt.n	556a <__ieee754_sqrt+0x16a>
    550a:	1c6f      	adds	r7, r5, #1
    550c:	46b9      	mov	r9, r7
    550e:	e7c9      	b.n	54a4 <__ieee754_sqrt+0xa4>
    5510:	0fe1      	lsrs	r1, r4, #31
    5512:	0052      	lsls	r2, r2, #1
    5514:	188a      	adds	r2, r1, r2
    5516:	0064      	lsls	r4, r4, #1
    5518:	e791      	b.n	543e <__ieee754_sqrt+0x3e>
    551a:	4653      	mov	r3, sl
    551c:	3301      	adds	r3, #1
    551e:	d035      	beq.n	558c <__ieee754_sqrt+0x18c>
    5520:	4653      	mov	r3, sl
    5522:	3301      	adds	r3, #1
    5524:	085b      	lsrs	r3, r3, #1
    5526:	e7d1      	b.n	54cc <__ieee754_sqrt+0xcc>
    5528:	006b      	lsls	r3, r5, #1
    552a:	085b      	lsrs	r3, r3, #1
    552c:	4303      	orrs	r3, r0
    552e:	d0da      	beq.n	54e6 <__ieee754_sqrt+0xe6>
    5530:	2700      	movs	r7, #0
    5532:	2d00      	cmp	r5, #0
    5534:	d132      	bne.n	559c <__ieee754_sqrt+0x19c>
    5536:	0ae2      	lsrs	r2, r4, #11
    5538:	3f15      	subs	r7, #21
    553a:	0564      	lsls	r4, r4, #21
    553c:	2a00      	cmp	r2, #0
    553e:	d0fa      	beq.n	5536 <__ieee754_sqrt+0x136>
    5540:	2380      	movs	r3, #128	; 0x80
    5542:	035b      	lsls	r3, r3, #13
    5544:	421a      	tst	r2, r3
    5546:	d124      	bne.n	5592 <__ieee754_sqrt+0x192>
    5548:	2080      	movs	r0, #128	; 0x80
    554a:	2300      	movs	r3, #0
    554c:	0340      	lsls	r0, r0, #13
    554e:	e000      	b.n	5552 <__ieee754_sqrt+0x152>
    5550:	000b      	movs	r3, r1
    5552:	0052      	lsls	r2, r2, #1
    5554:	1c59      	adds	r1, r3, #1
    5556:	4202      	tst	r2, r0
    5558:	d0fa      	beq.n	5550 <__ieee754_sqrt+0x150>
    555a:	2020      	movs	r0, #32
    555c:	1a40      	subs	r0, r0, r1
    555e:	1aff      	subs	r7, r7, r3
    5560:	0023      	movs	r3, r4
    5562:	40c3      	lsrs	r3, r0
    5564:	408c      	lsls	r4, r1
    5566:	431a      	orrs	r2, r3
    5568:	e75f      	b.n	542a <__ieee754_sqrt+0x2a>
    556a:	46a9      	mov	r9, r5
    556c:	e79a      	b.n	54a4 <__ieee754_sqrt+0xa4>
    556e:	002b      	movs	r3, r5
    5570:	0002      	movs	r2, r0
    5572:	0029      	movs	r1, r5
    5574:	f001 fa64 	bl	6a40 <__aeabi_dmul>
    5578:	0032      	movs	r2, r6
    557a:	002b      	movs	r3, r5
    557c:	f000 fb1c 	bl	5bb8 <__aeabi_dadd>
    5580:	0006      	movs	r6, r0
    5582:	000d      	movs	r5, r1
    5584:	e7af      	b.n	54e6 <__ieee754_sqrt+0xe6>
    5586:	2f00      	cmp	r7, #0
    5588:	dabf      	bge.n	550a <__ieee754_sqrt+0x10a>
    558a:	e7b9      	b.n	5500 <__ieee754_sqrt+0x100>
    558c:	3601      	adds	r6, #1
    558e:	2300      	movs	r3, #0
    5590:	e79c      	b.n	54cc <__ieee754_sqrt+0xcc>
    5592:	2301      	movs	r3, #1
    5594:	2100      	movs	r1, #0
    5596:	2020      	movs	r0, #32
    5598:	425b      	negs	r3, r3
    559a:	e7e0      	b.n	555e <__ieee754_sqrt+0x15e>
    559c:	002b      	movs	r3, r5
    559e:	0002      	movs	r2, r0
    55a0:	0029      	movs	r1, r5
    55a2:	f001 fccd 	bl	6f40 <__aeabi_dsub>
    55a6:	0002      	movs	r2, r0
    55a8:	000b      	movs	r3, r1
    55aa:	f000 fe15 	bl	61d8 <__aeabi_ddiv>
    55ae:	0006      	movs	r6, r0
    55b0:	000d      	movs	r5, r1
    55b2:	e798      	b.n	54e6 <__ieee754_sqrt+0xe6>
    55b4:	7ff00000 	.word	0x7ff00000
    55b8:	fffffc01 	.word	0xfffffc01
    55bc:	3fe00000 	.word	0x3fe00000

000055c0 <fabs>:
    55c0:	0049      	lsls	r1, r1, #1
    55c2:	084b      	lsrs	r3, r1, #1
    55c4:	0019      	movs	r1, r3
    55c6:	4770      	bx	lr

000055c8 <finite>:
    55c8:	4b03      	ldr	r3, [pc, #12]	; (55d8 <finite+0x10>)
    55ca:	0048      	lsls	r0, r1, #1
    55cc:	469c      	mov	ip, r3
    55ce:	0840      	lsrs	r0, r0, #1
    55d0:	4460      	add	r0, ip
    55d2:	0fc0      	lsrs	r0, r0, #31
    55d4:	4770      	bx	lr
    55d6:	46c0      	nop			; (mov r8, r8)
    55d8:	80100000 	.word	0x80100000

000055dc <matherr>:
    55dc:	2000      	movs	r0, #0
    55de:	4770      	bx	lr

000055e0 <nan>:
    55e0:	2000      	movs	r0, #0
    55e2:	4901      	ldr	r1, [pc, #4]	; (55e8 <nan+0x8>)
    55e4:	4770      	bx	lr
    55e6:	46c0      	nop			; (mov r8, r8)
    55e8:	7ff80000 	.word	0x7ff80000

000055ec <rint>:
    55ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    55ee:	46c6      	mov	lr, r8
    55f0:	b500      	push	{lr}
    55f2:	0fcb      	lsrs	r3, r1, #31
    55f4:	4698      	mov	r8, r3
    55f6:	4c4a      	ldr	r4, [pc, #296]	; (5720 <rint+0x134>)
    55f8:	004b      	lsls	r3, r1, #1
    55fa:	0d5b      	lsrs	r3, r3, #21
    55fc:	191e      	adds	r6, r3, r4
    55fe:	b082      	sub	sp, #8
    5600:	0007      	movs	r7, r0
    5602:	000a      	movs	r2, r1
    5604:	2e13      	cmp	r6, #19
    5606:	dc35      	bgt.n	5674 <rint+0x88>
    5608:	2e00      	cmp	r6, #0
    560a:	db57      	blt.n	56bc <rint+0xd0>
    560c:	4b45      	ldr	r3, [pc, #276]	; (5724 <rint+0x138>)
    560e:	0004      	movs	r4, r0
    5610:	4133      	asrs	r3, r6
    5612:	001f      	movs	r7, r3
    5614:	400f      	ands	r7, r1
    5616:	4307      	orrs	r7, r0
    5618:	000d      	movs	r5, r1
    561a:	2f00      	cmp	r7, #0
    561c:	d024      	beq.n	5668 <rint+0x7c>
    561e:	085b      	lsrs	r3, r3, #1
    5620:	001c      	movs	r4, r3
    5622:	400c      	ands	r4, r1
    5624:	4320      	orrs	r0, r4
    5626:	2700      	movs	r7, #0
    5628:	2800      	cmp	r0, #0
    562a:	d007      	beq.n	563c <rint+0x50>
    562c:	2e13      	cmp	r6, #19
    562e:	d100      	bne.n	5632 <rint+0x46>
    5630:	e073      	b.n	571a <rint+0x12e>
    5632:	2280      	movs	r2, #128	; 0x80
    5634:	02d2      	lsls	r2, r2, #11
    5636:	4132      	asrs	r2, r6
    5638:	4399      	bics	r1, r3
    563a:	430a      	orrs	r2, r1
    563c:	4643      	mov	r3, r8
    563e:	00de      	lsls	r6, r3, #3
    5640:	4b39      	ldr	r3, [pc, #228]	; (5728 <rint+0x13c>)
    5642:	0011      	movs	r1, r2
    5644:	199e      	adds	r6, r3, r6
    5646:	6834      	ldr	r4, [r6, #0]
    5648:	6875      	ldr	r5, [r6, #4]
    564a:	0038      	movs	r0, r7
    564c:	0022      	movs	r2, r4
    564e:	002b      	movs	r3, r5
    5650:	f000 fab2 	bl	5bb8 <__aeabi_dadd>
    5654:	9000      	str	r0, [sp, #0]
    5656:	9101      	str	r1, [sp, #4]
    5658:	9800      	ldr	r0, [sp, #0]
    565a:	9901      	ldr	r1, [sp, #4]
    565c:	0022      	movs	r2, r4
    565e:	002b      	movs	r3, r5
    5660:	f001 fc6e 	bl	6f40 <__aeabi_dsub>
    5664:	0004      	movs	r4, r0
    5666:	000d      	movs	r5, r1
    5668:	0020      	movs	r0, r4
    566a:	0029      	movs	r1, r5
    566c:	b002      	add	sp, #8
    566e:	bc04      	pop	{r2}
    5670:	4690      	mov	r8, r2
    5672:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5674:	2e33      	cmp	r6, #51	; 0x33
    5676:	dd0c      	ble.n	5692 <rint+0xa6>
    5678:	2380      	movs	r3, #128	; 0x80
    567a:	0004      	movs	r4, r0
    567c:	00db      	lsls	r3, r3, #3
    567e:	000d      	movs	r5, r1
    5680:	429e      	cmp	r6, r3
    5682:	d1f1      	bne.n	5668 <rint+0x7c>
    5684:	0002      	movs	r2, r0
    5686:	000b      	movs	r3, r1
    5688:	f000 fa96 	bl	5bb8 <__aeabi_dadd>
    568c:	0004      	movs	r4, r0
    568e:	000d      	movs	r5, r1
    5690:	e7ea      	b.n	5668 <rint+0x7c>
    5692:	4c26      	ldr	r4, [pc, #152]	; (572c <rint+0x140>)
    5694:	000d      	movs	r5, r1
    5696:	46a4      	mov	ip, r4
    5698:	2401      	movs	r4, #1
    569a:	4463      	add	r3, ip
    569c:	4264      	negs	r4, r4
    569e:	40dc      	lsrs	r4, r3
    56a0:	46a4      	mov	ip, r4
    56a2:	4661      	mov	r1, ip
    56a4:	0004      	movs	r4, r0
    56a6:	4201      	tst	r1, r0
    56a8:	d0de      	beq.n	5668 <rint+0x7c>
    56aa:	0849      	lsrs	r1, r1, #1
    56ac:	4201      	tst	r1, r0
    56ae:	d0c5      	beq.n	563c <rint+0x50>
    56b0:	2780      	movs	r7, #128	; 0x80
    56b2:	05ff      	lsls	r7, r7, #23
    56b4:	411f      	asrs	r7, r3
    56b6:	4388      	bics	r0, r1
    56b8:	4307      	orrs	r7, r0
    56ba:	e7bf      	b.n	563c <rint+0x50>
    56bc:	004b      	lsls	r3, r1, #1
    56be:	085b      	lsrs	r3, r3, #1
    56c0:	4303      	orrs	r3, r0
    56c2:	0004      	movs	r4, r0
    56c4:	000d      	movs	r5, r1
    56c6:	2b00      	cmp	r3, #0
    56c8:	d0ce      	beq.n	5668 <rint+0x7c>
    56ca:	030b      	lsls	r3, r1, #12
    56cc:	0b1b      	lsrs	r3, r3, #12
    56ce:	4303      	orrs	r3, r0
    56d0:	001a      	movs	r2, r3
    56d2:	425b      	negs	r3, r3
    56d4:	4313      	orrs	r3, r2
    56d6:	2280      	movs	r2, #128	; 0x80
    56d8:	0b1b      	lsrs	r3, r3, #12
    56da:	0312      	lsls	r2, r2, #12
    56dc:	4013      	ands	r3, r2
    56de:	0c4a      	lsrs	r2, r1, #17
    56e0:	0452      	lsls	r2, r2, #17
    56e2:	4313      	orrs	r3, r2
    56e4:	0019      	movs	r1, r3
    56e6:	4643      	mov	r3, r8
    56e8:	00da      	lsls	r2, r3, #3
    56ea:	4b0f      	ldr	r3, [pc, #60]	; (5728 <rint+0x13c>)
    56ec:	189b      	adds	r3, r3, r2
    56ee:	681c      	ldr	r4, [r3, #0]
    56f0:	685d      	ldr	r5, [r3, #4]
    56f2:	0022      	movs	r2, r4
    56f4:	002b      	movs	r3, r5
    56f6:	f000 fa5f 	bl	5bb8 <__aeabi_dadd>
    56fa:	9000      	str	r0, [sp, #0]
    56fc:	9101      	str	r1, [sp, #4]
    56fe:	9800      	ldr	r0, [sp, #0]
    5700:	9901      	ldr	r1, [sp, #4]
    5702:	0022      	movs	r2, r4
    5704:	002b      	movs	r3, r5
    5706:	f001 fc1b 	bl	6f40 <__aeabi_dsub>
    570a:	4642      	mov	r2, r8
    570c:	004b      	lsls	r3, r1, #1
    570e:	085b      	lsrs	r3, r3, #1
    5710:	07d6      	lsls	r6, r2, #31
    5712:	4333      	orrs	r3, r6
    5714:	0004      	movs	r4, r0
    5716:	001d      	movs	r5, r3
    5718:	e7a6      	b.n	5668 <rint+0x7c>
    571a:	2780      	movs	r7, #128	; 0x80
    571c:	063f      	lsls	r7, r7, #24
    571e:	e788      	b.n	5632 <rint+0x46>
    5720:	fffffc01 	.word	0xfffffc01
    5724:	000fffff 	.word	0x000fffff
    5728:	00008228 	.word	0x00008228
    572c:	fffffbed 	.word	0xfffffbed

00005730 <scalbn>:
    5730:	004b      	lsls	r3, r1, #1
    5732:	b570      	push	{r4, r5, r6, lr}
    5734:	0d5b      	lsrs	r3, r3, #21
    5736:	0014      	movs	r4, r2
    5738:	000a      	movs	r2, r1
    573a:	2b00      	cmp	r3, #0
    573c:	d11a      	bne.n	5774 <scalbn+0x44>
    573e:	004b      	lsls	r3, r1, #1
    5740:	085b      	lsrs	r3, r3, #1
    5742:	4303      	orrs	r3, r0
    5744:	d015      	beq.n	5772 <scalbn+0x42>
    5746:	2200      	movs	r2, #0
    5748:	4b22      	ldr	r3, [pc, #136]	; (57d4 <scalbn+0xa4>)
    574a:	f001 f979 	bl	6a40 <__aeabi_dmul>
    574e:	4b22      	ldr	r3, [pc, #136]	; (57d8 <scalbn+0xa8>)
    5750:	000a      	movs	r2, r1
    5752:	429c      	cmp	r4, r3
    5754:	db22      	blt.n	579c <scalbn+0x6c>
    5756:	004b      	lsls	r3, r1, #1
    5758:	0d5b      	lsrs	r3, r3, #21
    575a:	3b36      	subs	r3, #54	; 0x36
    575c:	4d1f      	ldr	r5, [pc, #124]	; (57dc <scalbn+0xac>)
    575e:	18e3      	adds	r3, r4, r3
    5760:	42ab      	cmp	r3, r5
    5762:	dc20      	bgt.n	57a6 <scalbn+0x76>
    5764:	2b00      	cmp	r3, #0
    5766:	dd0d      	ble.n	5784 <scalbn+0x54>
    5768:	4c1d      	ldr	r4, [pc, #116]	; (57e0 <scalbn+0xb0>)
    576a:	051b      	lsls	r3, r3, #20
    576c:	4022      	ands	r2, r4
    576e:	431a      	orrs	r2, r3
    5770:	0011      	movs	r1, r2
    5772:	bd70      	pop	{r4, r5, r6, pc}
    5774:	4d1b      	ldr	r5, [pc, #108]	; (57e4 <scalbn+0xb4>)
    5776:	42ab      	cmp	r3, r5
    5778:	d1f0      	bne.n	575c <scalbn+0x2c>
    577a:	0002      	movs	r2, r0
    577c:	000b      	movs	r3, r1
    577e:	f000 fa1b 	bl	5bb8 <__aeabi_dadd>
    5782:	e7f6      	b.n	5772 <scalbn+0x42>
    5784:	001d      	movs	r5, r3
    5786:	3535      	adds	r5, #53	; 0x35
    5788:	da18      	bge.n	57bc <scalbn+0x8c>
    578a:	4b17      	ldr	r3, [pc, #92]	; (57e8 <scalbn+0xb8>)
    578c:	0002      	movs	r2, r0
    578e:	429c      	cmp	r4, r3
    5790:	dc0a      	bgt.n	57a8 <scalbn+0x78>
    5792:	000b      	movs	r3, r1
    5794:	4815      	ldr	r0, [pc, #84]	; (57ec <scalbn+0xbc>)
    5796:	4916      	ldr	r1, [pc, #88]	; (57f0 <scalbn+0xc0>)
    5798:	f000 f832 	bl	5800 <copysign>
    579c:	4a13      	ldr	r2, [pc, #76]	; (57ec <scalbn+0xbc>)
    579e:	4b14      	ldr	r3, [pc, #80]	; (57f0 <scalbn+0xc0>)
    57a0:	f001 f94e 	bl	6a40 <__aeabi_dmul>
    57a4:	e7e5      	b.n	5772 <scalbn+0x42>
    57a6:	0002      	movs	r2, r0
    57a8:	000b      	movs	r3, r1
    57aa:	4812      	ldr	r0, [pc, #72]	; (57f4 <scalbn+0xc4>)
    57ac:	4912      	ldr	r1, [pc, #72]	; (57f8 <scalbn+0xc8>)
    57ae:	f000 f827 	bl	5800 <copysign>
    57b2:	4a10      	ldr	r2, [pc, #64]	; (57f4 <scalbn+0xc4>)
    57b4:	4b10      	ldr	r3, [pc, #64]	; (57f8 <scalbn+0xc8>)
    57b6:	f001 f943 	bl	6a40 <__aeabi_dmul>
    57ba:	e7da      	b.n	5772 <scalbn+0x42>
    57bc:	4c08      	ldr	r4, [pc, #32]	; (57e0 <scalbn+0xb0>)
    57be:	3336      	adds	r3, #54	; 0x36
    57c0:	4022      	ands	r2, r4
    57c2:	051b      	lsls	r3, r3, #20
    57c4:	4313      	orrs	r3, r2
    57c6:	0019      	movs	r1, r3
    57c8:	2200      	movs	r2, #0
    57ca:	4b0c      	ldr	r3, [pc, #48]	; (57fc <scalbn+0xcc>)
    57cc:	f001 f938 	bl	6a40 <__aeabi_dmul>
    57d0:	e7cf      	b.n	5772 <scalbn+0x42>
    57d2:	46c0      	nop			; (mov r8, r8)
    57d4:	43500000 	.word	0x43500000
    57d8:	ffff3cb0 	.word	0xffff3cb0
    57dc:	000007fe 	.word	0x000007fe
    57e0:	800fffff 	.word	0x800fffff
    57e4:	000007ff 	.word	0x000007ff
    57e8:	0000c350 	.word	0x0000c350
    57ec:	c2f8f359 	.word	0xc2f8f359
    57f0:	01a56e1f 	.word	0x01a56e1f
    57f4:	8800759c 	.word	0x8800759c
    57f8:	7e37e43c 	.word	0x7e37e43c
    57fc:	3c900000 	.word	0x3c900000

00005800 <copysign>:
    5800:	b530      	push	{r4, r5, lr}
    5802:	004a      	lsls	r2, r1, #1
    5804:	0fdb      	lsrs	r3, r3, #31
    5806:	07db      	lsls	r3, r3, #31
    5808:	0852      	lsrs	r2, r2, #1
    580a:	431a      	orrs	r2, r3
    580c:	0011      	movs	r1, r2
    580e:	bd30      	pop	{r4, r5, pc}

00005810 <__udivsi3>:
    5810:	2200      	movs	r2, #0
    5812:	0843      	lsrs	r3, r0, #1
    5814:	428b      	cmp	r3, r1
    5816:	d374      	bcc.n	5902 <__udivsi3+0xf2>
    5818:	0903      	lsrs	r3, r0, #4
    581a:	428b      	cmp	r3, r1
    581c:	d35f      	bcc.n	58de <__udivsi3+0xce>
    581e:	0a03      	lsrs	r3, r0, #8
    5820:	428b      	cmp	r3, r1
    5822:	d344      	bcc.n	58ae <__udivsi3+0x9e>
    5824:	0b03      	lsrs	r3, r0, #12
    5826:	428b      	cmp	r3, r1
    5828:	d328      	bcc.n	587c <__udivsi3+0x6c>
    582a:	0c03      	lsrs	r3, r0, #16
    582c:	428b      	cmp	r3, r1
    582e:	d30d      	bcc.n	584c <__udivsi3+0x3c>
    5830:	22ff      	movs	r2, #255	; 0xff
    5832:	0209      	lsls	r1, r1, #8
    5834:	ba12      	rev	r2, r2
    5836:	0c03      	lsrs	r3, r0, #16
    5838:	428b      	cmp	r3, r1
    583a:	d302      	bcc.n	5842 <__udivsi3+0x32>
    583c:	1212      	asrs	r2, r2, #8
    583e:	0209      	lsls	r1, r1, #8
    5840:	d065      	beq.n	590e <__udivsi3+0xfe>
    5842:	0b03      	lsrs	r3, r0, #12
    5844:	428b      	cmp	r3, r1
    5846:	d319      	bcc.n	587c <__udivsi3+0x6c>
    5848:	e000      	b.n	584c <__udivsi3+0x3c>
    584a:	0a09      	lsrs	r1, r1, #8
    584c:	0bc3      	lsrs	r3, r0, #15
    584e:	428b      	cmp	r3, r1
    5850:	d301      	bcc.n	5856 <__udivsi3+0x46>
    5852:	03cb      	lsls	r3, r1, #15
    5854:	1ac0      	subs	r0, r0, r3
    5856:	4152      	adcs	r2, r2
    5858:	0b83      	lsrs	r3, r0, #14
    585a:	428b      	cmp	r3, r1
    585c:	d301      	bcc.n	5862 <__udivsi3+0x52>
    585e:	038b      	lsls	r3, r1, #14
    5860:	1ac0      	subs	r0, r0, r3
    5862:	4152      	adcs	r2, r2
    5864:	0b43      	lsrs	r3, r0, #13
    5866:	428b      	cmp	r3, r1
    5868:	d301      	bcc.n	586e <__udivsi3+0x5e>
    586a:	034b      	lsls	r3, r1, #13
    586c:	1ac0      	subs	r0, r0, r3
    586e:	4152      	adcs	r2, r2
    5870:	0b03      	lsrs	r3, r0, #12
    5872:	428b      	cmp	r3, r1
    5874:	d301      	bcc.n	587a <__udivsi3+0x6a>
    5876:	030b      	lsls	r3, r1, #12
    5878:	1ac0      	subs	r0, r0, r3
    587a:	4152      	adcs	r2, r2
    587c:	0ac3      	lsrs	r3, r0, #11
    587e:	428b      	cmp	r3, r1
    5880:	d301      	bcc.n	5886 <__udivsi3+0x76>
    5882:	02cb      	lsls	r3, r1, #11
    5884:	1ac0      	subs	r0, r0, r3
    5886:	4152      	adcs	r2, r2
    5888:	0a83      	lsrs	r3, r0, #10
    588a:	428b      	cmp	r3, r1
    588c:	d301      	bcc.n	5892 <__udivsi3+0x82>
    588e:	028b      	lsls	r3, r1, #10
    5890:	1ac0      	subs	r0, r0, r3
    5892:	4152      	adcs	r2, r2
    5894:	0a43      	lsrs	r3, r0, #9
    5896:	428b      	cmp	r3, r1
    5898:	d301      	bcc.n	589e <__udivsi3+0x8e>
    589a:	024b      	lsls	r3, r1, #9
    589c:	1ac0      	subs	r0, r0, r3
    589e:	4152      	adcs	r2, r2
    58a0:	0a03      	lsrs	r3, r0, #8
    58a2:	428b      	cmp	r3, r1
    58a4:	d301      	bcc.n	58aa <__udivsi3+0x9a>
    58a6:	020b      	lsls	r3, r1, #8
    58a8:	1ac0      	subs	r0, r0, r3
    58aa:	4152      	adcs	r2, r2
    58ac:	d2cd      	bcs.n	584a <__udivsi3+0x3a>
    58ae:	09c3      	lsrs	r3, r0, #7
    58b0:	428b      	cmp	r3, r1
    58b2:	d301      	bcc.n	58b8 <__udivsi3+0xa8>
    58b4:	01cb      	lsls	r3, r1, #7
    58b6:	1ac0      	subs	r0, r0, r3
    58b8:	4152      	adcs	r2, r2
    58ba:	0983      	lsrs	r3, r0, #6
    58bc:	428b      	cmp	r3, r1
    58be:	d301      	bcc.n	58c4 <__udivsi3+0xb4>
    58c0:	018b      	lsls	r3, r1, #6
    58c2:	1ac0      	subs	r0, r0, r3
    58c4:	4152      	adcs	r2, r2
    58c6:	0943      	lsrs	r3, r0, #5
    58c8:	428b      	cmp	r3, r1
    58ca:	d301      	bcc.n	58d0 <__udivsi3+0xc0>
    58cc:	014b      	lsls	r3, r1, #5
    58ce:	1ac0      	subs	r0, r0, r3
    58d0:	4152      	adcs	r2, r2
    58d2:	0903      	lsrs	r3, r0, #4
    58d4:	428b      	cmp	r3, r1
    58d6:	d301      	bcc.n	58dc <__udivsi3+0xcc>
    58d8:	010b      	lsls	r3, r1, #4
    58da:	1ac0      	subs	r0, r0, r3
    58dc:	4152      	adcs	r2, r2
    58de:	08c3      	lsrs	r3, r0, #3
    58e0:	428b      	cmp	r3, r1
    58e2:	d301      	bcc.n	58e8 <__udivsi3+0xd8>
    58e4:	00cb      	lsls	r3, r1, #3
    58e6:	1ac0      	subs	r0, r0, r3
    58e8:	4152      	adcs	r2, r2
    58ea:	0883      	lsrs	r3, r0, #2
    58ec:	428b      	cmp	r3, r1
    58ee:	d301      	bcc.n	58f4 <__udivsi3+0xe4>
    58f0:	008b      	lsls	r3, r1, #2
    58f2:	1ac0      	subs	r0, r0, r3
    58f4:	4152      	adcs	r2, r2
    58f6:	0843      	lsrs	r3, r0, #1
    58f8:	428b      	cmp	r3, r1
    58fa:	d301      	bcc.n	5900 <__udivsi3+0xf0>
    58fc:	004b      	lsls	r3, r1, #1
    58fe:	1ac0      	subs	r0, r0, r3
    5900:	4152      	adcs	r2, r2
    5902:	1a41      	subs	r1, r0, r1
    5904:	d200      	bcs.n	5908 <__udivsi3+0xf8>
    5906:	4601      	mov	r1, r0
    5908:	4152      	adcs	r2, r2
    590a:	4610      	mov	r0, r2
    590c:	4770      	bx	lr
    590e:	e7ff      	b.n	5910 <__udivsi3+0x100>
    5910:	b501      	push	{r0, lr}
    5912:	2000      	movs	r0, #0
    5914:	f000 f8f0 	bl	5af8 <__aeabi_idiv0>
    5918:	bd02      	pop	{r1, pc}
    591a:	46c0      	nop			; (mov r8, r8)

0000591c <__aeabi_uidivmod>:
    591c:	2900      	cmp	r1, #0
    591e:	d0f7      	beq.n	5910 <__udivsi3+0x100>
    5920:	e776      	b.n	5810 <__udivsi3>
    5922:	4770      	bx	lr

00005924 <__divsi3>:
    5924:	4603      	mov	r3, r0
    5926:	430b      	orrs	r3, r1
    5928:	d47f      	bmi.n	5a2a <__divsi3+0x106>
    592a:	2200      	movs	r2, #0
    592c:	0843      	lsrs	r3, r0, #1
    592e:	428b      	cmp	r3, r1
    5930:	d374      	bcc.n	5a1c <__divsi3+0xf8>
    5932:	0903      	lsrs	r3, r0, #4
    5934:	428b      	cmp	r3, r1
    5936:	d35f      	bcc.n	59f8 <__divsi3+0xd4>
    5938:	0a03      	lsrs	r3, r0, #8
    593a:	428b      	cmp	r3, r1
    593c:	d344      	bcc.n	59c8 <__divsi3+0xa4>
    593e:	0b03      	lsrs	r3, r0, #12
    5940:	428b      	cmp	r3, r1
    5942:	d328      	bcc.n	5996 <__divsi3+0x72>
    5944:	0c03      	lsrs	r3, r0, #16
    5946:	428b      	cmp	r3, r1
    5948:	d30d      	bcc.n	5966 <__divsi3+0x42>
    594a:	22ff      	movs	r2, #255	; 0xff
    594c:	0209      	lsls	r1, r1, #8
    594e:	ba12      	rev	r2, r2
    5950:	0c03      	lsrs	r3, r0, #16
    5952:	428b      	cmp	r3, r1
    5954:	d302      	bcc.n	595c <__divsi3+0x38>
    5956:	1212      	asrs	r2, r2, #8
    5958:	0209      	lsls	r1, r1, #8
    595a:	d065      	beq.n	5a28 <__divsi3+0x104>
    595c:	0b03      	lsrs	r3, r0, #12
    595e:	428b      	cmp	r3, r1
    5960:	d319      	bcc.n	5996 <__divsi3+0x72>
    5962:	e000      	b.n	5966 <__divsi3+0x42>
    5964:	0a09      	lsrs	r1, r1, #8
    5966:	0bc3      	lsrs	r3, r0, #15
    5968:	428b      	cmp	r3, r1
    596a:	d301      	bcc.n	5970 <__divsi3+0x4c>
    596c:	03cb      	lsls	r3, r1, #15
    596e:	1ac0      	subs	r0, r0, r3
    5970:	4152      	adcs	r2, r2
    5972:	0b83      	lsrs	r3, r0, #14
    5974:	428b      	cmp	r3, r1
    5976:	d301      	bcc.n	597c <__divsi3+0x58>
    5978:	038b      	lsls	r3, r1, #14
    597a:	1ac0      	subs	r0, r0, r3
    597c:	4152      	adcs	r2, r2
    597e:	0b43      	lsrs	r3, r0, #13
    5980:	428b      	cmp	r3, r1
    5982:	d301      	bcc.n	5988 <__divsi3+0x64>
    5984:	034b      	lsls	r3, r1, #13
    5986:	1ac0      	subs	r0, r0, r3
    5988:	4152      	adcs	r2, r2
    598a:	0b03      	lsrs	r3, r0, #12
    598c:	428b      	cmp	r3, r1
    598e:	d301      	bcc.n	5994 <__divsi3+0x70>
    5990:	030b      	lsls	r3, r1, #12
    5992:	1ac0      	subs	r0, r0, r3
    5994:	4152      	adcs	r2, r2
    5996:	0ac3      	lsrs	r3, r0, #11
    5998:	428b      	cmp	r3, r1
    599a:	d301      	bcc.n	59a0 <__divsi3+0x7c>
    599c:	02cb      	lsls	r3, r1, #11
    599e:	1ac0      	subs	r0, r0, r3
    59a0:	4152      	adcs	r2, r2
    59a2:	0a83      	lsrs	r3, r0, #10
    59a4:	428b      	cmp	r3, r1
    59a6:	d301      	bcc.n	59ac <__divsi3+0x88>
    59a8:	028b      	lsls	r3, r1, #10
    59aa:	1ac0      	subs	r0, r0, r3
    59ac:	4152      	adcs	r2, r2
    59ae:	0a43      	lsrs	r3, r0, #9
    59b0:	428b      	cmp	r3, r1
    59b2:	d301      	bcc.n	59b8 <__divsi3+0x94>
    59b4:	024b      	lsls	r3, r1, #9
    59b6:	1ac0      	subs	r0, r0, r3
    59b8:	4152      	adcs	r2, r2
    59ba:	0a03      	lsrs	r3, r0, #8
    59bc:	428b      	cmp	r3, r1
    59be:	d301      	bcc.n	59c4 <__divsi3+0xa0>
    59c0:	020b      	lsls	r3, r1, #8
    59c2:	1ac0      	subs	r0, r0, r3
    59c4:	4152      	adcs	r2, r2
    59c6:	d2cd      	bcs.n	5964 <__divsi3+0x40>
    59c8:	09c3      	lsrs	r3, r0, #7
    59ca:	428b      	cmp	r3, r1
    59cc:	d301      	bcc.n	59d2 <__divsi3+0xae>
    59ce:	01cb      	lsls	r3, r1, #7
    59d0:	1ac0      	subs	r0, r0, r3
    59d2:	4152      	adcs	r2, r2
    59d4:	0983      	lsrs	r3, r0, #6
    59d6:	428b      	cmp	r3, r1
    59d8:	d301      	bcc.n	59de <__divsi3+0xba>
    59da:	018b      	lsls	r3, r1, #6
    59dc:	1ac0      	subs	r0, r0, r3
    59de:	4152      	adcs	r2, r2
    59e0:	0943      	lsrs	r3, r0, #5
    59e2:	428b      	cmp	r3, r1
    59e4:	d301      	bcc.n	59ea <__divsi3+0xc6>
    59e6:	014b      	lsls	r3, r1, #5
    59e8:	1ac0      	subs	r0, r0, r3
    59ea:	4152      	adcs	r2, r2
    59ec:	0903      	lsrs	r3, r0, #4
    59ee:	428b      	cmp	r3, r1
    59f0:	d301      	bcc.n	59f6 <__divsi3+0xd2>
    59f2:	010b      	lsls	r3, r1, #4
    59f4:	1ac0      	subs	r0, r0, r3
    59f6:	4152      	adcs	r2, r2
    59f8:	08c3      	lsrs	r3, r0, #3
    59fa:	428b      	cmp	r3, r1
    59fc:	d301      	bcc.n	5a02 <__divsi3+0xde>
    59fe:	00cb      	lsls	r3, r1, #3
    5a00:	1ac0      	subs	r0, r0, r3
    5a02:	4152      	adcs	r2, r2
    5a04:	0883      	lsrs	r3, r0, #2
    5a06:	428b      	cmp	r3, r1
    5a08:	d301      	bcc.n	5a0e <__divsi3+0xea>
    5a0a:	008b      	lsls	r3, r1, #2
    5a0c:	1ac0      	subs	r0, r0, r3
    5a0e:	4152      	adcs	r2, r2
    5a10:	0843      	lsrs	r3, r0, #1
    5a12:	428b      	cmp	r3, r1
    5a14:	d301      	bcc.n	5a1a <__divsi3+0xf6>
    5a16:	004b      	lsls	r3, r1, #1
    5a18:	1ac0      	subs	r0, r0, r3
    5a1a:	4152      	adcs	r2, r2
    5a1c:	1a41      	subs	r1, r0, r1
    5a1e:	d200      	bcs.n	5a22 <__divsi3+0xfe>
    5a20:	4601      	mov	r1, r0
    5a22:	4152      	adcs	r2, r2
    5a24:	4610      	mov	r0, r2
    5a26:	4770      	bx	lr
    5a28:	e05d      	b.n	5ae6 <__divsi3+0x1c2>
    5a2a:	0fca      	lsrs	r2, r1, #31
    5a2c:	d000      	beq.n	5a30 <__divsi3+0x10c>
    5a2e:	4249      	negs	r1, r1
    5a30:	1003      	asrs	r3, r0, #32
    5a32:	d300      	bcc.n	5a36 <__divsi3+0x112>
    5a34:	4240      	negs	r0, r0
    5a36:	4053      	eors	r3, r2
    5a38:	2200      	movs	r2, #0
    5a3a:	469c      	mov	ip, r3
    5a3c:	0903      	lsrs	r3, r0, #4
    5a3e:	428b      	cmp	r3, r1
    5a40:	d32d      	bcc.n	5a9e <__divsi3+0x17a>
    5a42:	0a03      	lsrs	r3, r0, #8
    5a44:	428b      	cmp	r3, r1
    5a46:	d312      	bcc.n	5a6e <__divsi3+0x14a>
    5a48:	22fc      	movs	r2, #252	; 0xfc
    5a4a:	0189      	lsls	r1, r1, #6
    5a4c:	ba12      	rev	r2, r2
    5a4e:	0a03      	lsrs	r3, r0, #8
    5a50:	428b      	cmp	r3, r1
    5a52:	d30c      	bcc.n	5a6e <__divsi3+0x14a>
    5a54:	0189      	lsls	r1, r1, #6
    5a56:	1192      	asrs	r2, r2, #6
    5a58:	428b      	cmp	r3, r1
    5a5a:	d308      	bcc.n	5a6e <__divsi3+0x14a>
    5a5c:	0189      	lsls	r1, r1, #6
    5a5e:	1192      	asrs	r2, r2, #6
    5a60:	428b      	cmp	r3, r1
    5a62:	d304      	bcc.n	5a6e <__divsi3+0x14a>
    5a64:	0189      	lsls	r1, r1, #6
    5a66:	d03a      	beq.n	5ade <__divsi3+0x1ba>
    5a68:	1192      	asrs	r2, r2, #6
    5a6a:	e000      	b.n	5a6e <__divsi3+0x14a>
    5a6c:	0989      	lsrs	r1, r1, #6
    5a6e:	09c3      	lsrs	r3, r0, #7
    5a70:	428b      	cmp	r3, r1
    5a72:	d301      	bcc.n	5a78 <__divsi3+0x154>
    5a74:	01cb      	lsls	r3, r1, #7
    5a76:	1ac0      	subs	r0, r0, r3
    5a78:	4152      	adcs	r2, r2
    5a7a:	0983      	lsrs	r3, r0, #6
    5a7c:	428b      	cmp	r3, r1
    5a7e:	d301      	bcc.n	5a84 <__divsi3+0x160>
    5a80:	018b      	lsls	r3, r1, #6
    5a82:	1ac0      	subs	r0, r0, r3
    5a84:	4152      	adcs	r2, r2
    5a86:	0943      	lsrs	r3, r0, #5
    5a88:	428b      	cmp	r3, r1
    5a8a:	d301      	bcc.n	5a90 <__divsi3+0x16c>
    5a8c:	014b      	lsls	r3, r1, #5
    5a8e:	1ac0      	subs	r0, r0, r3
    5a90:	4152      	adcs	r2, r2
    5a92:	0903      	lsrs	r3, r0, #4
    5a94:	428b      	cmp	r3, r1
    5a96:	d301      	bcc.n	5a9c <__divsi3+0x178>
    5a98:	010b      	lsls	r3, r1, #4
    5a9a:	1ac0      	subs	r0, r0, r3
    5a9c:	4152      	adcs	r2, r2
    5a9e:	08c3      	lsrs	r3, r0, #3
    5aa0:	428b      	cmp	r3, r1
    5aa2:	d301      	bcc.n	5aa8 <__divsi3+0x184>
    5aa4:	00cb      	lsls	r3, r1, #3
    5aa6:	1ac0      	subs	r0, r0, r3
    5aa8:	4152      	adcs	r2, r2
    5aaa:	0883      	lsrs	r3, r0, #2
    5aac:	428b      	cmp	r3, r1
    5aae:	d301      	bcc.n	5ab4 <__divsi3+0x190>
    5ab0:	008b      	lsls	r3, r1, #2
    5ab2:	1ac0      	subs	r0, r0, r3
    5ab4:	4152      	adcs	r2, r2
    5ab6:	d2d9      	bcs.n	5a6c <__divsi3+0x148>
    5ab8:	0843      	lsrs	r3, r0, #1
    5aba:	428b      	cmp	r3, r1
    5abc:	d301      	bcc.n	5ac2 <__divsi3+0x19e>
    5abe:	004b      	lsls	r3, r1, #1
    5ac0:	1ac0      	subs	r0, r0, r3
    5ac2:	4152      	adcs	r2, r2
    5ac4:	1a41      	subs	r1, r0, r1
    5ac6:	d200      	bcs.n	5aca <__divsi3+0x1a6>
    5ac8:	4601      	mov	r1, r0
    5aca:	4663      	mov	r3, ip
    5acc:	4152      	adcs	r2, r2
    5ace:	105b      	asrs	r3, r3, #1
    5ad0:	4610      	mov	r0, r2
    5ad2:	d301      	bcc.n	5ad8 <__divsi3+0x1b4>
    5ad4:	4240      	negs	r0, r0
    5ad6:	2b00      	cmp	r3, #0
    5ad8:	d500      	bpl.n	5adc <__divsi3+0x1b8>
    5ada:	4249      	negs	r1, r1
    5adc:	4770      	bx	lr
    5ade:	4663      	mov	r3, ip
    5ae0:	105b      	asrs	r3, r3, #1
    5ae2:	d300      	bcc.n	5ae6 <__divsi3+0x1c2>
    5ae4:	4240      	negs	r0, r0
    5ae6:	b501      	push	{r0, lr}
    5ae8:	2000      	movs	r0, #0
    5aea:	f000 f805 	bl	5af8 <__aeabi_idiv0>
    5aee:	bd02      	pop	{r1, pc}

00005af0 <__aeabi_idivmod>:
    5af0:	2900      	cmp	r1, #0
    5af2:	d0f8      	beq.n	5ae6 <__divsi3+0x1c2>
    5af4:	e716      	b.n	5924 <__divsi3>
    5af6:	4770      	bx	lr

00005af8 <__aeabi_idiv0>:
    5af8:	4770      	bx	lr
    5afa:	46c0      	nop			; (mov r8, r8)

00005afc <__aeabi_cdrcmple>:
    5afc:	4684      	mov	ip, r0
    5afe:	1c10      	adds	r0, r2, #0
    5b00:	4662      	mov	r2, ip
    5b02:	468c      	mov	ip, r1
    5b04:	1c19      	adds	r1, r3, #0
    5b06:	4663      	mov	r3, ip
    5b08:	e000      	b.n	5b0c <__aeabi_cdcmpeq>
    5b0a:	46c0      	nop			; (mov r8, r8)

00005b0c <__aeabi_cdcmpeq>:
    5b0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    5b0e:	f000 ff35 	bl	697c <__ledf2>
    5b12:	2800      	cmp	r0, #0
    5b14:	d401      	bmi.n	5b1a <__aeabi_cdcmpeq+0xe>
    5b16:	2100      	movs	r1, #0
    5b18:	42c8      	cmn	r0, r1
    5b1a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00005b1c <__aeabi_dcmpeq>:
    5b1c:	b510      	push	{r4, lr}
    5b1e:	f000 fe8f 	bl	6840 <__eqdf2>
    5b22:	4240      	negs	r0, r0
    5b24:	3001      	adds	r0, #1
    5b26:	bd10      	pop	{r4, pc}

00005b28 <__aeabi_dcmplt>:
    5b28:	b510      	push	{r4, lr}
    5b2a:	f000 ff27 	bl	697c <__ledf2>
    5b2e:	2800      	cmp	r0, #0
    5b30:	db01      	blt.n	5b36 <__aeabi_dcmplt+0xe>
    5b32:	2000      	movs	r0, #0
    5b34:	bd10      	pop	{r4, pc}
    5b36:	2001      	movs	r0, #1
    5b38:	bd10      	pop	{r4, pc}
    5b3a:	46c0      	nop			; (mov r8, r8)

00005b3c <__aeabi_dcmple>:
    5b3c:	b510      	push	{r4, lr}
    5b3e:	f000 ff1d 	bl	697c <__ledf2>
    5b42:	2800      	cmp	r0, #0
    5b44:	dd01      	ble.n	5b4a <__aeabi_dcmple+0xe>
    5b46:	2000      	movs	r0, #0
    5b48:	bd10      	pop	{r4, pc}
    5b4a:	2001      	movs	r0, #1
    5b4c:	bd10      	pop	{r4, pc}
    5b4e:	46c0      	nop			; (mov r8, r8)

00005b50 <__aeabi_dcmpgt>:
    5b50:	b510      	push	{r4, lr}
    5b52:	f000 feaf 	bl	68b4 <__gedf2>
    5b56:	2800      	cmp	r0, #0
    5b58:	dc01      	bgt.n	5b5e <__aeabi_dcmpgt+0xe>
    5b5a:	2000      	movs	r0, #0
    5b5c:	bd10      	pop	{r4, pc}
    5b5e:	2001      	movs	r0, #1
    5b60:	bd10      	pop	{r4, pc}
    5b62:	46c0      	nop			; (mov r8, r8)

00005b64 <__aeabi_dcmpge>:
    5b64:	b510      	push	{r4, lr}
    5b66:	f000 fea5 	bl	68b4 <__gedf2>
    5b6a:	2800      	cmp	r0, #0
    5b6c:	da01      	bge.n	5b72 <__aeabi_dcmpge+0xe>
    5b6e:	2000      	movs	r0, #0
    5b70:	bd10      	pop	{r4, pc}
    5b72:	2001      	movs	r0, #1
    5b74:	bd10      	pop	{r4, pc}
    5b76:	46c0      	nop			; (mov r8, r8)

00005b78 <__aeabi_f2iz>:
    5b78:	0241      	lsls	r1, r0, #9
    5b7a:	0043      	lsls	r3, r0, #1
    5b7c:	0fc2      	lsrs	r2, r0, #31
    5b7e:	0a49      	lsrs	r1, r1, #9
    5b80:	0e1b      	lsrs	r3, r3, #24
    5b82:	2000      	movs	r0, #0
    5b84:	2b7e      	cmp	r3, #126	; 0x7e
    5b86:	dd0d      	ble.n	5ba4 <__aeabi_f2iz+0x2c>
    5b88:	2b9d      	cmp	r3, #157	; 0x9d
    5b8a:	dc0c      	bgt.n	5ba6 <__aeabi_f2iz+0x2e>
    5b8c:	2080      	movs	r0, #128	; 0x80
    5b8e:	0400      	lsls	r0, r0, #16
    5b90:	4301      	orrs	r1, r0
    5b92:	2b95      	cmp	r3, #149	; 0x95
    5b94:	dc0a      	bgt.n	5bac <__aeabi_f2iz+0x34>
    5b96:	2096      	movs	r0, #150	; 0x96
    5b98:	1ac3      	subs	r3, r0, r3
    5b9a:	40d9      	lsrs	r1, r3
    5b9c:	4248      	negs	r0, r1
    5b9e:	2a00      	cmp	r2, #0
    5ba0:	d100      	bne.n	5ba4 <__aeabi_f2iz+0x2c>
    5ba2:	0008      	movs	r0, r1
    5ba4:	4770      	bx	lr
    5ba6:	4b03      	ldr	r3, [pc, #12]	; (5bb4 <__aeabi_f2iz+0x3c>)
    5ba8:	18d0      	adds	r0, r2, r3
    5baa:	e7fb      	b.n	5ba4 <__aeabi_f2iz+0x2c>
    5bac:	3b96      	subs	r3, #150	; 0x96
    5bae:	4099      	lsls	r1, r3
    5bb0:	e7f4      	b.n	5b9c <__aeabi_f2iz+0x24>
    5bb2:	46c0      	nop			; (mov r8, r8)
    5bb4:	7fffffff 	.word	0x7fffffff

00005bb8 <__aeabi_dadd>:
    5bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5bba:	4645      	mov	r5, r8
    5bbc:	46de      	mov	lr, fp
    5bbe:	4657      	mov	r7, sl
    5bc0:	464e      	mov	r6, r9
    5bc2:	030c      	lsls	r4, r1, #12
    5bc4:	b5e0      	push	{r5, r6, r7, lr}
    5bc6:	004e      	lsls	r6, r1, #1
    5bc8:	0fc9      	lsrs	r1, r1, #31
    5bca:	4688      	mov	r8, r1
    5bcc:	000d      	movs	r5, r1
    5bce:	0a61      	lsrs	r1, r4, #9
    5bd0:	0f44      	lsrs	r4, r0, #29
    5bd2:	430c      	orrs	r4, r1
    5bd4:	00c7      	lsls	r7, r0, #3
    5bd6:	0319      	lsls	r1, r3, #12
    5bd8:	0058      	lsls	r0, r3, #1
    5bda:	0fdb      	lsrs	r3, r3, #31
    5bdc:	469b      	mov	fp, r3
    5bde:	0a4b      	lsrs	r3, r1, #9
    5be0:	0f51      	lsrs	r1, r2, #29
    5be2:	430b      	orrs	r3, r1
    5be4:	0d76      	lsrs	r6, r6, #21
    5be6:	0d40      	lsrs	r0, r0, #21
    5be8:	0019      	movs	r1, r3
    5bea:	00d2      	lsls	r2, r2, #3
    5bec:	45d8      	cmp	r8, fp
    5bee:	d100      	bne.n	5bf2 <__aeabi_dadd+0x3a>
    5bf0:	e0ae      	b.n	5d50 <__aeabi_dadd+0x198>
    5bf2:	1a35      	subs	r5, r6, r0
    5bf4:	2d00      	cmp	r5, #0
    5bf6:	dc00      	bgt.n	5bfa <__aeabi_dadd+0x42>
    5bf8:	e0f6      	b.n	5de8 <__aeabi_dadd+0x230>
    5bfa:	2800      	cmp	r0, #0
    5bfc:	d10f      	bne.n	5c1e <__aeabi_dadd+0x66>
    5bfe:	4313      	orrs	r3, r2
    5c00:	d100      	bne.n	5c04 <__aeabi_dadd+0x4c>
    5c02:	e0db      	b.n	5dbc <__aeabi_dadd+0x204>
    5c04:	1e6b      	subs	r3, r5, #1
    5c06:	2b00      	cmp	r3, #0
    5c08:	d000      	beq.n	5c0c <__aeabi_dadd+0x54>
    5c0a:	e137      	b.n	5e7c <__aeabi_dadd+0x2c4>
    5c0c:	1aba      	subs	r2, r7, r2
    5c0e:	4297      	cmp	r7, r2
    5c10:	41bf      	sbcs	r7, r7
    5c12:	1a64      	subs	r4, r4, r1
    5c14:	427f      	negs	r7, r7
    5c16:	1be4      	subs	r4, r4, r7
    5c18:	2601      	movs	r6, #1
    5c1a:	0017      	movs	r7, r2
    5c1c:	e024      	b.n	5c68 <__aeabi_dadd+0xb0>
    5c1e:	4bc6      	ldr	r3, [pc, #792]	; (5f38 <__aeabi_dadd+0x380>)
    5c20:	429e      	cmp	r6, r3
    5c22:	d04d      	beq.n	5cc0 <__aeabi_dadd+0x108>
    5c24:	2380      	movs	r3, #128	; 0x80
    5c26:	041b      	lsls	r3, r3, #16
    5c28:	4319      	orrs	r1, r3
    5c2a:	2d38      	cmp	r5, #56	; 0x38
    5c2c:	dd00      	ble.n	5c30 <__aeabi_dadd+0x78>
    5c2e:	e107      	b.n	5e40 <__aeabi_dadd+0x288>
    5c30:	2d1f      	cmp	r5, #31
    5c32:	dd00      	ble.n	5c36 <__aeabi_dadd+0x7e>
    5c34:	e138      	b.n	5ea8 <__aeabi_dadd+0x2f0>
    5c36:	2020      	movs	r0, #32
    5c38:	1b43      	subs	r3, r0, r5
    5c3a:	469a      	mov	sl, r3
    5c3c:	000b      	movs	r3, r1
    5c3e:	4650      	mov	r0, sl
    5c40:	4083      	lsls	r3, r0
    5c42:	4699      	mov	r9, r3
    5c44:	0013      	movs	r3, r2
    5c46:	4648      	mov	r0, r9
    5c48:	40eb      	lsrs	r3, r5
    5c4a:	4318      	orrs	r0, r3
    5c4c:	0003      	movs	r3, r0
    5c4e:	4650      	mov	r0, sl
    5c50:	4082      	lsls	r2, r0
    5c52:	1e50      	subs	r0, r2, #1
    5c54:	4182      	sbcs	r2, r0
    5c56:	40e9      	lsrs	r1, r5
    5c58:	431a      	orrs	r2, r3
    5c5a:	1aba      	subs	r2, r7, r2
    5c5c:	1a61      	subs	r1, r4, r1
    5c5e:	4297      	cmp	r7, r2
    5c60:	41a4      	sbcs	r4, r4
    5c62:	0017      	movs	r7, r2
    5c64:	4264      	negs	r4, r4
    5c66:	1b0c      	subs	r4, r1, r4
    5c68:	0223      	lsls	r3, r4, #8
    5c6a:	d562      	bpl.n	5d32 <__aeabi_dadd+0x17a>
    5c6c:	0264      	lsls	r4, r4, #9
    5c6e:	0a65      	lsrs	r5, r4, #9
    5c70:	2d00      	cmp	r5, #0
    5c72:	d100      	bne.n	5c76 <__aeabi_dadd+0xbe>
    5c74:	e0df      	b.n	5e36 <__aeabi_dadd+0x27e>
    5c76:	0028      	movs	r0, r5
    5c78:	f001 fdee 	bl	7858 <__clzsi2>
    5c7c:	0003      	movs	r3, r0
    5c7e:	3b08      	subs	r3, #8
    5c80:	2b1f      	cmp	r3, #31
    5c82:	dd00      	ble.n	5c86 <__aeabi_dadd+0xce>
    5c84:	e0d2      	b.n	5e2c <__aeabi_dadd+0x274>
    5c86:	2220      	movs	r2, #32
    5c88:	003c      	movs	r4, r7
    5c8a:	1ad2      	subs	r2, r2, r3
    5c8c:	409d      	lsls	r5, r3
    5c8e:	40d4      	lsrs	r4, r2
    5c90:	409f      	lsls	r7, r3
    5c92:	4325      	orrs	r5, r4
    5c94:	429e      	cmp	r6, r3
    5c96:	dd00      	ble.n	5c9a <__aeabi_dadd+0xe2>
    5c98:	e0c4      	b.n	5e24 <__aeabi_dadd+0x26c>
    5c9a:	1b9e      	subs	r6, r3, r6
    5c9c:	1c73      	adds	r3, r6, #1
    5c9e:	2b1f      	cmp	r3, #31
    5ca0:	dd00      	ble.n	5ca4 <__aeabi_dadd+0xec>
    5ca2:	e0f1      	b.n	5e88 <__aeabi_dadd+0x2d0>
    5ca4:	2220      	movs	r2, #32
    5ca6:	0038      	movs	r0, r7
    5ca8:	0029      	movs	r1, r5
    5caa:	1ad2      	subs	r2, r2, r3
    5cac:	40d8      	lsrs	r0, r3
    5cae:	4091      	lsls	r1, r2
    5cb0:	4097      	lsls	r7, r2
    5cb2:	002c      	movs	r4, r5
    5cb4:	4301      	orrs	r1, r0
    5cb6:	1e78      	subs	r0, r7, #1
    5cb8:	4187      	sbcs	r7, r0
    5cba:	40dc      	lsrs	r4, r3
    5cbc:	2600      	movs	r6, #0
    5cbe:	430f      	orrs	r7, r1
    5cc0:	077b      	lsls	r3, r7, #29
    5cc2:	d009      	beq.n	5cd8 <__aeabi_dadd+0x120>
    5cc4:	230f      	movs	r3, #15
    5cc6:	403b      	ands	r3, r7
    5cc8:	2b04      	cmp	r3, #4
    5cca:	d005      	beq.n	5cd8 <__aeabi_dadd+0x120>
    5ccc:	1d3b      	adds	r3, r7, #4
    5cce:	42bb      	cmp	r3, r7
    5cd0:	41bf      	sbcs	r7, r7
    5cd2:	427f      	negs	r7, r7
    5cd4:	19e4      	adds	r4, r4, r7
    5cd6:	001f      	movs	r7, r3
    5cd8:	0223      	lsls	r3, r4, #8
    5cda:	d52c      	bpl.n	5d36 <__aeabi_dadd+0x17e>
    5cdc:	4b96      	ldr	r3, [pc, #600]	; (5f38 <__aeabi_dadd+0x380>)
    5cde:	3601      	adds	r6, #1
    5ce0:	429e      	cmp	r6, r3
    5ce2:	d100      	bne.n	5ce6 <__aeabi_dadd+0x12e>
    5ce4:	e09a      	b.n	5e1c <__aeabi_dadd+0x264>
    5ce6:	4645      	mov	r5, r8
    5ce8:	4b94      	ldr	r3, [pc, #592]	; (5f3c <__aeabi_dadd+0x384>)
    5cea:	08ff      	lsrs	r7, r7, #3
    5cec:	401c      	ands	r4, r3
    5cee:	0760      	lsls	r0, r4, #29
    5cf0:	0576      	lsls	r6, r6, #21
    5cf2:	0264      	lsls	r4, r4, #9
    5cf4:	4307      	orrs	r7, r0
    5cf6:	0b24      	lsrs	r4, r4, #12
    5cf8:	0d76      	lsrs	r6, r6, #21
    5cfa:	2100      	movs	r1, #0
    5cfc:	0324      	lsls	r4, r4, #12
    5cfe:	0b23      	lsrs	r3, r4, #12
    5d00:	0d0c      	lsrs	r4, r1, #20
    5d02:	4a8f      	ldr	r2, [pc, #572]	; (5f40 <__aeabi_dadd+0x388>)
    5d04:	0524      	lsls	r4, r4, #20
    5d06:	431c      	orrs	r4, r3
    5d08:	4014      	ands	r4, r2
    5d0a:	0533      	lsls	r3, r6, #20
    5d0c:	4323      	orrs	r3, r4
    5d0e:	005b      	lsls	r3, r3, #1
    5d10:	07ed      	lsls	r5, r5, #31
    5d12:	085b      	lsrs	r3, r3, #1
    5d14:	432b      	orrs	r3, r5
    5d16:	0038      	movs	r0, r7
    5d18:	0019      	movs	r1, r3
    5d1a:	bc3c      	pop	{r2, r3, r4, r5}
    5d1c:	4690      	mov	r8, r2
    5d1e:	4699      	mov	r9, r3
    5d20:	46a2      	mov	sl, r4
    5d22:	46ab      	mov	fp, r5
    5d24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5d26:	4664      	mov	r4, ip
    5d28:	4304      	orrs	r4, r0
    5d2a:	d100      	bne.n	5d2e <__aeabi_dadd+0x176>
    5d2c:	e211      	b.n	6152 <__aeabi_dadd+0x59a>
    5d2e:	0004      	movs	r4, r0
    5d30:	4667      	mov	r7, ip
    5d32:	077b      	lsls	r3, r7, #29
    5d34:	d1c6      	bne.n	5cc4 <__aeabi_dadd+0x10c>
    5d36:	4645      	mov	r5, r8
    5d38:	0760      	lsls	r0, r4, #29
    5d3a:	08ff      	lsrs	r7, r7, #3
    5d3c:	4307      	orrs	r7, r0
    5d3e:	08e4      	lsrs	r4, r4, #3
    5d40:	4b7d      	ldr	r3, [pc, #500]	; (5f38 <__aeabi_dadd+0x380>)
    5d42:	429e      	cmp	r6, r3
    5d44:	d030      	beq.n	5da8 <__aeabi_dadd+0x1f0>
    5d46:	0324      	lsls	r4, r4, #12
    5d48:	0576      	lsls	r6, r6, #21
    5d4a:	0b24      	lsrs	r4, r4, #12
    5d4c:	0d76      	lsrs	r6, r6, #21
    5d4e:	e7d4      	b.n	5cfa <__aeabi_dadd+0x142>
    5d50:	1a33      	subs	r3, r6, r0
    5d52:	469a      	mov	sl, r3
    5d54:	2b00      	cmp	r3, #0
    5d56:	dd78      	ble.n	5e4a <__aeabi_dadd+0x292>
    5d58:	2800      	cmp	r0, #0
    5d5a:	d031      	beq.n	5dc0 <__aeabi_dadd+0x208>
    5d5c:	4876      	ldr	r0, [pc, #472]	; (5f38 <__aeabi_dadd+0x380>)
    5d5e:	4286      	cmp	r6, r0
    5d60:	d0ae      	beq.n	5cc0 <__aeabi_dadd+0x108>
    5d62:	2080      	movs	r0, #128	; 0x80
    5d64:	0400      	lsls	r0, r0, #16
    5d66:	4301      	orrs	r1, r0
    5d68:	4653      	mov	r3, sl
    5d6a:	2b38      	cmp	r3, #56	; 0x38
    5d6c:	dc00      	bgt.n	5d70 <__aeabi_dadd+0x1b8>
    5d6e:	e0e9      	b.n	5f44 <__aeabi_dadd+0x38c>
    5d70:	430a      	orrs	r2, r1
    5d72:	1e51      	subs	r1, r2, #1
    5d74:	418a      	sbcs	r2, r1
    5d76:	2100      	movs	r1, #0
    5d78:	19d2      	adds	r2, r2, r7
    5d7a:	42ba      	cmp	r2, r7
    5d7c:	41bf      	sbcs	r7, r7
    5d7e:	1909      	adds	r1, r1, r4
    5d80:	427c      	negs	r4, r7
    5d82:	0017      	movs	r7, r2
    5d84:	190c      	adds	r4, r1, r4
    5d86:	0223      	lsls	r3, r4, #8
    5d88:	d5d3      	bpl.n	5d32 <__aeabi_dadd+0x17a>
    5d8a:	4b6b      	ldr	r3, [pc, #428]	; (5f38 <__aeabi_dadd+0x380>)
    5d8c:	3601      	adds	r6, #1
    5d8e:	429e      	cmp	r6, r3
    5d90:	d100      	bne.n	5d94 <__aeabi_dadd+0x1dc>
    5d92:	e13a      	b.n	600a <__aeabi_dadd+0x452>
    5d94:	2001      	movs	r0, #1
    5d96:	4b69      	ldr	r3, [pc, #420]	; (5f3c <__aeabi_dadd+0x384>)
    5d98:	401c      	ands	r4, r3
    5d9a:	087b      	lsrs	r3, r7, #1
    5d9c:	4007      	ands	r7, r0
    5d9e:	431f      	orrs	r7, r3
    5da0:	07e0      	lsls	r0, r4, #31
    5da2:	4307      	orrs	r7, r0
    5da4:	0864      	lsrs	r4, r4, #1
    5da6:	e78b      	b.n	5cc0 <__aeabi_dadd+0x108>
    5da8:	0023      	movs	r3, r4
    5daa:	433b      	orrs	r3, r7
    5dac:	d100      	bne.n	5db0 <__aeabi_dadd+0x1f8>
    5dae:	e1cb      	b.n	6148 <__aeabi_dadd+0x590>
    5db0:	2280      	movs	r2, #128	; 0x80
    5db2:	0312      	lsls	r2, r2, #12
    5db4:	4314      	orrs	r4, r2
    5db6:	0324      	lsls	r4, r4, #12
    5db8:	0b24      	lsrs	r4, r4, #12
    5dba:	e79e      	b.n	5cfa <__aeabi_dadd+0x142>
    5dbc:	002e      	movs	r6, r5
    5dbe:	e77f      	b.n	5cc0 <__aeabi_dadd+0x108>
    5dc0:	0008      	movs	r0, r1
    5dc2:	4310      	orrs	r0, r2
    5dc4:	d100      	bne.n	5dc8 <__aeabi_dadd+0x210>
    5dc6:	e0b4      	b.n	5f32 <__aeabi_dadd+0x37a>
    5dc8:	1e58      	subs	r0, r3, #1
    5dca:	2800      	cmp	r0, #0
    5dcc:	d000      	beq.n	5dd0 <__aeabi_dadd+0x218>
    5dce:	e0de      	b.n	5f8e <__aeabi_dadd+0x3d6>
    5dd0:	18ba      	adds	r2, r7, r2
    5dd2:	42ba      	cmp	r2, r7
    5dd4:	419b      	sbcs	r3, r3
    5dd6:	1864      	adds	r4, r4, r1
    5dd8:	425b      	negs	r3, r3
    5dda:	18e4      	adds	r4, r4, r3
    5ddc:	0017      	movs	r7, r2
    5dde:	2601      	movs	r6, #1
    5de0:	0223      	lsls	r3, r4, #8
    5de2:	d5a6      	bpl.n	5d32 <__aeabi_dadd+0x17a>
    5de4:	2602      	movs	r6, #2
    5de6:	e7d5      	b.n	5d94 <__aeabi_dadd+0x1dc>
    5de8:	2d00      	cmp	r5, #0
    5dea:	d16e      	bne.n	5eca <__aeabi_dadd+0x312>
    5dec:	1c70      	adds	r0, r6, #1
    5dee:	0540      	lsls	r0, r0, #21
    5df0:	0d40      	lsrs	r0, r0, #21
    5df2:	2801      	cmp	r0, #1
    5df4:	dc00      	bgt.n	5df8 <__aeabi_dadd+0x240>
    5df6:	e0f9      	b.n	5fec <__aeabi_dadd+0x434>
    5df8:	1ab8      	subs	r0, r7, r2
    5dfa:	4684      	mov	ip, r0
    5dfc:	4287      	cmp	r7, r0
    5dfe:	4180      	sbcs	r0, r0
    5e00:	1ae5      	subs	r5, r4, r3
    5e02:	4240      	negs	r0, r0
    5e04:	1a2d      	subs	r5, r5, r0
    5e06:	0228      	lsls	r0, r5, #8
    5e08:	d400      	bmi.n	5e0c <__aeabi_dadd+0x254>
    5e0a:	e089      	b.n	5f20 <__aeabi_dadd+0x368>
    5e0c:	1bd7      	subs	r7, r2, r7
    5e0e:	42ba      	cmp	r2, r7
    5e10:	4192      	sbcs	r2, r2
    5e12:	1b1c      	subs	r4, r3, r4
    5e14:	4252      	negs	r2, r2
    5e16:	1aa5      	subs	r5, r4, r2
    5e18:	46d8      	mov	r8, fp
    5e1a:	e729      	b.n	5c70 <__aeabi_dadd+0xb8>
    5e1c:	4645      	mov	r5, r8
    5e1e:	2400      	movs	r4, #0
    5e20:	2700      	movs	r7, #0
    5e22:	e76a      	b.n	5cfa <__aeabi_dadd+0x142>
    5e24:	4c45      	ldr	r4, [pc, #276]	; (5f3c <__aeabi_dadd+0x384>)
    5e26:	1af6      	subs	r6, r6, r3
    5e28:	402c      	ands	r4, r5
    5e2a:	e749      	b.n	5cc0 <__aeabi_dadd+0x108>
    5e2c:	003d      	movs	r5, r7
    5e2e:	3828      	subs	r0, #40	; 0x28
    5e30:	4085      	lsls	r5, r0
    5e32:	2700      	movs	r7, #0
    5e34:	e72e      	b.n	5c94 <__aeabi_dadd+0xdc>
    5e36:	0038      	movs	r0, r7
    5e38:	f001 fd0e 	bl	7858 <__clzsi2>
    5e3c:	3020      	adds	r0, #32
    5e3e:	e71d      	b.n	5c7c <__aeabi_dadd+0xc4>
    5e40:	430a      	orrs	r2, r1
    5e42:	1e51      	subs	r1, r2, #1
    5e44:	418a      	sbcs	r2, r1
    5e46:	2100      	movs	r1, #0
    5e48:	e707      	b.n	5c5a <__aeabi_dadd+0xa2>
    5e4a:	2b00      	cmp	r3, #0
    5e4c:	d000      	beq.n	5e50 <__aeabi_dadd+0x298>
    5e4e:	e0f3      	b.n	6038 <__aeabi_dadd+0x480>
    5e50:	1c70      	adds	r0, r6, #1
    5e52:	0543      	lsls	r3, r0, #21
    5e54:	0d5b      	lsrs	r3, r3, #21
    5e56:	2b01      	cmp	r3, #1
    5e58:	dc00      	bgt.n	5e5c <__aeabi_dadd+0x2a4>
    5e5a:	e0ad      	b.n	5fb8 <__aeabi_dadd+0x400>
    5e5c:	4b36      	ldr	r3, [pc, #216]	; (5f38 <__aeabi_dadd+0x380>)
    5e5e:	4298      	cmp	r0, r3
    5e60:	d100      	bne.n	5e64 <__aeabi_dadd+0x2ac>
    5e62:	e0d1      	b.n	6008 <__aeabi_dadd+0x450>
    5e64:	18ba      	adds	r2, r7, r2
    5e66:	42ba      	cmp	r2, r7
    5e68:	41bf      	sbcs	r7, r7
    5e6a:	1864      	adds	r4, r4, r1
    5e6c:	427f      	negs	r7, r7
    5e6e:	19e4      	adds	r4, r4, r7
    5e70:	07e7      	lsls	r7, r4, #31
    5e72:	0852      	lsrs	r2, r2, #1
    5e74:	4317      	orrs	r7, r2
    5e76:	0864      	lsrs	r4, r4, #1
    5e78:	0006      	movs	r6, r0
    5e7a:	e721      	b.n	5cc0 <__aeabi_dadd+0x108>
    5e7c:	482e      	ldr	r0, [pc, #184]	; (5f38 <__aeabi_dadd+0x380>)
    5e7e:	4285      	cmp	r5, r0
    5e80:	d100      	bne.n	5e84 <__aeabi_dadd+0x2cc>
    5e82:	e093      	b.n	5fac <__aeabi_dadd+0x3f4>
    5e84:	001d      	movs	r5, r3
    5e86:	e6d0      	b.n	5c2a <__aeabi_dadd+0x72>
    5e88:	0029      	movs	r1, r5
    5e8a:	3e1f      	subs	r6, #31
    5e8c:	40f1      	lsrs	r1, r6
    5e8e:	2b20      	cmp	r3, #32
    5e90:	d100      	bne.n	5e94 <__aeabi_dadd+0x2dc>
    5e92:	e08d      	b.n	5fb0 <__aeabi_dadd+0x3f8>
    5e94:	2240      	movs	r2, #64	; 0x40
    5e96:	1ad3      	subs	r3, r2, r3
    5e98:	409d      	lsls	r5, r3
    5e9a:	432f      	orrs	r7, r5
    5e9c:	1e7d      	subs	r5, r7, #1
    5e9e:	41af      	sbcs	r7, r5
    5ea0:	2400      	movs	r4, #0
    5ea2:	430f      	orrs	r7, r1
    5ea4:	2600      	movs	r6, #0
    5ea6:	e744      	b.n	5d32 <__aeabi_dadd+0x17a>
    5ea8:	002b      	movs	r3, r5
    5eaa:	0008      	movs	r0, r1
    5eac:	3b20      	subs	r3, #32
    5eae:	40d8      	lsrs	r0, r3
    5eb0:	0003      	movs	r3, r0
    5eb2:	2d20      	cmp	r5, #32
    5eb4:	d100      	bne.n	5eb8 <__aeabi_dadd+0x300>
    5eb6:	e07d      	b.n	5fb4 <__aeabi_dadd+0x3fc>
    5eb8:	2040      	movs	r0, #64	; 0x40
    5eba:	1b45      	subs	r5, r0, r5
    5ebc:	40a9      	lsls	r1, r5
    5ebe:	430a      	orrs	r2, r1
    5ec0:	1e51      	subs	r1, r2, #1
    5ec2:	418a      	sbcs	r2, r1
    5ec4:	2100      	movs	r1, #0
    5ec6:	431a      	orrs	r2, r3
    5ec8:	e6c7      	b.n	5c5a <__aeabi_dadd+0xa2>
    5eca:	2e00      	cmp	r6, #0
    5ecc:	d050      	beq.n	5f70 <__aeabi_dadd+0x3b8>
    5ece:	4e1a      	ldr	r6, [pc, #104]	; (5f38 <__aeabi_dadd+0x380>)
    5ed0:	42b0      	cmp	r0, r6
    5ed2:	d057      	beq.n	5f84 <__aeabi_dadd+0x3cc>
    5ed4:	2680      	movs	r6, #128	; 0x80
    5ed6:	426b      	negs	r3, r5
    5ed8:	4699      	mov	r9, r3
    5eda:	0436      	lsls	r6, r6, #16
    5edc:	4334      	orrs	r4, r6
    5ede:	464b      	mov	r3, r9
    5ee0:	2b38      	cmp	r3, #56	; 0x38
    5ee2:	dd00      	ble.n	5ee6 <__aeabi_dadd+0x32e>
    5ee4:	e0d6      	b.n	6094 <__aeabi_dadd+0x4dc>
    5ee6:	2b1f      	cmp	r3, #31
    5ee8:	dd00      	ble.n	5eec <__aeabi_dadd+0x334>
    5eea:	e135      	b.n	6158 <__aeabi_dadd+0x5a0>
    5eec:	2620      	movs	r6, #32
    5eee:	1af5      	subs	r5, r6, r3
    5ef0:	0026      	movs	r6, r4
    5ef2:	40ae      	lsls	r6, r5
    5ef4:	46b2      	mov	sl, r6
    5ef6:	003e      	movs	r6, r7
    5ef8:	40de      	lsrs	r6, r3
    5efa:	46ac      	mov	ip, r5
    5efc:	0035      	movs	r5, r6
    5efe:	4656      	mov	r6, sl
    5f00:	432e      	orrs	r6, r5
    5f02:	4665      	mov	r5, ip
    5f04:	40af      	lsls	r7, r5
    5f06:	1e7d      	subs	r5, r7, #1
    5f08:	41af      	sbcs	r7, r5
    5f0a:	40dc      	lsrs	r4, r3
    5f0c:	4337      	orrs	r7, r6
    5f0e:	1bd7      	subs	r7, r2, r7
    5f10:	42ba      	cmp	r2, r7
    5f12:	4192      	sbcs	r2, r2
    5f14:	1b0c      	subs	r4, r1, r4
    5f16:	4252      	negs	r2, r2
    5f18:	1aa4      	subs	r4, r4, r2
    5f1a:	0006      	movs	r6, r0
    5f1c:	46d8      	mov	r8, fp
    5f1e:	e6a3      	b.n	5c68 <__aeabi_dadd+0xb0>
    5f20:	4664      	mov	r4, ip
    5f22:	4667      	mov	r7, ip
    5f24:	432c      	orrs	r4, r5
    5f26:	d000      	beq.n	5f2a <__aeabi_dadd+0x372>
    5f28:	e6a2      	b.n	5c70 <__aeabi_dadd+0xb8>
    5f2a:	2500      	movs	r5, #0
    5f2c:	2600      	movs	r6, #0
    5f2e:	2700      	movs	r7, #0
    5f30:	e706      	b.n	5d40 <__aeabi_dadd+0x188>
    5f32:	001e      	movs	r6, r3
    5f34:	e6c4      	b.n	5cc0 <__aeabi_dadd+0x108>
    5f36:	46c0      	nop			; (mov r8, r8)
    5f38:	000007ff 	.word	0x000007ff
    5f3c:	ff7fffff 	.word	0xff7fffff
    5f40:	800fffff 	.word	0x800fffff
    5f44:	2b1f      	cmp	r3, #31
    5f46:	dc63      	bgt.n	6010 <__aeabi_dadd+0x458>
    5f48:	2020      	movs	r0, #32
    5f4a:	1ac3      	subs	r3, r0, r3
    5f4c:	0008      	movs	r0, r1
    5f4e:	4098      	lsls	r0, r3
    5f50:	469c      	mov	ip, r3
    5f52:	4683      	mov	fp, r0
    5f54:	4653      	mov	r3, sl
    5f56:	0010      	movs	r0, r2
    5f58:	40d8      	lsrs	r0, r3
    5f5a:	0003      	movs	r3, r0
    5f5c:	4658      	mov	r0, fp
    5f5e:	4318      	orrs	r0, r3
    5f60:	4663      	mov	r3, ip
    5f62:	409a      	lsls	r2, r3
    5f64:	1e53      	subs	r3, r2, #1
    5f66:	419a      	sbcs	r2, r3
    5f68:	4653      	mov	r3, sl
    5f6a:	4302      	orrs	r2, r0
    5f6c:	40d9      	lsrs	r1, r3
    5f6e:	e703      	b.n	5d78 <__aeabi_dadd+0x1c0>
    5f70:	0026      	movs	r6, r4
    5f72:	433e      	orrs	r6, r7
    5f74:	d006      	beq.n	5f84 <__aeabi_dadd+0x3cc>
    5f76:	43eb      	mvns	r3, r5
    5f78:	4699      	mov	r9, r3
    5f7a:	2b00      	cmp	r3, #0
    5f7c:	d0c7      	beq.n	5f0e <__aeabi_dadd+0x356>
    5f7e:	4e94      	ldr	r6, [pc, #592]	; (61d0 <__aeabi_dadd+0x618>)
    5f80:	42b0      	cmp	r0, r6
    5f82:	d1ac      	bne.n	5ede <__aeabi_dadd+0x326>
    5f84:	000c      	movs	r4, r1
    5f86:	0017      	movs	r7, r2
    5f88:	0006      	movs	r6, r0
    5f8a:	46d8      	mov	r8, fp
    5f8c:	e698      	b.n	5cc0 <__aeabi_dadd+0x108>
    5f8e:	4b90      	ldr	r3, [pc, #576]	; (61d0 <__aeabi_dadd+0x618>)
    5f90:	459a      	cmp	sl, r3
    5f92:	d00b      	beq.n	5fac <__aeabi_dadd+0x3f4>
    5f94:	4682      	mov	sl, r0
    5f96:	e6e7      	b.n	5d68 <__aeabi_dadd+0x1b0>
    5f98:	2800      	cmp	r0, #0
    5f9a:	d000      	beq.n	5f9e <__aeabi_dadd+0x3e6>
    5f9c:	e09e      	b.n	60dc <__aeabi_dadd+0x524>
    5f9e:	0018      	movs	r0, r3
    5fa0:	4310      	orrs	r0, r2
    5fa2:	d100      	bne.n	5fa6 <__aeabi_dadd+0x3ee>
    5fa4:	e0e9      	b.n	617a <__aeabi_dadd+0x5c2>
    5fa6:	001c      	movs	r4, r3
    5fa8:	0017      	movs	r7, r2
    5faa:	46d8      	mov	r8, fp
    5fac:	4e88      	ldr	r6, [pc, #544]	; (61d0 <__aeabi_dadd+0x618>)
    5fae:	e687      	b.n	5cc0 <__aeabi_dadd+0x108>
    5fb0:	2500      	movs	r5, #0
    5fb2:	e772      	b.n	5e9a <__aeabi_dadd+0x2e2>
    5fb4:	2100      	movs	r1, #0
    5fb6:	e782      	b.n	5ebe <__aeabi_dadd+0x306>
    5fb8:	0023      	movs	r3, r4
    5fba:	433b      	orrs	r3, r7
    5fbc:	2e00      	cmp	r6, #0
    5fbe:	d000      	beq.n	5fc2 <__aeabi_dadd+0x40a>
    5fc0:	e0ab      	b.n	611a <__aeabi_dadd+0x562>
    5fc2:	2b00      	cmp	r3, #0
    5fc4:	d100      	bne.n	5fc8 <__aeabi_dadd+0x410>
    5fc6:	e0e7      	b.n	6198 <__aeabi_dadd+0x5e0>
    5fc8:	000b      	movs	r3, r1
    5fca:	4313      	orrs	r3, r2
    5fcc:	d100      	bne.n	5fd0 <__aeabi_dadd+0x418>
    5fce:	e677      	b.n	5cc0 <__aeabi_dadd+0x108>
    5fd0:	18ba      	adds	r2, r7, r2
    5fd2:	42ba      	cmp	r2, r7
    5fd4:	41bf      	sbcs	r7, r7
    5fd6:	1864      	adds	r4, r4, r1
    5fd8:	427f      	negs	r7, r7
    5fda:	19e4      	adds	r4, r4, r7
    5fdc:	0223      	lsls	r3, r4, #8
    5fde:	d400      	bmi.n	5fe2 <__aeabi_dadd+0x42a>
    5fe0:	e0f2      	b.n	61c8 <__aeabi_dadd+0x610>
    5fe2:	4b7c      	ldr	r3, [pc, #496]	; (61d4 <__aeabi_dadd+0x61c>)
    5fe4:	0017      	movs	r7, r2
    5fe6:	401c      	ands	r4, r3
    5fe8:	0006      	movs	r6, r0
    5fea:	e669      	b.n	5cc0 <__aeabi_dadd+0x108>
    5fec:	0020      	movs	r0, r4
    5fee:	4338      	orrs	r0, r7
    5ff0:	2e00      	cmp	r6, #0
    5ff2:	d1d1      	bne.n	5f98 <__aeabi_dadd+0x3e0>
    5ff4:	2800      	cmp	r0, #0
    5ff6:	d15b      	bne.n	60b0 <__aeabi_dadd+0x4f8>
    5ff8:	001c      	movs	r4, r3
    5ffa:	4314      	orrs	r4, r2
    5ffc:	d100      	bne.n	6000 <__aeabi_dadd+0x448>
    5ffe:	e0a8      	b.n	6152 <__aeabi_dadd+0x59a>
    6000:	001c      	movs	r4, r3
    6002:	0017      	movs	r7, r2
    6004:	46d8      	mov	r8, fp
    6006:	e65b      	b.n	5cc0 <__aeabi_dadd+0x108>
    6008:	0006      	movs	r6, r0
    600a:	2400      	movs	r4, #0
    600c:	2700      	movs	r7, #0
    600e:	e697      	b.n	5d40 <__aeabi_dadd+0x188>
    6010:	4650      	mov	r0, sl
    6012:	000b      	movs	r3, r1
    6014:	3820      	subs	r0, #32
    6016:	40c3      	lsrs	r3, r0
    6018:	4699      	mov	r9, r3
    601a:	4653      	mov	r3, sl
    601c:	2b20      	cmp	r3, #32
    601e:	d100      	bne.n	6022 <__aeabi_dadd+0x46a>
    6020:	e095      	b.n	614e <__aeabi_dadd+0x596>
    6022:	2340      	movs	r3, #64	; 0x40
    6024:	4650      	mov	r0, sl
    6026:	1a1b      	subs	r3, r3, r0
    6028:	4099      	lsls	r1, r3
    602a:	430a      	orrs	r2, r1
    602c:	1e51      	subs	r1, r2, #1
    602e:	418a      	sbcs	r2, r1
    6030:	464b      	mov	r3, r9
    6032:	2100      	movs	r1, #0
    6034:	431a      	orrs	r2, r3
    6036:	e69f      	b.n	5d78 <__aeabi_dadd+0x1c0>
    6038:	2e00      	cmp	r6, #0
    603a:	d130      	bne.n	609e <__aeabi_dadd+0x4e6>
    603c:	0026      	movs	r6, r4
    603e:	433e      	orrs	r6, r7
    6040:	d067      	beq.n	6112 <__aeabi_dadd+0x55a>
    6042:	43db      	mvns	r3, r3
    6044:	469a      	mov	sl, r3
    6046:	2b00      	cmp	r3, #0
    6048:	d01c      	beq.n	6084 <__aeabi_dadd+0x4cc>
    604a:	4e61      	ldr	r6, [pc, #388]	; (61d0 <__aeabi_dadd+0x618>)
    604c:	42b0      	cmp	r0, r6
    604e:	d060      	beq.n	6112 <__aeabi_dadd+0x55a>
    6050:	4653      	mov	r3, sl
    6052:	2b38      	cmp	r3, #56	; 0x38
    6054:	dd00      	ble.n	6058 <__aeabi_dadd+0x4a0>
    6056:	e096      	b.n	6186 <__aeabi_dadd+0x5ce>
    6058:	2b1f      	cmp	r3, #31
    605a:	dd00      	ble.n	605e <__aeabi_dadd+0x4a6>
    605c:	e09f      	b.n	619e <__aeabi_dadd+0x5e6>
    605e:	2620      	movs	r6, #32
    6060:	1af3      	subs	r3, r6, r3
    6062:	0026      	movs	r6, r4
    6064:	409e      	lsls	r6, r3
    6066:	469c      	mov	ip, r3
    6068:	46b3      	mov	fp, r6
    606a:	4653      	mov	r3, sl
    606c:	003e      	movs	r6, r7
    606e:	40de      	lsrs	r6, r3
    6070:	0033      	movs	r3, r6
    6072:	465e      	mov	r6, fp
    6074:	431e      	orrs	r6, r3
    6076:	4663      	mov	r3, ip
    6078:	409f      	lsls	r7, r3
    607a:	1e7b      	subs	r3, r7, #1
    607c:	419f      	sbcs	r7, r3
    607e:	4653      	mov	r3, sl
    6080:	40dc      	lsrs	r4, r3
    6082:	4337      	orrs	r7, r6
    6084:	18bf      	adds	r7, r7, r2
    6086:	4297      	cmp	r7, r2
    6088:	4192      	sbcs	r2, r2
    608a:	1864      	adds	r4, r4, r1
    608c:	4252      	negs	r2, r2
    608e:	18a4      	adds	r4, r4, r2
    6090:	0006      	movs	r6, r0
    6092:	e678      	b.n	5d86 <__aeabi_dadd+0x1ce>
    6094:	4327      	orrs	r7, r4
    6096:	1e7c      	subs	r4, r7, #1
    6098:	41a7      	sbcs	r7, r4
    609a:	2400      	movs	r4, #0
    609c:	e737      	b.n	5f0e <__aeabi_dadd+0x356>
    609e:	4e4c      	ldr	r6, [pc, #304]	; (61d0 <__aeabi_dadd+0x618>)
    60a0:	42b0      	cmp	r0, r6
    60a2:	d036      	beq.n	6112 <__aeabi_dadd+0x55a>
    60a4:	2680      	movs	r6, #128	; 0x80
    60a6:	425b      	negs	r3, r3
    60a8:	0436      	lsls	r6, r6, #16
    60aa:	469a      	mov	sl, r3
    60ac:	4334      	orrs	r4, r6
    60ae:	e7cf      	b.n	6050 <__aeabi_dadd+0x498>
    60b0:	0018      	movs	r0, r3
    60b2:	4310      	orrs	r0, r2
    60b4:	d100      	bne.n	60b8 <__aeabi_dadd+0x500>
    60b6:	e603      	b.n	5cc0 <__aeabi_dadd+0x108>
    60b8:	1ab8      	subs	r0, r7, r2
    60ba:	4684      	mov	ip, r0
    60bc:	4567      	cmp	r7, ip
    60be:	41ad      	sbcs	r5, r5
    60c0:	1ae0      	subs	r0, r4, r3
    60c2:	426d      	negs	r5, r5
    60c4:	1b40      	subs	r0, r0, r5
    60c6:	0205      	lsls	r5, r0, #8
    60c8:	d400      	bmi.n	60cc <__aeabi_dadd+0x514>
    60ca:	e62c      	b.n	5d26 <__aeabi_dadd+0x16e>
    60cc:	1bd7      	subs	r7, r2, r7
    60ce:	42ba      	cmp	r2, r7
    60d0:	4192      	sbcs	r2, r2
    60d2:	1b1c      	subs	r4, r3, r4
    60d4:	4252      	negs	r2, r2
    60d6:	1aa4      	subs	r4, r4, r2
    60d8:	46d8      	mov	r8, fp
    60da:	e5f1      	b.n	5cc0 <__aeabi_dadd+0x108>
    60dc:	0018      	movs	r0, r3
    60de:	4310      	orrs	r0, r2
    60e0:	d100      	bne.n	60e4 <__aeabi_dadd+0x52c>
    60e2:	e763      	b.n	5fac <__aeabi_dadd+0x3f4>
    60e4:	08f8      	lsrs	r0, r7, #3
    60e6:	0767      	lsls	r7, r4, #29
    60e8:	4307      	orrs	r7, r0
    60ea:	2080      	movs	r0, #128	; 0x80
    60ec:	08e4      	lsrs	r4, r4, #3
    60ee:	0300      	lsls	r0, r0, #12
    60f0:	4204      	tst	r4, r0
    60f2:	d008      	beq.n	6106 <__aeabi_dadd+0x54e>
    60f4:	08dd      	lsrs	r5, r3, #3
    60f6:	4205      	tst	r5, r0
    60f8:	d105      	bne.n	6106 <__aeabi_dadd+0x54e>
    60fa:	08d2      	lsrs	r2, r2, #3
    60fc:	0759      	lsls	r1, r3, #29
    60fe:	4311      	orrs	r1, r2
    6100:	000f      	movs	r7, r1
    6102:	002c      	movs	r4, r5
    6104:	46d8      	mov	r8, fp
    6106:	0f7b      	lsrs	r3, r7, #29
    6108:	00e4      	lsls	r4, r4, #3
    610a:	431c      	orrs	r4, r3
    610c:	00ff      	lsls	r7, r7, #3
    610e:	4e30      	ldr	r6, [pc, #192]	; (61d0 <__aeabi_dadd+0x618>)
    6110:	e5d6      	b.n	5cc0 <__aeabi_dadd+0x108>
    6112:	000c      	movs	r4, r1
    6114:	0017      	movs	r7, r2
    6116:	0006      	movs	r6, r0
    6118:	e5d2      	b.n	5cc0 <__aeabi_dadd+0x108>
    611a:	2b00      	cmp	r3, #0
    611c:	d038      	beq.n	6190 <__aeabi_dadd+0x5d8>
    611e:	000b      	movs	r3, r1
    6120:	4313      	orrs	r3, r2
    6122:	d100      	bne.n	6126 <__aeabi_dadd+0x56e>
    6124:	e742      	b.n	5fac <__aeabi_dadd+0x3f4>
    6126:	08f8      	lsrs	r0, r7, #3
    6128:	0767      	lsls	r7, r4, #29
    612a:	4307      	orrs	r7, r0
    612c:	2080      	movs	r0, #128	; 0x80
    612e:	08e4      	lsrs	r4, r4, #3
    6130:	0300      	lsls	r0, r0, #12
    6132:	4204      	tst	r4, r0
    6134:	d0e7      	beq.n	6106 <__aeabi_dadd+0x54e>
    6136:	08cb      	lsrs	r3, r1, #3
    6138:	4203      	tst	r3, r0
    613a:	d1e4      	bne.n	6106 <__aeabi_dadd+0x54e>
    613c:	08d2      	lsrs	r2, r2, #3
    613e:	0749      	lsls	r1, r1, #29
    6140:	4311      	orrs	r1, r2
    6142:	000f      	movs	r7, r1
    6144:	001c      	movs	r4, r3
    6146:	e7de      	b.n	6106 <__aeabi_dadd+0x54e>
    6148:	2700      	movs	r7, #0
    614a:	2400      	movs	r4, #0
    614c:	e5d5      	b.n	5cfa <__aeabi_dadd+0x142>
    614e:	2100      	movs	r1, #0
    6150:	e76b      	b.n	602a <__aeabi_dadd+0x472>
    6152:	2500      	movs	r5, #0
    6154:	2700      	movs	r7, #0
    6156:	e5f3      	b.n	5d40 <__aeabi_dadd+0x188>
    6158:	464e      	mov	r6, r9
    615a:	0025      	movs	r5, r4
    615c:	3e20      	subs	r6, #32
    615e:	40f5      	lsrs	r5, r6
    6160:	464b      	mov	r3, r9
    6162:	002e      	movs	r6, r5
    6164:	2b20      	cmp	r3, #32
    6166:	d02d      	beq.n	61c4 <__aeabi_dadd+0x60c>
    6168:	2540      	movs	r5, #64	; 0x40
    616a:	1aed      	subs	r5, r5, r3
    616c:	40ac      	lsls	r4, r5
    616e:	4327      	orrs	r7, r4
    6170:	1e7c      	subs	r4, r7, #1
    6172:	41a7      	sbcs	r7, r4
    6174:	2400      	movs	r4, #0
    6176:	4337      	orrs	r7, r6
    6178:	e6c9      	b.n	5f0e <__aeabi_dadd+0x356>
    617a:	2480      	movs	r4, #128	; 0x80
    617c:	2500      	movs	r5, #0
    617e:	0324      	lsls	r4, r4, #12
    6180:	4e13      	ldr	r6, [pc, #76]	; (61d0 <__aeabi_dadd+0x618>)
    6182:	2700      	movs	r7, #0
    6184:	e5dc      	b.n	5d40 <__aeabi_dadd+0x188>
    6186:	4327      	orrs	r7, r4
    6188:	1e7c      	subs	r4, r7, #1
    618a:	41a7      	sbcs	r7, r4
    618c:	2400      	movs	r4, #0
    618e:	e779      	b.n	6084 <__aeabi_dadd+0x4cc>
    6190:	000c      	movs	r4, r1
    6192:	0017      	movs	r7, r2
    6194:	4e0e      	ldr	r6, [pc, #56]	; (61d0 <__aeabi_dadd+0x618>)
    6196:	e593      	b.n	5cc0 <__aeabi_dadd+0x108>
    6198:	000c      	movs	r4, r1
    619a:	0017      	movs	r7, r2
    619c:	e590      	b.n	5cc0 <__aeabi_dadd+0x108>
    619e:	4656      	mov	r6, sl
    61a0:	0023      	movs	r3, r4
    61a2:	3e20      	subs	r6, #32
    61a4:	40f3      	lsrs	r3, r6
    61a6:	4699      	mov	r9, r3
    61a8:	4653      	mov	r3, sl
    61aa:	2b20      	cmp	r3, #32
    61ac:	d00e      	beq.n	61cc <__aeabi_dadd+0x614>
    61ae:	2340      	movs	r3, #64	; 0x40
    61b0:	4656      	mov	r6, sl
    61b2:	1b9b      	subs	r3, r3, r6
    61b4:	409c      	lsls	r4, r3
    61b6:	4327      	orrs	r7, r4
    61b8:	1e7c      	subs	r4, r7, #1
    61ba:	41a7      	sbcs	r7, r4
    61bc:	464b      	mov	r3, r9
    61be:	2400      	movs	r4, #0
    61c0:	431f      	orrs	r7, r3
    61c2:	e75f      	b.n	6084 <__aeabi_dadd+0x4cc>
    61c4:	2400      	movs	r4, #0
    61c6:	e7d2      	b.n	616e <__aeabi_dadd+0x5b6>
    61c8:	0017      	movs	r7, r2
    61ca:	e5b2      	b.n	5d32 <__aeabi_dadd+0x17a>
    61cc:	2400      	movs	r4, #0
    61ce:	e7f2      	b.n	61b6 <__aeabi_dadd+0x5fe>
    61d0:	000007ff 	.word	0x000007ff
    61d4:	ff7fffff 	.word	0xff7fffff

000061d8 <__aeabi_ddiv>:
    61d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    61da:	4657      	mov	r7, sl
    61dc:	4645      	mov	r5, r8
    61de:	46de      	mov	lr, fp
    61e0:	464e      	mov	r6, r9
    61e2:	b5e0      	push	{r5, r6, r7, lr}
    61e4:	004c      	lsls	r4, r1, #1
    61e6:	030e      	lsls	r6, r1, #12
    61e8:	b087      	sub	sp, #28
    61ea:	4683      	mov	fp, r0
    61ec:	4692      	mov	sl, r2
    61ee:	001d      	movs	r5, r3
    61f0:	4680      	mov	r8, r0
    61f2:	0b36      	lsrs	r6, r6, #12
    61f4:	0d64      	lsrs	r4, r4, #21
    61f6:	0fcf      	lsrs	r7, r1, #31
    61f8:	2c00      	cmp	r4, #0
    61fa:	d04f      	beq.n	629c <__aeabi_ddiv+0xc4>
    61fc:	4b6f      	ldr	r3, [pc, #444]	; (63bc <__aeabi_ddiv+0x1e4>)
    61fe:	429c      	cmp	r4, r3
    6200:	d035      	beq.n	626e <__aeabi_ddiv+0x96>
    6202:	2380      	movs	r3, #128	; 0x80
    6204:	0f42      	lsrs	r2, r0, #29
    6206:	041b      	lsls	r3, r3, #16
    6208:	00f6      	lsls	r6, r6, #3
    620a:	4313      	orrs	r3, r2
    620c:	4333      	orrs	r3, r6
    620e:	4699      	mov	r9, r3
    6210:	00c3      	lsls	r3, r0, #3
    6212:	4698      	mov	r8, r3
    6214:	4b6a      	ldr	r3, [pc, #424]	; (63c0 <__aeabi_ddiv+0x1e8>)
    6216:	2600      	movs	r6, #0
    6218:	469c      	mov	ip, r3
    621a:	2300      	movs	r3, #0
    621c:	4464      	add	r4, ip
    621e:	9303      	str	r3, [sp, #12]
    6220:	032b      	lsls	r3, r5, #12
    6222:	0b1b      	lsrs	r3, r3, #12
    6224:	469b      	mov	fp, r3
    6226:	006b      	lsls	r3, r5, #1
    6228:	0fed      	lsrs	r5, r5, #31
    622a:	4650      	mov	r0, sl
    622c:	0d5b      	lsrs	r3, r3, #21
    622e:	9501      	str	r5, [sp, #4]
    6230:	d05e      	beq.n	62f0 <__aeabi_ddiv+0x118>
    6232:	4a62      	ldr	r2, [pc, #392]	; (63bc <__aeabi_ddiv+0x1e4>)
    6234:	4293      	cmp	r3, r2
    6236:	d053      	beq.n	62e0 <__aeabi_ddiv+0x108>
    6238:	465a      	mov	r2, fp
    623a:	00d1      	lsls	r1, r2, #3
    623c:	2280      	movs	r2, #128	; 0x80
    623e:	0f40      	lsrs	r0, r0, #29
    6240:	0412      	lsls	r2, r2, #16
    6242:	4302      	orrs	r2, r0
    6244:	430a      	orrs	r2, r1
    6246:	4693      	mov	fp, r2
    6248:	4652      	mov	r2, sl
    624a:	00d1      	lsls	r1, r2, #3
    624c:	4a5c      	ldr	r2, [pc, #368]	; (63c0 <__aeabi_ddiv+0x1e8>)
    624e:	4694      	mov	ip, r2
    6250:	2200      	movs	r2, #0
    6252:	4463      	add	r3, ip
    6254:	0038      	movs	r0, r7
    6256:	4068      	eors	r0, r5
    6258:	4684      	mov	ip, r0
    625a:	9002      	str	r0, [sp, #8]
    625c:	1ae4      	subs	r4, r4, r3
    625e:	4316      	orrs	r6, r2
    6260:	2e0f      	cmp	r6, #15
    6262:	d900      	bls.n	6266 <__aeabi_ddiv+0x8e>
    6264:	e0b4      	b.n	63d0 <__aeabi_ddiv+0x1f8>
    6266:	4b57      	ldr	r3, [pc, #348]	; (63c4 <__aeabi_ddiv+0x1ec>)
    6268:	00b6      	lsls	r6, r6, #2
    626a:	599b      	ldr	r3, [r3, r6]
    626c:	469f      	mov	pc, r3
    626e:	0003      	movs	r3, r0
    6270:	4333      	orrs	r3, r6
    6272:	4699      	mov	r9, r3
    6274:	d16c      	bne.n	6350 <__aeabi_ddiv+0x178>
    6276:	2300      	movs	r3, #0
    6278:	4698      	mov	r8, r3
    627a:	3302      	adds	r3, #2
    627c:	2608      	movs	r6, #8
    627e:	9303      	str	r3, [sp, #12]
    6280:	e7ce      	b.n	6220 <__aeabi_ddiv+0x48>
    6282:	46cb      	mov	fp, r9
    6284:	4641      	mov	r1, r8
    6286:	9a03      	ldr	r2, [sp, #12]
    6288:	9701      	str	r7, [sp, #4]
    628a:	2a02      	cmp	r2, #2
    628c:	d165      	bne.n	635a <__aeabi_ddiv+0x182>
    628e:	9b01      	ldr	r3, [sp, #4]
    6290:	4c4a      	ldr	r4, [pc, #296]	; (63bc <__aeabi_ddiv+0x1e4>)
    6292:	469c      	mov	ip, r3
    6294:	2300      	movs	r3, #0
    6296:	2200      	movs	r2, #0
    6298:	4698      	mov	r8, r3
    629a:	e06b      	b.n	6374 <__aeabi_ddiv+0x19c>
    629c:	0003      	movs	r3, r0
    629e:	4333      	orrs	r3, r6
    62a0:	4699      	mov	r9, r3
    62a2:	d04e      	beq.n	6342 <__aeabi_ddiv+0x16a>
    62a4:	2e00      	cmp	r6, #0
    62a6:	d100      	bne.n	62aa <__aeabi_ddiv+0xd2>
    62a8:	e1bc      	b.n	6624 <__aeabi_ddiv+0x44c>
    62aa:	0030      	movs	r0, r6
    62ac:	f001 fad4 	bl	7858 <__clzsi2>
    62b0:	0003      	movs	r3, r0
    62b2:	3b0b      	subs	r3, #11
    62b4:	2b1c      	cmp	r3, #28
    62b6:	dd00      	ble.n	62ba <__aeabi_ddiv+0xe2>
    62b8:	e1ac      	b.n	6614 <__aeabi_ddiv+0x43c>
    62ba:	221d      	movs	r2, #29
    62bc:	1ad3      	subs	r3, r2, r3
    62be:	465a      	mov	r2, fp
    62c0:	0001      	movs	r1, r0
    62c2:	40da      	lsrs	r2, r3
    62c4:	3908      	subs	r1, #8
    62c6:	408e      	lsls	r6, r1
    62c8:	0013      	movs	r3, r2
    62ca:	4333      	orrs	r3, r6
    62cc:	4699      	mov	r9, r3
    62ce:	465b      	mov	r3, fp
    62d0:	408b      	lsls	r3, r1
    62d2:	4698      	mov	r8, r3
    62d4:	2300      	movs	r3, #0
    62d6:	4c3c      	ldr	r4, [pc, #240]	; (63c8 <__aeabi_ddiv+0x1f0>)
    62d8:	2600      	movs	r6, #0
    62da:	1a24      	subs	r4, r4, r0
    62dc:	9303      	str	r3, [sp, #12]
    62de:	e79f      	b.n	6220 <__aeabi_ddiv+0x48>
    62e0:	4651      	mov	r1, sl
    62e2:	465a      	mov	r2, fp
    62e4:	4311      	orrs	r1, r2
    62e6:	d129      	bne.n	633c <__aeabi_ddiv+0x164>
    62e8:	2200      	movs	r2, #0
    62ea:	4693      	mov	fp, r2
    62ec:	3202      	adds	r2, #2
    62ee:	e7b1      	b.n	6254 <__aeabi_ddiv+0x7c>
    62f0:	4659      	mov	r1, fp
    62f2:	4301      	orrs	r1, r0
    62f4:	d01e      	beq.n	6334 <__aeabi_ddiv+0x15c>
    62f6:	465b      	mov	r3, fp
    62f8:	2b00      	cmp	r3, #0
    62fa:	d100      	bne.n	62fe <__aeabi_ddiv+0x126>
    62fc:	e19e      	b.n	663c <__aeabi_ddiv+0x464>
    62fe:	4658      	mov	r0, fp
    6300:	f001 faaa 	bl	7858 <__clzsi2>
    6304:	0003      	movs	r3, r0
    6306:	3b0b      	subs	r3, #11
    6308:	2b1c      	cmp	r3, #28
    630a:	dd00      	ble.n	630e <__aeabi_ddiv+0x136>
    630c:	e18f      	b.n	662e <__aeabi_ddiv+0x456>
    630e:	0002      	movs	r2, r0
    6310:	4659      	mov	r1, fp
    6312:	3a08      	subs	r2, #8
    6314:	4091      	lsls	r1, r2
    6316:	468b      	mov	fp, r1
    6318:	211d      	movs	r1, #29
    631a:	1acb      	subs	r3, r1, r3
    631c:	4651      	mov	r1, sl
    631e:	40d9      	lsrs	r1, r3
    6320:	000b      	movs	r3, r1
    6322:	4659      	mov	r1, fp
    6324:	430b      	orrs	r3, r1
    6326:	4651      	mov	r1, sl
    6328:	469b      	mov	fp, r3
    632a:	4091      	lsls	r1, r2
    632c:	4b26      	ldr	r3, [pc, #152]	; (63c8 <__aeabi_ddiv+0x1f0>)
    632e:	2200      	movs	r2, #0
    6330:	1a1b      	subs	r3, r3, r0
    6332:	e78f      	b.n	6254 <__aeabi_ddiv+0x7c>
    6334:	2300      	movs	r3, #0
    6336:	2201      	movs	r2, #1
    6338:	469b      	mov	fp, r3
    633a:	e78b      	b.n	6254 <__aeabi_ddiv+0x7c>
    633c:	4651      	mov	r1, sl
    633e:	2203      	movs	r2, #3
    6340:	e788      	b.n	6254 <__aeabi_ddiv+0x7c>
    6342:	2300      	movs	r3, #0
    6344:	4698      	mov	r8, r3
    6346:	3301      	adds	r3, #1
    6348:	2604      	movs	r6, #4
    634a:	2400      	movs	r4, #0
    634c:	9303      	str	r3, [sp, #12]
    634e:	e767      	b.n	6220 <__aeabi_ddiv+0x48>
    6350:	2303      	movs	r3, #3
    6352:	46b1      	mov	r9, r6
    6354:	9303      	str	r3, [sp, #12]
    6356:	260c      	movs	r6, #12
    6358:	e762      	b.n	6220 <__aeabi_ddiv+0x48>
    635a:	2a03      	cmp	r2, #3
    635c:	d100      	bne.n	6360 <__aeabi_ddiv+0x188>
    635e:	e25c      	b.n	681a <__aeabi_ddiv+0x642>
    6360:	9b01      	ldr	r3, [sp, #4]
    6362:	2a01      	cmp	r2, #1
    6364:	d000      	beq.n	6368 <__aeabi_ddiv+0x190>
    6366:	e1e4      	b.n	6732 <__aeabi_ddiv+0x55a>
    6368:	4013      	ands	r3, r2
    636a:	469c      	mov	ip, r3
    636c:	2300      	movs	r3, #0
    636e:	2400      	movs	r4, #0
    6370:	2200      	movs	r2, #0
    6372:	4698      	mov	r8, r3
    6374:	2100      	movs	r1, #0
    6376:	0312      	lsls	r2, r2, #12
    6378:	0b13      	lsrs	r3, r2, #12
    637a:	0d0a      	lsrs	r2, r1, #20
    637c:	0512      	lsls	r2, r2, #20
    637e:	431a      	orrs	r2, r3
    6380:	0523      	lsls	r3, r4, #20
    6382:	4c12      	ldr	r4, [pc, #72]	; (63cc <__aeabi_ddiv+0x1f4>)
    6384:	4640      	mov	r0, r8
    6386:	4022      	ands	r2, r4
    6388:	4313      	orrs	r3, r2
    638a:	4662      	mov	r2, ip
    638c:	005b      	lsls	r3, r3, #1
    638e:	07d2      	lsls	r2, r2, #31
    6390:	085b      	lsrs	r3, r3, #1
    6392:	4313      	orrs	r3, r2
    6394:	0019      	movs	r1, r3
    6396:	b007      	add	sp, #28
    6398:	bc3c      	pop	{r2, r3, r4, r5}
    639a:	4690      	mov	r8, r2
    639c:	4699      	mov	r9, r3
    639e:	46a2      	mov	sl, r4
    63a0:	46ab      	mov	fp, r5
    63a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    63a4:	2300      	movs	r3, #0
    63a6:	2280      	movs	r2, #128	; 0x80
    63a8:	469c      	mov	ip, r3
    63aa:	0312      	lsls	r2, r2, #12
    63ac:	4698      	mov	r8, r3
    63ae:	4c03      	ldr	r4, [pc, #12]	; (63bc <__aeabi_ddiv+0x1e4>)
    63b0:	e7e0      	b.n	6374 <__aeabi_ddiv+0x19c>
    63b2:	2300      	movs	r3, #0
    63b4:	4c01      	ldr	r4, [pc, #4]	; (63bc <__aeabi_ddiv+0x1e4>)
    63b6:	2200      	movs	r2, #0
    63b8:	4698      	mov	r8, r3
    63ba:	e7db      	b.n	6374 <__aeabi_ddiv+0x19c>
    63bc:	000007ff 	.word	0x000007ff
    63c0:	fffffc01 	.word	0xfffffc01
    63c4:	00008238 	.word	0x00008238
    63c8:	fffffc0d 	.word	0xfffffc0d
    63cc:	800fffff 	.word	0x800fffff
    63d0:	45d9      	cmp	r9, fp
    63d2:	d900      	bls.n	63d6 <__aeabi_ddiv+0x1fe>
    63d4:	e139      	b.n	664a <__aeabi_ddiv+0x472>
    63d6:	d100      	bne.n	63da <__aeabi_ddiv+0x202>
    63d8:	e134      	b.n	6644 <__aeabi_ddiv+0x46c>
    63da:	2300      	movs	r3, #0
    63dc:	4646      	mov	r6, r8
    63de:	464d      	mov	r5, r9
    63e0:	469a      	mov	sl, r3
    63e2:	3c01      	subs	r4, #1
    63e4:	465b      	mov	r3, fp
    63e6:	0e0a      	lsrs	r2, r1, #24
    63e8:	021b      	lsls	r3, r3, #8
    63ea:	431a      	orrs	r2, r3
    63ec:	020b      	lsls	r3, r1, #8
    63ee:	0c17      	lsrs	r7, r2, #16
    63f0:	9303      	str	r3, [sp, #12]
    63f2:	0413      	lsls	r3, r2, #16
    63f4:	0c1b      	lsrs	r3, r3, #16
    63f6:	0039      	movs	r1, r7
    63f8:	0028      	movs	r0, r5
    63fa:	4690      	mov	r8, r2
    63fc:	9301      	str	r3, [sp, #4]
    63fe:	f7ff fa07 	bl	5810 <__udivsi3>
    6402:	0002      	movs	r2, r0
    6404:	9b01      	ldr	r3, [sp, #4]
    6406:	4683      	mov	fp, r0
    6408:	435a      	muls	r2, r3
    640a:	0028      	movs	r0, r5
    640c:	0039      	movs	r1, r7
    640e:	4691      	mov	r9, r2
    6410:	f7ff fa84 	bl	591c <__aeabi_uidivmod>
    6414:	0c35      	lsrs	r5, r6, #16
    6416:	0409      	lsls	r1, r1, #16
    6418:	430d      	orrs	r5, r1
    641a:	45a9      	cmp	r9, r5
    641c:	d90d      	bls.n	643a <__aeabi_ddiv+0x262>
    641e:	465b      	mov	r3, fp
    6420:	4445      	add	r5, r8
    6422:	3b01      	subs	r3, #1
    6424:	45a8      	cmp	r8, r5
    6426:	d900      	bls.n	642a <__aeabi_ddiv+0x252>
    6428:	e13a      	b.n	66a0 <__aeabi_ddiv+0x4c8>
    642a:	45a9      	cmp	r9, r5
    642c:	d800      	bhi.n	6430 <__aeabi_ddiv+0x258>
    642e:	e137      	b.n	66a0 <__aeabi_ddiv+0x4c8>
    6430:	2302      	movs	r3, #2
    6432:	425b      	negs	r3, r3
    6434:	469c      	mov	ip, r3
    6436:	4445      	add	r5, r8
    6438:	44e3      	add	fp, ip
    643a:	464b      	mov	r3, r9
    643c:	1aeb      	subs	r3, r5, r3
    643e:	0039      	movs	r1, r7
    6440:	0018      	movs	r0, r3
    6442:	9304      	str	r3, [sp, #16]
    6444:	f7ff f9e4 	bl	5810 <__udivsi3>
    6448:	9b01      	ldr	r3, [sp, #4]
    644a:	0005      	movs	r5, r0
    644c:	4343      	muls	r3, r0
    644e:	0039      	movs	r1, r7
    6450:	9804      	ldr	r0, [sp, #16]
    6452:	4699      	mov	r9, r3
    6454:	f7ff fa62 	bl	591c <__aeabi_uidivmod>
    6458:	0433      	lsls	r3, r6, #16
    645a:	0409      	lsls	r1, r1, #16
    645c:	0c1b      	lsrs	r3, r3, #16
    645e:	430b      	orrs	r3, r1
    6460:	4599      	cmp	r9, r3
    6462:	d909      	bls.n	6478 <__aeabi_ddiv+0x2a0>
    6464:	4443      	add	r3, r8
    6466:	1e6a      	subs	r2, r5, #1
    6468:	4598      	cmp	r8, r3
    646a:	d900      	bls.n	646e <__aeabi_ddiv+0x296>
    646c:	e11a      	b.n	66a4 <__aeabi_ddiv+0x4cc>
    646e:	4599      	cmp	r9, r3
    6470:	d800      	bhi.n	6474 <__aeabi_ddiv+0x29c>
    6472:	e117      	b.n	66a4 <__aeabi_ddiv+0x4cc>
    6474:	3d02      	subs	r5, #2
    6476:	4443      	add	r3, r8
    6478:	464a      	mov	r2, r9
    647a:	1a9b      	subs	r3, r3, r2
    647c:	465a      	mov	r2, fp
    647e:	0412      	lsls	r2, r2, #16
    6480:	432a      	orrs	r2, r5
    6482:	9903      	ldr	r1, [sp, #12]
    6484:	4693      	mov	fp, r2
    6486:	0c10      	lsrs	r0, r2, #16
    6488:	0c0a      	lsrs	r2, r1, #16
    648a:	4691      	mov	r9, r2
    648c:	0409      	lsls	r1, r1, #16
    648e:	465a      	mov	r2, fp
    6490:	0c09      	lsrs	r1, r1, #16
    6492:	464e      	mov	r6, r9
    6494:	000d      	movs	r5, r1
    6496:	0412      	lsls	r2, r2, #16
    6498:	0c12      	lsrs	r2, r2, #16
    649a:	4345      	muls	r5, r0
    649c:	9105      	str	r1, [sp, #20]
    649e:	4351      	muls	r1, r2
    64a0:	4372      	muls	r2, r6
    64a2:	4370      	muls	r0, r6
    64a4:	1952      	adds	r2, r2, r5
    64a6:	0c0e      	lsrs	r6, r1, #16
    64a8:	18b2      	adds	r2, r6, r2
    64aa:	4295      	cmp	r5, r2
    64ac:	d903      	bls.n	64b6 <__aeabi_ddiv+0x2de>
    64ae:	2580      	movs	r5, #128	; 0x80
    64b0:	026d      	lsls	r5, r5, #9
    64b2:	46ac      	mov	ip, r5
    64b4:	4460      	add	r0, ip
    64b6:	0c15      	lsrs	r5, r2, #16
    64b8:	0409      	lsls	r1, r1, #16
    64ba:	0412      	lsls	r2, r2, #16
    64bc:	0c09      	lsrs	r1, r1, #16
    64be:	1828      	adds	r0, r5, r0
    64c0:	1852      	adds	r2, r2, r1
    64c2:	4283      	cmp	r3, r0
    64c4:	d200      	bcs.n	64c8 <__aeabi_ddiv+0x2f0>
    64c6:	e0ce      	b.n	6666 <__aeabi_ddiv+0x48e>
    64c8:	d100      	bne.n	64cc <__aeabi_ddiv+0x2f4>
    64ca:	e0c8      	b.n	665e <__aeabi_ddiv+0x486>
    64cc:	1a1d      	subs	r5, r3, r0
    64ce:	4653      	mov	r3, sl
    64d0:	1a9e      	subs	r6, r3, r2
    64d2:	45b2      	cmp	sl, r6
    64d4:	4192      	sbcs	r2, r2
    64d6:	4252      	negs	r2, r2
    64d8:	1aab      	subs	r3, r5, r2
    64da:	469a      	mov	sl, r3
    64dc:	4598      	cmp	r8, r3
    64de:	d100      	bne.n	64e2 <__aeabi_ddiv+0x30a>
    64e0:	e117      	b.n	6712 <__aeabi_ddiv+0x53a>
    64e2:	0039      	movs	r1, r7
    64e4:	0018      	movs	r0, r3
    64e6:	f7ff f993 	bl	5810 <__udivsi3>
    64ea:	9b01      	ldr	r3, [sp, #4]
    64ec:	0005      	movs	r5, r0
    64ee:	4343      	muls	r3, r0
    64f0:	0039      	movs	r1, r7
    64f2:	4650      	mov	r0, sl
    64f4:	9304      	str	r3, [sp, #16]
    64f6:	f7ff fa11 	bl	591c <__aeabi_uidivmod>
    64fa:	9804      	ldr	r0, [sp, #16]
    64fc:	040b      	lsls	r3, r1, #16
    64fe:	0c31      	lsrs	r1, r6, #16
    6500:	4319      	orrs	r1, r3
    6502:	4288      	cmp	r0, r1
    6504:	d909      	bls.n	651a <__aeabi_ddiv+0x342>
    6506:	4441      	add	r1, r8
    6508:	1e6b      	subs	r3, r5, #1
    650a:	4588      	cmp	r8, r1
    650c:	d900      	bls.n	6510 <__aeabi_ddiv+0x338>
    650e:	e107      	b.n	6720 <__aeabi_ddiv+0x548>
    6510:	4288      	cmp	r0, r1
    6512:	d800      	bhi.n	6516 <__aeabi_ddiv+0x33e>
    6514:	e104      	b.n	6720 <__aeabi_ddiv+0x548>
    6516:	3d02      	subs	r5, #2
    6518:	4441      	add	r1, r8
    651a:	9b04      	ldr	r3, [sp, #16]
    651c:	1acb      	subs	r3, r1, r3
    651e:	0018      	movs	r0, r3
    6520:	0039      	movs	r1, r7
    6522:	9304      	str	r3, [sp, #16]
    6524:	f7ff f974 	bl	5810 <__udivsi3>
    6528:	9b01      	ldr	r3, [sp, #4]
    652a:	4682      	mov	sl, r0
    652c:	4343      	muls	r3, r0
    652e:	0039      	movs	r1, r7
    6530:	9804      	ldr	r0, [sp, #16]
    6532:	9301      	str	r3, [sp, #4]
    6534:	f7ff f9f2 	bl	591c <__aeabi_uidivmod>
    6538:	9801      	ldr	r0, [sp, #4]
    653a:	040b      	lsls	r3, r1, #16
    653c:	0431      	lsls	r1, r6, #16
    653e:	0c09      	lsrs	r1, r1, #16
    6540:	4319      	orrs	r1, r3
    6542:	4288      	cmp	r0, r1
    6544:	d90d      	bls.n	6562 <__aeabi_ddiv+0x38a>
    6546:	4653      	mov	r3, sl
    6548:	4441      	add	r1, r8
    654a:	3b01      	subs	r3, #1
    654c:	4588      	cmp	r8, r1
    654e:	d900      	bls.n	6552 <__aeabi_ddiv+0x37a>
    6550:	e0e8      	b.n	6724 <__aeabi_ddiv+0x54c>
    6552:	4288      	cmp	r0, r1
    6554:	d800      	bhi.n	6558 <__aeabi_ddiv+0x380>
    6556:	e0e5      	b.n	6724 <__aeabi_ddiv+0x54c>
    6558:	2302      	movs	r3, #2
    655a:	425b      	negs	r3, r3
    655c:	469c      	mov	ip, r3
    655e:	4441      	add	r1, r8
    6560:	44e2      	add	sl, ip
    6562:	9b01      	ldr	r3, [sp, #4]
    6564:	042d      	lsls	r5, r5, #16
    6566:	1ace      	subs	r6, r1, r3
    6568:	4651      	mov	r1, sl
    656a:	4329      	orrs	r1, r5
    656c:	9d05      	ldr	r5, [sp, #20]
    656e:	464f      	mov	r7, r9
    6570:	002a      	movs	r2, r5
    6572:	040b      	lsls	r3, r1, #16
    6574:	0c08      	lsrs	r0, r1, #16
    6576:	0c1b      	lsrs	r3, r3, #16
    6578:	435a      	muls	r2, r3
    657a:	4345      	muls	r5, r0
    657c:	437b      	muls	r3, r7
    657e:	4378      	muls	r0, r7
    6580:	195b      	adds	r3, r3, r5
    6582:	0c17      	lsrs	r7, r2, #16
    6584:	18fb      	adds	r3, r7, r3
    6586:	429d      	cmp	r5, r3
    6588:	d903      	bls.n	6592 <__aeabi_ddiv+0x3ba>
    658a:	2580      	movs	r5, #128	; 0x80
    658c:	026d      	lsls	r5, r5, #9
    658e:	46ac      	mov	ip, r5
    6590:	4460      	add	r0, ip
    6592:	0c1d      	lsrs	r5, r3, #16
    6594:	0412      	lsls	r2, r2, #16
    6596:	041b      	lsls	r3, r3, #16
    6598:	0c12      	lsrs	r2, r2, #16
    659a:	1828      	adds	r0, r5, r0
    659c:	189b      	adds	r3, r3, r2
    659e:	4286      	cmp	r6, r0
    65a0:	d200      	bcs.n	65a4 <__aeabi_ddiv+0x3cc>
    65a2:	e093      	b.n	66cc <__aeabi_ddiv+0x4f4>
    65a4:	d100      	bne.n	65a8 <__aeabi_ddiv+0x3d0>
    65a6:	e08e      	b.n	66c6 <__aeabi_ddiv+0x4ee>
    65a8:	2301      	movs	r3, #1
    65aa:	4319      	orrs	r1, r3
    65ac:	4ba0      	ldr	r3, [pc, #640]	; (6830 <__aeabi_ddiv+0x658>)
    65ae:	18e3      	adds	r3, r4, r3
    65b0:	2b00      	cmp	r3, #0
    65b2:	dc00      	bgt.n	65b6 <__aeabi_ddiv+0x3de>
    65b4:	e099      	b.n	66ea <__aeabi_ddiv+0x512>
    65b6:	074a      	lsls	r2, r1, #29
    65b8:	d000      	beq.n	65bc <__aeabi_ddiv+0x3e4>
    65ba:	e09e      	b.n	66fa <__aeabi_ddiv+0x522>
    65bc:	465a      	mov	r2, fp
    65be:	01d2      	lsls	r2, r2, #7
    65c0:	d506      	bpl.n	65d0 <__aeabi_ddiv+0x3f8>
    65c2:	465a      	mov	r2, fp
    65c4:	4b9b      	ldr	r3, [pc, #620]	; (6834 <__aeabi_ddiv+0x65c>)
    65c6:	401a      	ands	r2, r3
    65c8:	2380      	movs	r3, #128	; 0x80
    65ca:	4693      	mov	fp, r2
    65cc:	00db      	lsls	r3, r3, #3
    65ce:	18e3      	adds	r3, r4, r3
    65d0:	4a99      	ldr	r2, [pc, #612]	; (6838 <__aeabi_ddiv+0x660>)
    65d2:	4293      	cmp	r3, r2
    65d4:	dd68      	ble.n	66a8 <__aeabi_ddiv+0x4d0>
    65d6:	2301      	movs	r3, #1
    65d8:	9a02      	ldr	r2, [sp, #8]
    65da:	4c98      	ldr	r4, [pc, #608]	; (683c <__aeabi_ddiv+0x664>)
    65dc:	401a      	ands	r2, r3
    65de:	2300      	movs	r3, #0
    65e0:	4694      	mov	ip, r2
    65e2:	4698      	mov	r8, r3
    65e4:	2200      	movs	r2, #0
    65e6:	e6c5      	b.n	6374 <__aeabi_ddiv+0x19c>
    65e8:	2280      	movs	r2, #128	; 0x80
    65ea:	464b      	mov	r3, r9
    65ec:	0312      	lsls	r2, r2, #12
    65ee:	4213      	tst	r3, r2
    65f0:	d00a      	beq.n	6608 <__aeabi_ddiv+0x430>
    65f2:	465b      	mov	r3, fp
    65f4:	4213      	tst	r3, r2
    65f6:	d106      	bne.n	6606 <__aeabi_ddiv+0x42e>
    65f8:	431a      	orrs	r2, r3
    65fa:	0312      	lsls	r2, r2, #12
    65fc:	0b12      	lsrs	r2, r2, #12
    65fe:	46ac      	mov	ip, r5
    6600:	4688      	mov	r8, r1
    6602:	4c8e      	ldr	r4, [pc, #568]	; (683c <__aeabi_ddiv+0x664>)
    6604:	e6b6      	b.n	6374 <__aeabi_ddiv+0x19c>
    6606:	464b      	mov	r3, r9
    6608:	431a      	orrs	r2, r3
    660a:	0312      	lsls	r2, r2, #12
    660c:	0b12      	lsrs	r2, r2, #12
    660e:	46bc      	mov	ip, r7
    6610:	4c8a      	ldr	r4, [pc, #552]	; (683c <__aeabi_ddiv+0x664>)
    6612:	e6af      	b.n	6374 <__aeabi_ddiv+0x19c>
    6614:	0003      	movs	r3, r0
    6616:	465a      	mov	r2, fp
    6618:	3b28      	subs	r3, #40	; 0x28
    661a:	409a      	lsls	r2, r3
    661c:	2300      	movs	r3, #0
    661e:	4691      	mov	r9, r2
    6620:	4698      	mov	r8, r3
    6622:	e657      	b.n	62d4 <__aeabi_ddiv+0xfc>
    6624:	4658      	mov	r0, fp
    6626:	f001 f917 	bl	7858 <__clzsi2>
    662a:	3020      	adds	r0, #32
    662c:	e640      	b.n	62b0 <__aeabi_ddiv+0xd8>
    662e:	0003      	movs	r3, r0
    6630:	4652      	mov	r2, sl
    6632:	3b28      	subs	r3, #40	; 0x28
    6634:	409a      	lsls	r2, r3
    6636:	2100      	movs	r1, #0
    6638:	4693      	mov	fp, r2
    663a:	e677      	b.n	632c <__aeabi_ddiv+0x154>
    663c:	f001 f90c 	bl	7858 <__clzsi2>
    6640:	3020      	adds	r0, #32
    6642:	e65f      	b.n	6304 <__aeabi_ddiv+0x12c>
    6644:	4588      	cmp	r8, r1
    6646:	d200      	bcs.n	664a <__aeabi_ddiv+0x472>
    6648:	e6c7      	b.n	63da <__aeabi_ddiv+0x202>
    664a:	464b      	mov	r3, r9
    664c:	07de      	lsls	r6, r3, #31
    664e:	085d      	lsrs	r5, r3, #1
    6650:	4643      	mov	r3, r8
    6652:	085b      	lsrs	r3, r3, #1
    6654:	431e      	orrs	r6, r3
    6656:	4643      	mov	r3, r8
    6658:	07db      	lsls	r3, r3, #31
    665a:	469a      	mov	sl, r3
    665c:	e6c2      	b.n	63e4 <__aeabi_ddiv+0x20c>
    665e:	2500      	movs	r5, #0
    6660:	4592      	cmp	sl, r2
    6662:	d300      	bcc.n	6666 <__aeabi_ddiv+0x48e>
    6664:	e733      	b.n	64ce <__aeabi_ddiv+0x2f6>
    6666:	9e03      	ldr	r6, [sp, #12]
    6668:	4659      	mov	r1, fp
    666a:	46b4      	mov	ip, r6
    666c:	44e2      	add	sl, ip
    666e:	45b2      	cmp	sl, r6
    6670:	41ad      	sbcs	r5, r5
    6672:	426d      	negs	r5, r5
    6674:	4445      	add	r5, r8
    6676:	18eb      	adds	r3, r5, r3
    6678:	3901      	subs	r1, #1
    667a:	4598      	cmp	r8, r3
    667c:	d207      	bcs.n	668e <__aeabi_ddiv+0x4b6>
    667e:	4298      	cmp	r0, r3
    6680:	d900      	bls.n	6684 <__aeabi_ddiv+0x4ac>
    6682:	e07f      	b.n	6784 <__aeabi_ddiv+0x5ac>
    6684:	d100      	bne.n	6688 <__aeabi_ddiv+0x4b0>
    6686:	e0bc      	b.n	6802 <__aeabi_ddiv+0x62a>
    6688:	1a1d      	subs	r5, r3, r0
    668a:	468b      	mov	fp, r1
    668c:	e71f      	b.n	64ce <__aeabi_ddiv+0x2f6>
    668e:	4598      	cmp	r8, r3
    6690:	d1fa      	bne.n	6688 <__aeabi_ddiv+0x4b0>
    6692:	9d03      	ldr	r5, [sp, #12]
    6694:	4555      	cmp	r5, sl
    6696:	d9f2      	bls.n	667e <__aeabi_ddiv+0x4a6>
    6698:	4643      	mov	r3, r8
    669a:	468b      	mov	fp, r1
    669c:	1a1d      	subs	r5, r3, r0
    669e:	e716      	b.n	64ce <__aeabi_ddiv+0x2f6>
    66a0:	469b      	mov	fp, r3
    66a2:	e6ca      	b.n	643a <__aeabi_ddiv+0x262>
    66a4:	0015      	movs	r5, r2
    66a6:	e6e7      	b.n	6478 <__aeabi_ddiv+0x2a0>
    66a8:	465a      	mov	r2, fp
    66aa:	08c9      	lsrs	r1, r1, #3
    66ac:	0752      	lsls	r2, r2, #29
    66ae:	430a      	orrs	r2, r1
    66b0:	055b      	lsls	r3, r3, #21
    66b2:	4690      	mov	r8, r2
    66b4:	0d5c      	lsrs	r4, r3, #21
    66b6:	465a      	mov	r2, fp
    66b8:	2301      	movs	r3, #1
    66ba:	9902      	ldr	r1, [sp, #8]
    66bc:	0252      	lsls	r2, r2, #9
    66be:	4019      	ands	r1, r3
    66c0:	0b12      	lsrs	r2, r2, #12
    66c2:	468c      	mov	ip, r1
    66c4:	e656      	b.n	6374 <__aeabi_ddiv+0x19c>
    66c6:	2b00      	cmp	r3, #0
    66c8:	d100      	bne.n	66cc <__aeabi_ddiv+0x4f4>
    66ca:	e76f      	b.n	65ac <__aeabi_ddiv+0x3d4>
    66cc:	4446      	add	r6, r8
    66ce:	1e4a      	subs	r2, r1, #1
    66d0:	45b0      	cmp	r8, r6
    66d2:	d929      	bls.n	6728 <__aeabi_ddiv+0x550>
    66d4:	0011      	movs	r1, r2
    66d6:	4286      	cmp	r6, r0
    66d8:	d000      	beq.n	66dc <__aeabi_ddiv+0x504>
    66da:	e765      	b.n	65a8 <__aeabi_ddiv+0x3d0>
    66dc:	9a03      	ldr	r2, [sp, #12]
    66de:	4293      	cmp	r3, r2
    66e0:	d000      	beq.n	66e4 <__aeabi_ddiv+0x50c>
    66e2:	e761      	b.n	65a8 <__aeabi_ddiv+0x3d0>
    66e4:	e762      	b.n	65ac <__aeabi_ddiv+0x3d4>
    66e6:	2101      	movs	r1, #1
    66e8:	4249      	negs	r1, r1
    66ea:	2001      	movs	r0, #1
    66ec:	1ac2      	subs	r2, r0, r3
    66ee:	2a38      	cmp	r2, #56	; 0x38
    66f0:	dd21      	ble.n	6736 <__aeabi_ddiv+0x55e>
    66f2:	9b02      	ldr	r3, [sp, #8]
    66f4:	4003      	ands	r3, r0
    66f6:	469c      	mov	ip, r3
    66f8:	e638      	b.n	636c <__aeabi_ddiv+0x194>
    66fa:	220f      	movs	r2, #15
    66fc:	400a      	ands	r2, r1
    66fe:	2a04      	cmp	r2, #4
    6700:	d100      	bne.n	6704 <__aeabi_ddiv+0x52c>
    6702:	e75b      	b.n	65bc <__aeabi_ddiv+0x3e4>
    6704:	000a      	movs	r2, r1
    6706:	1d11      	adds	r1, r2, #4
    6708:	4291      	cmp	r1, r2
    670a:	4192      	sbcs	r2, r2
    670c:	4252      	negs	r2, r2
    670e:	4493      	add	fp, r2
    6710:	e754      	b.n	65bc <__aeabi_ddiv+0x3e4>
    6712:	4b47      	ldr	r3, [pc, #284]	; (6830 <__aeabi_ddiv+0x658>)
    6714:	18e3      	adds	r3, r4, r3
    6716:	2b00      	cmp	r3, #0
    6718:	dde5      	ble.n	66e6 <__aeabi_ddiv+0x50e>
    671a:	2201      	movs	r2, #1
    671c:	4252      	negs	r2, r2
    671e:	e7f2      	b.n	6706 <__aeabi_ddiv+0x52e>
    6720:	001d      	movs	r5, r3
    6722:	e6fa      	b.n	651a <__aeabi_ddiv+0x342>
    6724:	469a      	mov	sl, r3
    6726:	e71c      	b.n	6562 <__aeabi_ddiv+0x38a>
    6728:	42b0      	cmp	r0, r6
    672a:	d839      	bhi.n	67a0 <__aeabi_ddiv+0x5c8>
    672c:	d06e      	beq.n	680c <__aeabi_ddiv+0x634>
    672e:	0011      	movs	r1, r2
    6730:	e73a      	b.n	65a8 <__aeabi_ddiv+0x3d0>
    6732:	9302      	str	r3, [sp, #8]
    6734:	e73a      	b.n	65ac <__aeabi_ddiv+0x3d4>
    6736:	2a1f      	cmp	r2, #31
    6738:	dc3c      	bgt.n	67b4 <__aeabi_ddiv+0x5dc>
    673a:	2320      	movs	r3, #32
    673c:	1a9b      	subs	r3, r3, r2
    673e:	000c      	movs	r4, r1
    6740:	4658      	mov	r0, fp
    6742:	4099      	lsls	r1, r3
    6744:	4098      	lsls	r0, r3
    6746:	1e4b      	subs	r3, r1, #1
    6748:	4199      	sbcs	r1, r3
    674a:	465b      	mov	r3, fp
    674c:	40d4      	lsrs	r4, r2
    674e:	40d3      	lsrs	r3, r2
    6750:	4320      	orrs	r0, r4
    6752:	4308      	orrs	r0, r1
    6754:	001a      	movs	r2, r3
    6756:	0743      	lsls	r3, r0, #29
    6758:	d009      	beq.n	676e <__aeabi_ddiv+0x596>
    675a:	230f      	movs	r3, #15
    675c:	4003      	ands	r3, r0
    675e:	2b04      	cmp	r3, #4
    6760:	d005      	beq.n	676e <__aeabi_ddiv+0x596>
    6762:	0001      	movs	r1, r0
    6764:	1d08      	adds	r0, r1, #4
    6766:	4288      	cmp	r0, r1
    6768:	419b      	sbcs	r3, r3
    676a:	425b      	negs	r3, r3
    676c:	18d2      	adds	r2, r2, r3
    676e:	0213      	lsls	r3, r2, #8
    6770:	d53a      	bpl.n	67e8 <__aeabi_ddiv+0x610>
    6772:	2301      	movs	r3, #1
    6774:	9a02      	ldr	r2, [sp, #8]
    6776:	2401      	movs	r4, #1
    6778:	401a      	ands	r2, r3
    677a:	2300      	movs	r3, #0
    677c:	4694      	mov	ip, r2
    677e:	4698      	mov	r8, r3
    6780:	2200      	movs	r2, #0
    6782:	e5f7      	b.n	6374 <__aeabi_ddiv+0x19c>
    6784:	2102      	movs	r1, #2
    6786:	4249      	negs	r1, r1
    6788:	468c      	mov	ip, r1
    678a:	9d03      	ldr	r5, [sp, #12]
    678c:	44e3      	add	fp, ip
    678e:	46ac      	mov	ip, r5
    6790:	44e2      	add	sl, ip
    6792:	45aa      	cmp	sl, r5
    6794:	41ad      	sbcs	r5, r5
    6796:	426d      	negs	r5, r5
    6798:	4445      	add	r5, r8
    679a:	18ed      	adds	r5, r5, r3
    679c:	1a2d      	subs	r5, r5, r0
    679e:	e696      	b.n	64ce <__aeabi_ddiv+0x2f6>
    67a0:	1e8a      	subs	r2, r1, #2
    67a2:	9903      	ldr	r1, [sp, #12]
    67a4:	004d      	lsls	r5, r1, #1
    67a6:	428d      	cmp	r5, r1
    67a8:	4189      	sbcs	r1, r1
    67aa:	4249      	negs	r1, r1
    67ac:	4441      	add	r1, r8
    67ae:	1876      	adds	r6, r6, r1
    67b0:	9503      	str	r5, [sp, #12]
    67b2:	e78f      	b.n	66d4 <__aeabi_ddiv+0x4fc>
    67b4:	201f      	movs	r0, #31
    67b6:	4240      	negs	r0, r0
    67b8:	1ac3      	subs	r3, r0, r3
    67ba:	4658      	mov	r0, fp
    67bc:	40d8      	lsrs	r0, r3
    67be:	0003      	movs	r3, r0
    67c0:	2a20      	cmp	r2, #32
    67c2:	d028      	beq.n	6816 <__aeabi_ddiv+0x63e>
    67c4:	2040      	movs	r0, #64	; 0x40
    67c6:	465d      	mov	r5, fp
    67c8:	1a82      	subs	r2, r0, r2
    67ca:	4095      	lsls	r5, r2
    67cc:	4329      	orrs	r1, r5
    67ce:	1e4a      	subs	r2, r1, #1
    67d0:	4191      	sbcs	r1, r2
    67d2:	4319      	orrs	r1, r3
    67d4:	2307      	movs	r3, #7
    67d6:	2200      	movs	r2, #0
    67d8:	400b      	ands	r3, r1
    67da:	d009      	beq.n	67f0 <__aeabi_ddiv+0x618>
    67dc:	230f      	movs	r3, #15
    67de:	2200      	movs	r2, #0
    67e0:	400b      	ands	r3, r1
    67e2:	0008      	movs	r0, r1
    67e4:	2b04      	cmp	r3, #4
    67e6:	d1bd      	bne.n	6764 <__aeabi_ddiv+0x58c>
    67e8:	0001      	movs	r1, r0
    67ea:	0753      	lsls	r3, r2, #29
    67ec:	0252      	lsls	r2, r2, #9
    67ee:	0b12      	lsrs	r2, r2, #12
    67f0:	08c9      	lsrs	r1, r1, #3
    67f2:	4319      	orrs	r1, r3
    67f4:	2301      	movs	r3, #1
    67f6:	4688      	mov	r8, r1
    67f8:	9902      	ldr	r1, [sp, #8]
    67fa:	2400      	movs	r4, #0
    67fc:	4019      	ands	r1, r3
    67fe:	468c      	mov	ip, r1
    6800:	e5b8      	b.n	6374 <__aeabi_ddiv+0x19c>
    6802:	4552      	cmp	r2, sl
    6804:	d8be      	bhi.n	6784 <__aeabi_ddiv+0x5ac>
    6806:	468b      	mov	fp, r1
    6808:	2500      	movs	r5, #0
    680a:	e660      	b.n	64ce <__aeabi_ddiv+0x2f6>
    680c:	9d03      	ldr	r5, [sp, #12]
    680e:	429d      	cmp	r5, r3
    6810:	d3c6      	bcc.n	67a0 <__aeabi_ddiv+0x5c8>
    6812:	0011      	movs	r1, r2
    6814:	e762      	b.n	66dc <__aeabi_ddiv+0x504>
    6816:	2500      	movs	r5, #0
    6818:	e7d8      	b.n	67cc <__aeabi_ddiv+0x5f4>
    681a:	2280      	movs	r2, #128	; 0x80
    681c:	465b      	mov	r3, fp
    681e:	0312      	lsls	r2, r2, #12
    6820:	431a      	orrs	r2, r3
    6822:	9b01      	ldr	r3, [sp, #4]
    6824:	0312      	lsls	r2, r2, #12
    6826:	0b12      	lsrs	r2, r2, #12
    6828:	469c      	mov	ip, r3
    682a:	4688      	mov	r8, r1
    682c:	4c03      	ldr	r4, [pc, #12]	; (683c <__aeabi_ddiv+0x664>)
    682e:	e5a1      	b.n	6374 <__aeabi_ddiv+0x19c>
    6830:	000003ff 	.word	0x000003ff
    6834:	feffffff 	.word	0xfeffffff
    6838:	000007fe 	.word	0x000007fe
    683c:	000007ff 	.word	0x000007ff

00006840 <__eqdf2>:
    6840:	b5f0      	push	{r4, r5, r6, r7, lr}
    6842:	464f      	mov	r7, r9
    6844:	4646      	mov	r6, r8
    6846:	46d6      	mov	lr, sl
    6848:	005c      	lsls	r4, r3, #1
    684a:	b5c0      	push	{r6, r7, lr}
    684c:	031f      	lsls	r7, r3, #12
    684e:	0fdb      	lsrs	r3, r3, #31
    6850:	469a      	mov	sl, r3
    6852:	4b17      	ldr	r3, [pc, #92]	; (68b0 <__eqdf2+0x70>)
    6854:	030e      	lsls	r6, r1, #12
    6856:	004d      	lsls	r5, r1, #1
    6858:	4684      	mov	ip, r0
    685a:	4680      	mov	r8, r0
    685c:	0b36      	lsrs	r6, r6, #12
    685e:	0d6d      	lsrs	r5, r5, #21
    6860:	0fc9      	lsrs	r1, r1, #31
    6862:	4691      	mov	r9, r2
    6864:	0b3f      	lsrs	r7, r7, #12
    6866:	0d64      	lsrs	r4, r4, #21
    6868:	2001      	movs	r0, #1
    686a:	429d      	cmp	r5, r3
    686c:	d008      	beq.n	6880 <__eqdf2+0x40>
    686e:	429c      	cmp	r4, r3
    6870:	d001      	beq.n	6876 <__eqdf2+0x36>
    6872:	42a5      	cmp	r5, r4
    6874:	d00b      	beq.n	688e <__eqdf2+0x4e>
    6876:	bc1c      	pop	{r2, r3, r4}
    6878:	4690      	mov	r8, r2
    687a:	4699      	mov	r9, r3
    687c:	46a2      	mov	sl, r4
    687e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6880:	4663      	mov	r3, ip
    6882:	4333      	orrs	r3, r6
    6884:	d1f7      	bne.n	6876 <__eqdf2+0x36>
    6886:	42ac      	cmp	r4, r5
    6888:	d1f5      	bne.n	6876 <__eqdf2+0x36>
    688a:	433a      	orrs	r2, r7
    688c:	d1f3      	bne.n	6876 <__eqdf2+0x36>
    688e:	2001      	movs	r0, #1
    6890:	42be      	cmp	r6, r7
    6892:	d1f0      	bne.n	6876 <__eqdf2+0x36>
    6894:	45c8      	cmp	r8, r9
    6896:	d1ee      	bne.n	6876 <__eqdf2+0x36>
    6898:	4551      	cmp	r1, sl
    689a:	d007      	beq.n	68ac <__eqdf2+0x6c>
    689c:	2d00      	cmp	r5, #0
    689e:	d1ea      	bne.n	6876 <__eqdf2+0x36>
    68a0:	4663      	mov	r3, ip
    68a2:	431e      	orrs	r6, r3
    68a4:	0030      	movs	r0, r6
    68a6:	1e46      	subs	r6, r0, #1
    68a8:	41b0      	sbcs	r0, r6
    68aa:	e7e4      	b.n	6876 <__eqdf2+0x36>
    68ac:	2000      	movs	r0, #0
    68ae:	e7e2      	b.n	6876 <__eqdf2+0x36>
    68b0:	000007ff 	.word	0x000007ff

000068b4 <__gedf2>:
    68b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    68b6:	4645      	mov	r5, r8
    68b8:	46de      	mov	lr, fp
    68ba:	4657      	mov	r7, sl
    68bc:	464e      	mov	r6, r9
    68be:	b5e0      	push	{r5, r6, r7, lr}
    68c0:	031f      	lsls	r7, r3, #12
    68c2:	0b3d      	lsrs	r5, r7, #12
    68c4:	4f2c      	ldr	r7, [pc, #176]	; (6978 <__gedf2+0xc4>)
    68c6:	030e      	lsls	r6, r1, #12
    68c8:	004c      	lsls	r4, r1, #1
    68ca:	46ab      	mov	fp, r5
    68cc:	005d      	lsls	r5, r3, #1
    68ce:	4684      	mov	ip, r0
    68d0:	0b36      	lsrs	r6, r6, #12
    68d2:	0d64      	lsrs	r4, r4, #21
    68d4:	0fc9      	lsrs	r1, r1, #31
    68d6:	4690      	mov	r8, r2
    68d8:	0d6d      	lsrs	r5, r5, #21
    68da:	0fdb      	lsrs	r3, r3, #31
    68dc:	42bc      	cmp	r4, r7
    68de:	d02a      	beq.n	6936 <__gedf2+0x82>
    68e0:	4f25      	ldr	r7, [pc, #148]	; (6978 <__gedf2+0xc4>)
    68e2:	42bd      	cmp	r5, r7
    68e4:	d02d      	beq.n	6942 <__gedf2+0x8e>
    68e6:	2c00      	cmp	r4, #0
    68e8:	d10f      	bne.n	690a <__gedf2+0x56>
    68ea:	4330      	orrs	r0, r6
    68ec:	0007      	movs	r7, r0
    68ee:	4681      	mov	r9, r0
    68f0:	4278      	negs	r0, r7
    68f2:	4178      	adcs	r0, r7
    68f4:	b2c0      	uxtb	r0, r0
    68f6:	2d00      	cmp	r5, #0
    68f8:	d117      	bne.n	692a <__gedf2+0x76>
    68fa:	465f      	mov	r7, fp
    68fc:	433a      	orrs	r2, r7
    68fe:	d114      	bne.n	692a <__gedf2+0x76>
    6900:	464b      	mov	r3, r9
    6902:	2000      	movs	r0, #0
    6904:	2b00      	cmp	r3, #0
    6906:	d00a      	beq.n	691e <__gedf2+0x6a>
    6908:	e006      	b.n	6918 <__gedf2+0x64>
    690a:	2d00      	cmp	r5, #0
    690c:	d102      	bne.n	6914 <__gedf2+0x60>
    690e:	4658      	mov	r0, fp
    6910:	4302      	orrs	r2, r0
    6912:	d001      	beq.n	6918 <__gedf2+0x64>
    6914:	4299      	cmp	r1, r3
    6916:	d018      	beq.n	694a <__gedf2+0x96>
    6918:	4248      	negs	r0, r1
    691a:	2101      	movs	r1, #1
    691c:	4308      	orrs	r0, r1
    691e:	bc3c      	pop	{r2, r3, r4, r5}
    6920:	4690      	mov	r8, r2
    6922:	4699      	mov	r9, r3
    6924:	46a2      	mov	sl, r4
    6926:	46ab      	mov	fp, r5
    6928:	bdf0      	pop	{r4, r5, r6, r7, pc}
    692a:	2800      	cmp	r0, #0
    692c:	d0f2      	beq.n	6914 <__gedf2+0x60>
    692e:	2001      	movs	r0, #1
    6930:	3b01      	subs	r3, #1
    6932:	4318      	orrs	r0, r3
    6934:	e7f3      	b.n	691e <__gedf2+0x6a>
    6936:	0037      	movs	r7, r6
    6938:	4307      	orrs	r7, r0
    693a:	d0d1      	beq.n	68e0 <__gedf2+0x2c>
    693c:	2002      	movs	r0, #2
    693e:	4240      	negs	r0, r0
    6940:	e7ed      	b.n	691e <__gedf2+0x6a>
    6942:	465f      	mov	r7, fp
    6944:	4317      	orrs	r7, r2
    6946:	d0ce      	beq.n	68e6 <__gedf2+0x32>
    6948:	e7f8      	b.n	693c <__gedf2+0x88>
    694a:	42ac      	cmp	r4, r5
    694c:	dce4      	bgt.n	6918 <__gedf2+0x64>
    694e:	da03      	bge.n	6958 <__gedf2+0xa4>
    6950:	1e48      	subs	r0, r1, #1
    6952:	2101      	movs	r1, #1
    6954:	4308      	orrs	r0, r1
    6956:	e7e2      	b.n	691e <__gedf2+0x6a>
    6958:	455e      	cmp	r6, fp
    695a:	d8dd      	bhi.n	6918 <__gedf2+0x64>
    695c:	d006      	beq.n	696c <__gedf2+0xb8>
    695e:	2000      	movs	r0, #0
    6960:	455e      	cmp	r6, fp
    6962:	d2dc      	bcs.n	691e <__gedf2+0x6a>
    6964:	2301      	movs	r3, #1
    6966:	1e48      	subs	r0, r1, #1
    6968:	4318      	orrs	r0, r3
    696a:	e7d8      	b.n	691e <__gedf2+0x6a>
    696c:	45c4      	cmp	ip, r8
    696e:	d8d3      	bhi.n	6918 <__gedf2+0x64>
    6970:	2000      	movs	r0, #0
    6972:	45c4      	cmp	ip, r8
    6974:	d3f6      	bcc.n	6964 <__gedf2+0xb0>
    6976:	e7d2      	b.n	691e <__gedf2+0x6a>
    6978:	000007ff 	.word	0x000007ff

0000697c <__ledf2>:
    697c:	b5f0      	push	{r4, r5, r6, r7, lr}
    697e:	464e      	mov	r6, r9
    6980:	4645      	mov	r5, r8
    6982:	46de      	mov	lr, fp
    6984:	4657      	mov	r7, sl
    6986:	005c      	lsls	r4, r3, #1
    6988:	b5e0      	push	{r5, r6, r7, lr}
    698a:	031f      	lsls	r7, r3, #12
    698c:	0fdb      	lsrs	r3, r3, #31
    698e:	4699      	mov	r9, r3
    6990:	4b2a      	ldr	r3, [pc, #168]	; (6a3c <__ledf2+0xc0>)
    6992:	030e      	lsls	r6, r1, #12
    6994:	004d      	lsls	r5, r1, #1
    6996:	0fc9      	lsrs	r1, r1, #31
    6998:	4684      	mov	ip, r0
    699a:	0b36      	lsrs	r6, r6, #12
    699c:	0d6d      	lsrs	r5, r5, #21
    699e:	468b      	mov	fp, r1
    69a0:	4690      	mov	r8, r2
    69a2:	0b3f      	lsrs	r7, r7, #12
    69a4:	0d64      	lsrs	r4, r4, #21
    69a6:	429d      	cmp	r5, r3
    69a8:	d020      	beq.n	69ec <__ledf2+0x70>
    69aa:	4b24      	ldr	r3, [pc, #144]	; (6a3c <__ledf2+0xc0>)
    69ac:	429c      	cmp	r4, r3
    69ae:	d022      	beq.n	69f6 <__ledf2+0x7a>
    69b0:	2d00      	cmp	r5, #0
    69b2:	d112      	bne.n	69da <__ledf2+0x5e>
    69b4:	4330      	orrs	r0, r6
    69b6:	4243      	negs	r3, r0
    69b8:	4143      	adcs	r3, r0
    69ba:	b2db      	uxtb	r3, r3
    69bc:	2c00      	cmp	r4, #0
    69be:	d01f      	beq.n	6a00 <__ledf2+0x84>
    69c0:	2b00      	cmp	r3, #0
    69c2:	d00c      	beq.n	69de <__ledf2+0x62>
    69c4:	464b      	mov	r3, r9
    69c6:	2001      	movs	r0, #1
    69c8:	3b01      	subs	r3, #1
    69ca:	4303      	orrs	r3, r0
    69cc:	0018      	movs	r0, r3
    69ce:	bc3c      	pop	{r2, r3, r4, r5}
    69d0:	4690      	mov	r8, r2
    69d2:	4699      	mov	r9, r3
    69d4:	46a2      	mov	sl, r4
    69d6:	46ab      	mov	fp, r5
    69d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    69da:	2c00      	cmp	r4, #0
    69dc:	d016      	beq.n	6a0c <__ledf2+0x90>
    69de:	45cb      	cmp	fp, r9
    69e0:	d017      	beq.n	6a12 <__ledf2+0x96>
    69e2:	465b      	mov	r3, fp
    69e4:	4259      	negs	r1, r3
    69e6:	2301      	movs	r3, #1
    69e8:	430b      	orrs	r3, r1
    69ea:	e7ef      	b.n	69cc <__ledf2+0x50>
    69ec:	0031      	movs	r1, r6
    69ee:	2302      	movs	r3, #2
    69f0:	4301      	orrs	r1, r0
    69f2:	d1eb      	bne.n	69cc <__ledf2+0x50>
    69f4:	e7d9      	b.n	69aa <__ledf2+0x2e>
    69f6:	0039      	movs	r1, r7
    69f8:	2302      	movs	r3, #2
    69fa:	4311      	orrs	r1, r2
    69fc:	d1e6      	bne.n	69cc <__ledf2+0x50>
    69fe:	e7d7      	b.n	69b0 <__ledf2+0x34>
    6a00:	433a      	orrs	r2, r7
    6a02:	d1dd      	bne.n	69c0 <__ledf2+0x44>
    6a04:	2300      	movs	r3, #0
    6a06:	2800      	cmp	r0, #0
    6a08:	d0e0      	beq.n	69cc <__ledf2+0x50>
    6a0a:	e7ea      	b.n	69e2 <__ledf2+0x66>
    6a0c:	433a      	orrs	r2, r7
    6a0e:	d1e6      	bne.n	69de <__ledf2+0x62>
    6a10:	e7e7      	b.n	69e2 <__ledf2+0x66>
    6a12:	42a5      	cmp	r5, r4
    6a14:	dce5      	bgt.n	69e2 <__ledf2+0x66>
    6a16:	db05      	blt.n	6a24 <__ledf2+0xa8>
    6a18:	42be      	cmp	r6, r7
    6a1a:	d8e2      	bhi.n	69e2 <__ledf2+0x66>
    6a1c:	d007      	beq.n	6a2e <__ledf2+0xb2>
    6a1e:	2300      	movs	r3, #0
    6a20:	42be      	cmp	r6, r7
    6a22:	d2d3      	bcs.n	69cc <__ledf2+0x50>
    6a24:	4659      	mov	r1, fp
    6a26:	2301      	movs	r3, #1
    6a28:	3901      	subs	r1, #1
    6a2a:	430b      	orrs	r3, r1
    6a2c:	e7ce      	b.n	69cc <__ledf2+0x50>
    6a2e:	45c4      	cmp	ip, r8
    6a30:	d8d7      	bhi.n	69e2 <__ledf2+0x66>
    6a32:	2300      	movs	r3, #0
    6a34:	45c4      	cmp	ip, r8
    6a36:	d3f5      	bcc.n	6a24 <__ledf2+0xa8>
    6a38:	e7c8      	b.n	69cc <__ledf2+0x50>
    6a3a:	46c0      	nop			; (mov r8, r8)
    6a3c:	000007ff 	.word	0x000007ff

00006a40 <__aeabi_dmul>:
    6a40:	b5f0      	push	{r4, r5, r6, r7, lr}
    6a42:	4657      	mov	r7, sl
    6a44:	4645      	mov	r5, r8
    6a46:	46de      	mov	lr, fp
    6a48:	464e      	mov	r6, r9
    6a4a:	b5e0      	push	{r5, r6, r7, lr}
    6a4c:	030c      	lsls	r4, r1, #12
    6a4e:	4698      	mov	r8, r3
    6a50:	004e      	lsls	r6, r1, #1
    6a52:	0b23      	lsrs	r3, r4, #12
    6a54:	b087      	sub	sp, #28
    6a56:	0007      	movs	r7, r0
    6a58:	4692      	mov	sl, r2
    6a5a:	469b      	mov	fp, r3
    6a5c:	0d76      	lsrs	r6, r6, #21
    6a5e:	0fcd      	lsrs	r5, r1, #31
    6a60:	2e00      	cmp	r6, #0
    6a62:	d06b      	beq.n	6b3c <__aeabi_dmul+0xfc>
    6a64:	4b6d      	ldr	r3, [pc, #436]	; (6c1c <__aeabi_dmul+0x1dc>)
    6a66:	429e      	cmp	r6, r3
    6a68:	d035      	beq.n	6ad6 <__aeabi_dmul+0x96>
    6a6a:	2480      	movs	r4, #128	; 0x80
    6a6c:	465b      	mov	r3, fp
    6a6e:	0f42      	lsrs	r2, r0, #29
    6a70:	0424      	lsls	r4, r4, #16
    6a72:	00db      	lsls	r3, r3, #3
    6a74:	4314      	orrs	r4, r2
    6a76:	431c      	orrs	r4, r3
    6a78:	00c3      	lsls	r3, r0, #3
    6a7a:	4699      	mov	r9, r3
    6a7c:	4b68      	ldr	r3, [pc, #416]	; (6c20 <__aeabi_dmul+0x1e0>)
    6a7e:	46a3      	mov	fp, r4
    6a80:	469c      	mov	ip, r3
    6a82:	2300      	movs	r3, #0
    6a84:	2700      	movs	r7, #0
    6a86:	4466      	add	r6, ip
    6a88:	9302      	str	r3, [sp, #8]
    6a8a:	4643      	mov	r3, r8
    6a8c:	031c      	lsls	r4, r3, #12
    6a8e:	005a      	lsls	r2, r3, #1
    6a90:	0fdb      	lsrs	r3, r3, #31
    6a92:	4650      	mov	r0, sl
    6a94:	0b24      	lsrs	r4, r4, #12
    6a96:	0d52      	lsrs	r2, r2, #21
    6a98:	4698      	mov	r8, r3
    6a9a:	d100      	bne.n	6a9e <__aeabi_dmul+0x5e>
    6a9c:	e076      	b.n	6b8c <__aeabi_dmul+0x14c>
    6a9e:	4b5f      	ldr	r3, [pc, #380]	; (6c1c <__aeabi_dmul+0x1dc>)
    6aa0:	429a      	cmp	r2, r3
    6aa2:	d06d      	beq.n	6b80 <__aeabi_dmul+0x140>
    6aa4:	2380      	movs	r3, #128	; 0x80
    6aa6:	0f41      	lsrs	r1, r0, #29
    6aa8:	041b      	lsls	r3, r3, #16
    6aaa:	430b      	orrs	r3, r1
    6aac:	495c      	ldr	r1, [pc, #368]	; (6c20 <__aeabi_dmul+0x1e0>)
    6aae:	00e4      	lsls	r4, r4, #3
    6ab0:	468c      	mov	ip, r1
    6ab2:	431c      	orrs	r4, r3
    6ab4:	00c3      	lsls	r3, r0, #3
    6ab6:	2000      	movs	r0, #0
    6ab8:	4462      	add	r2, ip
    6aba:	4641      	mov	r1, r8
    6abc:	18b6      	adds	r6, r6, r2
    6abe:	4069      	eors	r1, r5
    6ac0:	1c72      	adds	r2, r6, #1
    6ac2:	9101      	str	r1, [sp, #4]
    6ac4:	4694      	mov	ip, r2
    6ac6:	4307      	orrs	r7, r0
    6ac8:	2f0f      	cmp	r7, #15
    6aca:	d900      	bls.n	6ace <__aeabi_dmul+0x8e>
    6acc:	e0b0      	b.n	6c30 <__aeabi_dmul+0x1f0>
    6ace:	4a55      	ldr	r2, [pc, #340]	; (6c24 <__aeabi_dmul+0x1e4>)
    6ad0:	00bf      	lsls	r7, r7, #2
    6ad2:	59d2      	ldr	r2, [r2, r7]
    6ad4:	4697      	mov	pc, r2
    6ad6:	465b      	mov	r3, fp
    6ad8:	4303      	orrs	r3, r0
    6ada:	4699      	mov	r9, r3
    6adc:	d000      	beq.n	6ae0 <__aeabi_dmul+0xa0>
    6ade:	e087      	b.n	6bf0 <__aeabi_dmul+0x1b0>
    6ae0:	2300      	movs	r3, #0
    6ae2:	469b      	mov	fp, r3
    6ae4:	3302      	adds	r3, #2
    6ae6:	2708      	movs	r7, #8
    6ae8:	9302      	str	r3, [sp, #8]
    6aea:	e7ce      	b.n	6a8a <__aeabi_dmul+0x4a>
    6aec:	4642      	mov	r2, r8
    6aee:	9201      	str	r2, [sp, #4]
    6af0:	2802      	cmp	r0, #2
    6af2:	d067      	beq.n	6bc4 <__aeabi_dmul+0x184>
    6af4:	2803      	cmp	r0, #3
    6af6:	d100      	bne.n	6afa <__aeabi_dmul+0xba>
    6af8:	e20e      	b.n	6f18 <__aeabi_dmul+0x4d8>
    6afa:	2801      	cmp	r0, #1
    6afc:	d000      	beq.n	6b00 <__aeabi_dmul+0xc0>
    6afe:	e162      	b.n	6dc6 <__aeabi_dmul+0x386>
    6b00:	2300      	movs	r3, #0
    6b02:	2400      	movs	r4, #0
    6b04:	2200      	movs	r2, #0
    6b06:	4699      	mov	r9, r3
    6b08:	9901      	ldr	r1, [sp, #4]
    6b0a:	4001      	ands	r1, r0
    6b0c:	b2cd      	uxtb	r5, r1
    6b0e:	2100      	movs	r1, #0
    6b10:	0312      	lsls	r2, r2, #12
    6b12:	0d0b      	lsrs	r3, r1, #20
    6b14:	0b12      	lsrs	r2, r2, #12
    6b16:	051b      	lsls	r3, r3, #20
    6b18:	4313      	orrs	r3, r2
    6b1a:	4a43      	ldr	r2, [pc, #268]	; (6c28 <__aeabi_dmul+0x1e8>)
    6b1c:	0524      	lsls	r4, r4, #20
    6b1e:	4013      	ands	r3, r2
    6b20:	431c      	orrs	r4, r3
    6b22:	0064      	lsls	r4, r4, #1
    6b24:	07ed      	lsls	r5, r5, #31
    6b26:	0864      	lsrs	r4, r4, #1
    6b28:	432c      	orrs	r4, r5
    6b2a:	4648      	mov	r0, r9
    6b2c:	0021      	movs	r1, r4
    6b2e:	b007      	add	sp, #28
    6b30:	bc3c      	pop	{r2, r3, r4, r5}
    6b32:	4690      	mov	r8, r2
    6b34:	4699      	mov	r9, r3
    6b36:	46a2      	mov	sl, r4
    6b38:	46ab      	mov	fp, r5
    6b3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6b3c:	4303      	orrs	r3, r0
    6b3e:	4699      	mov	r9, r3
    6b40:	d04f      	beq.n	6be2 <__aeabi_dmul+0x1a2>
    6b42:	465b      	mov	r3, fp
    6b44:	2b00      	cmp	r3, #0
    6b46:	d100      	bne.n	6b4a <__aeabi_dmul+0x10a>
    6b48:	e189      	b.n	6e5e <__aeabi_dmul+0x41e>
    6b4a:	4658      	mov	r0, fp
    6b4c:	f000 fe84 	bl	7858 <__clzsi2>
    6b50:	0003      	movs	r3, r0
    6b52:	3b0b      	subs	r3, #11
    6b54:	2b1c      	cmp	r3, #28
    6b56:	dd00      	ble.n	6b5a <__aeabi_dmul+0x11a>
    6b58:	e17a      	b.n	6e50 <__aeabi_dmul+0x410>
    6b5a:	221d      	movs	r2, #29
    6b5c:	1ad3      	subs	r3, r2, r3
    6b5e:	003a      	movs	r2, r7
    6b60:	0001      	movs	r1, r0
    6b62:	465c      	mov	r4, fp
    6b64:	40da      	lsrs	r2, r3
    6b66:	3908      	subs	r1, #8
    6b68:	408c      	lsls	r4, r1
    6b6a:	0013      	movs	r3, r2
    6b6c:	408f      	lsls	r7, r1
    6b6e:	4323      	orrs	r3, r4
    6b70:	469b      	mov	fp, r3
    6b72:	46b9      	mov	r9, r7
    6b74:	2300      	movs	r3, #0
    6b76:	4e2d      	ldr	r6, [pc, #180]	; (6c2c <__aeabi_dmul+0x1ec>)
    6b78:	2700      	movs	r7, #0
    6b7a:	1a36      	subs	r6, r6, r0
    6b7c:	9302      	str	r3, [sp, #8]
    6b7e:	e784      	b.n	6a8a <__aeabi_dmul+0x4a>
    6b80:	4653      	mov	r3, sl
    6b82:	4323      	orrs	r3, r4
    6b84:	d12a      	bne.n	6bdc <__aeabi_dmul+0x19c>
    6b86:	2400      	movs	r4, #0
    6b88:	2002      	movs	r0, #2
    6b8a:	e796      	b.n	6aba <__aeabi_dmul+0x7a>
    6b8c:	4653      	mov	r3, sl
    6b8e:	4323      	orrs	r3, r4
    6b90:	d020      	beq.n	6bd4 <__aeabi_dmul+0x194>
    6b92:	2c00      	cmp	r4, #0
    6b94:	d100      	bne.n	6b98 <__aeabi_dmul+0x158>
    6b96:	e157      	b.n	6e48 <__aeabi_dmul+0x408>
    6b98:	0020      	movs	r0, r4
    6b9a:	f000 fe5d 	bl	7858 <__clzsi2>
    6b9e:	0003      	movs	r3, r0
    6ba0:	3b0b      	subs	r3, #11
    6ba2:	2b1c      	cmp	r3, #28
    6ba4:	dd00      	ble.n	6ba8 <__aeabi_dmul+0x168>
    6ba6:	e149      	b.n	6e3c <__aeabi_dmul+0x3fc>
    6ba8:	211d      	movs	r1, #29
    6baa:	1acb      	subs	r3, r1, r3
    6bac:	4651      	mov	r1, sl
    6bae:	0002      	movs	r2, r0
    6bb0:	40d9      	lsrs	r1, r3
    6bb2:	4653      	mov	r3, sl
    6bb4:	3a08      	subs	r2, #8
    6bb6:	4094      	lsls	r4, r2
    6bb8:	4093      	lsls	r3, r2
    6bba:	430c      	orrs	r4, r1
    6bbc:	4a1b      	ldr	r2, [pc, #108]	; (6c2c <__aeabi_dmul+0x1ec>)
    6bbe:	1a12      	subs	r2, r2, r0
    6bc0:	2000      	movs	r0, #0
    6bc2:	e77a      	b.n	6aba <__aeabi_dmul+0x7a>
    6bc4:	2501      	movs	r5, #1
    6bc6:	9b01      	ldr	r3, [sp, #4]
    6bc8:	4c14      	ldr	r4, [pc, #80]	; (6c1c <__aeabi_dmul+0x1dc>)
    6bca:	401d      	ands	r5, r3
    6bcc:	2300      	movs	r3, #0
    6bce:	2200      	movs	r2, #0
    6bd0:	4699      	mov	r9, r3
    6bd2:	e79c      	b.n	6b0e <__aeabi_dmul+0xce>
    6bd4:	2400      	movs	r4, #0
    6bd6:	2200      	movs	r2, #0
    6bd8:	2001      	movs	r0, #1
    6bda:	e76e      	b.n	6aba <__aeabi_dmul+0x7a>
    6bdc:	4653      	mov	r3, sl
    6bde:	2003      	movs	r0, #3
    6be0:	e76b      	b.n	6aba <__aeabi_dmul+0x7a>
    6be2:	2300      	movs	r3, #0
    6be4:	469b      	mov	fp, r3
    6be6:	3301      	adds	r3, #1
    6be8:	2704      	movs	r7, #4
    6bea:	2600      	movs	r6, #0
    6bec:	9302      	str	r3, [sp, #8]
    6bee:	e74c      	b.n	6a8a <__aeabi_dmul+0x4a>
    6bf0:	2303      	movs	r3, #3
    6bf2:	4681      	mov	r9, r0
    6bf4:	270c      	movs	r7, #12
    6bf6:	9302      	str	r3, [sp, #8]
    6bf8:	e747      	b.n	6a8a <__aeabi_dmul+0x4a>
    6bfa:	2280      	movs	r2, #128	; 0x80
    6bfc:	2300      	movs	r3, #0
    6bfe:	2500      	movs	r5, #0
    6c00:	0312      	lsls	r2, r2, #12
    6c02:	4699      	mov	r9, r3
    6c04:	4c05      	ldr	r4, [pc, #20]	; (6c1c <__aeabi_dmul+0x1dc>)
    6c06:	e782      	b.n	6b0e <__aeabi_dmul+0xce>
    6c08:	465c      	mov	r4, fp
    6c0a:	464b      	mov	r3, r9
    6c0c:	9802      	ldr	r0, [sp, #8]
    6c0e:	e76f      	b.n	6af0 <__aeabi_dmul+0xb0>
    6c10:	465c      	mov	r4, fp
    6c12:	464b      	mov	r3, r9
    6c14:	9501      	str	r5, [sp, #4]
    6c16:	9802      	ldr	r0, [sp, #8]
    6c18:	e76a      	b.n	6af0 <__aeabi_dmul+0xb0>
    6c1a:	46c0      	nop			; (mov r8, r8)
    6c1c:	000007ff 	.word	0x000007ff
    6c20:	fffffc01 	.word	0xfffffc01
    6c24:	00008278 	.word	0x00008278
    6c28:	800fffff 	.word	0x800fffff
    6c2c:	fffffc0d 	.word	0xfffffc0d
    6c30:	464a      	mov	r2, r9
    6c32:	4649      	mov	r1, r9
    6c34:	0c17      	lsrs	r7, r2, #16
    6c36:	0c1a      	lsrs	r2, r3, #16
    6c38:	041b      	lsls	r3, r3, #16
    6c3a:	0c1b      	lsrs	r3, r3, #16
    6c3c:	0408      	lsls	r0, r1, #16
    6c3e:	0019      	movs	r1, r3
    6c40:	0c00      	lsrs	r0, r0, #16
    6c42:	4341      	muls	r1, r0
    6c44:	0015      	movs	r5, r2
    6c46:	4688      	mov	r8, r1
    6c48:	0019      	movs	r1, r3
    6c4a:	437d      	muls	r5, r7
    6c4c:	4379      	muls	r1, r7
    6c4e:	9503      	str	r5, [sp, #12]
    6c50:	4689      	mov	r9, r1
    6c52:	0029      	movs	r1, r5
    6c54:	0015      	movs	r5, r2
    6c56:	4345      	muls	r5, r0
    6c58:	444d      	add	r5, r9
    6c5a:	9502      	str	r5, [sp, #8]
    6c5c:	4645      	mov	r5, r8
    6c5e:	0c2d      	lsrs	r5, r5, #16
    6c60:	46aa      	mov	sl, r5
    6c62:	9d02      	ldr	r5, [sp, #8]
    6c64:	4455      	add	r5, sl
    6c66:	45a9      	cmp	r9, r5
    6c68:	d906      	bls.n	6c78 <__aeabi_dmul+0x238>
    6c6a:	468a      	mov	sl, r1
    6c6c:	2180      	movs	r1, #128	; 0x80
    6c6e:	0249      	lsls	r1, r1, #9
    6c70:	4689      	mov	r9, r1
    6c72:	44ca      	add	sl, r9
    6c74:	4651      	mov	r1, sl
    6c76:	9103      	str	r1, [sp, #12]
    6c78:	0c29      	lsrs	r1, r5, #16
    6c7a:	9104      	str	r1, [sp, #16]
    6c7c:	4641      	mov	r1, r8
    6c7e:	0409      	lsls	r1, r1, #16
    6c80:	042d      	lsls	r5, r5, #16
    6c82:	0c09      	lsrs	r1, r1, #16
    6c84:	4688      	mov	r8, r1
    6c86:	0029      	movs	r1, r5
    6c88:	0c25      	lsrs	r5, r4, #16
    6c8a:	0424      	lsls	r4, r4, #16
    6c8c:	4441      	add	r1, r8
    6c8e:	0c24      	lsrs	r4, r4, #16
    6c90:	9105      	str	r1, [sp, #20]
    6c92:	0021      	movs	r1, r4
    6c94:	4341      	muls	r1, r0
    6c96:	4688      	mov	r8, r1
    6c98:	0021      	movs	r1, r4
    6c9a:	4379      	muls	r1, r7
    6c9c:	468a      	mov	sl, r1
    6c9e:	4368      	muls	r0, r5
    6ca0:	4641      	mov	r1, r8
    6ca2:	4450      	add	r0, sl
    6ca4:	4681      	mov	r9, r0
    6ca6:	0c08      	lsrs	r0, r1, #16
    6ca8:	4448      	add	r0, r9
    6caa:	436f      	muls	r7, r5
    6cac:	4582      	cmp	sl, r0
    6cae:	d903      	bls.n	6cb8 <__aeabi_dmul+0x278>
    6cb0:	2180      	movs	r1, #128	; 0x80
    6cb2:	0249      	lsls	r1, r1, #9
    6cb4:	4689      	mov	r9, r1
    6cb6:	444f      	add	r7, r9
    6cb8:	0c01      	lsrs	r1, r0, #16
    6cba:	4689      	mov	r9, r1
    6cbc:	0039      	movs	r1, r7
    6cbe:	4449      	add	r1, r9
    6cc0:	9102      	str	r1, [sp, #8]
    6cc2:	4641      	mov	r1, r8
    6cc4:	040f      	lsls	r7, r1, #16
    6cc6:	9904      	ldr	r1, [sp, #16]
    6cc8:	0c3f      	lsrs	r7, r7, #16
    6cca:	4688      	mov	r8, r1
    6ccc:	0400      	lsls	r0, r0, #16
    6cce:	19c0      	adds	r0, r0, r7
    6cd0:	4480      	add	r8, r0
    6cd2:	4641      	mov	r1, r8
    6cd4:	9104      	str	r1, [sp, #16]
    6cd6:	4659      	mov	r1, fp
    6cd8:	0c0f      	lsrs	r7, r1, #16
    6cda:	0409      	lsls	r1, r1, #16
    6cdc:	0c09      	lsrs	r1, r1, #16
    6cde:	4688      	mov	r8, r1
    6ce0:	4359      	muls	r1, r3
    6ce2:	468a      	mov	sl, r1
    6ce4:	0039      	movs	r1, r7
    6ce6:	4351      	muls	r1, r2
    6ce8:	4689      	mov	r9, r1
    6cea:	4641      	mov	r1, r8
    6cec:	434a      	muls	r2, r1
    6cee:	4651      	mov	r1, sl
    6cf0:	0c09      	lsrs	r1, r1, #16
    6cf2:	468b      	mov	fp, r1
    6cf4:	437b      	muls	r3, r7
    6cf6:	18d2      	adds	r2, r2, r3
    6cf8:	445a      	add	r2, fp
    6cfa:	4293      	cmp	r3, r2
    6cfc:	d903      	bls.n	6d06 <__aeabi_dmul+0x2c6>
    6cfe:	2380      	movs	r3, #128	; 0x80
    6d00:	025b      	lsls	r3, r3, #9
    6d02:	469b      	mov	fp, r3
    6d04:	44d9      	add	r9, fp
    6d06:	4651      	mov	r1, sl
    6d08:	0409      	lsls	r1, r1, #16
    6d0a:	0c09      	lsrs	r1, r1, #16
    6d0c:	468a      	mov	sl, r1
    6d0e:	4641      	mov	r1, r8
    6d10:	4361      	muls	r1, r4
    6d12:	437c      	muls	r4, r7
    6d14:	0c13      	lsrs	r3, r2, #16
    6d16:	0412      	lsls	r2, r2, #16
    6d18:	444b      	add	r3, r9
    6d1a:	4452      	add	r2, sl
    6d1c:	46a1      	mov	r9, r4
    6d1e:	468a      	mov	sl, r1
    6d20:	003c      	movs	r4, r7
    6d22:	4641      	mov	r1, r8
    6d24:	436c      	muls	r4, r5
    6d26:	434d      	muls	r5, r1
    6d28:	4651      	mov	r1, sl
    6d2a:	444d      	add	r5, r9
    6d2c:	0c0f      	lsrs	r7, r1, #16
    6d2e:	197d      	adds	r5, r7, r5
    6d30:	45a9      	cmp	r9, r5
    6d32:	d903      	bls.n	6d3c <__aeabi_dmul+0x2fc>
    6d34:	2180      	movs	r1, #128	; 0x80
    6d36:	0249      	lsls	r1, r1, #9
    6d38:	4688      	mov	r8, r1
    6d3a:	4444      	add	r4, r8
    6d3c:	9f04      	ldr	r7, [sp, #16]
    6d3e:	9903      	ldr	r1, [sp, #12]
    6d40:	46b8      	mov	r8, r7
    6d42:	4441      	add	r1, r8
    6d44:	468b      	mov	fp, r1
    6d46:	4583      	cmp	fp, r0
    6d48:	4180      	sbcs	r0, r0
    6d4a:	4241      	negs	r1, r0
    6d4c:	4688      	mov	r8, r1
    6d4e:	4651      	mov	r1, sl
    6d50:	0408      	lsls	r0, r1, #16
    6d52:	042f      	lsls	r7, r5, #16
    6d54:	0c00      	lsrs	r0, r0, #16
    6d56:	183f      	adds	r7, r7, r0
    6d58:	4658      	mov	r0, fp
    6d5a:	9902      	ldr	r1, [sp, #8]
    6d5c:	1810      	adds	r0, r2, r0
    6d5e:	4689      	mov	r9, r1
    6d60:	4290      	cmp	r0, r2
    6d62:	4192      	sbcs	r2, r2
    6d64:	444f      	add	r7, r9
    6d66:	46ba      	mov	sl, r7
    6d68:	4252      	negs	r2, r2
    6d6a:	4699      	mov	r9, r3
    6d6c:	4693      	mov	fp, r2
    6d6e:	44c2      	add	sl, r8
    6d70:	44d1      	add	r9, sl
    6d72:	44cb      	add	fp, r9
    6d74:	428f      	cmp	r7, r1
    6d76:	41bf      	sbcs	r7, r7
    6d78:	45c2      	cmp	sl, r8
    6d7a:	4189      	sbcs	r1, r1
    6d7c:	4599      	cmp	r9, r3
    6d7e:	419b      	sbcs	r3, r3
    6d80:	4593      	cmp	fp, r2
    6d82:	4192      	sbcs	r2, r2
    6d84:	427f      	negs	r7, r7
    6d86:	4249      	negs	r1, r1
    6d88:	0c2d      	lsrs	r5, r5, #16
    6d8a:	4252      	negs	r2, r2
    6d8c:	430f      	orrs	r7, r1
    6d8e:	425b      	negs	r3, r3
    6d90:	4313      	orrs	r3, r2
    6d92:	197f      	adds	r7, r7, r5
    6d94:	18ff      	adds	r7, r7, r3
    6d96:	465b      	mov	r3, fp
    6d98:	193c      	adds	r4, r7, r4
    6d9a:	0ddb      	lsrs	r3, r3, #23
    6d9c:	9a05      	ldr	r2, [sp, #20]
    6d9e:	0264      	lsls	r4, r4, #9
    6da0:	431c      	orrs	r4, r3
    6da2:	0243      	lsls	r3, r0, #9
    6da4:	4313      	orrs	r3, r2
    6da6:	1e5d      	subs	r5, r3, #1
    6da8:	41ab      	sbcs	r3, r5
    6daa:	465a      	mov	r2, fp
    6dac:	0dc0      	lsrs	r0, r0, #23
    6dae:	4303      	orrs	r3, r0
    6db0:	0252      	lsls	r2, r2, #9
    6db2:	4313      	orrs	r3, r2
    6db4:	01e2      	lsls	r2, r4, #7
    6db6:	d556      	bpl.n	6e66 <__aeabi_dmul+0x426>
    6db8:	2001      	movs	r0, #1
    6dba:	085a      	lsrs	r2, r3, #1
    6dbc:	4003      	ands	r3, r0
    6dbe:	4313      	orrs	r3, r2
    6dc0:	07e2      	lsls	r2, r4, #31
    6dc2:	4313      	orrs	r3, r2
    6dc4:	0864      	lsrs	r4, r4, #1
    6dc6:	485a      	ldr	r0, [pc, #360]	; (6f30 <__aeabi_dmul+0x4f0>)
    6dc8:	4460      	add	r0, ip
    6dca:	2800      	cmp	r0, #0
    6dcc:	dd4d      	ble.n	6e6a <__aeabi_dmul+0x42a>
    6dce:	075a      	lsls	r2, r3, #29
    6dd0:	d009      	beq.n	6de6 <__aeabi_dmul+0x3a6>
    6dd2:	220f      	movs	r2, #15
    6dd4:	401a      	ands	r2, r3
    6dd6:	2a04      	cmp	r2, #4
    6dd8:	d005      	beq.n	6de6 <__aeabi_dmul+0x3a6>
    6dda:	1d1a      	adds	r2, r3, #4
    6ddc:	429a      	cmp	r2, r3
    6dde:	419b      	sbcs	r3, r3
    6de0:	425b      	negs	r3, r3
    6de2:	18e4      	adds	r4, r4, r3
    6de4:	0013      	movs	r3, r2
    6de6:	01e2      	lsls	r2, r4, #7
    6de8:	d504      	bpl.n	6df4 <__aeabi_dmul+0x3b4>
    6dea:	2080      	movs	r0, #128	; 0x80
    6dec:	4a51      	ldr	r2, [pc, #324]	; (6f34 <__aeabi_dmul+0x4f4>)
    6dee:	00c0      	lsls	r0, r0, #3
    6df0:	4014      	ands	r4, r2
    6df2:	4460      	add	r0, ip
    6df4:	4a50      	ldr	r2, [pc, #320]	; (6f38 <__aeabi_dmul+0x4f8>)
    6df6:	4290      	cmp	r0, r2
    6df8:	dd00      	ble.n	6dfc <__aeabi_dmul+0x3bc>
    6dfa:	e6e3      	b.n	6bc4 <__aeabi_dmul+0x184>
    6dfc:	2501      	movs	r5, #1
    6dfe:	08db      	lsrs	r3, r3, #3
    6e00:	0762      	lsls	r2, r4, #29
    6e02:	431a      	orrs	r2, r3
    6e04:	0264      	lsls	r4, r4, #9
    6e06:	9b01      	ldr	r3, [sp, #4]
    6e08:	4691      	mov	r9, r2
    6e0a:	0b22      	lsrs	r2, r4, #12
    6e0c:	0544      	lsls	r4, r0, #21
    6e0e:	0d64      	lsrs	r4, r4, #21
    6e10:	401d      	ands	r5, r3
    6e12:	e67c      	b.n	6b0e <__aeabi_dmul+0xce>
    6e14:	2280      	movs	r2, #128	; 0x80
    6e16:	4659      	mov	r1, fp
    6e18:	0312      	lsls	r2, r2, #12
    6e1a:	4211      	tst	r1, r2
    6e1c:	d008      	beq.n	6e30 <__aeabi_dmul+0x3f0>
    6e1e:	4214      	tst	r4, r2
    6e20:	d106      	bne.n	6e30 <__aeabi_dmul+0x3f0>
    6e22:	4322      	orrs	r2, r4
    6e24:	0312      	lsls	r2, r2, #12
    6e26:	0b12      	lsrs	r2, r2, #12
    6e28:	4645      	mov	r5, r8
    6e2a:	4699      	mov	r9, r3
    6e2c:	4c43      	ldr	r4, [pc, #268]	; (6f3c <__aeabi_dmul+0x4fc>)
    6e2e:	e66e      	b.n	6b0e <__aeabi_dmul+0xce>
    6e30:	465b      	mov	r3, fp
    6e32:	431a      	orrs	r2, r3
    6e34:	0312      	lsls	r2, r2, #12
    6e36:	0b12      	lsrs	r2, r2, #12
    6e38:	4c40      	ldr	r4, [pc, #256]	; (6f3c <__aeabi_dmul+0x4fc>)
    6e3a:	e668      	b.n	6b0e <__aeabi_dmul+0xce>
    6e3c:	0003      	movs	r3, r0
    6e3e:	4654      	mov	r4, sl
    6e40:	3b28      	subs	r3, #40	; 0x28
    6e42:	409c      	lsls	r4, r3
    6e44:	2300      	movs	r3, #0
    6e46:	e6b9      	b.n	6bbc <__aeabi_dmul+0x17c>
    6e48:	f000 fd06 	bl	7858 <__clzsi2>
    6e4c:	3020      	adds	r0, #32
    6e4e:	e6a6      	b.n	6b9e <__aeabi_dmul+0x15e>
    6e50:	0003      	movs	r3, r0
    6e52:	3b28      	subs	r3, #40	; 0x28
    6e54:	409f      	lsls	r7, r3
    6e56:	2300      	movs	r3, #0
    6e58:	46bb      	mov	fp, r7
    6e5a:	4699      	mov	r9, r3
    6e5c:	e68a      	b.n	6b74 <__aeabi_dmul+0x134>
    6e5e:	f000 fcfb 	bl	7858 <__clzsi2>
    6e62:	3020      	adds	r0, #32
    6e64:	e674      	b.n	6b50 <__aeabi_dmul+0x110>
    6e66:	46b4      	mov	ip, r6
    6e68:	e7ad      	b.n	6dc6 <__aeabi_dmul+0x386>
    6e6a:	2501      	movs	r5, #1
    6e6c:	1a2a      	subs	r2, r5, r0
    6e6e:	2a38      	cmp	r2, #56	; 0x38
    6e70:	dd06      	ble.n	6e80 <__aeabi_dmul+0x440>
    6e72:	9b01      	ldr	r3, [sp, #4]
    6e74:	2400      	movs	r4, #0
    6e76:	401d      	ands	r5, r3
    6e78:	2300      	movs	r3, #0
    6e7a:	2200      	movs	r2, #0
    6e7c:	4699      	mov	r9, r3
    6e7e:	e646      	b.n	6b0e <__aeabi_dmul+0xce>
    6e80:	2a1f      	cmp	r2, #31
    6e82:	dc21      	bgt.n	6ec8 <__aeabi_dmul+0x488>
    6e84:	2520      	movs	r5, #32
    6e86:	0020      	movs	r0, r4
    6e88:	1aad      	subs	r5, r5, r2
    6e8a:	001e      	movs	r6, r3
    6e8c:	40ab      	lsls	r3, r5
    6e8e:	40a8      	lsls	r0, r5
    6e90:	40d6      	lsrs	r6, r2
    6e92:	1e5d      	subs	r5, r3, #1
    6e94:	41ab      	sbcs	r3, r5
    6e96:	4330      	orrs	r0, r6
    6e98:	4318      	orrs	r0, r3
    6e9a:	40d4      	lsrs	r4, r2
    6e9c:	0743      	lsls	r3, r0, #29
    6e9e:	d009      	beq.n	6eb4 <__aeabi_dmul+0x474>
    6ea0:	230f      	movs	r3, #15
    6ea2:	4003      	ands	r3, r0
    6ea4:	2b04      	cmp	r3, #4
    6ea6:	d005      	beq.n	6eb4 <__aeabi_dmul+0x474>
    6ea8:	0003      	movs	r3, r0
    6eaa:	1d18      	adds	r0, r3, #4
    6eac:	4298      	cmp	r0, r3
    6eae:	419b      	sbcs	r3, r3
    6eb0:	425b      	negs	r3, r3
    6eb2:	18e4      	adds	r4, r4, r3
    6eb4:	0223      	lsls	r3, r4, #8
    6eb6:	d521      	bpl.n	6efc <__aeabi_dmul+0x4bc>
    6eb8:	2501      	movs	r5, #1
    6eba:	9b01      	ldr	r3, [sp, #4]
    6ebc:	2401      	movs	r4, #1
    6ebe:	401d      	ands	r5, r3
    6ec0:	2300      	movs	r3, #0
    6ec2:	2200      	movs	r2, #0
    6ec4:	4699      	mov	r9, r3
    6ec6:	e622      	b.n	6b0e <__aeabi_dmul+0xce>
    6ec8:	251f      	movs	r5, #31
    6eca:	0021      	movs	r1, r4
    6ecc:	426d      	negs	r5, r5
    6ece:	1a28      	subs	r0, r5, r0
    6ed0:	40c1      	lsrs	r1, r0
    6ed2:	0008      	movs	r0, r1
    6ed4:	2a20      	cmp	r2, #32
    6ed6:	d01d      	beq.n	6f14 <__aeabi_dmul+0x4d4>
    6ed8:	355f      	adds	r5, #95	; 0x5f
    6eda:	1aaa      	subs	r2, r5, r2
    6edc:	4094      	lsls	r4, r2
    6ede:	4323      	orrs	r3, r4
    6ee0:	1e5c      	subs	r4, r3, #1
    6ee2:	41a3      	sbcs	r3, r4
    6ee4:	2507      	movs	r5, #7
    6ee6:	4303      	orrs	r3, r0
    6ee8:	401d      	ands	r5, r3
    6eea:	2200      	movs	r2, #0
    6eec:	2d00      	cmp	r5, #0
    6eee:	d009      	beq.n	6f04 <__aeabi_dmul+0x4c4>
    6ef0:	220f      	movs	r2, #15
    6ef2:	2400      	movs	r4, #0
    6ef4:	401a      	ands	r2, r3
    6ef6:	0018      	movs	r0, r3
    6ef8:	2a04      	cmp	r2, #4
    6efa:	d1d6      	bne.n	6eaa <__aeabi_dmul+0x46a>
    6efc:	0003      	movs	r3, r0
    6efe:	0765      	lsls	r5, r4, #29
    6f00:	0264      	lsls	r4, r4, #9
    6f02:	0b22      	lsrs	r2, r4, #12
    6f04:	08db      	lsrs	r3, r3, #3
    6f06:	432b      	orrs	r3, r5
    6f08:	2501      	movs	r5, #1
    6f0a:	4699      	mov	r9, r3
    6f0c:	9b01      	ldr	r3, [sp, #4]
    6f0e:	2400      	movs	r4, #0
    6f10:	401d      	ands	r5, r3
    6f12:	e5fc      	b.n	6b0e <__aeabi_dmul+0xce>
    6f14:	2400      	movs	r4, #0
    6f16:	e7e2      	b.n	6ede <__aeabi_dmul+0x49e>
    6f18:	2280      	movs	r2, #128	; 0x80
    6f1a:	2501      	movs	r5, #1
    6f1c:	0312      	lsls	r2, r2, #12
    6f1e:	4322      	orrs	r2, r4
    6f20:	9901      	ldr	r1, [sp, #4]
    6f22:	0312      	lsls	r2, r2, #12
    6f24:	0b12      	lsrs	r2, r2, #12
    6f26:	400d      	ands	r5, r1
    6f28:	4699      	mov	r9, r3
    6f2a:	4c04      	ldr	r4, [pc, #16]	; (6f3c <__aeabi_dmul+0x4fc>)
    6f2c:	e5ef      	b.n	6b0e <__aeabi_dmul+0xce>
    6f2e:	46c0      	nop			; (mov r8, r8)
    6f30:	000003ff 	.word	0x000003ff
    6f34:	feffffff 	.word	0xfeffffff
    6f38:	000007fe 	.word	0x000007fe
    6f3c:	000007ff 	.word	0x000007ff

00006f40 <__aeabi_dsub>:
    6f40:	b5f0      	push	{r4, r5, r6, r7, lr}
    6f42:	4646      	mov	r6, r8
    6f44:	46d6      	mov	lr, sl
    6f46:	464f      	mov	r7, r9
    6f48:	030c      	lsls	r4, r1, #12
    6f4a:	b5c0      	push	{r6, r7, lr}
    6f4c:	0fcd      	lsrs	r5, r1, #31
    6f4e:	004e      	lsls	r6, r1, #1
    6f50:	0a61      	lsrs	r1, r4, #9
    6f52:	0f44      	lsrs	r4, r0, #29
    6f54:	430c      	orrs	r4, r1
    6f56:	00c1      	lsls	r1, r0, #3
    6f58:	0058      	lsls	r0, r3, #1
    6f5a:	0d40      	lsrs	r0, r0, #21
    6f5c:	4684      	mov	ip, r0
    6f5e:	468a      	mov	sl, r1
    6f60:	000f      	movs	r7, r1
    6f62:	0319      	lsls	r1, r3, #12
    6f64:	0f50      	lsrs	r0, r2, #29
    6f66:	0a49      	lsrs	r1, r1, #9
    6f68:	4301      	orrs	r1, r0
    6f6a:	48c6      	ldr	r0, [pc, #792]	; (7284 <__aeabi_dsub+0x344>)
    6f6c:	0d76      	lsrs	r6, r6, #21
    6f6e:	46a8      	mov	r8, r5
    6f70:	0fdb      	lsrs	r3, r3, #31
    6f72:	00d2      	lsls	r2, r2, #3
    6f74:	4584      	cmp	ip, r0
    6f76:	d100      	bne.n	6f7a <__aeabi_dsub+0x3a>
    6f78:	e0d8      	b.n	712c <__aeabi_dsub+0x1ec>
    6f7a:	2001      	movs	r0, #1
    6f7c:	4043      	eors	r3, r0
    6f7e:	42ab      	cmp	r3, r5
    6f80:	d100      	bne.n	6f84 <__aeabi_dsub+0x44>
    6f82:	e0a6      	b.n	70d2 <__aeabi_dsub+0x192>
    6f84:	4660      	mov	r0, ip
    6f86:	1a35      	subs	r5, r6, r0
    6f88:	2d00      	cmp	r5, #0
    6f8a:	dc00      	bgt.n	6f8e <__aeabi_dsub+0x4e>
    6f8c:	e105      	b.n	719a <__aeabi_dsub+0x25a>
    6f8e:	2800      	cmp	r0, #0
    6f90:	d110      	bne.n	6fb4 <__aeabi_dsub+0x74>
    6f92:	000b      	movs	r3, r1
    6f94:	4313      	orrs	r3, r2
    6f96:	d100      	bne.n	6f9a <__aeabi_dsub+0x5a>
    6f98:	e0d7      	b.n	714a <__aeabi_dsub+0x20a>
    6f9a:	1e6b      	subs	r3, r5, #1
    6f9c:	2b00      	cmp	r3, #0
    6f9e:	d000      	beq.n	6fa2 <__aeabi_dsub+0x62>
    6fa0:	e14b      	b.n	723a <__aeabi_dsub+0x2fa>
    6fa2:	4653      	mov	r3, sl
    6fa4:	1a9f      	subs	r7, r3, r2
    6fa6:	45ba      	cmp	sl, r7
    6fa8:	4180      	sbcs	r0, r0
    6faa:	1a64      	subs	r4, r4, r1
    6fac:	4240      	negs	r0, r0
    6fae:	1a24      	subs	r4, r4, r0
    6fb0:	2601      	movs	r6, #1
    6fb2:	e01e      	b.n	6ff2 <__aeabi_dsub+0xb2>
    6fb4:	4bb3      	ldr	r3, [pc, #716]	; (7284 <__aeabi_dsub+0x344>)
    6fb6:	429e      	cmp	r6, r3
    6fb8:	d048      	beq.n	704c <__aeabi_dsub+0x10c>
    6fba:	2380      	movs	r3, #128	; 0x80
    6fbc:	041b      	lsls	r3, r3, #16
    6fbe:	4319      	orrs	r1, r3
    6fc0:	2d38      	cmp	r5, #56	; 0x38
    6fc2:	dd00      	ble.n	6fc6 <__aeabi_dsub+0x86>
    6fc4:	e119      	b.n	71fa <__aeabi_dsub+0x2ba>
    6fc6:	2d1f      	cmp	r5, #31
    6fc8:	dd00      	ble.n	6fcc <__aeabi_dsub+0x8c>
    6fca:	e14c      	b.n	7266 <__aeabi_dsub+0x326>
    6fcc:	2320      	movs	r3, #32
    6fce:	000f      	movs	r7, r1
    6fd0:	1b5b      	subs	r3, r3, r5
    6fd2:	0010      	movs	r0, r2
    6fd4:	409a      	lsls	r2, r3
    6fd6:	409f      	lsls	r7, r3
    6fd8:	40e8      	lsrs	r0, r5
    6fda:	1e53      	subs	r3, r2, #1
    6fdc:	419a      	sbcs	r2, r3
    6fde:	40e9      	lsrs	r1, r5
    6fe0:	4307      	orrs	r7, r0
    6fe2:	4317      	orrs	r7, r2
    6fe4:	4653      	mov	r3, sl
    6fe6:	1bdf      	subs	r7, r3, r7
    6fe8:	1a61      	subs	r1, r4, r1
    6fea:	45ba      	cmp	sl, r7
    6fec:	41a4      	sbcs	r4, r4
    6fee:	4264      	negs	r4, r4
    6ff0:	1b0c      	subs	r4, r1, r4
    6ff2:	0223      	lsls	r3, r4, #8
    6ff4:	d400      	bmi.n	6ff8 <__aeabi_dsub+0xb8>
    6ff6:	e0c5      	b.n	7184 <__aeabi_dsub+0x244>
    6ff8:	0264      	lsls	r4, r4, #9
    6ffa:	0a65      	lsrs	r5, r4, #9
    6ffc:	2d00      	cmp	r5, #0
    6ffe:	d100      	bne.n	7002 <__aeabi_dsub+0xc2>
    7000:	e0f6      	b.n	71f0 <__aeabi_dsub+0x2b0>
    7002:	0028      	movs	r0, r5
    7004:	f000 fc28 	bl	7858 <__clzsi2>
    7008:	0003      	movs	r3, r0
    700a:	3b08      	subs	r3, #8
    700c:	2b1f      	cmp	r3, #31
    700e:	dd00      	ble.n	7012 <__aeabi_dsub+0xd2>
    7010:	e0e9      	b.n	71e6 <__aeabi_dsub+0x2a6>
    7012:	2220      	movs	r2, #32
    7014:	003c      	movs	r4, r7
    7016:	1ad2      	subs	r2, r2, r3
    7018:	409d      	lsls	r5, r3
    701a:	40d4      	lsrs	r4, r2
    701c:	409f      	lsls	r7, r3
    701e:	4325      	orrs	r5, r4
    7020:	429e      	cmp	r6, r3
    7022:	dd00      	ble.n	7026 <__aeabi_dsub+0xe6>
    7024:	e0db      	b.n	71de <__aeabi_dsub+0x29e>
    7026:	1b9e      	subs	r6, r3, r6
    7028:	1c73      	adds	r3, r6, #1
    702a:	2b1f      	cmp	r3, #31
    702c:	dd00      	ble.n	7030 <__aeabi_dsub+0xf0>
    702e:	e10a      	b.n	7246 <__aeabi_dsub+0x306>
    7030:	2220      	movs	r2, #32
    7032:	0038      	movs	r0, r7
    7034:	1ad2      	subs	r2, r2, r3
    7036:	0029      	movs	r1, r5
    7038:	4097      	lsls	r7, r2
    703a:	002c      	movs	r4, r5
    703c:	4091      	lsls	r1, r2
    703e:	40d8      	lsrs	r0, r3
    7040:	1e7a      	subs	r2, r7, #1
    7042:	4197      	sbcs	r7, r2
    7044:	40dc      	lsrs	r4, r3
    7046:	2600      	movs	r6, #0
    7048:	4301      	orrs	r1, r0
    704a:	430f      	orrs	r7, r1
    704c:	077b      	lsls	r3, r7, #29
    704e:	d009      	beq.n	7064 <__aeabi_dsub+0x124>
    7050:	230f      	movs	r3, #15
    7052:	403b      	ands	r3, r7
    7054:	2b04      	cmp	r3, #4
    7056:	d005      	beq.n	7064 <__aeabi_dsub+0x124>
    7058:	1d3b      	adds	r3, r7, #4
    705a:	42bb      	cmp	r3, r7
    705c:	41bf      	sbcs	r7, r7
    705e:	427f      	negs	r7, r7
    7060:	19e4      	adds	r4, r4, r7
    7062:	001f      	movs	r7, r3
    7064:	0223      	lsls	r3, r4, #8
    7066:	d525      	bpl.n	70b4 <__aeabi_dsub+0x174>
    7068:	4b86      	ldr	r3, [pc, #536]	; (7284 <__aeabi_dsub+0x344>)
    706a:	3601      	adds	r6, #1
    706c:	429e      	cmp	r6, r3
    706e:	d100      	bne.n	7072 <__aeabi_dsub+0x132>
    7070:	e0af      	b.n	71d2 <__aeabi_dsub+0x292>
    7072:	4b85      	ldr	r3, [pc, #532]	; (7288 <__aeabi_dsub+0x348>)
    7074:	2501      	movs	r5, #1
    7076:	401c      	ands	r4, r3
    7078:	4643      	mov	r3, r8
    707a:	0762      	lsls	r2, r4, #29
    707c:	08ff      	lsrs	r7, r7, #3
    707e:	0264      	lsls	r4, r4, #9
    7080:	0576      	lsls	r6, r6, #21
    7082:	4317      	orrs	r7, r2
    7084:	0b24      	lsrs	r4, r4, #12
    7086:	0d76      	lsrs	r6, r6, #21
    7088:	401d      	ands	r5, r3
    708a:	2100      	movs	r1, #0
    708c:	0324      	lsls	r4, r4, #12
    708e:	0b23      	lsrs	r3, r4, #12
    7090:	0d0c      	lsrs	r4, r1, #20
    7092:	4a7e      	ldr	r2, [pc, #504]	; (728c <__aeabi_dsub+0x34c>)
    7094:	0524      	lsls	r4, r4, #20
    7096:	431c      	orrs	r4, r3
    7098:	4014      	ands	r4, r2
    709a:	0533      	lsls	r3, r6, #20
    709c:	4323      	orrs	r3, r4
    709e:	005b      	lsls	r3, r3, #1
    70a0:	07ed      	lsls	r5, r5, #31
    70a2:	085b      	lsrs	r3, r3, #1
    70a4:	432b      	orrs	r3, r5
    70a6:	0038      	movs	r0, r7
    70a8:	0019      	movs	r1, r3
    70aa:	bc1c      	pop	{r2, r3, r4}
    70ac:	4690      	mov	r8, r2
    70ae:	4699      	mov	r9, r3
    70b0:	46a2      	mov	sl, r4
    70b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    70b4:	2501      	movs	r5, #1
    70b6:	4643      	mov	r3, r8
    70b8:	0762      	lsls	r2, r4, #29
    70ba:	08ff      	lsrs	r7, r7, #3
    70bc:	4317      	orrs	r7, r2
    70be:	08e4      	lsrs	r4, r4, #3
    70c0:	401d      	ands	r5, r3
    70c2:	4b70      	ldr	r3, [pc, #448]	; (7284 <__aeabi_dsub+0x344>)
    70c4:	429e      	cmp	r6, r3
    70c6:	d036      	beq.n	7136 <__aeabi_dsub+0x1f6>
    70c8:	0324      	lsls	r4, r4, #12
    70ca:	0576      	lsls	r6, r6, #21
    70cc:	0b24      	lsrs	r4, r4, #12
    70ce:	0d76      	lsrs	r6, r6, #21
    70d0:	e7db      	b.n	708a <__aeabi_dsub+0x14a>
    70d2:	4663      	mov	r3, ip
    70d4:	1af3      	subs	r3, r6, r3
    70d6:	2b00      	cmp	r3, #0
    70d8:	dc00      	bgt.n	70dc <__aeabi_dsub+0x19c>
    70da:	e094      	b.n	7206 <__aeabi_dsub+0x2c6>
    70dc:	4660      	mov	r0, ip
    70de:	2800      	cmp	r0, #0
    70e0:	d035      	beq.n	714e <__aeabi_dsub+0x20e>
    70e2:	4868      	ldr	r0, [pc, #416]	; (7284 <__aeabi_dsub+0x344>)
    70e4:	4286      	cmp	r6, r0
    70e6:	d0b1      	beq.n	704c <__aeabi_dsub+0x10c>
    70e8:	2780      	movs	r7, #128	; 0x80
    70ea:	043f      	lsls	r7, r7, #16
    70ec:	4339      	orrs	r1, r7
    70ee:	2b38      	cmp	r3, #56	; 0x38
    70f0:	dc00      	bgt.n	70f4 <__aeabi_dsub+0x1b4>
    70f2:	e0fd      	b.n	72f0 <__aeabi_dsub+0x3b0>
    70f4:	430a      	orrs	r2, r1
    70f6:	0017      	movs	r7, r2
    70f8:	2100      	movs	r1, #0
    70fa:	1e7a      	subs	r2, r7, #1
    70fc:	4197      	sbcs	r7, r2
    70fe:	4457      	add	r7, sl
    7100:	4557      	cmp	r7, sl
    7102:	4180      	sbcs	r0, r0
    7104:	1909      	adds	r1, r1, r4
    7106:	4244      	negs	r4, r0
    7108:	190c      	adds	r4, r1, r4
    710a:	0223      	lsls	r3, r4, #8
    710c:	d53a      	bpl.n	7184 <__aeabi_dsub+0x244>
    710e:	4b5d      	ldr	r3, [pc, #372]	; (7284 <__aeabi_dsub+0x344>)
    7110:	3601      	adds	r6, #1
    7112:	429e      	cmp	r6, r3
    7114:	d100      	bne.n	7118 <__aeabi_dsub+0x1d8>
    7116:	e14b      	b.n	73b0 <__aeabi_dsub+0x470>
    7118:	2201      	movs	r2, #1
    711a:	4b5b      	ldr	r3, [pc, #364]	; (7288 <__aeabi_dsub+0x348>)
    711c:	401c      	ands	r4, r3
    711e:	087b      	lsrs	r3, r7, #1
    7120:	4017      	ands	r7, r2
    7122:	431f      	orrs	r7, r3
    7124:	07e2      	lsls	r2, r4, #31
    7126:	4317      	orrs	r7, r2
    7128:	0864      	lsrs	r4, r4, #1
    712a:	e78f      	b.n	704c <__aeabi_dsub+0x10c>
    712c:	0008      	movs	r0, r1
    712e:	4310      	orrs	r0, r2
    7130:	d000      	beq.n	7134 <__aeabi_dsub+0x1f4>
    7132:	e724      	b.n	6f7e <__aeabi_dsub+0x3e>
    7134:	e721      	b.n	6f7a <__aeabi_dsub+0x3a>
    7136:	0023      	movs	r3, r4
    7138:	433b      	orrs	r3, r7
    713a:	d100      	bne.n	713e <__aeabi_dsub+0x1fe>
    713c:	e1b9      	b.n	74b2 <__aeabi_dsub+0x572>
    713e:	2280      	movs	r2, #128	; 0x80
    7140:	0312      	lsls	r2, r2, #12
    7142:	4314      	orrs	r4, r2
    7144:	0324      	lsls	r4, r4, #12
    7146:	0b24      	lsrs	r4, r4, #12
    7148:	e79f      	b.n	708a <__aeabi_dsub+0x14a>
    714a:	002e      	movs	r6, r5
    714c:	e77e      	b.n	704c <__aeabi_dsub+0x10c>
    714e:	0008      	movs	r0, r1
    7150:	4310      	orrs	r0, r2
    7152:	d100      	bne.n	7156 <__aeabi_dsub+0x216>
    7154:	e0ca      	b.n	72ec <__aeabi_dsub+0x3ac>
    7156:	1e58      	subs	r0, r3, #1
    7158:	4684      	mov	ip, r0
    715a:	2800      	cmp	r0, #0
    715c:	d000      	beq.n	7160 <__aeabi_dsub+0x220>
    715e:	e0e7      	b.n	7330 <__aeabi_dsub+0x3f0>
    7160:	4452      	add	r2, sl
    7162:	4552      	cmp	r2, sl
    7164:	4180      	sbcs	r0, r0
    7166:	1864      	adds	r4, r4, r1
    7168:	4240      	negs	r0, r0
    716a:	1824      	adds	r4, r4, r0
    716c:	0017      	movs	r7, r2
    716e:	2601      	movs	r6, #1
    7170:	0223      	lsls	r3, r4, #8
    7172:	d507      	bpl.n	7184 <__aeabi_dsub+0x244>
    7174:	2602      	movs	r6, #2
    7176:	e7cf      	b.n	7118 <__aeabi_dsub+0x1d8>
    7178:	4664      	mov	r4, ip
    717a:	432c      	orrs	r4, r5
    717c:	d100      	bne.n	7180 <__aeabi_dsub+0x240>
    717e:	e1b3      	b.n	74e8 <__aeabi_dsub+0x5a8>
    7180:	002c      	movs	r4, r5
    7182:	4667      	mov	r7, ip
    7184:	077b      	lsls	r3, r7, #29
    7186:	d000      	beq.n	718a <__aeabi_dsub+0x24a>
    7188:	e762      	b.n	7050 <__aeabi_dsub+0x110>
    718a:	0763      	lsls	r3, r4, #29
    718c:	08ff      	lsrs	r7, r7, #3
    718e:	431f      	orrs	r7, r3
    7190:	2501      	movs	r5, #1
    7192:	4643      	mov	r3, r8
    7194:	08e4      	lsrs	r4, r4, #3
    7196:	401d      	ands	r5, r3
    7198:	e793      	b.n	70c2 <__aeabi_dsub+0x182>
    719a:	2d00      	cmp	r5, #0
    719c:	d178      	bne.n	7290 <__aeabi_dsub+0x350>
    719e:	1c75      	adds	r5, r6, #1
    71a0:	056d      	lsls	r5, r5, #21
    71a2:	0d6d      	lsrs	r5, r5, #21
    71a4:	2d01      	cmp	r5, #1
    71a6:	dc00      	bgt.n	71aa <__aeabi_dsub+0x26a>
    71a8:	e0f2      	b.n	7390 <__aeabi_dsub+0x450>
    71aa:	4650      	mov	r0, sl
    71ac:	1a80      	subs	r0, r0, r2
    71ae:	4582      	cmp	sl, r0
    71b0:	41bf      	sbcs	r7, r7
    71b2:	1a65      	subs	r5, r4, r1
    71b4:	427f      	negs	r7, r7
    71b6:	1bed      	subs	r5, r5, r7
    71b8:	4684      	mov	ip, r0
    71ba:	0228      	lsls	r0, r5, #8
    71bc:	d400      	bmi.n	71c0 <__aeabi_dsub+0x280>
    71be:	e08c      	b.n	72da <__aeabi_dsub+0x39a>
    71c0:	4650      	mov	r0, sl
    71c2:	1a17      	subs	r7, r2, r0
    71c4:	42ba      	cmp	r2, r7
    71c6:	4192      	sbcs	r2, r2
    71c8:	1b0c      	subs	r4, r1, r4
    71ca:	4255      	negs	r5, r2
    71cc:	1b65      	subs	r5, r4, r5
    71ce:	4698      	mov	r8, r3
    71d0:	e714      	b.n	6ffc <__aeabi_dsub+0xbc>
    71d2:	2501      	movs	r5, #1
    71d4:	4643      	mov	r3, r8
    71d6:	2400      	movs	r4, #0
    71d8:	401d      	ands	r5, r3
    71da:	2700      	movs	r7, #0
    71dc:	e755      	b.n	708a <__aeabi_dsub+0x14a>
    71de:	4c2a      	ldr	r4, [pc, #168]	; (7288 <__aeabi_dsub+0x348>)
    71e0:	1af6      	subs	r6, r6, r3
    71e2:	402c      	ands	r4, r5
    71e4:	e732      	b.n	704c <__aeabi_dsub+0x10c>
    71e6:	003d      	movs	r5, r7
    71e8:	3828      	subs	r0, #40	; 0x28
    71ea:	4085      	lsls	r5, r0
    71ec:	2700      	movs	r7, #0
    71ee:	e717      	b.n	7020 <__aeabi_dsub+0xe0>
    71f0:	0038      	movs	r0, r7
    71f2:	f000 fb31 	bl	7858 <__clzsi2>
    71f6:	3020      	adds	r0, #32
    71f8:	e706      	b.n	7008 <__aeabi_dsub+0xc8>
    71fa:	430a      	orrs	r2, r1
    71fc:	0017      	movs	r7, r2
    71fe:	2100      	movs	r1, #0
    7200:	1e7a      	subs	r2, r7, #1
    7202:	4197      	sbcs	r7, r2
    7204:	e6ee      	b.n	6fe4 <__aeabi_dsub+0xa4>
    7206:	2b00      	cmp	r3, #0
    7208:	d000      	beq.n	720c <__aeabi_dsub+0x2cc>
    720a:	e0e5      	b.n	73d8 <__aeabi_dsub+0x498>
    720c:	1c73      	adds	r3, r6, #1
    720e:	469c      	mov	ip, r3
    7210:	055b      	lsls	r3, r3, #21
    7212:	0d5b      	lsrs	r3, r3, #21
    7214:	2b01      	cmp	r3, #1
    7216:	dc00      	bgt.n	721a <__aeabi_dsub+0x2da>
    7218:	e09f      	b.n	735a <__aeabi_dsub+0x41a>
    721a:	4b1a      	ldr	r3, [pc, #104]	; (7284 <__aeabi_dsub+0x344>)
    721c:	459c      	cmp	ip, r3
    721e:	d100      	bne.n	7222 <__aeabi_dsub+0x2e2>
    7220:	e0c5      	b.n	73ae <__aeabi_dsub+0x46e>
    7222:	4452      	add	r2, sl
    7224:	4552      	cmp	r2, sl
    7226:	4180      	sbcs	r0, r0
    7228:	1864      	adds	r4, r4, r1
    722a:	4240      	negs	r0, r0
    722c:	1824      	adds	r4, r4, r0
    722e:	07e7      	lsls	r7, r4, #31
    7230:	0852      	lsrs	r2, r2, #1
    7232:	4317      	orrs	r7, r2
    7234:	0864      	lsrs	r4, r4, #1
    7236:	4666      	mov	r6, ip
    7238:	e708      	b.n	704c <__aeabi_dsub+0x10c>
    723a:	4812      	ldr	r0, [pc, #72]	; (7284 <__aeabi_dsub+0x344>)
    723c:	4285      	cmp	r5, r0
    723e:	d100      	bne.n	7242 <__aeabi_dsub+0x302>
    7240:	e085      	b.n	734e <__aeabi_dsub+0x40e>
    7242:	001d      	movs	r5, r3
    7244:	e6bc      	b.n	6fc0 <__aeabi_dsub+0x80>
    7246:	0029      	movs	r1, r5
    7248:	3e1f      	subs	r6, #31
    724a:	40f1      	lsrs	r1, r6
    724c:	2b20      	cmp	r3, #32
    724e:	d100      	bne.n	7252 <__aeabi_dsub+0x312>
    7250:	e07f      	b.n	7352 <__aeabi_dsub+0x412>
    7252:	2240      	movs	r2, #64	; 0x40
    7254:	1ad3      	subs	r3, r2, r3
    7256:	409d      	lsls	r5, r3
    7258:	432f      	orrs	r7, r5
    725a:	1e7d      	subs	r5, r7, #1
    725c:	41af      	sbcs	r7, r5
    725e:	2400      	movs	r4, #0
    7260:	430f      	orrs	r7, r1
    7262:	2600      	movs	r6, #0
    7264:	e78e      	b.n	7184 <__aeabi_dsub+0x244>
    7266:	002b      	movs	r3, r5
    7268:	000f      	movs	r7, r1
    726a:	3b20      	subs	r3, #32
    726c:	40df      	lsrs	r7, r3
    726e:	2d20      	cmp	r5, #32
    7270:	d071      	beq.n	7356 <__aeabi_dsub+0x416>
    7272:	2340      	movs	r3, #64	; 0x40
    7274:	1b5d      	subs	r5, r3, r5
    7276:	40a9      	lsls	r1, r5
    7278:	430a      	orrs	r2, r1
    727a:	1e51      	subs	r1, r2, #1
    727c:	418a      	sbcs	r2, r1
    727e:	2100      	movs	r1, #0
    7280:	4317      	orrs	r7, r2
    7282:	e6af      	b.n	6fe4 <__aeabi_dsub+0xa4>
    7284:	000007ff 	.word	0x000007ff
    7288:	ff7fffff 	.word	0xff7fffff
    728c:	800fffff 	.word	0x800fffff
    7290:	2e00      	cmp	r6, #0
    7292:	d03e      	beq.n	7312 <__aeabi_dsub+0x3d2>
    7294:	4eb3      	ldr	r6, [pc, #716]	; (7564 <__aeabi_dsub+0x624>)
    7296:	45b4      	cmp	ip, r6
    7298:	d045      	beq.n	7326 <__aeabi_dsub+0x3e6>
    729a:	2680      	movs	r6, #128	; 0x80
    729c:	0436      	lsls	r6, r6, #16
    729e:	426d      	negs	r5, r5
    72a0:	4334      	orrs	r4, r6
    72a2:	2d38      	cmp	r5, #56	; 0x38
    72a4:	dd00      	ble.n	72a8 <__aeabi_dsub+0x368>
    72a6:	e0a8      	b.n	73fa <__aeabi_dsub+0x4ba>
    72a8:	2d1f      	cmp	r5, #31
    72aa:	dd00      	ble.n	72ae <__aeabi_dsub+0x36e>
    72ac:	e11f      	b.n	74ee <__aeabi_dsub+0x5ae>
    72ae:	2620      	movs	r6, #32
    72b0:	0027      	movs	r7, r4
    72b2:	4650      	mov	r0, sl
    72b4:	1b76      	subs	r6, r6, r5
    72b6:	40b7      	lsls	r7, r6
    72b8:	40e8      	lsrs	r0, r5
    72ba:	4307      	orrs	r7, r0
    72bc:	4650      	mov	r0, sl
    72be:	40b0      	lsls	r0, r6
    72c0:	1e46      	subs	r6, r0, #1
    72c2:	41b0      	sbcs	r0, r6
    72c4:	40ec      	lsrs	r4, r5
    72c6:	4338      	orrs	r0, r7
    72c8:	1a17      	subs	r7, r2, r0
    72ca:	42ba      	cmp	r2, r7
    72cc:	4192      	sbcs	r2, r2
    72ce:	1b0c      	subs	r4, r1, r4
    72d0:	4252      	negs	r2, r2
    72d2:	1aa4      	subs	r4, r4, r2
    72d4:	4666      	mov	r6, ip
    72d6:	4698      	mov	r8, r3
    72d8:	e68b      	b.n	6ff2 <__aeabi_dsub+0xb2>
    72da:	4664      	mov	r4, ip
    72dc:	4667      	mov	r7, ip
    72de:	432c      	orrs	r4, r5
    72e0:	d000      	beq.n	72e4 <__aeabi_dsub+0x3a4>
    72e2:	e68b      	b.n	6ffc <__aeabi_dsub+0xbc>
    72e4:	2500      	movs	r5, #0
    72e6:	2600      	movs	r6, #0
    72e8:	2700      	movs	r7, #0
    72ea:	e6ea      	b.n	70c2 <__aeabi_dsub+0x182>
    72ec:	001e      	movs	r6, r3
    72ee:	e6ad      	b.n	704c <__aeabi_dsub+0x10c>
    72f0:	2b1f      	cmp	r3, #31
    72f2:	dc60      	bgt.n	73b6 <__aeabi_dsub+0x476>
    72f4:	2720      	movs	r7, #32
    72f6:	1af8      	subs	r0, r7, r3
    72f8:	000f      	movs	r7, r1
    72fa:	4684      	mov	ip, r0
    72fc:	4087      	lsls	r7, r0
    72fe:	0010      	movs	r0, r2
    7300:	40d8      	lsrs	r0, r3
    7302:	4307      	orrs	r7, r0
    7304:	4660      	mov	r0, ip
    7306:	4082      	lsls	r2, r0
    7308:	1e50      	subs	r0, r2, #1
    730a:	4182      	sbcs	r2, r0
    730c:	40d9      	lsrs	r1, r3
    730e:	4317      	orrs	r7, r2
    7310:	e6f5      	b.n	70fe <__aeabi_dsub+0x1be>
    7312:	0026      	movs	r6, r4
    7314:	4650      	mov	r0, sl
    7316:	4306      	orrs	r6, r0
    7318:	d005      	beq.n	7326 <__aeabi_dsub+0x3e6>
    731a:	43ed      	mvns	r5, r5
    731c:	2d00      	cmp	r5, #0
    731e:	d0d3      	beq.n	72c8 <__aeabi_dsub+0x388>
    7320:	4e90      	ldr	r6, [pc, #576]	; (7564 <__aeabi_dsub+0x624>)
    7322:	45b4      	cmp	ip, r6
    7324:	d1bd      	bne.n	72a2 <__aeabi_dsub+0x362>
    7326:	000c      	movs	r4, r1
    7328:	0017      	movs	r7, r2
    732a:	4666      	mov	r6, ip
    732c:	4698      	mov	r8, r3
    732e:	e68d      	b.n	704c <__aeabi_dsub+0x10c>
    7330:	488c      	ldr	r0, [pc, #560]	; (7564 <__aeabi_dsub+0x624>)
    7332:	4283      	cmp	r3, r0
    7334:	d00b      	beq.n	734e <__aeabi_dsub+0x40e>
    7336:	4663      	mov	r3, ip
    7338:	e6d9      	b.n	70ee <__aeabi_dsub+0x1ae>
    733a:	2d00      	cmp	r5, #0
    733c:	d000      	beq.n	7340 <__aeabi_dsub+0x400>
    733e:	e096      	b.n	746e <__aeabi_dsub+0x52e>
    7340:	0008      	movs	r0, r1
    7342:	4310      	orrs	r0, r2
    7344:	d100      	bne.n	7348 <__aeabi_dsub+0x408>
    7346:	e0e2      	b.n	750e <__aeabi_dsub+0x5ce>
    7348:	000c      	movs	r4, r1
    734a:	0017      	movs	r7, r2
    734c:	4698      	mov	r8, r3
    734e:	4e85      	ldr	r6, [pc, #532]	; (7564 <__aeabi_dsub+0x624>)
    7350:	e67c      	b.n	704c <__aeabi_dsub+0x10c>
    7352:	2500      	movs	r5, #0
    7354:	e780      	b.n	7258 <__aeabi_dsub+0x318>
    7356:	2100      	movs	r1, #0
    7358:	e78e      	b.n	7278 <__aeabi_dsub+0x338>
    735a:	0023      	movs	r3, r4
    735c:	4650      	mov	r0, sl
    735e:	4303      	orrs	r3, r0
    7360:	2e00      	cmp	r6, #0
    7362:	d000      	beq.n	7366 <__aeabi_dsub+0x426>
    7364:	e0a8      	b.n	74b8 <__aeabi_dsub+0x578>
    7366:	2b00      	cmp	r3, #0
    7368:	d100      	bne.n	736c <__aeabi_dsub+0x42c>
    736a:	e0de      	b.n	752a <__aeabi_dsub+0x5ea>
    736c:	000b      	movs	r3, r1
    736e:	4313      	orrs	r3, r2
    7370:	d100      	bne.n	7374 <__aeabi_dsub+0x434>
    7372:	e66b      	b.n	704c <__aeabi_dsub+0x10c>
    7374:	4452      	add	r2, sl
    7376:	4552      	cmp	r2, sl
    7378:	4180      	sbcs	r0, r0
    737a:	1864      	adds	r4, r4, r1
    737c:	4240      	negs	r0, r0
    737e:	1824      	adds	r4, r4, r0
    7380:	0017      	movs	r7, r2
    7382:	0223      	lsls	r3, r4, #8
    7384:	d400      	bmi.n	7388 <__aeabi_dsub+0x448>
    7386:	e6fd      	b.n	7184 <__aeabi_dsub+0x244>
    7388:	4b77      	ldr	r3, [pc, #476]	; (7568 <__aeabi_dsub+0x628>)
    738a:	4666      	mov	r6, ip
    738c:	401c      	ands	r4, r3
    738e:	e65d      	b.n	704c <__aeabi_dsub+0x10c>
    7390:	0025      	movs	r5, r4
    7392:	4650      	mov	r0, sl
    7394:	4305      	orrs	r5, r0
    7396:	2e00      	cmp	r6, #0
    7398:	d1cf      	bne.n	733a <__aeabi_dsub+0x3fa>
    739a:	2d00      	cmp	r5, #0
    739c:	d14f      	bne.n	743e <__aeabi_dsub+0x4fe>
    739e:	000c      	movs	r4, r1
    73a0:	4314      	orrs	r4, r2
    73a2:	d100      	bne.n	73a6 <__aeabi_dsub+0x466>
    73a4:	e0a0      	b.n	74e8 <__aeabi_dsub+0x5a8>
    73a6:	000c      	movs	r4, r1
    73a8:	0017      	movs	r7, r2
    73aa:	4698      	mov	r8, r3
    73ac:	e64e      	b.n	704c <__aeabi_dsub+0x10c>
    73ae:	4666      	mov	r6, ip
    73b0:	2400      	movs	r4, #0
    73b2:	2700      	movs	r7, #0
    73b4:	e685      	b.n	70c2 <__aeabi_dsub+0x182>
    73b6:	001f      	movs	r7, r3
    73b8:	0008      	movs	r0, r1
    73ba:	3f20      	subs	r7, #32
    73bc:	40f8      	lsrs	r0, r7
    73be:	0007      	movs	r7, r0
    73c0:	2b20      	cmp	r3, #32
    73c2:	d100      	bne.n	73c6 <__aeabi_dsub+0x486>
    73c4:	e08e      	b.n	74e4 <__aeabi_dsub+0x5a4>
    73c6:	2040      	movs	r0, #64	; 0x40
    73c8:	1ac3      	subs	r3, r0, r3
    73ca:	4099      	lsls	r1, r3
    73cc:	430a      	orrs	r2, r1
    73ce:	1e51      	subs	r1, r2, #1
    73d0:	418a      	sbcs	r2, r1
    73d2:	2100      	movs	r1, #0
    73d4:	4317      	orrs	r7, r2
    73d6:	e692      	b.n	70fe <__aeabi_dsub+0x1be>
    73d8:	2e00      	cmp	r6, #0
    73da:	d114      	bne.n	7406 <__aeabi_dsub+0x4c6>
    73dc:	0026      	movs	r6, r4
    73de:	4650      	mov	r0, sl
    73e0:	4306      	orrs	r6, r0
    73e2:	d062      	beq.n	74aa <__aeabi_dsub+0x56a>
    73e4:	43db      	mvns	r3, r3
    73e6:	2b00      	cmp	r3, #0
    73e8:	d15c      	bne.n	74a4 <__aeabi_dsub+0x564>
    73ea:	1887      	adds	r7, r0, r2
    73ec:	4297      	cmp	r7, r2
    73ee:	4192      	sbcs	r2, r2
    73f0:	1864      	adds	r4, r4, r1
    73f2:	4252      	negs	r2, r2
    73f4:	18a4      	adds	r4, r4, r2
    73f6:	4666      	mov	r6, ip
    73f8:	e687      	b.n	710a <__aeabi_dsub+0x1ca>
    73fa:	4650      	mov	r0, sl
    73fc:	4320      	orrs	r0, r4
    73fe:	1e44      	subs	r4, r0, #1
    7400:	41a0      	sbcs	r0, r4
    7402:	2400      	movs	r4, #0
    7404:	e760      	b.n	72c8 <__aeabi_dsub+0x388>
    7406:	4e57      	ldr	r6, [pc, #348]	; (7564 <__aeabi_dsub+0x624>)
    7408:	45b4      	cmp	ip, r6
    740a:	d04e      	beq.n	74aa <__aeabi_dsub+0x56a>
    740c:	2680      	movs	r6, #128	; 0x80
    740e:	0436      	lsls	r6, r6, #16
    7410:	425b      	negs	r3, r3
    7412:	4334      	orrs	r4, r6
    7414:	2b38      	cmp	r3, #56	; 0x38
    7416:	dd00      	ble.n	741a <__aeabi_dsub+0x4da>
    7418:	e07f      	b.n	751a <__aeabi_dsub+0x5da>
    741a:	2b1f      	cmp	r3, #31
    741c:	dd00      	ble.n	7420 <__aeabi_dsub+0x4e0>
    741e:	e08b      	b.n	7538 <__aeabi_dsub+0x5f8>
    7420:	2620      	movs	r6, #32
    7422:	0027      	movs	r7, r4
    7424:	4650      	mov	r0, sl
    7426:	1af6      	subs	r6, r6, r3
    7428:	40b7      	lsls	r7, r6
    742a:	40d8      	lsrs	r0, r3
    742c:	4307      	orrs	r7, r0
    742e:	4650      	mov	r0, sl
    7430:	40b0      	lsls	r0, r6
    7432:	1e46      	subs	r6, r0, #1
    7434:	41b0      	sbcs	r0, r6
    7436:	4307      	orrs	r7, r0
    7438:	40dc      	lsrs	r4, r3
    743a:	18bf      	adds	r7, r7, r2
    743c:	e7d6      	b.n	73ec <__aeabi_dsub+0x4ac>
    743e:	000d      	movs	r5, r1
    7440:	4315      	orrs	r5, r2
    7442:	d100      	bne.n	7446 <__aeabi_dsub+0x506>
    7444:	e602      	b.n	704c <__aeabi_dsub+0x10c>
    7446:	4650      	mov	r0, sl
    7448:	1a80      	subs	r0, r0, r2
    744a:	4582      	cmp	sl, r0
    744c:	41bf      	sbcs	r7, r7
    744e:	1a65      	subs	r5, r4, r1
    7450:	427f      	negs	r7, r7
    7452:	1bed      	subs	r5, r5, r7
    7454:	4684      	mov	ip, r0
    7456:	0228      	lsls	r0, r5, #8
    7458:	d400      	bmi.n	745c <__aeabi_dsub+0x51c>
    745a:	e68d      	b.n	7178 <__aeabi_dsub+0x238>
    745c:	4650      	mov	r0, sl
    745e:	1a17      	subs	r7, r2, r0
    7460:	42ba      	cmp	r2, r7
    7462:	4192      	sbcs	r2, r2
    7464:	1b0c      	subs	r4, r1, r4
    7466:	4252      	negs	r2, r2
    7468:	1aa4      	subs	r4, r4, r2
    746a:	4698      	mov	r8, r3
    746c:	e5ee      	b.n	704c <__aeabi_dsub+0x10c>
    746e:	000d      	movs	r5, r1
    7470:	4315      	orrs	r5, r2
    7472:	d100      	bne.n	7476 <__aeabi_dsub+0x536>
    7474:	e76b      	b.n	734e <__aeabi_dsub+0x40e>
    7476:	4650      	mov	r0, sl
    7478:	0767      	lsls	r7, r4, #29
    747a:	08c0      	lsrs	r0, r0, #3
    747c:	4307      	orrs	r7, r0
    747e:	2080      	movs	r0, #128	; 0x80
    7480:	08e4      	lsrs	r4, r4, #3
    7482:	0300      	lsls	r0, r0, #12
    7484:	4204      	tst	r4, r0
    7486:	d007      	beq.n	7498 <__aeabi_dsub+0x558>
    7488:	08cd      	lsrs	r5, r1, #3
    748a:	4205      	tst	r5, r0
    748c:	d104      	bne.n	7498 <__aeabi_dsub+0x558>
    748e:	002c      	movs	r4, r5
    7490:	4698      	mov	r8, r3
    7492:	08d7      	lsrs	r7, r2, #3
    7494:	0749      	lsls	r1, r1, #29
    7496:	430f      	orrs	r7, r1
    7498:	0f7b      	lsrs	r3, r7, #29
    749a:	00e4      	lsls	r4, r4, #3
    749c:	431c      	orrs	r4, r3
    749e:	00ff      	lsls	r7, r7, #3
    74a0:	4e30      	ldr	r6, [pc, #192]	; (7564 <__aeabi_dsub+0x624>)
    74a2:	e5d3      	b.n	704c <__aeabi_dsub+0x10c>
    74a4:	4e2f      	ldr	r6, [pc, #188]	; (7564 <__aeabi_dsub+0x624>)
    74a6:	45b4      	cmp	ip, r6
    74a8:	d1b4      	bne.n	7414 <__aeabi_dsub+0x4d4>
    74aa:	000c      	movs	r4, r1
    74ac:	0017      	movs	r7, r2
    74ae:	4666      	mov	r6, ip
    74b0:	e5cc      	b.n	704c <__aeabi_dsub+0x10c>
    74b2:	2700      	movs	r7, #0
    74b4:	2400      	movs	r4, #0
    74b6:	e5e8      	b.n	708a <__aeabi_dsub+0x14a>
    74b8:	2b00      	cmp	r3, #0
    74ba:	d039      	beq.n	7530 <__aeabi_dsub+0x5f0>
    74bc:	000b      	movs	r3, r1
    74be:	4313      	orrs	r3, r2
    74c0:	d100      	bne.n	74c4 <__aeabi_dsub+0x584>
    74c2:	e744      	b.n	734e <__aeabi_dsub+0x40e>
    74c4:	08c0      	lsrs	r0, r0, #3
    74c6:	0767      	lsls	r7, r4, #29
    74c8:	4307      	orrs	r7, r0
    74ca:	2080      	movs	r0, #128	; 0x80
    74cc:	08e4      	lsrs	r4, r4, #3
    74ce:	0300      	lsls	r0, r0, #12
    74d0:	4204      	tst	r4, r0
    74d2:	d0e1      	beq.n	7498 <__aeabi_dsub+0x558>
    74d4:	08cb      	lsrs	r3, r1, #3
    74d6:	4203      	tst	r3, r0
    74d8:	d1de      	bne.n	7498 <__aeabi_dsub+0x558>
    74da:	08d7      	lsrs	r7, r2, #3
    74dc:	0749      	lsls	r1, r1, #29
    74de:	430f      	orrs	r7, r1
    74e0:	001c      	movs	r4, r3
    74e2:	e7d9      	b.n	7498 <__aeabi_dsub+0x558>
    74e4:	2100      	movs	r1, #0
    74e6:	e771      	b.n	73cc <__aeabi_dsub+0x48c>
    74e8:	2500      	movs	r5, #0
    74ea:	2700      	movs	r7, #0
    74ec:	e5e9      	b.n	70c2 <__aeabi_dsub+0x182>
    74ee:	002e      	movs	r6, r5
    74f0:	0027      	movs	r7, r4
    74f2:	3e20      	subs	r6, #32
    74f4:	40f7      	lsrs	r7, r6
    74f6:	2d20      	cmp	r5, #32
    74f8:	d02f      	beq.n	755a <__aeabi_dsub+0x61a>
    74fa:	2640      	movs	r6, #64	; 0x40
    74fc:	1b75      	subs	r5, r6, r5
    74fe:	40ac      	lsls	r4, r5
    7500:	4650      	mov	r0, sl
    7502:	4320      	orrs	r0, r4
    7504:	1e44      	subs	r4, r0, #1
    7506:	41a0      	sbcs	r0, r4
    7508:	2400      	movs	r4, #0
    750a:	4338      	orrs	r0, r7
    750c:	e6dc      	b.n	72c8 <__aeabi_dsub+0x388>
    750e:	2480      	movs	r4, #128	; 0x80
    7510:	2500      	movs	r5, #0
    7512:	0324      	lsls	r4, r4, #12
    7514:	4e13      	ldr	r6, [pc, #76]	; (7564 <__aeabi_dsub+0x624>)
    7516:	2700      	movs	r7, #0
    7518:	e5d3      	b.n	70c2 <__aeabi_dsub+0x182>
    751a:	4650      	mov	r0, sl
    751c:	4320      	orrs	r0, r4
    751e:	0007      	movs	r7, r0
    7520:	1e78      	subs	r0, r7, #1
    7522:	4187      	sbcs	r7, r0
    7524:	2400      	movs	r4, #0
    7526:	18bf      	adds	r7, r7, r2
    7528:	e760      	b.n	73ec <__aeabi_dsub+0x4ac>
    752a:	000c      	movs	r4, r1
    752c:	0017      	movs	r7, r2
    752e:	e58d      	b.n	704c <__aeabi_dsub+0x10c>
    7530:	000c      	movs	r4, r1
    7532:	0017      	movs	r7, r2
    7534:	4e0b      	ldr	r6, [pc, #44]	; (7564 <__aeabi_dsub+0x624>)
    7536:	e589      	b.n	704c <__aeabi_dsub+0x10c>
    7538:	001e      	movs	r6, r3
    753a:	0027      	movs	r7, r4
    753c:	3e20      	subs	r6, #32
    753e:	40f7      	lsrs	r7, r6
    7540:	2b20      	cmp	r3, #32
    7542:	d00c      	beq.n	755e <__aeabi_dsub+0x61e>
    7544:	2640      	movs	r6, #64	; 0x40
    7546:	1af3      	subs	r3, r6, r3
    7548:	409c      	lsls	r4, r3
    754a:	4650      	mov	r0, sl
    754c:	4320      	orrs	r0, r4
    754e:	1e44      	subs	r4, r0, #1
    7550:	41a0      	sbcs	r0, r4
    7552:	4307      	orrs	r7, r0
    7554:	2400      	movs	r4, #0
    7556:	18bf      	adds	r7, r7, r2
    7558:	e748      	b.n	73ec <__aeabi_dsub+0x4ac>
    755a:	2400      	movs	r4, #0
    755c:	e7d0      	b.n	7500 <__aeabi_dsub+0x5c0>
    755e:	2400      	movs	r4, #0
    7560:	e7f3      	b.n	754a <__aeabi_dsub+0x60a>
    7562:	46c0      	nop			; (mov r8, r8)
    7564:	000007ff 	.word	0x000007ff
    7568:	ff7fffff 	.word	0xff7fffff

0000756c <__aeabi_dcmpun>:
    756c:	b570      	push	{r4, r5, r6, lr}
    756e:	4e0e      	ldr	r6, [pc, #56]	; (75a8 <__aeabi_dcmpun+0x3c>)
    7570:	030d      	lsls	r5, r1, #12
    7572:	031c      	lsls	r4, r3, #12
    7574:	0049      	lsls	r1, r1, #1
    7576:	005b      	lsls	r3, r3, #1
    7578:	0b2d      	lsrs	r5, r5, #12
    757a:	0d49      	lsrs	r1, r1, #21
    757c:	0b24      	lsrs	r4, r4, #12
    757e:	0d5b      	lsrs	r3, r3, #21
    7580:	42b1      	cmp	r1, r6
    7582:	d004      	beq.n	758e <__aeabi_dcmpun+0x22>
    7584:	4908      	ldr	r1, [pc, #32]	; (75a8 <__aeabi_dcmpun+0x3c>)
    7586:	2000      	movs	r0, #0
    7588:	428b      	cmp	r3, r1
    758a:	d008      	beq.n	759e <__aeabi_dcmpun+0x32>
    758c:	bd70      	pop	{r4, r5, r6, pc}
    758e:	4305      	orrs	r5, r0
    7590:	2001      	movs	r0, #1
    7592:	2d00      	cmp	r5, #0
    7594:	d1fa      	bne.n	758c <__aeabi_dcmpun+0x20>
    7596:	4904      	ldr	r1, [pc, #16]	; (75a8 <__aeabi_dcmpun+0x3c>)
    7598:	2000      	movs	r0, #0
    759a:	428b      	cmp	r3, r1
    759c:	d1f6      	bne.n	758c <__aeabi_dcmpun+0x20>
    759e:	4314      	orrs	r4, r2
    75a0:	0020      	movs	r0, r4
    75a2:	1e44      	subs	r4, r0, #1
    75a4:	41a0      	sbcs	r0, r4
    75a6:	e7f1      	b.n	758c <__aeabi_dcmpun+0x20>
    75a8:	000007ff 	.word	0x000007ff

000075ac <__aeabi_i2d>:
    75ac:	b570      	push	{r4, r5, r6, lr}
    75ae:	2800      	cmp	r0, #0
    75b0:	d030      	beq.n	7614 <__aeabi_i2d+0x68>
    75b2:	17c3      	asrs	r3, r0, #31
    75b4:	18c4      	adds	r4, r0, r3
    75b6:	405c      	eors	r4, r3
    75b8:	0fc5      	lsrs	r5, r0, #31
    75ba:	0020      	movs	r0, r4
    75bc:	f000 f94c 	bl	7858 <__clzsi2>
    75c0:	4b17      	ldr	r3, [pc, #92]	; (7620 <__aeabi_i2d+0x74>)
    75c2:	4a18      	ldr	r2, [pc, #96]	; (7624 <__aeabi_i2d+0x78>)
    75c4:	1a1b      	subs	r3, r3, r0
    75c6:	1ad2      	subs	r2, r2, r3
    75c8:	2a1f      	cmp	r2, #31
    75ca:	dd18      	ble.n	75fe <__aeabi_i2d+0x52>
    75cc:	4a16      	ldr	r2, [pc, #88]	; (7628 <__aeabi_i2d+0x7c>)
    75ce:	1ad2      	subs	r2, r2, r3
    75d0:	4094      	lsls	r4, r2
    75d2:	2200      	movs	r2, #0
    75d4:	0324      	lsls	r4, r4, #12
    75d6:	055b      	lsls	r3, r3, #21
    75d8:	0b24      	lsrs	r4, r4, #12
    75da:	0d5b      	lsrs	r3, r3, #21
    75dc:	2100      	movs	r1, #0
    75de:	0010      	movs	r0, r2
    75e0:	0324      	lsls	r4, r4, #12
    75e2:	0d0a      	lsrs	r2, r1, #20
    75e4:	0b24      	lsrs	r4, r4, #12
    75e6:	0512      	lsls	r2, r2, #20
    75e8:	4322      	orrs	r2, r4
    75ea:	4c10      	ldr	r4, [pc, #64]	; (762c <__aeabi_i2d+0x80>)
    75ec:	051b      	lsls	r3, r3, #20
    75ee:	4022      	ands	r2, r4
    75f0:	4313      	orrs	r3, r2
    75f2:	005b      	lsls	r3, r3, #1
    75f4:	07ed      	lsls	r5, r5, #31
    75f6:	085b      	lsrs	r3, r3, #1
    75f8:	432b      	orrs	r3, r5
    75fa:	0019      	movs	r1, r3
    75fc:	bd70      	pop	{r4, r5, r6, pc}
    75fe:	0021      	movs	r1, r4
    7600:	4091      	lsls	r1, r2
    7602:	000a      	movs	r2, r1
    7604:	210b      	movs	r1, #11
    7606:	1a08      	subs	r0, r1, r0
    7608:	40c4      	lsrs	r4, r0
    760a:	055b      	lsls	r3, r3, #21
    760c:	0324      	lsls	r4, r4, #12
    760e:	0b24      	lsrs	r4, r4, #12
    7610:	0d5b      	lsrs	r3, r3, #21
    7612:	e7e3      	b.n	75dc <__aeabi_i2d+0x30>
    7614:	2500      	movs	r5, #0
    7616:	2300      	movs	r3, #0
    7618:	2400      	movs	r4, #0
    761a:	2200      	movs	r2, #0
    761c:	e7de      	b.n	75dc <__aeabi_i2d+0x30>
    761e:	46c0      	nop			; (mov r8, r8)
    7620:	0000041e 	.word	0x0000041e
    7624:	00000433 	.word	0x00000433
    7628:	00000413 	.word	0x00000413
    762c:	800fffff 	.word	0x800fffff

00007630 <__aeabi_ui2d>:
    7630:	b510      	push	{r4, lr}
    7632:	1e04      	subs	r4, r0, #0
    7634:	d028      	beq.n	7688 <__aeabi_ui2d+0x58>
    7636:	f000 f90f 	bl	7858 <__clzsi2>
    763a:	4b15      	ldr	r3, [pc, #84]	; (7690 <__aeabi_ui2d+0x60>)
    763c:	4a15      	ldr	r2, [pc, #84]	; (7694 <__aeabi_ui2d+0x64>)
    763e:	1a1b      	subs	r3, r3, r0
    7640:	1ad2      	subs	r2, r2, r3
    7642:	2a1f      	cmp	r2, #31
    7644:	dd15      	ble.n	7672 <__aeabi_ui2d+0x42>
    7646:	4a14      	ldr	r2, [pc, #80]	; (7698 <__aeabi_ui2d+0x68>)
    7648:	1ad2      	subs	r2, r2, r3
    764a:	4094      	lsls	r4, r2
    764c:	2200      	movs	r2, #0
    764e:	0324      	lsls	r4, r4, #12
    7650:	055b      	lsls	r3, r3, #21
    7652:	0b24      	lsrs	r4, r4, #12
    7654:	0d5b      	lsrs	r3, r3, #21
    7656:	2100      	movs	r1, #0
    7658:	0010      	movs	r0, r2
    765a:	0324      	lsls	r4, r4, #12
    765c:	0d0a      	lsrs	r2, r1, #20
    765e:	0b24      	lsrs	r4, r4, #12
    7660:	0512      	lsls	r2, r2, #20
    7662:	4322      	orrs	r2, r4
    7664:	4c0d      	ldr	r4, [pc, #52]	; (769c <__aeabi_ui2d+0x6c>)
    7666:	051b      	lsls	r3, r3, #20
    7668:	4022      	ands	r2, r4
    766a:	4313      	orrs	r3, r2
    766c:	005b      	lsls	r3, r3, #1
    766e:	0859      	lsrs	r1, r3, #1
    7670:	bd10      	pop	{r4, pc}
    7672:	0021      	movs	r1, r4
    7674:	4091      	lsls	r1, r2
    7676:	000a      	movs	r2, r1
    7678:	210b      	movs	r1, #11
    767a:	1a08      	subs	r0, r1, r0
    767c:	40c4      	lsrs	r4, r0
    767e:	055b      	lsls	r3, r3, #21
    7680:	0324      	lsls	r4, r4, #12
    7682:	0b24      	lsrs	r4, r4, #12
    7684:	0d5b      	lsrs	r3, r3, #21
    7686:	e7e6      	b.n	7656 <__aeabi_ui2d+0x26>
    7688:	2300      	movs	r3, #0
    768a:	2400      	movs	r4, #0
    768c:	2200      	movs	r2, #0
    768e:	e7e2      	b.n	7656 <__aeabi_ui2d+0x26>
    7690:	0000041e 	.word	0x0000041e
    7694:	00000433 	.word	0x00000433
    7698:	00000413 	.word	0x00000413
    769c:	800fffff 	.word	0x800fffff

000076a0 <__aeabi_f2d>:
    76a0:	0041      	lsls	r1, r0, #1
    76a2:	0e09      	lsrs	r1, r1, #24
    76a4:	1c4b      	adds	r3, r1, #1
    76a6:	b570      	push	{r4, r5, r6, lr}
    76a8:	b2db      	uxtb	r3, r3
    76aa:	0246      	lsls	r6, r0, #9
    76ac:	0a75      	lsrs	r5, r6, #9
    76ae:	0fc4      	lsrs	r4, r0, #31
    76b0:	2b01      	cmp	r3, #1
    76b2:	dd14      	ble.n	76de <__aeabi_f2d+0x3e>
    76b4:	23e0      	movs	r3, #224	; 0xe0
    76b6:	009b      	lsls	r3, r3, #2
    76b8:	076d      	lsls	r5, r5, #29
    76ba:	0b36      	lsrs	r6, r6, #12
    76bc:	18cb      	adds	r3, r1, r3
    76be:	2100      	movs	r1, #0
    76c0:	0d0a      	lsrs	r2, r1, #20
    76c2:	0028      	movs	r0, r5
    76c4:	0512      	lsls	r2, r2, #20
    76c6:	4d1c      	ldr	r5, [pc, #112]	; (7738 <__aeabi_f2d+0x98>)
    76c8:	4332      	orrs	r2, r6
    76ca:	055b      	lsls	r3, r3, #21
    76cc:	402a      	ands	r2, r5
    76ce:	085b      	lsrs	r3, r3, #1
    76d0:	4313      	orrs	r3, r2
    76d2:	005b      	lsls	r3, r3, #1
    76d4:	07e4      	lsls	r4, r4, #31
    76d6:	085b      	lsrs	r3, r3, #1
    76d8:	4323      	orrs	r3, r4
    76da:	0019      	movs	r1, r3
    76dc:	bd70      	pop	{r4, r5, r6, pc}
    76de:	2900      	cmp	r1, #0
    76e0:	d114      	bne.n	770c <__aeabi_f2d+0x6c>
    76e2:	2d00      	cmp	r5, #0
    76e4:	d01e      	beq.n	7724 <__aeabi_f2d+0x84>
    76e6:	0028      	movs	r0, r5
    76e8:	f000 f8b6 	bl	7858 <__clzsi2>
    76ec:	280a      	cmp	r0, #10
    76ee:	dc1c      	bgt.n	772a <__aeabi_f2d+0x8a>
    76f0:	230b      	movs	r3, #11
    76f2:	002a      	movs	r2, r5
    76f4:	1a1b      	subs	r3, r3, r0
    76f6:	40da      	lsrs	r2, r3
    76f8:	0003      	movs	r3, r0
    76fa:	3315      	adds	r3, #21
    76fc:	409d      	lsls	r5, r3
    76fe:	4b0f      	ldr	r3, [pc, #60]	; (773c <__aeabi_f2d+0x9c>)
    7700:	0312      	lsls	r2, r2, #12
    7702:	1a1b      	subs	r3, r3, r0
    7704:	055b      	lsls	r3, r3, #21
    7706:	0b16      	lsrs	r6, r2, #12
    7708:	0d5b      	lsrs	r3, r3, #21
    770a:	e7d8      	b.n	76be <__aeabi_f2d+0x1e>
    770c:	2d00      	cmp	r5, #0
    770e:	d006      	beq.n	771e <__aeabi_f2d+0x7e>
    7710:	0b32      	lsrs	r2, r6, #12
    7712:	2680      	movs	r6, #128	; 0x80
    7714:	0336      	lsls	r6, r6, #12
    7716:	076d      	lsls	r5, r5, #29
    7718:	4316      	orrs	r6, r2
    771a:	4b09      	ldr	r3, [pc, #36]	; (7740 <__aeabi_f2d+0xa0>)
    771c:	e7cf      	b.n	76be <__aeabi_f2d+0x1e>
    771e:	4b08      	ldr	r3, [pc, #32]	; (7740 <__aeabi_f2d+0xa0>)
    7720:	2600      	movs	r6, #0
    7722:	e7cc      	b.n	76be <__aeabi_f2d+0x1e>
    7724:	2300      	movs	r3, #0
    7726:	2600      	movs	r6, #0
    7728:	e7c9      	b.n	76be <__aeabi_f2d+0x1e>
    772a:	0003      	movs	r3, r0
    772c:	002a      	movs	r2, r5
    772e:	3b0b      	subs	r3, #11
    7730:	409a      	lsls	r2, r3
    7732:	2500      	movs	r5, #0
    7734:	e7e3      	b.n	76fe <__aeabi_f2d+0x5e>
    7736:	46c0      	nop			; (mov r8, r8)
    7738:	800fffff 	.word	0x800fffff
    773c:	00000389 	.word	0x00000389
    7740:	000007ff 	.word	0x000007ff

00007744 <__aeabi_d2f>:
    7744:	b5f0      	push	{r4, r5, r6, r7, lr}
    7746:	004c      	lsls	r4, r1, #1
    7748:	0d64      	lsrs	r4, r4, #21
    774a:	030b      	lsls	r3, r1, #12
    774c:	1c62      	adds	r2, r4, #1
    774e:	0f45      	lsrs	r5, r0, #29
    7750:	0a5b      	lsrs	r3, r3, #9
    7752:	0552      	lsls	r2, r2, #21
    7754:	432b      	orrs	r3, r5
    7756:	0fc9      	lsrs	r1, r1, #31
    7758:	00c5      	lsls	r5, r0, #3
    775a:	0d52      	lsrs	r2, r2, #21
    775c:	2a01      	cmp	r2, #1
    775e:	dd28      	ble.n	77b2 <__aeabi_d2f+0x6e>
    7760:	4a3a      	ldr	r2, [pc, #232]	; (784c <__aeabi_d2f+0x108>)
    7762:	18a6      	adds	r6, r4, r2
    7764:	2efe      	cmp	r6, #254	; 0xfe
    7766:	dc1b      	bgt.n	77a0 <__aeabi_d2f+0x5c>
    7768:	2e00      	cmp	r6, #0
    776a:	dd3e      	ble.n	77ea <__aeabi_d2f+0xa6>
    776c:	0180      	lsls	r0, r0, #6
    776e:	0002      	movs	r2, r0
    7770:	1e50      	subs	r0, r2, #1
    7772:	4182      	sbcs	r2, r0
    7774:	0f6d      	lsrs	r5, r5, #29
    7776:	432a      	orrs	r2, r5
    7778:	00db      	lsls	r3, r3, #3
    777a:	4313      	orrs	r3, r2
    777c:	075a      	lsls	r2, r3, #29
    777e:	d004      	beq.n	778a <__aeabi_d2f+0x46>
    7780:	220f      	movs	r2, #15
    7782:	401a      	ands	r2, r3
    7784:	2a04      	cmp	r2, #4
    7786:	d000      	beq.n	778a <__aeabi_d2f+0x46>
    7788:	3304      	adds	r3, #4
    778a:	2280      	movs	r2, #128	; 0x80
    778c:	04d2      	lsls	r2, r2, #19
    778e:	401a      	ands	r2, r3
    7790:	d05a      	beq.n	7848 <__aeabi_d2f+0x104>
    7792:	3601      	adds	r6, #1
    7794:	2eff      	cmp	r6, #255	; 0xff
    7796:	d003      	beq.n	77a0 <__aeabi_d2f+0x5c>
    7798:	019b      	lsls	r3, r3, #6
    779a:	0a5b      	lsrs	r3, r3, #9
    779c:	b2f4      	uxtb	r4, r6
    779e:	e001      	b.n	77a4 <__aeabi_d2f+0x60>
    77a0:	24ff      	movs	r4, #255	; 0xff
    77a2:	2300      	movs	r3, #0
    77a4:	0258      	lsls	r0, r3, #9
    77a6:	05e4      	lsls	r4, r4, #23
    77a8:	0a40      	lsrs	r0, r0, #9
    77aa:	07c9      	lsls	r1, r1, #31
    77ac:	4320      	orrs	r0, r4
    77ae:	4308      	orrs	r0, r1
    77b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    77b2:	2c00      	cmp	r4, #0
    77b4:	d007      	beq.n	77c6 <__aeabi_d2f+0x82>
    77b6:	431d      	orrs	r5, r3
    77b8:	d0f2      	beq.n	77a0 <__aeabi_d2f+0x5c>
    77ba:	2080      	movs	r0, #128	; 0x80
    77bc:	00db      	lsls	r3, r3, #3
    77be:	0480      	lsls	r0, r0, #18
    77c0:	4303      	orrs	r3, r0
    77c2:	26ff      	movs	r6, #255	; 0xff
    77c4:	e7da      	b.n	777c <__aeabi_d2f+0x38>
    77c6:	432b      	orrs	r3, r5
    77c8:	d003      	beq.n	77d2 <__aeabi_d2f+0x8e>
    77ca:	2305      	movs	r3, #5
    77cc:	08db      	lsrs	r3, r3, #3
    77ce:	2cff      	cmp	r4, #255	; 0xff
    77d0:	d003      	beq.n	77da <__aeabi_d2f+0x96>
    77d2:	025b      	lsls	r3, r3, #9
    77d4:	0a5b      	lsrs	r3, r3, #9
    77d6:	b2e4      	uxtb	r4, r4
    77d8:	e7e4      	b.n	77a4 <__aeabi_d2f+0x60>
    77da:	2b00      	cmp	r3, #0
    77dc:	d032      	beq.n	7844 <__aeabi_d2f+0x100>
    77de:	2080      	movs	r0, #128	; 0x80
    77e0:	03c0      	lsls	r0, r0, #15
    77e2:	4303      	orrs	r3, r0
    77e4:	025b      	lsls	r3, r3, #9
    77e6:	0a5b      	lsrs	r3, r3, #9
    77e8:	e7dc      	b.n	77a4 <__aeabi_d2f+0x60>
    77ea:	0032      	movs	r2, r6
    77ec:	3217      	adds	r2, #23
    77ee:	db14      	blt.n	781a <__aeabi_d2f+0xd6>
    77f0:	2280      	movs	r2, #128	; 0x80
    77f2:	271e      	movs	r7, #30
    77f4:	0412      	lsls	r2, r2, #16
    77f6:	4313      	orrs	r3, r2
    77f8:	1bbf      	subs	r7, r7, r6
    77fa:	2f1f      	cmp	r7, #31
    77fc:	dc0f      	bgt.n	781e <__aeabi_d2f+0xda>
    77fe:	4a14      	ldr	r2, [pc, #80]	; (7850 <__aeabi_d2f+0x10c>)
    7800:	4694      	mov	ip, r2
    7802:	4464      	add	r4, ip
    7804:	002a      	movs	r2, r5
    7806:	40a5      	lsls	r5, r4
    7808:	002e      	movs	r6, r5
    780a:	40a3      	lsls	r3, r4
    780c:	1e75      	subs	r5, r6, #1
    780e:	41ae      	sbcs	r6, r5
    7810:	40fa      	lsrs	r2, r7
    7812:	4333      	orrs	r3, r6
    7814:	4313      	orrs	r3, r2
    7816:	2600      	movs	r6, #0
    7818:	e7b0      	b.n	777c <__aeabi_d2f+0x38>
    781a:	2400      	movs	r4, #0
    781c:	e7d5      	b.n	77ca <__aeabi_d2f+0x86>
    781e:	2202      	movs	r2, #2
    7820:	4252      	negs	r2, r2
    7822:	1b96      	subs	r6, r2, r6
    7824:	001a      	movs	r2, r3
    7826:	40f2      	lsrs	r2, r6
    7828:	2f20      	cmp	r7, #32
    782a:	d009      	beq.n	7840 <__aeabi_d2f+0xfc>
    782c:	4809      	ldr	r0, [pc, #36]	; (7854 <__aeabi_d2f+0x110>)
    782e:	4684      	mov	ip, r0
    7830:	4464      	add	r4, ip
    7832:	40a3      	lsls	r3, r4
    7834:	432b      	orrs	r3, r5
    7836:	1e5d      	subs	r5, r3, #1
    7838:	41ab      	sbcs	r3, r5
    783a:	2600      	movs	r6, #0
    783c:	4313      	orrs	r3, r2
    783e:	e79d      	b.n	777c <__aeabi_d2f+0x38>
    7840:	2300      	movs	r3, #0
    7842:	e7f7      	b.n	7834 <__aeabi_d2f+0xf0>
    7844:	2300      	movs	r3, #0
    7846:	e7ad      	b.n	77a4 <__aeabi_d2f+0x60>
    7848:	0034      	movs	r4, r6
    784a:	e7bf      	b.n	77cc <__aeabi_d2f+0x88>
    784c:	fffffc80 	.word	0xfffffc80
    7850:	fffffc82 	.word	0xfffffc82
    7854:	fffffca2 	.word	0xfffffca2

00007858 <__clzsi2>:
    7858:	211c      	movs	r1, #28
    785a:	2301      	movs	r3, #1
    785c:	041b      	lsls	r3, r3, #16
    785e:	4298      	cmp	r0, r3
    7860:	d301      	bcc.n	7866 <__clzsi2+0xe>
    7862:	0c00      	lsrs	r0, r0, #16
    7864:	3910      	subs	r1, #16
    7866:	0a1b      	lsrs	r3, r3, #8
    7868:	4298      	cmp	r0, r3
    786a:	d301      	bcc.n	7870 <__clzsi2+0x18>
    786c:	0a00      	lsrs	r0, r0, #8
    786e:	3908      	subs	r1, #8
    7870:	091b      	lsrs	r3, r3, #4
    7872:	4298      	cmp	r0, r3
    7874:	d301      	bcc.n	787a <__clzsi2+0x22>
    7876:	0900      	lsrs	r0, r0, #4
    7878:	3904      	subs	r1, #4
    787a:	a202      	add	r2, pc, #8	; (adr r2, 7884 <__clzsi2+0x2c>)
    787c:	5c10      	ldrb	r0, [r2, r0]
    787e:	1840      	adds	r0, r0, r1
    7880:	4770      	bx	lr
    7882:	46c0      	nop			; (mov r8, r8)
    7884:	02020304 	.word	0x02020304
    7888:	01010101 	.word	0x01010101
	...

00007894 <__errno>:
    7894:	4b01      	ldr	r3, [pc, #4]	; (789c <__errno+0x8>)
    7896:	6818      	ldr	r0, [r3, #0]
    7898:	4770      	bx	lr
    789a:	46c0      	nop			; (mov r8, r8)
    789c:	20000014 	.word	0x20000014

000078a0 <__libc_init_array>:
    78a0:	b570      	push	{r4, r5, r6, lr}
    78a2:	2600      	movs	r6, #0
    78a4:	4d0c      	ldr	r5, [pc, #48]	; (78d8 <__libc_init_array+0x38>)
    78a6:	4c0d      	ldr	r4, [pc, #52]	; (78dc <__libc_init_array+0x3c>)
    78a8:	1b64      	subs	r4, r4, r5
    78aa:	10a4      	asrs	r4, r4, #2
    78ac:	42a6      	cmp	r6, r4
    78ae:	d109      	bne.n	78c4 <__libc_init_array+0x24>
    78b0:	2600      	movs	r6, #0
    78b2:	f000 fd1b 	bl	82ec <_init>
    78b6:	4d0a      	ldr	r5, [pc, #40]	; (78e0 <__libc_init_array+0x40>)
    78b8:	4c0a      	ldr	r4, [pc, #40]	; (78e4 <__libc_init_array+0x44>)
    78ba:	1b64      	subs	r4, r4, r5
    78bc:	10a4      	asrs	r4, r4, #2
    78be:	42a6      	cmp	r6, r4
    78c0:	d105      	bne.n	78ce <__libc_init_array+0x2e>
    78c2:	bd70      	pop	{r4, r5, r6, pc}
    78c4:	00b3      	lsls	r3, r6, #2
    78c6:	58eb      	ldr	r3, [r5, r3]
    78c8:	4798      	blx	r3
    78ca:	3601      	adds	r6, #1
    78cc:	e7ee      	b.n	78ac <__libc_init_array+0xc>
    78ce:	00b3      	lsls	r3, r6, #2
    78d0:	58eb      	ldr	r3, [r5, r3]
    78d2:	4798      	blx	r3
    78d4:	3601      	adds	r6, #1
    78d6:	e7f2      	b.n	78be <__libc_init_array+0x1e>
    78d8:	000082f8 	.word	0x000082f8
    78dc:	000082f8 	.word	0x000082f8
    78e0:	000082f8 	.word	0x000082f8
    78e4:	000082fc 	.word	0x000082fc

000078e8 <memcpy>:
    78e8:	2300      	movs	r3, #0
    78ea:	b510      	push	{r4, lr}
    78ec:	429a      	cmp	r2, r3
    78ee:	d100      	bne.n	78f2 <memcpy+0xa>
    78f0:	bd10      	pop	{r4, pc}
    78f2:	5ccc      	ldrb	r4, [r1, r3]
    78f4:	54c4      	strb	r4, [r0, r3]
    78f6:	3301      	adds	r3, #1
    78f8:	e7f8      	b.n	78ec <memcpy+0x4>

000078fa <memset>:
    78fa:	0003      	movs	r3, r0
    78fc:	1882      	adds	r2, r0, r2
    78fe:	4293      	cmp	r3, r2
    7900:	d100      	bne.n	7904 <memset+0xa>
    7902:	4770      	bx	lr
    7904:	7019      	strb	r1, [r3, #0]
    7906:	3301      	adds	r3, #1
    7908:	e7f9      	b.n	78fe <memset+0x4>
	...

0000790c <siprintf>:
    790c:	b40e      	push	{r1, r2, r3}
    790e:	b510      	push	{r4, lr}
    7910:	b09d      	sub	sp, #116	; 0x74
    7912:	a902      	add	r1, sp, #8
    7914:	9002      	str	r0, [sp, #8]
    7916:	6108      	str	r0, [r1, #16]
    7918:	480b      	ldr	r0, [pc, #44]	; (7948 <siprintf+0x3c>)
    791a:	2482      	movs	r4, #130	; 0x82
    791c:	6088      	str	r0, [r1, #8]
    791e:	6148      	str	r0, [r1, #20]
    7920:	2001      	movs	r0, #1
    7922:	4240      	negs	r0, r0
    7924:	ab1f      	add	r3, sp, #124	; 0x7c
    7926:	81c8      	strh	r0, [r1, #14]
    7928:	4808      	ldr	r0, [pc, #32]	; (794c <siprintf+0x40>)
    792a:	cb04      	ldmia	r3!, {r2}
    792c:	00a4      	lsls	r4, r4, #2
    792e:	6800      	ldr	r0, [r0, #0]
    7930:	9301      	str	r3, [sp, #4]
    7932:	818c      	strh	r4, [r1, #12]
    7934:	f000 f86e 	bl	7a14 <_svfiprintf_r>
    7938:	2300      	movs	r3, #0
    793a:	9a02      	ldr	r2, [sp, #8]
    793c:	7013      	strb	r3, [r2, #0]
    793e:	b01d      	add	sp, #116	; 0x74
    7940:	bc10      	pop	{r4}
    7942:	bc08      	pop	{r3}
    7944:	b003      	add	sp, #12
    7946:	4718      	bx	r3
    7948:	7fffffff 	.word	0x7fffffff
    794c:	20000014 	.word	0x20000014

00007950 <__ssputs_r>:
    7950:	b5f0      	push	{r4, r5, r6, r7, lr}
    7952:	688e      	ldr	r6, [r1, #8]
    7954:	b085      	sub	sp, #20
    7956:	0007      	movs	r7, r0
    7958:	000c      	movs	r4, r1
    795a:	9203      	str	r2, [sp, #12]
    795c:	9301      	str	r3, [sp, #4]
    795e:	429e      	cmp	r6, r3
    7960:	d839      	bhi.n	79d6 <__ssputs_r+0x86>
    7962:	2390      	movs	r3, #144	; 0x90
    7964:	898a      	ldrh	r2, [r1, #12]
    7966:	00db      	lsls	r3, r3, #3
    7968:	421a      	tst	r2, r3
    796a:	d034      	beq.n	79d6 <__ssputs_r+0x86>
    796c:	2503      	movs	r5, #3
    796e:	6909      	ldr	r1, [r1, #16]
    7970:	6823      	ldr	r3, [r4, #0]
    7972:	1a5b      	subs	r3, r3, r1
    7974:	9302      	str	r3, [sp, #8]
    7976:	6963      	ldr	r3, [r4, #20]
    7978:	9802      	ldr	r0, [sp, #8]
    797a:	435d      	muls	r5, r3
    797c:	0feb      	lsrs	r3, r5, #31
    797e:	195d      	adds	r5, r3, r5
    7980:	9b01      	ldr	r3, [sp, #4]
    7982:	106d      	asrs	r5, r5, #1
    7984:	3301      	adds	r3, #1
    7986:	181b      	adds	r3, r3, r0
    7988:	42ab      	cmp	r3, r5
    798a:	d900      	bls.n	798e <__ssputs_r+0x3e>
    798c:	001d      	movs	r5, r3
    798e:	0553      	lsls	r3, r2, #21
    7990:	d532      	bpl.n	79f8 <__ssputs_r+0xa8>
    7992:	0029      	movs	r1, r5
    7994:	0038      	movs	r0, r7
    7996:	f000 fb31 	bl	7ffc <_malloc_r>
    799a:	1e06      	subs	r6, r0, #0
    799c:	d109      	bne.n	79b2 <__ssputs_r+0x62>
    799e:	230c      	movs	r3, #12
    79a0:	603b      	str	r3, [r7, #0]
    79a2:	2340      	movs	r3, #64	; 0x40
    79a4:	2001      	movs	r0, #1
    79a6:	89a2      	ldrh	r2, [r4, #12]
    79a8:	4240      	negs	r0, r0
    79aa:	4313      	orrs	r3, r2
    79ac:	81a3      	strh	r3, [r4, #12]
    79ae:	b005      	add	sp, #20
    79b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    79b2:	9a02      	ldr	r2, [sp, #8]
    79b4:	6921      	ldr	r1, [r4, #16]
    79b6:	f7ff ff97 	bl	78e8 <memcpy>
    79ba:	89a3      	ldrh	r3, [r4, #12]
    79bc:	4a14      	ldr	r2, [pc, #80]	; (7a10 <__ssputs_r+0xc0>)
    79be:	401a      	ands	r2, r3
    79c0:	2380      	movs	r3, #128	; 0x80
    79c2:	4313      	orrs	r3, r2
    79c4:	81a3      	strh	r3, [r4, #12]
    79c6:	9b02      	ldr	r3, [sp, #8]
    79c8:	6126      	str	r6, [r4, #16]
    79ca:	18f6      	adds	r6, r6, r3
    79cc:	6026      	str	r6, [r4, #0]
    79ce:	6165      	str	r5, [r4, #20]
    79d0:	9e01      	ldr	r6, [sp, #4]
    79d2:	1aed      	subs	r5, r5, r3
    79d4:	60a5      	str	r5, [r4, #8]
    79d6:	9b01      	ldr	r3, [sp, #4]
    79d8:	42b3      	cmp	r3, r6
    79da:	d200      	bcs.n	79de <__ssputs_r+0x8e>
    79dc:	001e      	movs	r6, r3
    79de:	0032      	movs	r2, r6
    79e0:	9903      	ldr	r1, [sp, #12]
    79e2:	6820      	ldr	r0, [r4, #0]
    79e4:	f000 faad 	bl	7f42 <memmove>
    79e8:	68a3      	ldr	r3, [r4, #8]
    79ea:	2000      	movs	r0, #0
    79ec:	1b9b      	subs	r3, r3, r6
    79ee:	60a3      	str	r3, [r4, #8]
    79f0:	6823      	ldr	r3, [r4, #0]
    79f2:	199e      	adds	r6, r3, r6
    79f4:	6026      	str	r6, [r4, #0]
    79f6:	e7da      	b.n	79ae <__ssputs_r+0x5e>
    79f8:	002a      	movs	r2, r5
    79fa:	0038      	movs	r0, r7
    79fc:	f000 fb5c 	bl	80b8 <_realloc_r>
    7a00:	1e06      	subs	r6, r0, #0
    7a02:	d1e0      	bne.n	79c6 <__ssputs_r+0x76>
    7a04:	6921      	ldr	r1, [r4, #16]
    7a06:	0038      	movs	r0, r7
    7a08:	f000 faae 	bl	7f68 <_free_r>
    7a0c:	e7c7      	b.n	799e <__ssputs_r+0x4e>
    7a0e:	46c0      	nop			; (mov r8, r8)
    7a10:	fffffb7f 	.word	0xfffffb7f

00007a14 <_svfiprintf_r>:
    7a14:	b5f0      	push	{r4, r5, r6, r7, lr}
    7a16:	b09f      	sub	sp, #124	; 0x7c
    7a18:	9002      	str	r0, [sp, #8]
    7a1a:	9305      	str	r3, [sp, #20]
    7a1c:	898b      	ldrh	r3, [r1, #12]
    7a1e:	000f      	movs	r7, r1
    7a20:	0016      	movs	r6, r2
    7a22:	061b      	lsls	r3, r3, #24
    7a24:	d511      	bpl.n	7a4a <_svfiprintf_r+0x36>
    7a26:	690b      	ldr	r3, [r1, #16]
    7a28:	2b00      	cmp	r3, #0
    7a2a:	d10e      	bne.n	7a4a <_svfiprintf_r+0x36>
    7a2c:	2140      	movs	r1, #64	; 0x40
    7a2e:	f000 fae5 	bl	7ffc <_malloc_r>
    7a32:	6038      	str	r0, [r7, #0]
    7a34:	6138      	str	r0, [r7, #16]
    7a36:	2800      	cmp	r0, #0
    7a38:	d105      	bne.n	7a46 <_svfiprintf_r+0x32>
    7a3a:	230c      	movs	r3, #12
    7a3c:	9a02      	ldr	r2, [sp, #8]
    7a3e:	3801      	subs	r0, #1
    7a40:	6013      	str	r3, [r2, #0]
    7a42:	b01f      	add	sp, #124	; 0x7c
    7a44:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7a46:	2340      	movs	r3, #64	; 0x40
    7a48:	617b      	str	r3, [r7, #20]
    7a4a:	2300      	movs	r3, #0
    7a4c:	ad06      	add	r5, sp, #24
    7a4e:	616b      	str	r3, [r5, #20]
    7a50:	3320      	adds	r3, #32
    7a52:	766b      	strb	r3, [r5, #25]
    7a54:	3310      	adds	r3, #16
    7a56:	76ab      	strb	r3, [r5, #26]
    7a58:	0034      	movs	r4, r6
    7a5a:	7823      	ldrb	r3, [r4, #0]
    7a5c:	2b00      	cmp	r3, #0
    7a5e:	d147      	bne.n	7af0 <_svfiprintf_r+0xdc>
    7a60:	1ba3      	subs	r3, r4, r6
    7a62:	9304      	str	r3, [sp, #16]
    7a64:	d00d      	beq.n	7a82 <_svfiprintf_r+0x6e>
    7a66:	1ba3      	subs	r3, r4, r6
    7a68:	0032      	movs	r2, r6
    7a6a:	0039      	movs	r1, r7
    7a6c:	9802      	ldr	r0, [sp, #8]
    7a6e:	f7ff ff6f 	bl	7950 <__ssputs_r>
    7a72:	1c43      	adds	r3, r0, #1
    7a74:	d100      	bne.n	7a78 <_svfiprintf_r+0x64>
    7a76:	e0b5      	b.n	7be4 <_svfiprintf_r+0x1d0>
    7a78:	696a      	ldr	r2, [r5, #20]
    7a7a:	9b04      	ldr	r3, [sp, #16]
    7a7c:	4694      	mov	ip, r2
    7a7e:	4463      	add	r3, ip
    7a80:	616b      	str	r3, [r5, #20]
    7a82:	7823      	ldrb	r3, [r4, #0]
    7a84:	2b00      	cmp	r3, #0
    7a86:	d100      	bne.n	7a8a <_svfiprintf_r+0x76>
    7a88:	e0ac      	b.n	7be4 <_svfiprintf_r+0x1d0>
    7a8a:	2201      	movs	r2, #1
    7a8c:	2300      	movs	r3, #0
    7a8e:	4252      	negs	r2, r2
    7a90:	606a      	str	r2, [r5, #4]
    7a92:	a902      	add	r1, sp, #8
    7a94:	3254      	adds	r2, #84	; 0x54
    7a96:	1852      	adds	r2, r2, r1
    7a98:	3401      	adds	r4, #1
    7a9a:	602b      	str	r3, [r5, #0]
    7a9c:	60eb      	str	r3, [r5, #12]
    7a9e:	60ab      	str	r3, [r5, #8]
    7aa0:	7013      	strb	r3, [r2, #0]
    7aa2:	65ab      	str	r3, [r5, #88]	; 0x58
    7aa4:	4e58      	ldr	r6, [pc, #352]	; (7c08 <_svfiprintf_r+0x1f4>)
    7aa6:	2205      	movs	r2, #5
    7aa8:	7821      	ldrb	r1, [r4, #0]
    7aaa:	0030      	movs	r0, r6
    7aac:	f000 fa3e 	bl	7f2c <memchr>
    7ab0:	1c62      	adds	r2, r4, #1
    7ab2:	2800      	cmp	r0, #0
    7ab4:	d120      	bne.n	7af8 <_svfiprintf_r+0xe4>
    7ab6:	6829      	ldr	r1, [r5, #0]
    7ab8:	06cb      	lsls	r3, r1, #27
    7aba:	d504      	bpl.n	7ac6 <_svfiprintf_r+0xb2>
    7abc:	2353      	movs	r3, #83	; 0x53
    7abe:	ae02      	add	r6, sp, #8
    7ac0:	3020      	adds	r0, #32
    7ac2:	199b      	adds	r3, r3, r6
    7ac4:	7018      	strb	r0, [r3, #0]
    7ac6:	070b      	lsls	r3, r1, #28
    7ac8:	d504      	bpl.n	7ad4 <_svfiprintf_r+0xc0>
    7aca:	2353      	movs	r3, #83	; 0x53
    7acc:	202b      	movs	r0, #43	; 0x2b
    7ace:	ae02      	add	r6, sp, #8
    7ad0:	199b      	adds	r3, r3, r6
    7ad2:	7018      	strb	r0, [r3, #0]
    7ad4:	7823      	ldrb	r3, [r4, #0]
    7ad6:	2b2a      	cmp	r3, #42	; 0x2a
    7ad8:	d016      	beq.n	7b08 <_svfiprintf_r+0xf4>
    7ada:	2000      	movs	r0, #0
    7adc:	210a      	movs	r1, #10
    7ade:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7ae0:	7822      	ldrb	r2, [r4, #0]
    7ae2:	3a30      	subs	r2, #48	; 0x30
    7ae4:	2a09      	cmp	r2, #9
    7ae6:	d955      	bls.n	7b94 <_svfiprintf_r+0x180>
    7ae8:	2800      	cmp	r0, #0
    7aea:	d015      	beq.n	7b18 <_svfiprintf_r+0x104>
    7aec:	9309      	str	r3, [sp, #36]	; 0x24
    7aee:	e013      	b.n	7b18 <_svfiprintf_r+0x104>
    7af0:	2b25      	cmp	r3, #37	; 0x25
    7af2:	d0b5      	beq.n	7a60 <_svfiprintf_r+0x4c>
    7af4:	3401      	adds	r4, #1
    7af6:	e7b0      	b.n	7a5a <_svfiprintf_r+0x46>
    7af8:	2301      	movs	r3, #1
    7afa:	1b80      	subs	r0, r0, r6
    7afc:	4083      	lsls	r3, r0
    7afe:	6829      	ldr	r1, [r5, #0]
    7b00:	0014      	movs	r4, r2
    7b02:	430b      	orrs	r3, r1
    7b04:	602b      	str	r3, [r5, #0]
    7b06:	e7cd      	b.n	7aa4 <_svfiprintf_r+0x90>
    7b08:	9b05      	ldr	r3, [sp, #20]
    7b0a:	1d18      	adds	r0, r3, #4
    7b0c:	681b      	ldr	r3, [r3, #0]
    7b0e:	9005      	str	r0, [sp, #20]
    7b10:	2b00      	cmp	r3, #0
    7b12:	db39      	blt.n	7b88 <_svfiprintf_r+0x174>
    7b14:	9309      	str	r3, [sp, #36]	; 0x24
    7b16:	0014      	movs	r4, r2
    7b18:	7823      	ldrb	r3, [r4, #0]
    7b1a:	2b2e      	cmp	r3, #46	; 0x2e
    7b1c:	d10b      	bne.n	7b36 <_svfiprintf_r+0x122>
    7b1e:	7863      	ldrb	r3, [r4, #1]
    7b20:	1c62      	adds	r2, r4, #1
    7b22:	2b2a      	cmp	r3, #42	; 0x2a
    7b24:	d13e      	bne.n	7ba4 <_svfiprintf_r+0x190>
    7b26:	9b05      	ldr	r3, [sp, #20]
    7b28:	3402      	adds	r4, #2
    7b2a:	1d1a      	adds	r2, r3, #4
    7b2c:	681b      	ldr	r3, [r3, #0]
    7b2e:	9205      	str	r2, [sp, #20]
    7b30:	2b00      	cmp	r3, #0
    7b32:	db34      	blt.n	7b9e <_svfiprintf_r+0x18a>
    7b34:	9307      	str	r3, [sp, #28]
    7b36:	4e35      	ldr	r6, [pc, #212]	; (7c0c <_svfiprintf_r+0x1f8>)
    7b38:	7821      	ldrb	r1, [r4, #0]
    7b3a:	2203      	movs	r2, #3
    7b3c:	0030      	movs	r0, r6
    7b3e:	f000 f9f5 	bl	7f2c <memchr>
    7b42:	2800      	cmp	r0, #0
    7b44:	d006      	beq.n	7b54 <_svfiprintf_r+0x140>
    7b46:	2340      	movs	r3, #64	; 0x40
    7b48:	1b80      	subs	r0, r0, r6
    7b4a:	4083      	lsls	r3, r0
    7b4c:	682a      	ldr	r2, [r5, #0]
    7b4e:	3401      	adds	r4, #1
    7b50:	4313      	orrs	r3, r2
    7b52:	602b      	str	r3, [r5, #0]
    7b54:	7821      	ldrb	r1, [r4, #0]
    7b56:	2206      	movs	r2, #6
    7b58:	482d      	ldr	r0, [pc, #180]	; (7c10 <_svfiprintf_r+0x1fc>)
    7b5a:	1c66      	adds	r6, r4, #1
    7b5c:	7629      	strb	r1, [r5, #24]
    7b5e:	f000 f9e5 	bl	7f2c <memchr>
    7b62:	2800      	cmp	r0, #0
    7b64:	d046      	beq.n	7bf4 <_svfiprintf_r+0x1e0>
    7b66:	4b2b      	ldr	r3, [pc, #172]	; (7c14 <_svfiprintf_r+0x200>)
    7b68:	2b00      	cmp	r3, #0
    7b6a:	d12f      	bne.n	7bcc <_svfiprintf_r+0x1b8>
    7b6c:	6829      	ldr	r1, [r5, #0]
    7b6e:	9b05      	ldr	r3, [sp, #20]
    7b70:	2207      	movs	r2, #7
    7b72:	05c9      	lsls	r1, r1, #23
    7b74:	d528      	bpl.n	7bc8 <_svfiprintf_r+0x1b4>
    7b76:	189b      	adds	r3, r3, r2
    7b78:	4393      	bics	r3, r2
    7b7a:	3308      	adds	r3, #8
    7b7c:	9305      	str	r3, [sp, #20]
    7b7e:	696b      	ldr	r3, [r5, #20]
    7b80:	9a03      	ldr	r2, [sp, #12]
    7b82:	189b      	adds	r3, r3, r2
    7b84:	616b      	str	r3, [r5, #20]
    7b86:	e767      	b.n	7a58 <_svfiprintf_r+0x44>
    7b88:	425b      	negs	r3, r3
    7b8a:	60eb      	str	r3, [r5, #12]
    7b8c:	2302      	movs	r3, #2
    7b8e:	430b      	orrs	r3, r1
    7b90:	602b      	str	r3, [r5, #0]
    7b92:	e7c0      	b.n	7b16 <_svfiprintf_r+0x102>
    7b94:	434b      	muls	r3, r1
    7b96:	3401      	adds	r4, #1
    7b98:	189b      	adds	r3, r3, r2
    7b9a:	2001      	movs	r0, #1
    7b9c:	e7a0      	b.n	7ae0 <_svfiprintf_r+0xcc>
    7b9e:	2301      	movs	r3, #1
    7ba0:	425b      	negs	r3, r3
    7ba2:	e7c7      	b.n	7b34 <_svfiprintf_r+0x120>
    7ba4:	2300      	movs	r3, #0
    7ba6:	0014      	movs	r4, r2
    7ba8:	200a      	movs	r0, #10
    7baa:	001a      	movs	r2, r3
    7bac:	606b      	str	r3, [r5, #4]
    7bae:	7821      	ldrb	r1, [r4, #0]
    7bb0:	3930      	subs	r1, #48	; 0x30
    7bb2:	2909      	cmp	r1, #9
    7bb4:	d903      	bls.n	7bbe <_svfiprintf_r+0x1aa>
    7bb6:	2b00      	cmp	r3, #0
    7bb8:	d0bd      	beq.n	7b36 <_svfiprintf_r+0x122>
    7bba:	9207      	str	r2, [sp, #28]
    7bbc:	e7bb      	b.n	7b36 <_svfiprintf_r+0x122>
    7bbe:	4342      	muls	r2, r0
    7bc0:	3401      	adds	r4, #1
    7bc2:	1852      	adds	r2, r2, r1
    7bc4:	2301      	movs	r3, #1
    7bc6:	e7f2      	b.n	7bae <_svfiprintf_r+0x19a>
    7bc8:	3307      	adds	r3, #7
    7bca:	e7d5      	b.n	7b78 <_svfiprintf_r+0x164>
    7bcc:	ab05      	add	r3, sp, #20
    7bce:	9300      	str	r3, [sp, #0]
    7bd0:	003a      	movs	r2, r7
    7bd2:	4b11      	ldr	r3, [pc, #68]	; (7c18 <_svfiprintf_r+0x204>)
    7bd4:	0029      	movs	r1, r5
    7bd6:	9802      	ldr	r0, [sp, #8]
    7bd8:	e000      	b.n	7bdc <_svfiprintf_r+0x1c8>
    7bda:	bf00      	nop
    7bdc:	9003      	str	r0, [sp, #12]
    7bde:	9b03      	ldr	r3, [sp, #12]
    7be0:	3301      	adds	r3, #1
    7be2:	d1cc      	bne.n	7b7e <_svfiprintf_r+0x16a>
    7be4:	89bb      	ldrh	r3, [r7, #12]
    7be6:	980b      	ldr	r0, [sp, #44]	; 0x2c
    7be8:	065b      	lsls	r3, r3, #25
    7bea:	d400      	bmi.n	7bee <_svfiprintf_r+0x1da>
    7bec:	e729      	b.n	7a42 <_svfiprintf_r+0x2e>
    7bee:	2001      	movs	r0, #1
    7bf0:	4240      	negs	r0, r0
    7bf2:	e726      	b.n	7a42 <_svfiprintf_r+0x2e>
    7bf4:	ab05      	add	r3, sp, #20
    7bf6:	9300      	str	r3, [sp, #0]
    7bf8:	003a      	movs	r2, r7
    7bfa:	4b07      	ldr	r3, [pc, #28]	; (7c18 <_svfiprintf_r+0x204>)
    7bfc:	0029      	movs	r1, r5
    7bfe:	9802      	ldr	r0, [sp, #8]
    7c00:	f000 f87a 	bl	7cf8 <_printf_i>
    7c04:	e7ea      	b.n	7bdc <_svfiprintf_r+0x1c8>
    7c06:	46c0      	nop			; (mov r8, r8)
    7c08:	000082b8 	.word	0x000082b8
    7c0c:	000082be 	.word	0x000082be
    7c10:	000082c2 	.word	0x000082c2
    7c14:	00000000 	.word	0x00000000
    7c18:	00007951 	.word	0x00007951

00007c1c <_printf_common>:
    7c1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7c1e:	0015      	movs	r5, r2
    7c20:	9301      	str	r3, [sp, #4]
    7c22:	688a      	ldr	r2, [r1, #8]
    7c24:	690b      	ldr	r3, [r1, #16]
    7c26:	9000      	str	r0, [sp, #0]
    7c28:	000c      	movs	r4, r1
    7c2a:	4293      	cmp	r3, r2
    7c2c:	da00      	bge.n	7c30 <_printf_common+0x14>
    7c2e:	0013      	movs	r3, r2
    7c30:	0022      	movs	r2, r4
    7c32:	602b      	str	r3, [r5, #0]
    7c34:	3243      	adds	r2, #67	; 0x43
    7c36:	7812      	ldrb	r2, [r2, #0]
    7c38:	2a00      	cmp	r2, #0
    7c3a:	d001      	beq.n	7c40 <_printf_common+0x24>
    7c3c:	3301      	adds	r3, #1
    7c3e:	602b      	str	r3, [r5, #0]
    7c40:	6823      	ldr	r3, [r4, #0]
    7c42:	069b      	lsls	r3, r3, #26
    7c44:	d502      	bpl.n	7c4c <_printf_common+0x30>
    7c46:	682b      	ldr	r3, [r5, #0]
    7c48:	3302      	adds	r3, #2
    7c4a:	602b      	str	r3, [r5, #0]
    7c4c:	2706      	movs	r7, #6
    7c4e:	6823      	ldr	r3, [r4, #0]
    7c50:	401f      	ands	r7, r3
    7c52:	d027      	beq.n	7ca4 <_printf_common+0x88>
    7c54:	0023      	movs	r3, r4
    7c56:	3343      	adds	r3, #67	; 0x43
    7c58:	781b      	ldrb	r3, [r3, #0]
    7c5a:	1e5a      	subs	r2, r3, #1
    7c5c:	4193      	sbcs	r3, r2
    7c5e:	6822      	ldr	r2, [r4, #0]
    7c60:	0692      	lsls	r2, r2, #26
    7c62:	d430      	bmi.n	7cc6 <_printf_common+0xaa>
    7c64:	0022      	movs	r2, r4
    7c66:	9901      	ldr	r1, [sp, #4]
    7c68:	3243      	adds	r2, #67	; 0x43
    7c6a:	9800      	ldr	r0, [sp, #0]
    7c6c:	9e08      	ldr	r6, [sp, #32]
    7c6e:	47b0      	blx	r6
    7c70:	1c43      	adds	r3, r0, #1
    7c72:	d025      	beq.n	7cc0 <_printf_common+0xa4>
    7c74:	2306      	movs	r3, #6
    7c76:	6820      	ldr	r0, [r4, #0]
    7c78:	682a      	ldr	r2, [r5, #0]
    7c7a:	68e1      	ldr	r1, [r4, #12]
    7c7c:	4003      	ands	r3, r0
    7c7e:	2500      	movs	r5, #0
    7c80:	2b04      	cmp	r3, #4
    7c82:	d103      	bne.n	7c8c <_printf_common+0x70>
    7c84:	1a8d      	subs	r5, r1, r2
    7c86:	43eb      	mvns	r3, r5
    7c88:	17db      	asrs	r3, r3, #31
    7c8a:	401d      	ands	r5, r3
    7c8c:	68a3      	ldr	r3, [r4, #8]
    7c8e:	6922      	ldr	r2, [r4, #16]
    7c90:	4293      	cmp	r3, r2
    7c92:	dd01      	ble.n	7c98 <_printf_common+0x7c>
    7c94:	1a9b      	subs	r3, r3, r2
    7c96:	18ed      	adds	r5, r5, r3
    7c98:	2700      	movs	r7, #0
    7c9a:	42bd      	cmp	r5, r7
    7c9c:	d120      	bne.n	7ce0 <_printf_common+0xc4>
    7c9e:	2000      	movs	r0, #0
    7ca0:	e010      	b.n	7cc4 <_printf_common+0xa8>
    7ca2:	3701      	adds	r7, #1
    7ca4:	68e3      	ldr	r3, [r4, #12]
    7ca6:	682a      	ldr	r2, [r5, #0]
    7ca8:	1a9b      	subs	r3, r3, r2
    7caa:	429f      	cmp	r7, r3
    7cac:	dad2      	bge.n	7c54 <_printf_common+0x38>
    7cae:	0022      	movs	r2, r4
    7cb0:	2301      	movs	r3, #1
    7cb2:	3219      	adds	r2, #25
    7cb4:	9901      	ldr	r1, [sp, #4]
    7cb6:	9800      	ldr	r0, [sp, #0]
    7cb8:	9e08      	ldr	r6, [sp, #32]
    7cba:	47b0      	blx	r6
    7cbc:	1c43      	adds	r3, r0, #1
    7cbe:	d1f0      	bne.n	7ca2 <_printf_common+0x86>
    7cc0:	2001      	movs	r0, #1
    7cc2:	4240      	negs	r0, r0
    7cc4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    7cc6:	2030      	movs	r0, #48	; 0x30
    7cc8:	18e1      	adds	r1, r4, r3
    7cca:	3143      	adds	r1, #67	; 0x43
    7ccc:	7008      	strb	r0, [r1, #0]
    7cce:	0021      	movs	r1, r4
    7cd0:	1c5a      	adds	r2, r3, #1
    7cd2:	3145      	adds	r1, #69	; 0x45
    7cd4:	7809      	ldrb	r1, [r1, #0]
    7cd6:	18a2      	adds	r2, r4, r2
    7cd8:	3243      	adds	r2, #67	; 0x43
    7cda:	3302      	adds	r3, #2
    7cdc:	7011      	strb	r1, [r2, #0]
    7cde:	e7c1      	b.n	7c64 <_printf_common+0x48>
    7ce0:	0022      	movs	r2, r4
    7ce2:	2301      	movs	r3, #1
    7ce4:	321a      	adds	r2, #26
    7ce6:	9901      	ldr	r1, [sp, #4]
    7ce8:	9800      	ldr	r0, [sp, #0]
    7cea:	9e08      	ldr	r6, [sp, #32]
    7cec:	47b0      	blx	r6
    7cee:	1c43      	adds	r3, r0, #1
    7cf0:	d0e6      	beq.n	7cc0 <_printf_common+0xa4>
    7cf2:	3701      	adds	r7, #1
    7cf4:	e7d1      	b.n	7c9a <_printf_common+0x7e>
	...

00007cf8 <_printf_i>:
    7cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
    7cfa:	b08b      	sub	sp, #44	; 0x2c
    7cfc:	9206      	str	r2, [sp, #24]
    7cfe:	000a      	movs	r2, r1
    7d00:	3243      	adds	r2, #67	; 0x43
    7d02:	9307      	str	r3, [sp, #28]
    7d04:	9005      	str	r0, [sp, #20]
    7d06:	9204      	str	r2, [sp, #16]
    7d08:	7e0a      	ldrb	r2, [r1, #24]
    7d0a:	000c      	movs	r4, r1
    7d0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    7d0e:	2a6e      	cmp	r2, #110	; 0x6e
    7d10:	d100      	bne.n	7d14 <_printf_i+0x1c>
    7d12:	e08f      	b.n	7e34 <_printf_i+0x13c>
    7d14:	d817      	bhi.n	7d46 <_printf_i+0x4e>
    7d16:	2a63      	cmp	r2, #99	; 0x63
    7d18:	d02c      	beq.n	7d74 <_printf_i+0x7c>
    7d1a:	d808      	bhi.n	7d2e <_printf_i+0x36>
    7d1c:	2a00      	cmp	r2, #0
    7d1e:	d100      	bne.n	7d22 <_printf_i+0x2a>
    7d20:	e099      	b.n	7e56 <_printf_i+0x15e>
    7d22:	2a58      	cmp	r2, #88	; 0x58
    7d24:	d054      	beq.n	7dd0 <_printf_i+0xd8>
    7d26:	0026      	movs	r6, r4
    7d28:	3642      	adds	r6, #66	; 0x42
    7d2a:	7032      	strb	r2, [r6, #0]
    7d2c:	e029      	b.n	7d82 <_printf_i+0x8a>
    7d2e:	2a64      	cmp	r2, #100	; 0x64
    7d30:	d001      	beq.n	7d36 <_printf_i+0x3e>
    7d32:	2a69      	cmp	r2, #105	; 0x69
    7d34:	d1f7      	bne.n	7d26 <_printf_i+0x2e>
    7d36:	6821      	ldr	r1, [r4, #0]
    7d38:	681a      	ldr	r2, [r3, #0]
    7d3a:	0608      	lsls	r0, r1, #24
    7d3c:	d523      	bpl.n	7d86 <_printf_i+0x8e>
    7d3e:	1d11      	adds	r1, r2, #4
    7d40:	6019      	str	r1, [r3, #0]
    7d42:	6815      	ldr	r5, [r2, #0]
    7d44:	e025      	b.n	7d92 <_printf_i+0x9a>
    7d46:	2a73      	cmp	r2, #115	; 0x73
    7d48:	d100      	bne.n	7d4c <_printf_i+0x54>
    7d4a:	e088      	b.n	7e5e <_printf_i+0x166>
    7d4c:	d808      	bhi.n	7d60 <_printf_i+0x68>
    7d4e:	2a6f      	cmp	r2, #111	; 0x6f
    7d50:	d029      	beq.n	7da6 <_printf_i+0xae>
    7d52:	2a70      	cmp	r2, #112	; 0x70
    7d54:	d1e7      	bne.n	7d26 <_printf_i+0x2e>
    7d56:	2220      	movs	r2, #32
    7d58:	6809      	ldr	r1, [r1, #0]
    7d5a:	430a      	orrs	r2, r1
    7d5c:	6022      	str	r2, [r4, #0]
    7d5e:	e003      	b.n	7d68 <_printf_i+0x70>
    7d60:	2a75      	cmp	r2, #117	; 0x75
    7d62:	d020      	beq.n	7da6 <_printf_i+0xae>
    7d64:	2a78      	cmp	r2, #120	; 0x78
    7d66:	d1de      	bne.n	7d26 <_printf_i+0x2e>
    7d68:	0022      	movs	r2, r4
    7d6a:	2178      	movs	r1, #120	; 0x78
    7d6c:	3245      	adds	r2, #69	; 0x45
    7d6e:	7011      	strb	r1, [r2, #0]
    7d70:	4a6c      	ldr	r2, [pc, #432]	; (7f24 <_printf_i+0x22c>)
    7d72:	e030      	b.n	7dd6 <_printf_i+0xde>
    7d74:	000e      	movs	r6, r1
    7d76:	681a      	ldr	r2, [r3, #0]
    7d78:	3642      	adds	r6, #66	; 0x42
    7d7a:	1d11      	adds	r1, r2, #4
    7d7c:	6019      	str	r1, [r3, #0]
    7d7e:	6813      	ldr	r3, [r2, #0]
    7d80:	7033      	strb	r3, [r6, #0]
    7d82:	2301      	movs	r3, #1
    7d84:	e079      	b.n	7e7a <_printf_i+0x182>
    7d86:	0649      	lsls	r1, r1, #25
    7d88:	d5d9      	bpl.n	7d3e <_printf_i+0x46>
    7d8a:	1d11      	adds	r1, r2, #4
    7d8c:	6019      	str	r1, [r3, #0]
    7d8e:	2300      	movs	r3, #0
    7d90:	5ed5      	ldrsh	r5, [r2, r3]
    7d92:	2d00      	cmp	r5, #0
    7d94:	da03      	bge.n	7d9e <_printf_i+0xa6>
    7d96:	232d      	movs	r3, #45	; 0x2d
    7d98:	9a04      	ldr	r2, [sp, #16]
    7d9a:	426d      	negs	r5, r5
    7d9c:	7013      	strb	r3, [r2, #0]
    7d9e:	4b62      	ldr	r3, [pc, #392]	; (7f28 <_printf_i+0x230>)
    7da0:	270a      	movs	r7, #10
    7da2:	9303      	str	r3, [sp, #12]
    7da4:	e02f      	b.n	7e06 <_printf_i+0x10e>
    7da6:	6820      	ldr	r0, [r4, #0]
    7da8:	6819      	ldr	r1, [r3, #0]
    7daa:	0605      	lsls	r5, r0, #24
    7dac:	d503      	bpl.n	7db6 <_printf_i+0xbe>
    7dae:	1d08      	adds	r0, r1, #4
    7db0:	6018      	str	r0, [r3, #0]
    7db2:	680d      	ldr	r5, [r1, #0]
    7db4:	e005      	b.n	7dc2 <_printf_i+0xca>
    7db6:	0640      	lsls	r0, r0, #25
    7db8:	d5f9      	bpl.n	7dae <_printf_i+0xb6>
    7dba:	680d      	ldr	r5, [r1, #0]
    7dbc:	1d08      	adds	r0, r1, #4
    7dbe:	6018      	str	r0, [r3, #0]
    7dc0:	b2ad      	uxth	r5, r5
    7dc2:	4b59      	ldr	r3, [pc, #356]	; (7f28 <_printf_i+0x230>)
    7dc4:	2708      	movs	r7, #8
    7dc6:	9303      	str	r3, [sp, #12]
    7dc8:	2a6f      	cmp	r2, #111	; 0x6f
    7dca:	d018      	beq.n	7dfe <_printf_i+0x106>
    7dcc:	270a      	movs	r7, #10
    7dce:	e016      	b.n	7dfe <_printf_i+0x106>
    7dd0:	3145      	adds	r1, #69	; 0x45
    7dd2:	700a      	strb	r2, [r1, #0]
    7dd4:	4a54      	ldr	r2, [pc, #336]	; (7f28 <_printf_i+0x230>)
    7dd6:	9203      	str	r2, [sp, #12]
    7dd8:	681a      	ldr	r2, [r3, #0]
    7dda:	6821      	ldr	r1, [r4, #0]
    7ddc:	1d10      	adds	r0, r2, #4
    7dde:	6018      	str	r0, [r3, #0]
    7de0:	6815      	ldr	r5, [r2, #0]
    7de2:	0608      	lsls	r0, r1, #24
    7de4:	d522      	bpl.n	7e2c <_printf_i+0x134>
    7de6:	07cb      	lsls	r3, r1, #31
    7de8:	d502      	bpl.n	7df0 <_printf_i+0xf8>
    7dea:	2320      	movs	r3, #32
    7dec:	4319      	orrs	r1, r3
    7dee:	6021      	str	r1, [r4, #0]
    7df0:	2710      	movs	r7, #16
    7df2:	2d00      	cmp	r5, #0
    7df4:	d103      	bne.n	7dfe <_printf_i+0x106>
    7df6:	2320      	movs	r3, #32
    7df8:	6822      	ldr	r2, [r4, #0]
    7dfa:	439a      	bics	r2, r3
    7dfc:	6022      	str	r2, [r4, #0]
    7dfe:	0023      	movs	r3, r4
    7e00:	2200      	movs	r2, #0
    7e02:	3343      	adds	r3, #67	; 0x43
    7e04:	701a      	strb	r2, [r3, #0]
    7e06:	6863      	ldr	r3, [r4, #4]
    7e08:	60a3      	str	r3, [r4, #8]
    7e0a:	2b00      	cmp	r3, #0
    7e0c:	db5c      	blt.n	7ec8 <_printf_i+0x1d0>
    7e0e:	2204      	movs	r2, #4
    7e10:	6821      	ldr	r1, [r4, #0]
    7e12:	4391      	bics	r1, r2
    7e14:	6021      	str	r1, [r4, #0]
    7e16:	2d00      	cmp	r5, #0
    7e18:	d158      	bne.n	7ecc <_printf_i+0x1d4>
    7e1a:	9e04      	ldr	r6, [sp, #16]
    7e1c:	2b00      	cmp	r3, #0
    7e1e:	d064      	beq.n	7eea <_printf_i+0x1f2>
    7e20:	0026      	movs	r6, r4
    7e22:	9b03      	ldr	r3, [sp, #12]
    7e24:	3642      	adds	r6, #66	; 0x42
    7e26:	781b      	ldrb	r3, [r3, #0]
    7e28:	7033      	strb	r3, [r6, #0]
    7e2a:	e05e      	b.n	7eea <_printf_i+0x1f2>
    7e2c:	0648      	lsls	r0, r1, #25
    7e2e:	d5da      	bpl.n	7de6 <_printf_i+0xee>
    7e30:	b2ad      	uxth	r5, r5
    7e32:	e7d8      	b.n	7de6 <_printf_i+0xee>
    7e34:	6809      	ldr	r1, [r1, #0]
    7e36:	681a      	ldr	r2, [r3, #0]
    7e38:	0608      	lsls	r0, r1, #24
    7e3a:	d505      	bpl.n	7e48 <_printf_i+0x150>
    7e3c:	1d11      	adds	r1, r2, #4
    7e3e:	6019      	str	r1, [r3, #0]
    7e40:	6813      	ldr	r3, [r2, #0]
    7e42:	6962      	ldr	r2, [r4, #20]
    7e44:	601a      	str	r2, [r3, #0]
    7e46:	e006      	b.n	7e56 <_printf_i+0x15e>
    7e48:	0649      	lsls	r1, r1, #25
    7e4a:	d5f7      	bpl.n	7e3c <_printf_i+0x144>
    7e4c:	1d11      	adds	r1, r2, #4
    7e4e:	6019      	str	r1, [r3, #0]
    7e50:	6813      	ldr	r3, [r2, #0]
    7e52:	8aa2      	ldrh	r2, [r4, #20]
    7e54:	801a      	strh	r2, [r3, #0]
    7e56:	2300      	movs	r3, #0
    7e58:	9e04      	ldr	r6, [sp, #16]
    7e5a:	6123      	str	r3, [r4, #16]
    7e5c:	e054      	b.n	7f08 <_printf_i+0x210>
    7e5e:	681a      	ldr	r2, [r3, #0]
    7e60:	1d11      	adds	r1, r2, #4
    7e62:	6019      	str	r1, [r3, #0]
    7e64:	6816      	ldr	r6, [r2, #0]
    7e66:	2100      	movs	r1, #0
    7e68:	6862      	ldr	r2, [r4, #4]
    7e6a:	0030      	movs	r0, r6
    7e6c:	f000 f85e 	bl	7f2c <memchr>
    7e70:	2800      	cmp	r0, #0
    7e72:	d001      	beq.n	7e78 <_printf_i+0x180>
    7e74:	1b80      	subs	r0, r0, r6
    7e76:	6060      	str	r0, [r4, #4]
    7e78:	6863      	ldr	r3, [r4, #4]
    7e7a:	6123      	str	r3, [r4, #16]
    7e7c:	2300      	movs	r3, #0
    7e7e:	9a04      	ldr	r2, [sp, #16]
    7e80:	7013      	strb	r3, [r2, #0]
    7e82:	e041      	b.n	7f08 <_printf_i+0x210>
    7e84:	6923      	ldr	r3, [r4, #16]
    7e86:	0032      	movs	r2, r6
    7e88:	9906      	ldr	r1, [sp, #24]
    7e8a:	9805      	ldr	r0, [sp, #20]
    7e8c:	9d07      	ldr	r5, [sp, #28]
    7e8e:	47a8      	blx	r5
    7e90:	1c43      	adds	r3, r0, #1
    7e92:	d043      	beq.n	7f1c <_printf_i+0x224>
    7e94:	6823      	ldr	r3, [r4, #0]
    7e96:	2500      	movs	r5, #0
    7e98:	079b      	lsls	r3, r3, #30
    7e9a:	d40f      	bmi.n	7ebc <_printf_i+0x1c4>
    7e9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7e9e:	68e0      	ldr	r0, [r4, #12]
    7ea0:	4298      	cmp	r0, r3
    7ea2:	da3d      	bge.n	7f20 <_printf_i+0x228>
    7ea4:	0018      	movs	r0, r3
    7ea6:	e03b      	b.n	7f20 <_printf_i+0x228>
    7ea8:	0022      	movs	r2, r4
    7eaa:	2301      	movs	r3, #1
    7eac:	3219      	adds	r2, #25
    7eae:	9906      	ldr	r1, [sp, #24]
    7eb0:	9805      	ldr	r0, [sp, #20]
    7eb2:	9e07      	ldr	r6, [sp, #28]
    7eb4:	47b0      	blx	r6
    7eb6:	1c43      	adds	r3, r0, #1
    7eb8:	d030      	beq.n	7f1c <_printf_i+0x224>
    7eba:	3501      	adds	r5, #1
    7ebc:	68e3      	ldr	r3, [r4, #12]
    7ebe:	9a09      	ldr	r2, [sp, #36]	; 0x24
    7ec0:	1a9b      	subs	r3, r3, r2
    7ec2:	429d      	cmp	r5, r3
    7ec4:	dbf0      	blt.n	7ea8 <_printf_i+0x1b0>
    7ec6:	e7e9      	b.n	7e9c <_printf_i+0x1a4>
    7ec8:	2d00      	cmp	r5, #0
    7eca:	d0a9      	beq.n	7e20 <_printf_i+0x128>
    7ecc:	9e04      	ldr	r6, [sp, #16]
    7ece:	0028      	movs	r0, r5
    7ed0:	0039      	movs	r1, r7
    7ed2:	f7fd fd23 	bl	591c <__aeabi_uidivmod>
    7ed6:	9b03      	ldr	r3, [sp, #12]
    7ed8:	3e01      	subs	r6, #1
    7eda:	5c5b      	ldrb	r3, [r3, r1]
    7edc:	0028      	movs	r0, r5
    7ede:	7033      	strb	r3, [r6, #0]
    7ee0:	0039      	movs	r1, r7
    7ee2:	f7fd fc95 	bl	5810 <__udivsi3>
    7ee6:	1e05      	subs	r5, r0, #0
    7ee8:	d1f1      	bne.n	7ece <_printf_i+0x1d6>
    7eea:	2f08      	cmp	r7, #8
    7eec:	d109      	bne.n	7f02 <_printf_i+0x20a>
    7eee:	6823      	ldr	r3, [r4, #0]
    7ef0:	07db      	lsls	r3, r3, #31
    7ef2:	d506      	bpl.n	7f02 <_printf_i+0x20a>
    7ef4:	6863      	ldr	r3, [r4, #4]
    7ef6:	6922      	ldr	r2, [r4, #16]
    7ef8:	4293      	cmp	r3, r2
    7efa:	dc02      	bgt.n	7f02 <_printf_i+0x20a>
    7efc:	2330      	movs	r3, #48	; 0x30
    7efe:	3e01      	subs	r6, #1
    7f00:	7033      	strb	r3, [r6, #0]
    7f02:	9b04      	ldr	r3, [sp, #16]
    7f04:	1b9b      	subs	r3, r3, r6
    7f06:	6123      	str	r3, [r4, #16]
    7f08:	9b07      	ldr	r3, [sp, #28]
    7f0a:	aa09      	add	r2, sp, #36	; 0x24
    7f0c:	9300      	str	r3, [sp, #0]
    7f0e:	0021      	movs	r1, r4
    7f10:	9b06      	ldr	r3, [sp, #24]
    7f12:	9805      	ldr	r0, [sp, #20]
    7f14:	f7ff fe82 	bl	7c1c <_printf_common>
    7f18:	1c43      	adds	r3, r0, #1
    7f1a:	d1b3      	bne.n	7e84 <_printf_i+0x18c>
    7f1c:	2001      	movs	r0, #1
    7f1e:	4240      	negs	r0, r0
    7f20:	b00b      	add	sp, #44	; 0x2c
    7f22:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7f24:	000082da 	.word	0x000082da
    7f28:	000082c9 	.word	0x000082c9

00007f2c <memchr>:
    7f2c:	b2c9      	uxtb	r1, r1
    7f2e:	1882      	adds	r2, r0, r2
    7f30:	4290      	cmp	r0, r2
    7f32:	d101      	bne.n	7f38 <memchr+0xc>
    7f34:	2000      	movs	r0, #0
    7f36:	4770      	bx	lr
    7f38:	7803      	ldrb	r3, [r0, #0]
    7f3a:	428b      	cmp	r3, r1
    7f3c:	d0fb      	beq.n	7f36 <memchr+0xa>
    7f3e:	3001      	adds	r0, #1
    7f40:	e7f6      	b.n	7f30 <memchr+0x4>

00007f42 <memmove>:
    7f42:	b510      	push	{r4, lr}
    7f44:	4288      	cmp	r0, r1
    7f46:	d902      	bls.n	7f4e <memmove+0xc>
    7f48:	188b      	adds	r3, r1, r2
    7f4a:	4298      	cmp	r0, r3
    7f4c:	d308      	bcc.n	7f60 <memmove+0x1e>
    7f4e:	2300      	movs	r3, #0
    7f50:	429a      	cmp	r2, r3
    7f52:	d007      	beq.n	7f64 <memmove+0x22>
    7f54:	5ccc      	ldrb	r4, [r1, r3]
    7f56:	54c4      	strb	r4, [r0, r3]
    7f58:	3301      	adds	r3, #1
    7f5a:	e7f9      	b.n	7f50 <memmove+0xe>
    7f5c:	5c8b      	ldrb	r3, [r1, r2]
    7f5e:	5483      	strb	r3, [r0, r2]
    7f60:	3a01      	subs	r2, #1
    7f62:	d2fb      	bcs.n	7f5c <memmove+0x1a>
    7f64:	bd10      	pop	{r4, pc}
	...

00007f68 <_free_r>:
    7f68:	b570      	push	{r4, r5, r6, lr}
    7f6a:	0005      	movs	r5, r0
    7f6c:	2900      	cmp	r1, #0
    7f6e:	d010      	beq.n	7f92 <_free_r+0x2a>
    7f70:	1f0c      	subs	r4, r1, #4
    7f72:	6823      	ldr	r3, [r4, #0]
    7f74:	2b00      	cmp	r3, #0
    7f76:	da00      	bge.n	7f7a <_free_r+0x12>
    7f78:	18e4      	adds	r4, r4, r3
    7f7a:	0028      	movs	r0, r5
    7f7c:	f000 f8d4 	bl	8128 <__malloc_lock>
    7f80:	4a1d      	ldr	r2, [pc, #116]	; (7ff8 <_free_r+0x90>)
    7f82:	6813      	ldr	r3, [r2, #0]
    7f84:	2b00      	cmp	r3, #0
    7f86:	d105      	bne.n	7f94 <_free_r+0x2c>
    7f88:	6063      	str	r3, [r4, #4]
    7f8a:	6014      	str	r4, [r2, #0]
    7f8c:	0028      	movs	r0, r5
    7f8e:	f000 f8cc 	bl	812a <__malloc_unlock>
    7f92:	bd70      	pop	{r4, r5, r6, pc}
    7f94:	42a3      	cmp	r3, r4
    7f96:	d909      	bls.n	7fac <_free_r+0x44>
    7f98:	6821      	ldr	r1, [r4, #0]
    7f9a:	1860      	adds	r0, r4, r1
    7f9c:	4283      	cmp	r3, r0
    7f9e:	d1f3      	bne.n	7f88 <_free_r+0x20>
    7fa0:	6818      	ldr	r0, [r3, #0]
    7fa2:	685b      	ldr	r3, [r3, #4]
    7fa4:	1841      	adds	r1, r0, r1
    7fa6:	6021      	str	r1, [r4, #0]
    7fa8:	e7ee      	b.n	7f88 <_free_r+0x20>
    7faa:	0013      	movs	r3, r2
    7fac:	685a      	ldr	r2, [r3, #4]
    7fae:	2a00      	cmp	r2, #0
    7fb0:	d001      	beq.n	7fb6 <_free_r+0x4e>
    7fb2:	42a2      	cmp	r2, r4
    7fb4:	d9f9      	bls.n	7faa <_free_r+0x42>
    7fb6:	6819      	ldr	r1, [r3, #0]
    7fb8:	1858      	adds	r0, r3, r1
    7fba:	42a0      	cmp	r0, r4
    7fbc:	d10b      	bne.n	7fd6 <_free_r+0x6e>
    7fbe:	6820      	ldr	r0, [r4, #0]
    7fc0:	1809      	adds	r1, r1, r0
    7fc2:	1858      	adds	r0, r3, r1
    7fc4:	6019      	str	r1, [r3, #0]
    7fc6:	4282      	cmp	r2, r0
    7fc8:	d1e0      	bne.n	7f8c <_free_r+0x24>
    7fca:	6810      	ldr	r0, [r2, #0]
    7fcc:	6852      	ldr	r2, [r2, #4]
    7fce:	1841      	adds	r1, r0, r1
    7fd0:	6019      	str	r1, [r3, #0]
    7fd2:	605a      	str	r2, [r3, #4]
    7fd4:	e7da      	b.n	7f8c <_free_r+0x24>
    7fd6:	42a0      	cmp	r0, r4
    7fd8:	d902      	bls.n	7fe0 <_free_r+0x78>
    7fda:	230c      	movs	r3, #12
    7fdc:	602b      	str	r3, [r5, #0]
    7fde:	e7d5      	b.n	7f8c <_free_r+0x24>
    7fe0:	6821      	ldr	r1, [r4, #0]
    7fe2:	1860      	adds	r0, r4, r1
    7fe4:	4282      	cmp	r2, r0
    7fe6:	d103      	bne.n	7ff0 <_free_r+0x88>
    7fe8:	6810      	ldr	r0, [r2, #0]
    7fea:	6852      	ldr	r2, [r2, #4]
    7fec:	1841      	adds	r1, r0, r1
    7fee:	6021      	str	r1, [r4, #0]
    7ff0:	6062      	str	r2, [r4, #4]
    7ff2:	605c      	str	r4, [r3, #4]
    7ff4:	e7ca      	b.n	7f8c <_free_r+0x24>
    7ff6:	46c0      	nop			; (mov r8, r8)
    7ff8:	200000bc 	.word	0x200000bc

00007ffc <_malloc_r>:
    7ffc:	2303      	movs	r3, #3
    7ffe:	b570      	push	{r4, r5, r6, lr}
    8000:	1ccd      	adds	r5, r1, #3
    8002:	439d      	bics	r5, r3
    8004:	3508      	adds	r5, #8
    8006:	0006      	movs	r6, r0
    8008:	2d0c      	cmp	r5, #12
    800a:	d21e      	bcs.n	804a <_malloc_r+0x4e>
    800c:	250c      	movs	r5, #12
    800e:	42a9      	cmp	r1, r5
    8010:	d81d      	bhi.n	804e <_malloc_r+0x52>
    8012:	0030      	movs	r0, r6
    8014:	f000 f888 	bl	8128 <__malloc_lock>
    8018:	4a25      	ldr	r2, [pc, #148]	; (80b0 <_malloc_r+0xb4>)
    801a:	6814      	ldr	r4, [r2, #0]
    801c:	0021      	movs	r1, r4
    801e:	2900      	cmp	r1, #0
    8020:	d119      	bne.n	8056 <_malloc_r+0x5a>
    8022:	4c24      	ldr	r4, [pc, #144]	; (80b4 <_malloc_r+0xb8>)
    8024:	6823      	ldr	r3, [r4, #0]
    8026:	2b00      	cmp	r3, #0
    8028:	d103      	bne.n	8032 <_malloc_r+0x36>
    802a:	0030      	movs	r0, r6
    802c:	f000 f86a 	bl	8104 <_sbrk_r>
    8030:	6020      	str	r0, [r4, #0]
    8032:	0029      	movs	r1, r5
    8034:	0030      	movs	r0, r6
    8036:	f000 f865 	bl	8104 <_sbrk_r>
    803a:	1c43      	adds	r3, r0, #1
    803c:	d12c      	bne.n	8098 <_malloc_r+0x9c>
    803e:	230c      	movs	r3, #12
    8040:	0030      	movs	r0, r6
    8042:	6033      	str	r3, [r6, #0]
    8044:	f000 f871 	bl	812a <__malloc_unlock>
    8048:	e003      	b.n	8052 <_malloc_r+0x56>
    804a:	2d00      	cmp	r5, #0
    804c:	dadf      	bge.n	800e <_malloc_r+0x12>
    804e:	230c      	movs	r3, #12
    8050:	6033      	str	r3, [r6, #0]
    8052:	2000      	movs	r0, #0
    8054:	bd70      	pop	{r4, r5, r6, pc}
    8056:	680b      	ldr	r3, [r1, #0]
    8058:	1b5b      	subs	r3, r3, r5
    805a:	d41a      	bmi.n	8092 <_malloc_r+0x96>
    805c:	2b0b      	cmp	r3, #11
    805e:	d903      	bls.n	8068 <_malloc_r+0x6c>
    8060:	600b      	str	r3, [r1, #0]
    8062:	18cc      	adds	r4, r1, r3
    8064:	6025      	str	r5, [r4, #0]
    8066:	e003      	b.n	8070 <_malloc_r+0x74>
    8068:	428c      	cmp	r4, r1
    806a:	d10e      	bne.n	808a <_malloc_r+0x8e>
    806c:	6863      	ldr	r3, [r4, #4]
    806e:	6013      	str	r3, [r2, #0]
    8070:	0030      	movs	r0, r6
    8072:	f000 f85a 	bl	812a <__malloc_unlock>
    8076:	0020      	movs	r0, r4
    8078:	2207      	movs	r2, #7
    807a:	300b      	adds	r0, #11
    807c:	1d23      	adds	r3, r4, #4
    807e:	4390      	bics	r0, r2
    8080:	1ac3      	subs	r3, r0, r3
    8082:	d0e7      	beq.n	8054 <_malloc_r+0x58>
    8084:	425a      	negs	r2, r3
    8086:	50e2      	str	r2, [r4, r3]
    8088:	e7e4      	b.n	8054 <_malloc_r+0x58>
    808a:	684b      	ldr	r3, [r1, #4]
    808c:	6063      	str	r3, [r4, #4]
    808e:	000c      	movs	r4, r1
    8090:	e7ee      	b.n	8070 <_malloc_r+0x74>
    8092:	000c      	movs	r4, r1
    8094:	6849      	ldr	r1, [r1, #4]
    8096:	e7c2      	b.n	801e <_malloc_r+0x22>
    8098:	2303      	movs	r3, #3
    809a:	1cc4      	adds	r4, r0, #3
    809c:	439c      	bics	r4, r3
    809e:	42a0      	cmp	r0, r4
    80a0:	d0e0      	beq.n	8064 <_malloc_r+0x68>
    80a2:	1a21      	subs	r1, r4, r0
    80a4:	0030      	movs	r0, r6
    80a6:	f000 f82d 	bl	8104 <_sbrk_r>
    80aa:	1c43      	adds	r3, r0, #1
    80ac:	d1da      	bne.n	8064 <_malloc_r+0x68>
    80ae:	e7c6      	b.n	803e <_malloc_r+0x42>
    80b0:	200000bc 	.word	0x200000bc
    80b4:	200000c0 	.word	0x200000c0

000080b8 <_realloc_r>:
    80b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    80ba:	0007      	movs	r7, r0
    80bc:	000d      	movs	r5, r1
    80be:	0016      	movs	r6, r2
    80c0:	2900      	cmp	r1, #0
    80c2:	d105      	bne.n	80d0 <_realloc_r+0x18>
    80c4:	0011      	movs	r1, r2
    80c6:	f7ff ff99 	bl	7ffc <_malloc_r>
    80ca:	0004      	movs	r4, r0
    80cc:	0020      	movs	r0, r4
    80ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    80d0:	2a00      	cmp	r2, #0
    80d2:	d103      	bne.n	80dc <_realloc_r+0x24>
    80d4:	f7ff ff48 	bl	7f68 <_free_r>
    80d8:	0034      	movs	r4, r6
    80da:	e7f7      	b.n	80cc <_realloc_r+0x14>
    80dc:	f000 f826 	bl	812c <_malloc_usable_size_r>
    80e0:	002c      	movs	r4, r5
    80e2:	4286      	cmp	r6, r0
    80e4:	d9f2      	bls.n	80cc <_realloc_r+0x14>
    80e6:	0031      	movs	r1, r6
    80e8:	0038      	movs	r0, r7
    80ea:	f7ff ff87 	bl	7ffc <_malloc_r>
    80ee:	1e04      	subs	r4, r0, #0
    80f0:	d0ec      	beq.n	80cc <_realloc_r+0x14>
    80f2:	0029      	movs	r1, r5
    80f4:	0032      	movs	r2, r6
    80f6:	f7ff fbf7 	bl	78e8 <memcpy>
    80fa:	0029      	movs	r1, r5
    80fc:	0038      	movs	r0, r7
    80fe:	f7ff ff33 	bl	7f68 <_free_r>
    8102:	e7e3      	b.n	80cc <_realloc_r+0x14>

00008104 <_sbrk_r>:
    8104:	2300      	movs	r3, #0
    8106:	b570      	push	{r4, r5, r6, lr}
    8108:	4c06      	ldr	r4, [pc, #24]	; (8124 <_sbrk_r+0x20>)
    810a:	0005      	movs	r5, r0
    810c:	0008      	movs	r0, r1
    810e:	6023      	str	r3, [r4, #0]
    8110:	f7fb fd6a 	bl	3be8 <_sbrk>
    8114:	1c43      	adds	r3, r0, #1
    8116:	d103      	bne.n	8120 <_sbrk_r+0x1c>
    8118:	6823      	ldr	r3, [r4, #0]
    811a:	2b00      	cmp	r3, #0
    811c:	d000      	beq.n	8120 <_sbrk_r+0x1c>
    811e:	602b      	str	r3, [r5, #0]
    8120:	bd70      	pop	{r4, r5, r6, pc}
    8122:	46c0      	nop			; (mov r8, r8)
    8124:	200001e0 	.word	0x200001e0

00008128 <__malloc_lock>:
    8128:	4770      	bx	lr

0000812a <__malloc_unlock>:
    812a:	4770      	bx	lr

0000812c <_malloc_usable_size_r>:
    812c:	1f0b      	subs	r3, r1, #4
    812e:	681b      	ldr	r3, [r3, #0]
    8130:	1f18      	subs	r0, r3, #4
    8132:	2b00      	cmp	r3, #0
    8134:	da01      	bge.n	813a <_malloc_usable_size_r+0xe>
    8136:	580b      	ldr	r3, [r1, r0]
    8138:	18c0      	adds	r0, r0, r3
    813a:	4770      	bx	lr
    813c:	454b4157 	.word	0x454b4157
    8140:	0a0d5055 	.word	0x0a0d5055
    8144:	00000000 	.word	0x00000000
    8148:	6f6f6f62 	.word	0x6f6f6f62
    814c:	00006232 	.word	0x00006232
    8150:	42000800 	.word	0x42000800
    8154:	42000c00 	.word	0x42000c00
    8158:	42001000 	.word	0x42001000
    815c:	42001400 	.word	0x42001400
    8160:	42001800 	.word	0x42001800
    8164:	42001c00 	.word	0x42001c00
    8168:	00003166 	.word	0x00003166
    816c:	000031e0 	.word	0x000031e0
    8170:	000031e0 	.word	0x000031e0
    8174:	00003184 	.word	0x00003184
    8178:	0000317e 	.word	0x0000317e
    817c:	0000318a 	.word	0x0000318a
    8180:	0000316c 	.word	0x0000316c
    8184:	00003190 	.word	0x00003190
    8188:	000031c6 	.word	0x000031c6
    818c:	000032bc 	.word	0x000032bc
    8190:	0000330c 	.word	0x0000330c
    8194:	0000330c 	.word	0x0000330c
    8198:	00003308 	.word	0x00003308
    819c:	000032ae 	.word	0x000032ae
    81a0:	000032ce 	.word	0x000032ce
    81a4:	0000329e 	.word	0x0000329e
    81a8:	000032e0 	.word	0x000032e0
    81ac:	000032f2 	.word	0x000032f2
    81b0:	6f420a0d 	.word	0x6f420a0d
    81b4:	6e69746f 	.word	0x6e69746f
    81b8:	726e2067 	.word	0x726e2067
    81bc:	6c343266 	.word	0x6c343266
    81c0:	6e2d3130 	.word	0x6e2d3130
    81c4:	2065646f 	.word	0x2065646f
    81c8:	7061202d 	.word	0x7061202d
    81cc:	000a0d70 	.word	0x000a0d70
    81d0:	76205753 	.word	0x76205753
    81d4:	69737265 	.word	0x69737265
    81d8:	203a6e6f 	.word	0x203a6e6f
    81dc:	0a0d6425 	.word	0x0a0d6425
    81e0:	00000000 	.word	0x00000000
    81e4:	2d2d2d2d 	.word	0x2d2d2d2d
    81e8:	2d2d2d2d 	.word	0x2d2d2d2d
    81ec:	2d2d2d2d 	.word	0x2d2d2d2d
    81f0:	2d2d2d2d 	.word	0x2d2d2d2d
    81f4:	00000a0d 	.word	0x00000a0d
    81f8:	25093a54 	.word	0x25093a54
    81fc:	480a0d64 	.word	0x480a0d64
    8200:	6425093a 	.word	0x6425093a
    8204:	3a500a0d 	.word	0x3a500a0d
    8208:	646c2509 	.word	0x646c2509
    820c:	0a0d0a0d 	.word	0x0a0d0a0d
    8210:	00000000 	.word	0x00000000
    8214:	00676f6c 	.word	0x00676f6c
    8218:	00000000 	.word	0x00000000
    821c:	31676f6c 	.word	0x31676f6c
    8220:	00000030 	.word	0x00000030
    8224:	00776f70 	.word	0x00776f70

00008228 <TWO52>:
    8228:	00000000 43300000 00000000 c3300000     ......0C......0.
    8238:	000063d0 000063b2 0000636c 0000628a     .c...c..lc...b..
    8248:	0000636c 000063a4 0000636c 0000628a     lc...c..lc...b..
    8258:	000063b2 000063b2 000063a4 0000628a     .c...c...c...b..
    8268:	00006282 00006282 00006282 000065e8     .b...b...b...e..
    8278:	00006c30 00006af0 00006af0 00006aec     0l...j...j...j..
    8288:	00006c08 00006c08 00006bfa 00006aec     .l...l...k...j..
    8298:	00006c08 00006bfa 00006c08 00006aec     .l...k...l...j..
    82a8:	00006c10 00006c10 00006c10 00006e14     .l...l...l...n..
    82b8:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    82c8:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    82d8:	31300046 35343332 39383736 64636261     F.0123456789abcd
    82e8:	00006665                                ef..

000082ec <_init>:
    82ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    82ee:	46c0      	nop			; (mov r8, r8)
    82f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    82f2:	bc08      	pop	{r3}
    82f4:	469e      	mov	lr, r3
    82f6:	4770      	bx	lr

000082f8 <__init_array_start>:
    82f8:	000000dd 	.word	0x000000dd

000082fc <_fini>:
    82fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    82fe:	46c0      	nop			; (mov r8, r8)
    8300:	bcf8      	pop	{r3, r4, r5, r6, r7}
    8302:	bc08      	pop	{r3}
    8304:	469e      	mov	lr, r3
    8306:	4770      	bx	lr

00008308 <__fini_array_start>:
    8308:	000000b5 	.word	0x000000b5
